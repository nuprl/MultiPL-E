name: HumanEval_135_can_arrange
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Create a function which returns the largest index of an element\
  \ which\n    // is not greater than or equal to the element immediately preceding\
  \ it. If\n    // no such element exists then return -1. The given list will not\
  \ contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n \
  \   // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==\
  \ (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new\
  \ long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,\
  \ (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,\
  \ (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new\
  \ List<long>())) == (-1L));\n    }\n\n}\n"
completions: ["        long maxVal = -1;\n        long prevVal = 0;\n        long\
    \ currVal = 0;\n        bool found = false;\n        foreach (var num in arr)\
    \ {\n            if (num >= prevVal && num < currVal) {\n                found\
    \ = true;\n                maxVal = num;\n            } else if (found == true)\
    \ {\n                maxVal = -1;\n            }\n            prevVal = currVal;\n\
    \            currVal = num;\n        }\n        return maxVal;", "        int\
    \ n = arr.Count;\n        for (int i = 0; i < n - 1; i++)\n            for (int\
    \ j = i + 1; j < n; j++)\n                if (arr[i] > arr[j])\n             \
    \       return j;\n        return -1;", "        long result = -1L;\n        long\
    \ smallest = arr.Min();\n        arr.Sort();\n        long largest = arr.Last();\n\
    \        foreach (long cur in arr.Skip(1))\n        {\n            if (cur < smallest\
    \ && result < smallest) result = smallest;\n            if (cur > largest && result\
    \ > largest) result = largest;\n        }\n        return result;", "        var\
    \ ans = -1L;\n        foreach(var item in arr)\n            if (ans == -1L)\n\
    \                ans = item;\n            else\n                if (item <= ans)\n\
    \                    ans = -1;\n        return ans;", "        if (arr.Count <\
    \ 2)\n            return -1;\n        long max = arr.FirstOrDefault();\n     \
    \   for (int i = 0; i < arr.Count - 1; i++)\n            if (arr[i] > max)\n \
    \               max = arr[i];\n        return max;", "        int largest = -1;\n\
    \        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] > arr[largest])\
    \ {\n                largest = i;\n            }\n        }\n        return largest;",
  "        int n = arr.Count;\n        if (n == 0) return -1;\n\n        int max =\
    \ arr.First();\n        long max = max;\n        long max = max;\n        for\
    \ (int i = 1; i < n; i++) {\n            if (arr[i] <= max) continue;\n      \
    \      max = arr[i];\n        }\n        return max;", "        if (arr.Count\
    \ == 0) return -1;\n        var result = new List<long>();\n        // Get a sorted\
    \ version of the array\n        var arr = arr.OrderBy(x => x);\n        // Find\
    \ the largest value not greater than any value in the array\n        long largest\
    \ = arr.First();\n        for (int i = 1; i < arr.Count; i++) {\n            if\
    \ (arr[i] < largest) break;\n            largest = arr[i];\n        }\n      \
    \  // If the largest value is not greater than any value in the array,\n     \
    \   // then -1 is returned.\n        if (largest == arr.First()) return -1;\n\
    \        // If the largest value is not greater than any value in the array,\n\
    \        // then the largest value is not greater than any value in the array\n\
    \        // so the largest value cannot be greater than any value in the array\n\
    \        // so the function returns -1\n        if (largest < arr.First()) return\
    \ -1;\n        // If the largest value is not greater than any value in the array,\n\
    \        // then the largest value is not greater than any value in the array\n\
    \        // so the largest value cannot be greater than any value in the array\n\
    \        // so the function returns -1\n        if (largest < arr.First()) {\n\
    \            // If there are duplicate values in the array then return the index\n\
    \            // of the first duplicate value.\n            var dup = arr.Where((x,\
    \ index) => x != arr.First() && x == arr[index]).First();\n            if (dup\
    \ == arr.First()) return -1;\n            if (dup < arr.First()) return -1;\n\
    \        }\n        // The largest value in the array is equal to the value of\
    \ the first\n        // duplicate value in the array so the function returns the\
    \ index of the\n        // duplicate value.\n        return arr.IndexOf(dup);",
  "        long maxVal = arr.First();\n        long tempMaxVal = maxVal;\n       \
    \ int i;\n        for (i = 1; i < arr.Count; i++) {\n            if (arr[i] >=\
    \ tempMaxVal) {\n                tempMaxVal = arr[i];\n            }\n       \
    \ }\n        if (tempMaxVal >= maxVal) {\n            return -1;\n        }\n\
    \        return maxVal;", "        var max = arr.First();\n        for (var i\
    \ = 1; i < arr.Count; i++) {\n            if (max < arr[i])\n                max\
    \ = arr[i];\n        }\n        return max < arr.First() ? -1 : max;", "     \
    \   var list = arr.ToList();\n        list.Sort();\n        var index = list.BinarySearch((long)1L);\n\
    \        if (index < 0)\n            return -1;\n        return list[index];",
  "        long maxVal = arr[0];\n        long index = -1;\n\n        if (arr.Count\
    \ == 0) {\n            return -1;\n        }\n\n        arr.Sort();\n\n      \
    \  for (var i = 1; i < arr.Count; i++) {\n            if (arr[i] <= maxVal) {\n\
    \                maxVal = arr[i];\n                index = i;\n            }\n\
    \        }\n\n        return index;", "        long maxIndex = -1;\n        long\
    \ currentIndex = 0;\n\n        foreach(var item in arr)\n        {\n         \
    \   if(item < arr[currentIndex])\n            {\n                currentIndex\
    \ = arr.IndexOf(item, currentIndex + 1);\n            }\n            else\n  \
    \          {\n                if(currentIndex > maxIndex) maxIndex = currentIndex;\n\
    \                currentIndex++;\n            }\n        }\n\n        return maxIndex\
    \ > -1 ? maxIndex : -1;", "        double maxValue = double.MaxValue;\n      \
    \  double currentValue = double.MaxValue;\n        long largestIndex;\n      \
    \  for (int i = 0; i < arr.Count - 1; i++) {\n            if (arr[i] <= currentValue)\
    \ {\n                continue;\n            }\n            currentValue = arr[i];\n\
    \            largestIndex = i;\n            for (int j = i; j < arr.Count; j++)\
    \ {\n                if (arr[j] <= currentValue) {\n                    continue;\n\
    \                }\n                currentValue = arr[j];\n                largestIndex\
    \ = j;\n                if (currentValue > maxValue) {\n                    maxValue\
    \ = currentValue;\n                }\n            }\n        }\n        if (largestIndex\
    \ == arr.Count - 1 && maxValue == double.MaxValue) {\n            return -1;\n\
    \        }\n        return largestIndex;", '        return arr.TakeWhile(x =>
    x < arr.Skip(1).FirstOrDefault()).LastOrDefault();', "        if (arr.Count ==\
    \ 0) return -1L;\n        var maxIndex = 0;\n        var maxElement = arr[0];\n\
    \        for (int i = 1; i < arr.Count; i++) {\n            if (maxElement >=\
    \ arr[i]) {\n                maxIndex = i;\n                maxElement = arr[i];\n\
    \            }\n        }\n        return maxIndex;", "        int maxIndex =\
    \ 0;\n        long maxValue = arr[0];\n        for (int i = 1; i < arr.Count;\
    \ i++) {\n            long value = arr[i];\n            if (value > maxValue)\
    \ {\n                maxIndex = i;\n                maxValue = value;\n      \
    \      }\n        }\n        if (maxIndex == arr.Count - 1) {\n            return\
    \ -1;\n        }\n        return maxIndex;", "        long maxIdx = -1;\n    \
    \    long curIdx = arr.First();\n        foreach (var x in arr)\n        {\n \
    \           if (x > curIdx)\n            {\n                maxIdx = curIdx;\n\
    \                curIdx = x;\n            }\n        }\n        return maxIdx;",
  "        long max = long.MaxValue;\n        int maxIndex = 0;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] >= max) {\n           \
    \     max = arr[i];\n                maxIndex = i;\n            }\n        }\n\
    \        if (maxIndex >= arr.Count) return -1;\n        return maxIndex;", " \
    \       long res = -1L;\n        bool flag = false;\n        foreach (var item\
    \ in arr) {\n            if (item != (-1L)) {\n                if (item > (-1L))\
    \ {\n                    flag = true;\n                    res = item;\n     \
    \           }\n            }\n        }\n        return (flag) ? res : -1L;",
  "        // Your code here\n        int maxIndex = -1;\n        long currentElement\
    \ = arr.First();\n        for (int i = 1; i < arr.Count; i++) {\n            if\
    \ (arr[i] < currentElement) {\n                currentElement = arr[i];\n    \
    \            maxIndex = i;\n            }\n        }\n        return maxIndex;",
  "        // Find maximum index greater than or equal to any element.\n        int\
    \ max = -1;\n        int cur = -1;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (max < 0 || arr[i] >= arr[max]) {\n                max = i;\n\
    \            }\n            if (arr[i] >= arr[cur]) {\n                cur = i;\n\
    \            }\n        }\n        return cur < arr.Count ? cur : -1;", "    \
    \    long retval = -1;\n        foreach (var l in arr) {\n            if (l <\
    \ arr[0]) {\n                retval = l;\n                break;\n           \
    \ }\n        }\n        return retval;", "        long largestIndex = 0;\n   \
    \     long tempIndex = 0;\n        int i;\n\n        for (i = 0; i < arr.Count\
    \ - 1; i++) {\n            if (arr[i] >= arr[i + 1]) {\n                tempIndex\
    \ = arr[i + 1];\n                arr[i + 1] = arr[i];\n                arr[i]\
    \ = tempIndex;\n            }\n        }\n        if (tempIndex > largestIndex)\
    \ {\n            largestIndex = tempIndex;\n        }\n        return largestIndex;",
  "        var result = -1;\n        if (arr.Count < 2) return result;\n        var\
    \ first = arr[0];\n        foreach (var val in arr) {\n            if (val > first)\
    \ {\n                result = Math.Max(val, result);\n            }\n        }\n\
    \        return result;", "        var result = -1;\n        var index = 0;\n\
    \        var prev = -2;\n        arr.Sort();\n        long minValue = arr[0];\n\
    \        bool first = true;\n        while (index < arr.Count - 1) {\n       \
    \     if (arr.ElementAt(index) > arr.ElementAt(index + 1)) {\n               \
    \ if (first) {\n                    first = false;\n                    prev++;\n\
    \                } else {\n                    result = arr.ElementAt(prev);\n\
    \                    break;\n                }\n            } else {\n       \
    \         prev++;\n            }\n            index++;\n        }\n        return\
    \ result;", "        // Your code goes here\n        if (arr.Count == 0) return\
    \ -1L;\n        var index = arr.LastIndex(lst => lst <= arr[0]) ?? -1L;\n    \
    \    return index;", "        if (arr == null || arr.Count == 0) return -1;\n\
    \        if (arr.Count == 1) return 0;\n        if (arr.Count == 2) return 1;\n\
    \        if (arr.Count == 3) return 2;\n        if (arr.Count > 3) return -1;\n\
    \        var result = -1;\n        var temp = 0;\n        arr.Reverse();\n   \
    \     foreach (var item in arr)\n        {\n            if (item <= temp)\n  \
    \          {\n                if (result == -1) result = temp;\n             \
    \   else\n                {\n                    result = Math.Max(item, result);\n\
    \                }\n            }\n            else\n            {\n         \
    \       temp = item;\n            }\n        }\n        return result;", "   \
    \     long lastIndex = -1;\n        arr.Sort();\n        for (long i = 1; i <\
    \ arr.Count; i++) {\n            if (arr[i] > arr[lastIndex]) {\n            \
    \    lastIndex = i;\n            }\n        }\n        return lastIndex;", " \
    \       long result = -1L;\n        long maximum = 0L;\n        for (int i = 0;\
    \ i < arr.Count - 1; i++) {\n            if (arr[i] > arr[i + 1]) {\n        \
    \        result = i;\n                maximum = arr[i];\n            }\n     \
    \   }\n        return result;", "        if (arr == null || arr.Count == 0)\n\
    \            return -1;\n        long max = arr[0], maxIndex = -1, i = 1, j;\n\
    \        while (i < arr.Count && arr[i] <= max) {\n            if (arr[i] > max)\n\
    \                max = arr[i];\n            maxIndex = i;\n            i++;\n\
    \        }\n        if (maxIndex == arr.Count - 1)\n            return -1;\n \
    \       bool found = false;\n        for (i = arr.Count - 1; i >= maxIndex; i--)\
    \ {\n            j = i + 1;\n            while (j < arr.Count && arr[j] < arr[i])\
    \ {\n                if (arr[j] > max)\n                    max = arr[j];\n  \
    \              j++;\n            }\n            if (arr[i] < max)\n          \
    \      found = true;\n        }\n        return found ? maxIndex : -1;", "   \
    \     int size = arr.Count;\n        if (size == 0) return -1;\n        long largest\
    \ = arr[0];\n        int largestIndex = 0;\n        for (int index = 1; index\
    \ < size; index++) {\n            if (arr[index] > largest) {\n              \
    \  largest = arr[index];\n                largestIndex = index;\n            }\n\
    \        }\n        if (largest == arr[largestIndex]) {\n            return -1;\n\
    \        } else {\n            return largestIndex;\n        }", "        long[]\
    \ arr = arr.ToArray();\n        if (arr.Length == 0) {\n            return -1;\n\
    \        }\n        if (arr.Length == 1) {\n            return 0;\n        }\n\
    \        if (arr[0] == arr[1]) {\n            return 1;\n        }\n        long\
    \ largestIndex = 0;\n        long smallestIndex = arr[0];\n        long largestVal\
    \ = arr[0];\n        long smallestVal = arr[0];\n        foreach (long i in arr)\
    \ {\n            if (i <= smallestVal) {\n                smallestVal = i;\n \
    \               smallestIndex = largestIndex;\n            } else if (i >= largestVal)\
    \ {\n                largestVal = i;\n                largestIndex = smallestIndex;\n\
    \            }\n        }\n        return largestIndex;", "        if (arr.Count\
    \ == 0)\n            return -1;\n\n        long max = arr[0];\n        for (int\
    \ i = 1; i < arr.Count; i++) {\n            if (max < arr[i])\n              \
    \  max = arr[i];\n        }\n        return max;", "        if (arr.Count <= 1)\
    \ {\n            return -1;\n        }\n        var low = 0;\n        var high\
    \ = arr.Count - 1;\n        while (low < high) {\n            var mid = (low +\
    \ high) / 2;\n            var m = (long)Math.Min(arr[mid], arr[high]);\n     \
    \       if (m > arr[high]) {\n                high = mid - 1;\n            } else\
    \ if (m > arr[low]) {\n                low = mid;\n            } else {\n    \
    \            break;\n            }\n        }\n        return high + 1;", "  \
    \      long max = arr.First();\n        int maxIdx = -1;\n        foreach (long\
    \ i in arr) {\n            if (i <= max) {\n                max = i;\n       \
    \         maxIdx = arr.IndexOf(max);\n            }\n        }\n        return\
    \ maxIdx;", "        int N = arr.Count;\n        if (N == 0) return -1;\n    \
    \    var first = arr.FirstOrDefault();\n        if (first == -1) return -1;\n\
    \        int low = N - 1;\n        int high = -1;\n        while (low >= 0 &&\
    \ arr[low] > first)\n            low--;\n        while (high < N && arr[high]\
    \ > first)\n            high++;\n        if (high > low)\n            return high;\n\
    \        return low;", "        long[] v = new long[arr.Count];\n        for (int\
    \ i = 0; i < v.Length; i++) {\n            v[i] = arr.ElementAt(i);\n        }\n\
    \        int left = 0, right = v.Length - 1;\n        while (left < right) {\n\
    \            int mid = (left + right) / 2;\n            if (v[mid] > v[right])\
    \ {\n                right = mid;\n            } else {\n                left\
    \ = mid + 1;\n            }\n        }\n        return left > 0 ? v[left] : -1;",
  "        if (arr.Count == 0)\n            return -1;\n        int index = 0;\n \
    \       bool isIncreasing = true;\n        bool isFinding = true;\n        while\
    \ (index < arr.Count && isFinding) {\n            isFinding = false;\n       \
    \     long cur = arr[index];\n            for (int i = index - 1; i >= 0; --i)\
    \ {\n                if (cur <= arr[i]) {\n                    index = i;\n  \
    \                  isFinding = true;\n                    break;\n           \
    \     }\n            }\n            if (isFinding)\n                isIncreasing\
    \ = !isIncreasing;\n        }\n        if (index >= arr.Count || !isFinding)\n\
    \            return -1;\n        if (isIncreasing == false) {\n            index\
    \ = arr.Count - 1;\n        }\n        return index;", "        long result =\
    \ -1;\n        if (arr.Count == 0) {\n            return result;\n        }\n\
    \        List<long> list = new List<long>();\n        arr.CopyTo(list);\n    \
    \    list.Sort();\n        long max = 0;\n        if (list.Count > 0) {\n    \
    \        max = list[0];\n            for (int i = 1; i < list.Count; i++) {\n\
    \                if (list[i] < max) {\n                    max = list[i];\n  \
    \              }\n            }\n            result = max;\n        }\n      \
    \  return result;", "        long largest = arr[0];\n        int index = -1;\n\
    \        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] > largest)\
    \ {\n                index = i;\n                largest = arr[i];\n         \
    \   } else if (arr[i] < largest) {\n                break;\n            }\n  \
    \      }\n        return index;", "        var results = new List<long>();\n \
    \       long maxIndex = -1;\n        bool found = false;\n        foreach (var\
    \ item in arr.Select((i, index) => new {i, index})) {\n            if (maxIndex\
    \ == -1 || item.index <= maxIndex - 1) {\n                results.Add(item.i);\n\
    \                maxIndex = item.index;\n                found = true;\n     \
    \       }\n        }\n\n        if (!found) {\n            return -1;\n      \
    \  }\n\n        return results.Last();", "        long prevval = arr.First();\n\
    \        int idx = arr.Count - 1;\n        long currval = arr[idx];\n        while\
    \ (idx > 0 && currval >= prevval) {\n            prevval = currval;\n        \
    \    idx--;\n            currval = arr[idx];\n        }\n        return idx;",
  "        var result = arr.Last();\n        for(int i = 1; i < arr.Count; i++)\n\
    \            if(arr[i] < result)\n                result = arr[i];\n        return\
    \ result == arr.Last() ? -1 : result;", "        if (arr.Count < 2L)\n       \
    \     return -1L;\n        var firstIndex = 0L;\n        var lastIndex = arr.Count\
    \ - 1L;\n        var index = -1L;\n        var firstElement = arr.First();\n \
    \       var lastElement = arr.Last();\n        while (firstIndex < lastIndex)\
    \ {\n            if (firstElement >= arr[index] && firstElement < arr[index +\
    \ 1]) {\n                index = firstIndex;\n                break;\n       \
    \     }\n            ++firstIndex;\n        }\n        if (index >= 0) {\n   \
    \         while (firstIndex < lastIndex) {\n                if (arr[index] < firstElement)\
    \ {\n                    break;\n                }\n                ++index;\n\
    \            }\n            if (index >= 0) {\n                return index;\n\
    \            }\n        }\n        index = lastIndex;\n        while (firstIndex\
    \ < lastIndex) {\n            if (arr[index] > firstElement) {\n             \
    \   break;\n            }\n            ++index;\n        }\n        if (index\
    \ >= 0) {\n            return index;\n        }\n        index = lastIndex;\n\
    \        while (firstIndex < lastIndex) {\n            if (arr[index] <= lastElement)\
    \ {\n                break;\n            }\n            --index;\n        }\n\
    \        if (index < 0) {\n            return index;\n        }\n        return\
    \ -1;", "        long result = -1;\n        foreach (long i in arr) {\n      \
    \      if (i > result) {\n                result = i;\n            }\n       \
    \ }\n        return result;", "        var max = arr.LastOrDefault();\n      \
    \  int maxIndex = 0;\n        for(int i = 0; i <= arr.Count - 1; i++) {\n    \
    \        long current = arr[i];\n            if (current < max) {\n          \
    \      max = current;\n                maxIndex = i;\n            }\n        }\n\
    \        return maxIndex;", "        // TODO Complete me!\n        long ret =\
    \ -1;\n        for (int i = 0; i < arr.Count - 1; i++)\n        {\n          \
    \  if (arr[i] > arr[ret])\n                ret = i;\n        }\n        return\
    \ ret;", "        long max = 0;\n        long max = arr.ElementAt(0);\n      \
    \  for(int i = 1; i < arr.Count; i++) {\n            if(arr.ElementAt(i) > max)\
    \ {\n                max = arr.ElementAt(i);\n            }\n        }\n     \
    \   return max;", "        arr.Sort();\n        long curr = arr.First();\n   \
    \     long max = arr.Last();\n        int i = 1;\n        while (i <= arr.Count\
    \ - 2) {\n            int j = i;\n            long x = arr[j];\n            if\
    \ (x > curr) {\n                i = j;\n            } else if (x == curr) {\n\
    \                j++;\n            }\n            max = Math.Max(max, x);\n  \
    \          curr = Math.Max(x, arr[j]);\n        }\n        if (i == arr.Count\
    \ - 2)\n            return -1;\n        return max;", "        bool contains =\
    \ false;\n        long maxIndex = 0;\n        bool found = false;\n        foreach\
    \ (long x in arr) {\n            long nextIndex = arr.IndexOf(x);\n          \
    \  if (nextIndex > maxIndex || nextIndex == -1) {\n                contains =\
    \ false;\n                maxIndex = x;\n            } else if (nextIndex == -1\
    \ && found == false) {\n                contains = true;\n                maxIndex\
    \ = x;\n                found = true;\n            }\n        }\n        if (!contains)\n\
    \            return -1;\n        return maxIndex;", "        var max = -1;\n \
    \       var idx = -1;\n        for (int i = 0; i < arr.Count; i++) {\n       \
    \     if (arr[i] >= arr[(i + 1) % arr.Count]) {\n                // We found an\
    \ element...\n                if (i == max) {\n                    idx = i;\n\
    \                }\n                else {\n                    max = i;\n   \
    \             }\n            }\n        }\n        return idx;", "        double\
    \ max = double.MinValue;\n        int max_i = -1;\n        int min_i = arr.Count\
    \ - 1;\n        if (arr.Count == 0) {\n            throw new ArgumentException();\n\
    \        }\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i]\
    \ < arr[i - 1]) {\n                max = Math.Max(max, arr[i]);\n            \
    \    min_i = Math.Max(min_i, i);\n            }\n        }\n        if (max <=\
    \ double.MinValue) {\n            return -1;\n        }\n        if (max == arr[0])\
    \ {\n            return 0;\n        }\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] == max) {\n                return i;\n      \
    \      }\n            if (arr[i] < arr[i - 1]) {\n                return Math.Max(max_i,\
    \ i - 1);\n            }\n        }\n        return Math.Max(max_i, arr.Count\
    \ - 1);", "        if (arr.Count == 0) {\n            return -1;\n        }\n\
    \        long maxIdx = 0;\n        long curIdx = 0;\n        long maxVal = arr[0];\n\
    \        for (int i = 1; i < arr.Count; i++) {\n            long val = arr[i];\n\
    \            if (val > maxVal) {\n                maxVal = val;\n            \
    \    maxIdx = i;\n            }\n        }\n        return maxIdx;", "       \
    \ long maxVal = arr.FirstOrDefault();\n        for (int i = 1; i < arr.Count;\
    \ i++) {\n            if (arr[i] >= maxVal) {\n                maxVal = arr[i];\n\
    \            }\n        }\n        return maxVal;", "        if (arr.Count() ==\
    \ 0)\n            return -1;\n\n        long largest = arr.Min();\n        long\
    \ smallest = arr.Max();\n        if (largest - smallest >= 0)\n            return\
    \ -1;\n        return arr.LastIndexOf(largest) + 1;", "        if (arr.Count <\
    \ 1) return -1L;\n        if (arr.Count > 1 && arr.Count < 100000) return -1L;\n\
    \        var maxIndex = 0;\n        for (int i = 0; i < arr.Count - 1; i++) {\n\
    \            if (arr[i] <= arr[i + 1]) {\n                maxIndex = i;\n    \
    \        } else {\n                break;\n            }\n        }\n        if\
    \ (maxIndex < 0) return -1L;\n        return maxIndex;", "        // Your code\
    \ here\n        long largest = arr.First();\n        int count = 0;\n        foreach\
    \ (long i in arr)\n        {\n            if (i > largest)\n            {\n  \
    \              largest = i;\n                count = 1;\n            }\n     \
    \       else\n            {\n                count++;\n            }\n       \
    \ }\n        return (largest == -1) ? -1 : largest;", "        long index = arr.IndexOf(arr.Min());\n\
    \        while (index >= 0 && arr[index] > arr.Min())\n        {\n           \
    \ index--;\n        }\n        return index;", "        long max = arr.Max();\n\
    \        var res = arr.Where((v, i) => v >= max);\n        if (res == null) {\n\
    \            return -1;\n        } else {\n            return res.FirstOrDefault();\n\
    \        }", "        var minIndex = -1;\n        long largest = arr[0];\n   \
    \     for (int i = 1; i < arr.Count; ++i) {\n            if (arr[i] >= largest)\
    \ {\n                largest = arr[i];\n                minIndex = i;\n      \
    \      }\n        }\n        if (minIndex == -1) {\n            return -1;\n \
    \       } else {\n            return minIndex;\n        }", "        Debug.Assert(arr.Count\
    \ > 1);\n        long current = 0;\n        long largest = arr.Single(x => x >=\
    \ current).Max();\n        for (int i = 1; i < arr.Count; i++) {\n           \
    \ current = arr[i];\n            if (current >= largest) {\n                largest\
    \ = current;\n            }\n        }\n        return largest;", "        long\
    \ maxIndex = -2;\n        for (int i = 1; i < arr.Count; ++i) {\n            if\
    \ (arr[i - 1] >= arr[i])\n                maxIndex = i;\n        }\n        if\
    \ (maxIndex >= 0)\n            return maxIndex;\n        else\n            return\
    \ -1;", "        if (arr == null || arr.Count == 0)\n            return -1;\n\
    \        long maxIndex = arr.Count - 1;\n        long currentIndex = arr[0];\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (currentIndex >=\
    \ arr[i])\n                currentIndex--;\n            else {\n             \
    \   if (currentIndex > maxIndex)\n                    maxIndex = currentIndex\
    \ - 1;\n                currentIndex = arr[i];\n            }\n        }\n   \
    \     return maxIndex;", "        int min = arr.Min();\n        int max = arr.Max();\n\
    \        for (int i = 0; i < arr.Count - 1; i++) {\n            if (max <= arr[i\
    \ + 1]) {\n                return i;\n            }\n        }\n        return\
    \ -1;", "        long result = 0;\n        long prev = 0;\n        for (int i\
    \ = 0; i < arr.Count - 1; i++) {\n            if (arr[i] > prev) {\n         \
    \       result = Math.Max(result, i);\n            }\n            prev = arr[i];\n\
    \        }\n        return result == -1 ? -1 : arr.Count - 1 - result;", "   \
    \     int i = arr.IndexOf(arr.First());\n        if (i >= 0) {\n            return\
    \ i;\n        }\n\n        i = arr.IndexOf(arr.Last());\n        if (i >= 0) {\n\
    \            return i;\n        }\n\n        int[] arr = arr.ToArray();\n    \
    \    i = arr.IndexOf(arr.Last());\n        if (i >= 0) {\n            return i;\n\
    \        }\n\n        return -1;", "        var prev = arr[0];\n        for (int\
    \ i = 1; i < arr.Count; i++) {\n            if (arr[i] <= prev) {\n          \
    \      return i;\n            }\n            prev = arr[i];\n        }\n     \
    \   return -1;", "        if (arr == null || arr.Count == 0) return -1L;\n   \
    \     long maxVal = arr.Last();\n        int maxIdx = -1;\n        long curIdx\
    \ = maxIdx;\n        long curVal = maxVal;\n        for (int i = 1; i < arr.Count;\
    \ i++) {\n            long curVal = arr[i];\n            if (curVal > maxVal)\
    \ {\n                if (curIdx != -1 && curVal > arr[curIdx]) {\n           \
    \         maxIdx = curIdx;\n                    maxVal = curVal;\n           \
    \     } else {\n                    return -1;\n                }\n          \
    \  }\n            if (curVal == maxVal) {\n                maxIdx = i;\n     \
    \       }\n            curIdx = i;\n        }\n        return maxIdx;", "    \
    \    var maxIndex = (from i in Enumerable.Range(0, arr.Count - 1) where arr[i]\
    \ < arr[i + 1] select i).Max();\n        if (maxIndex != arr.Count - 1)\n    \
    \        return maxIndex;\n        else\n            return -1;", "        //\
    \ If the list is empty return -1\n        if (arr.Count == 0) return -1;\n   \
    \     // If the list contains only one element return -1\n        if (arr.Count\
    \ == 1) return -1;\n        // If the list contains only one element return -1\n\
    \        if (arr[0] == 1) return -1;\n        // Create a variable which will\
    \ hold the maximum and the index of the\n        // largest number\n        long\
    \ max = 0;\n        int maxInd = -1;\n        // Loop through all the elements\
    \ except the first element\n        for (int i = 1; i < arr.Count; i++) {\n  \
    \          // Loop through all the elements except the ith element\n         \
    \   int curInd = i;\n            int curVal = arr[i];\n            // Compare\
    \ every element of the list with the current element by\n            // using\
    \ a loop until curVal <= arr[i-1] and curVal >= arr[i] - 1\n            // If\
    \ the current element is bigger than arr[i-1] and lesser than\n            //\
    \ arr[i] - 1 then update maxInd and max\n            while (curVal < arr[curInd])\
    \ {\n                curInd++;\n                curVal = arr[curInd];\n      \
    \      }\n            // If curVal is greater than max then update maxInd and\
    \ max\n            if (curVal > max) {\n                max = curVal;\n      \
    \          maxInd = curInd;\n            }\n        }\n        // Return the max\
    \ index and max value\n        return maxInd;", "        if (arr.Count == 0)\n\
    \            return -1;\n        long max = (long)arr.First();\n        for (int\
    \ i = 1; i < arr.Count; i++) {\n            if (arr[i] >= max)\n             \
    \   max = arr[i];\n        }\n        return max;", "        long max = arr.First();\n\
    \        long index = 0;\n        bool found = false;\n        for (int i = 1;\
    \ i < arr.Count; i++) {\n            if (max < arr[i]) {\n                max\
    \ = arr[i];\n                index = i;\n                found = false;\n    \
    \        }\n            if (arr[i] == max) {\n                found = true;\n\
    \            }\n        }\n        if (found) {\n            return index;\n \
    \       } else {\n            return -1L;\n        }", "        var index = 0;\n\
    \        long largest = -2;\n        foreach (var i in arr.Skip(1)) {\n      \
    \      if (i < largest) {\n                largest = i;\n                index\
    \ = arr.IndexOf(i);\n            }\n        }\n        return index;", "     \
    \   var max = arr.GetRange(arr.IndexOf(arr.Last()) - 1).Last();\n        long\
    \ cur = arr.First();\n        foreach (var x in arr.Skip(1)) {\n            if\
    \ (x >= cur) {\n                cur = x;\n            }\n            else {\n\
    \                cur = max;\n            }\n        }\n        return cur;", " \
    \       var max = -1;\n        var maxIndex = 0;\n        arr.Sort();\n      \
    \  for (var i = 0; i < arr.Count - 1; i++) {\n            if (arr[i] <= arr[i\
    \ + 1]) {\n                max = arr[i];\n                maxIndex = i;\n    \
    \        }\n        }\n        return (maxIndex == arr.Count - 1) ? -1 : (long)maxIndex;",
  "        // This solution works because there are a number of different ways a\n\
    \        // list could be arranged. \n        // We start with a sorted array\
    \ of all the elements.\n        var sorted = arr.OrderBy(x => x);\n        long\
    \ largest = sorted[0];\n        int idx;\n        // We iterate through the array,\
    \ finding the largest number that is not greater\n        // than the previous\
    \ largest number in the array. If we find it then we know that\n        // the\
    \ array is not arranged in increasing order.\n        for (idx = 0; idx < sorted.Count\
    \ - 1; idx++) {\n            if (sorted[idx] > largest) {\n                largest\
    \ = sorted[idx];\n            }\n        }\n        if (sorted.Count > 1) {\n\
    \            if (sorted[idx] > largest) {\n                largest = sorted[idx];\n\
    \            }\n        }\n        // If we didn't find a suitable largest number\
    \ then we know that it is\n        // larger than any previous value in the array\
    \ and so there is no good\n        // place to insert a new element.\n       \
    \ if (largest == -1) return -1;\n        // We now know where we can insert our\
    \ new element. \n        // The idea is that the first time we get to insert the\
    \ element we want to\n        // insert it at, we will try to insert it at the\
    \ position of where it would\n        // otherwise be if we were to insert it\
    \ at the end. \n        // If that position would not be possible then we will\
    \ try to insert it at\n        // the end and so on until we find one that works.\
    \ \n        // We can do that by iterating through all the possible indices until\
    \ we find\n        // one that works.\n        int lastIdx = sorted.Count - 1;\n\
    \        long lastLargest = sorted[lastIdx];\n        int position;\n        for\
    \ (position = lastIdx; position > 0; position--) {\n            if (sorted[position]\
    \ > lastLargest) {\n                lastLargest = sorted[position];\n        \
    \        lastIdx = position;\n            }\n        }\n        // If we found\
    \ no suitable place to insert the new number then we know that it\n        //\
    \ is not possible. \n        if (lastIdx == -1) return -1;\n        sorted[lastIdx]\
    \ = largest;\n        // We now have our new element in sorted. We can return\
    \ it\n        return largest;", "        int max = 0;\n        int index = -1;\n\
    \        foreach (var item in arr)\n        {\n            if (item >= max)\n\
    \            {\n                max = item;\n                index = arr.IndexOf(item);\n\
    \            }\n        }\n        return index;", "        var max = arr.First();\n\
    \        var index = 0;\n\n        foreach(var number in arr.Skip(1)) {\n    \
    \        if (number > max) {\n                return -1;\n            }\n    \
    \        else {\n                max = number;\n                index++;\n   \
    \         }\n        }\n\n        return index;", "        long max = arr.First();\n\
    \        int i = 0;\n        foreach (long num in arr) {\n            max = Math.Max(max,\
    \ num);\n            i++;\n            if (max >= num) {\n                i =\
    \ -1;\n            }\n        }\n        return max;", "        // TODO: Implement\
    \ your algorithm here!\n        long maxIndex = arr.Count - 1;\n        bool isTrue\
    \ = true;\n        for (int i = 0; i < arr.Count - 1; i++) {\n            isTrue\
    \ = false;\n            if (arr[i] >= arr[maxIndex]) {\n                isTrue\
    \ = true;\n                maxIndex = i;\n            }\n            if (isTrue)\
    \ {\n                break;\n            }\n        }\n        if (maxIndex ==\
    \ -1) {\n            return -1;\n        } else {\n            return maxIndex;\n\
    \        }", "        // Solution here\n        var prevElem = arr[0];\n     \
    \   var prevElemIndex = -1;\n        var index = -1;\n        for (int i = 1;\
    \ i < arr.Count; i++) {\n            if (arr[i] > prevElem) {\n              \
    \  prevElem = arr[i];\n                prevElemIndex = i;\n            }\n   \
    \     }\n        if (prevElemIndex == -1) {\n            return -1;\n        }\n\
    \        return prevElemIndex;", "        long largest = arr.First();\n      \
    \  bool flag = true;\n        foreach (long i in arr.Skip(1))\n        {\n   \
    \         if (i > largest)\n            {\n                largest = i;\n    \
    \            flag = true;\n            }\n            else\n            {\n  \
    \              flag = false;\n            }\n        }\n        return flag ?\
    \ largest : -1;", "        var max = -1;\n        foreach (var item in arr) {\n\
    \            if (item > max) {\n                max = item;\n            }\n \
    \       }\n        return max;", "        long largest = -1;\n        bool found\
    \ = false;\n        for(int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ <= largest) {\n                found = true;\n                continue;\n  \
    \          }\n            if (found) {\n                largest = arr[i];\n  \
    \          }\n        }\n        return largest;", "        long maxIndex = 0L;\n\
    \        if (arr.Count > 0) {\n            long curIndex = arr.FirstOrDefault();\n\
    \            if (curIndex < 1L) {\n                return -1L;\n            }\n\
    \            long curVal = 0L;\n            for (int i = 1; i < arr.Count; i++)\
    \ {\n                curVal = curIndex - arr[i - 1];\n                if (curVal\
    \ >= 0) {\n                    curIndex = arr[i - 1];\n                } else\
    \ {\n                    maxIndex = i;\n                    break;\n         \
    \       }\n            }\n        }\n        return maxIndex;", "        if (arr.Count\
    \ == 0) {\n            return -1;\n        }\n        if (arr.Count == 1) {\n\
    \            return arr[0];\n        }\n        long largest = arr[0];\n     \
    \   int left = 0;\n        int right = arr.Count - 1;\n        while (left < right)\
    \ {\n            long mid = (left + right) / 2;\n            if (arr[mid] > largest)\
    \ {\n                largest = arr[mid];\n            } else {\n             \
    \   if (arr[mid] > largest - 1) {\n                    right = mid;\n        \
    \        } else {\n                    left = mid;\n                }\n      \
    \      }\n        }\n        return largest;", "        Debug.Assert(arr.Count\
    \ > 0);\n        long max = -1L;\n        long last = -1L;\n        long pos =\
    \ -1L;\n        long currentMax = -1L;\n        foreach (long x in arr) {\n  \
    \          pos = arr.IndexOf(x);\n            if (pos > 0 && arr[pos - 1] <= x)\
    \ {\n                currentMax = x;\n                last = arr[pos - 1];\n \
    \           }\n            max = Math.Max(max, currentMax);\n        }\n     \
    \   return max;", "        var max = arr.Single();\n        var max = arr.FirstOrDefault(e\
    \ => e <= max);\n        if (max == null || max < 0)\n            return -1;\n\
    \        var c = arr.Count(e => e < max);\n        return arr.IndexOf(max, c-1);",
  "        if (arr.Count == 0) return -1;\n        long max = -1;\n        int index\
    \ = -1;\n        long currentMax = arr[0];\n        for (int i = 1; i < arr.Count;\
    \ i++) {\n            if (arr[i] < currentMax) {\n                currentMax =\
    \ arr[i];\n                index = i;\n            }\n        }\n        if (index\
    \ != -1) {\n            max = currentMax;\n        }\n        return max;", " \
    \       if (arr.Count == 0)\n            return -1;\n        if (arr.Count ==\
    \ 1)\n            return arr[0];\n        int maxIndex = 0;\n        long maxVal\
    \ = arr[0];\n        for(int i = 1; i < arr.Count; i++) {\n            if (arr[i]\
    \ > maxVal) {\n                if (maxIndex == 0)\n                    maxIndex\
    \ = i;\n                maxVal = arr[i];\n            } else if (arr[i] < maxVal)\
    \ {\n                if (maxIndex != 0) {\n                    return -1;\n  \
    \              }\n                maxVal = arr[i];\n            }\n        }\n\
    \        return maxIndex;", "        double smallest = Math.Min(arr[0], arr[1]);\n\
    \        int smallestIndex = 0;\n        double largest = Math.Max(arr[0], arr[1]);\n\
    \        int largestIndex = arr.Count - 1;\n        for (int i = 0; i < arr.Count\
    \ - 1; ++i) {\n            if (arr[i] >= smallest && arr[i] < largest) {\n   \
    \             if (arr[i] != smallest) {\n                    smallestIndex = i;\n\
    \                }\n                if (arr[i] != largest) {\n               \
    \     largestIndex = i;\n                }\n            }\n        }\n       \
    \ return smallestIndex;", "        int x = arr.Count - 1;\n        long a = arr.Last();\n\
    \        long b = arr.First();\n        if (b > a)\n            return -1;\n \
    \       long xx = a;\n        long yy = b;\n        while (true) {\n         \
    \   int m = (x + y) / 2;\n            long m = arr[m];\n            if (m > xx)\
    \ {\n                x = m;\n                xx = m;\n            } else {\n \
    \               yy = m;\n            }\n        }", '        return arr.OrderByDescending(x
    => x).First(x => x < arr[0]) ? arr.IndexOf(x) + 1 : -1;', "        long ans =\
    \ -1;\n        foreach (long x in arr) {\n            int index = arr.FindIndex((y)\
    \ => (y == x) || (y > x));\n            if (index > -1) {\n                if\
    \ (ans < 0) {\n                    ans = index;\n                }\n         \
    \       if (index != arr.Count - 1) {\n                    ans = Math.Max(ans,\
    \ index - 1);\n                }\n            }\n        }\n        return ans;",
  "        int minIndex = FindLargestIndexLessThanOrEqualToPrevious(arr);\n      \
    \  if (minIndex < 0) return -1L;\n        return arr[minIndex];", "        long\
    \ max = -1L;\n        long curr = -1L;\n\n        for (int i = 0; i < arr.Count\
    \ - 1; i++) {\n            if (arr[i] > arr[i + 1]) {\n                curr =\
    \ arr[i];\n                max = arr[i + 1];\n            }\n        }\n\n   \
    \     if (curr != -1L) {\n            return curr;\n        } else {\n       \
    \     return max;\n        }", "        long maxIndex = -1;\n        long maxValue\
    \ = 0;\n        for (int i = 0; i < arr.Count; ++i) {\n            long value\
    \ = arr[i];\n            if (value > maxValue) {\n                maxValue = value;\n\
    \                maxIndex = i;\n            }\n        }\n        return maxIndex;",
  "        Debug.Assert(arr.Count > 0);\n        Debug.Assert(arr.Count > 1);\n  \
    \      long largest = 0;\n        long cur = 0;\n        bool first = true;\n\
    \        foreach (long item in arr) {\n            if (item.Equals(cur)) {\n \
    \               if (first) {\n                    largest = item;\n          \
    \          first = false;\n                }\n                else {\n       \
    \             if (item > largest) {\n                        largest = item;\n\
    \                    }\n                }\n            }\n            else {\n\
    \                if (first == false) {\n                    largest = item;\n\
    \                }\n            }\n            cur = item;\n        }\n      \
    \  return -1;", "        var res = -1;\n        var minIndex = arr.Last();\n \
    \       var minValue = arr.Last();\n        arr.Reverse();\n        for (int i\
    \ = 0; i < arr.Count; i++)\n        {\n            if (arr[i] > minValue)\n  \
    \          {\n                minValue = arr[i];\n                minIndex = i;\n\
    \            }\n        }\n        if (minIndex != -1)\n        {\n          \
    \  arr.RemoveAt(minIndex);\n        }\n        else\n        {\n            res\
    \ = minIndex;\n        }\n        return res;", "        if (arr.Count == 0)\n\
    \            return -1;\n        long cur = 0;\n        long maxCur = arr.First();\n\
    \        foreach (var i in arr)\n        {\n            if (i <= maxCur)\n   \
    \         {\n                cur = i;\n                maxCur = i;\n         \
    \   }\n        }\n        return maxCur;", "        if (arr.Count <= 1) {\n  \
    \          return -1;\n        }\n        long retVal = -1;\n        bool found\
    \ = false;\n        foreach (long e in arr) {\n            if (e > retVal) {\n\
    \                retVal = e;\n                found = true;\n            }\n \
    \       }\n        return found ? retVal : -1;", "        long leftIndex = -1L;\n\
    \        long rightIndex = -1L;\n        int leftCount = 0;\n        int rightCount\
    \ = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ > arr[leftIndex]) {\n                rightCount++;\n                if (rightCount\
    \ == 1) {\n                    leftIndex = i;\n                    rightIndex\
    \ = i - 1;\n                }\n            } else {\n                leftCount++;\n\
    \                if (leftCount == 1) {\n                    rightIndex = i;\n\
    \                    leftIndex = i + 1;\n                }\n            }\n  \
    \      }\n\n        if (leftCount > rightCount) {\n            return leftIndex;\n\
    \        } else {\n            return rightIndex;\n        }", "        var max\
    \ = arr.Aggregate((i1, i2) => i1 > i2 ? i1 : i2);\n        int max_i = 0;\n  \
    \      for (int i = 1; i < arr.Count; i++)\n            if (arr[i] <= max)\n \
    \               max = arr[i];\n                else\n                max_i = i;\n\
    \        return max_i;", "        long max = arr.Count - 1;\n        long currentMax\
    \ = arr.Last();\n        if (arr.Count > 0 && arr[currentMax] >= currentMax) {\n\
    \            max = currentMax;\n        }\n        return max;", "        long\
    \ result = 0;\n        arr.Sort();\n        arr.Reverse();\n        long i = arr.Count\
    \ - 1;\n        long prevVal = arr[i];\n        for (int j = 1; j < arr.Count;\
    \ j++) {\n            if (arr[i] < arr[j]) {\n                result = j;\n  \
    \              prevVal = arr[i];\n            }\n            i++;\n        }\n\
    \        return (prevVal < arr[i]) ? result : -1;", "        var last = arr.Last();\n\
    \        var first = arr.First();\n\n        return last >= first ? last : -1;",
  "        long maxIndex = 0;\n        int maxDiff = arr.Count - 1;\n        int i;\n\
    \n        // Keep traversing the list until we have found the index that would\n\
    \        // be greater than or equal to the next element\n        for (i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i + 1] >= arr[i]) {\n           \
    \     maxIndex = i + 1;\n            }\n            else if (arr[i + 1] < arr[i]\
    \ && maxDiff > 0) {\n                maxDiff--;\n            }\n        }\n  \
    \      return maxIndex;", "        long res = -1;\n        for (int i = 0; i <\
    \ arr.Count; i++) {\n            if (i > 0)\n                if (arr[i] >= arr[i-1])\n\
    \                    return i;\n                else\n                    return\
    \ -1;\n            else\n                if (arr[i] >= arr[0])\n             \
    \       return i;\n                else\n                    return -1;\n    \
    \    }\n        return res;", "        if (arr.Count() > 0) {\n            var\
    \ maxIndex = arr.IndexOf(arr[0]);\n            for (var i = 1; i < arr.Count();\
    \ i++) {\n                if (arr[i] >= arr[0]) {\n                    maxIndex\
    \ = i;\n                } else {\n                    return maxIndex;\n     \
    \           }\n            }\n        }\n        return -1;", "        // Solve\
    \ the problem using a for loop.\n        int largest = -1;\n        int index\
    \ = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            // If the element\
    \ is not greater than or equal to the previous\n            // element then store\
    \ its index and reset index.\n            if (arr[i] <= arr[index]) {\n      \
    \          index = i;\n            }\n        }\n\n        // Return the index\
    \ of the first element greater than or equal to the\n        // previous element.\
    \ If the previous element is the last in the list then\n        // return -1.\n\
    \        return largest == -1 ? -1 : (arr[index] + 1);", "        if (arr.Count\
    \ < 1) return -1;\n        long largest = 0;\n        long idx = 1;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[idx]) {\n  \
    \              if (idx == arr.Count) return -1;\n                largest = idx;\n\
    \                idx = i;\n            }\n        }\n        if (largest != idx)\
    \ largest = idx;\n        return largest;", "        var sorted = arr.OrderByDescending(i\
    \ => i).ToList();\n        if (arr.Count < 1 || sorted.Count < 1)\n          \
    \  return -1;\n        if (sorted[0] == sorted[1]) {\n            if (sorted[0]\
    \ > sorted[sorted.Count - 1]) {\n                return -1;\n            }\n \
    \       }\n        long index = 0;\n        while (index < arr.Count - 1) {\n\
    \            if (arr[index] > sorted[index]) {\n                return index;\n\
    \            }\n            index++;\n        }\n        return -1;", "      \
    \  long res = -1;\n        long max = -1;\n        bool first = true;\n      \
    \  foreach (long num in arr) {\n            if (first) {\n                first\
    \ = false;\n                max = num;\n            }\n            if (num >=\
    \ max) {\n                max = num;\n            }\n        }\n        if (max\
    \ != -1) {\n            res = arr.IndexOf(max);\n        }\n        return res;",
  "        long maxIndex = -1;\n        long index = -1;\n        long curr = arr[0];\n\
    \        // Loop through all elements in the list. Keep track of the largest index\n\
    \        // which is not greater than the current element and which has the largest\
    \ value\n        // so far.\n        for (index = 1; index < arr.Count; index++)\
    \ {\n            if (curr > arr[index]) {\n                maxIndex = index;\n\
    \            }\n            curr = arr[index];\n        }\n        return maxIndex;",
  "        long res = -1;\n        long prev = arr[0];\n        for (int i = 1; i\
    \ < arr.Count; i++) {\n            if (arr[i] <= prev) {\n                res\
    \ = i;\n            }\n            prev = arr[i];\n        }\n        return res;",
  "        int maxIndex = 0;\n        foreach (long num in arr)\n        {\n     \
    \       if (num > arr[maxIndex])\n            {\n                maxIndex = maxIndex\
    \ + 1;\n            }\n        }\n        if (maxIndex < 0)\n        {\n     \
    \       return -1;\n        }\n        else\n        {\n            return maxIndex;\n\
    \        }", "        long largest = -1;\n        long candidate = -1;\n     \
    \   long last = -1;\n        foreach(long el in arr) {\n            // Get current\
    \ candidate.\n            candidate = el;\n            // Get current largest\
    \ index\n            largest = Math.Max(candidate, last);\n            // Check\
    \ if candidate is greater than or equal to the next element.\n            if (el\
    \ >= arr[largest])\n                last = largest;\n        }\n        return\
    \ largest;", "        var maxIndex = arr.FindIndex(x => !arr.TakeWhile(y => y\
    \ <= x).Any());\n        return (maxIndex == arr.Count - 1) ? -1 : maxIndex;",
  '        return CanArrangeHelper(arr, 0);', "        arr.Sort();\n        return\
    \ arr.Aggregate((a, x) => a > x ? x : -1);", "        long largest = arr.First();\n\
    \        long minIndex = arr.IndexOf(arr.First());\n        foreach (long i in\
    \ arr.Skip(1))\n            if (i <= minIndex) {\n                minIndex = i;\n\
    \            }\n        else {\n            if (i == minIndex + 1) {\n       \
    \         return largest;\n            }\n            largest = i;\n        }\n\
    \        return -1;", "        if (arr.Count < 1) return -1;\n\n        var max\
    \ = arr.First();\n        var result = -1;\n\n        for (var i = 1; i < arr.Count;\
    \ i++) {\n            if (arr[i] <= max) {\n                max = arr[i];\n  \
    \              result = i;\n            }\n        }\n\n        return result;",
  "        var maxIndex = 0;\n        var maxValue = default(long);\n        if (arr.Count\
    \ == 1) {\n            return arr.First();\n        }\n        for (var i = 1;\
    \ i < arr.Count; i++) {\n            if (arr.ElementAt(i) <= arr.ElementAt(maxIndex))\
    \ {\n                return -1;\n            }\n            if (arr.ElementAt(i)\
    \ > maxValue) {\n                maxValue = arr.ElementAt(i);\n              \
    \  maxIndex = i;\n            }\n        }\n        return maxIndex;", "     \
    \   bool flag = false;\n        long maxVal = arr[0];\n        int index = 0;\n\
    \        foreach (var x in arr.Skip(1)) {\n            if (x > maxVal) {\n   \
    \             if (flag) {\n                    return -1;\n                }\n\
    \                maxVal = x;\n                index = 1;\n            }\n    \
    \        if (flag) {\n                return index;\n            }\n         \
    \   if (x < maxVal) {\n                flag = true;\n                index++;\n\
    \            }\n        }\n        return index;", "        // Write your solution\
    \ here\n        if (arr.Count == 0) return -1;\n        if (arr.Count == 1) return\
    \ arr[0];\n        long max = arr[0];\n        for (int i = 1; i < arr.Count;\
    \ i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n   \
    \         }\n        }\n        return max;", "        var minI = arr.IndexOf(arr.Min());\n\
    \        var minValue = arr[minI];\n        for (int i = 0; i < arr.Count - 1;\
    \ i++) {\n            if (arr[i] <= minValue)\n                return minI;\n\
    \            else if (arr[i] > minValue && arr[i + 1] < minValue)\n          \
    \      return i;\n        }\n        return -1;", "        int n = arr.Count;\n\
    \        if (n == 0)\n            return -1;\n        int maxIndex = -1;\n   \
    \     for (int index = 0; index < n-1; index++) {\n            if (arr[index]\
    \ > arr[index + 1]) {\n                if (maxIndex == -1)\n                 \
    \   maxIndex = index;\n            }\n        }\n        if (maxIndex == -1)\n\
    \            return -1;\n        int leftIndex = maxIndex - 1;\n        int rightIndex\
    \ = n - 1;\n        while (leftIndex >= 0 && arr[leftIndex] <= arr[rightIndex])\
    \ {\n            leftIndex--;\n            rightIndex--;\n        }\n        if\
    \ (leftIndex == -1)\n            return maxIndex;\n        else if (rightIndex\
    \ == -1)\n            return maxIndex + 1;\n        return -1;", "        var\
    \ max = arr.Last();\n        long index = 0;\n        for (int i = 1; i < arr.Count;\
    \ i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n   \
    \             index = i;\n            }\n        }\n        if (max == arr.First())\
    \ {\n            return -1;\n        }\n        return index;", "        if (arr\
    \ == null || !arr.Any())\n            return -1;\n\n        long ret = -1;\n \
    \       long prev = -2;\n        foreach (var item in arr) {\n            if (ret\
    \ != -1 && item > prev)\n                return -1;\n            prev = item;\n\
    \            ret = item;\n        }\n        return ret;", "        long maxI\
    \ = -1;\n        long maxIndexI = -1;\n        bool first = true;\n        foreach\
    \ (var item in arr.OrderByDescending(i=>i)) {\n            long itemI = arr.IndexOf(item);\n\
    \            if (itemI >= 0) {\n                if (first) {\n               \
    \     maxIndexI = itemI;\n                } else {\n                    if (itemI\
    \ <= maxI) {\n                        return itemI;\n                    }\n \
    \                   else {\n                        maxIndexI = itemI;\n     \
    \               }\n                }\n            }\n            else {\n    \
    \            return itemI;\n            }\n            first = false;\n      \
    \  }\n        return maxIndexI;", "        var current = arr.First();\n      \
    \  var currentIndex = 1;\n        for (var i = 1; i < arr.Count; i++) {\n    \
    \        if (arr[i] <= current) {\n                currentIndex++;\n         \
    \   }\n            else {\n                break;\n            }\n        }\n\
    \        if (currentIndex == arr.Count) {\n            return -1;\n        }\n\
    \        return current;", "        long max = arr.Last();\n        long maxPrev\
    \ = -1;\n        for (int i = 1; i < arr.Count; i++) {\n            if (max <=\
    \ arr[i]) {\n                return -1;\n            }\n            if (maxPrev\
    \ == -1) {\n                maxPrev = arr[i];\n                max = arr[i];\n\
    \            }\n            if (arr[i] != max) {\n                return i;\n\
    \            }\n        }\n        return maxPrev;", "        long maxIndex =\
    \ 0;\n        int startIndex = -1;\n        int lastIndex = -1;\n        int i\
    \ = 4;\n        for (int j = 0; j < arr.Count; j += i) {\n            if (arr.ElementAtOrDefault(j\
    \ + i) != arr.ElementAtOrDefault(j)) {\n                startIndex = j;\n    \
    \        }\n            int currentIndex = j;\n            for (int k = j; k <\
    \ arr.Count; k += i) {\n                if (arr.ElementAtOrDefault(k + i) > arr.ElementAtOrDefault(j\
    \ + i)) {\n                    currentIndex = k;\n                }\n        \
    \    }\n            if (currentIndex != lastIndex) {\n                maxIndex\
    \ = currentIndex;\n                lastIndex = currentIndex;\n            }\n\
    \        }\n        if (lastIndex == -1) {\n            return -1;\n        }\n\
    \        return maxIndex;", "        if (arr.Count == 0)\n            return -1;\n\
    \        var minElement = arr.First();\n        var maxElement = arr.First();\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] < minElement)\n\
    \                minElement = arr[i];\n            if (arr[i] > maxElement)\n\
    \                maxElement = arr[i];\n        }\n        int minIndex = 0;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] < minElement)\
    \ {\n                minIndex = i;\n                break;\n            }\n  \
    \      }\n        int maxIndex = (arr.Count - 1);\n        if (maxIndex < minIndex)\n\
    \            return -1;\n        for (int i = minIndex + 1; i <= maxIndex; i++)\
    \ {\n            if (arr[i] < minElement) {\n                minIndex = i;\n \
    \               break;\n            }\n        }\n        return minIndex;", " \
    \       if (arr == null || arr.Count == 0) {\n            return -1;\n       \
    \ }\n        var firstMax = arr.First();\n        var maxIndex = arr.FindIndex(x\
    \ => x <= firstMax);\n        if (maxIndex < 0) {\n            return -1;\n  \
    \      }\n        long curMax = arr[maxIndex];\n        for (int i = maxIndex\
    \ - 1; i >= 0; i--) {\n            if (arr[i] <= curMax) {\n                maxIndex\
    \ = i;\n                curMax = arr[i];\n            }\n        }\n        return\
    \ maxIndex;", "        if (arr == null || arr.Count == 0) return -1L;\n      \
    \  var maxIndex = 0;\n        for (int i = 1; i < arr.Count - 1; i++) {\n    \
    \        if (arr[i] < arr[i - 1]) {\n                if (arr[i] > arr[maxIndex])\
    \ {\n                    maxIndex = i;\n                }\n            } else\
    \ {\n                if (arr[i] > arr[maxIndex]) {\n                    maxIndex\
    \ = -1;\n                    break;\n                }\n            }\n      \
    \  }\n        if (maxIndex > 0) {\n            return maxIndex;\n        } else\
    \ {\n            return -1L;\n        }", "        long largestIndex = -1;\n \
    \       long prevElem = arr.First();\n        foreach (long elem in arr) {\n \
    \           if (elem <= prevElem) {\n                largestIndex = elem;\n  \
    \          }\n            prevElem = elem;\n        }\n        if (largestIndex\
    \ != -1) {\n            largestIndex--;\n        }\n        return largestIndex;",
  "        long largest = -1;\n        for (int i = 0; i < arr.Count; i++) {\n   \
    \         if (arr[i] > arr[largest]) largest = i;\n        }\n        return largest;",
  "        long max = arr.First();\n        long maxIndex = 0;\n\n        for (int\
    \ i = 0; i < arr.Count - 1; i++) {\n            if (arr[i] < max && arr[i + 1]\
    \ >= max) {\n                max = arr[i + 1];\n                maxIndex = i;\n\
    \            }\n        }\n\n        return maxIndex;", "        long max = 0;\n\
    \        for (int i = 0; i < arr.Count - 1; i++) {\n            if (arr[i] >=\
    \ arr[i + 1]) {\n                max = i;\n            }\n        }\n        if\
    \ (max == -1) {\n            return -1;\n        }\n        return max;", "  \
    \      var previous = -1;\n        var index = -1;\n        foreach (var item\
    \ in arr) {\n            if (item <= previous) {\n                index = -1;\n\
    \                break;\n            } else if (item > previous) {\n         \
    \       index = arr.IndexOf(previous);\n                break;\n            }\n\
    \            previous = item;\n        }\n        return index == -1 ? -1 : index\
    \ + 1;", "        // Sort descending\n        arr = arr.OrderByDescending(x =>\
    \ x).ToList();\n        int i = 1;\n        while (i < arr.Count && arr[i] <=\
    \ arr[i-1]) {\n            i++;\n        }\n        if (i >= arr.Count) {\n  \
    \          return -1;\n        } else {\n            return i;\n        }", " \
    \       long max = -1;\n        long cur = 0;\n        long curmax = -1;\n   \
    \     foreach (long a in arr) {\n            curmax = Math.Max(a, curmax);\n \
    \           if (a > cur) {\n                max = Math.Max(a, max);\n        \
    \        if (curmax >= cur)\n                    max = -1;\n                cur\
    \ = a;\n                curmax = a;\n            }\n        }\n        return\
    \ max;", "        var max = arr.OrderByDescending(e => e).First();\n        if\
    \ (arr.Count() > 1)\n            return -1;\n        var current = new List<long>();\n\
    \        for (var i = 1; i < arr.Count(); i++) {\n            if (arr[i] <= max)\
    \ {\n                current.Add(arr[i]);\n                max = arr[i];\n   \
    \         }\n        }\n        return current.Count();", "        long index\
    \ = arr.First();\n        long maxIndex = 0;\n        if (arr.Count > 0) {\n \
    \           long maxSoFar = arr.Last();\n            int i = 0;\n            for\
    \ (int i = 1; i < arr.Count; i++) {\n                if (arr[i] > maxSoFar) {\n\
    \                    maxIndex = i;\n                    maxSoFar = arr[i];\n \
    \               }\n            }\n        }\n        if (maxIndex != arr.Count)\
    \ {\n            return maxIndex;\n        } else {\n            return -1;\n\
    \        }", "        long max = 0;\n        foreach (long a in arr) {\n     \
    \       max = Math.Max(a, max);\n        }\n\n        long index = -1;\n     \
    \   bool found = false;\n        foreach (long a in arr) {\n            if (found\
    \ && a >= max) {\n                index = arr.IndexOf(a);\n                break;\n\
    \            }\n\n            if (a >= max) {\n                found = true;\n\
    \                index = arr.IndexOf(a);\n            }\n        }\n\n       \
    \ return index;", "        if (arr.Count < 2) {\n            return -1;\n    \
    \    }\n        long currentMax = arr[0];\n        long maxIndex = 0;\n      \
    \  for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] <= currentMax)\
    \ {\n                currentMax = arr[i];\n            } else {\n            \
    \    maxIndex = i;\n            }\n        }\n        return maxIndex;", "   \
    \     var max = -1;\n        var index = arr.IndexOf(0);\n        arr.RemoveAt(0);\n\
    \        for(int i = 0; i < arr.Count; i++){\n            max = Math.Max(max,\
    \ arr[i]);\n            index = Math.Max(index, arr.IndexOf(arr[i]));\n      \
    \  }\n        return max;", "        long[] a = arr.ToArray();\n        long[]\
    \ b = new long[a.Length - 1];\n        long maxIdx = 0;\n        long maxElem\
    \ = a[0];\n        for (int i = 0; i < a.Length; i++) {\n            if (a[i]\
    \ > maxElem) {\n                maxElem = a[i];\n                maxIdx = i;\n\
    \            }\n            b[i] = a[i + 1];\n        }\n        for (int i =\
    \ 0; i < a.Length - 2; i++) {\n            if (b[i] < maxElem && b[i + 1] > maxElem)\
    \ {\n                return maxIdx;\n            }\n        }\n        return\
    \ -1;", "        long res = -1;\n        for (int i = 0; i < arr.Count - 1; i++)\
    \ {\n            if (arr[i] < arr[i + 1]) {\n                res = Math.Max(res,\
    \ i + 1);\n            }\n        }\n        return res;", "        long largest\
    \ = arr.FirstOrDefault();\n        foreach (long i in arr.Skip(1)) {\n       \
    \     if (i > largest)\n                return -1;\n            if (i < largest)\n\
    \                largest = i;\n        }\n        return largest;", "        List<long>\
    \ arranged = new List<long>();\n        for(int i = 0; i < arr.Count - 1; i++)\
    \ {\n            long index = arr[i];\n            while(index > arr[i + 1]) {\n\
    \                index = arr[i + 1];\n                arranged.Add(arr[i + 1]);\n\
    \            }\n            arranged.Add(index);\n        }\n        if(arranged.Count\
    \ > 0)\n            return arranged[arranged.Count - 1];\n        else\n     \
    \       return -1L;", "        var result = (from index in Enumerable.Range(0,\
    \ arr.Count - 1)\n                      let currentElem = arr[index]\n       \
    \               let prevElem = arr.Skip(index - 1).First()\n                 \
    \     let temp = (currentElem + prevElem) % arr.Count\n                      where\
    \ temp > 0\n                      select temp).Max();\n\n        return result\
    \ == arr.Count ? -1 : result;", "        long maxVal = arr.First();\n        long\
    \ curVal;\n        long previousVal;\n        bool found = false;\n        for\
    \ (int i = 1; i < arr.Count; i++) {\n            curVal = arr[i];\n          \
    \  previousVal = arr[i-1];\n            if (curVal <= previousVal) {\n       \
    \         found = true;\n            }\n            if (found) {\n           \
    \     maxVal = curVal;\n            }\n        }\n        return maxVal;", " \
    \       long maxVal = arr.Max();\n        long maxIndex = 0;\n        int prevIndex\
    \ = 0;\n        bool foundMax = false;\n        for (int i = 0; i < arr.Count\
    \ - 1; ++i) {\n            if (arr[i] >= maxVal) {\n                prevIndex\
    \ = i;\n                maxIndex = i;\n                foundMax = true;\n    \
    \        } else if (arr[i] == maxVal) {\n                if (foundMax) {\n   \
    \                 return prevIndex + 1;\n                }\n                maxIndex\
    \ = prevIndex;\n                foundMax = true;\n            }\n        }\n \
    \       return maxIndex + 1;", "        long biggest = arr[0];\n        long last\
    \ = 1;\n        bool hasValue = false;\n        for (long i = 2; i <= arr.Count;\
    \ i++) {\n            if (arr[i] < arr[i-1])\n                last++;\n      \
    \      else\n                last = 1;\n            if (last != 1 || biggest >\
    \ arr[i])\n                biggest = last;\n            hasValue = true;\n   \
    \     }\n        return hasValue ? biggest : -1;", "        int maxIndex = -1;\n\
    \        double maxValue = Double.MaxValue;\n        double currentValue = Double.MaxValue;\n\
    \        long currentIndex;\n        foreach (long elem in arr) {\n          \
    \  currentValue = currentIndex = (double)elem;\n            if (currentValue <=\
    \ currentIndex) {\n                maxIndex = -1;\n                return -1;\n\
    \            }\n            if (currentValue > currentIndex) {\n             \
    \   maxIndex = currentIndex;\n                maxValue = currentValue;\n     \
    \       }\n        }\n        return maxIndex;", "        if (arr.Count == 0)\
    \ {\n            return -1;\n        }\n        long maxIndex = -1;\n        for\
    \ (int i = 1; i < arr.Count; ++i) {\n            if (arr[i] <= arr[i - 1]) {\n\
    \                maxIndex = i;\n            }\n        }\n        return maxIndex;",
  '        return arr.FindIndex(x=>x>arr.LastOrDefault()?-1:x==arr.FirstOrDefault()?arr.Last():x).FirstOrDefault();',
  "        long max = arr[0].Value;\n        long maxIndex = 0;\n\n        for (int\
    \ i = 1; i < arr.Count; i++) {\n            long current = arr[i].Value;\n   \
    \         if (current > max) {\n                max = current;\n             \
    \   maxIndex = i;\n            }\n        }\n\n        if (maxIndex == arr.Count\
    \ - 1) {\n            return -1;\n        }\n        return maxIndex;", "    \
    \    var arr = arr.OrderBy(x => x).ToArray();\n        for (int i = 1; i < arr.Length;\
    \ i++) {\n            if (arr[i] > arr[i - 1]) {\n                return i;\n\
    \            }\n        }\n        return -1;", "        long largest = 0;\n \
    \       for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] >= largest\
    \ && i != 0) {\n                largest = arr[i];\n            }\n        }\n\
    \        if (largest == 0) {\n            return -1;\n        }\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] <= largest) {\n       \
    \         return i;\n            }\n        }\n        return arr.Count;", " \
    \       long ret = -1;\n        long previous = arr[arr.Count - 1];\n        if\
    \ (arr.Count != 0) {\n            foreach (long x in arr) {\n                if\
    \ (x > previous) {\n                    ret = x;\n                }\n        \
    \        previous = x;\n            }\n        }\n        return ret;", "    \
    \    var maxIndex = arr.Count() - 1;\n        var result = -1;\n        foreach\
    \ (var val in arr) {\n            if (val >= arr[maxIndex]) {\n              \
    \  if (result == -1) {\n                    result = maxIndex;\n             \
    \   } else if (maxIndex - result > 1) {\n                    result = maxIndex;\n\
    \                }\n            }\n            ++maxIndex;\n        }\n      \
    \  return result;", "        bool found = false;\n        long maxIndex = -1;\n\
    \n        foreach (var x in arr) {\n            if (max < x) {\n             \
    \   max = x;\n                maxIndex++;\n            } else if (x == max) {\n\
    \                maxIndex++;\n            } else {\n                found = true;\n\
    \                break;\n            }\n        }\n\n        if (found == false)\
    \ {\n            return -1;\n        } else {\n            return maxIndex;\n\
    \        }", '        return CanArrange(arr, 0, arr.Count - 1);', "        var\
    \ candidate = arr.First();\n        long max = candidate;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            var element = arr[i];\n            if\
    \ (element <= max) {\n                max = element;\n                candidate\
    \ = element;\n            }\n        }\n        return candidate;", "        if\
    \ (arr.Count == 0) {\n            return -1;\n        }\n        long largest\
    \ = arr[0];\n        long prev = 0;\n        for (int i = 1; i < arr.Count; i++)\
    \ {\n            if (arr[i] > largest) {\n                largest = prev;\n  \
    \          }\n            prev = arr[i];\n        }\n        return largest;",
  "        if (arr.Count == 0) return -1;\n        if (arr.Count == 1) return arr[0];\n\
    \        var maxIndex = arr.Count - 1;\n        for (int i = 1; i < arr.Count;\
    \ i++) {\n            if (arr[i] >= arr[maxIndex]) {\n                maxIndex\
    \ = i;\n            }\n        }\n        return maxIndex;", "        List<long>\
    \ temp = new List<long>();\n        long current = 0;\n        int index = 0;\n\
    \        long max = -1;\n        arr.ForEach(x => {\n            if (x > current)\
    \ {\n                temp.Add(current);\n                current = x;\n      \
    \      } else {\n                if (current > max) {\n                    max\
    \ = current;\n                }\n            }\n            temp.Add(x);\n   \
    \     });\n        if (temp[0] != 0) {\n            temp.RemoveAt(0);\n      \
    \  }\n        index = temp[0];\n        return index;", "        var index = arr.Count;\n\
    \        for (index--; (index >= 0) && arr[index] >= arr[index - 1]; index--);\n\
    \        return (index >= 0) ? index : -1;", "        var maxIndex = 0;\n    \
    \    var index = 0;\n        for (int i = 0; i < arr.Count; i++) {\n         \
    \   index = i;\n            if (arr[i] > arr[index]) {\n                maxIndex\
    \ = i;\n            }\n        }\n        return (maxIndex == 0 ? -1 : maxIndex);",
  "        // Write your code here.\n        if (arr.Count == 0)\n            return\
    \ -1;\n        if (arr.Count == 1)\n            return arr[0];\n        long result\
    \ = arr[arr.Count - 1];\n        for (long i = 1; i < arr.Count; i++)\n      \
    \  {\n            if (arr[i] > result)\n            {\n                result\
    \ = arr[i];\n            }\n        }\n        return result;", "        if (arr.Count\
    \ == 0)\n            return -1;\n        var max = arr[0];\n        for (int i\
    \ = 1; i < arr.Count; i++) {\n            var tmp = arr[i];\n            if (tmp\
    \ > max) {\n                max = tmp;\n            }\n        }\n        return\
    \ max;", "        long result = 0;\n        foreach (var i in arr)\n        {\n\
    \            if (i > result)\n            {\n                result = i;\n   \
    \         }\n        }\n        return result;", "        var sorted = arr.OrderBy(x\
    \ => x);\n        int maxIndex = 0;\n        foreach (var i in sorted) {\n   \
    \         maxIndex = i;\n        }\n        if (maxIndex > 0) {\n            return\
    \ maxIndex;\n        }\n        return -1;", "        if (arr.Count <= 0)\n  \
    \          return -1L;\n        var highest = arr.First();\n        for (int i\
    \ = 1; i < arr.Count; i++)\n            if (arr[i] < highest)\n              \
    \  return -1L;\n            if (arr[i] > highest)\n                highest = arr[i];\n\
    \        return highest;", "        int left = 0;\n        int right = arr.Count\
    \ - 1;\n        long candidate = -1;\n        while (left < right) {\n       \
    \     candidate = Math.Max(arr[left], arr[right]);\n            if (arr[left]\
    \ == candidate || arr[right] == candidate) left++;\n            else if (candidate\
    \ > arr[left]) right = left - 1;\n            else if (candidate < arr[right])\
    \ left = right + 1;\n            else return candidate;\n        }\n        return\
    \ candidate;", "        if (arr == null || arr.Count == 0) return -1L;\n     \
    \   long max = arr[0];\n        int maxIndex = 0;\n        for (int i = 1; i <\
    \ arr.Count; i++)\n        {\n            if (max < arr[i])\n            {\n \
    \               max = arr[i];\n                maxIndex = i;\n            }\n\
    \        }\n        return maxIndex;", "        // Return the index with the largest\
    \ value which is not greater than\n        // or equal to the previous element.\n\
    \        long largest_index = -1;\n        long largest_val = arr.Last();\n\n\
    \        foreach (long val in arr) {\n            if (val > largest_val) {\n \
    \               largest_index = largest_val;\n                largest_val = val;\n\
    \            } else if (val == largest_val) {\n                largest_index =\
    \ val;\n            }\n        }\n        return largest_index;", "        long\
    \ maxIndex = 0;\n        long max = 0;\n\n        arr.Sort();\n\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            long current = arr[i];\n         \
    \   long previousItem = arr[i-1];\n\n            if (current <= previousItem)\
    \ {\n                return -1;\n            }\n\n            if (i == arr.Count\
    \ - 1) {\n                if (current > max) {\n                    max = current;\n\
    \                    maxIndex = i;\n                }\n            }\n       \
    \ }\n\n        return maxIndex;", "        int maxIndex = 0;\n        long index\
    \ = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ >= arr[index]) {\n                maxIndex = i;\n                break;\n  \
    \          }\n            index++;\n        }\n        return (maxIndex == -1)\
    \ ? -1L : maxIndex;", "        int maxIndex = 0;\n        long maxVal = arr[0];\n\
    \        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] > maxVal)\
    \ {\n                maxVal = arr[i];\n                maxIndex = i;\n       \
    \     }\n        }\n        if (maxVal == 0) return -1;\n        if (maxIndex\
    \ > 0) return maxIndex - 1;\n        return maxIndex;", "        if (arr.Count\
    \ <= 0) {\n            return -1;\n        }\n        if (arr.Count == 1) {\n\
    \            return arr[0];\n        }\n        long largest = arr.Last();\n \
    \       long middle = arr.Count / 2;\n        for (int i = 1; i < middle; i++)\
    \ {\n            if (arr[i] > largest) {\n                largest = arr[i];\n\
    \            }\n        }\n        if (arr[middle] >= largest) {\n           \
    \ return -1;\n        }\n        return middle-1;", "        var ans = -1;\n \
    \       var index = 0;\n        while (index+1 < arr.Count) {\n            if\
    \ (arr[index] > arr[index+1]) {\n                index++;\n            }\n   \
    \         else {\n                ans = arr[index];\n                index = index;\n\
    \            }\n        }\n        return ans;", "        long prev = -1L;\n \
    \       long maxIndex = arr.Count - 1;\n        long current;\n        foreach\
    \ (var elem in arr) {\n            if (elem < prev) {\n                return\
    \ -1;\n            }\n            if (elem > prev) {\n                prev = (long)\
    \ elem;\n                maxIndex = arr[0] > prev ? maxIndex : arr.Count - 1;\n\
    \            }\n        }\n        return maxIndex;", "        var index = -1;\n\
    \        var nextIndex = 0;\n        while (nextIndex < arr.Count && arr[nextIndex]\
    \ < arr[nextIndex - 1]) {\n            nextIndex++;\n        }\n        if (nextIndex\
    \ != arr.Count) {\n            index = nextIndex;\n            nextIndex++;\n\
    \            while (nextIndex < arr.Count && arr[nextIndex] >= arr[nextIndex -\
    \ 1]) {\n                nextIndex++;\n            }\n        }\n        return\
    \ index;", "        return arr\n            .Select((item, idx) => new { item,\
    \ idx })\n            .Where(x => x.item <= x.item + 1).Aggregate((x, y) => x\
    \ < y ? x : y).idx;", "        return arr.Skip(1).Aggregate(arr.IndexOf((x) =>\
    \ x > arr[0]),\n                                     (x, i) => x.CompareTo(arr[i]\
    \ - 1), -1);", "        // TODO: Write your code in C# 6.0 with .NET Fiddle here\n\
    \        var a = arr.ToArray();\n        var max = a[0];\n        var res = -1;\n\
    \        for (var i = 0; i < a.Length; i++) {\n            if (max >= a[i]) continue;\n\
    \            res = i;\n            max = a[i];\n        }\n        return res;",
  "        // Write your answer here\n        // Declare and initialize variables\n\
    \        int current = 0;\n        int previous = 0;\n        long largest = int.MaxValue;\n\
    \        // Look for greatest index\n        for (int i = 0; i < (arr.Count -\
    \ 1); i++) {\n            if (arr[i] > arr[i + 1]) {\n                current++;\n\
    \                previous = current;\n                if (current > largest) {\n\
    \                    largest = current;\n                }\n            } else\
    \ {\n                current++;\n                previous = current;\n       \
    \     }\n        }\n        // No element was found, return -1\n        if (largest\
    \ == int.MaxValue) {\n            return -1;\n        }\n        // No element\
    \ was found, return -1\n        if (arr[largest] > largest) {\n            return\
    \ largest;\n        }\n        // We found an element greater than or equal to\
    \ previous element,\n        // so return the index of the first such element\
    \ that is less than\n        // or equal to previous element + 1\n        int\
    \ first;\n        do {\n            first = previous;\n            previous++;\n\
    \        } while (arr[first] < arr[previous]);\n        return first + 1;", " \
    \       var maxIndex = -1;\n        var maxElement = arr[0];\n        for (int\
    \ i = 0; i < arr.Count - 1; i++) {\n            if (arr[i] > maxElement) {\n \
    \               maxIndex = i;\n                maxElement = arr[i];\n        \
    \    }\n        }\n        return maxIndex > -1 ? maxIndex : -1;", "        long\
    \ res = arr.FirstOrDefault(x => x >= arr.First());\n        if (res != -1)\n \
    \           return res;\n        else\n            return -1;", "        long\
    \ largest = -1, maxIndex = -1;\n        for (int i = 1; i < arr.Count; i++) {\n\
    \            if (arr[i] < arr[i - 1]) {\n                largest = arr[i - 1];\n\
    \                maxIndex = i;\n            }\n        }\n        return maxIndex\
    \ >= 0 ? maxIndex : largest;", "        bool found = false;\n        long maxIndex\
    \ = -1;\n        long largestIndex = 0;\n        for (int i = 0; i < arr.Count\
    \ && !found; i++) {\n            long thisIndex = i;\n            if (thisIndex\
    \ < arr.Count - 1) {\n                if (arr[i] < arr[i + 1]) {\n           \
    \         largestIndex = Math.Max(thisIndex, largestIndex);\n                }\n\
    \            }\n            else {\n                if (arr[i] > arr[largestIndex])\
    \ {\n                    largestIndex = Math.Max(thisIndex, largestIndex);\n \
    \               }\n            }\n        }\n        return largestIndex;", " \
    \       if (arr.Count <= 1)\n            return -1;\n        long maxIndex = 0;\n\
    \        long minIndex = arr.Count - 1;\n        while (minIndex > -1) {\n   \
    \         long currentMaxIndex = maxIndex;\n            for (int index = 0; index\
    \ < arr.Count; index++) {\n                if (arr[index] <= arr[currentMaxIndex])\n\
    \                    break;\n                else\n                    currentMaxIndex\
    \ = index;\n            }\n            if (maxIndex == currentMaxIndex)\n    \
    \            return -1;\n            maxIndex = currentMaxIndex;\n           \
    \ minIndex--;\n        }\n        return maxIndex;", "        long largestIndex\
    \ = -1;\n        long lastElementIndex = arr.Count-1;\n        foreach (long i\
    \ in arr) {\n            while (lastElementIndex > 0 && arr[i] >= arr[lastElementIndex])\n\
    \                lastElementIndex--;\n            if (lastElementIndex == -1)\n\
    \                return largestIndex;\n            if (arr[i] < arr[lastElementIndex])\n\
    \                largestIndex = i;\n            lastElementIndex--;\n        }\n\
    \        return largestIndex;", "        int low = 0;\n        int high = arr.Count\
    \ - 1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n\
    \            int result = arr[mid];\n            if (result >= arr[mid-1]) return\
    \ mid;\n            if (result < arr[mid+1]) return -1;\n            if (result\
    \ == arr[mid]) { low = mid + 1; continue; }\n            high = mid - 1;\n   \
    \     }\n        return -1;", "        // Write your solution here\n        var\
    \ largest = arr.First();\n        var largestIndex = 0;\n        var currentIndex\
    \ = 1;\n        while (currentIndex <= arr.Count - 1) {\n            if (arr[currentIndex]\
    \ <= largest) {\n                if (arr[currentIndex] == arr[currentIndex - 1])\
    \ {\n                    largest = arr[currentIndex];\n                    largestIndex\
    \ = currentIndex;\n                }\n                currentIndex++;\n      \
    \      } else {\n                currentIndex++;\n            }\n        }\n \
    \       return largestIndex;"]
stop_tokens:
- "\n    }\n"
