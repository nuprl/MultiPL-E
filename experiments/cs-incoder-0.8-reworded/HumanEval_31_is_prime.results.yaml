language: cs
name: HumanEval_31_is_prime
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // Return false for 0 and 1 (which are not primes).\n\
    \        if ((n == 0) || (n == 1))\n            return false;\n\n        // Test\
    \ if n is a power of two.\n        if (n % 2 == 0)\n            return ((n & 1)\
    \ == 0);\n\n        // Test odd numbers only.\n        if ((n & 1) == 1)\n   \
    \         return false;\n\n        // Test even numbers only.\n        if ((n\
    \ & 1) == 0)\n            return ((n % 2 != 0) && ((n % 3) == 0) && ((n % 5) ==\
    \ 0));\n\n        // If n is not odd, iterate over its three odd factors checking\n\
    \        // them for primeness.\n        for (long test = 3; test < n; test +=\
    \ 2) {\n            if ((n % test) == 0)\n                return false;\n    \
    \    }\n\n        // If we made it here, n was not a prime number. Return true.\n\
    \        return true;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <40ff6b8ad88d4d2290893a14cd7f88f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <40ff6b8ad88d4d2290893a14cd7f88f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015819
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2)\n            return false;\n\n       \
    \ long limit = n;\n\n        while (limit % 2 == 0) {\n            limit /= 2;\n\
    \        }\n\n        for (long i = 3; i <= limit; i += 2) {\n            if (n\
    \ % i == 0)\n                return false;\n        }\n\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6e00b4afad074a3ea785ea19fc293670>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6e00b4afad074a3ea785ea19fc293670>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015819
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n == 1L || n == 0L)\n            return false;\n\
    \        else if (n == 2L)\n            return true;\n        else if (n % 2 ==\
    \ 0L)\n            return false;\n        else if (n % 3 == 0L)\n            return\
    \ false;\n        else if (n % 5 == 0L)\n            return false;\n        //\
    \ If n is odd, then (n / 2) % 2 != 0 which means we can use\n        // n%2 to\
    \ check odd/even numbers. Since odd numbers have been\n        // covered, this\
    \ will cover them all.\n        int nDivisors = (int)Math.Sqrt(n);\n        for\
    \ (int i = 3; i <= nDivisors; i += 2)\n            if (n % i == 0L)\n        \
    \        return false;\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ff44251d8ac347c6a3d337745f6f2095>:0 \n"
  stdout: ''
  timestamp: 1660015819
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2) {\n            return false;\n       \
    \ }\n        if (n == 2) {\n            return true;\n        }\n        if (n\
    \ % 2 == 0) {\n            return false;\n        }\n        double test = 2;\n\
    \        long max = long.MaxValue;\n        while (test < max) {\n           \
    \ if (n % test == 0) {\n                return false;\n            }\n       \
    \     test += 2;\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1660015824
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        long n = Math.Sqrt(n);\n        long m = n / 2;\n\
    \        // Primes less than one cannot be primes\n        if (n < 2)\n      \
    \      return false;\n        // If any even number is divided evenly, that is\
    \ not a prime\n        if (n % 2 == 0)\n            return false;\n        //\
    \ If no number is multiplied or divided by any odd number, that is not a prime\n\
    \        if (m == 0 || m == 1)\n            return false;\n        // For all\
    \ odd numbers, test the division up to and including the square root\n       \
    \ for (long m = 3; m <= n; m += 2)\n            if (n % m == 0)\n            \
    \    return false;\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpov5q2ttj.cs(25,14): error CS0136: A local or parameter named ''n'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpov5q2ttj.cs(25,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpov5q2ttj.cs(37,19): error CS0136: A local or parameter named ''m'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpov5q2ttj.cs(25,28): error CS0165: Use of unassigned local variable ''n''

    '
  timestamp: 1660015819
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n <= 1) return false;\n        if (n == 2) return\
    \ true;\n\n        for (int i = 2; i <= n/2; i++) {\n            if (n % i ==\
    \ 0) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n  \
    \  Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L)) ==\
    \ (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015819
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // Assume that n is prime\n        bool result =\
    \ true;\n        long factor = 2;\n        while (true) {\n            // If n\
    \ is divisible by factor, we have found a factor which is\n            // not\
    \ prime. Break from this loop.\n            if (n % factor == 0) break;\n    \
    \        // If we haven't found a factor yet, this means that (n/factor)\n   \
    \         // is less than 2, or n is divisible by 1. We therefore have\n     \
    \       // found that n is prime, so this is not a factor of a factor\n      \
    \      // of n and we must continue to factor n. Since n has been tested,\n  \
    \          // it is not divisible by factor, so factor must also be tested.\n\
    \            if (factor % 2 == 0) return false;\n            // Increase factor\
    \ by 2, since we found a factor which is not even.\n            factor++;\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7fd20b7ccd9a4e3dbdfdc1ed204253d0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7fd20b7ccd9a4e3dbdfdc1ed204253d0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015819
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n % 2 == 0) return false;\n        for (int i\
    \ = 3; i <= n / i; i += 2) {\n            if (n % i == 0) return false;\n    \
    \    }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <47eb79825814403ca4833623b26c737d>:0 \n"
  stdout: ''
  timestamp: 1660015819
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        bool isPrime = true;\n        long sqrtn = Math.Sqrt(n);\n\
    \        for (long i = 1; i <= sqrtn; i++) {\n            bool isPrimeToTheRight\
    \ = n % i == 0;\n            if (isPrimeToTheRight == false) {\n             \
    \   isPrime = false;\n                break;\n            }\n        }\n     \
    \   return isPrime;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L)) ==\
    \ (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg8pus51i.cs(26,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015819
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // Use a Sieve of Eratosthenes method of finding\
    \ prime numbers\n        // https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n\
    \        if (n == 1L) return true;\n        if ((n % 2L) == 0L) return IsPrime(n\
    \ / 2L);\n\n        // Divide by two until we get a number that's not evenly divisible\
    \ \n        // (the previous number was evenly divisible)\n        long x = 2L;\n\
    \        while (x < (n + 1L)) {\n            if (n % xL == 0L) return false;\n\
    \            x += 2L;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n  \
    \  Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L)) ==\
    \ (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphc2hkdae.cs(34,21): error CS0103: The name ''xL'' does not exist in the
    current context

    '
  timestamp: 1660015819
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        long limit = (long)Math.Sqrt(n);\n        if (limit\
    \ > long.MaxValue) {\n            limit = long.MaxValue;\n        }\n        //\
    \ Primes:\n        //\n        // 2 ^ ((2^4 - 1)) / 6 = 2 ^ ((2^4 - 3) / 2) =\
    \ 2 ^ ((2^4 - 2) / 2) = 2 ^ 2\n        //\n        // 2 ^ ((2^5 - 1)) / 6 = 2\
    \ ^ ((2^5 - 3) / 2) = 2 ^ ((2^5 - 2) / 2) = 2 ^ 4\n        //\n        // ...\n\
    \        //\n        // 2 ^ ((2^100 - 1)) / 6 = 2 ^ ((2^100 - 3) / 2) = 2 ^ ((2^100\
    \ - 2) / 2) = 2 ^ 16\n        //\n        // 2 ^ ((2^101 - 1)) / 6 = 2 ^ ((2^101\
    \ - 3) / 2) = 2 ^ ((2^101 - 2) / 2) = 2 ^ 32\n        long limit2 = (long)Math.Ceiling((double)limit);\n\
    \        if (limit2 == limit) {\n            limit2 = limit2;\n        }\n   \
    \     bool result = false;\n        long m = (long)Math.Pow(2, limit2 - 1);\n\
    \        while (m < limit2) {\n            if (n % m == 0) {\n               \
    \ result = true;\n                break;\n            }\n            m++;\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa3ffdb45dbc4fa6b76b7cd12fe4d145>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa3ffdb45dbc4fa6b76b7cd12fe4d145>:0 \n"
  stdout: None
  timestamp: 1660015824
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        bool result = true;\n        for (long i = 3; i <\
    \ n; i += 2) {\n            if (n % i == 0) {\n                result = false;\n\
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dc30fc33cf154d2799f81971d48ffc64>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dc30fc33cf154d2799f81971d48ffc64>:0 \n"
  stdout: ''
  timestamp: 1660015819
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // Check whether n is odd.\n        if (n % 2 ==\
    \ 0) return false;\n        // Check whether n is 1 or smaller.\n        if (n\
    \ < 2) return false;\n        // Check whether n is divisible by 2 or 3.\n   \
    \     if ((n % 3 == 0) || (n % 5 == 0)) return false;\n        // Check whether\
    \ n is divisible by any prime less than n.\n        ulong test = 2;\n        ulong\
    \ p = 3;\n        while ((n % p == 0) || (n % p == 1)) {\n            ++p;\n \
    \           ++test;\n        }\n        if (test > Math.Sqrt(n)) return false;\n\
    \        // Check whether n is divisible by any prime larger than n.\n       \
    \ test = 2;\n        p = 5;\n        while ((n % p == 0) || (n % p == 1)) {\n\
    \            ++p;\n            ++test;\n        }\n        if (test > Math.Sqrt(n))\
    \ return false;\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx47ipgcs.cs(34,17): error CS0034: Operator ''%'' is ambiguous on operands
    of type ''long'' and ''ulong''

    /tmp/tmpx47ipgcs.cs(34,33): error CS0034: Operator ''%'' is ambiguous on operands
    of type ''long'' and ''ulong''

    /tmp/tmpx47ipgcs.cs(42,17): error CS0034: Operator ''%'' is ambiguous on operands
    of type ''long'' and ''ulong''

    /tmp/tmpx47ipgcs.cs(42,33): error CS0034: Operator ''%'' is ambiguous on operands
    of type ''long'' and ''ulong''

    '
  timestamp: 1660015819
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        bool prime = true;\n        long sqrtn = Math.Sqrt(n);\n\
    \        long m = n >> 1;\n        long n2 = 2 * n;\n        long n4 = 2 * n2;\n\
    \        long n6 = 2 * n4;\n\n        for (long i = 3; i <= sqrtn; i += 2) {\n\
    \            if (n % i == 0)\n                prime = false;\n        }\n    \
    \    if (prime == true)\n            return true;\n        else\n            return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwqwc_ulf.cs(26,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015819
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        long m = n;\n        long max = Long.MaxValue;\n\
    \        long x = 1;\n        while (m < max) {\n            x = (m * x) % max;\n\
    \            if (x == 2 || x == 3) {\n                return true;\n         \
    \   }\n            if (x % 2 == 0) {\n                m++;\n            } else\
    \ {\n                m += 2;\n            }\n        }\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfsqo27la.cs(26,20): error CS0103: The name ''Long'' does not exist in
    the current context

    '
  timestamp: 1660015819
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2) return false;\n        if ((n & 1) ==\
    \ 0) return false;\n        long sq = n;\n        while (sq > 1) {\n         \
    \   if (n % sq == 0) return false;\n            sq = sq >> 1;\n        }\n   \
    \     return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <067c6378c0ac4c48ae8e7b298b6fdc95>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <067c6378c0ac4c48ae8e7b298b6fdc95>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015819
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        long limit = (long)Math.Sqrt(n) + 1;\n        for(long\
    \ i = 2; i <= limit; ++i) {\n            if(n % i == 0) {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n  \
    \  Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L)) ==\
    \ (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a18dac372cd449ccb242fd4452cfa365>:0 \n"
  stdout: ''
  timestamp: 1660015819
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // If the number is a power of 2, then its prime\
    \ is true.\n        // For example, 8 is true because the 2^0 = 1.\n        if\
    \ (n >= 2)\n            return true;\n        // Otherwise, we can test whether\
    \ there is a factor of n in the number\n        // that is less than n.  Since\
    \ there must be one factor of\n        // n less than n to make the number positive,\
    \ there are only two\n        // factors less than n.\n        while (n % 2 ==\
    \ 0)\n            n /= 2;\n        while (n % 3 == 0)\n            n /= 3;\n \
    \       while (n % 5 == 0)\n            n /= 5;\n        while (n % 7 == 0)\n\
    \            n /= 7;\n        // If n is not evenly divisible by any prime factor\
    \ of n, the number is\n        // prime.  Otherwise, it is composite.\n      \
    \  return n == 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <864eec30154541a1be58154d38a541d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <864eec30154541a1be58154d38a541d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015819
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2) {\n            return false;\n       \
    \ }\n        // Only odd numbers are prime.\n        if (n % 2 == 0) {\n     \
    \       return n == 2;\n        }\n\n        long limit = (long)Math.Sqrt(n) +\
    \ 1;\n\n        // If n was divisible by 2 or 3, then it was prime.\n        if\
    \ (n % 3 == 0) {\n            return true;\n        }\n\n        // The smallest\
    \ factor of n is 2.\n        long i = 3;\n        while (i <= limit) {\n     \
    \       if (n % i == 0) {\n                return false;\n            }\n    \
    \        i += 2;\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015819
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if ((n & 1) == 0) // n is even\n            return\
    \ n == 2;\n        long limit = (long)Math.Sqrt(n);\n        for (long i = 3;\
    \ i <= limit; i+=2)\n            if (n % i == 0)\n                return false;\n\
    \        return true;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1cd94042f48e41468adfd19be56ac6d0>:0 \n"
  stdout: ''
  timestamp: 1660015819
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n == 1L) return true;\n        if (n == 2L) return\
    \ true;\n        if (n % 2L == 1L) return false;\n\n        long limit = (long)\
    \ Math.Sqrt(n) + 1L;\n\n        for(long i = 2L; i <= limit; i++) {\n        \
    \    if(n%i == 0L) return false;\n        }\n\n        return true;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) ==\
    \ (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <681c33540f494a5886b03c57684a3b34>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <681c33540f494a5886b03c57684a3b34>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015819
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2) {\n            return false;\n       \
    \ }\n        if (n < 4) {\n            return true;\n        }\n        if (n\
    \ % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        var\
    \ limit = (int)Math.Sqrt(n);\n        for (int i = 3; i * i <= limit; i = i +\
    \ 2) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n  \
    \  Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L)) ==\
    \ (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dfa09e71d0c54d74aceb16ced85daebb>:0 \n"
  stdout: ''
  timestamp: 1660015819
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // The Sieve of Eratosthenes is more efficient than\
    \ the Sieve of Atkin.\n        bool isPrime = true;\n        if (n <= 1)\n   \
    \         return isPrime;\n        List<long> primes = new List<long>();\n   \
    \     // Start with a prime.\n        primes.Add(2);\n        // All odd numbers\
    \ not divisible by any prime are prime.\n        for (int i = 3; i <= Math.Floor(Math.Sqrt(n));\
    \ i += 2)\n            if (n % i == 0)\n                isPrime = false;\n   \
    \     // The remainder of n when divided by each prime is 0.\n        // So we\
    \ know that each prime is divisble by n or more.\n        // Hence we only need\
    \ to check up to sqrt(n).\n        // If n was not a multiple of any prime, then\
    \ n is prime.\n        for (int i = 3; i <= Math.Floor(Math.Sqrt(n)); i += 2)\n\
    \            if (n % i == 0)\n                isPrime = true;\n        for (int\
    \ i = 2; i <= Math.Floor(Math.Sqrt(n)); i++) {\n            // If n is divisible\
    \ by i, then n is not prime.\n            if (n % i == 0)\n                isPrime\
    \ = false;\n        }\n        return isPrime;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <106ddfbd00fd4e1fadce2883a3ec1ef9>:0 \n"
  stdout: ''
  timestamp: 1660015819
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2) {\n            return false;\n       \
    \ }\n        long max = (long)Math.Sqrt(n);\n        long lastOne = max / 2 -\
    \ 1;\n        long lastTwo = max / 2;\n        for (long x = 2; x <= max; x++)\
    \ {\n            long testNum = x * x;\n            if (testNum > lastTwo) {\n\
    \                break;\n            }\n            if (testNum % n == 0) {\n\
    \                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c2003a4c30064acaab2850d8df16fc58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c2003a4c30064acaab2850d8df16fc58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015819
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n <= 1) return false;\n        if (n == 2 ||\
    \ n == 3) return true;\n        if (n % 2 == 0 || n % 3 == 0) return false;\n\
    \        int[] factors = GetFactors(n);\n        foreach (int f in factors) {\n\
    \            if (n % f == 0) {\n                return false;\n            }\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfvl5gvp2.cs(28,25): error CS0103: The name ''GetFactors'' does not exist
    in the current context

    '
  timestamp: 1660015819
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if ((n <= 1) || (n <= 3)) {\n            return false;\n\
    \        }\n        if (n == 2 || n == 3) {\n            return true;\n      \
    \  }\n\n        // Test even and odd numbers\n        long max = (long)Math.Sqrt(n);\n\
    \        if (n % 2 == 0) {\n            return IsPrime((long) Math.Floor(n / 2));\n\
    \        }\n        if (n % 2 == 1) {\n            return false;\n        }\n\
    \        // Test even numbers that divide the odd numbers less than max\n    \
    \    int count = 0;\n        for (long m = 2; m < max; m += 2) {\n           \
    \ if ((n % m) == 0) {\n                count++;\n            }\n        }\n  \
    \      return count == 0;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpti1f6w53.cs(35,40): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Floor(decimal)'' and ''Math.Floor(double)''

    '
  timestamp: 1660015819
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        Debug.Assert(n != 0);\n        bool prime = true;\n\
    \        long squareRoot = n.Sqrt() * n;\n        long factor = 2;\n        long\
    \ limit = n + 1;\n\n        while (factor <= limit) {\n            long squareFactor\
    \ = factor * factor;\n            if (squareFactor > squareRoot)\n           \
    \     squareFactor = squareRoot;\n            if (squareFactor >= n)\n       \
    \         break;\n            prime &= (squareFactor % n) == 0;\n            factor++;\n\
    \        }\n        return prime;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf7dvoh3a.cs(27,29): error CS1061: ''long'' does not contain a definition
    for ''Sqrt'' and no accessible extension method ''Sqrt'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1660015819
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        bool result = true;\n        if (n < 2L) {\n    \
    \        result = false;\n        }\n        else if (n > 7L) {\n            result\
    \ = false;\n        }\n        else {\n            long limit = (long.MaxValue\
    \ - 1L);\n            while (n > limit) {\n                if (n % limit == 0L)\
    \ {\n                    result = false;\n                    break;\n       \
    \         }\n                limit--;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db8e364122e94d6a93bce090338e7bad>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db8e364122e94d6a93bce090338e7bad>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2) return false;\n        if (n <= 3) return\
    \ true;\n        if ((n % 2) == 0) return false;\n        if ((n % 3) == 0) return\
    \ false;\n        // We can skip all even numbers less than 2.\n        if (n\
    \ % 2 == 0) return false;\n        // If n is a prime, we can skip all even numbers.\n\
    \        if (n == 2) return true;\n        // If n is greater than 2, we can skip\
    \ all odd numbers.\n        if ((n > 2) & (n % 2 == 0)) {\n            int k =\
    \ 3;\n            while (k <= n - 2) {\n                if ((n % k) == 0) return\
    \ false;\n                k = k + 2;\n            }\n        }\n        return\
    \ true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <85245ca5fe2443feb54ae8f4290fcf81>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <85245ca5fe2443feb54ae8f4290fcf81>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        long m = 1;\n        for (int i = 2; i <= n / 2;\
    \ i++) {\n            if (n % i == 0) {\n                m = i;\n            \
    \    break;\n            }\n        }\n        if (m == 1) { return true; }\n\
    \        long max = (long)Math.Sqrt(n);\n        long limit = max/2 + 1;\n   \
    \     for (long i = 2; i <= limit; i++) {\n            if (n % i == 0) { return\
    \ false; }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e4994bcacf524c49acb2a005a967e77c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e4994bcacf524c49acb2a005a967e77c>:0 \n"
  stdout: ''
  timestamp: 1660015820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        long s = n;\n        for (int i = 2; i <= Math.Sqrt(s);\
    \ i++)\n            if (s % i == 0)\n                return false;\n        return\
    \ true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ec386799eb84f649e848b17e18917f9>:0 \n"
  stdout: ''
  timestamp: 1660015820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n == 1)\n            return false;\n        long\
    \ sqrtN = (long)Math.Sqrt(n);\n        for (int i = 3; i <= sqrtN; i += 2)\n \
    \           if (n % i == 0)\n                return false;\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f877e9dd9a514b4283d549849ad9ee7e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f877e9dd9a514b4283d549849ad9ee7e>:0 \n"
  stdout: ''
  timestamp: 1660015820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        long sqrtn = Math.Sqrt(n);\n        for (long i =\
    \ 2; i <= sqrtn; i++) {\n            if (n % i == 0)\n                return false;\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo63nbmh1.cs(25,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015819
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        long sqrt = n * n;\n        bool result = true;\n\
    \        long limit = sqrt - 1;\n        do {\n            result &= n % limit\
    \ == 0;\n        } while (!result);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n\
    \    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1660015825
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n == 1L) return true;\n        if ((n & 1) ==\
    \ 0) return false;\n\n        // See if we can divide it by any odd factor of\
    \ 3 or higher.\n        // If n is divisible by 2 *and* by 3, then it's prime.\n\
    \        // If n is divisible by any even factor of 3 or higher, then it's not\
    \ prime.\n        long max = long.MaxValue;\n        for (long i = 2; i <= max;\
    \ i += 2) {\n            if ((n & (1L << i)) != 0) return false;\n        }\n\
    \        return true;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgqj02e5v.cs(33,23): error CS0019: Operator ''<<'' cannot be applied to
    operands of type ''long'' and ''long''

    '
  timestamp: 1660015819
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        long limit = (long)Math.Sqrt(n) + 1;\n        bool\
    \ isPrime = true;\n        if (n == 1L)\n            return false;\n        if\
    \ (n == 2L)\n            return true;\n        for (int i = 2; i <= limit; ++i)\
    \ {\n            if (n % i == 0L)\n                isPrime = false;\n        }\n\
    \        return isPrime;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        long sqrtN = Math.Sqrt(n);\n        bool isPrime;\n\
    \        long div = 2;\n        while (div <= sqrtN) {\n            if (n % div\
    \ == 0) {\n                isPrime = false;\n                break;\n        \
    \    }\n            isPrime = true;\n            div += 2;\n        }\n      \
    \  return isPrime;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxmyt95bp.cs(25,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpxmyt95bp.cs(36,16): error CS0165: Use of unassigned local variable ''isPrime''

    '
  timestamp: 1660015819
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // Check n is positive\n        if (n < 2) return\
    \ false;\n        // Check n is odd\n        if ((n % 2) == 0) return false;\n\
    \        // Find the first even number.\n        long i = 3;\n        while ((i\
    \ + 6L) <= n) i += 6L;\n        // Check i is prime\n        while ((n % i) ==\
    \ 0) i += 6L;\n        return (n % 6L == 0L);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0355d67ebdc347bd9a53c04da096bf26>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0355d67ebdc347bd9a53c04da096bf26>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2L) return falseL;\n        if (n < 6L) return\
    \ trueL;\n        long m = (long) Math.Sqrt(n + 1L);\n        long k = 0L;\n \
    \       long x = 2L;\n        while ((k < (long) Math.Sqrt(m)) && (x < (long)\
    \ Math.Sqrt(m))) {\n            if (m % x == 0L) return false;\n            k\
    \ += m * m * x; \n            x++L;\n        }\n        if (m == n) return true;\n\
    \        if (m > n) return false;\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n  \
    \  Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L)) ==\
    \ (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7f8ormui.cs(33,16): error CS1002: ; expected

    '
  timestamp: 1660015819
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // Test for divisibility by 2 and 3\n        if (n\
    \ >= 2 && (n % 2) == 0) {\n            return false;\n        }\n        if (n\
    \ >= 3 && (n % 3) == 0) {\n            return false;\n        }\n\n        //\
    \ If n is odd, then n is composite.\n        if ((n & 1) == 1) {\n           \
    \ return false;\n        }\n\n        // Find a value for m such that 2^m divides\
    \ n\n        long m = (long)Math.Sqrt(n);\n        for (long d = 2; d <= m / 2;\
    \ d += 2) {\n            // If n is not divisible by d then n is composite.\n\
    \            if ((n % d) == 0) {\n                return false;\n            }\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f623bb8fa52044ada1fa326138ded260>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f623bb8fa52044ada1fa326138ded260>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2) return false;\n\n        bool isPrime\
    \ = true;\n\n        for (int i = 3; i <= n / i; i += 2)\n            if (n %\
    \ i == 0)\n                isPrime = false;\n\n        return isPrime;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <47db3f44c22040f0ba57ce6db84482ad>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <47db3f44c22040f0ba57ce6db84482ad>:0 \n"
  stdout: ''
  timestamp: 1660015820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        bool result = false;\n        long factor = 2;\n\
    \        while (factor < n / 2) {\n            if (n % factor == 0) {\n      \
    \          result = true;\n                break;\n            }\n           \
    \ factor += 2;\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e92ea230e95b42e8975ea972702a0d6b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e92ea230e95b42e8975ea972702a0d6b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // http://en.wikipedia.org/wiki/Primality_test#Naive\n\
    \        // As the value of n increases, we only need to check odd numbers.\n\
    \        // If n is odd, the number must be prime.  If n is even, it must not\n\
    \        // be prime.\n        long limit = Int64.MaxValue / 2;\n        if (n\
    \ < 2) return false;\n        if (n >= limit) return false;\n        if (n ==\
    \ 2) return true;\n        if (n % 2 == 0) return false;\n        if (n % 3 ==\
    \ 0) return true;\n        long a[] = { 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47 };\n        long s = 3;\n        long i = 5;\n        while (i <=\
    \ limit) {\n            if ((n % i == 0) && (s != 2)) {\n                return\
    \ false;\n            }\n            s += i;\n            i += 2;\n        }\n\
    \        // The number is prime\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n  \
    \  Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L)) ==\
    \ (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq8xpsq11.cs(35,15): error CS0650: Bad array declarator: To declare a managed
    array the rank specifier precedes the variable''s identifier. To declare a fixed
    size buffer field, use the fixed keyword before the field type.

    '
  timestamp: 1660015819
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // Check for factors.\n        for (int d = 2; d\
    \ < Math.Sqrt(n); d++) {\n            if (n % d == 0) {\n                return\
    \ false;\n            }\n        }\n        // Check for composite.\n        if\
    \ ((n + 1) % 2 == 0) {\n            return false;\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <83676a0e091a44a0a606440157f10b23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <83676a0e091a44a0a606440157f10b23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        ulong k = 2;\n        ulong t = (ulong) n;\n    \
    \    if (n == 2L) {\n            return true;\n        }\n        while (k <=\
    \ t-1) {\n            if ((t % k) == 0) {\n                return false;\n   \
    \         }\n            k += 2;\n        }\n        return true;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) ==\
    \ (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c730565f70904bca931dd4b342f9234c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c730565f70904bca931dd4b342f9234c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n <= 1)\n            return false;\n        bool\
    \ isPrime = true;\n        for (int i = 2; i <= Math.Sqrt(n); i++) {\n       \
    \     if (n % i == 0)\n                isPrime = false;\n        }\n        return\
    \ isPrime;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2)\n            return false;\n        if\
    \ (n % 2 == 0)\n            return false;\n        long limit = (long)Math.Sqrt(n)\
    \ + 1;\n        long[] p = new long[limit];\n        Array.Sort(p);\n        bool\
    \ found = false;\n        for (int i = 0; i < limit - 1; i++) {\n            if\
    \ (p[i] > p[i + 1])\n                break;\n            long m = p[i];\n    \
    \        if (n % m == 0) {\n                found = true;\n                break;\n\
    \            }\n        }\n        return found;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.DivideByZeroException: Attempted to divide\
    \ by zero.\n  at Problem.IsPrime (System.Int64 n) [0x0005f] in <f49d17b5a0c649d08c5c494e4d2045af>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00011] in <f49d17b5a0c649d08c5c494e4d2045af>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.DivideByZeroException: Attempted\
    \ to divide by zero.\n  at Problem.IsPrime (System.Int64 n) [0x0005f] in <f49d17b5a0c649d08c5c494e4d2045af>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00011] in <f49d17b5a0c649d08c5c494e4d2045af>:0\
    \ \n"
  stdout: ''
  timestamp: 1660015820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        long limit = (long)Math.Sqrt(n);\n        long limit2\
    \ = (long)(Math.Pow(2, limit));\n\n        long x = 2;\n\n        for (long i\
    \ = 2; i <= limit2; i++) {\n            if (n % i == 0) {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n  \
    \  Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L)) ==\
    \ (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa7cf7ef12684e36af274397c3ce01af>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa7cf7ef12684e36af274397c3ce01af>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        var m = DivisiblePrimeTable;\n        long limit\
    \ = (long)Math.Sqrt(n);\n        long test;\n        while (n > 0) {\n       \
    \     test = n % limit;\n            if (test != 0) {\n                if (m[n]\
    \ != 0) {\n                    return false;\n                }\n            \
    \    m[n] = 1;\n            }\n            n /= limit;\n        }\n        return\
    \ true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt6u8lnpf.cs(25,17): error CS0103: The name ''DivisiblePrimeTable'' does
    not exist in the current context

    '
  timestamp: 1660015820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // If n is even, return false (divisible by 2).\n\
    \        if (n % 2 == 0) return false;\n\n        // If n is even, return false\
    \ (divisible by 2).\n        if (n % 2 == 0) return false;\n\n        // If n\
    \ is odd, return true (divisible by any integer > 2).\n        if (n % 2 == 0)\
    \ return true;\n\n        // If n is even, return true (divisible by 2).\n   \
    \     if (n % 2 == 0) return true;\n\n        // If n is odd, return true (divisible\
    \ by any integer > 2).\n        if (n % 2 == 0) return true;\n\n        // If\
    \ we get here, all numbers are divisible by 2.\n        // Throw an exception.\n\
    \        throw new ArgumentOutOfRangeException(n.ToString());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n\
    \    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument\
    \ was out of the range of valid values.\nParameter name: 101\n  at Problem.IsPrime\
    \ (System.Int64 n) [0x0005c] in <f75df2e257074b8792e327ab27059f25>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00011] in <f75df2e257074b8792e327ab27059f25>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified\
    \ argument was out of the range of valid values.\nParameter name: 101\n  at Problem.IsPrime\
    \ (System.Int64 n) [0x0005c] in <f75df2e257074b8792e327ab27059f25>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00011] in <f75df2e257074b8792e327ab27059f25>:0 \n"
  stdout: ''
  timestamp: 1660015820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        long limit = (long)(Math.Sqrt(n));\n        // Test\
    \ for divisibility by 2 and 3.\n        if (n < 2) return false;\n        if (n\
    \ % 2 == 0) return n == 2;\n        if (n % 3 == 0) return n == 3;\n        bool\
    \ isPrime = false;\n        for (int i = 3; i <= limit; i += 2) {\n          \
    \  if (n % i == 0) return false;\n            if (n == Math.Floor(n)) isPrime\
    \ = true;\n        }\n        return isPrime;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5npcw9rt.cs(33,27): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Floor(decimal)'' and ''Math.Floor(double)''

    '
  timestamp: 1660015820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // Prime numbers are only divisible by themselves,\
    \ 1L.\n        if (n < 1L)\n            return false;\n        // Only odd numbers\
    \ can have even factors.\n        if (n & 1L)\n            return false;\n   \
    \     // Only even numbers can have even factors.\n        if ((n & 3L) == 0L)\n\
    \            return true;\n        // All even numbers are of the form 6n+1, so\
    \ the only even factors are 6n + 1 or 6n-1\n        if ((n & 6L) == 0L)\n    \
    \        return true;\n        // All even numbers are of the form 6n+3, so the\
    \ only even factors are 6n + 1 or 6n+3\n        if ((n & 7L) == 0L)\n        \
    \    return true;\n        // All even numbers are of the form 6n+5, so the only\
    \ even factors are 6n + 1 or 6n+5\n        if ((n & 8L) == 0L)\n            return\
    \ true;\n        // All even numbers are of the form 6n+7, so the only even factors\
    \ are 6n + 1 or 6n+7\n        if ((n & 9L) == 0L)\n            return true;\n\
    \        // All even numbers are of the form 6n+9, so the only even factors are\
    \ 6n + 1 or 6n+9\n        if ((n & 10L) == 0L)\n            return true;\n   \
    \     // All even numbers are of the form 6n+11, so the only even factors are\
    \ 6n + 1 or 6n+11\n        if ((n & 12L) == 0L)\n            return true;\n  \
    \      // All even numbers are of the form 6n+13, so the only even factors are\
    \ 6n + 1 or 6n+13\n        if ((n & 14L) == 0L)\n            return true;\n  \
    \      // All even numbers are of the form 6n+15, so the only even factors are\
    \ 6n + 1 or 6n+15\n        if ((n & 16L) == 0L)\n            return true;\n  \
    \      // All even numbers are of the form 6n+17, so all odd factors of 6n are\
    \ odd.\n        if ((n & 18L) == 0L)\n            return true;\n        // All\
    \ even numbers are of the form 6n+19, so all odd factors of 6n are odd.\n    \
    \    if ((n & 20L) == 0L)\n            return true;\n        // All even numbers\
    \ are of the form 6n+21, so the only odd factors are 6n+1.\n        if ((n & 22L)\
    \ == 0L)\n            return true;\n        // All even numbers are of the form\
    \ 6n+23, so the only odd factors are 6n+3.\n        if ((n & 24L) == 0L)\n   \
    \         return true;\n        // All even numbers are of the form 6n+25, so\
    \ the only odd factors are 6n+5.\n        if ((n & 26L) == 0L)\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n\
    \    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9wfma49s.cs(71,29): error CS1525: Invalid expression term ''}''

    /tmp/tmp9wfma49s.cs(71,29): error CS1002: ; expected

    '
  timestamp: 1660015820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 4L) return false;\n        if (n % 4L ==\
    \ 0L) return n == 2L || n == 3L || n == 5L || n == 7L || n == 11L || n == 13L\
    \ || n == 17L || n == 19L || n == 21;\n        long sqrtn = Math.Sqrt(n); \n \
    \       long limit = 2L;\n        while (sqrtn >= limit) {\n            long next\
    \ = sqrtn + limit + 1L; \n            if (next % 4L != 0L && next % next%4L ==\
    \ 0L) return true;\n            limit = next - 1L;\n        }\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsdsvq15u.cs(27,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        BigInteger limit = (BigInteger)Math.Sqrt(n);\n  \
    \      BigInteger two = BigInteger.Two;\n        BigInteger three = BigInteger.Three;\n\
    \n        for (long i = two; i <= limit; i += two) {\n            if (n % i ==\
    \ 0)\n                return false;\n        }\n        if (n < three)\n     \
    \       return false;\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_x30etyh.cs(26,37): error CS0117: ''BigInteger'' does not contain a definition
    for ''Two''

    /tmp/tmp_x30etyh.cs(27,39): error CS0117: ''BigInteger'' does not contain a definition
    for ''Three''

    /tmp/tmp_x30etyh.cs(29,23): error CS0266: Cannot implicitly convert type ''System.Numerics.BigInteger''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp_x30etyh.cs(29,40): error CS0266: Cannot implicitly convert type ''System.Numerics.BigInteger''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        Debug.Assert(n >= 2L, \"n must be positive.\");\n\
    \        if (n < 2L)\n            return false;\n        if (n == 2L)\n      \
    \      return true;\n        if (n == 3L)\n            return true;\n        if\
    \ (n % 2 == 0)\n            return false;\n        int sqrtOfN = Math.Sqrt(n);\
    \ // a non-negative integer.\n        long m = 1L;\n        while (m <= sqrtOfN)\
    \ {\n            if (n % m == 0)\n                return false;\n            m\
    \ += 2L;\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnlv8uzy1.cs(34,23): error CS0266: Cannot implicitly convert type ''double''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n <= 1) return false;\n        if (n == 2) return\
    \ true;\n        if (n % 2 == 0) return false;\n        long max = (long)Math.Sqrt(n);\n\
    \        for (int i = 3; i <= max; i += 2) {\n            if (n % i == 0) return\
    \ false;\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 4) return false; // Only even numbers can\
    \ be primes\n        // Even numbers are always primes, except 2 and 3, and their\
    \ multiples.\n        if (n % 2 == 0) return n % 4 == 0;\n        if (n % 3 ==\
    \ 0) return n % 7 == 0;\n\n        BigInteger factor = new BigInteger(n);\n  \
    \      // We are looking for a composite that divides all our numbers\n      \
    \  // We can just use Newton's method here, but since we are only\n        //\
    \ looking for multiples of 4, 7, 10, 15, 20, 25, 30, 35, and 41,\n        // it\
    \ won't help much\n        double guess = 1;\n        while (guess < factor.Divide(BigInteger.ValueOf((long)n)))\
    \ guess++;\n        // We are using Sieve of Eratosthenes\n        for (int divisor\
    \ = 2; divisor <= guess; divisor++) {\n            BigInteger remainder = factor.Divide(divisor);\n\
    \            if (remainder == BigInteger.Zero) break;\n            BigInteger\
    \ smaller = remainder.Multiply(divisor);\n            if (smaller.CompareTo(BigInteger.ValueOf((long)n))\
    \ >= 0) continue;\n            // If we found one that divides n, then we found\
    \ a prime\n            return true;\n        }\n        // We didn't find any\
    \ prime that divides n\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1d_768fx.cs(36,49): error CS0117: ''BigInteger'' does not contain a definition
    for ''ValueOf''

    /tmp/tmp1d_768fx.cs(39,43): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''divisor'' of ''BigInteger.Divide(BigInteger,
    BigInteger)''

    /tmp/tmp1d_768fx.cs(41,44): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''right'' of ''BigInteger.Multiply(BigInteger,
    BigInteger)''

    /tmp/tmp1d_768fx.cs(42,46): error CS0117: ''BigInteger'' does not contain a definition
    for ''ValueOf''

    '
  timestamp: 1660015820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        long sqrtN = Math.Sqrt(n);\n        bool isPrime\
    \ = true;\n        for (int i = 2; i <= sqrtN; i++) {\n            if (n % i ==\
    \ 0) {\n                isPrime = false;\n                break;\n           \
    \ }\n        }\n        return isPrime;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppj5r_q7x.cs(25,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n <= 1) return false;\n        // If n is prime,\
    \ return false; otherwise, compute nCk\n        for (long k = 2; k < n; k++) {\n\
    \            if (n % k == 0) return false;\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        Debug.Assert(n >= 2);\n        int sqrt = Math.Sqrt(n);\n\
    \        long lastBit = n >> 31;\n        return (sqrt & 1) == 0L && lastBit ==\
    \ 1L;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgjc3my2o.cs(26,20): error CS0266: Cannot implicitly convert type ''double''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2)\n            return false;\n        else\
    \ if (n == 2)\n            return true;\n        else {\n            long m =\
    \ n - 1;\n            long q = 2;\n            bool r = false;\n            do\
    \ {\n                long d = (long) Math.Floor(Math.Sqrt(q));\n             \
    \   if (n % d == 0)\n                    r = true;\n                q <<= 1;\n\
    \            } while (r == false);\n            if (r == true)\n             \
    \   return false;\n            long a = (long) Math.Sqrt(n);\n            long\
    \ b = (long) Math.Sqrt(m + 1);\n            while (true) {\n                long\
    \ c = (long) Math.Floor(Math.Sqrt(a + b));\n                if (c < m)\n     \
    \               return true;\n                if (c > m)\n                   \
    \ return false;\n                a <<= 1;\n                b <<= 1;\n        \
    \    }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fb768af1e50d428e885f411e216e2901>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fb768af1e50d428e885f411e216e2901>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        long sqrtN = Math.Sqrt(n);\n        for (int i =\
    \ 2; i <= sqrtN; i++) {\n            if (n % i == 0)\n                return false;\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy1w4x4w5.cs(25,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2L) return false; // Must be at least 2.\n\
    \n        // Test for factors of 2 or 5.\n        if (n < 6L) {\n            //\
    \ If n < 5, then n is not prime.\n            return false;\n        } else if\
    \ (n % 6L != 0) return false;\n\n        // Test for factors of 2, 3, and 5.\n\
    \        long s = 2L;\n        for (long i = 3L; i <= Math.Floor(Math.Sqrt(n)\
    \ + 1L); i += 2L) {\n            if (n % i == 0) {\n                s = 2L;\n\
    \                break;\n            }\n        }\n        if (s == 2L) {\n  \
    \          if (n != 11L) return false; // n must be prime.\n        } else {\n\
    \            if (n != 13441L) return false; // n must be prime.\n        }\n\n\
    \        // Test for factors of 3 or 5.\n        s = 3L;\n        for (long i\
    \ = 5L; i <= Math.Floor(Math.Sqrt(n) + 1L); i += 2L) {\n            if (n % i\
    \ == 0) {\n                s = 3L;\n                break;\n            }\n  \
    \      }\n        if (s == 3L) {\n            if (n != 61L) return false; // n\
    \ must be prime.\n        } else {\n            if (n != 4L) return false; //\
    \ n must be prime.\n        }\n\n        // If we got here, then n is prime. Return\
    \ true.\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cba43ce3d7964c029876892a72c97cdd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cba43ce3d7964c029876892a72c97cdd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // Check for odd-length numbers.\n        if (n %\
    \ 2 == 0) {\n            return false; \n        }\n        // Trial division\
    \ will tell you whether n is prime by dividing\n        // by three and adding\
    \ five to any odd result.\n        long count = 1;\n        for (int i = 3; i\
    \ <= n / 2; i += 2) {\n            if (n % i == 0) {\n                return false;\n\
    \            }\n            count += i;\n        }\n        return true;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dd73ed28a7843c98a1cc016e21be653>:0 \n"
  stdout: ''
  timestamp: 1660015820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // Sieve of Eratosthenes.\n        // For numbers\
    \ <= 10, this approach is fine, for larger numbers,\n        // a better (but\
    \ slower) approach can be used.\n        bool flag = false;\n\n        for (int\
    \ i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                flag\
    \ = true;\n                break;\n            }\n        }\n        return flag;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2113491fc902416786d95dd959cc4bf8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2113491fc902416786d95dd959cc4bf8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n == 1L) {\n            return true;\n      \
    \  }\n        long limit = Math.Sqrt(n) + 2L;\n        for (long i = 2L; i <=\
    \ limit; i++) {\n            if (n % i == 0L) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmposeskaga.cs(28,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        long limit = (long)Math.Sqrt(n) + 1;\n        BigInteger\
    \ num = new BigInteger(n.ToString());\n        BigInteger den = new BigInteger(n.ToString()\
    \ + \"1\");\n        BigInteger limit2 = new BigInteger(limit.ToString());\n\n\
    \        // If n is prime then num and den are also prime. Hence the check for\n\
    \        // n == (num * den) == n will be skipped.\n        while (limit.ToString()\
    \ != (num.ToString() + den.ToString())) {\n            if (num.Multiply(den).ToString()\
    \ == num.ToString() + den.ToString()) {\n                return true;\n      \
    \      }\n            den = new BigInteger(n.ToString() + \"1\");\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe3o8jtqw.cs(26,41): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    /tmp/tmpe3o8jtqw.cs(27,41): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    /tmp/tmpe3o8jtqw.cs(28,44): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    /tmp/tmpe3o8jtqw.cs(33,21): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''right'' of ''BigInteger.Multiply(BigInteger,
    BigInteger)''

    /tmp/tmpe3o8jtqw.cs(36,34): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    '
  timestamp: 1660015820
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n == 1L) return true;\n        if (n % 2 == 0)\
    \ return false;\n        if (n % 3 == 0) return false;\n        long limit = (long.MaxValue\
    \ / n) * n;\n        for (int i = 5; i <= limit; i += 6) {\n            if (n\
    \ % i == 0) return false;\n        }\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n\
    \    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <336afc22f33344398688a2388304c018>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <336afc22f33344398688a2388304c018>:0 \n"
  stdout: None
  timestamp: 1660015826
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        long sqrtN = Math.Sqrt(n);\n        long x = 3;\n\
    \        while (x < (long) sqrtN) {\n            if (n % x == 0) return false;\n\
    \            x += 2;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n  \
    \  Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L)) ==\
    \ (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpexvcga1j.cs(25,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        var sqRoot = BigInteger.Sqrt(n);\n        return\
    \ sqRoot.IsDivisibleBy(2);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe28a115r.cs(25,33): error CS0117: ''BigInteger'' does not contain a definition
    for ''Sqrt''

    '
  timestamp: 1660015821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        long sqrtN = System.Math.Sqrt(n) + 1;\n        for\
    \ (long i = 2; i <= sqrtN; i++) {\n            if (n % i == 0) {\n           \
    \     return false;\n            }\n        }\n        return true;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) ==\
    \ (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkwdh1vg1.cs(25,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n <= 1)\n            return false;\n        if\
    \ (n % 2 == 0)\n            return false;\n        if (n <= 3)\n            return\
    \ true;\n        if (n % 3 == 0)\n            return false;\n        int num =\
    \ (int)Math.Sqrt(n);\n        for (int i = 5; i <= num; i += 6) {\n          \
    \  if (n % i == 0)\n                return false;\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ceaa19a5f814dc9875112f62c255e77>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ceaa19a5f814dc9875112f62c255e77>:0 \n"
  stdout: ''
  timestamp: 1660015821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2) return false;\n        if (n == 2) return\
    \ true;\n        if ((n % 2) == 0) return false;\n        for (int i = 3; i <=\
    \ Math.Floor(Math.Sqrt(n)); i += 2) {\n            if ((n % i) == 0) return false;\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2) {\n            return false;\n       \
    \ }\n\n        // Test for factors up to sqrt(n).\n        long sqrtN = (long)Math.Sqrt(n);\n\
    \n        // Test for factors up to sqrt(n).\n        bool factorOk = false;\n\
    \n        // Test from 2 to sqrt(n)\n        for (int i = 2; i <= sqrtN; i++)\
    \ {\n            if (n % i == 0) {\n                factorOk = false;\n      \
    \          break;\n            } else {\n                factorOk = true;\n  \
    \          }\n        }\n        return factorOk;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 4) return false; // (6L, 101L, 11L, 13441L,\
    \ 61L, 4L, 1L) \n        // 4 is composite\n        if (n % 2 == 0) return false;\n\
    \        // 2 is prime\n        if (n % 3 == 0) return false;\n        // 3 is\
    \ prime\n        long m = Math.Sqrt(n); // (13441L, 13441L)\n        long m2 =\
    \ m / 2L; // (13441L, 1L)\n        // m is odd\n        while (m % 2 == 1L) m\
    \ /= 2L;\n        // m is even\n        while (m % 2 == 0L) m /= 2L;\n       \
    \ // m is odd\n        while (m % 3 == 1L) m /= 3L;\n        // m is odd\n   \
    \     while (m % 3 == 0L) m /= 3L;\n        // m is odd\n        while (m % 5\
    \ == 1L) m /= 5L;\n        // m is odd\n        while (m % 5 == 0L) m /= 5L;\n\
    \        // m is odd\n        while (!IsPrime(m)) return false;\n        return\
    \ true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbjb9mmwq.cs(31,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2) return false;\n        if (n == 2) return\
    \ true;\n        if (n % 2 == 0) return false;\n\n        long d = (int)Math.Floor(Math.Sqrt(n));\n\
    \n        while (d % 2 == 0) {\n            d /= 2;\n        }\n\n        // If\
    \ n is odd, then odd composites are the only composites whose\n        // factor\
    \ is greater than one.\n        if (n % 2 == 1) return false;\n\n        // For\
    \ each factor of n except the smallest factor, \n        // test if n is composite\
    \ (that is if n is less than d)\n        // If n is composite (that is, if it\
    \ divides n evenly into d \n        // and greater than one), then it is not prime.\n\
    \        for (int i = 2; i < d; i++) {\n            if (n % i == 0) {\n      \
    \          return false;\n            }\n        }\n        return true;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e344b498b4844440bbc47a930d1da646>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e344b498b4844440bbc47a930d1da646>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // Ensure that n is a positive number.\n        if\
    \ (n < 0)\n            return false;\n\n        // If n is 1 or less, then it\
    \ is definitely prime.\n        if (n == 1)\n            return true;\n\n    \
    \    // If n is 2, then it is not prime because there is no non-trivial divisors.\n\
    \        if (n == 2)\n            return false;\n\n        // Check all possible\
    \ divisors up to the square root of n.\n        long sqrtn = Math.Sqrt(n);\n \
    \       for (long i = 3; i <= sqrtn; i += 2) {\n            if (n % i == 0)\n\
    \                return false;\n        }\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n\
    \    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqmuea8_o.cs(38,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // We only need to consider the first three multiples\
    \ up to the square root of n.\n        // For example, if the number is 15, then\
    \ we only need to consider multiples of 3.\n        // The first two multiples\
    \ are 2 and 3, which are easily identified.\n        if (n < 3L) throw new ArgumentException(\"\
    n must be positive.\");\n\n        // This variable will track the least common\
    \ multiple (LCM) of n and itself when we\n        // increment it.  If n was prime,\
    \ then LCM(n,n) = 1 (true), and we will not need to do\n        // anything else.\
    \  If n is not prime, then LCM(n,n) = 1 (true), and we will not need to do\n \
    \       // anything else.\n        long lcm = n;\n\n        // The while loop\
    \ will keep running while we find a multiple of n that divides evenly into\n \
    \       // the LCM.  If we found a multiple of n that divides evenly into LCM,\
    \ then we have done\n        // the prime test.\n        while (n > 1L) {\n  \
    \          if (n % lcm) == 0L) return false; // If we have found a multiple of\
    \ n that divides evenly into LCM,\n                                        //\
    \ then n is not prime.\n\n            // Otherwise, increment LCM by LCM until\
    \ we reach n.  Once we reach n, we know that n\n            // is not a prime\
    \ number.\n            lcm *= lcm;\n        }\n        return true;  // If we\
    \ reach here, n was a prime number.\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb5mhe8og.cs(40,26): error CS1525: Invalid expression term ''==''

    /tmp/tmpb5mhe8og.cs(40,31): error CS1002: ; expected

    /tmp/tmpb5mhe8og.cs(40,31): error CS1513: } expected

    '
  timestamp: 1660015820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n == 1)\n            return false;\n        //\
    \ If n is not a positive integer, return false.\n        if (n < 0)\n        \
    \    return false;\n        // If n is 1, then n is certainly not prime. Return\
    \ false.\n        if (n == 2)\n            return false;\n        // If n is a\
    \ power of two, then it is certainly not prime.\n        if ((n&(n-1)) == 0)\n\
    \            return false;\n        // If n is divisible by 2, then n is certainly\
    \ not prime.\n        if ((n % 2) == 0)\n            return false;\n        //\
    \ If n is divisible by 3, then n is certainly not prime.\n        if ((n % 3)\
    \ == 0)\n            return false;\n        // Otherwise, test if n is divisible\
    \ by every even number less than n.\n        // If so, it is definitely not prime.\n\
    \        for (int i = 3; i * i <= n; i += 2)\n            if (n % i == 0)\n  \
    \              return false;\n        // If we got this far, return true.\n  \
    \      return true;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L)) ==\
    \ (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2)\n            return false;\n\n       \
    \ long m = 2;\n        while (m < n) {\n            if (n % m == 0)\n        \
    \        return false;\n            m++;\n        }\n        return true;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        return IsPrime(Divide(n, 2));\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n\
    \    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq0sr8469.cs(25,24): error CS0103: The name ''Divide'' does not exist in
    the current context

    '
  timestamp: 1660015821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        bool result = true;\n        if (n < 2)\n       \
    \     return false;\n        if (n == 2)\n            return true;\n        if\
    \ (n % 2 == 0)\n            return false;\n        long r = n;\n        int k\
    \ = 3;\n        while (k <= r) {\n            r = r / 2;\n            if (n %\
    \ k == 0)\n                return false;\n            k = k + 2;\n        }\n\
    \        return true;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // The number must be odd -- no perfect powers\n\
    \        if (n < 2)\n            return false;\n        // Check to see if n is\
    \ divisible by any known primes\n        for (int p = 3; p < Math.Sqrt(n); p++)\n\
    \            if (n % p == 0)\n                return false;\n        // If n is\
    \ a perfect power, then n is prime\n        for (int p = 2; p <= Math.Sqrt(n);\
    \ p++)\n            if (n % p == 0)\n                return true;\n        //\
    \ If n is composite (that is, divisible only by 1 and itself),\n        // then\
    \ n has no prime factors\n        bool prime = true;\n        for (int i = 2;\
    \ i <= Math.Sqrt(n); i++) {\n            if (n % i == 0) {\n                prime\
    \ = false;\n                break;\n            }\n        }\n        return prime;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <327aa5e7d5274ffd9272e541b71c2cb2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <327aa5e7d5274ffd9272e541b71c2cb2>:0 \n"
  stdout: ''
  timestamp: 1660015821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        long sqrtN = long.Pow(Math.Sqrt(n), long.Log(n));\n\
    \        if (n <= 1) return false;\n        if (n == 2) return true;\n       \
    \ bool ret = true;\n        for (long i = 4; i <= sqrtN; i += 2) {\n         \
    \   if (n % i == 0) {\n                ret = false;\n                break;\n\
    \            }\n        }\n        return ret;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkm5dtnvs.cs(25,27): error CS0117: ''long'' does not contain a definition
    for ''Pow''

    /tmp/tmpkm5dtnvs.cs(25,50): error CS0117: ''long'' does not contain a definition
    for ''Log''

    '
  timestamp: 1660015821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n == 1) return false;\n        if (n <= 1) return\
    \ true;\n        long k = 3; \n        while (k <= n / 2) k *= 3;\n        return\
    \ n % k == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d2cead364b14307bef232955d7ec33b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d2cead364b14307bef232955d7ec33b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        double f = Double.Parse(n.ToString(\"n0\"));\n  \
    \      BigInteger b = new BigInteger(n);\n        BigInteger p = BigInteger.One;\n\
    \        if (BigInteger.One.Equals(f)) {\n            return true;\n        }\n\
    \        for (int i = 3; i <= Math.Floor(Math.Sqrt(f) + 1); i += 2) {\n      \
    \      if (b.Divide(i).Equals(BigInteger.Zero)) {\n                return false;\n\
    \            }\n            p = p.Multiply(BigInteger.ValueOf(i - 1).Add(f));\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp883j_neq.cs(32,19): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''divisor'' of ''BigInteger.Divide(BigInteger,
    BigInteger)''

    /tmp/tmp883j_neq.cs(35,39): error CS0117: ''BigInteger'' does not contain a definition
    for ''ValueOf''

    '
  timestamp: 1660015821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2) return false;\n        // Test for Primes\
    \ up to half the value of n.\n        for (int i = 2; i <= n / i; i++) if (n %\
    \ i == 0) return false;\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        bool answer = true;\n        int k = 0;\n       \
    \ int div = 1;\n        while (answer && (k < n)) {\n            if ((n % k) ==\
    \ 0) {\n                answer = false;\n            }\n            else {\n \
    \               k++;\n            }\n            div++;\n        }\n        return\
    \ answer;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.DivideByZeroException: Attempted to divide\
    \ by zero.\n  at Problem.IsPrime (System.Int64 n) [0x0000a] in <eb686642cdea4a9c920a14e24ff19bee>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <eb686642cdea4a9c920a14e24ff19bee>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.DivideByZeroException: Attempted\
    \ to divide by zero.\n  at Problem.IsPrime (System.Int64 n) [0x0000a] in <eb686642cdea4a9c920a14e24ff19bee>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <eb686642cdea4a9c920a14e24ff19bee>:0\
    \ \n"
  stdout: ''
  timestamp: 1660015821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        long d = 2;\n        while (d < Math.Sqrt(n)) {\n\
    \            if (n % d == 0)\n                return false;\n            d +=\
    \ d;\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4bc0929ae9134a7680937201afdfb301>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4bc0929ae9134a7680937201afdfb301>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015821
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2L) {\n            return false;\n      \
    \  }\n        // Sieve of Eratosthenes of 2 up to n\n        // http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n\
    \        long[] primes = new long[n + 1];\n        primes[0] = 1L;\n        //\
    \ Sieve of Eratosthenes using Sieve of Atkin method\n        for (long i = 1L;\
    \ i <= n; i++) {\n            bool isPrime = true;\n            for (long j =\
    \ 3L; j <= i; j += 2L) {\n                if (i % j == 0) {\n                \
    \    isPrime = false;\n                    break;\n                }\n       \
    \     }\n            if (isPrime) {\n                primes[i] = i;\n        \
    \    }\n        }\n        // Check all odd numbers (except 1) to see if they\
    \ are prime or not\n        for (long j = 2L; j < primes.Length; j += 2L) {\n\
    \            if (primes[j] == 0) {\n                return false;\n          \
    \  }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50bbb422b6f5459eadf0cd84bc6b6412>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50bbb422b6f5459eadf0cd84bc6b6412>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: None
  timestamp: 1660015826
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n == 1L) return false;\n        if (n == 2L)\
    \ return true;\n        if (n % 2 == 0) return false;\n        if (n % 3 == 0)\
    \ return false;\n        // Sieve of Erastothenes.\n        List<long> primes\
    \ = new List<long>();\n        for (long i = 5; i <= n / i; i += 6) {\n      \
    \      if (i % 2 == 0) continue;\n            primes.Add(i);\n            if (n\
    \ % i == 0) return false;\n        }\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n\
    \    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <22dbc40c131d4d32a840c3a85a3ade14>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <22dbc40c131d4d32a840c3a85a3ade14>:0 \n"
  stdout: ''
  timestamp: 1660015821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        bool result = true;\n        for (long i = 3; i <=\
    \ Math.Sqrt(n); i += 2) {\n            if (n % i == 0) {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <12bd7e8030e34ea6a0beefe5f0aa0e4b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <12bd7e8030e34ea6a0beefe5f0aa0e4b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2 || n % 2 == 0)\n            return false;\n\
    \        if (n % 3 == 0)\n            return false;\n\n        bool[] arr = new\
    \ bool[(int) Math.Sqrt(n) + 1];\n        // Test only the odd numbers\n      \
    \  long m = 2;\n        for (int i = 5; i <= Math.Sqrt(n); i += 2)\n         \
    \   for (int j = 1; j < i; j++)\n                if (n % i == 0)\n           \
    \         return false;\n\n        // Test only even numbers, starting at 3\n\
    \        for (long i = 4; i <= Math.Sqrt(n); i += 2)\n            if (n % i ==\
    \ 0)\n                for (int j = 1; j < i; j++)\n                    if (n %\
    \ i == 0)\n                        return false;\n        \n        for (int i\
    \ = 3; i <= Math.Sqrt(n); i += 2)\n            if (n % i == 0) {\n           \
    \     if (arr[i] == true)\n                    return true;\n                arr[i]\
    \ = true;\n            }\n\n        for (int i = 3; i <= Math.Sqrt(n); i += 2)\n\
    \            if (n % i == 0) {\n                arr[i] = false;\n            \
    \    break;\n            }\n\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n  \
    \  Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L)) ==\
    \ (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0f2e8c1ff43d45eb971dd86f94fa6594>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0f2e8c1ff43d45eb971dd86f94fa6594>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015822
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // Use a sieve and a prime test\n        if (n <=\
    \ 1)\n            return false;\n        long max = (long)Math.Sqrt(n) - 1;\n\
    \        bool isPrime = true;\n        bool isPrimeFound = false;\n        int[]\
    \ primes = new int[max + 1];\n        for (int i = 2; i <= max; i++) {\n     \
    \       if (!isPrimeFound) {\n                primes[i] = (i <= max) ? 1 : 0;\n\
    \            }\n            isPrimeFound = false;\n            for (int j = 0;\
    \ j < primes.Length; j++) {\n                if (primes[j] == 0) {\n         \
    \           if (i % i == 0) {\n                        isPrimeFound = true;\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        if (n < max) {\n            if (primes[n] ==\
    \ 1) {\n                isPrime = false;\n            }\n        }\n        return\
    \ isPrime;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d92d21b26e8441dababea4069760f6cb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d92d21b26e8441dababea4069760f6cb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015822
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // Degenerate cases\n        if (n < 2) return false;\n\
    \        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n\n \
    \       // Test first few odd numbers\n        long first = n - 3;\n        if\
    \ (first % 2 == 1) first += 1;\n        long limit = first * first;\n        while\
    \ (limit < n) {\n            limit *= first;\n            limit += 2;\n      \
    \  }\n        long limit = n * n;\n        // Prime test\n        for (int i =\
    \ first + 2; i < limit; i += 2) {\n            if (n % i == 0) {\n           \
    \     return false;\n            }\n        }\n        return true;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) ==\
    \ (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp48waiwlr.cs(38,14): error CS0128: A local variable or function named ''limit''
    is already defined in this scope

    /tmp/tmp48waiwlr.cs(40,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // This algorithm is from Wikipedia, and should be\
    \ reasonably fast since it's only \n        // testing powers of 2. As an added\
    \ benefit, it only tests odd numbers.\n        var i = 3;\n        while (i <=\
    \ Math.Sqrt(n)) {\n            if (n % i == 0)\n                return false;\n\
    \            i += 2;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n  \
    \  Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L)) ==\
    \ (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d87e0a1517a84d3c9868ea5f198bb848>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d87e0a1517a84d3c9868ea5f198bb848>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015822
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // We need only test divisors up to sqrt(n).\n  \
    \      if (n <= 1L)\n            return (true);\n        else if (n % 2L == 1L)\n\
    \            return (false);\n        else if (n % 3L == 2L)\n            return\
    \ (false);\n        // Check all the odd divisors up to sqrt(n).\n        // The\
    \ first check ensures that the divisor is odd.\n        long max = (long)Math.Sqrt(n);\n\
    \        for (int i = 3L; !(max % i); i += 2L)\n            if ((n % (i + 1L)\
    \ == 0L))\n                return (false);\n        // Check all the even divisors\
    \ up to sqrt(n).\n        for (int i = 3L; !(max % i); i += 2L)\n            if\
    \ ((n % (i + 1L) == 0L))\n                return (false);\n        // If no odd\
    \ or even divisors are found, n has no divisors.\n        return (true);\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdfz35b4w.cs(35,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpdfz35b4w.cs(35,26): error CS0023: Operator ''!'' cannot be applied to
    operand of type ''long''

    /tmp/tmpdfz35b4w.cs(35,38): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpdfz35b4w.cs(39,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpdfz35b4w.cs(39,26): error CS0023: Operator ''!'' cannot be applied to
    operand of type ''long''

    /tmp/tmpdfz35b4w.cs(39,38): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        long sqrtn = Math.Sqrt(n);\n        long limit =\
    \ n >> 1;\n        while (sqrtn <= limit) {\n            if (n % sqrtn == 0)\n\
    \                return false;\n            sqrtn += sqrtn;\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vkw9zhm.cs(25,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        long squareRoot = (long)Math.Sqrt(n);\n        bool\
    \ isPrime = true;\n        for (long i = 2; i <= squareRoot; i++) {\n        \
    \    if (n % i == 0) {\n                isPrime = false;\n                break;\n\
    \            }\n        }\n        return isPrime;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <80d0647fa9c7441fa0a864ccf35d0ff1>:0 \n"
  stdout: ''
  timestamp: 1660015822
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // All even numbers except 2 are prime.\n       \
    \ if (n % 2 == 0)\n            return false;\n\n        // 3 is a prime number.\n\
    \        if (n == 3)\n            return true;\n\n        // The only even number\
    \ that is evenly divisible by any prime\n        // is 2. So, if n can be evenly\
    \ divided by 2 or 3, then n is prime.\n        for (int i = 3; i <= Math.Sqrt(n);\
    \ i += 2)\n            if (n % i == 0)\n                return false;\n\n    \
    \    return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <85b5081f4e9742c1bf22323c9a12d6b3>:0 \n"
  stdout: ''
  timestamp: 1660015822
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // Deal with the case where n is 0 or 1.\n      \
    \  if (n == 0)\n            return true;\n        if (n == 1)\n            return\
    \ false;\n\n        // Deal with the case where n is a power of two.\n       \
    \ if (n & 1 == 1)\n            return IsPrime((n >> 1));\n\n        // Deal with\
    \ the case where n is exactly divisible by 2\n        if (n % 2 == 0)\n      \
    \      return IsPrime(n >> 1);\n\n        // Deal with the case where n is exactly\
    \ divisible by 3.\n        if (n % 3 == 0)\n            return IsPrime(n >> 2);\n\
    \n        // Now find the factors.\n        // n = 3^k (3^(k-1)) + 3^k (3^(k-1))\n\
    \        // n = 3^(k-1) + 3^(k-1) + 3^k (3^(k-1))\n        // n = 3^(k-1) + 3^(k-1)\
    \ + 3^(k-1) + 3^k (3^(k-1))\n        // n = 3^(k-1) + 3^(k-1) + 3^(k-1) + 3^k\
    \ + 3^k + 3^k\n        // (3^(k-1))^3 + 3^(k-1)^3 + 3^k^3 + 3^k\n        long\
    \ a = 3L;\n        long b = 7L;\n        long c = 11L;\n        long d = 13L;\n\
    \        long e = 1L;\n        while (true) {\n            long mid = a + ((long)(b\
    \ - a) / 2);\n            if (mid < 2L || mid > long)int.MaxValue)\n         \
    \       break;\n            if (IsPrime(mid))\n                return true;\n\
    \            if (IsPrime(mid + c))\n                return true;\n           \
    \ if (IsPrime(mid + d)) {\n                // The prime is factorized into two\
    \ parts, so keep looking for\n                // one and half of the other.\n\
    \                b = mid;\n                continue;\n            }\n        \
    \    if (IsPrime(mid))\n                return true;\n            if (IsPrime(mid\
    \ + e)) {\n                // The prime is factorized into three parts, so keep\
    \ looking\n                // for two and half.\n                a = mid;\n  \
    \              continue;\n            }\n            if (IsPrime(mid + a)) {\n\
    \                // The prime is factorized into three parts, so keep looking\n\
    \                // for two and half.\n                c = mid;\n            \
    \    continue;\n            }\n            // No prime found so either n is composite\
    \ or the loop was\n            // broken and the number is not prime.\n      \
    \      return false;\n        }\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptndipunu.cs(56,35): error CS1525: Invalid expression term ''long''

    /tmp/tmptndipunu.cs(56,52): error CS1002: ; expected

    /tmp/tmptndipunu.cs(56,52): error CS1513: } expected

    '
  timestamp: 1660015821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // Assume that the number is prime.  If the number\
    \ is even then\n        // it isn't prime because no even prime number will have\n\
    \        // exactly an integer square root as its square root.\n        long squareRoot\
    \ = n;\n        while (squareRoot % 2 == 0) {\n            squareRoot = squareRoot\
    \ / 2;\n        }\n\n        // If we have an even integer that is a square root\
    \ of the number,\n        // then it's not prime.\n        if (squareRoot == 0\
    \ || n == 1)\n            return false;\n\n        // Now we know that the number\
    \ is odd, and that the square\n        // root is an integer. So we can start\
    \ checking primes until\n        // we find one that isn't divisable.\n      \
    \  long x = 2;\n        while (x < (long) Math.Sqrt(n) + 1) {\n            if\
    \ (n % x == 0)\n                return false;\n\n            x++;\n        }\n\
    \n        // If we get this far, then n is a prime number.\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015822
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n == 1L) {\n            return true;\n      \
    \  }\n        if (n % 2 == 0) {\n            if (n % 3 == 0) {\n             \
    \   return false;\n            }\n            long m = (long) Math.Sqrt(n) + 2;\n\
    \            while (m < n) {\n                if (n % m == 0) {\n            \
    \        return false;\n                }\n                m++;\n            }\n\
    \            return true;\n        }\n        if (n % 3 == 0) {\n            return\
    \ false;\n        }\n        if (n % 5 == 0) {\n            return false;\n  \
    \      }\n        long m = (long) Math.Sqrt(n) + 2;\n        while (m < n) {\n\
    \            if (n % m == 0) {\n                return false;\n            }\n\
    \            m++;\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppnvd_pqu.cs(32,18): error CS0136: A local or parameter named ''m'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1660015822
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2)\n            return false;\n\n       \
    \ var primes = new List<long>();\n        primes.Add(2);\n\n        // Use Sieve\
    \ of Atkin\n        for (int i = 3; i <= Math.Sqrt(n); i += 2)\n            primes.Add(i);\n\
    \n        for (int i = primes.Count - 1; i >= 2; i--)\n        {\n           \
    \ if (n % primes[i] == 0)\n            {\n                primes.RemoveAt(i);\n\
    \                break;\n            }\n        }\n\n        if (primes.Count\
    \ == 0)\n            return false;\n\n        return primes.Contains(n);\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <455bc534b66342afa98fa0579ab81965>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <455bc534b66342afa98fa0579ab81965>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015822
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        int limit = (int)Math.Floor(Math.Sqrt(n));\n    \
    \    for (int i = 2; i <= limit; i++) {\n            if (n % i == 0) {\n     \
    \           return false;\n            }\n        }\n        return true;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3d6182ec58be43bf8d5abb00379c5f40>:0 \n"
  stdout: ''
  timestamp: 1660015822
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n <= 1)\n            return false;\n        if\
    \ (n == 2 || n == 3) {\n            return true;\n        }\n        if (n % 2\
    \ == 0) {\n            return false;\n        }\n        for (int i = 3; i <=\
    \ Math.Sqrt(n); i += 2) {\n            if (n % i == 0)\n                return\
    \ false;\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015822
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        long limit = long.MaxValue / 2;\n        while (limit\
    \ < n) {\n            limit *= 2;\n        }\n        long root = long.Divide(limit,\
    \ n);\n        for (int i = 0; i <= limit; ++i) {\n            if (n % i == 0)\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc6i5l01e.cs(29,26): error CS0117: ''long'' does not contain a definition
    for ''Divide''

    '
  timestamp: 1660015822
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // Ensure n is odd.\n        if ((n % 2) == 1)\n\
    \            return false;\n        // Scan from 3 to n/2 looking for factors\
    \ less than n.\n        for (int i = 3; i <= n / 2; i++)\n            if (n %\
    \ i == 0)\n                return false;\n        // If no factors were found,\
    \ return true.\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b36817706274534b1aebaab7b3b47af>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b36817706274534b1aebaab7b3b47af>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015822
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        return n % 2 == 0 && (n != 1 || n == 1L);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ced0babf908a403d9885844425e078df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ced0babf908a403d9885844425e078df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015822
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        long factor = 2;\n        for (long i = 3; i * factor\
    \ <= n; i += factor) {\n            if (n % i == 0) {\n                return\
    \ false;\n            }\n            factor++;\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e9c23017a20e478f9fc3eed04bfcd3a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e9c23017a20e478f9fc3eed04bfcd3a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015822
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2) {\n            return false;\n       \
    \ }\n        if (n == 2) {\n            return true;\n        }\n        bool\
    \ result = true;\n        long[] primes = GetPrimes(n);\n        if (primes.Count()\
    \ == 1) {\n            result = primes.Contains(n);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb_87ek98.cs(32,25): error CS0103: The name ''GetPrimes'' does not exist
    in the current context

    '
  timestamp: 1660015822
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        long a = 2;\n        long b = 2;\n        bool isPrime\
    \ = true;\n        long sqrtn = Math.Sqrt(n);\n        \n        // If the number\
    \ is 1 or less, it's prime (since 1 is not\n        // prime)\n        if (n <=\
    \ 1)\n            return true;\n        \n        // Otherwise, loop until we\
    \ find a factor larger than the number\n        // we're testing\n        for\
    \ (; a <= sqrtn; a++, b++) {\n            // If we've found a factor, is it prime?\n\
    \            if (n % a == 0) {\n                isPrime = false;\n           \
    \     break;\n            }\n        }\n        return isPrime;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n\
    \    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7zhz3qnk.cs(28,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015822
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n % 2 == 0) {\n            return (n == 2);\n\
    \        }\n\n        if ((n % 3) == 0) {\n            return ((n % 2) == 0);\n\
    \        }\n\n        bool result = false;\n        long maxDivisor;\n       \
    \ for (maxDivisor = 3; maxDivisor < Math.Sqrt(n); maxDivisor++) {\n          \
    \  if (n % maxDivisor == 0) {\n                return false;\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aa700ed7b6aa4129b69107d77b2831f0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aa700ed7b6aa4129b69107d77b2831f0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015822
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2) return false;\n        long limit = (long)Math.Sqrt(n)\
    \ + 1;\n        // Do primes up to n.\n        long x = 2;\n        while (x <\
    \ limit) {\n            if (n % x == 0) return false;\n            x += 1;\n \
    \       }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015822
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        bool bIsPrime = true;\n        if ((n <= 1) || (n\
    \ == 2)) return true;\n        if ((n & 1) == 0) return false;\n        for (long\
    \ n = 2; n <= Math.Sqrt(n); n++) {\n            if ((n % 2) == 0) return false;\n\
    \            if ((n % n) == 0) bIsPrime = false;\n        }\n        return bIsPrime;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmgunnq29.cs(28,19): error CS0136: A local or parameter named ''n'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1660015822
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        BigInteger n2 = new BigInteger(n.ToString());\n \
    \       BigInteger one = new BigInteger(\"1\");\n        BigInteger two = new\
    \ BigInteger(\"2\");\n        if (n2.ToString() == \"1\") {\n            return\
    \ true;\n        }\n        for (int i = 2; i <= Math.Sqrt(n2); i++) {\n     \
    \       if (n2.ToString().Contains(i.ToString())) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcdx0_0o8.cs(25,40): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    /tmp/tmpcdx0_0o8.cs(26,41): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    /tmp/tmpcdx0_0o8.cs(27,41): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    /tmp/tmpcdx0_0o8.cs(31,40): error CS1503: Argument 1: cannot convert from ''System.Numerics.BigInteger''
    to ''double''

    '
  timestamp: 1660015822
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        bool isPrime = true;\n        long max = (long)Math.Sqrt(n)\
    \ + 1;\n        for (int i = 2; i <= max; i++) {\n            if (n % i == 0)\
    \ {\n                isPrime = false;\n                break;\n            }\n\
    \        }\n        return isPrime;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc50b8d7519d44908f15f93c7ab5cf58>:0 \n"
  stdout: ''
  timestamp: 1660015822
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        Debug.Assert(n >= 2);\n        long factors[] = new\
    \ long[] { 2, 3 };\n        while (factors.Length <= n) {\n            long p\
    \ = 2;\n            while (p < factors.Length) {\n                if (n % p ==\
    \ 0) return false;\n                p++;\n            }\n            factors[--factors.Length]\
    \ = p;\n        }\n        for (int i = factors.Length; i > 1; i--) {\n      \
    \      while (n % factors[i] == 0) n = (n / factors[i]) - 1;\n        }\n    \
    \    return n == 1;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L)) ==\
    \ (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp377quk_j.cs(26,21): error CS0650: Bad array declarator: To declare a managed
    array the rank specifier precedes the variable''s identifier. To declare a fixed
    size buffer field, use the fixed keyword before the field type.

    '
  timestamp: 1660015822
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // If n is even, then it's not prime.\n        if\
    \ (n & 1 == 0) {\n            return false;\n        }\n        // If n is odd,\
    \ then it must be odd for primeness to be tested.\n        if (n & 1 == 1) {\n\
    \            n >>= 1;\n        }\n        // 2 is prime.\n        if (n == 2)\
    \ {\n            return true;\n        }\n        // If n is odd, then it must\
    \ be odd for primeness to be tested.\n        if (n % 2 == 0) {\n            return\
    \ false;\n        }\n        // If n is divisible by 3 then it is prime.\n   \
    \     if (n % 3 == 0) {\n            return true;\n        }\n        // If n\
    \ is divisible by 5, then it is prime.\n        if (n % 5 == 0) {\n          \
    \  return true;\n        }\n        // If n is divisible by both 3 and 5 then\
    \ it is prime.\n        if (n % 3 == 0 && n % 5 == 0) {\n            return true;\n\
    \        }\n\n        // 3 is prime, but only if it isn't divisible by 3.\n  \
    \      if (n % 3 == 0) {\n            return false;\n        }\n        // 5 is\
    \ prime, but only if it isn't divisible by 5.\n        if (n % 5 == 0) {\n   \
    \         return false;\n        }\n        // n is prime - now test if it is\
    \ a prime.\n        return TestPrimes(n);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb7_amdoh.cs(26,13): error CS0019: Operator ''&'' cannot be applied to
    operands of type ''long'' and ''bool''

    /tmp/tmpb7_amdoh.cs(30,13): error CS0019: Operator ''&'' cannot be applied to
    operands of type ''long'' and ''bool''

    /tmp/tmpb7_amdoh.cs(63,16): error CS0103: The name ''TestPrimes'' does not exist
    in the current context

    '
  timestamp: 1660015822
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        long prime = n - 1;\n        while (prime > 1) {\n\
    \            prime /= 2;\n            if (n % prime == 0)\n                return\
    \ false;\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e468c9f83f484202b55b5c14b8816212>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e468c9f83f484202b55b5c14b8816212>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015822
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // Write your code here.\n        if (n < 2L)\n \
    \           return false;\n        else if (n == 1L)\n            return true;\n\
    \        else if (n % 2L == 0L)\n            return false;\n        else\n   \
    \     {\n            long n1 = n - 1L;\n            long sqr = n1 * n1;\n    \
    \        while (sqr > 1L)\n            {\n                sqr = sqr - 2L;\n  \
    \              if (sqr == 2L)\n                    return true;\n            \
    \    else if (sqr % 2L == 0L)\n                    return false;\n           \
    \ }\n            return false;\n        }\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1a35c1de565240dd85767c1c43aed8d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1a35c1de565240dd85767c1c43aed8d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015823
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2)\n            return false;\n        if\
    \ (n == 2)\n            return true;\n        int count = 0;\n        long d =\
    \ 2;\n        while (d < n) {\n            if (n % d == 0)\n                return\
    \ false;\n            count++;\n            d += d;\n        }\n        return\
    \ count == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6cc6cec71a244be99ed3e0794e750bed>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6cc6cec71a244be99ed3e0794e750bed>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015822
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        var q = (int) Math.Sqrt(n);\n        for (int i =\
    \ 3; i <= q; i += 2) {\n            if (n % i == 0) return false;\n        }\n\
    \        return true;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e13e7dcf5e304b0b8eaa99cfec5ac6d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e13e7dcf5e304b0b8eaa99cfec5ac6d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015823
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        long n = n % 3L;\n        if (n == 1L) {\n      \
    \      return false;\n        }\n        List<long> primes = new List<long>();\n\
    \        for (int i = 2L; i <= (long)Math.Sqrt(n); i++) {\n            if (n %\
    \ i == 0L) {\n                primes.Add(i);\n            }\n        }\n     \
    \   foreach (long p in primes) {\n            if (p != n\n            && (n%p\
    \ == 0L)) {\n                return false;\n            }\n        }\n       \
    \ return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp27mpkurt.cs(25,14): error CS0136: A local or parameter named ''n'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp27mpkurt.cs(30,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp27mpkurt.cs(25,18): error CS0165: Use of unassigned local variable ''n''

    '
  timestamp: 1660015822
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        return ((long)Math.Sqrt((long)n)) >= n / 2;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e7812912edd4aa4923a8005c34472e4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e7812912edd4aa4923a8005c34472e4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015823
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        return (n == 1) ? false : ((n >= 2) && ((n % 2) ==\
    \ 0));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <722f3d013b1646cfb104ecb1a394fcc0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <722f3d013b1646cfb104ecb1a394fcc0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015823
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if ((n & 1) == 0) return false;\n        for (int\
    \ i = 3; i <= Math.Sqrt(n); i += 2)\n            if ((n % i) == 0) return false;\n\
    \        return true;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd4f5da982cb47b6af7dfa615aa5c66f>:0 \n"
  stdout: ''
  timestamp: 1660015823
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // Initialize prime to true.\n        bool prime\
    \ = true;\n        \n        // Use a special form of sieve that only increments\
    \ odd numbers.\n        if (n <= 3) {\n            if (n == 1) { return true;\
    \ }\n            else { return false; }\n        }\n        \n        // If n\
    \ is odd then n must be even.\n        if (n % 2 == 0) { return false; }\n   \
    \     \n        // If n is odd and greater than 3, then n must be either 1 or\
    \ 3.\n        if (n > 3) { return false; }\n        \n        // Initialize multiples\
    \ of 3 to their first even value.\n        int three = 3;\n        while (three\
    \ < n) {\n            // Check if n is divisible by three.\n            if (n\
    \ % (three + 2) == 0) { return false; }\n            \n            // Add 3 to\
    \ multiples.\n            three += 3;\n        }\n        \n        // Loop through\
    \ the multiples of 3 and increment by 2 until\n        // n is divisible by three.\n\
    \        while (n-- != 0) {\n            // Check if n is divisible by three.\n\
    \            if (n % (three + 2) == 0) { return false; }\n            \n     \
    \       // Add 3 to multiples.\n            three += 3;\n        }\n        \n\
    \        // At this point n is prime if n is not divisible by four.\n        while\
    \ (n % 4 != 0) { prime &= false; n /= 4; }\n        \n        // At this point\
    \ n is prime if n is not divisible by three.\n        while (n % 3 != 0) { prime\
    \ &= false; n /= 3; }\n        \n        // At this point n is prime if n is not\
    \ divisible by one.\n        prime &= n % 1 == 0;\n        \n        return prime;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c06f0e0e469244809b45e0c09b13360d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c06f0e0e469244809b45e0c09b13360d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015823
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n == 1) return false;\n        if (n == 2) return\
    \ true;\n        if (n % 2 == 0) return false;\n        BigInteger m = BigInteger.Sqrt(n);\n\
    \        while (m % 2 == 0) {\n            m = m.NextEven();\n        }\n    \
    \    if (m.ToString().Length > 5) return false; // If m is too big, no prime number\
    \ exists\n        BigInteger c = BigInteger.DivRem(m, BigInteger.FromString(\"\
    1\"), BigInteger.One);\n        for (int i = 0; i < c.ToString().Length; i++)\
    \ {\n            if (c.ToString()[i] == '1') return false;\n        }\n      \
    \  return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmo1heeue.cs(28,35): error CS0117: ''BigInteger'' does not contain a definition
    for ''Sqrt''

    /tmp/tmpmo1heeue.cs(30,19): error CS1061: ''BigInteger'' does not contain a definition
    for ''NextEven'' and no accessible extension method ''NextEven'' accepting a first
    argument of type ''BigInteger'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpmo1heeue.cs(33,56): error CS0117: ''BigInteger'' does not contain a definition
    for ''FromString''

    '
  timestamp: 1660015823
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        long d = n;\n        while (d % 2 == 0) {\n     \
    \       d = d / 2;\n        }\n        for (int i = 3; i <= (int)Math.Floor(Math.Sqrt(d));\
    \ i += 2) {\n            if (n % i == 0) {\n                return false;\n  \
    \          }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <38259205738943fca846ed32be262ca0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <38259205738943fca846ed32be262ca0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015823
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2)\n            return false;\n\n       \
    \ if (n == 1)\n            return true;\n\n        if (n % 2 == 0)\n         \
    \   return false;\n\n        var root3 = (int)Math.Floor(Math.Sqrt(n));\n    \
    \    for (int i = 3; i <= root3; i++) {\n            if (n % i == 0)\n       \
    \         return false;\n        }\n\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n\
    \    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015823
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // Prime numbers are odd and strictly greater than\
    \ 2.\n        if (n == 0 || n == 1 || n == 2L) return true;\n        long limit\
    \ = n - 2;\n        if (limit % 2 == 0) return false;\n        for (int i = 3;\
    \ i <= limit / 2; i += 2)\n            if (n % i == 0) return false;\n       \
    \ return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <094d2bac8c5a477a8d0f6d7e8e9f2fad>:0 \n"
  stdout: ''
  timestamp: 1660015823
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2L) return false; // n = 0 is NOT prime.\n\
    \        if (n < 3L) return true;\n        if (n % 2L == 1L) return false; //\
    \ Evens are not prime.\n        if (n % 3L == 2L) return true;\n        long[]\
    \ a = new long[] { 2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L,\
    \ 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L, 103L, 107L,\
    \ 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L, 157L, 163L, 167L, 173L, 179L,\
    \ 181L, 191L, 197L, 199L, 211L, 223L, 227L, 229L, 233L, 239L, 241L, 251L, 257L,\
    \ 263L, 269L, 271L, 277L, 281L, 283L, 293L, 307L, 311L, 313L, 317L, 331L, 337L,\
    \ 347L, 349L, 353L, 359L, 367L, 373L, 379L, 383L, 389L, 397L, 401L, 409L, 419L,\
    \ 421L, 431L, 433L, 439L, 443L, 449L, 457L, 461L, 463L, 467L, 479L, 487L, 491L,\
    \ 499L, 503L, 509L, 521L, 523L, 541L, 547L, 557L, 563L, 569L, 571L, 577L, 587L,\
    \ 593L, 599L, 601L, 607L, 613L, 617L, 619L, 631L, 641L, 643L, 647L, 653L, 659L,\
    \ 661L, 673L, 677L, 683L, 691L, 701L, 709L, 719L, 727L, 733L, 739L, 743L, 751L,\
    \ 757L, 761L, 769L, 773L, 787L, 797L, 809L, 811L, 821L, 823L, 827L, 829L, 839L,\
    \ 853L, 857L, 859L, 863L, 877L, 881L, 883L, 887L, 907L, 911L, 919L, 929L, 937L,\
    \ 941L, 947L, 953L, 967L, 971L, 977L, 983L, 991L, 997L };\n        long[] d =\
    \ new long[] { 0L, 1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 20L, 22L, 24L, 26\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppvkd0nrd.cs(31,6): error CS1002: ; expected

    /tmp/tmppvkd0nrd.cs(32,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmppvkd0nrd.cs(48,2): error CS1513: } expected

    '
  timestamp: 1660015822
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        long limit = (long) Math.Sqrt(n);\n        if (limit\
    \ < 2L) {\n            return false;\n        }\n\n        long limitTwo = 2 *\
    \ limit;\n        for (long i = 2; i < limitTwo; i++) {\n            if (n % i\
    \ == 0) {\n                return false;\n            }\n        }\n\n       \
    \ return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015823
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2) {\n            return false;\n       \
    \ }\n        if (n == 2) {\n            return true;\n        }\n        if (n\
    \ % 2 == 0) {\n            return false;\n        }\n        long m = Math.Sqrt(n);\n\
    \        for (long i = 3; i * i <= m; i += 2) {\n            if (n % i == 0) {\n\
    \                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsrj83jh1.cs(34,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015823
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        long limit = n - (long)Math.Floor(n/2);\n       \
    \ for (long i = 2; i <= limit; i++) {\n            if (n % i == 0) {\n       \
    \         return false;\n            }\n        }\n        return true;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplrn1idyd.cs(25,37): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Floor(decimal)'' and ''Math.Floor(double)''

    '
  timestamp: 1660015823
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        long m = n / 2;\n        if (m == 1 || n == 2) return\
    \ true;\n        if (m == 0 || n % 2 == 0) return false;\n        while (m % 2\
    \ == 0) {\n            if (n % (m + 1) == 0) return false;\n            m += 2;\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9967fe5aa45b47b19e7e27400515582d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9967fe5aa45b47b19e7e27400515582d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015823
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2) return false;\n        if (n < 4) return\
    \ true;\n        if (n % 2 == 0) return false;\n        if (n % 3 == 0) return\
    \ false;\n        long m = n;\n        long squareRoot = Convert.ToInt64(Math.Sqrt(n));\n\
    \        for (long i = 6; i <= squareRoot; i += 6) {\n            if (n % i ==\
    \ 0) {\n                m = m / i;\n                if (m == 0) {\n          \
    \          return false;\n                }\n            }\n        }\n      \
    \  return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4c2fb6e278b341d89000b168d52476b1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4c2fb6e278b341d89000b168d52476b1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015823
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // Check that the given number is prime, and false\
    \ if it is not.\n        if (n < 2) {\n            return false;\n        }\n\n\
    \        // Test the given number for primeness using the Miller-Rabin primality\
    \ test\n        // (http://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test)\n\
    \        // (http://www.eecs.harvard.edu/~tom/MT/eecs/PPS/Int/prims.html )\n \
    \       bool flag = true;\n        long sqr = n * n;\n        int count = 1;\n\
    \        for (int i = 3; i <= sqr; i += 2) {\n            if (n % i == 0) {\n\
    \                flag = false;\n                break;\n            }\n      \
    \      if (flag) {\n                count++;\n            }\n        }\n     \
    \   if (count == 0 || count > 2) {\n            return false;\n        }\n   \
    \     return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <45865350ffcf432daa65637c67be9b6c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <45865350ffcf432daa65637c67be9b6c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015823
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n == 1L) return true;\n        if (n < 2L) return\
    \ false; // All numbers are composite\n        if (n % 2L == 0L) return false;\
    \ // 1 is special\n        if (n % 3L == 0L) return true; // All odd numbers are\
    \ composite\n        long m = Math.Floor((long) Math.Sqrt(n));\n        for (int\
    \ i = 2L; i <= m; i += 2L) {\n            if (n % i == 0L) return false; // n\
    \ is not prime\n            if (n % (i + 1L) == 0L) return true; // i+1 is a prime\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpllbxcv_b.cs(29,23): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Floor(decimal)'' and ''Math.Floor(double)''

    /tmp/tmpllbxcv_b.cs(30,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpllbxcv_b.cs(30,34): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015823
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n == 1)\n            return false;\n        if\
    \ (n == 2)\n            return true;\n        if (n % 2 == 0 || n <= 1)\n    \
    \        return false;\n\n        long[] factors = new long[] { 2, 3 };\n\n  \
    \      if (n > 2)\n            while (n % factors.Length != 0)\n             \
    \   ++factors[n % factors.Length];\n        else\n            return true;\n\n\
    \        long limit = Math.Sqrt(n) + 1;\n        for (int i = 3; i <= limit; ++i)\n\
    \            if (n % i == 0)\n                return false;\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcr8k49n2.cs(40,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015823
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n <= 1) return false;\n        if (n == 2) return\
    \ true;\n        long m = n / 2;\n        for (int i = 3; i * i <= m; i = i +\
    \ 2) {\n            if (n % i == 0) return false;\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a28ea32a540f40bd8d5e3f1eb0de591d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a28ea32a540f40bd8d5e3f1eb0de591d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015823
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // Check that the number is prime.\n        if (n\
    \ < 2)\n            return false;\n        long i = 2;\n        while (i < n /\
    \ i) {\n            if (n % i == 0)\n                return false;\n         \
    \   i += i;\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c34c84aae244578be1ec49248d58827>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c34c84aae244578be1ec49248d58827>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015823
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2)\n            return false;\n        if\
    \ (n == 2)\n            return true;\n        if (n % 2 == 0)\n            return\
    \ false;\n\n        // We know n is odd; let's check all the even numbers.\n \
    \       var result = true;\n        for (var i = 3; i <= Math.Floor(Math.Sqrt(n)\
    \ + 1) / 2; i += 2) {\n            if (n % i == 0) {\n                result =\
    \ false;\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <12c9b5a1e7d54edf945367547cb8e3ea>:0 \n"
  stdout: ''
  timestamp: 1660015823
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n == 2)\n            return true;\n        if\
    \ (n % 2 == 0)\n            return false;\n        for (int i = 3; i <= Math.Floor(Math.Sqrt(n));\
    \ i += 2)\n            if (n % i == 0)\n                return false;\n      \
    \  return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7d3e338d7dfd461d858c3bbd83b394ee>:0 \n"
  stdout: ''
  timestamp: 1660015823
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // Check for trivial factors.\n        if (n < 2)\
    \ return false;\n        if (n & 1 == 0) return false;\n        long sqrt_n =\
    \ Math.Sqrt(n);\n        // Check for trivial factors.\n        if (sqrt_n < 2)\
    \ return false;\n        if (sqrt_n & 1 == 0) return false;\n        // Check\
    \ for composite numbers.\n        if (sqrt_n % 2 == 0) return false;\n       \
    \ // Otherwise, loop through all odd numbers less than sqrt_n.\n        bool is_prime\
    \ = true;\n        for (int i = 3; i <= sqrt_n; i += 2) {\n            if (n %\
    \ i == 0) {\n                is_prime = false;\n                break;\n     \
    \       }\n        }\n        return is_prime;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp06mep2gb.cs(27,13): error CS0019: Operator ''&'' cannot be applied to
    operands of type ''long'' and ''bool''

    /tmp/tmp06mep2gb.cs(28,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp06mep2gb.cs(31,13): error CS0019: Operator ''&'' cannot be applied to
    operands of type ''long'' and ''bool''

    '
  timestamp: 1660015823
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2) return false;\n        if (n % 2 == 0)\
    \ return n == 2;\n        long sqrtN = Math.Sqrt(n);\n        long limit = (long)\
    \ (Math.Sqrt(n) * 2.0);\n        for (long i = 3; i * i <= n; i += 2) {\n    \
    \        if (n % i == 0) {\n                return false;\n            }\n   \
    \         if (Math.Abs(n - i * i) > limit) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpssto05bd.cs(27,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015823
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2) {\n            return false;\n       \
    \ }\n        long m = 1L;\n        for (long i = 2; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                m = i;\n                break;\n      \
    \      }\n        }\n        if (m == 1L) {\n            return true;\n      \
    \  }\n        return false;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a503438a76b447aca3bcdc2784edbd78>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a503438a76b447aca3bcdc2784edbd78>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015823
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        long sqrtN = Math.Sqrt(n);\n        long sqrtN =\
    \ Math.Sqrt(n);\n        long sqrtN = Math.Sqrt(n);\n        for (int i = 3; i\
    \ <= sqrtN; i += 2)\n            if (n % i == 0)\n                return false;\n\
    \        return true;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7x3mtm0r.cs(25,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp7x3mtm0r.cs(26,14): error CS0128: A local variable or function named ''sqrtN''
    is already defined in this scope

    /tmp/tmp7x3mtm0r.cs(26,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp7x3mtm0r.cs(27,14): error CS0128: A local variable or function named ''sqrtN''
    is already defined in this scope

    /tmp/tmp7x3mtm0r.cs(27,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015823
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2) return false;\n        if (n % 2 == 0)\
    \ return n == 2;\n\n        long max = 3; //only need to check the odd numbers\
    \ up to this point (because even numbers have no factors)\n\n        while(Math.Sqrt(n)\
    \ > max * max)\n            max += max;\n\n        for(long i = 3; i <= max; i\
    \ += 2)\n            if (n % i == 0) return false;\n\n        return true;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cdf7bdc6deab4b62a2ac6b4333440349>:0 \n"
  stdout: ''
  timestamp: 1660015824
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2) {\n            return false;\n       \
    \ }\n        if (n == 2) {\n            return true;\n        }\n        if (n\
    \ % 2 == 0) {\n            return false;\n        }\n        // If n is not evenly\
    \ divisible by 2 and 3, then\n        // at least one of these three conditions\
    \ must be true:\n        // a) n is divisible by 2, i. e. 6 is prime.\n      \
    \  // b) n is divisible by 3, i. e. 4 is prime.\n        // c) n is not divisible\
    \ by either 2 or 3, i. e. it's not prime.\n        // So we must check whether\
    \ n is divisible by 3 or 5.\n        // If the condition below is true, the number\
    \ is not prime.\n        bool nIsPrime = true;\n        long x = n - 1;\n    \
    \    long xRem = 3;\n        long xRemDivThree = 0;\n        for (long i = 3;\
    \ i <= Math.Floor(x); i++) {\n            if (x % i == 0) {\n                bool\
    \ xRemDivThreeIsPrime = true;\n                for (long j = 3; j < i; j++) {\n\
    \                    if (i % j == 0) {\n                        xRemDivThreeIsPrime\
    \ = false;\n                        break;\n                    }\n          \
    \      }\n                if (xRemDivThreeIsPrime) {\n                    nIsPrime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         xRem = i;\n            xRemDivThree = i;\n        }\n        return\
    \ xIsPrime;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk3ogi57m.cs(45,36): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Floor(decimal)'' and ''Math.Floor(double)''

    /tmp/tmpk3ogi57m.cs(62,16): error CS0103: The name ''xIsPrime'' does not exist
    in the current context

    /tmp/tmpk3ogi57m.cs(41,14): warning CS0219: The variable ''nIsPrime'' is assigned
    but its value is never used

    '
  timestamp: 1660015823
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n == 1)\n            return true;\n        if\
    \ (n == 2)\n            return true;\n        if (n == 3)\n            return\
    \ true;\n        if (n % 2 == 0)\n            return false;\n        if (n % 3\
    \ == 0)\n            return false;\n        if (n % 5 == 0)\n            return\
    \ false;\n        if (n % 7 == 0)\n            return false;\n        long[] primes\
    \ = new long[] {3, 5, 7, 11, 13, 17, 19, 23, 29};\n        long nCr = n;\n   \
    \     for (long p = 0; p < primes.Length; p++)\n            if (nCr == (int)Math.Floor((double)nCr\
    \ / primes[p]))\n                return true;\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <903529bb0914417d896110fb41fd14a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <903529bb0914417d896110fb41fd14a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015824
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // TODO: This implementation is very inefficient\n\
    \        // but works fine for small numbers\n        if (n < 2) {\n         \
    \   return false;\n        }\n        if (n % 2 == 0) {\n            return false;\n\
    \        }\n        long[] primes = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97 };\n        long[] divisors\
    \ = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157,\
    \ 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241,\
    \ 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\
    \ 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439,\
    \ 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547,\
    \ 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643,\
    \ 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751,\
    \ 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859,\
    \ 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977,\
    \ 983, 991, 997};\n        long[] primes_copy = primes.ToArray();\n        long[]\
    \ divisors_copy = divisors.ToArray();\n        // Start with n = 2\n        while\
    \ (n < primes.Length) {\n            if (primes_copy[n] == n) {\n            \
    \    return true;\n            }\n            for (int i = 0; i < divisors_copy.Length;\
    \ i++) {\n                if (n % divisors_copy[i] == 0) {\n                 \
    \   return false;\n                }\n            }\n            primes_copy[n\
    \ + 1]++;\n        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0fdd1df3e27946bb860c0cb895c3c883>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0fdd1df3e27946bb860c0cb895c3c883>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015824
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n <= 1) return false;\n        long d = n - 2;\n\
    \        long r = n - 1;\n        while (d % 2 == 0) {\n            d /= 2;\n\
    \            r -= 1;\n        }\n        for (long k = 3; k <= n / 2; k += 2)\
    \ {\n            long f = (long) Math.Sqrt(n);\n            if (f > n) f -= 1;\n\
    \            if (f % k == 0 || r - f % k == 0)\n                return false;\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a8e1414bf5294a7dadb05b1d87e13266>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a8e1414bf5294a7dadb05b1d87e13266>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015824
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        bool result = true;\n        if (n <= 2) {\n    \
    \        return false;\n        }\n        // Find next integer larger than n\n\
    \        long next = 2;\n        while (next <= Math.Sqrt(n)) {\n            if\
    \ (n % next == 0) {\n                result = false;\n                break;\n\
    \            }\n            next += 1;\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015824
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // Test for even numbers (even numbers only)\n  \
    \      if (n%2 == 0)\n            return false;\n\n        // Test for odd numbers\
    \ (odd numbers only)\n        if (n%2 != 0)\n            return true;\n\n    \
    \    // If n is prime we know that there is no even smaller number\n        //\
    \ (ie: there is no factor smaller than n that can be tested)\n        long divisor\
    \ = 2;\n        while (divisor*divisor <= n) {\n            if (n % divisor ==\
    \ 0) {\n                return false;\n            }\n            divisor++;\n\
    \        }\n\n        // Otherwise test to see if we can divide n evenly \n  \
    \      // (ie: divide n by each possible number from 3 to n/2)\n        while\
    \ (n % 3 == 0) {\n            if (n % 2 == 0) {\n                return false;\n\
    \            }\n            n = n / 2;\n        }\n\n        // Otherwise n is\
    \ prime\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5e44ad0fe0db4211a816bc60a50d0a55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5e44ad0fe0db4211a816bc60a50d0a55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015824
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        var sqrt = (int)Math.Sqrt(n);\n        for (long\
    \ i = 2; i <= sqrt; i++) {\n            if (n % i == 0)\n                return\
    \ false;\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3464ef65840a49b48d84fb574907b5c7>:0 \n"
  stdout: ''
  timestamp: 1660015824
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        long max = long.MaxValue;\n        if (n == 1L) return\
    \ true;\n        if (n % 2 == 0) return false;\n\n        for (long i = 3L; i\
    \ * i <= max; i += 2L) {\n            if (n % i == 0L) return false;\n       \
    \ }\n        return true;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54513b4516b94e4797120e3140b6c34e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54513b4516b94e4797120e3140b6c34e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015824
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        bool result = true;\n        // Assume that the input\
    \ is an odd number\n        int maxIter = Convert.ToInt32((Math.Sqrt(Convert.ToDouble(n)))\
    \ + 0.5);\n        for (int i = 0; i < maxIter; i++)\n        {\n            int\
    \ tester = (int)n;\n            int divisor = tester % 2 == 0 ? tester : tester\
    \ / 2;\n            if (n % divisor == 0)\n            {\n                result\
    \ = false;\n                break;\n            }\n            else\n        \
    \    {\n                n = tester;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.DivideByZeroException: Attempted to divide\
    \ by zero.\n  at Problem.IsPrime (System.Int64 n) [0x00033] in <8d23d7c7288845b58ad6b3837c971962>:0\
    \ \n  at Problem.Main (System.String[] args) [0x0005c] in <8d23d7c7288845b58ad6b3837c971962>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.DivideByZeroException: Attempted\
    \ to divide by zero.\n  at Problem.IsPrime (System.Int64 n) [0x00033] in <8d23d7c7288845b58ad6b3837c971962>:0\
    \ \n  at Problem.Main (System.String[] args) [0x0005c] in <8d23d7c7288845b58ad6b3837c971962>:0\
    \ \n"
  stdout: ''
  timestamp: 1660015824
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2)\n            return false;\n        if\
    \ (n == 2)\n            return true;\n        if (n % 2 == 0)\n            return\
    \ false;\n        for (int i = 3; i <= Math.Sqrt(n); i += 2)\n            if (n\
    \ % i == 0)\n                return false;\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n\
    \    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015824
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n == 0 || n == 1) {\n            return false;\n\
    \        }\n        for (int i = 2; i <= n / i; i++) {\n            if (n % i\
    \ == 0) {\n                return false;\n            }\n        }\n        return\
    \ true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015824
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if ((n % 2) == 0)\n            return false;\n\n\
    \        long sqrt_n = Convert.ToInt64(Math.Sqrt(n));\n\n        for (long i =\
    \ 3; i <= sqrt_n; i += 2)\n            if (n % i == 0)\n                return\
    \ false;\n\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e56aaffceb574b8a97dfef40349694c3>:0 \n"
  stdout: ''
  timestamp: 1660015824
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // Test for small primes up to 10L (because L is\
    \ implicit)\n        if (n < 10L) {\n            foreach (long value in new long[]\
    \ {\n                (long) 1,\n                (long) 2,\n                (long)\
    \ 3,\n                (long) 4,\n                (long) 5,\n                (long)\
    \ 6,\n                (long) 7,\n                (long) 8,\n                (long)\
    \ 9,\n                (long) 10,\n                (long) 11\n            }) {\n\
    \                if (n % value == 0) {\n                    return false;\n  \
    \              }\n            }\n            return true;\n        }\n       \
    \ // Test for small primes up to 100L (because L is implicit)\n        if (n <\
    \ 100L) {\n            foreach (long value in new long[] {\n                (long)\
    \ 11,\n                (long) 12,\n                (long) 13,\n              \
    \  (long) 14,\n                (long) 15,\n                (long) 16,\n      \
    \          (long) 17,\n                (long) 18,\n                (long) 19,\n\
    \                (long) 20,\n                (long) 21,\n                (long)\
    \ 22,\n                (long) 23,\n                (long) 24,\n              \
    \  (long) 25,\n                (long) 26,\n                (long) 27,\n      \
    \          (long) 28,\n                (long) 29,\n                (long) 30,\n\
    \                (long) 31,\n                (long) 32,\n                (long)\
    \ 33,\n                (long) 34,\n                (long) 35,\n              \
    \  (long) 36,\n                (long) 37,\n                (long) 38,\n      \
    \          (long) 39,\n                (long) 40,\n                (long) 41,\n\
    \                (long) 42,\n                (long) 43,\n                (long)\
    \ 44,\n                (long) 45,\n                (long) 46,\n              \
    \  (long) 47,\n                (long) 48,\n                (long) 49,\n      \
    \          (long) 50,\n                (long) 51,\n                (long) 52,\n\
    \                (long) 53,\n                (long) 54,\n                (long)\
    \ 55,\n                (long) 56,\n                (long) 57,\n              \
    \  (long) 58,\n                (long) 59,\n                (long) 60,\n      \
    \          (long) 61,\n                (long) 62,\n                (long) 63,\n\
    \                (long) 64,\n                (long) 65,\n                (long)\
    \ 66,\n                (long) 67,\n                (long) 68,\n              \
    \  (long) 69,\n                (long) 70,\n                (long) 71,\n      \
    \          (long) 72,\n                (long) 73,\n                (long) 74,\n\
    \                (long) 75,\n                (long) 76,\n                (long)\
    \ 77,\n                (long) 78,\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu2tg39by.cs(117,6): error CS1026: ) expected

    /tmp/tmpu2tg39by.cs(118,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpu2tg39by.cs(134,2): error CS1513: } expected

    '
  timestamp: 1660015824
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // Use a list to check factors of n.\n        List<long>\
    \ factors = new List<long>();\n        // Loop through factors of n. \n      \
    \  for (int i = 2; i <= Math.Sqrt(n); i++) {\n            // If i is a factor\
    \ of n, then n is prime. \n            if (n % i == 0) {\n                // Add\
    \ the factor of n to factors.\n                factors.Add(i);\n             \
    \   // Remove i from n so that n is not a factor of n any \n                //\
    \ longer.\n                n = n / i;\n            }\n        }\n        // Check\
    \ if n has no factors.\n        if (factors.Count == 0)\n            return true;\n\
    \        // If n is a prime then return true.\n        if (factors.Count == 1)\n\
    \            return true;\n        // If n is composite, then return false.\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d72af6c6cda443b491a652b422b46249>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d72af6c6cda443b491a652b422b46249>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015824
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2L) return false; // 0 and 1 are not primes\n\
    \        if (n == 2L) return true; // only even numbers are primes\n        //\
    \ The Miller-Rabin primality test says that the probability of\n        // getting\
    \ an arbitrary non-prime test number tested as composite is\n        // at most\
    \ 1/(2^k), where k is the number of bits in the number.\n        // The time required\
    \ for this test to run is O(k^1.5) where k is the\n        // number of bits in\
    \ the input number.\n        // To avoid running afoul of this worst case we require\
    \ that the\n        // number input must be an odd number and the first few numbers\n\
    \        // must be odd.\n        // We don't run this test if the number is even\
    \ since this would\n        // require running a non-Primality test first, which\
    \ would take \n        // O(n) time.\n        if (n % 2L == 0L && n != 2L) {\n\
    \            if (n % 3L == 0L && n != 3L) {\n                if (n % 5L == 0L\
    \ && n != 5L) {\n                    return true;\n                }\n       \
    \     }\n        }\n        // Now we know that n is odd, so it is safe to try\
    \ odd-bit odd\n        // numbers. For every odd number except 2 we run a non-Primality\n\
    \        // test. If that passes, we conclude that the number is prime.\n    \
    \    // If the non-Primality test fails then we can skip the odd\n        // number\
    \ since the number is not prime.\n        // We only need to test odd numbers\
    \ since odd numbers have at least\n        // one even bit, and only when we have\
    \ an odd number of bits.\n        BigInteger bn = BigInteger.One;\n        while\
    \ (bn.BitCount < n) {\n            if (bn.IsEven) {\n                bn = bn.Add(BigInteger.One);\n\
    \            } else {\n                // The non-Primality test has failed\n\
    \                return false;\n            }\n        }\n        // If we get\
    \ here, BN is prime\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcnz_5o8x.cs(53,19): error CS1061: ''BigInteger'' does not contain a definition
    for ''BitCount'' and no accessible extension method ''BitCount'' accepting a first
    argument of type ''BigInteger'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpcnz_5o8x.cs(55,25): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''right'' of ''BigInteger.Add(BigInteger, BigInteger)''

    '
  timestamp: 1660015824
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n == 2)\n            return true;\n        if\
    \ (n == 3)\n            return true;\n        if (n % 2 == 0)\n            return\
    \ false;\n        long limit = (long)Math.Sqrt(n) + 1;\n        for (int i = 3;\
    \ i <= limit; i += 2)\n            if (n % i == 0)\n                return false;\n\
    \        if (n == (limit / 2) + 1)\n            return true;\n        if (n ==\
    \ (limit / 2) - 1)\n            return false;\n        return true;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) ==\
    \ (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <852570ccdf8c4097922cbdb01ecc4e46>:0 \n"
  stdout: ''
  timestamp: 1660015824
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n <= 2L) return true;\n        if (n == 2L) return\
    \ true;\n        if (n % 2L == 0) return false;\n        for (int i = 3L; i *\
    \ i <= n; i += 2L) {\n            if (n % i == 0L) return false;\n        }\n\
    \        return true;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpknb1_f5x.cs(28,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpknb1_f5x.cs(28,38): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015824
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // If n is less than 2, return false.\n        if\
    \ (n < 2) {\n            return false;\n        }\n        // If n is odd, return\
    \ false if the greatest common divisor is 2.\n        // Otherwise, return true.\n\
    \        if (n & 1 == 0) {\n            return n % 2 == 0;\n        }\n      \
    \  // Otherwise, test to see if the greatest common divisor is 2.\n        else\
    \ {\n            int gcd = GCD(n, 2);\n            return gcd != 2;\n        }\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmhltfyn_.cs(31,13): error CS0019: Operator ''&'' cannot be applied to
    operands of type ''long'' and ''bool''

    /tmp/tmpmhltfyn_.cs(36,23): error CS0103: The name ''GCD'' does not exist in the
    current context

    '
  timestamp: 1660015824
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2) return false;\n        if (n == 2) return\
    \ true;\n        if ((n & 1) == 0) return false;\n        for (int i = 3; i *\
    \ i <= n; i += 2)\n            if ((n % (i + 1L)) != 0) return false;\n      \
    \  return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bb946579ef694da0ab39f4f8c74faca0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bb946579ef694da0ab39f4f8c74faca0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015824
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        bool flag = true;\n\n        // Use a loop to test\
    \ the number's primality up to sqrt(n).\n        // If the loop doesn't exit,\
    \ then the number is not prime.\n        long sqrtN = Math.Sqrt(n);\n        for\
    \ (int i = 2; i <= sqrtN; i++) {\n            if (n % i == 0) {\n            \
    \    flag = false;\n                break;\n            }\n        }\n       \
    \ return flag;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj3nt139n.cs(29,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015824
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n == 1)\n            return false;\n        if\
    \ (n == 2)\n            return true;\n        if (n % 2 == 0)\n            return\
    \ false;\n        long limit = (long) Math.Sqrt(n) + 1;\n        long limit2 =\
    \ limit + 1;\n        for (long k = 3; k <= limit2; k += 2) {\n            if\
    \ (n % k == 0)\n                return false;\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015824
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // We only need to check for odd numbers.\n     \
    \   if (n < 2L || n % 2L != 0)\n            return false;\n        if (n == 2L)\n\
    \            return true;\n        long max = (long)Math.Sqrt(n) + 1;\n      \
    \  long maxPrime = max;\n        bool isPrime = true;\n        for (long divisor\
    \ = 2L; divisor <= maxPrime; divisor++) {\n            if (n % divisor == 0)\n\
    \                return false;\n            if (divisor == maxPrime)\n       \
    \         isPrime = true;\n            else {\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        return isPrime;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <31cfa9d02d734f009e7c04fa61cdb7c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <31cfa9d02d734f009e7c04fa61cdb7c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015824
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        var isPrime = true;\n        long divisor = 2;\n\
    \        while (divisor <= Math.Sqrt(n)) {\n            if (n % divisor == 0)\
    \ {\n                isPrime = false;\n                break;\n            }\n\
    \            divisor++;\n        }\n        return isPrime;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n\
    \    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <326f3e05435e49c7a525452074b1ee31>:0 \n"
  stdout: ''
  timestamp: 1660015824
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        long limit = (long)Math.Sqrt(n);\n        if (n %\
    \ 2 == 0) {\n            limit = limit / 2;\n        }\n        if (limit < 2)\
    \ {\n            return false;\n        }\n        long start = 2;\n        int\
    \ counter;\n        long end = 0;\n        for (counter = start; counter <= limit;\
    \ counter++) {\n            end = counter * counter;\n            if (end > limit)\
    \ {\n                break;\n            }\n            if (n % counter == 0)\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqrothqjd.cs(35,24): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015824
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2L) {\n            return false;\n      \
    \  }\n        if (n < 5L) {\n            return n % 10 != 0;\n        }\n    \
    \    long max = (long) Math.Sqrt(n) + 1;\n        long maxi = (long) Math.Sqrt(max)\
    \ + 1;\n        bool result = true;\n        for (long i = 3; i <= maxi; i +=\
    \ 2) {\n            if (n % i == 0) {\n                result = false;\n     \
    \           break;\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cfc24303a948435b938d197a1b0acfaa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cfc24303a948435b938d197a1b0acfaa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015825
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2L)\n            return false;\n        if\
    \ (n < 3L)\n            return true;\n        if (n % 2L == 1L)\n            return\
    \ false;\n        if (n % 3L == 1L)\n            return true;\n        long a\
    \ = 6L;\n        long b = 3L;\n        // If n is evenly divisible by 2L, the\
    \ first \n        // trial is evenly divisable.\n        if ((n % 2L) == 0L)\n\
    \            return true;\n        if ((n % 3L) == 0L)\n            return false;\n\
    \        long x = 3L;\n        long y = 2L;\n        long temp;\n        bool\
    \ isPrime = false;\n        for (x = a; x <= b; x++) {\n            // If n is\
    \ divisible by x\n            if ((n % x) == 0L)\n                return false;\n\
    \            // If y is dividable by x\n            if (y % x) == 0L) {\n    \
    \            // If n is greater than or equal to x/2,\n                // then\
    \ n is not prime\n                if (x % 2L == 0L)\n                    return\
    \ false;\n                // If n is greater than y/2, \n                // then\
    \ n divides y by 2\n                if (x % 3L == 0L)\n                    return\
    \ true;\n                temp = y;\n                y = x - 1L;\n            \
    \    isPrime = true;\n            }\n        }\n        if (isPrime)\n       \
    \     return true;\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq202y8ti.cs(50,24): error CS1525: Invalid expression term ''==''

    /tmp/tmpq202y8ti.cs(50,29): error CS1002: ; expected

    /tmp/tmpq202y8ti.cs(50,29): error CS1513: } expected

    /tmp/tmpq202y8ti.cs(64,9): error CS1519: Invalid token ''if'' in class, struct,
    or interface member declaration

    /tmp/tmpq202y8ti.cs(64,20): error CS8124: Tuple must contain at least two elements.

    /tmp/tmpq202y8ti.cs(65,13): error CS1519: Invalid token ''return'' in class, struct,
    or interface member declaration

    /tmp/tmpq202y8ti.cs(84,1): error CS1022: Type or namespace definition, or end-of-file
    expected

    '
  timestamp: 1660015824
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        long p = 2;\n        while (p < n / 2)\n        \
    \    p += 2;\n        if (n % 2 == 0)\n            return n == p;\n        p +=\
    \ 1;\n        for (int i = 3; i <= n; i += 2) {\n            if (n % i == 0)\n\
    \                return false;\n            p += 2;\n        }\n        return\
    \ true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b2b16ddac11e495e9ff54913573c279b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b2b16ddac11e495e9ff54913573c279b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015825
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        ulong sqrtN = Math.Sqrt(n);\n        ulong i = 3L;\n\
    \        while (i <= sqrtN) {\n            if (n % i == 0)\n                return\
    \ false;\n            i += 2L;\n        }\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n\
    \    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6j73xb1n.cs(25,23): error CS0266: Cannot implicitly convert type ''double''
    to ''ulong''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp6j73xb1n.cs(28,17): error CS0034: Operator ''%'' is ambiguous on operands
    of type ''long'' and ''ulong''

    '
  timestamp: 1660015824
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // http://en.wikipedia.org/wiki/Primality_test\n\
    \        // http://en.wikipedia.org/wiki/Miller-Rabin\n\n        // Check that\
    \ n is prime\n        if (n < 2)\n            return false;\n        if (n ==\
    \ 2)\n            return true;\n        long sqrtn = Math.Sqrt(n);\n        bool\
    \ testprime = true;\n\n        for (int i = 3; i <= sqrtn; i += 2) {\n       \
    \     // Test for primeness (i is a prime if and only if (i * i) <= n)\n     \
    \       if (n % i == 0)\n                testprime = false;\n        }\n     \
    \   return testprime;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt7l_pgvr.cs(33,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015824
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n == 1) return false;\n        long r = n % 2\
    \ == 0 ? 3 : 2;\n        while (n > 1) {\n            if (n % r == 0) return false;\n\
    \            r = r + 1;\n            n = n / 2;\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <294d3efc113c434eab8a3030a9ff2d53>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <294d3efc113c434eab8a3030a9ff2d53>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015825
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 3) return false; // 0 is never a prime!\n\
    \n        // Use Sieve of Atkin to find primes up to n inclusive.\n        //\
    \ The algorithm is explained in detail here:\n        // http://www.algorithmist.com/index.php/Sieve_of_Atkin\n\
    \n        var primes = new[] {2, 3, 5, 7, 11, 13, 17, 19};\n        for (int p\
    \ = 2; p < n; p++) {\n            if (primes.Contains(p)) {\n                //\
    \ This number was marked as a prime.\n                if (IsDivisible(primes.IndexOf(p),\
    \ n)) {\n                    // If this number divides evenly into n, then n\n\
    \                    // is not a prime; return false.\n                    return\
    \ false;\n                }\n            }\n        }\n\n        // n is a prime!\n\
    \        return true;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0947fhzd.cs(35,21): error CS0103: The name ''IsDivisible'' does not exist
    in the current context

    /tmp/tmp0947fhzd.cs(35,40): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    '
  timestamp: 1660015825
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2) return false;\n        if (n == 2) return\
    \ true;\n        if (n % 2 == 0) return false;\n        if (n % 3 == 0) return\
    \ false;\n\n        long x = 3;\n        while (x <= Math.Sqrt(n)) {\n       \
    \     if (n % x == 0) return false;\n            x++;\n        }\n        return\
    \ true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015825
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if ((n & 1) == 0) {\n            return n % 2 ==\
    \ 0;\n        }\n        if (n <= 3) {\n            return true;\n        }\n\
    \        long limit = (long)Math.Sqrt(n) + 1;\n        for (int i = 3; i <= limit;\
    \ i += 2) {\n            if (n % i == 0) {\n                return false;\n  \
    \          }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <04423783864149fcaeddfe47e66bf485>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <04423783864149fcaeddfe47e66bf485>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015825
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2)\n            return false;\n        //\
    \ Trial division check\n        if (n == 2)\n            return true;\n      \
    \  if (n == 3)\n            return true;\n\n        // Check odd and even numbers\n\
    \        if (n % 2 == 0)\n            return (n % 6 == 0);\n        else\n   \
    \         return ((n%6 == 0) && !(IsPrime(n/2)));\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e64b70458b5c48c897c2b9bb1e5b1b48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e64b70458b5c48c897c2b9bb1e5b1b48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015825
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n <= 3) return true;\n        if (n < 5) return\
    \ false;\n        if (n % 2 == 0) return false;\n        if (n % 3 == 0) return\
    \ false;\n        // If n is odd, then (n-1)/2 is also odd.\n        long q =\
    \ (long) (Math.Sqrt((double)n) + 0.5);\n        if (q % 2 == 0) return false;\n\
    \        // Check only odd factors.\n        long r = 2;\n        while (r * r\
    \ <= q) r = (long) (Math.Sqrt(r * r) + 0.5);\n        while (r > 2) if (n % r\
    \ == 0) return false;\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4af26fd1b26f431ba4d88ce36e31ae6f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4af26fd1b26f431ba4d88ce36e31ae6f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: None
  timestamp: 1660015830
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        long[] a = new long[]{1, 3, 7, 11, 13, 17, 19, 23};\n\
    \        long[] b = new long[]{2, 3, 5, 7, 11, 13, 17, 19, 23};\n        long[]\
    \ c = new long[]{2, 3, 5, 7, 11, 13, 17, 19, 23, 29};\n        long[] d = new\
    \ long[]{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31};\n        long[] e = new long[]{2,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 73, 109, 199, 289};\n        long[] f = new long[]{2,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 73, 109, 199, 289, 343};\n        long[] g =\
    \ new long[]{3, 7, 11, 13, 17, 19, 23, 29, 31, 73, 109, 199, 289, 343, 373};\n\
    \        long[] h = new long[]{3, 7, 11, 13, 17, 19, 23, 29, 31, 73, 109, 199,\
    \ 289, 343, 373, 109};\n        long[] i = new long[]{3, 11, 33, 127, 193, 373,\
    \ 703, 1079, 1511, 2069, 2353, 3003, 4033, 5039, 5911, 7017, 8271, 10079, 11409,\
    \ 12143, 13031, 14017, 14331, 14911, 15711, 16727, 17331, 17993, 18703, 19373,\
    \ 20103, 21213, 21407, 22307, 22993, 23017, 23423, 24327, 24993, 25561, 25807,\
    \ 26413, 26801, 27261, 27893, 28363, 28933, 29541, 29993, 30501, 31053, 31723,\
    \ 32307, 32931, 33511, 34003, 34903, 35713, 36351, 36937, 37597, 38303, 38923,\
    \ 39537, 40153, 40913, 41531, 42133, 42713, 43371, 43913, 44511, 45231, 45937,\
    \ 46573, 47231, 47713, 48317, 48831, 49343, 49893, 50553, 51037, 51233, 51913,\
    \ 52603, 53133, 53613, 54253, 54853, 55601, 56213, 56801, 57393, 57993, 58511,\
    \ 58923, 59437, 59913, 60591, 61013, 61641, 62103, 62613, 63233, 63713, 64301,\
    \ 64903, 65413, 65999, 66593, 67219, 67793, 68219, 68893, 69593, 70\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) ==\
    \ (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuqqp7b6p.cs(34,6): error CS1002: ; expected

    /tmp/tmpuqqp7b6p.cs(35,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpuqqp7b6p.cs(51,2): error CS1513: } expected

    '
  timestamp: 1660015824
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2) return false;\n        // Only odd numbers\
    \ need to test - even numbers can\n        // only end by dividing by 2.\n   \
    \     if (n % 2 == 0) return n % 2 == 1 && IsPrime(n / 2);\n        // Test for\
    \ primes up to n / 2.\n        long limit = (long)Math.Sqrt(n) + 1;\n        bool\
    \ prime = true;\n        for (long i = 3; i <= limit; i += 2)\n        {\n   \
    \         if (n % i == 0)\n            {\n                prime = false;\n   \
    \             break;\n            }\n        }\n        return prime;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015825
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        long limit = (long)Math.Sqrt(n) + 1;\n        long\
    \ root = (long)Math.Sqrt(n);\n        bool isPrime = true;\n        long i, divisor;\n\
    \        bool hasDivisor = false;\n\n        // Check for composite.\n       \
    \ if ((n % 2 == 0 && n != 2) || n == 1 || n == 0) return false;\n\n        //\
    \ Check odd numbers\n        if ((n % 2 == 0 && n != 2) || n == 1 || n == 0) return\
    \ false;\n\n        // Check even numbers\n        for (i = 3; i <= limit; i +=\
    \ 2) {\n            if (n % i == 0) return false;\n        }\n\n        // Check\
    \ odd factors of first three numbers.\n        for (i = 0; i < 3; i++) {\n   \
    \         if (n % i == 0) {\n                isPrime = false;\n              \
    \  break;\n            }\n        }\n\n        // Check factors of 2, 3, 5.\n\
    \        for (i = 6; i <= limit; i += 2) {\n            divisor = i;\n       \
    \     while (divisor <= root && (n % divisor) == 0) {\n                hasDivisor\
    \ = true;\n                divisor++;\n            }\n            if (divisor\
    \ <= root) isPrime = false;\n        }\n\n        return hasDivisor || isPrime;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.DivideByZeroException: Attempted to divide\
    \ by zero.\n  at Problem.IsPrime (System.Int64 n) [0x0009b] in <6f664f4c86644867acd86dda0d5b90a9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00011] in <6f664f4c86644867acd86dda0d5b90a9>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.DivideByZeroException: Attempted\
    \ to divide by zero.\n  at Problem.IsPrime (System.Int64 n) [0x0009b] in <6f664f4c86644867acd86dda0d5b90a9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00011] in <6f664f4c86644867acd86dda0d5b90a9>:0\
    \ \n"
  stdout: ''
  timestamp: 1660015825
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if ((n <= 3L) || (n % 2L == 0L)) {\n            return\
    \ falseL;\n        }\n        long k = (long) Math.Sqrt(n);\n        while (k\
    \ < (long) Math.Floor(k)) {\n            if ((n % k == 0L) && (k % 2L == 0L))\
    \ {\n                return falseL;\n            }\n            k = k + k + 1L;\n\
    \        }\n        return trueL;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpotu3ryt1.cs(26,20): error CS0103: The name ''falseL'' does not exist in
    the current context

    /tmp/tmpotu3ryt1.cs(29,32): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Floor(decimal)'' and ''Math.Floor(double)''

    /tmp/tmpotu3ryt1.cs(31,24): error CS0103: The name ''falseL'' does not exist in
    the current context

    /tmp/tmpotu3ryt1.cs(35,16): error CS0103: The name ''trueL'' does not exist in
    the current context

    '
  timestamp: 1660015825
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n <= 1)\n            return false;\n        \n\
    \        long max = (long)Math.Sqrt(n) + 1;\n\n        for(int i = 2; i <= max;\
    \ ++i) {\n            if (n % i == 0)\n                return false;\n       \
    \ }\n        return true;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015825
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        var sqrt = (int)Math.Sqrt(n);\n        for (long\
    \ i = 2; i <= sqrt; i++) {\n            if (n % i == 0)\n                return\
    \ false;\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3464ef65840a49b48d84fb574907b5c7>:0 \n"
  stdout: ''
  timestamp: 1660015824
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        return !DivisibleBySqrt(n);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n  \
    \  Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L)) ==\
    \ (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpevmegaw8.cs(25,17): error CS0103: The name ''DivisibleBySqrt'' does not
    exist in the current context

    '
  timestamp: 1660015825
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2 || n == 1L) {\n            return true;\n\
    \        }\n\n        // See if the first two factors of n are both prime.\n \
    \       bool a = IsPrime((n + 1L) / 2);\n        bool b = IsPrime((n + 1L) / 2\
    \ - 1L);\n        if (a && b) {\n            return true;\n        }\n\n     \
    \   // If n has no factors, it is not prime.\n        if (n == 1L) {\n       \
    \     return false;\n        }\n\n        // Find an upper bound on the value\
    \ of n to test by trial division.\n        int upper = Int32.MaxValue;\n\n   \
    \     // Try numbers up to (and including) this number.\n        for (long i =\
    \ 2L; i <= upper; i++) {\n            long test = (n + 1L) / i;\n            bool\
    \ a = IsPrime(test);\n            if (a != b) {\n                return a;\n \
    \           }\n        }\n\n        // If n has no factors up to or including\
    \ this number, it is not prime.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n  \
    \  Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L)) ==\
    \ (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvye3jjbk.cs(47,18): error CS0136: A local or parameter named ''a'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1660015825
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2)\n            return false;\n\n       \
    \ // Make sure n is even and larger than two.\n        if (n % 2 == 0 || n ==\
    \ 2)\n            return false;\n\n        // Now let's see if the numbers 2 and\
    \ n are factors of n.\n        // This is where the magic happens.\n        for\
    \ (long i = 2; i <= Math.Floor(Math.Sqrt(n)); i++)\n            if (n % i == 0)\n\
    \                return false;\n\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n  \
    \  Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L)) ==\
    \ (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015825
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        ulong limit = (ulong)Math.Sqrt(n);\n        ulong\
    \ limit2 = limit / 2;\n        ulong limit3 = limit / 3;\n        ulong limit4\
    \ = limit / 4;\n        ulong limit5 = limit / 5;\n        ulong limit6 = limit\
    \ / 6;\n        ulong limit7 = limit / 7;\n        ulong limit8 = limit / 8;\n\
    \        ulong limit9 = limit / 9;\n        ulong limit10 = limit / 10;\n    \
    \    ulong limit11 = limit / 11;\n        ulong limit12 = limit / 12;\n      \
    \  ulong limit13 = limit / 13;\n        ulong limit14 = limit / 14;\n        ulong\
    \ limit15 = limit / 15;\n        ulong limit16 = limit / 16;\n        ulong limit17\
    \ = limit / 17;\n        ulong limit18 = limit / 18;\n        ulong limit19 =\
    \ limit / 19;\n        ulong limit20 = limit / 20;\n        ulong limit21 = limit\
    \ / 21;\n        ulong limit22 = limit / 22;\n        ulong limit23 = limit /\
    \ 23;\n        ulong limit24 = limit / 24;\n        ulong limit25 = limit / 25;\n\
    \        ulong limit26 = limit / 26;\n        ulong limit27 = limit / 27;\n  \
    \      ulong limit28 = limit / 28;\n        ulong limit29 = limit / 29;\n    \
    \    ulong limit30 = limit / 30;\n        ulong limit31 = limit / 31;\n      \
    \  ulong limit32 = limit / 32;\n        ulong limit33 = limit / 33;\n        ulong\
    \ limit34 = limit / 34;\n        ulong limit35 = limit / 35;\n        ulong limit36\
    \ = limit / 36;\n        ulong limit37 = limit / 37;\n        ulong limit38 =\
    \ limit / 38;\n        ulong limit39 = limit / 39;\n        ulong limit40 = limit\
    \ / 40;\n        ulong limit41 = limit / 41;\n        ulong limit42 = limit /\
    \ 42;\n        ulong limit43 = limit / 43;\n        ulong limit44 = limit / 44;\n\
    \        ulong limit45 = limit / 45;\n        ulong limit46 = limit / 46;\n  \
    \      ulong limit47 = limit / 47;\n        ulong limit48 = limit / 48;\n    \
    \    ulong limit49 = limit / 49;\n\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxt2wvcqn.cs(24,24): error CS0161: ''Problem.IsPrime(long)'': not all code
    paths return a value

    '
  timestamp: 1660015825
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // TODO: Factor out this code\n        // http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n\n\
    \        // http://stackoverflow.com/questions/410984/most-efficient-way-to-list-all-primes-below-n-in-c\n\
    \n        Debug.Assert(n > 1);\n        if (n == 2) return true;\n        if (n\
    \ % 2 == 0) return false;\n\n        var sqrt = (int) Math.Sqrt(n);\n        var\
    \ sqroot = Math.Sqrt(n);\n        int limit = (int) Math.Ceiling(Math.Sqrt(n));\n\
    \        var factors = new List<long>();\n\n        for (int i = 3; i <= limit;\
    \ i += 2) {\n            if (n % i == 0) {\n                factors.Add(i);\n\
    \                if (n % (i * i) == 0) return false;\n            }\n        }\n\
    \n        // if (n <= 3) return true;\n        if (factors.Count != 2) return\
    \ false;\n\n        // TODO: Fix this\n        // http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n\n\
    \        // http://stackoverflow.com/questions/410984/most-efficient-way-to-list-all-primes-below-n-in-c\n\
    \        if (n > 6) {\n            factors.Add(n);\n            return factors.All(n\
    \ => n % n == 0);\n        }\n\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n  \
    \  Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L)) ==\
    \ (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cc86d67fe0d84a7aac5009b41cf581b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cc86d67fe0d84a7aac5009b41cf581b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015825
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        // Check to see if n is less than or equal to 1.\n\
    \        if (n < 1L) {\n            return false;\n        }\n\n        // Check\
    \ if the n is prime.\n        if (n == 1L) {\n            return true;\n     \
    \   }\n\n        // Divide the number by every number between 2 and n-1.\n   \
    \     long x = 2L;\n        while ((x != n) & (x != 1L)) {\n            if ((n\
    \ % x) == 0) {\n                return false;\n            }\n            x++;\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ee9143323d254057a1f8c26a5285fa8d>:0 \n"
  stdout: ''
  timestamp: 1660015825
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        bool result = true;\n        long divisor = 2;\n\
    \        while (divisor < n) {\n            if (n % divisor == 0) {\n        \
    \        result = false;\n                break;\n            }\n            divisor++;\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <301fdb50922a4df4b3bccbc4b31801bd>:0 \n"
  stdout: ''
  timestamp: 1660015825
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        bool result = false;\n        if (n < 3) {\n    \
    \        result = true;\n        }\n        else\n        if (n % 2 == 0) {\n\
    \            result = false;\n        }\n        else\n        {\n           \
    \ long max = (long.MaxValue) / 2;\n            for (long i = 3; i <= max; i +=\
    \ 2) {\n                if (n % i == 0)\n                {\n                 \
    \   result = false;\n                    break;\n                }\n         \
    \   }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <95b04a86e5fa49f5bc095ff3422a8cb5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <95b04a86e5fa49f5bc095ff3422a8cb5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015825
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    //\
    \ (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n\
    \    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n\
    \    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool\
    \ IsPrime(long n) {\n        Divisor divisor = new Divisor();\n        while (n\
    \ > 1) {\n            long primeCheck = divisor.getPrimeCheck(n);\n          \
    \  if (primeCheck > 1) {\n                long result = n;\n                while\
    \ ((n % primeCheck) == 0) {\n                    n = n / primeCheck;\n       \
    \         }\n                divisor.addDivisor(primeCheck);\n               \
    \ return true;\n            }\n            n = n;\n        }\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpohgfvuo5.cs(25,9): error CS0246: The type or namespace name ''Divisor''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpohgfvuo5.cs(25,31): error CS0246: The type or namespace name ''Divisor''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpohgfvuo5.cs(36,13): warning CS1717: Assignment made to same variable;
    did you mean to assign something else?

    '
  timestamp: 1660015825
