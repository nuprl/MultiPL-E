name: HumanEval_64_vowels_count
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function vowels_count which takes a string representing\n\
  \    // a word as input and returns the number of vowels in the string.\n    //\
  \ Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    // vowel,\
  \ but only when it is at the end of the given word.\n    // Example:\n    // >>>\
  \ VowelsCount((\"abcde\"))\n    // (2L)\n    // >>> VowelsCount((\"ACEDY\"))\n \
  \   // (3L)\n    public static long VowelsCount(string s) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(VowelsCount((\"\
  abcde\")) == (2L));\n    Debug.Assert(VowelsCount((\"Alone\")) == (3L));\n    Debug.Assert(VowelsCount((\"\
  key\")) == (2L));\n    Debug.Assert(VowelsCount((\"bye\")) == (1L));\n    Debug.Assert(VowelsCount((\"\
  keY\")) == (2L));\n    Debug.Assert(VowelsCount((\"bYe\")) == (1L));\n    Debug.Assert(VowelsCount((\"\
  ACEDY\")) == (3L));\n    }\n\n}\n"
completions: ["        int count = 0;\n        char[] vowels = {'a', 'e', 'i', 'o',\
    \ 'u', 'y'};\n        int n = s.Length;\n        for (int i = 0; i < n; i++) {\n\
    \            if (vowels.Contains(s[i])) {\n                count++;\n        \
    \    }\n        }\n        return count;", "        long vowelsCount = 0;\n  \
    \      foreach (char c in s) {\n            if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                vowelsCount++;\n            }\n\
    \        }\n        return vowelsCount;", "        long vowels = 0;\n        char[]\
    \ vowels = { 'a', 'e', 'i', 'o', 'u', 'y' };\n        foreach (char c in s) {\n\
    \            if (vowels.Contains(c))\n                vowels++;\n        }\n \
    \       return vowels;", "        return s.Count(c => c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u' || c == 'y' );", "        long count = 0;\n\
    \        string vowels = \"aeiou\";\n        foreach (char c in s) {\n       \
    \     foreach (char vowel in vowels) {\n                if (c == vowel) {\n  \
    \                  count++;\n                    break;\n                }\n \
    \           }\n        }\n        return count;", "        string vowels = \"\
    aeiouy\";\n        int count = 0;\n        foreach (char c in s) {\n         \
    \   if (vowels.IndexOf(c) >= 0) {\n                count++;\n            }\n \
    \       }\n        return count;", "        if (string.IsNullOrEmpty(s)) return\
    \ 0L;\n        HashSet<string> vowels = new HashSet<string> { \"a\", \"e\", \"\
    i\", \"o\", \"u\" };\n        long vowelsCount = 0L;\n\n        foreach (string\
    \ word in s.Split()) {\n            vowelsCount += vowels.Count(word => word.ToLower().EndsWith(word));\n\
    \        }\n        return vowelsCount;", "        long vowels = 0;\n        foreach\
    \ (char c in s.ToCharArray()) {\n            if (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u')\n                vowels++;\n        }\n       \
    \ return vowels;", "        return s.Where((c) => c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u' || c == 'y' || c == 'y').Count() ; }\n</code>\n\
    <|/ a tags=string,c#,algorithm |>\n<| c |>\nThis is O(n) algorithm but OP asked\
    \ for O(1) complexity. Anyways, this is definitely the best answer so far.\n<|/\
    \ c |>\n<| c |>\nWhy did you think that it's O(n) complexity? The complexity of\
    \ .Count() is O(n). It traverses through all characters of the string and counts\
    \ them and returns an integer. And you are using it inside Where clause.\n<|/\
    \ c |>\n<| c |>\nIt is O(n), yes, but we are using it inside Where clause, which\
    \ is O(n) complexity. Here is a quote from MSDN: \"This method does not return\
    \ the same result as the linq Count() method.\" [MSDN: Where(TSource) Method](https://msdn.microsoft.com/en-us/library/bb548541(v=vs.110).aspx)\n\
    <|/ c |>\n<| c |>\nI missed that it's inside Where clause. Sorry.\n<|/ c |>\n\
    <| c |>\nI don't think this counts the amount of \"y\" at the end of the word.\
    \ Not even sure what happens to 'a'\n<|/ c |>\n<| a |>\nA simple but fast solution\
    \ would be to iterate through each character of the string and keep a count of\
    \ the number of times a vowel is found. If at the end of the string there wasn't\
    \ a vowel, then the count is 0.\n<code>\nstring s = \"aadfadf\";\nint count =\
    \ 0;\nfor (int i = 0; i < s.Length; i++)\n{\n    switch (s[i])\n    {\n      \
    \  case 'a':\n        case 'e':\n        case 'i':\n        case 'o':\n      \
    \  case 'u':\n            count++;\n            break;", "        long numvowels\
    \ = 0;\n        int length = s.Length;\n        for(int i = 0; i < length; i++)\
    \ {\n            if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' ||\
    \ s[i] == 'u') {\n                numvowels += 1;\n            }\n        }\n\
    \        return numvowels;", "        long vowels = 0;\n        int pos = 0;\n\
    \        while(pos < s.Length) {\n            int currentVowel = 0;\n        \
    \    while(pos < s.Length) {\n                if(s[pos] == 'a' || s[pos] == 'e'\
    \ || s[pos] == 'i' || s[pos] == 'o' || s[pos] == 'u') {\n                    currentVowel++;\n\
    \                }\n                pos++;\n            }\n            if(currentVowel\
    \ > 0) {\n                vowels++;\n            }\n        }\n        return\
    \ vowels;", "        if (s == null || s == \"\") {\n            throw new ArgumentNullException(\n\
    \                \"VowelsCount requires an argument of type string\");\n     \
    \   }\n\n        long count = 0;\n        foreach (char c in s) {\n          \
    \  if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {\n                count++;\n\
    \            }\n        }\n\n        return count;", "        if (s == null) {\n\
    \            throw new ArgumentNullException(\"s\");\n        }\n\n        var\
    \ vowels = \"aeiouAEIOU\".ToCharArray();\n        var count = vowels.Count();\n\
    \        var inConsonant = s.Split().SelectMany(r => r).Distinct();\n        var\
    \ vowelsCount = s.Split().Where(x => inConsonant.Contains(x)).Count(x => vowels.Contains(x));\n\
    \        return vowelsCount + count;", "        int vowelcount = 0;\n        int\
    \ i;\n        for (i = 0; i < s.Length; i++) {\n            if (s[i] != 'a' &&\
    \ s[i] != 'e' &&\n                s[i] != 'i' && s[i] != 'o' &&\n            \
    \    s[i] != 'u' && (s[i] == 'y' || i == (s.Length - 1)))\n                vowelcount++;\n\
    \        }\n        return vowelcount;", "        long count = 0;\n        foreach\
    \ (char c in s) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n                count++;\n            }\n        }\n       \
    \ return count;", "        HashSet<char> vowels = new HashSet<char>();\n     \
    \   foreach (char c in s) {\n            vowels.Add(c);\n        }\n        return\
    \ vowels.Count;", "        char[] vowels = { 'a', 'e', 'i', 'o', 'u', 'y' };\n\
    \        Array.Sort(vowels);\n        long[] count = new long[26];\n        int\
    \ x = 0;\n        for (int i = 0; i < s.Length; i++) {\n            for (int j\
    \ = 0; j < vowels.Length; j++) {\n                if (s[i] != vowels[j]) {\n \
    \                   count[x++] = 1;\n                }\n            }\n      \
    \  }\n        return count[26];", "        long vowelCount = 0;\n        for (int\
    \ i = 0; i < s.Length; i++) {\n            if (IsVowel(s[i]))\n              \
    \  vowelCount++;\n        }\n        return vowelCount;", "        var vowels\
    \ = new List<char>() { 'a', 'e', 'i', 'o', 'u' };\n        var count = s.Count(c\
    \ => vowels.Contains(c));\n        return count;", "        long v = 0;\n    \
    \    foreach (char c in s) {\n            switch (c) {\n                case 'a':\
    \ case 'e': case 'i': case 'o': case 'u':\n                    ++v;\n        \
    \            break;\n                case 'y':\n                    if (!s.EndsWith(\"\
    y\")) ++v;\n                    break;\n                default:\n           \
    \         break;\n            }\n        }\n        return v;", "        var vowels\
    \ = \"aeiou\";\n        var vowelsCount = new List<string>();\n\n        for (int\
    \ i = 0; i < s.Length; i++) {\n            bool flag = false;\n            for\
    \ (int j = 0; j < vowels.Length; j++) {\n                if (vowels[j] == s[i]\
    \ && vowels[j + 1] == 'y') {\n                    flag = true;\n             \
    \       break;\n                }\n            }\n\n            if (!flag) {\n\
    \                vowelsCount.Add(s[i]);\n            }\n        }\n\n        return\
    \ (long)vowelsCount.Count();", "        long vowel_count = 0;\n        foreach\
    \ (char c in s.ToCharArray()) {\n            if (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n                vowel_count++;\n           \
    \ }\n        }\n        return vowel_count;", "        Dictionary<string, bool>\
    \ vowels\n            = new Dictionary<string, bool>()\n        {\n          \
    \  {\"a\", true},\n            {\"e\", true},\n            {\"i\", true},\n  \
    \          {\"o\", true},\n            {\"u\", true},\n        };\n        long\
    \ vowels = 0;\n\n        for (int i = 0; i < s.Length; ++i) {\n            string\
    \ curr = s.Substring(i).ToUpper();\n\n            if (vowels.TryGetValue(curr,\
    \ out bool found)) {\n                vowels += found ? 1 : 0;\n            }\
    \ else {\n                vowels += vowels.ContainsKey(curr) ? 1 : 0;\n      \
    \      }\n        }\n        return vowels;", "        long vowels_count = s.Length;\n\
    \        bool is_a_vowel = true;\n\n        for(int i = 0; i < s.Length; i++)\
    \ {\n            switch(s[i]){\n                case 'a':\n                  \
    \  is_a_vowel = true;\n                    break;\n                case 'e':\n\
    \                    is_a_vowel = true;\n                    break;\n        \
    \        case 'i':\n                    is_a_vowel = true;\n                 \
    \   break;\n                case 'o':\n                    is_a_vowel = true;\n\
    \                    break;\n                case 'u':\n                    is_a_vowel\
    \ = true;\n                    break;\n                default:\n            \
    \        is_a_vowel = false;\n                    break;\n            }\n    \
    \    }\n        if(is_a_vowel) {\n            vowels_count--;\n        }\n   \
    \     return vowels_count;", "        long vowels_count = s.Length;\n\n      \
    \  HashSet<Character> vowels = new HashSet<Character>();\n        vowels.Add('a');\n\
    \        vowels.Add('e');\n        vowels.Add('i');\n        vowels.Add('o');\n\
    \        vowels.Add('u');\n        vowels_count = vowels_count - vowels.Count;\n\
    \n        string vowel_sign = vowels.ToString();\n\n        for (int i = 0; i\
    \ < vowels_count + 1; i++)\n        {\n            if (vowel_sign.IndexOf(vowels.ToString())\
    \ != -1 && vowels.IndexOf(s[i]) == -1)\n            {\n                vowels_count--;\n\
    \            }\n        }\n\n        return vowels_count;", "        var vowelsCount\
    \ = s.Count(a => a == 'a' || a == 'e' || a == 'i' || a == 'o' || a == 'u');\n\
    \        return vowelsCount;", "        string vowels = \"aeiou\";\n        return\
    \ s.Count(c => vowels.Contains(c));", "        int vowelCount = 0;\n        foreach\
    \ (char ch in s) {\n            if (Char.IsUpper(ch)) {\n                if (s.IndexOf(\"\
    Y\", s.Length - 1) != -1)\n                    vowelCount++;\n            }\n\
    \            if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u')\
    \ {\n                vowelCount++;\n            }\n        }\n        return vowelCount;",
  "        if (s.Length == 0) return 0L;\n        return s.Count(x => (int)x == 'a')\
    \ +\n               s.Count(x => (int)x == 'e') +\n               s.Count(x =>\
    \ (int)x == 'i') +\n               s.Count(x => (int)x == 'o') +\n           \
    \    s.Count(x => (int)x == 'u');", "        long count = 0;\n        foreach\
    \ (var c in s)\n        {\n            switch (c)\n            {\n           \
    \     case 'a':\n                case 'e':\n                case 'i':\n      \
    \          case 'o':\n                case 'u':\n                    count++;\n\
    \                    break;\n            }\n        }\n        return count;",
  '        // TODO: Return the number of vowels in the given string.', "        string\
    \ vowels = \"aeiouAEIOU\";\n        long[] counts = Array.ConvertAll(s.ToCharArray(),\
    \ c => vovels.IndexOf(c) != -1? 1 : 0);\n        return counts.Sum();", "    \
    \    long vowelCount = 0;\n        foreach (char c in s) {\n            if (c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n                vowelCount++;\n\
    \        }\n        return vowelCount;", "        long vowel_count = 0;\n    \
    \    for (int i = 0; i < s.Length; i++)\n        {\n            if (Char.IsLetter(s[i]))\n\
    \            {\n                vowel_count += s.Count(x => x == 'a' || x == 'e'\
    \ || x == 'i' || x == 'o' || x == 'u');\n            }\n        }\n        return\
    \ vowel_count;", "        var vowels = \"aeiouAEIOU\".ToCharArray();\n       \
    \ var vowelCount = new List<long>();\n        var count = 0;\n        foreach\
    \ (char c in s) {\n            if (vowels.Contains(c)) {\n                vowelCount.Add(1);\n\
    \                count++;\n            }\n            else if (c == vowels[vowels.Length\
    \ - 1]) vowelCount.Add(1);\n        }\n        return count + vowelCount.Count;",
  "        long vowelCount = 0;\n        for (int i = 0; i < s.Length; i++) {\n  \
    \          bool isVowel = true;\n            for (int j = 0; j < s.Length; j++)\n\
    \                if ((s[i] == s[j] || s[i] == 'i' || s[i] == 'o' || s[i] == 'a'\
    \ || s[i] == 'e' || s[i] == 'u') && j != s.Length - 1)\n                    isVowel\
    \ = false;\n            if (isVowel)\n                vowelCount++;\n        }\n\
    \        return vowelCount;", "        if (s == null || s.Length == 0) return\
    \ 0L;\n        long count = 0;\n        long total = 0;\n        foreach (char\
    \ c in s) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n                count++;\n            } else if (c == 'y') {\n  \
    \              total += 1;\n                if (s.Length > 1 && s[s.Length - 2]\
    \ == 'y') {\n                    count++;\n                }\n            }\n\
    \        }\n        return count;", "        // Complete this function\n     \
    \   string str = s;\n        int vowelCount = 0;\n        for (int i = 0; i <\
    \ str.Length; i++) {\n            switch (str[i]) {\n                case \"a\"\
    :\n                case \"e\":\n                case \"i\":\n                case\
    \ \"o\":\n                case \"u\":\n                    vowelCount++;\n   \
    \                 break;\n                default:\n                    break;\n\
    \            }\n        }\n        return vowelCount;", "        long vowelsCount\
    \ = 0;\n        char[] vowels = new[] { 'a', 'e', 'i', 'o', 'u' };\n        foreach\
    \ (char vowel in vowels)\n        {\n            if (s.Contains(vowel))\n    \
    \        {\n                vowelsCount++;\n            }\n        }\n       \
    \ return vowelsCount;", "        var vowels = new[] { 'a', 'e', 'i', 'o', 'u'\
    \ };\n        var vowelsCount = new Dictionary<char, int>();\n        foreach\
    \ (char c in s) {\n            vowelsCount[c] = (vowelsCount.ContainsKey(c)) ?\
    \ vowelsCount[c] + 1 : 0;\n        }\n        return vowelsCount.Values.Sum();",
  "        int vowels = 0;\n        for (int i = 0; i < s.Length; i++) {\n       \
    \     char c = s[i];\n            if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n                vowels++;\n            }\n        }\n  \
    \      return vowels;", "        char[] vowels = new char[] { 'a', 'e', 'i', 'o',\
    \ 'u', 'y' };\n        long vowelsCount = 0;\n        foreach (char letter in\
    \ s.ToCharArray()) {\n            if (vowels.Contains(letter)) {\n           \
    \     vowelsCount++;\n            }\n        }\n        return vowelsCount;",
  "        long vowels = 0, i, j, k;\n        long total = 0;\n        \n        List<char>\
    \ vowels = Enumerable.Range('a','z').ToList();\n        \n        foreach(var\
    \ c in s) {\n            total += vowels.Contains(c) ? 1 : 0;\n        }\n   \
    \     \n        foreach(var c in s) {\n            if (c == 'y')\n           \
    \     break;\n            \n            foreach(var i in vowels) {\n         \
    \       if (c == i)\n                    vowels.Remove(i);\n            }\n  \
    \      }\n        \n        foreach (var c in s) {\n            if (c == 'y')\n\
    \                break;\n            \n            for (i = 0; i < vowels.Count;\
    \ i++) {\n                j = vowels[i];\n                k = vowels.Count - 1;\n\
    \                if (c == j)\n                    vowels.Remove(j);\n        \
    \        else if (c == k)\n                    vowels.Remove(k);\n           \
    \ }\n        }\n        \n        for (i = vowels.Count - 1; i >= 0; i--)\n  \
    \          total += vowels[i];\n        \n        return total;", "        StringBuilder\
    \ stringBuilder = new StringBuilder();\n        foreach (char c in s) {\n    \
    \        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n   \
    \             stringBuilder.Append(c);\n            }\n        }\n        long\
    \ result = long.Parse(stringBuilder.ToString().Trim().Replace(\"y\", \"\").Replace(\"\
    a\", \"\").Replace(\"e\", \"\").Replace(\"i\", \"\").Replace(\"o\", \"\").Replace(\"\
    u\", \"\").Replace(\"y\", \"\"));\n        return result;", "        long vowels\
    \ = 0;\n        for (int i = 0; i < s.Length; i++) {\n            string vowel\
    \ = \"aieou\";\n            vowel = vowel.Substring(i + 1);\n            if (vowel.Equals(s,\
    \ StringComparison.OrdinalIgnoreCase)) {\n                vowels++;\n        \
    \    }\n        }\n        return vowels;", "        long vowels = 0;\n      \
    \  long vowel_count = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c))\
    \ {\n                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u') {\n                    vowel_count++;\n                }\n            }\n\
    \        }\n        if (vowel_count == 0)\n        {\n            vowels = 1;\n\
    \        }\n        vowels = vowel_count * vowels;\n        return vowels;", " \
    \       int count = 0;\n        bool flag;\n        for (int i = 0; i < s.Length;\
    \ i++) {\n            flag = false;\n            switch (s[i]) {\n           \
    \     case 'a':\n                case 'e':\n                case 'i':\n      \
    \          case 'o':\n                case 'u':\n                    flag = true;\n\
    \                    break;\n            }\n            if (flag) {\n        \
    \        count++;\n            }\n        }\n        return (long)count;", " \
    \       long vowelCount = 0;\n        for (int i = 0; i < s.Length; i++) {\n \
    \           char c = s[i];\n            if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n                vowelCount++;\n            }\n    \
    \    }\n        return vowelCount;", "        long v = 0;\n        int i; // Loop\
    \ counter.\n\n        // For each character in the string.\n        for (int c\
    \ = 0; c < s.Length; c++) {\n            char c = s[c];\n            // If the\
    \ current character is a vowel.\n            if (Char.IsLetter(c)) {\n       \
    \         // Increment the loop counter.\n                i++;\n             \
    \   // Increment the vowel count.\n                v++;\n            }\n     \
    \   }\n        return v;", "        if (s == null || s.Length <= 0)\n        \
    \    return 0;\n        long vowel_count = 0;\n        long vowel_count2 = 0;\n\
    \        foreach (char c in s) {\n            if (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n                vowel_count++;\n           \
    \ }\n            if (c == 'y') {\n                vowel_count2++;\n          \
    \  }\n        }\n        return vowel_count2;", "        int vowelsCount = 0;\n\
    \        long vowelsCountTotal = 0;\n        StringBuilder builder = new StringBuilder();\n\
    \        foreach (char letter in s) {\n            builder.Append(letter);\n \
    \       }\n        if (vowelsCountTotal == 0) vowelsCountTotal = vowelsCount;\n\
    \        foreach (char letter in s) {\n            if (letter != ' ') vowelsCount++;\n\
    \            string vowel = builder.ToString();\n            if (vowel == (\"\
    a\") || vowel == (\"e\") || vowel == (\"i\") || vowel == (\"o\") || vowel == (\"\
    u\"))\n            {\n                vowelsCountTotal++;\n            }\n   \
    \     }\n        return vowelsCountTotal;", "        long vowelsCount = 0;\n \
    \       long vowels = new[]{'a', 'e', 'i', 'o', 'u'};\n        foreach (char c\
    \ in s) {\n            if (vowels.Contains(c)) {\n                vowelsCount++;\n\
    \            }\n        }\n        if (vowelsCount > 0) {\n            vowelsCount++;\n\
    \        }\n        return vowelsCount;", "        long count = 0;\n        for\
    \ (int i = 0; i < s.Length; i++) {\n            if (s[i] == 'a' || s[i] == 'e'\
    \ || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n                count++;\n\
    \            }\n        }\n        return count;", "        if (s == null || s\
    \ == \"\" || s == \" \") {\n            return 0;\n        }\n        var vowels\
    \ = \"aeiou\";\n        var vowelCount = s.Length - s.Replace(vowels, \"\").Length;\n\
    \        return vowelCount;", "        char[] arr = new char[s.Length];\n    \
    \    for(int i=0; i<s.Length; i++) {\n            arr[i] = s[i];\n        }\n\
    \        var vowels = new HashSet<char>() { 'a', 'e', 'i', 'o', 'u' };\n     \
    \   var count = 0;\n        for(int i=0; i<s.Length; i++) {\n            if(!vowels.Contains(arr[i]))\n\
    \                count++;\n        }\n        return count;", "        long vowels_count\
    \ = 0;\n        foreach(char c in s) {\n            if (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n                vowels_count++;\n     \
    \       }\n        }\n        return vowels_count;", "        long vowels = 0,\
    \ pos = 0, i;\n        while (pos < s.Length) {\n            i = s.IndexOf(\"\
    a\", pos);\n            if (i < 0) { break; }\n            pos += 1;\n       \
    \     if (s.IndexOf(\"a\", pos) < 0 || s.IndexOf(\"e\", pos) < 0 || s.IndexOf(\"\
    y\", pos) < 0 || s.IndexOf(\"o\", pos) < 0 || s.IndexOf(\"u\", pos) < 0) { break;\
    \ }\n            pos += 1;\n            vowels += 1;\n        }\n        return\
    \ vowels;", "        long countVowels = 0;\n        int position = 0;\n\n    \
    \    while ((position = s.IndexOfAny(new char[]{'a', 'e', 'i', 'o', 'u'}, position,\
    \ StringComparison.Ordinal)) >= 0) {\n            countVowels += 1;\n        \
    \    position = s.IndexOfAny(new char[]{'a', 'e', 'i', 'o', 'u'}, position + 1,\
    \ StringComparison.Ordinal);\n        }\n\n        if (position < 0)\n       \
    \     countVowels += 1;\n\n        return countVowels;", "        int vowels =\
    \ 0;\n        foreach (char c in s) {\n            if (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n                vowels++;\n           \
    \ }\n        }\n        return vowels;", "        bool consonants = s.All(x =>\
    \ x != 'y' && x != 'y' || x != 'y' && x != 'i');\n        bool vowels = s.All(char.IsVowel);\n\
    \        return consonants ? vowels ? (long) s.Where(x => char.IsVowel(x)).Count()\
    \ \n            + (long) s.Where(x => x != 'y' && char.IsVowel(x)).Count() \n\
    \            + (long) s.Where(x => x != 'y' && x != 'i' && char.IsVowel(x)).Count()\
    \ \n            + (long) s.Where(x => x != 'y' && x != 'i' && x != 'y' && char.IsVowel(x)).Count()\
    \ \n            + (long) s.Where(x => x != 'y' && x != 'i' && x != 'y' && x !=\
    \ 'i' && char.IsVowel(x)).Count() \n            + (long) s.Where(x => x != 'y'\
    \ && x != 'i' && x != 'y' && x != 'i' && x != 'y' && char.IsVowel(x)).Count()\
    \ \n            + (long) s.Where(x => x != 'y' && x != 'i' && x != 'y' && x !=\
    \ 'i' && x != 'y' && x != 'i' && char.IsVowel(x)).Count() \n            + (long)\
    \ s.Where(x => x != 'y' && x != 'i' && x != 'y' && x != 'i' && x != 'y' && x !=\
    \ 'i' && x != 'y' && char.IsVowel(x)).Count() \n            + (long) s.Where(x\
    \ => x != 'y' && x != 'i' && x != 'y' && x != 'i' && x != 'y' && x != 'i' && x\
    \ != 'y' && x != 'i' && char.IsVowel(x)).Count() \n            + (long) s.Where(x\
    \ => x != 'y' && x != 'i' && x != 'y' && x != 'i' && x != 'y' && x != 'i' && x\
    \ != 'y' && x != 'i' && x != 'y' && char.IsVowel(x)).Count() \n            + (long)\
    \ s.Where(x => x != 'y' && x != 'i' && x != 'y' && x != 'i' && x != 'y' && x !=\
    \ 'i' && x != 'y' && x != 'i' && x != 'y' && x != 'i' && char.IsVowel(x)).Count()\
    \ \n            + (long) s.Where(x => x != 'y' && x != 'i' && x != 'y' && x !=\
    \ 'i' && x != '", "        if (s == null || s.Length == 0) return 0;\n       \
    \ long vowels = 0;\n        int i = 0;\n        char c;\n        while (i < s.Length)\
    \ {\n            c = s[i];\n            switch (c) {\n                case 'a':\n\
    \                case 'e':\n                case 'i':\n                case 'o':\n\
    \                case 'u':\n                    vowels++;\n                  \
    \  break;\n                case ' ':\n                    break;\n           \
    \ }\n            i++;\n        }\n        return vowels;", "        if (string.IsNullOrEmpty(s))\n\
    \            return 0;\n        long[] count = new long[5];\n        int count\
    \ = 0;\n        foreach (char c in s) {\n            switch (c) {\n          \
    \      case 'a':\n                case 'e':\n                case 'i':\n     \
    \           case 'o':\n                case 'u':\n                    count[c\
    \ - 'a']++;\n                    break;\n                case 'y':\n         \
    \           if (count > 0)\n                        count[count - 1]++;\n    \
    \                break;\n            }\n        }\n        return count[count.Length\
    \ - 1];", "        // TODO\n        var vowels = \"aeiou\";\n        int vowelsCount\
    \ = 0;\n        foreach (char ch in s) {\n            vowelsCount = vowels.IndexOf(ch)\
    \ + 1;\n        }\n        return vowelsCount;", "        long n = 0;\n      \
    \  for (int i = 0; i < s.Length; i++) {\n            n = n + ((s.IndexOf(\"aeiou\"\
    ) + 1 == s.IndexOf(s[i], i + 1) ? 1 :0));\n        }\n        return n;", "  \
    \      long vowels = 0L;\n        for (int i = 0; i < s.Length; i++) {\n     \
    \       char c = s[i];\n            if (c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u') {\n                vowels += 1;\n            }\n       \
    \ }\n        if (vowels == 0)\n            return (long)(s.Length * 2L);\n   \
    \     else\n            return vowels;", "        long vowels_count = 0;\n   \
    \     foreach (var v in s.ToCharArray()) {\n            switch (v) {\n       \
    \         case 'a':\n                case 'e':\n                case 'i':\n  \
    \              case 'o':\n                case 'u':\n                    break;\n\
    \                case 'y':\n                    vowels_count += 1;\n         \
    \           break;\n                default:\n                    vowels_count\
    \ += 0;\n                    break;\n            }\n        }\n        return\
    \ vowels_count;", "        long vowelsCount = 0;\n        for (int i = 0; i <\
    \ s.Length; i++)\n        {\n            char ch = s[i];\n            if (ch ==\
    \ 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u')\n            {\n  \
    \              vowelsCount++;\n            }\n        }\n        return vowelsCount;",
  "        long vowels = 0;\n        string vowel_char = \"aeiou\";\n        char[]\
    \ chars = s.ToCharArray();\n        int i = chars.Length;\n        for (; i >\
    \ 0; i -= 2) {\n            if (vowel_char.IndexOf(chars[i - 1]) >= 0) {\n   \
    \             vowels += 1;\n            }\n        }\n        return vowels;",
  "        var vowels = \"aeiou\";\n        var vowels_count = s.Count(x => vowels.Contains(x.ToString()));\n\
    \        return vowels_count;", "        long count = 0;\n        char[] vowels\
    \ = \"aeiou\".ToCharArray();\n        foreach (char letter in s) {\n         \
    \   if (vowels.Contains(letter))\n                count++;\n        }\n      \
    \  if (s.Length > 0 && s.EndsWith(\"y\"))\n            count++;\n        return\
    \ count;", "        long vowels = 0;\n        for (int i = 0; i < s.Length; i++)\
    \ {\n            bool found = false;\n            for (int j = 0; j < vowels.Length;\
    \ j++) {\n                if (s[i] == vowels[j]) {\n                    found\
    \ = true;\n                    break;\n                }\n            }\n    \
    \        if (found == false) {\n                vowels++;\n            }\n   \
    \     }\n        return vowels;", "        long vowels = 0;\n        foreach (char\
    \ c in s) {\n            switch (c) {\n                case 'a': case 'e': case\
    \ 'i': case 'o': case 'u':\n                    vowels++;\n                  \
    \  break;\n                case 'y':\n                    if (s.Length > 0) {\n\
    \                        bool y = s.Substring(0, s.Length - 1) == 'y';\n     \
    \                   if (y) {\n                            vowels++;\n        \
    \                }\n                    }\n                    break;\n      \
    \      }\n        }\n        return vowels;", "        StringBuilder sb = new\
    \ StringBuilder();\n        foreach (var ch in s) {\n            switch (ch) {\n\
    \                case \"a\":\n                    sb.Append(\"e\");\n        \
    \            break;\n                case \"e\":\n                    sb.Append(\"\
    i\");\n                    break;\n                case \"i\":\n             \
    \       sb.Append(\"o\");\n                    break;\n                case \"\
    o\":\n                    sb.Append(\"u\");\n                    break;\n    \
    \            case \"u\":\n                    break;\n                default:\n\
    \                    sb.Append(ch);\n                    break;\n            }\n\
    \        }\n        var result = sb.ToString().ToCharArray().Where(c => c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').Count();\n        return result;",
  "        long vowelCount = 0;\n        foreach (char ch in s) {\n            if\
    \ ('a' <= ch && ch <= 'z') {\n                vowelCount++;\n            } else\
    \ if ('e' <= ch && ch <= 'z') {\n                vowelCount++;\n            }\
    \ else if ('e' <= ch && ch <= 'z') {\n                vowelCount++;\n        \
    \    } else if ('i' <= ch && ch <= 'z') {\n                vowelCount++;\n   \
    \         } else if ('o' <= ch && ch <= 'z') {\n                vowelCount++;\n\
    \            } else if ('u' <= ch && ch <= 'z') {\n                vowelCount++;\n\
    \            } else if ('a' <= ch && ch <= 'y') {\n                vowelCount++;\n\
    \            } else if ('e' <= ch && ch <= 'y') {\n                vowelCount++;\n\
    \            } else if ('e' <= ch && ch <= 'y') {\n                vowelCount++;\n\
    \            } else if ('i' <= ch && ch <= 'y') {\n                vowelCount++;\n\
    \            } else if ('o' <= ch && ch <= 'y') {\n                vowelCount++;\n\
    \            } else if ('u' <= ch && ch <= 'y') {\n                vowelCount++;\n\
    \            }\n        }\n        return vowelCount;", "        char[] vowels\
    \ = new char[] { 'a', 'e', 'i', 'o', 'u' };\n        int count = 0;\n        int\
    \ index;\n        int length = 0;\n        char[] chars = s.ToCharArray();\n\n\
    \        foreach (char c in chars) {\n            index = chars.IndexOf(c.ToString());\n\
    \            length++;\n            if (index > -1) {\n                if (chars[index\
    \ + 1] == (char)0x5a) {\n                    count++;\n                }\n   \
    \         }\n        }\n        return count;", "        var vowels = new char[]\
    \ { 'a', 'e', 'i', 'o', 'u' };\n        var vowels_count = s.Select(c => vowels.Contains(c)\
    \ ? 1 : 0).Sum();\n        return vowels_count;", "        var vowels = new List<char>\
    \ {'a', 'e', 'i', 'o', 'u'};\n        var vowel_count = vowels.Where(x => s.IndexOf(x)\
    \ > -1).Count();\n        return vowel_count;", "        var vowels = \"aeiou\"\
    ;\n        var vowelsCnts = new List<long>();\n        var totalVowels = 0;\n\
    \        foreach (var letter in s) {\n            totalVowels += vowels.Count(x\
    \ => x == letter);\n        }\n        foreach (var vowel in vowels) {\n     \
    \       vowelsCnts.Add(vowels.Count(x => x == vowel));\n        }\n        return\
    \ totalVowels;", "        // Your code here\n        int vowels = 0, consonants\
    \ = 0;\n        for (int i = 0; i < s.Length; i++) {\n            if (s.Substring(i,\
    \ 1) == \"a\")\n                vowels++;\n            if (s.Substring(i, 1) ==\
    \ \"e\")\n                vowels++;\n            if (s.Substring(i, 1) == \"i\"\
    )\n                vowels++;\n            if (s.Substring(i, 1) == \"o\")\n  \
    \              vowels++;\n            if (s.Substring(i, 1) == \"u\")\n      \
    \          vowels++;\n        }\n        for (int i = 0; i < s.Length; i++) {\n\
    \            if (s.Substring(i, 1) == \"a\")\n                consonants++;\n\
    \            if (s.Substring(i, 1) == \"e\")\n                consonants++;\n\
    \            if (s.Substring(i, 1) == \"i\")\n                consonants++;\n\
    \            if (s.Substring(i, 1) == \"o\")\n                consonants++;\n\
    \            if (s.Substring(i, 1) == \"u\")\n                consonants++;\n\
    \        }\n        if (consonants == 0)\n            return (vowels);\n     \
    \   else\n            return (((vowels / consonants) + 1));", "        long count\
    \ = 1;\n        foreach (var c in s)\n            if (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')\n                count++;\n        return\
    \ count;", "        var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n\
    \        if (string.IsNullOrEmpty(s)) return 0;\n        return s.Count(c => vowels.Contains(c));",
  "        long count = 0;\n        foreach (char letter in s) {\n            switch\
    \ (letter) {\n                case 'a':\n                case 'e':\n         \
    \       case 'i':\n                case 'o':\n                case 'u':\n    \
    \            case 'Y':\n                    count++;\n                    break;\n\
    \                default:\n                    break;\n            }\n       \
    \ }\n        return count;", "        long vowels = 0;\n        foreach (char\
    \ c in s) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n                vowels++;\n            }\n        }\n        return\
    \ vowels;", "        List<string> vowels= new List<string>();\n        foreach\
    \ (char c in s) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n                vowels.Add(c);\n            }\n        }\n \
    \       long vowels_count = vowels.Count();\n        return vowels_count;", " \
    \       long vowels = 0;\n        for (int i = 0; i < s.Length; i++) {\n     \
    \       char c = s[i];\n            if (c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u') {\n                vowels++;\n            }\n        }\n\
    \        return vowels;", "        long vowels_count = 0;\n        Regex regex\
    \ = new Regex(@\"^[AEIOUaeiouy]$\");\n        if (regex.IsMatch(s)) {\n      \
    \      vowels_count = s.Length - regex.Replace(s, string.Empty).Length;\n    \
    \    }\n        return vowels_count;", "        long vowelcount = 0;\n       \
    \ foreach (char c in s) {\n            if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n                vowelcount++;\n            }\n    \
    \    }\n        if(s.Length > 0 && vowelcount >= s.Length / 2) {\n           \
    \ vowelcount = s.Length;\n        }\n        return vowelcount;", "        var\
    \ vowels = new List<char>() { 'a', 'e', 'i', 'o', 'u' };\n        long vowelsCount\
    \ = 0;\n        for (int i = 0; i < s.Length; i++) {\n            if (vowels.Contains(s[i]))\n\
    \                vowelsCount++;\n        }\n        return vowelsCount;", "  \
    \      Dictionary<char, bool> charcount = new Dictionary<char, bool>();\n    \
    \    for (int i = 0; i < s.Length; i++) {\n            char c = s[i];\n      \
    \      if (!charcount.ContainsKey(c)) {\n                charcount.Add(c, false);\n\
    \            }\n            else {\n                charcount[c] = true;\n   \
    \         }\n        }\n        long ans = 0;\n        foreach (char c in charcount)\
    \ {\n            if (charcount[c]) {\n                ans += 1;\n            }\n\
    \        }\n        return ans;", "        long count = 0;\n        foreach (char\
    \ c in s) {\n            int x = s.IndexOf(c);\n            if (x != -1) {\n \
    \               if (c != 'e') count += 1;\n                else {\n          \
    \          int y = s.IndexOf('e', x + 1);\n                    if (y == -1) y\
    \ += 1;\n                    if (y != -1) {\n                        if (c !=\
    \ 'u') count += 1;\n                        else {\n                         \
    \   int z = s.IndexOf('u', y + 1);\n                            if (z == -1) z\
    \ += 1;\n                            if (z != -1) {\n                        \
    \        count += 1;\n                                if (s.Length > z + 1) count\
    \ += 1;\n                            }\n                        }\n          \
    \          }\n                }\n            }\n        }\n        return count;",
  "        long count = 0;\n        var chars = char.GetNumericValue(s.ToCharArray());\n\
    \        for (int i = 0; i < s.Length; i++) {\n            if (chars[i] == 0x61)\
    \ {\n                if (i != s.Length - 1) {\n                    if (chars[i\
    \ + 1] == 0x61) {\n                        count++;\n                    }\n \
    \               }\n            }\n        }\n        return count;", "       \
    \ long vowels = 0;\n        // Initialize all vowels to 0 except for the last\
    \ one which is 'y'.\n        foreach (char c in s.ToCharArray()) {\n         \
    \   if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n          \
    \      vowels++;\n        }\n        // Special handling for 'y', which is only\
    \ counted at the end of input\n        // string.\n        if (s.Length > 0)\n\
    \            if (s[s.Length - 1] == 'y')\n                vowels++;\n        //\
    \ Return the number of vowels\n        return vowels;", "        return s.Count(x\
    \ => (x.Equals('a') || x.Equals('e') || x.Equals('i') || x.Equals('o') || x.Equals('u'))).ToString();",
  "        if (string.IsNullOrEmpty(s))\n            return 0;\n        int[] count\
    \ = new int[26];\n        int n = 0;\n        foreach (char c in s) {\n      \
    \      int index = c - 'a';\n            if (index < 0)\n                index\
    \ += 26;\n            count[index]++;\n            n++;\n        }\n        return\
    \ n;", "        // Write your code here.\n        return s.ToList().Where(x =>\
    \ (x == 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u')).Count();", "   \
    \     if (string.IsNullOrEmpty(s))\n            return 0;\n        var vowels\
    \ = \"aeiouAEIOU\";\n        long vowelsCount = 0;\n        for (int i = 0; i\
    \ < s.Length; i++) {\n            if (vowels.IndexOf(s[i]) != -1)\n          \
    \      vowelsCount++;\n        }\n        return vowelsCount;", "        long\
    \ vowelCount = 0;\n        for (int i = 0; i < s.Length; i++) {\n            if\
    \ (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n\
    \                vowelCount++;\n            }\n        }\n        return vowelCount;",
  "        long vowels_count = 0L;\n        var vowels = new List<char> {'a', 'e',\
    \ 'i', 'o', 'u'};\n        foreach (char c in s) {\n            if (vowels.Contains(c))\
    \ {\n                vowels_count++;\n            }\n        }\n        return\
    \ vowels_count;", "        HashSet<char> h = new HashSet<char>();\n        for\
    \ (int i = 0; i < s.Length; i++) {\n            if (s.Substring(i, 1).Contains(\"\
    a\") || s.Substring(i, 1).Contains(\"e\") || s.Substring(i, 1).Contains(\"i\"\
    ) || s.Substring(i, 1).Contains(\"o\") || s.Substring(i, 1).Contains(\"u\")) {\n\
    \                h.Add(s.Substring(i, 1));\n            }\n            if (s.Length\
    \ > i + 1 && (s.Substring(i, 1).Contains(\"y\") || s.Substring(i, 1).Contains(\"\
    y\") && s.Length > i + 2) && !h.Contains(s.Substring(i + 1, 1))) {\n         \
    \       h.Add(s.Substring(i, 1));\n            }\n        }\n        return h.Count;",
  "        long vowels = 0;\n        int len = s.Length;\n        bool vowel = false;\n\
    \        bool lastVowel = false;\n        bool nextVowel = false;\n        for\
    \ (int i = 0; i < len; i++) {\n            vowel = s[i] == 'a' || s[i] == 'e'\
    \ || s[i] == 'i' || s[i] == 'o' || s[i] == 'u';\n            lastVowel = s[i]\
    \ == 'y';\n            nextVowel = s[i - 1] == 'a' || s[i - 1] == 'e' || s[i -\
    \ 1] == 'i' || s[i - 1] == 'o' || s[i - 1] == 'u';\n            if ((vowel &&\
    \ lastVowel) || (nextVowel && vowel)) {\n                vowels++;\n         \
    \   }\n        }\n        return vowels;", "        if (String.IsNullOrEmpty(s))\
    \ {\n            throw new ArgumentNullException();\n        }\n        var vowels\
    \ = \"aeiou\";\n        var vowels_count = s.Count(c => vowels.Contains(c));\n\
    \        return vowels_count;", "        var chars = s.ToCharArray();\n      \
    \  var vowels = new[] { 'a', 'e', 'i', 'o', 'u' };\n        var vowelsCount =\
    \ chars.Count(c => vowels.Contains(c));\n        long vowelsCountInWord = vowelsCount\
    \ / 2;\n        var vowelsCount = vowelsCount % 2;\n        if (vowelsCountInWord\
    \ > vowelsCount) {\n            vowelsCountInWord++;\n        }\n        return\
    \ vowelsCountInWord;", "        long count = 0;\n        bool flag = true;\n \
    \       for (int i = 0; i < s.Length; i++) {\n            if (flag) {\n      \
    \          switch (s[i]) {\n                    case 'a':\n                  \
    \  case 'e':\n                    case 'i':\n                    case 'o':\n \
    \                   case 'u':\n                        count++;\n            \
    \            break;\n                    default:\n                        flag\
    \ = false;\n                        break;\n                }\n            }\n\
    \            else {\n                if (s[i] == 'y') {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;", "      \
    \  int counter = 0;\n        foreach (char c in s.ToCharArray())\n        {\n\
    \            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n \
    \           {\n                counter++;\n            }\n        }\n        return\
    \ counter;", "        List<char> chars = new List<char>(s.ToCharArray());\n  \
    \      chars.Remove('y');\n        Dictionary<char, long> count = new Dictionary<char,\
    \ long>();\n\n        foreach (char c in chars)\n            count[c] = (count.ContainsKey(c))\
    \ ? (count[c] + 1) : 1;\n\n        long result = 0;\n\n        foreach (KeyValuePair<char,\
    \ long> kvp in count)\n            result += kvp.Value * Math.Pow((double)3, kvp.Key\
    \ - 'a');\n\n        return result;", "        long[] vowels = { 65, 66, 67, 68,\
    \ 69, 70, 71, 72 };\n        long vowelCount = 0;\n        int position = 0;\n\
    \        foreach (char c in s) {\n            if (position < 0 || vowels[position]\
    \ < c) {\n                position = 0;\n            }\n            else {\n \
    \               position++;\n            }\n        }\n        if (position >=\
    \ 0) {\n            vowelCount += vowels[position];\n        }\n        return\
    \ vowelCount;", "        var vowels = new HashSet<string>{\"a\", \"e\", \"i\"\
    , \"o\", \"u\"};\n        var count = s.Length;\n        var vowelCount = 0;\n\
    \        for (var i = 0; i != count; ++i) {\n            vowelCount += vowels.Contains(s[i])\
    \ ? 1 : 0;\n        }\n        return vowelCount;", "        long vowels = 0;\n\
    \        foreach (char c in s) {\n            switch (c) {\n                case\
    \ 'a': vowels += 1;\n                case 'e': vowels += 1;\n                case\
    \ 'i': vowels += 1;\n                case 'o': vowels += 1;\n                case\
    \ 'u': vowels += 1;\n                case 'y': vowels += 1;\n                default:\
    \ break;\n            }\n        }\n        return vowels;", "        string vowels\
    \ = \"aeiou\";\n        long vowels_count = 0;\n        foreach (char c in s)\
    \ {\n            if (vowels.Contains(c)) {\n                vowels_count++;\n\
    \            }\n        }\n        return vowels_count;", "        long count\
    \ = 0;\n        for (int i = 0; i < s.Length; i++) {\n            if (s.Substring(i,\
    \ 1).Equals(\"a\")) count++;\n            if (s.Substring(i, 1).Equals(\"e\"))\
    \ count++;\n            if (s.Substring(i, 1).Equals(\"i\")) count++;\n      \
    \      if (s.Substring(i, 1).Equals(\"o\")) count++;\n            if (s.Substring(i,\
    \ 1).Equals(\"u\")) count++;\n        }\n        return count;", "        long\
    \ vowelcount = 0;\n        foreach (char c in s.ToCharArray()) {\n           \
    \ switch (c) {\n                case 'a':\n                case 'e':\n       \
    \         case 'i':\n                case 'o':\n                case 'u':\n  \
    \                  vowelcount++;\n                    break;\n               \
    \ case 'y':\n                    if (s.Length > 0 && s[s.Length - 1] == 'y') vowelcount++;\n\
    \                    break;\n                default:\n                    break;\n\
    \            }\n        }\n        return vowelcount;", "        if (s == null)\n\
    \            return 0L;\n        int i, count = 0;\n        char[] vowels = new\
    \ char[] { 'a', 'e', 'i', 'o', 'u' };\n        for (i = s.Length - 1; i >= 0;\
    \ i--) {\n            if (vowels.Contains(s[i])) {\n                count++;\n\
    \            }\n        }\n        return count;", "        string vowels = \"\
    aeiouAEIOU\";\n        long[] arr = new long[s.Length];\n        int count = 0;\n\
    \        for (int i = 0; i < s.Length; i++) {\n            if (vowels.IndexOf(s[i])\
    \ >= 0) {\n                count += 1;\n            }\n        }\n        long\
    \ vowelsCount = arr.Where(x => x > 0L).Sum();\n        return vowelsCount;", " \
    \       long vowelCount = 0;\n        long vowelCount2 = 0;\n        for (int\
    \ i = 0; i < s.Length; i++) {\n            if (s.ToUpper() == \"Y\") {\n     \
    \           vowelCount2 = vowelCount2 + 1;\n            } else {\n           \
    \     if (s.ToUpper() == \"A\" || s.ToUpper() == \"E\" || s.ToUpper() == \"I\"\
    \ || s.ToUpper() == \"O\" || s.ToUpper() == \"U\") {\n                    vowelCount\
    \ = vowelCount + 1;\n                }\n            }\n        }\n        return\
    \ vowelCount + vowelCount2;", "        long vowelsCount = 0;\n        foreach\
    \ (char c in s) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n                vowelsCount++;\n            }\n        }\n \
    \       return vowelsCount;", "        // TODO: Write the solution\n        long\
    \ vowels = 0;\n        for (int i = 0; i < s.Length; i++)\n        {\n       \
    \     switch (s[i]) {\n                case 'a':\n                case 'e':\n\
    \                case 'i':\n                case 'o':\n                case 'u':\n\
    \                    vowels++;\n                    break;\n                default:\n\
    \                    break;\n            }\n        }\n        return vowels;",
  "        var vowels = \"aeiouAEIOU\";\n        var count = 0;\n        var c = 0;\n\
    \        var length = s.Length;\n        var endOfWord = (int)Math.Floor(length\
    \ / 2);\n\n        // The length of the string is even.\n        if (length ==\
    \ 0)\n            return 0;\n\n        for (int i = 0; i < length; i++) {\n  \
    \          // If the character at the current position is a vowel.\n         \
    \   if (vowels.Contains(s[i]))\n                count++;\n\n            // If\
    \ the character at the current position is the end of word.\n            if (i\
    \ == endOfWord)\n                c++;\n\n            // If the character at the\
    \ current position is not a vowel.\n            else\n                c = 0;\n\
    \        }\n\n        return count;", "        StringBuilder sb = new StringBuilder();\n\
    \        foreach (char c in s) {\n            switch (c) {\n                case\
    \ 'a':\n                case 'e':\n                case 'i':\n               \
    \ case 'o':\n                case 'u':\n                    sb.Append(c);\n  \
    \                  break;\n                default:\n                    // Assume\
    \ it's a consonant\n                    break;\n            }\n        }\n   \
    \     char[] charArray = sb.ToString().ToCharArray();\n        Debug.Assert(charArray.Length\
    \ >= s.Length, \"The given string should contain at least one vowel\");\n    \
    \    long vowels = 0;\n        for (int i = 0; i < charArray.Length; i++) {\n\
    \            if (charArray[i] == 'y') {\n                // Only count 'y' when\
    \ it's at the end of the word\n                if (i == s.Length - 1) {\n    \
    \                vowels++;\n                }\n            }\n        }\n    \
    \    return vowels;", "        if (String.IsNullOrEmpty(s)) return 0L;\n     \
    \   var vowels = \"aeiouAEIOU\".ToCharArray();\n        var vowels_count = s.ToLower().ToCharArray()\n\
    \            .Where(c => vowels.Contains(c)).Count();\n        return vowels_count\
    \ + (vowels.Length == s.Length ?\n            vowels_count + 1 : 0);", "     \
    \   long count = 0;\n        foreach (char c in s.ToLower()) {\n            if\
    \ (char.IsLetter(c)) {\n                count += IsVowel(c);\n            }\n\
    \        }\n        return count;", "        long vowels = 0;\n        foreach\
    \ (char c in s) {\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o'\
    \ && c != 'u')\n                vowels++;\n        }\n        return vowels;",
  "        long vowels = 0, total = 0;\n        for (int i = 0; i < s.Length; i++)\
    \ {\n            char c = s[i];\n            if (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n                vowels++;\n            }\n \
    \       }\n        total = vowels;\n        return total;", "        long result\
    \ = 0;\n        foreach (char c in s.ToLower()) {\n            switch (c) {\n\
    \                case 'a':\n                case 'e':\n                case 'i':\n\
    \                case 'o':\n                case 'u':\n                    result++;\n\
    \                    break;\n            }\n        }\n        return result;",
  "        long vowelCount = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c))\
    \ {\n                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u') {\n                    vowelCount++;\n                }\n            }\n\
    \        }\n        return vowelCount;", "        long vowels = 0;\n        foreach\
    \ (char c in s) {\n            switch (c) {\n                case 'a':\n     \
    \           case 'e':\n                case 'i':\n                case 'o':\n\
    \                case 'u':\n                    vowels++;\n                  \
    \  break;\n            }\n        }\n        return vowels;", "        var vowels\
    \ = new HashSet<char>(new[]{'a', 'e', 'i', 'o', 'u', 'y'}); \n        return s.Count(i\
    \ => vowels.Contains(i));", "        long vowelCount = 0;\n        foreach (char\
    \ c in s) {\n            vowelCount += vowelCount(c);\n        }\n        return\
    \ vowelCount;", "        HashSet<string> vowels = new HashSet<string>();\n   \
    \     foreach (char c in s.ToCharArray()) {\n            if (vowels.Contains(c))\
    \ {\n                vowels.Remove(c);\n            }\n            vowels.Add(\"\
    aeiou\".Contains(c) ? \"y\" : c);\n        }\n        return vowels.Count;", " \
    \       long vowels = 0;\n        int n = s.Length;\n        char[] c = new char[n];\n\
    \        c[0] = s[0];\n        for(int i = 1; i < n; i++){\n            c[i] =\
    \ s[i];\n            if(c[i] == 'y' && c[i-1] != 'a'){\n                vowels++;\n\
    \            }\n        }\n        return vowels;", "        long count = 0L;\n\
    \        // Only count vowels when the word has an even number of characters\n\
    \        for (int i = 0; i < s.Length; i += 2) {\n            string vowels =\
    \ \"aeiou\";\n            char c = s[i];\n            if (vowels.Contains(c))\
    \ {\n                count++;\n            }\n        }\n        return count;",
  "        long vowels_cnt = 0;\n        foreach (var ch in s) {\n            if (ch\
    \ == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u')\n              \
    \  vowels_cnt += 1;\n        }\n        return vowels_cnt;", "        long count\
    \ = 0L;\n        int index = s.LastIndexOf('e');\n        if (index > 0) {\n \
    \           string lastVowel = s.Substring(index);\n            if (\"aeiou\"\
    .Contains(lastVowel)) {\n                count += 1;\n            }\n        }\n\
    \        foreach (char c in s) {\n            count = count + vowelCount(c);\n\
    \        }\n        return count;", "        long count = 0;\n        foreach\
    \ (char c in s.ToCharArray()) {\n            if ((c == 'a') || (c == 'e') || (c\
    \ == 'i') || (c == 'o') || (c == 'u'))\n                count++;\n        }\n\
    \        return count;", "        long vowels = 0;\n        foreach (var c in\
    \ s) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n                vowels += 1;\n            }\n        }\n        return vowels;",
  "        long vowelsCount = 0;\n        int vowelsCountIndex = 0;\n        for (int\
    \ i = 0; i < s.Length; i++) {\n            switch (s[i]) {\n            case 'a':\n\
    \            case 'e':\n            case 'i':\n            case 'o':\n       \
    \     case 'u':\n                vowelsCount++;\n                vowelsCountIndex\
    \ = i;\n                break;\n            }\n        }\n        return vowelsCount;",
  "        long[] vowels = new long[26];\n        vowels[a] = 1;\n        vowels[e]\
    \ = 1;\n        vowels[i] = 1;\n        vowels[o] = 1;\n        vowels[u] = 1;\n\
    \        vowels[y] = 1;\n        long vowelsCount = 0;\n        for (int i = 0;\
    \ i < s.Length; i++)\n        {\n            char c = s[i];\n            switch\
    \ (c)\n            {\n                case 'a':\n                    vowels[c]++;\n\
    \                    break;\n                case 'e':\n                    vowels[c]++;\n\
    \                    break;\n                case 'i':\n                    vowels[c]++;\n\
    \                    break;\n                case 'o':\n                    vowels[c]++;\n\
    \                    break;\n                case 'u':\n                    vowels[c]++;\n\
    \                    break;\n                case 'y':\n                    if\
    \ (i == s.Length - 1) vowels[c]++;\n                    else\n               \
    \     {\n                        if (vowels[s[i + 1]]++) vowelsCount++;\n    \
    \                }\n                    break;\n            }\n        }\n   \
    \     return vowelsCount;", "        long vowelcount = 0;\n        foreach (char\
    \ c in s) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n                vowelcount += 1;\n            }\n        }\n    \
    \    return vowelcount;", "        var vowels= new HashSet<char> {'a', 'e', 'i',\
    \ 'o', 'u'};\n        var vowels_count = s.Count(c => vowels.Contains(c));\n \
    \       return vowels_count;", "        // TODO\n        long vowels_count = 0;\n\
    \        for (int i = 0; i < s.Length; i++) {\n            char c = s[i];\n  \
    \          if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n \
    \               vowels_count += 1;\n            }\n        }\n        return vowels_count;",
  "        long sum = 0;\n        foreach (char c in s) {\n            switch (c)\
    \ {\n                case 'a':\n                case 'e':\n                case\
    \ 'i':\n                case 'o':\n                case 'u':\n               \
    \     sum++;\n                    break;\n                case 'y':\n        \
    \            sum += 2;\n                    break;\n                default:\n\
    \                    break;\n            }\n        }\n        return sum;", " \
    \       long vowels = 0;\n        bool isVowel = Char.IsUpper(s[0]);\n       \
    \ for (int i = 1; i < s.Length; i++) {\n            bool isNextVowel = Char.IsUpper(s[i])\
    \ && isVowel;\n            if (!isNextVowel) isVowel = Char.IsUpper(s[i + 1]);\n\
    \            vowels += isNextVowel ? 2 : 1;\n        }\n        return vowels;",
  "        long vowels = 0;\n        foreach (char c in s) {\n            switch (c)\
    \ {\n            case 'a':\n            case 'e':\n            case 'i':\n   \
    \         case 'o':\n            case 'u':\n                break;\n         \
    \   default:\n                if (Char.IsLetterOrDigit(c)) {\n               \
    \     if (Char.IsLower(c)) {\n                        vowels++;\n            \
    \        }\n                } else {\n                    vowels++;\n        \
    \        }\n            }\n        }\n        return vowels;", "        long vowels\
    \ = 0;\n        foreach (char c in s) {\n            switch (c) {\n          \
    \      case 'a':\n                case 'e':\n                case 'i':\n     \
    \           case 'o':\n                case 'u':\n                    vowels++;\n\
    \                    break;\n            }\n        }\n        return vowels;",
  "        long vowels = 0;\n        foreach (char c in s)\n        {\n          \
    \  if ('a' <= c && c <= 'z')\n            {\n                vowels += 1;\n  \
    \          }\n            if ('y' < c && c < 'z')\n            {\n           \
    \     vowels += 1;\n            }\n        }\n        return vowels;", "     \
    \   long vowels_count = 0;\n        foreach (char c in s) {\n            vowels_count\
    \ += VowelsCount(c);\n        }\n        return vowels_count;", "        string\
    \ vowels = \"aeiouy\";\n        bool flag = false;\n        long vowelCount =\
    \ 0;\n        for (int i = 0; i < s.Length; i++) {\n            flag = false;\n\
    \            for (int j = 0; j < vowels.Length; j++) {\n                if (s[i]\
    \ != vowels[j]) {\n                    flag = true;\n                    break;\n\
    \                }\n            }\n            if (!flag) {\n                vowelCount++;\n\
    \            }\n        }\n        return vowelCount;", "        long count =\
    \ 0;\n        foreach (char c in s) {\n            if (char.IsUpper(c) || char.IsLower(c))\
    \ {\n                count += 2;\n            }\n            else if (char.IsLetter(c))\
    \ {\n                if (c == 'y') {\n                    count += 1;\n      \
    \          }\n            }\n            else {\n                count += 0;\n\
    \            }\n        }\n        return count;", "        // your code\n   \
    \     var vowels = new[] {'a', 'e', 'i', 'o', 'u'};\n        var count = s.Where(x\
    \ => vowels.Contains(x.ToLower())).Count();\n        return count;", "       \
    \ int count = 0;\n        foreach (char c in s) {\n            if (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n\
    \            }\n        }\n        return count;", "        int counter = 0;\n\
    \        for(int i = 0; i < s.Length; ++i) {\n            counter += VowelCount(s[i]);\n\
    \        }\n        return counter;", "        long count = 1;\n        for (int\
    \ i = 0; i < s.Length; i++) {\n            char c = s[i];\n            if (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n\
    \            }\n            if (c == 'y') {\n                if (i == s.Length\
    \ - 1) {\n                    count++;\n                }\n            }\n   \
    \     }\n        return count;", "        var vowels = new[] { 'a', 'e', 'i',\
    \ 'o', 'u' };\n        var vowelsCount = new Dictionary<string, long>();\n   \
    \     for (int i = 0; i < s.Length; i++) {\n            foreach (var vowel in\
    \ vowels) {\n                if (vowelsCount.ContainsKey(s.Substring(i).ToLower()))\
    \ {\n                    vowelsCount[s.Substring(i).ToLower()] += 1;\n       \
    \             break;\n                }\n            }\n        }\n        return\
    \ vowelsCount.Values.Sum();", "        long count = 0;\n        char[] vowels\
    \ = \"aeiouAEIOU\".ToCharArray();\n        foreach (char c in s)\n           \
    \ if (vowels.Contains(c))\n                count += 1;\n        return count;",
  "        bool b1 = s.Contains(\"a\");\n        bool b2 = s.Contains(\"e\");\n  \
    \      bool b3 = s.Contains(\"i\");\n        bool b4 = s.Contains(\"o\");\n  \
    \      bool b5 = s.Contains(\"u\");\n        bool b6 = s.Contains(\"y\");\n\n\
    \        return (b1 || b2 || b3 || b4 || b5 || b6 ? 6 : 0) + (!b1 && !b2 && !b3\
    \ && !b4 && !b5 && !b6 ? 0 : 1);", "        int vowels = 0;\n        foreach (char\
    \ c in s) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n                vowels++;\n            }\n        }\n        return\
    \ vowels;", "        int i;\n        var list = new List<char>();\n        foreach\
    \ (var letter in s)\n        {\n            if (letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u')\n            {\n       \
    \         list.Add(letter);\n            }\n            else\n            {\n\
    \                if (list.All(l => l != 'a'))\n                {\n           \
    \         list.Remove(list[list.Count - 1]);\n                }\n            }\n\
    \        }\n        return list.Count;", "        long vowels = 0;\n        foreach\
    \ (char c in s) {\n            switch (c) {\n                case 'a':\n     \
    \           case 'e':\n                case 'i':\n                case 'o':\n\
    \                case 'u':\n                    vowels++;\n                  \
    \  break;\n                case 'y':\n                    vowels++;\n        \
    \            break;\n                default:\n                    break;\n  \
    \          }\n        }\n        return vowels;", "        var vowels = new List<char>(new[]\
    \ {'a','e','i','o','u'});\n        var words = s.Split(' ');\n        var count\
    \ = 0;\n        foreach (var word in words)\n        {\n            foreach (var\
    \ letter in word)\n            {\n                if (!vowels.Contains(letter))\n\
    \                {\n                    break;\n                }\n          \
    \      count++;\n            }\n        }\n        return count;", "        int\
    \ vowelCount = 0;\n        foreach (char c in s) {\n            if (char.IsLetterOrDigit(c)\
    \ || (c == 'o') || (c == 'i') || (c == 'u'))\n                vowelCount++;\n\
    \        }\n        return vowelCount;", "        var vowels = new List<char>\
    \ { 'a', 'e', 'i', 'o', 'u' };\n        long vowelCount = 0;\n\n        // iterate\
    \ through all vowels, adding 1 to vowelCount if \n        // the letter exists\
    \ in the string.\n        foreach (char vowel in vowels) {\n            if (s.IndexOf(vowel)\
    \ > -1) {\n                vowelCount++;\n            }\n        }\n\n       \
    \ return vowelCount;", "        int vowels = 0;\n        foreach(var letter in\
    \ s) {\n            switch (letter) {\n                case 'a':\n           \
    \     case 'e':\n                case 'i':\n                case 'o':\n      \
    \          case 'u':\n                    vowels++;\n                    break;\n\
    \                case 'y':\n                    vowels += (s.IndexOf(letter) ==\
    \ (s.Length - 1)) ? 1 : 0;\n                    break;\n            }\n      \
    \  }\n        return vowels;", "        if (s == null) return 0;\n        long\
    \ vowels_count = 0;\n        foreach (char c in s) {\n            if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n                vowels_count\
    \ += 1;\n        }\n        return vowels_count;", "        var vowels = \"aeiou\"\
    ;\n        var count = s.ToCharArray().Count(i => vowels.Contains(i));\n     \
    \   if (s.Length % 2 != 0) count++;\n        return count;", '        return VowelsCount(s,
    0);', "        long count = 2;\n        bool vowel = false;\n        for (int\
    \ i = 0; i < s.Length; i++) {\n            string ch = s[i];\n            vowel\
    \ = vowel || (ch.Equals(\"A\"));\n            vowel = vowel || (ch.Equals(\"E\"\
    ));\n            vowel = vowel || (ch.Equals(\"I\"));\n            vowel = vowel\
    \ || (ch.Equals(\"O\"));\n            vowel = vowel || (ch.Equals(\"U\"));\n \
    \           if (vowel && s.Length > 1 && (i == 0 || s[i - 1] != 'y')) {\n    \
    \            count++;\n            }\n        }\n        return count;", "   \
    \     return s.Where(c => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u').Count();", "        long vowelsCount = 0;\n\n        if (s == null || s.Trim()\
    \ == \"\") {\n            return vowelsCount;\n        }\n\n        foreach(var\
    \ ch in s.ToCharArray()) {\n            if (Char.IsLetter(ch)) {\n           \
    \     vowelsCount += (Char.ToLower(ch).Equals('a') || Char.ToLower(ch).Equals('e')\
    \ || Char.ToLower(ch).Equals('i') || Char.ToLower(ch).Equals('o') || Char.ToLower(ch).Equals('u'));\n\
    \            }\n        }\n\n        return vowelsCount;", "        HashSet<char>\
    \ vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u', 'y' };\n        long vowelsCount\
    \ = 0;\n        foreach (char c in s) {\n            vowelsCount += vowels.Contains(c);\n\
    \        }\n        return vowelsCount;", "        char[] arr = s.ToCharArray();\n\
    \        Array.Sort(arr);\n\n        long vowelCount = 0;\n\n        for (int\
    \ i = 0; i < arr.Length; ++i) {\n            char c = arr[i];\n            switch\
    \ (c) {\n                case 'a': case 'e': case 'i': case 'o': case 'u':\n \
    \                   ++vowelCount;\n                    break;\n            }\n\
    \        }\n        return vowelCount;", "        if (String.IsNullOrEmpty(s))\n\
    \            return 0;\n        var vowels = new List<char>();\n        foreach\
    \ (char c in s)\n            if ((char.IsLetter(c) && c == 'a') || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')\n                vowels.Add(c);\n        return\
    \ (long) vowels.Count();", "        string vowels = \"aeiouAEIOU\";\n        return\
    \ s.Replace(\"y\",string.Empty).Replace(\"Y\",string.Empty)\n                \
    \   .Count(vowels.Contains);", "        var vowelsCount = new HashSet<char>(new[]\
    \ {'a', 'e', 'i', 'o', 'u'}, StringComparer.OrdinalIgnoreCase);\n        int vowelsCount2\
    \ = 0;\n        foreach (char c in s) {\n            if (vowelsCount.Contains(c))\
    \ {\n                vowelsCount++;\n            }\n        }\n        if (s.Length\
    \ > 0) {\n            vowelsCount = vowelsCount + s.Length;\n        }\n     \
    \   return vowelsCount;", "        var vowels = \"aeiouAEIOU\";\n        var result\
    \ = 0;\n        var index = 0;\n        while (index < s.Length) {\n         \
    \   if (vowels.Contains(s[index])) {\n                result += 1;\n         \
    \   }\n            index++;\n        }\n        return result;", "        Dictionary<string,\
    \ int> vowels = new Dictionary<string, int>();\n        // Add vowels to the dictionary\n\
    \        vowels.Add(\"a\", 1);\n        vowels.Add(\"e\", 1);\n        vowels.Add(\"\
    i\", 1);\n        vowels.Add(\"o\", 1);\n        vowels.Add(\"u\", 1);\n     \
    \   vowels.Add(\"y\", 1); // add y as a vowel\n        long vowelsCount = 0;\n\
    \n        for (int i = 0; i < (s.Length - 1); i++) {\n            string currentChar\
    \ = s.Substring(0, i);\n            string nextChar = s.Substring(i + 1, 1);\n\
    \            if (vowels.ContainsKey(currentChar)) {\n                vowels[currentChar]\
    \ = vowels[currentChar] + 1;\n                if (vowels[currentChar] == 1) {\n\
    \                    vowelsCount = vowelsCount + 1;\n                }\n     \
    \       } else if (vowels.ContainsKey(nextChar)) {\n                vowels[nextChar]\
    \ = vowels[nextChar] + 1;\n                if (vowels[nextChar] == 1) {\n    \
    \                vowelsCount = vowelsCount + 1;\n                }\n         \
    \   }\n        }\n\n        return vowelsCount;", "        char[] vowels = new[]\
    \ {'a', 'e', 'i', 'o', 'u'};\n        if (s == null || s.Length < 1) return 0L;\n\
    \        var vowelCount = 0;\n        var endIndex = s.Length - 1;\n        for\
    \ (int i = 0; i < s.Length; i++) {\n            if ((endIndex < 0 || vowels[s[i]]\
    \ != 'y') && vowels[s[i]] == vowels[s[i + 1]]) {\n                vowelCount++;\n\
    \            }\n        }\n        return vowelCount;", "        long vowelsCount\
    \ = 0;\n        int vowelsCounter = 0;\n        char[] vowels = new char[] { 'a',\
    \ 'e', 'i', 'o', 'u' };\n\n        // Use a StringBuilder instead of String because\
    \ it's faster and it uses lesser memory.\n        StringBuilder vowelsStringBuilder\
    \ = new StringBuilder();\n\n        // Using a for loop is faster than foreach\
    \ loop.\n        for (int i = 0; i < s.Length; i++) {\n            if (vowels.Contains(s[i]))\
    \ {\n                vowelsStringBuilder.Append(s[i]);\n                vowelsCounter++;\n\
    \            }\n        }\n\n        if (vowelsStringBuilder.Length > 0) {\n \
    \           vowelsCount = vowelsCount + vowelsCounter;\n        }\n\n        return\
    \ vowelsCount;", "        // Your code here\n        return s.Where(c => c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y').Count() + 1;",
  "        long vowels = 0;\n        foreach (char ch in s) {\n            vowels\
    \ += ((ch == 'a') || (ch == 'e') || (ch == 'i') || (ch == 'o') || (ch == 'u'));\n\
    \        }\n        return vowels;", "        return s.Select((x, i) => new {\
    \ x = x, i = i })\n            .Where(x => x.x.ToUpperInvariant()[0] == 'A' ||\n\
    \                         x.x.ToUpperInvariant()[0] == 'E' ||\n              \
    \           x.x.ToUpperInvariant()[0] == 'I' ||\n                         x.x.ToUpperInvariant()[0]\
    \ == 'O' ||\n                         x.x.ToUpperInvariant()[0] == 'U')\n    \
    \        .Select(x => x.i)\n            .Sum();", "        // Fill in the code\
    \ here\n        var vowels = \"aeiou\";\n        var vowelsCount = s.Count(v =>\
    \ vowels.Contains(v));\n        return vowelsCount;", "        var vowels = new\
    \ List<char> { 'a', 'e', 'i', 'o', 'u' };\n        char[] vowelChars = s.ToCharArray();\n\
    \        var vowelsCount = vowelChars.Where(c => vowels.Contains(c)).Count();\n\
    \        return vowelsCount;", "        long count = 0; // number of vowels\n\
    \        for (int i = 0; i < s.Length; i++) {\n            char c = s[i];\n  \
    \          if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n \
    \               count++;\n            }\n        }\n        return count;", " \
    \       long vowelCount = 0;\n        foreach (char c in s.ToCharArray()) {\n\
    \            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c\
    \ == 'y') {\n                vowelCount++;\n            }\n        }\n       \
    \ return vowelCount;", "        long[] count = new long[26];\n        for (int\
    \ i = 0; i < s.Length; i++) {\n            char c = s[i];\n            if (c ==\
    \ 'a') count[0]++;\n            else if (c == 'e') count[1]++;\n            else\
    \ if (c == 'i') count[2]++;\n            else if (c == 'o') count[3]++;\n    \
    \        else if (c == 'u') count[4]++;\n            else if (c == 'y' && i ==\
    \ s.Length - 1) count[5]++;\n            else count[6]++;\n        }\n       \
    \ return count[5];", "        string vowels = \"aeiou\";\n        string y = \"\
    \";\n        int count = 0;\n        foreach (char ch in s) {\n            if\
    \ (vowels.IndexOf(ch) > 0) {\n                count++;\n            }\n      \
    \      if ((s.IndexOf(y) > s.Length - 1)) {\n                break;\n        \
    \    }\n            y = ch + y;\n        }\n        return (long)count;", "  \
    \      long vowels = 0;\n        foreach (char c in s) {\n            vowels +=\
    \ (long)Char.GetUnicodeCategory(c);\n        }\n        return (vowels);", " \
    \       long vowelsCount = 0;\n        for (int i = 0; i != s.Length; i++) {\n\
    \            // If it is a vowel\n            if (s[i] == 'a' || s[i] == 'e' ||\
    \ s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n                // Add 1 to the\
    \ vowels count\n                vowelsCount++;\n            }\n        }\n   \
    \     return vowelsCount;", "        HashSet<char> vowels = new HashSet<char>\
    \ { \n        'a', 'e', 'i', 'o', 'u' };\n        HashSet<char> vowels_not_end\
    \ = new HashSet<char> { \n        'y', 'e', 'i', 'o', 'u' };\n        long vowels_count\
    \ = 0L;\n\n        for (int i = 0; i < s.Length; i++) {\n            char c =\
    \ s[i];\n            if (vowels.Contains(c)) {\n                vowels_count++;\n\
    \            }\n\n            // Only count a vowel at the end of a word\n   \
    \         else if (i == s.Length - 1 && vowels_not_end.Contains(c)) {\n      \
    \          vowels_count++;\n            }\n        }\n\n        return vowels_count;",
  "        var vowels = new char[] { 'a', 'e', 'i', 'o', 'u', 'y' };\n        var\
    \ vowels_count = s.Count(c => vowels.Contains(c));\n        return (long)vowels_count;",
  "        // Implement this function\n        long vowels = 0;\n        string vowel\
    \ = \"a\";\n        foreach (char c in s) {\n            if (vowel.Equals(c))\
    \ {\n                vowels++;\n            }\n            else if (vowel.Equals(\"\
    y\") && s.Length > 1) {\n                vowels++;\n            }\n          \
    \  vowel = c;\n        }\n        return vowels;", "        HashSet<char> hs =\
    \ new HashSet<char>();\n        foreach (char c in s) {\n            hs.Add(c);\n\
    \        }\n        long vowelsCount = hs.Count(c => c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u');\n        return vowelsCount;", "        long\
    \ count = 0;\n        foreach (char ch in s)\n            if (char.IsLetter(ch))\n\
    \                count++;\n\n        // Return number of vowels\n        return\
    \ count;", "        string vowels = \"aeiou\";\n        long count = 0;\n    \
    \    for (int i = 0; i < s.Length; i++) {\n            string c = s[i];\n    \
    \        if (vowels.Contains(c)) {\n                count++;\n            }\n\
    \        }\n        return count;", "        Dictionary<char, long> count = new\
    \ Dictionary<char, long>();\n        // We need to check if there are any chars\
    \ other than those we consider\n        // to be vowels, to avoid raising an exception\
    \ for such chars.\n        foreach (char c in s.Where(x => x != 'a' && x != 'e'\
    \ && x != 'i' && x != 'o' && x != 'u'))\n            if (count.ContainsKey(c))\
    \ {\n                count[c]++;\n            } else {\n                count.Add(c,\
    \ 1L);\n            }\n\n        long vowelCount = 0;\n        foreach (long k\
    \ in count.Values)\n            if (k > 0)\n                vowelCount++;\n\n\
    \        return vowelCount;", "        var vowels = new char[] { 'a', 'e', 'i',\
    \ 'o', 'u' };\n        var count = 0;\n        var c = 0;\n        foreach (char\
    \ c in s) {\n            if (vowels.Contains(c)) {\n                count++;\n\
    \            }\n        }\n        if (s.Length > 0) {\n            if (s[s.Length\
    \ - 1] == 'y') {\n                count++;\n            }\n        }\n       \
    \ return count;", "        long vowels = 0;\n        if (s != null && s.Length\
    \ > 0) {\n            for (int i = 0; i < s.Length; ++i) {\n                if\
    \ (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n\
    \                    vowels += 1;\n                }\n            }\n        }\n\
    \        return vowels;", "        long vowelCount = 0;\n        foreach (char\
    \ c in s) {\n            switch (c) {\n                case 'a':\n           \
    \     case 'e':\n                case 'i':\n                case 'o':\n      \
    \          case 'u':\n                    break;\n                default:\n \
    \                   if ((c != 'Y') && (c != 'YA') && (c != 'YY') && (c != 'YU'))\
    \ {\n                        vowelCount += 1;\n                    }\n       \
    \     }\n        }\n        return vowelCount;", "        int count = 0;\n   \
    \     for (int i = 0; i < s.Length; i++)\n        {\n            if (s[i] == 'a'\
    \ || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y' &&\
    \ (i + 1) < s.Length)\n            {\n                count++;\n            }\n\
    \        }\n        return count;", "        int vowels = 1;\n        if (string.IsNullOrEmpty(s))\
    \ return 0;\n        char[] chars = s.ToCharArray();\n        for (int i = 0;\
    \ i < s.Length; i++) {\n            bool isVowel = false;\n            foreach\
    \ (char c in chars) {\n                if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n                    isVowel = true;\n             \
    \       break;\n                }\n            }\n            if (!isVowel) vowels++;\n\
    \        }\n        return vowels;", "        long vowels = 0;\n        long vowels_length\
    \ = 0;\n        foreach(char c in s) {\n            if (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n                vowels++;\n           \
    \ }\n        }\n        vowels_length = s.Length;\n        vowels = vowels / vowels_length;\n\
    \        vowels = (long)Math.Ceiling((double)vowels);\n        return vowels;"]
stop_tokens:
- "\n    }\n"
