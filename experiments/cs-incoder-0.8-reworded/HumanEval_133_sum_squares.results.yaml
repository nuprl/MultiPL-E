language: cs
name: HumanEval_133_sum_squares
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (var item in lst) {\n            sum += Math.Pow(item,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9fhlvn0q.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        if\
    \ (lst.Count < 1) throw new ArgumentException(\"list must have at least one element\"\
    );\n        long sum = 0;\n        foreach (float f in lst) sum += f * f;\n  \
    \      return Math.Ceiling(sum);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphg1img8r.cs(26,34): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmphg1img8r.cs(27,21): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Ceiling(decimal)'' and ''Math.Ceiling(double)''

    '
  timestamp: 1659976918
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        var\
    \ sum = lst.Sum(x => (long)Math.Pow((double)x, 2));\n        return sum;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9d1cab1ca11c4711b318cd275fbee4f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9d1cab1ca11c4711b318cd275fbee4f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst\n            .Select(x => Math.Round(Math.Pow(x, 2), 0, MidpointRounding.ToEven))\n\
    \            .Sum();\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqp9crblw.cs(24,16): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ ret = 0;\n        foreach (float f in lst)\n            ret += Math.Pow(Math.Ceiling(f),\
    \ 2);\n        return ret;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuy9aql7a.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        List<float>\
    \ listOfValues = lst;\n        float total = 0;\n        long result = long.MinValue;\n\
    \        for (int i = 0; i < listOfValues.Count; i++) {\n            total +=\
    \ (listOfValues[i] * listOfValues[i]);\n            if (total > result) {\n  \
    \              result = total;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf3krc2nl.cs(30,26): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976918
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        double\
    \ sum = 0;\n        foreach (float n in lst) {\n            sum += Math.Pow(n,\
    \ 2);\n        }\n        return Convert.ToInt64(Math.Ceiling(Math.Sqrt(sum)));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e4adbd5a2a004fccb2abf5625f680965>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e4adbd5a2a004fccb2abf5625f680965>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ total = 0;\n        foreach (float number in lst) {\n            total += Math.Sqrt(Math.Pow(number,\
    \ 2));\n        }\n        return total;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprahu2f1n.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        //\
    \ TODO: Write the code.\n        List<float> squares = lst.Select(x => Math.Pow(x,\
    \ 2)).ToList();\n        squares.Sort();\n        long sum = 0;\n        for (int\
    \ i = 0; i < squares.Count; i++)\n            sum += squares[i];\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvdpz3qlm.cs(25,31): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<double>''
    to ''System.Collections.Generic.List<float>''

    /tmp/tmpvdpz3qlm.cs(29,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst.Sum(n => Math.Pow(n, 2));\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp35a09exr.cs(24,16): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        int\
    \ n = lst.Count;\n        long sum = 0;\n        foreach (float f in lst) {\n\
    \            sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1idwu1p8.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976918
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        float\
    \ max = lst.Max();\n        float min = lst.Min();\n        double sumSquares\
    \ = 0;\n        foreach(float x in lst) {\n            double rounded = Math.Ceiling(x\
    \ * 100.0f);\n            double roundedUp = rounded + 1;\n            sumSquares\
    \ += Math.Pow(roundedUp, 2);\n        }\n        return (long) Math.Sqrt(sumSquares\
    \ / lst.Count);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9f6aa0f98b75445781302a876a44e979>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9f6aa0f98b75445781302a876a44e979>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        var\
    \ res = new List<float>();\n        foreach (var x in lst) {\n            var\
    \ y = Math.Ceiling(x * x); // round each element to the upper int(Ceiling) first\n\
    \            res.Add(y);\n        }\n        long result = 0.0;\n        foreach\
    \ (var item in res) {\n            result += item;\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcw0d3gpg.cs(27,21): error CS1503: Argument 1: cannot convert from ''double''
    to ''float''

    /tmp/tmpcw0d3gpg.cs(29,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpcw0d3gpg.cs(31,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        var\
    \ result = 0.0;\n        foreach(var i in lst) {\n            result = result\
    \ + Math.Pow(i, 2);\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpig5sxo0c.cs(28,16): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        int\
    \ n = lst.Count;\n        if (n == 0)\n            return 0;\n        else if\
    \ (n == 1)\n            return lst[0] * lst[0];\n        else\n            return\
    \ SumSquares(Lists.Sublist(lst, 0, n - 1)) + SumSquares(Lists.Sublist(lst,n-1,n));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz5e9bzg3.cs(28,20): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpz5e9bzg3.cs(30,31): error CS0103: The name ''Lists'' does not exist in
    the current context

    /tmp/tmpz5e9bzg3.cs(30,74): error CS0103: The name ''Lists'' does not exist in
    the current context

    '
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ res = 0;\n        foreach (float f in lst) {\n            res = res + Math.Pow(f,\
    \ 2);\n        }\n        return Math.Round(res, 0);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgi54sxy0.cs(26,19): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpgi54sxy0.cs(28,21): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Round(decimal, int)'' and ''Math.Round(double, int)''

    '
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        if\
    \ (lst.Count == 0) return 0;\n        long sum = 0;\n        long l = 0;\n   \
    \     foreach (var x in lst) {\n            l += Math.Ceiling(x * x);\n      \
    \  }\n        sum += l * (l - 1) / 2;\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvq8zvjmo.cs(28,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        var\
    \ max = 0;\n        var min = float.PositiveInfinity;\n        foreach (var item\
    \ in lst) {\n            max = Math.Max(max, item);\n            min = Math.Min(min,\
    \ item);\n        }\n        var num = 0;\n        foreach (var item in lst) {\n\
    \            num += 1f;\n            var t = Math.Round(Math.Sqrt((Math.Abs(item)\
    \ - min) * (Math.Abs(item) - min)), 0);\n            num += t;\n        }\n  \
    \      return num;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkfrd7u0k.cs(27,19): error CS0266: Cannot implicitly convert type ''float''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpkfrd7u0k.cs(32,13): error CS0266: Cannot implicitly convert type ''float''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpkfrd7u0k.cs(34,13): error CS0266: Cannot implicitly convert type ''double''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        var\
    \ result = lst.Sum(x => x * x);\n        return RoundUpToInt(result);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpholwzxq3.cs(25,16): error CS0103: The name ''RoundUpToInt'' does not exist
    in the current context

    '
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst.Aggregate(new SumOfSquares(), (a, b) => a.Add(b), a => a.Result);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgg7zotea.cs(24,34): error CS0246: The type or namespace name ''SumOfSquares''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Find max value of list\n        var max = lst.Max();\n        // Find min value\
    \ of list\n        var min = lst.Min();\n        // Find Ceiling value of max\
    \ and min of list\n        var ceil = Math.Ceiling(max);\n        var floor =\
    \ Math.Floor(min);\n        // Loop through the list with integer division\n \
    \       var sum = 0;\n        foreach (var f in lst) {\n            // Round each\
    \ element of the list to the upper int(Ceiling) first\n            var rounded\
    \ = Math.Ceiling(f);\n            sum += (rounded - ceil) * (rounded - ceil);\n\
    \        }\n        // Return sum of squares of the list\n        return (long)Math.Sqrt(sum);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_u7ygjpn.cs(36,13): error CS0266: Cannot implicitly convert type ''double''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        long sum2 = 0;\n        double sum3 = 0.0;\n        double\
    \ sum4 = 0.0;\n        double sum5 = 0.0;\n        double sum6 = 0.0;\n      \
    \  double sum7 = 0.0;\n        double sum8 = 0.0;\n        double sum9 = 0.0;\n\
    \        double sum10 = 0.0;\n        double sum11 = 0.0;\n        double sum12\
    \ = 0.0;\n        double sum13 = 0.0;\n        double sum14 = 0.0;\n        double\
    \ sum15 = 0.0;\n        double sum16 = 0.0;\n        double sum17 = 0.0;\n   \
    \     double sum18 = 0.0;\n        double sum19 = 0.0;\n        double sum20 =\
    \ 0.0;\n        double sum21 = 0.0;\n        double sum22 = 0.0;\n        double\
    \ sum23 = 0.0;\n        double sum24 = 0.0;\n        double sum25 = 0.0;\n   \
    \     double sum26 = 0.0;\n        double sum27 = 0.0;\n        double sum28 =\
    \ 0.0;\n        double sum29 = 0.0;\n        double sum30 = 0.0;\n        double\
    \ sum31 = 0.0;\n        double sum32 = 0.0;\n        double sum33 = 0.0;\n   \
    \     double sum34 = 0.0;\n        double sum35 = 0.0;\n        double sum36 =\
    \ 0.0;\n        double sum37 = 0.0;\n        double sum38 = 0.0;\n        double\
    \ sum39 = 0.0;\n        double sum40 = 0.0;\n        double sum41 = 0.0;\n   \
    \     double sum42 = 0.0;\n        double sum43 = 0.0;\n        double sum44 =\
    \ 0.0;\n        double sum45 = 0.0;\n        double sum46 = 0.0;\n        double\
    \ sum47 = 0.0;\n        double sum48 = 0.0;\n        double sum49 = 0.0;\n   \
    \     double sum50 = 0.0;\n        double sum51 = 0.0;\n        double sum52 =\
    \ 0.0;\n        double sum53 = 0.0;\n        double sum54 = 0.0;\n        double\
    \ sum55 = 0.0;\n        double sum56 = 0.0;\n        double sum57 = 0.0;\n   \
    \     double sum58 = 0.0;\n        double sum59 = 0.0;\n        double sum60 =\
    \ 0.0;\n        double sum61 = 0.0;\n        double sum62 = 0.0;\n        double\
    \ sum63 = 0.0;\n        double sum64 = 0.0;\n        double sum65 = 0.0;\n   \
    \     double sum66 = 0.0;\n        double sum67 = 0.0;\n        double sum68 =\
    \ 0.0;\n        double sum69 = 0.0;\n        double sum70 = 0.0;\n        double\
    \ sum71 = 0.0;\n        double sum72 = \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2_r7uad8.cs(95,23): error CS1525: Invalid expression term ''}''

    /tmp/tmp2_r7uad8.cs(95,23): error CS1002: ; expected

    '
  timestamp: 1659976917
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        if\
    \ (lst.Count <= 0) return 0;\n        long ret = 0;\n        foreach (var item\
    \ in lst) {\n            ret = Math.Sqrt(item) + ret;\n        }\n        return\
    \ ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_2bo2d2z.cs(27,19): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        long i = 0;\n        foreach (float f in lst) {\n        \
    \    sum += (long)Math.Pow(f, 2);\n            i += 1;\n        }\n        return\
    \ (long)Math.Ceiling(sum / i);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv4smp37j.cs(30,27): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Ceiling(decimal)'' and ''Math.Ceiling(double)''

    '
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        Debug.Assert(lst\
    \ != null && lst.Any(), \"Invalid list\");\n        long res = 0;\n        foreach\
    \ (var f in lst.Select(x => Math.Round(x, 5)))\n            res += f * f;\n  \
    \      return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdrhbhfdk.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float i in lst) {\n            sum += Math.Pow(i,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo8fu3oi5.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976918
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        HashSet<float>\
    \ hash = new HashSet<float>();\n        long sum = 0;\n        foreach (float\
    \ f in lst) {\n            long square = (long)Math.Pow(f, 2);\n            hash.Add(square);\n\
    \            sum += square;\n        }\n\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69007a15e3324a6999f2594b196898b0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69007a15e3324a6999f2594b196898b0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976919
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        if\
    \ (lst?.Count <= 0) return 0L;\n        var n = lst.Count;\n        var result\
    \ = new List<float>(new float[n]);\n        foreach (var x in lst)\n         \
    \   Math.Round(x, (int)Math.Ceiling(Math.Log10(x)), MidpointRounding.AwayFromZero,\
    \ out var rounding);\n        result.Add(0.0f);\n        for (int i = 0; i < n;\
    \ i++) {\n            result[i] = result[i] + result[i + 1] * result[i + 1];\n\
    \        }\n        return result.Sum();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv079ppqa.cs(28,18): error CS1501: No overload for method ''Round'' takes
    4 arguments

    /tmp/tmpv079ppqa.cs(33,16): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (var item in lst) {\n            sum += Math.Pow(item,\
    \ 2);\n        }\n        return Math.Ceiling(sum);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpixtmw__n.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpixtmw__n.cs(28,21): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Ceiling(decimal)'' and ''Math.Ceiling(double)''

    '
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ ret = 0;\n        foreach (float x in lst) {\n            double rounded = Math.Round(Math.Pow(x,\
    \ 2.0), MidpointRounding.ToEven);\n            double d = rounded * rounded;\n\
    \            if (d >= 1.0) {\n                ret = ret + 1L;\n            } else\
    \ {\n                ret = ret + d;\n            }\n        }\n        return\
    \ ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprhuc9bn1.cs(31,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        var\
    \ res =0;\n        var res = lst.Sum(x => Math.Abs(x));\n        foreach (var\
    \ item in lst) {\n            item =Math.Ceiling(item);\n            res += Math.Pow(item,\
    \ 2);\n        }\n        return res;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqppabpyv.cs(25,13): error CS0128: A local variable or function named ''res''
    is already defined in this scope

    /tmp/tmpqppabpyv.cs(27,13): error CS1656: Cannot assign to ''item'' because it
    is a ''foreach iteration variable''

    /tmp/tmpqppabpyv.cs(28,13): error CS0266: Cannot implicitly convert type ''double''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ ans = 1;\n        foreach (float num in lst) {\n            ans *= num;\n  \
    \      }\n        ans *= Math.Pow(ans, 2);\n        return ans;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvrwp25h9.cs(26,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpvrwp25h9.cs(28,9): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        var\
    \ sum = 0;\n        foreach (var i in lst)\n            sum += Convert.ToInt64(Math.Sqrt(Convert.ToDouble(i)));\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwb46jr73.cs(26,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            float r = Math.Ceiling(f);\n\
    \            sum += r * r;\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpag4m1gui.cs(26,23): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpag4m1gui.cs(27,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst.Sum(x => x * x);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxfnearqt.cs(24,16): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Solution:\n        // The sum of the squares is given by\n        // \n    \
    \    //     S(q) = (sum_i(-q) + sum_i(-q i)) / (2 * q)\n        // \n        //\
    \ where q is each number in the list.\n        // To find q in O(1), we first\
    \ find sum_i(-q), which is\n        //\n        //     sum_i(q) = -sum_i(-q i)\
    \ = 2 * sum_i(-q i)\n        // \n        // Then, q is simply the number that\
    \ yields the greatest sum_i.\n        // \n        // We want to find the greatest\
    \ sum_i, so we use the following\n        // algorithm for finding a maximal number\
    \ in O(n):\n        // \n        //     while sum_i(q) \u2265 0, \n        //\
    \         q = floor (sum_i(q) / 2)\n        //     \n        //     return q\n\
    \        //\n        // We can find the greatest sum_i in O(n log n) by sorting\
    \ the\n        // list, and then using the following O(log n) algorithm:\n   \
    \     // \n        //     1. Set q to the first element in the list\n        //\
    \     2. While q is not last:\n        //         2.1. Set q to the next element\
    \ in the list.\n        //         2.2. Set min_i to min(sum_i(q), min_i)\n  \
    \      //         2.3. Set sum_i to sum_i(q) + min_i\n        //         2.4.\
    \ If sum_i \u2265 max_i, then set max_i to sum_i\n        //     \n        //\
    \     3. Return max_i\n\n        Debug.Assert(lst.Count > 0);\n        Debug.Assert(lst.Count\
    \ <= 100000);\n\n        float sumOfSquares = 0;\n        int minSum = int.MaxValue;\n\
    \        long maxSum = 0;\n        float currentSum = 0;\n        float lastSum\
    \ = 0;\n        float lastSumOfSquares = 0;\n        int index = 0;\n\n      \
    \  for (int i = 0; i < lst.Count; i++) {\n            // Since we can't round\
    \ directly to int in C#, we have to\n            // round the float value to int.MaxValue\
    \ first and then\n            // round it to int. The result is that we round\
    \ the\n            // float value to int.MaxValue and then round it to int\n \
    \           // using the following formula:\n            //\n            //  \
    \   int(ceiling(num * 2) / 2)\n            //\n            float num = (float)Math.Ceiling(lst[i]\
    \ * 2);\n            currentSum = lastSum + num;\n            lastSum = currentSum;\n\
    \            lastSumOfSquares = lastSumOfSquares + num * num;\n            sumOfSquares\
    \ = sumOfSquares + currentSum;\n            minSum = Math.Min(\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx8oqacrr.cs(81,31): error CS1026: ) expected

    /tmp/tmpx8oqacrr.cs(81,31): error CS1002: ; expected

    /tmp/tmpx8oqacrr.cs(83,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpx8oqacrr.cs(98,2): error CS1513: } expected

    '
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sqSum = 0;\n        long n = lst.Count;\n        \n        for (int i = 0; i\
    \ < n; i++) {\n            sqSum += ((int)Math.Ceiling(lst[i] * lst[i])) * lst[i];\n\
    \        }\n        return sqSum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpllm5ohg4.cs(28,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        if\
    \ (lst.Count < 1) throw new ArgumentException(\"lst must not contain less than\
    \ one element\");\n        var sumOfSquares = lst.Sum((x) => x * x);\n       \
    \ // This line is for rounding the result to the nearest integer.\n        //\
    \ In case the result of the calculation is a decimal number,\n        // the result\
    \ is rounded to the next smaller integer.\n        return Math.Ceiling(sumOfSquares);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdof1hevu.cs(29,16): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        var\
    \ d = lst.Sum();\n        List<float> lst2 = new List<float>();\n        foreach\
    \ (var x in lst) {\n            var x2 = x * (float)Math.Sqrt(x);\n          \
    \  lst2.Add(x2);\n        }\n        foreach (var x in lst2)\n            d +=\
    \ (int)Math.Ceiling(x);\n        return d;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0x9n8ln3.cs(32,16): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float x in lst) {\n            long y = Math.Ceiling(x\
    \ * x);\n            sum += y;\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8j8anavu.cs(26,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        List<float>\
    \ newLst = new List<float>();\n        foreach (float f in lst) {\n          \
    \  newLst.Add(Math.Round(Math.Sqrt(f), 3));\n        }\n        return newLst.Sum();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpisz6w1jr.cs(26,24): error CS1503: Argument 1: cannot convert from ''double''
    to ''float''

    /tmp/tmpisz6w1jr.cs(28,16): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        var\
    \ result = 0;\n        foreach (var f in lst) {\n            result = Math.Round(Math.Ceiling(f),\
    \ 5) + Math.Round(Math.Ceiling(f), 5) + result;\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4y5gmus6.cs(26,22): error CS0266: Cannot implicitly convert type ''double''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ ret = 0;\n        if (lst.Count > 0)\n            for (int i = 0; i < lst.Count;\
    \ ++i)\n                ret += Math.Pow(lst[i], 2);\n        return ret;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq8qm0xhx.cs(27,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ res = 0;\n        foreach(var num in lst)\n            res += Math.Pow(num,\
    \ 2);\n        Console.WriteLine(\"SumSquares(\" + lst.ToString() + \") --> \"\
    \ + res.ToString());\n        return Math.Ceiling(res);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt5nc2z3d.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpt5nc2z3d.cs(28,21): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Ceiling(decimal)'' and ''Math.Ceiling(double)''

    '
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        if\
    \ (lst.Count == 0) return 0;\n        // round each element in the list to the\
    \ upper int(Ceiling) first.\n        var x = lst\n            .Select(x=>Math.Ceiling(x)).ToList();\n\
    \        // sum of squares.\n        return x.Sum(x=>x*x);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps89d1cyh.cs(29,16): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976919
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        if\
    \ (lst.Count == 0)\n            return 0;\n        long result = 0;\n        float\
    \ sum = 0;\n        float num = 0;\n        int index = 0;\n        foreach (float\
    \ el in lst) {\n            sum += el;\n            if (index == 0)\n        \
    \        num = el;\n            if (index % 2 == 0)\n                num *= el;\n\
    \            index++;\n        }\n        result = sum * sum;\n        result\
    \ = Math.Ceiling(result);\n        if (num != 0.0f)\n            result -= (result\
    \ - sum * num) / num;\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgbqwbjhe.cs(38,18): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpgbqwbjhe.cs(39,23): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Ceiling(decimal)'' and ''Math.Ceiling(double)''

    /tmp/tmpgbqwbjhe.cs(41,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        long max = 0;\n        foreach (float f in lst) {\n      \
    \      sum += Math.Pow(f, 2);\n            if (sum > max) max = sum;\n       \
    \ }\n        return max;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpowto1kwx.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976919
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        Debug.Assert(lst.Count>0);\n\
    \        long l = 0;\n        foreach(var f in lst.Select(x => Math.Ceiling(f)*Math.Ceiling(f)))\n\
    \            l+=Math.Sqrt(f);\n        return l;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpagynt85t.cs(26,55): error CS0103: The name ''f'' does not exist in the
    current context

    /tmp/tmpagynt85t.cs(26,71): error CS0103: The name ''f'' does not exist in the
    current context

    '
  timestamp: 1659976919
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Find largest number\n        float largest = lst.Max();\n        // Find all\
    \ numbers in range up to the largest number\n        float range = lst.FindIndex(item\
    \ => item <= largest);\n        long sum = 0;\n        for (int i = 0; i < range;\
    \ i++) {\n            sum += Math.Pow(lst.ElementAtOrDefault(i), 2);\n       \
    \ }\n        return sum;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6dt1bw3d.cs(30,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976919
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst)\n            sum += Math.Pow(f, 2);\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzfjtmbc3.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976919
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        float\
    \ a = lst.Sum();\n        float b = lst.Sum();\n        float c = 0;\n       \
    \ foreach (float num in lst) {\n            c += Math.Pow(num, 2);\n         \
    \   b = Math.Max(b, num);\n        }\n        return System.Math.Round(Math.Sqrt(b),\
    \ System.MidpointRounding.ToEven).ToInt64() - System.Math.Round(Math.Sqrt(a),\
    \ System.MidpointRounding.ToEven).ToInt64();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvnsyd29v.cs(28,13): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpvnsyd29v.cs(31,80): error CS1061: ''double'' does not contain a definition
    for ''ToInt64'' and no accessible extension method ''ToInt64'' accepting a first
    argument of type ''double'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpvnsyd29v.cs(31,156): error CS1061: ''double'' does not contain a definition
    for ''ToInt64'' and no accessible extension method ''ToInt64'' accepting a first
    argument of type ''double'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659976919
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (var i in lst) {\n            sum += Math.Pow(i, 2);\n\
    \        }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprnpuyatq.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976919
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        var\
    \ result = new List<float>();\n        foreach (float f in lst) {\n          \
    \  float fc = Math.Ceiling(f);\n            result.Add(fc * fc);\n        }\n\
    \        return result.Sum();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxce6d9mv.cs(26,24): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpxce6d9mv.cs(29,16): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976919
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        Func<float,\
    \ float> f = (x) => { return (float)Math.Ceiling(x); };\n        Func<float, float>\
    \ f1 = (x) => { return (float)Math.Floor(x); };\n        Func<float, float> f2\
    \ = (x) => { return (float)Math.Round(x); };\n        Func<float, float> f3 =\
    \ (x) => { return (float)x; };\n        long res = 0;\n        foreach (float\
    \ f in lst) {\n            res = res + Math.Pow(f, 2);\n        }\n        float\
    \ roundTo = (float)Math.Ceiling(res);\n        float roundFloorTo = (float)Math.Floor(res);\n\
    \        float roundRoundTo = (float)Math.Round(res);\n        float roundTo4\
    \ = roundTo * 4;\n        float roundFloorTo4 = roundFloorTo * 4;\n        float\
    \ roundRoundTo4 = roundRoundTo * 4;\n        res = res + roundTo4 + roundFloorTo4\
    \ + roundRoundTo4;\n        res = res + Math.Pow(roundTo, 2);\n        res = res\
    \ + Math.Pow(roundFloorTo, 2);\n        res = res + Math.Pow(roundRoundTo, 2);\n\
    \        res = res + Math.Pow(roundTo4, 2);\n        res = res + Math.Pow(roundFloorTo4,\
    \ 2);\n        res = res + Math.Pow(roundRoundTo4, 2);\n        res = res + Math.Pow(Math.Pow(roundTo,\
    \ 2), 2);\n        res = res + Math.Pow(Math.Pow(roundFloorTo, 2), 2);\n     \
    \   res = res + Math.Pow(Math.Pow(roundRoundTo, 2), 2);\n        res = res + Math.Pow(Math.Pow(roundTo4,\
    \ 2), 2);\n        res = res + Math.Pow(Math.Pow(roundFloorTo4, 2), 2);\n    \
    \    res = res + Math.Pow(Math.Pow(roundRoundTo4, 2), 2);\n        res = res +\
    \ Math.Pow(Math.Pow(Math.Pow(roundTo, 2), 2), 2);\n        res = res + Math.Pow(Math.Pow(Math.Pow(roundFloorTo,\
    \ 2), 2), 2);\n        res = res + Math.Pow(Math.Pow(Math.Pow(roundRoundTo, 2),\
    \ 2), 2);\n        res = res + Math.Pow(Math.Pow(Math.Pow(roundTo4, 2), 2), 2);\n\
    \        res = res + Math.Pow(Math.Pow(Math.Pow(roundFloorTo4, 2), 2), 2);\n \
    \       res = res + Math.Pow(Math.Pow(Math.Pow(roundRoundTo4, 2), 2), 2);\n  \
    \      res = res + Math.Pow(Math.Pow(Math.Pow(Math.Pow(roundTo, 2), 2), 2), 2);\n\
    \        return res;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ru24wo5.cs(29,24): error CS0136: A local or parameter named ''f'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp0ru24wo5.cs(30,19): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp0ru24wo5.cs(32,37): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Ceiling(decimal)'' and ''Math.Ceiling(double)''

    /tmp/tmp0ru24wo5.cs(33,42): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Floor(decimal)'' and ''Math.Floor(double)''

    /tmp/tmp0ru24wo5.cs(34,42): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Round(decimal)'' and ''Math.Round(double)''

    /tmp/tmp0ru24wo5.cs(38,15): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp0ru24wo5.cs(39,15): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp0ru24wo5.cs(40,15): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp0ru24wo5.cs(41,15): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp0ru24wo5.cs(42,15): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp0ru24wo5.cs(43,15): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp0ru24wo5.cs(44,15): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp0ru24wo5.cs(45,15): error CS0266: Cannot implicitly convert'
  timestamp: 1659976919
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkm1bebrk.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976919
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0L;\n        double d = double.PositiveInfinity;\n        foreach (float\
    \ f in lst) {\n            d = Math.Max(d, f);\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return Math.Round(sum, 0);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb07d8_3b.cs(28,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpb07d8_3b.cs(30,21): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Round(decimal, int)'' and ''Math.Round(double, int)''

    '
  timestamp: 1659976919
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach(var value in lst)\n            sum += Math.Pow(value,\
    \ 2);\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7c8ytcpc.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976919
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        double\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return (long)(sum);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d892277fae7c4ba48eed50b49f6dfb92>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d892277fae7c4ba48eed50b49f6dfb92>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976919
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (var item in lst) {\n            sum += item * item;\n\
    \        }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5nr47hpf.cs(26,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976919
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        var\
    \ result = lst.Sum(x => Math.Pow(x, 2.0)).ToString(CultureInfo.InvariantCulture);\n\
    \        return long.Parse(result);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn8_w89zx.cs(24,62): error CS0103: The name ''CultureInfo'' does not exist
    in the current context

    '
  timestamp: 1659976919
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        //\
    \ use list slicing\n        List<float> nums = lst.Take(Math.Ceiling(lst.Count)).ToList();\n\
    \        Debug.Assert(nums.Count >= 1);\n        float sum = 0;\n        foreach(float\
    \ n in nums) {\n            sum += n * n;\n        }\n        // round the result\
    \ to nearest integer\n        return (int)Math.Round(sum);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph1pala9h.cs(25,42): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Ceiling(decimal)'' and ''Math.Ceiling(double)''

    '
  timestamp: 1659976919
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        List<float> sorted = lst.OrderByDescending(x => x).ToList();\n\
    \        for (int i = 0; i < sorted.Count; i++) {\n            sum += sorted[i]\
    \ * sorted[i];\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4zldzak5.cs(27,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976919
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        float sum = lst.Sum(Math.Abs);\n        float total = lst.Sum(delegate(float\
    \ x) { return x * x; });\n        sum = sum / total;\n        if (lst.Count >\
    \ 0) {\n            double max = 0;\n            double min = 0;\n           \
    \ foreach (float f in lst)\n            {\n                max = Math.Max(max,\
    \ f);\n                min = Math.Min(min, f);\n            }\n            float\
    \ floor = max + min;\n            float ceil = max + 0.1f;\n            while\
    \ (ceil < lst.Max())\n            {\n                float f = ceil;\n       \
    \         ceil += 1.0f;\n                lst.Add(f);\n                sum = sum\
    \ + f * f;\n            }\n            while (floor > lst.Min())\n           \
    \ {\n                float f = floor;\n                floor = f + 1.0f;\n   \
    \             lst.Add(f);\n                sum = sum + f * f;\n            }\n\
    \        }\n        sum = sum * sum;\n        return sum;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdlbq30kr.cs(25,15): error CS0128: A local variable or function named ''sum''
    is already defined in this scope

    /tmp/tmpdlbq30kr.cs(27,15): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpdlbq30kr.cs(36,27): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpdlbq30kr.cs(37,26): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpdlbq30kr.cs(43,23): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpdlbq30kr.cs(50,23): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976919
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Create result list to be returned.\n        List<float> results = new List<float>();\n\
    \        foreach (float number in lst) {\n            // Round number to the ceiling.\n\
    \            int ceiling = (int)Math.Ceiling(number);\n            results.Add(Math.Sqrt(number));\n\
    \        }\n\n        return (long)results.Sum();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpew47xe03.cs(29,25): error CS1503: Argument 1: cannot convert from ''double''
    to ''float''

    '
  timestamp: 1659976919
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ result = 0;\n        foreach (var item in lst) {\n            result += Math.Pow(item,\
    \ 2);\n        }\n        return Math.Ceiling(result);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa3qp2edw.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpa3qp2edw.cs(28,21): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Ceiling(decimal)'' and ''Math.Ceiling(double)''

    '
  timestamp: 1659976919
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        var\
    \ sum = lst.Sum(x => Math.Pow(x, 2));\n        foreach (float f in lst) {\n  \
    \          sum = sum + Math.Pow(f, 2);\n        }\n        return Convert.ToInt64(Math.Ceiling(sum));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9e5081b0b8b54c45a6e588e9eec5caa5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9e5081b0b8b54c45a6e588e9eec5caa5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976919
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        if\
    \ (lst.Count == 0) return 0;\n        double sum = 0;\n        foreach (var x\
    \ in lst) {\n            sum += Math.Pow(Math.Round(x), 2);\n        }\n     \
    \   return Convert.ToInt64(Math.Ceiling(sum));\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6098b382076e4d628b45e38cda788eb2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6098b382076e4d628b45e38cda788eb2>:0 \n"
  stdout: ''
  timestamp: 1659976919
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        foreach\
    \ (var item in lst) {\n            item += (float)Math.Round((float)Math.Ceiling(item),\
    \ 8);\n        }\n\n        var sum = 0;\n        foreach (var item in lst) {\n\
    \            sum += item * item;\n        }\n\n        return sum;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzaxeyihw.cs(25,13): error CS1656: Cannot assign to ''item'' because it
    is a ''foreach iteration variable''

    /tmp/tmpzaxeyihw.cs(30,13): error CS0266: Cannot implicitly convert type ''float''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976919
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ result = 0;\n        if (lst.Count() > 0) {\n            foreach (float item\
    \ in lst) {\n                result += Math.Pow(item, 2);\n            }\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqhjd6bkl.cs(27,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976919
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        if\
    \ (lst.Count < 1) {\n            return 0L;\n        }\n        long ret = 0L;\n\
    \        for (float f : lst) {\n            ret += Math.Pow(f, 2.0L);\n      \
    \  }\n        return ret;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzah76_4m.cs(28,22): error CS1002: ; expected

    /tmp/tmpzah76_4m.cs(28,22): error CS1525: Invalid expression term '':''

    /tmp/tmpzah76_4m.cs(28,22): error CS1001: Identifier expected

    /tmp/tmpzah76_4m.cs(29,35): error CS1003: Syntax error, '','' expected

    '
  timestamp: 1659976919
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Convert every float to a double before casting\n        double[] doubles = lst.ConvertAll(x\
    \ => (double)x);\n        long sum = 0;\n        foreach(double x in doubles)\
    \ {\n            sum += Math.Pow(x,2);\n        }\n        return sum;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptx9c7mfv.cs(25,28): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<double>''
    to ''double[]''

    /tmp/tmptx9c7mfv.cs(28,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976919
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            float temp = f;\n\
    \            temp = (float)(Math.Ceiling(temp * temp));\n            sum += Convert.ToInt64(temp\
    \ * temp);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3f97fbfa1ecb42fcb9ed296afecdc276>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3f97fbfa1ecb42fcb9ed296afecdc276>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976920
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dca8e081e58c4eb097642d7cf93430e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dca8e081e58c4eb097642d7cf93430e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        int\
    \ n = lst.Count;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n\
    \            sum += Math.Pow(lst[i], 2);\n        }\n        sum = Math.Sqrt(sum);\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp79c91xls.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp79c91xls.cs(29,15): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976920
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (var item in lst) {\n            var roundedItem =\
    \ (int)Math.Ceiling(item);\n            sum += roundedItem * roundedItem;\n  \
    \      }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976920
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ ret = 0;\n        foreach (float v in lst) {\n            ret = ret + (long)Math.Ceiling(v\
    \ * v);\n        }\n        return ret;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <015ffdac1c88475c89fbefd67903ff82>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <015ffdac1c88475c89fbefd67903ff82>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Find the ceil of the first item\n        float ceiling = lst.First();\n    \
    \    lst.Remove(ceiling);\n\n        // Compute sum\n        long sum = 0;\n \
    \       foreach (float f in lst)\n            sum += Math.Pow(f, 2);\n\n     \
    \   // Round the sum and return\n        return Math.Ceiling(sum);\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9txyg8g1.cs(31,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp9txyg8g1.cs(34,21): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Ceiling(decimal)'' and ''Math.Ceiling(double)''

    '
  timestamp: 1659976920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ ret = 0;\n        long sum = 0;\n        foreach (float f in lst) {\n      \
    \      long i = Math.Ceiling(f);\n            sum += i;\n            ret += i*i;\n\
    \        }\n        return ret > 0 ? sum : -sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5suh05q7.cs(27,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        Debug.Assert(lst.Count\
    \ > 0);\n        long sum = 0;\n        foreach (var f in lst) {\n           \
    \ sum += f * f;\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp47k6e3ei.cs(27,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst)\n            sum += Math.Sqrt(f);\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqx_y_oeo.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkm1bebrk.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976919
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        int n = lst.Count;\n        // Find the mean value\n     \
    \   double mean = lst.Average();\n        double sumOfSquares = 0;\n        int\
    \ count = 0;\n        // Find the squares of the mean\n        foreach (float\
    \ f in lst)\n        {\n            double newSumOfSquares = Math.Pow(f, 2);\n\
    \            sumOfSquares += newSumOfSquares;\n            count++;\n        }\n\
    \        // Find the squares of the difference\n        foreach (float f in lst)\n\
    \        {\n            double newSumOfSquares = Math.Pow(f - mean, 2);\n    \
    \        sumOfSquares += newSumOfSquares;\n            count++;\n        }\n \
    \       // Find the average\n        double average = sumOfSquares / n;\n    \
    \    double averageWithRoundingUp = Convert.ToDouble(average);\n        double\
    \ averageWithRoundingUpUp = Convert.ToDouble(Math.Ceiling(averageWithRoundingUp));\n\
    \n        // Compute the sum of the squared difference\n        sum += (long)(averageWithRoundingUp\
    \ - average);\n        sum += (long)(averageWithRoundingUpUp - average);\n   \
    \     return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e2df735f6e8841c0a80fca36126dd155>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e2df735f6e8841c0a80fca36126dd155>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        if\
    \ (lst.Count == 0)\n            return 0;\n\n        float sum = 0;\n        foreach\
    \ (float f in lst)\n            sum += Math.Pow(f, 2);\n        float rounded\
    \ = Math.Ceiling(sum);\n        long result = (long)rounded;\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptu_tocs2.cs(29,13): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmptu_tocs2.cs(30,25): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkm1bebrk.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976919
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        var\
    \ result = new List<float>();\n        foreach (var item in lst) {\n         \
    \   var i = Math.Ceiling((float)item);\n            result.Add(Math.Pow(item,\
    \ 2));\n        }\n        return result.Sum();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpipcatc93.cs(27,24): error CS1503: Argument 1: cannot convert from ''double''
    to ''float''

    /tmp/tmpipcatc93.cs(29,16): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        int\
    \ i = lst.Count - 1;\n        long sum = 0;\n        while (i >= 0) {\n      \
    \      sum += lst[i] * lst[i];\n            i--;\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbb4akpoi.cs(27,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ result = 0;\n        float temp;\n        int index = lst.IndexOf(Math.Ceiling(float.MinValue));\n\
    \        for (float number : lst) {\n            temp = Math.Round(number, index);\n\
    \            result += temp * temp;\n            index++;\n        }\n       \
    \ return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvaxx_nfa.cs(27,27): error CS1002: ; expected

    /tmp/tmpvaxx_nfa.cs(27,27): error CS1525: Invalid expression term '':''

    /tmp/tmpvaxx_nfa.cs(27,27): error CS1001: Identifier expected

    '
  timestamp: 1659976919
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        Debug.Assert(lst.Any());\n\
    \        long sum = 0;\n        foreach (float f in lst) {\n            long square\
    \ = (long)Math.Round(f*f, 0);\n            sum += square;\n        }\n       \
    \ return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ca6d3d57332b4bf5b869342eb7170c11>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ca6d3d57332b4bf5b869342eb7170c11>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        if\
    \ (lst.Count < 1) {\n            return 0;\n        }\n\n        long sum = 0;\n\
    \        foreach (float item in lst) {\n            sum += Math.Pow(item, 2);\n\
    \        }\n\n        long roundedSum = RoundToInt(sum);\n        foreach (float\
    \ item in lst) {\n            sum += Math.Pow(item, 2);\n        }\n        return\
    \ roundedSum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7qfdmeq5.cs(30,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp7qfdmeq5.cs(33,27): error CS0103: The name ''RoundToInt'' does not exist
    in the current context

    /tmp/tmp7qfdmeq5.cs(35,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976920
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        if\
    \ (lst.Count == 0) { return 0; }\n        long sum = 0;\n        foreach (float\
    \ f in lst) {\n            sum += (long)(Math.Ceiling(f*f));\n        }\n    \
    \    return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d8f5655ff1814ec3b54cd808076bd313>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d8f5655ff1814ec3b54cd808076bd313>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        if\
    \ (lst.Count == 0) return 0;\n        var result = lst.Aggregate(new List<float>(lst.Count),\
    \ (x, y) => new List<float>() { x, y, (float)Math.Ceiling(y) }, (x, y) => x +\
    \ y);\n        foreach (var item in result) item = item == 0 ? Math.Abs(item)\
    \ : item;\n        return result.Sum();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq_kucfuh.cs(25,94): error CS1950: The best overloaded Add method ''List<float>.Add(float)''
    for the collection initializer has some invalid arguments

    /tmp/tmpq_kucfuh.cs(25,94): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<float>''
    to ''float''

    '
  timestamp: 1659976920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        if\
    \ (lst.Count <= 0)\n            return 0;\n        var result = new List<float>(lst.Count);\n\
    \        for (int i = 0; i < lst.Count; i++)\n            result[i] = Math.Ceiling(lst[i]\
    \ * lst[i]);\n        return result.Sum();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4ns4z3wh.cs(28,25): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp4ns4z3wh.cs(29,16): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        //\
    \ write your code here\n        return lst.Sum(x=>Math.Round(x*x,0));\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7nf6jaad.cs(25,16): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ ret = 0;\n        foreach (float f in lst) {\n            ret += Math.Sqrt(f);\n\
    \        }\n        return ret;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp83puulp_.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Convert to IEnumerable so you can use Linq on it.\n        var lstAsI = lst.AsEnumerable();\n\
    \n        // Convert each element to int and round it to closest int Ceiling.\n\
    \        var lstAsIInts = lstAsI.Select(n => Math.Ceiling(n)).ToArray();\n\n \
    \       // Find sum of the squares using the IEnumerable extension.\n        var\
    \ sum = lstAsIInts.Sum();\n\n        // Return the sum.\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo1y7xlfu.cs(34,16): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach(var v in lst)\n            sum += Math.Sqrt(v);\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7i5y9wo0.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float x in lst) {\n            sum += Math.Pow(x,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcs77_b90.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Your code here\n        int len = lst.Count;\n        List<float> res = new\
    \ List<float>();\n        long sum = 0;\n        int i = 0;\n        float x;\n\
    \        for (int j = 0; j < len; j++) {\n            x = lst[j];\n          \
    \  if (x < 0) continue;\n            sum += x * x;\n        }\n        float prev;\n\
    \        long last = 0;\n        while (i != len) {\n            x = lst[i];\n\
    \            if (x < 0) {\n                res.Add(0.0f);\n                sum\
    \ += 0.0f;\n                last = x;\n                continue;\n           \
    \ }\n            if (i == 0) {\n                res.Add(x);\n                last\
    \ = x;\n                continue;\n            }\n            if (i == 1) {\n\
    \                prev = x;\n                last = x;\n                res.Add(0);\n\
    \                sum += prev * prev;\n                continue;\n            }\n\
    \            if (last != prev) {\n                res.Add(last - prev);\n    \
    \            sum += last * last;\n                last = prev;\n            }\n\
    \            prev = x;\n            last = x;\n            i++;\n        }\n \
    \       return sum;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphsgcfien.cs(33,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmphsgcfien.cs(41,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmphsgcfien.cs(42,24): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmphsgcfien.cs(47,24): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmphsgcfien.cs(52,24): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmphsgcfien.cs(54,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmphsgcfien.cs(60,24): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmphsgcfien.cs(63,20): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmphsgcfien.cs(57,25): error CS0165: Use of unassigned local variable ''prev''

    '
  timestamp: 1659976920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        double\
    \ sum = lst.Sum();\n        return ((long)Math.Ceiling(sum * sum)) + lst.Sum(f\
    \ => (long)Math.Ceiling((long)f));\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphnkft790.cs(25,74): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Ceiling(decimal)'' and ''Math.Ceiling(double)''

    '
  timestamp: 1659976920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        double\
    \ maxNum = float.MaxValue;\n        double minNum = float.MinValue;\n        double\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum = sum + Math.Pow(f,\
    \ 2);\n            max = Math.Ceiling(f);\n            min = Math.Floor(f);\n\
    \            if (max > maxNum) {\n                maxNum = max;\n            }\n\
    \            if (min < minNum) {\n                minNum = min;\n            }\n\
    \        }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_6y2axub.cs(29,13): error CS0103: The name ''max'' does not exist in the
    current context

    /tmp/tmp_6y2axub.cs(30,13): error CS0103: The name ''min'' does not exist in the
    current context

    /tmp/tmp_6y2axub.cs(31,17): error CS0103: The name ''max'' does not exist in the
    current context

    /tmp/tmp_6y2axub.cs(32,26): error CS0103: The name ''max'' does not exist in the
    current context

    /tmp/tmp_6y2axub.cs(34,17): error CS0103: The name ''min'' does not exist in the
    current context

    /tmp/tmp_6y2axub.cs(35,26): error CS0103: The name ''min'' does not exist in the
    current context

    /tmp/tmp_6y2axub.cs(38,16): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        return\
    \ Lst(lst).Sum((x) => x * x);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp_hpsl7z.cs(24,16): error CS0103: The name ''Lst'' does not exist in the
    current context

    '
  timestamp: 1659976920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        if\
    \ (lst.Count == 0) {\n            return 0;\n        }\n\n        long result\
    \ = 0.0;\n        List<float> numbers = lst.OrderBy(i => Math.Ceiling(i)).ToList();\n\
    \n        foreach (float number in numbers) {\n            result += Math.Pow(number,\
    \ 2);\n        }\n\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0sy504mw.cs(28,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp0sy504mw.cs(32,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkm1bebrk.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976919
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkm1bebrk.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976919
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float item in lst)\n            sum += Math.Pow(item,\
    \ 2);\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn3jbj4d4.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        var\
    \ total = lst.Sum(x => Math.Pow(x, 2));\n        var roundedTotal = total.RoundToInt(0,\
    \ MidpointRounding.AwayFromZero);\n        return roundedTotal;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvxlvjy1x.cs(25,34): error CS1061: ''double'' does not contain a definition
    for ''RoundToInt'' and no accessible extension method ''RoundToInt'' accepting
    a first argument of type ''double'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659976920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        float round;\n        foreach (var f in lst) {\n         \
    \   round = Math.Ceiling(f);\n            sum += Math.Pow(round, 2);\n       \
    \ }\n        return sum;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeplm1iar.cs(27,21): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpeplm1iar.cs(28,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        var\
    \ lst2 = new List<float>();\n        foreach(var x in lst) lst2.Add(Math.Ceiling(x));\n\
    \        return lst2.Sum(x => x * x);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk0qkx6yv.cs(25,40): error CS1503: Argument 1: cannot convert from ''double''
    to ''float''

    /tmp/tmpk0qkx6yv.cs(26,16): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        IEnumerable<float>\
    \ values = lst.OrderByDescending(f => (double)Math.Ceiling(f));\n        IEnumerable<float>\
    \ squaredValues = values.Select(f => Math.Pow(f, 2));\n        return squaredValues.Sum();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa92mftwd.cs(25,44): error CS0266: Cannot implicitly convert type ''System.Collections.Generic.IEnumerable<double>''
    to ''System.Collections.Generic.IEnumerable<float>''. An explicit conversion exists
    (are you missing a cast?)

    /tmp/tmpa92mftwd.cs(26,16): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ total = 0;\n        foreach (var i in lst) {\n            total += (Math.Pow(i,\
    \ 2));\n        }\n        return total;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkgx6hg3_.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        if\
    \ (lst.Count == 0) return 0L;\n\n        var lst2 = lst.OrderBy(f => Math.Ceiling(f)).ToList();\n\
    \        var l = new List<long>();\n        for (int i = 0; i < lst2.Count; i++)\
    \ {\n            var sum = lst2[i] * lst2[i];\n            l.Add(sum);\n     \
    \   }\n        return l.Sum();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9b49dlbj.cs(30,19): error CS1503: Argument 1: cannot convert from ''float''
    to ''long''

    '
  timestamp: 1659976920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Sort the list based on ceiling\n        lst.Sort((x, y) => Math.Ceiling(y) -\
    \ Math.Ceiling(x));\n        // Calculate squares of numbers\n        var res\
    \ = lst.Aggregate(new BigInteger(0),\n            (rs, x) => rs + Math.Pow(x,\
    \ 2));\n        return res.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpscbhbjg6.cs(25,28): error CS0266: Cannot implicitly convert type ''double''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpscbhbjg6.cs(25,28): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    /tmp/tmpscbhbjg6.cs(28,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''BigInteger'' and ''double''

    '
  timestamp: 1659976920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        float\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return Math.Sqrt(sum);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx5gpuse6.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpx5gpuse6.cs(28,16): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        int\
    \ i = 0;\n        long res = 0;\n        while (i < lst.Count) {\n           \
    \ res += lst[i] * lst[i];\n            i += 1;\n        }\n        return Math.Ceiling(res);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu87kerrw.cs(27,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpu87kerrw.cs(30,21): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Ceiling(decimal)'' and ''Math.Ceiling(double)''

    '
  timestamp: 1659976920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Your code goes here!\n        var result = 0.0f;\n        foreach (var f in\
    \ lst)\n            result += Math.Pow(f, 2);\n        return (int)Math.Ceiling(result);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb_8l7ma3.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ result = 0;\n        foreach (float item in lst) {\n            result += Math.Pow(item,\
    \ 2);\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf4p_o40j.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        if\
    \ (lst.Count == 0) return 0;\n\n        long n = lst[0];\n        for (int i =\
    \ 1; i < lst.Count; i++)\n            n = Math.Ceiling(n + lst[i] * lst[i]);\n\
    \        return n;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7gfp73ch.cs(26,18): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp7gfp73ch.cs(28,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Your code goes here\n        long sum = 0;\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            sum += Math.Pow(lst[i], 2);\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkjjofqb6.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        int\
    \ sum = lst.Sum();\n        long result = Math.Pow(sum, 2);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj76h_61y.cs(24,19): error CS0266: Cannot implicitly convert type ''float''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpj76h_61y.cs(25,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        if\
    \ (lst.Count == 0) {\n            throw new ArgumentException();\n        }\n\
    \        float sum = lst.Sum(x => Math.Abs(x));\n        List<float> roundedToUpper\
    \ = new List<float>(lst.Count);\n        foreach(float x in lst) {\n         \
    \   roundedToUpper.Add(Math.Ceiling(x));\n        }\n        List<float> result\
    \ = new List<float>();\n        foreach(float x in roundedToUpper) {\n       \
    \     result.Add(Math.Pow(Math.Sqrt(x), 2));\n        }\n        return sum *\
    \ sum + lst.Sum(x => (long)Math.Pow(x, 2)) - result.Sum(x => (long)Math.Pow(x,\
    \ 2));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw6_3h0ic.cs(30,32): error CS1503: Argument 1: cannot convert from ''double''
    to ''float''

    /tmp/tmpw6_3h0ic.cs(34,24): error CS1503: Argument 1: cannot convert from ''double''
    to ''float''

    /tmp/tmpw6_3h0ic.cs(36,16): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        Stopwatch\
    \ st = new Stopwatch();\n        st.Start();\n        var res = lst.Sum(x => Math.Pow(x,\
    \ 2));\n        st.Stop();\n        return res.ToString(\"F1\")+\" : \" + st.ElapsedMilliseconds.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3qmxyyra.cs(28,16): error CS0029: Cannot implicitly convert type ''string''
    to ''long''

    '
  timestamp: 1659976921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        var\
    \ x = lst\n            .Select(f => new BigDecimal(f))\n            .OrderByDescending(f\
    \ => Math.Ceiling(Math.Sqrt(f)))\n            .Select(f => (long)Math.Ceiling(Math.Sqrt(f)))\n\
    \            .Sum();\n        return x;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmd29vtdx.cs(25,30): error CS0246: The type or namespace name ''BigDecimal''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659976921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst.Sum(x => Math.Pow(x, 2));\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm50p43rg.cs(24,16): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst\n            .Select(x => Math.Ceiling(x * x))\n            .Sum();\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo2noto8i.cs(24,16): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976921
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        var\
    \ sum = lst\n            .Select(x => (int)Math.Ceiling(x))\n            .Aggregate((x,\
    \ y) => x + y);\n        return sum * sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b8b98080b6cf44a5b0661c24c7901e70>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b8b98080b6cf44a5b0661c24c7901e70>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        long sum2 = 0;\n        foreach (var item in lst) {\n    \
    \        float n = (float)Math.Ceiling(item);\n            sum += (long)Math.Pow(n,\
    \ 2);\n            sum2 += n;\n        }\n        return sum + sum2;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp83y82kba.cs(29,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976921
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float val in lst) {\n            sum += (long)Math.Pow(val,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a303c87a35404cdf910e67bc3c898126>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a303c87a35404cdf910e67bc3c898126>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        float min = -1.0f;\n        float max = 1.0f;\n        foreach\
    \ (float x in lst) {\n            sum += Math.Pow(x, 2);\n            min = Math.Min(x,\
    \ min);\n            max = Math.Max(x, max);\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjwes4s6l.cs(28,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        Console.WriteLine(\"{0}L\", sum);\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsh4iv0t5.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Your code goes here\n        long sum = 0;\n        foreach(float f in lst){\n\
    \            sum += Convert.ToDouble(f) * Convert.ToDouble(f);\n        }\n  \
    \      return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6agpmjo_.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        var\
    \ res = lst\n            .OrderBy(f => Math.Ceiling(f))\n            .Select(f\
    \ => Math.Pow(f, 2))\n            .Sum();\n        return res.ToLong();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfwmbmk20.cs(28,20): error CS1061: ''double'' does not contain a definition
    for ''ToLong'' and no accessible extension method ''ToLong'' accepting a first
    argument of type ''double'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659976921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        if\
    \ (lst.Count == 0)\n            return 0;\n        long sum = 0;\n        foreach\
    \ (float x in lst) {\n            sum += Math.Pow(x, 2);\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkpzbhf0e.cs(28,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float item in lst)\n            sum += (long)Math.Sqrt(Math.Floor(item))\
    \ + Math.Ceiling(item);\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1chu1ou7.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976921
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst.Select(f => (long)Math.Pow((double)f, 2.0)).Sum();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba025f58779e4e419e76f09b8082e658>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba025f58779e4e419e76f09b8082e658>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ total = 0;\n        foreach (float item in lst) {\n            total += Math.Pow(item,\
    \ 2);\n        }\n        return Math.Ceiling(total);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxmwcya9v.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpxmwcya9v.cs(28,21): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Ceiling(decimal)'' and ''Math.Ceiling(double)''

    '
  timestamp: 1659976921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (var item in lst) {\n            var rounded = Math.Ceiling(item);\n\
    \            sum += Math.Pow(rounded - item, 2);\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3a992ao3.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ ret = 0;\n        foreach (float f in lst) {\n            long rounded = Math.Ceiling(f);\n\
    \            long sq = rounded*rounded;\n            ret = Math.Max(ret, sq);\n\
    \        }\n        return ret;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbxwibv7a.cs(26,28): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        int\
    \ size = lst.Count;\n        long total = 0;\n        for (int i = 0; i < size;\
    \ i++) {\n            total += lst[i] * lst[i];\n        }\n        total = Round(total,\
    \ 0);\n        for (int i = size - 1; i >= 0; i--) {\n            total -= lst[i]\
    \ * lst[i];\n            total = Round(total, 0);\n        }\n        return total;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7mvwidpn.cs(27,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp7mvwidpn.cs(29,17): error CS0103: The name ''Round'' does not exist in
    the current context

    /tmp/tmp7mvwidpn.cs(31,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp7mvwidpn.cs(32,21): error CS0103: The name ''Round'' does not exist in
    the current context

    '
  timestamp: 1659976921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        Debug.Assert(lst.Count\
    \ > 0);\n        long sum = 0;\n        long sqsum = 0;\n        foreach (var\
    \ item in lst) {\n            sum += item * item;\n            sqsum += (long)Math.Ceiling(item\
    \ * item);\n        }\n        return (sum == sqsum) ? sum : sqsum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpefn_jmjk.cs(28,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976921
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        long l = 0;\n        foreach (float n in lst) {\n        \
    \    l = (long)(n * n);\n            sum += l;\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9a1337daca4c4539beb11de2d7c42152>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9a1337daca4c4539beb11de2d7c42152>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        float\
    \ x = 0.0f;\n        foreach (float val in lst)\n            x = x + val * val;\n\
    \        return Math.Ceiling(x) * Math.Ceiling(x);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm9cxi5ky.cs(27,16): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        int\
    \ n = lst.Count;\n        long sum = 0;\n        foreach (float item in lst) {\n\
    \            sum += Math.Pow(item, 2);\n        }\n        return sum;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpljkckoe3.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        var\
    \ squares = from x in lst\n                      select Math.Pow(x, 2.0f);\n \
    \       squares = squares.ToList();\n        return squares.Sum();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxmul_wv6.cs(27,16): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        var\
    \ sqSum = (from x in lst\n                     select Math.Round(Math.Pow(x, 2),\
    \ 0)).Sum();\n        return sqSum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc9e_snjz.cs(26,16): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float element in lst) {\n            double sqr =\
    \ Math.Pow(element, 2);\n            sum += sqr;\n        }\n        return Math.Round(sum);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvtu8qrr1.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpvtu8qrr1.cs(29,21): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Round(decimal)'' and ''Math.Round(double)''

    '
  timestamp: 1659976921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        var\
    \ r = new List<float>(lst).Select(x => Math.Ceiling(x)).ToList();\n        return\
    \ r.Sum(x => x * x);\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphoagugjh.cs(25,16): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ result = 0;\n        foreach (var f in lst) {\n            result = (result\
    \ + Math.Pow(f, 2));\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuc98yr79.cs(26,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ result = 0;\n        var max = Math.Ceiling(lst[0]);\n        foreach (float\
    \ number in lst) {\n            number = Math.Ceiling(number);\n            result\
    \ += Math.Pow(number - max, 2);\n            max = Math.Ceiling(number);\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps3mddefd.cs(27,13): error CS1656: Cannot assign to ''number'' because
    it is a ''foreach iteration variable''

    /tmp/tmps3mddefd.cs(28,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        if\
    \ (lst.Count < 1) return 0;\n        long sum = 0;\n        foreach (float item\
    \ in lst)\n            sum += Math.Pow(item, 2);\n        return sum;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyyw8_ry2.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ s = 0;\n        foreach (float f in lst) {\n            s += Math.Pow(f, 2);\n\
    \        }\n        return (int)Math.Ceiling(Math.Sqrt(s));\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzt6w6k7c.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        var first = true;\n        foreach (float x in lst) {\n  \
    \          if (first) {\n                sum = x;\n                first = false;\n\
    \                continue;\n            }\n            sum = sum + Math.Pow(x,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpumnsjwe2.cs(28,23): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpumnsjwe2.cs(32,19): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ ret = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            ret +=\
    \ (lst[i] * lst[i]);\n        }\n        return ret;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8of9b8g1.cs(26,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float item in lst) {\n            sum += item*item;\n\
    \        }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3heod0ek.cs(26,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Use a for loop to traverse the list.\n        long sum = 0;\n        foreach\
    \ (float item in lst)\n            // Add squares.\n            sum += item *\
    \ item;\n        // Round the sum to the nearest int.\n        sum = Math.Ceiling(sum);\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6s52rms8.cs(28,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp6s52rms8.cs(30,20): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Ceiling(decimal)'' and ''Math.Ceiling(double)''

    '
  timestamp: 1659976922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        var\
    \ result = lst.Sum();\n        result = result.Round(4);\n        result = result.Ceiling();\n\
    \        foreach (var item in lst) {\n            result = result.Round(4);\n\
    \            result = result.Ceiling();\n        }\n        return result.ToLong();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptzukbtv_.cs(25,25): error CS1061: ''float'' does not contain a definition
    for ''Round'' and no accessible extension method ''Round'' accepting a first argument
    of type ''float'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmptzukbtv_.cs(26,25): error CS1061: ''float'' does not contain a definition
    for ''Ceiling'' and no accessible extension method ''Ceiling'' accepting a first
    argument of type ''float'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmptzukbtv_.cs(28,29): error CS1061: ''float'' does not contain a definition
    for ''Round'' and no accessible extension method ''Round'' accepting a first argument
    of type ''float'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmptzukbtv_.cs(29,29): error CS1061: ''float'' does not contain a definition
    for ''Ceiling'' and no accessible extension method ''Ceiling'' accepting a first
    argument of type ''float'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmptzukbtv_.cs(31,23): error CS1061: ''float'' does not contain a definition
    for ''ToLong'' and no accessible extension method ''ToLong'' accepting a first
    argument of type ''float'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659976922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        float\
    \ sum = lst[0];\n        long count = 0;\n        foreach (var item in lst)\n\
    \        {\n            float sqrt = Math.Sqrt(item);\n            sum += sqrt;\n\
    \            count += 1;\n        }\n        return count;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpghabrq2z.cs(28,26): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976922
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst.Sum(i => (int)(Math.Ceiling(i * i)));\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d227bfb0dbe145f68eda12e008740457>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d227bfb0dbe145f68eda12e008740457>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sqr = 0.0f;\n        foreach (float item in lst) {\n            sqr += Math.Pow(item,\
    \ 2);\n        }\n        return Math.Ceiling(sqr);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuvfyx6ml.cs(24,20): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpuvfyx6ml.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpuvfyx6ml.cs(28,21): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Ceiling(decimal)'' and ''Math.Ceiling(double)''

    '
  timestamp: 1659976922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        var\
    \ sum = 0;\n        foreach (float value in lst)\n            sum += Math.Pow(value,\
    \ 2);\n        return Math.Ceiling(sum);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd5u2oop5.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpd5u2oop5.cs(27,21): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Ceiling(decimal)'' and ''Math.Ceiling(double)''

    '
  timestamp: 1659976922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        if\
    \ (lst.Count <= 0) throw new Exception(\"Count of list is invalid!\");\n     \
    \   long sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n           \
    \ sum += lst[i]*lst[i];\n        }\n        return sum;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8a1zfr27.cs(27,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        if\
    \ (lst == null)\n            return 0L;\n        long sum = 0L;\n        foreach\
    \ (var item in lst)\n            sum += Round(item*item);\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpop7jvp5k.cs(28,20): error CS0103: The name ''Round'' does not exist in
    the current context

    '
  timestamp: 1659976922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ result = 0;\n        foreach (float element in lst) {\n            result +=\
    \ Math.Pow(element, 2);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptdew3uwy.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        float\
    \ sum = 0;\n        foreach (float f in lst)\n            sum += Math.Pow(f, 2);\n\
    \n        return Math.Ceiling(sum);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5eb2o1tn.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp5eb2o1tn.cs(28,16): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        if\
    \ (lst.Count == 0) {\n            return 0;\n        }\n\n        float sum =\
    \ 0;\n        int pos = 0;\n        foreach (float f in lst) {\n            sum\
    \ += Math.Pow(f, 2);\n            pos++;\n        }\n\n        return ((long)Math.Ceiling(sum));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpteb7vhfx.cs(31,13): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        List<float>\
    \ roundedLst = lst\n            .Select(f => (float)Math.Ceiling(f))\n       \
    \     .Select(f => Math.Round(f, MidpointRounding.AwayFromZero))\n           \
    \ .ToList();\n\n        long sum = 0;\n\n        for (int i = 0; i < roundedLst.Count;\
    \ i++) {\n            sum += roundedLst[i] * roundedLst[i];\n        }\n     \
    \   return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm0bld9by.cs(24,34): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<double>''
    to ''System.Collections.Generic.List<float>''

    /tmp/tmpm0bld9by.cs(32,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        using\
    \ (var sr = new System.Security.Cryptography.RNGCryptoServiceProvider()) {\n \
    \           int n = lst.Count;\n            var sum = 0;\n            float x\
    \ = 0, y = 0;\n            long sumSqr = 0;\n            for (int i = 0; i < n;\
    \ i++) {\n                sr.NextBytes((uint)lst.ToArray());\n               \
    \ sumSqr = sum + lst.Sum();\n                x = lst.ElementAt(i);\n         \
    \       y = ((int)Math.Round(Math.Pow(Math.Pow(x, 2), n), MidpointRounding.ToEven,\
    \ MidpointRounding.AwayFromZero));\n                sum += y;\n              \
    \  sumSqr = sumSqr.Add(y);\n                lst.ElementAt(i) = y;\n          \
    \  }\n            return sumSqr;\n        }\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnay362m2.cs(30,30): error CS0030: Cannot convert type ''float[]'' to ''uint''

    /tmp/tmpnay362m2.cs(30,20): error CS1061: ''RNGCryptoServiceProvider'' does not
    contain a definition for ''NextBytes'' and no accessible extension method ''NextBytes''
    accepting a first argument of type ''RNGCryptoServiceProvider'' could be found
    (are you missing a using directive or an assembly reference?)

    /tmp/tmpnay362m2.cs(31,26): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpnay362m2.cs(33,38): error CS1503: Argument 1: cannot convert from ''double''
    to ''decimal''

    /tmp/tmpnay362m2.cs(33,67): error CS1503: Argument 2: cannot convert from ''System.MidpointRounding''
    to ''int''

    /tmp/tmpnay362m2.cs(34,17): error CS0266: Cannot implicitly convert type ''float''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpnay362m2.cs(35,33): error CS1061: ''long'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpnay362m2.cs(36,17): error CS0131: The left-hand side of an assignment
    must be a variable, property or indexer

    '
  timestamp: 1659976922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ ret = 0;\n        foreach (float f in lst) {\n            float upper = (float)Math.Ceiling(f);\n\
    \            float lower = (float)Math.Floor(f);\n            ret = ret + Math.Pow(upper\
    \ - lower, 2);\n        }\n        return ret;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyhqbavqs.cs(28,19): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976922
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        float\
    \ sum = 0;\n        foreach(float f in lst) {\n            sum += (float)(Math.Pow(f,\
    \ 2));\n        }\n        return (int)(sum + 0.5);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <45f3ccaee13f4cf4929e0eceddd547c3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <45f3ccaee13f4cf4929e0eceddd547c3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ res = 0;\n        foreach (float num in lst) {\n            long sqNum = Math.Ceiling((float)Math.Pow(num,\
    \ 2.0)) + res;\n            res = sqNum;\n        }\n        return res;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplg8lgv2e.cs(26,26): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float item in lst) {\n            sum += Math.Pow(item,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp2xzqntn.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        //\
    \ You can do more elegant solution to do this job without using Linq\n       \
    \ long sum = 0;\n        foreach (var item in lst)\n        {\n            var\
    \ f = Math.Ceiling(item);\n            sum += item * item;\n            sum +=\
    \ f * f;\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsreupj4z.cs(29,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpsreupj4z.cs(30,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        if\
    \ (lst.Count <= 0) {\n            return 0L;\n        }\n        var result =\
    \ lst.Sum();\n        if (result < 0) {\n            result = result * -1L;\n\
    \        }\n        var result2 = lst[0].Abs();\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            result2 = result2 * lst[i].Abs();\n            result =\
    \ result + result2;\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzdfvfjus.cs(31,30): error CS1061: ''float'' does not contain a definition
    for ''Abs'' and no accessible extension method ''Abs'' accepting a first argument
    of type ''float'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpzdfvfjus.cs(33,40): error CS1061: ''float'' does not contain a definition
    for ''Abs'' and no accessible extension method ''Abs'' accepting a first argument
    of type ''float'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpzdfvfjus.cs(36,16): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        int\
    \ len = lst.Count;\n        if (len < 1) return 0;\n        float sum = 0;\n \
    \       for (int i = 0; i < len; i++) {\n            sum += Math.Pow(lst[i], 2);\n\
    \        }\n        float upper = (float)Math.Ceiling(sum);\n        long retVal\
    \ = 0;\n        for (int i = 0; i < len; i++) {\n            retVal += Math.Pow(lst[i],\
    \ 2) - Math.Floor(Math.Pow(upper, 2));\n        }\n        return retVal;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy8isexhi.cs(28,13): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpy8isexhi.cs(33,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (var f in lst.OrderBy(f => Math.Ceiling(f))) {\n \
    \           sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7r9hr0v8.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        foreach\
    \ (var item in lst) {\n            item = Math.Ceiling(item);\n        }\n   \
    \     return lst.Sum(x => (long)Math.Pow(x, 2));\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxob5vtg6.cs(25,13): error CS1656: Cannot assign to ''item'' because it
    is a ''foreach iteration variable''

    '
  timestamp: 1659976922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        Debug.Assert(lst.Count\
    \ > 0);\n\n        var sum = lst.Sum();\n        Debug.Assert(sum > 0);\n    \
    \    var sum = sum * sum;\n\n        foreach (float x in lst) {\n            x\
    \ = Math.Ceiling(x);\n            Debug.Assert(x < ulong.MaxValue);\n        \
    \    var tmp = sum + x * x;\n            sum = tmp;\n        }\n\n        Debug.Assert(sum\
    \ == lst.Sum());\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgfrbatjt.cs(28,13): error CS0128: A local variable or function named ''sum''
    is already defined in this scope

    /tmp/tmpgfrbatjt.cs(31,13): error CS1656: Cannot assign to ''x'' because it is
    a ''foreach iteration variable''

    /tmp/tmpgfrbatjt.cs(38,16): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ total = 0;\n        foreach (float x in lst)\n        {\n            // round\
    \ x to the upper int(Ceiling) first\n            x = Math.Ceiling(x);\n      \
    \      total += Math.Pow(x, 2);\n        }\n        return total;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8_vcyxjo.cs(28,13): error CS1656: Cannot assign to ''x'' because it is
    a ''foreach iteration variable''

    /tmp/tmp8_vcyxjo.cs(29,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ result = 0;\n        foreach (var item in lst) {\n            result += Math.Pow(item,\
    \ 2);\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2edcui1l.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ res = 0;\n        var sorted = lst.OrderByDescending(x => (int)Math.Ceiling(x)).ToList();\n\
    \        for (int i = 0; i < sorted.Count; i++) {\n            res += sorted[i]\
    \ * sorted[i];\n        }\n        return res;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfs183ene.cs(27,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        Debug.Assert(lst.All(x\
    \ => x >= 0f));\n        var res = lst.Sum(x => Math.Pow(x, 2f));\n        var\
    \ res2 = lst.SelectMany(x => Enumerable.Repeat(x, 2f)).Sum();\n        Debug.Assert(res\
    \ == res2);\n        Debug.Assert(res.Equals(Math.Ceiling(res * res2)));\n   \
    \     return Math.Ceiling(res * res2);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1aumawzm.cs(26,61): error CS1503: Argument 2: cannot convert from ''float''
    to ''int''

    '
  timestamp: 1659976923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        int\
    \ n = lst.Count;\n        long sum = 0;\n        long sum2 = 0;\n        foreach\
    \ (float f in lst) {\n            sum = sum + Math.Pow(f, 2);\n            sum2\
    \ = sum2 + Math.Pow(f, 2);\n        }\n        double avg = (double)sum / n;\n\
    \        return (long) Math.Ceiling((double)sum2 / (double)n);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt1w0hs60.cs(28,19): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpt1w0hs60.cs(29,20): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach(var n in lst)\n            sum += Math.Pow(n, 2);\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt2vh3eo0.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976922
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ ret = 0;\n        foreach (float i in lst) {\n            ret += (long)Math.Pow(i,\
    \ 2);\n        }\n        return ret;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8de52fd6a74f4984bd69eff04b9a8ba0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8de52fd6a74f4984bd69eff04b9a8ba0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        if\
    \ (lst.Count < 1)\n            return 0;\n        var sum = 0;\n        foreach\
    \ (var number in lst) {\n            var f = (float) Math.Ceiling(number);\n \
    \           sum += (long)Math.Pow(f, 2);\n        }\n        return sum;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjwpe6np4.cs(29,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        double\
    \ sum = 0;\n        double temp;\n        foreach (float f in lst) {\n       \
    \     temp = MathHelper.Ceiling(f * f);\n            sum += temp;\n        }\n\
    \        return Convert.ToInt64(Math.Round(sum));\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp14b8pc1j.cs(27,20): error CS0103: The name ''MathHelper'' does not exist
    in the current context

    '
  timestamp: 1659976923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        List<long>\
    \ sums = new List<long>();\n        foreach (float f in lst) {\n            float\
    \ temp = f;\n            Debug.Assert(f >= 0);\n            Debug.Assert(f <=\
    \ int.MaxValue);\n            int n = Convert.ToInt32(f);\n            int f =\
    \ Convert.ToInt32(Math.Ceiling(n));\n            Debug.Assert(f >= 0);\n     \
    \       Debug.Assert(f <= int.MaxValue);\n            int n = Math.Truncate(n);\n\
    \            int n = Math.Abs(n);\n            int k = Math.Truncate(Math.Log(f\
    \ - n, 2));\n            int n = Math.Sqrt(f * f - (float) k * k);\n         \
    \   sums.Add(n);\n        }\n        return sums.Sum();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk5m7cpfm.cs(26,26): error CS0841: Cannot use local variable ''f'' before
    it is declared

    /tmp/tmpk5m7cpfm.cs(27,26): error CS0841: Cannot use local variable ''f'' before
    it is declared

    /tmp/tmpk5m7cpfm.cs(28,26): error CS0841: Cannot use local variable ''f'' before
    it is declared

    /tmp/tmpk5m7cpfm.cs(29,37): error CS0841: Cannot use local variable ''f'' before
    it is declared

    /tmp/tmpk5m7cpfm.cs(30,17): error CS0136: A local or parameter named ''f'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpk5m7cpfm.cs(30,42): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Ceiling(decimal)'' and ''Math.Ceiling(double)''

    /tmp/tmpk5m7cpfm.cs(33,17): error CS0128: A local variable or function named ''n''
    is already defined in this scope

    /tmp/tmpk5m7cpfm.cs(33,26): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Truncate(decimal)'' and ''Math.Truncate(double)''

    /tmp/tmpk5m7cpfm.cs(34,17): error CS0128: A local variable or function named ''n''
    is already defined in this scope

    /tmp/tmpk5m7cpfm.cs(35,21): error CS0266: Cannot implicitly convert type ''double''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpk5m7cpfm.cs(36,17): error CS0128: A local variable or function named ''n''
    is already defined in this scope

    /tmp/tmpk5m7cpfm.cs(36,21): error CS0266: Cannot implicitly convert type ''double''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long[]\
    \ nums = lst.Select(x => Math.Round(Math.Pow(x, 2.0f), MidpointRounding.ToEven).LongValue()).ToArray();\n\
    \        return nums.Sum();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbvdtv3p8.cs(24,94): error CS1061: ''double'' does not contain a definition
    for ''LongValue'' and no accessible extension method ''LongValue'' accepting a
    first argument of type ''double'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659976923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        if\
    \ (lst.Count == 0)\n            return 0;\n        double result = 0;\n      \
    \  foreach (float f in lst) {\n            result = Math.Pow(f, 2) + result;\n\
    \        }\n        return Math.Ceiling(result) * Math.Ceiling(result);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphwoh5ebb.cs(30,16): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Sort the list by Ceiling first\n        lst.Sort((x, y) => MathHelper.Ceiling((float)\
    \ x) - MathHelper.Ceiling((float) y));\n        long sum = 0;\n        for (int\
    \ i = 0; i < lst.Count; i++)\n            sum += (lst[i] * lst[i]);\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx5hspcr0.cs(25,28): error CS0103: The name ''MathHelper'' does not exist
    in the current context

    /tmp/tmpx5hspcr0.cs(25,60): error CS0103: The name ''MathHelper'' does not exist
    in the current context

    /tmp/tmpx5hspcr0.cs(28,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        int\
    \ len = lst.Count;\n        float sum = 0;\n        float result = 0;\n      \
    \  for (int i = 0; i < len; i++) {\n            sum = sum + lst[i];\n        }\n\
    \        result = sum * sum;\n        result = Math.Ceiling(result);\n       \
    \ for (int i = 0; i < len; i++) {\n            lst[i] = Math.Ceiling(lst[i]);\n\
    \        }\n        for (int i = 0; i < len; i++) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n        return Convert.ToInt64(Math.Sqrt(sum));\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqlah0zet.cs(31,18): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpqlah0zet.cs(33,22): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        float\
    \ upper = lst.Max();\n        var sum = lst.Select(x => Math.Ceiling(x * x)).ToArray();\n\
    \        return sum.Sum();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7raw1j7a.cs(26,16): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976923
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        float\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (float)Math.Sqrt(f);\n\
    \        }\n        return (long)sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <78e12c9f60694f6ebad2d68689fd7e4c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <78e12c9f60694f6ebad2d68689fd7e4c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        if\
    \ (lst.Count <= 0)\n            return 0L;\n        long sum = 0;\n        foreach\
    \ (float element in lst)\n            sum += Math.Pow(Math.Round(element, 0),\
    \ 2);\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7ekvohoh.cs(28,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ ret = 0;\n        foreach (float item in lst) {\n            ret = Math.Ceiling(ret\
    \ + item*item);\n        }\n        return ret;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5ztpqsiq.cs(26,19): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ ret = 0;\n        if (lst.Count == 0) {\n            return 0;\n        }\n\
    \        var list = lst.OrderBy(l => Math.Ceiling(l)).ToList();\n        foreach\
    \ (var item in list) {\n            float flt = item;\n            flt = Math.Round(flt,\
    \ 0); // Round up\n            flt = Math.Abs(flt);\n            flt = Math.Floor(flt);\n\
    \            ret += (flt * flt);\n        }\n        return ret;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmrgcyung.cs(31,19): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpmrgcyung.cs(33,19): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpmrgcyung.cs(34,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Your code goes here:\n        var lst_new = lst.OrderByDescending(x => x).ToList();\n\
    \        var lst_sq = lst_new.Select(x => Math.Round(x * x, MidpointRounding.AwayFromZero)).ToList();\n\
    \        var totalSum = lst_sq.Sum();\n        return totalSum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfrx777ht.cs(28,16): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        if\
    \ (lst.Count == 0) {\n            return 0;\n        }\n        if (lst.Count\
    \ == 1) {\n            return lst[0] * lst[0];\n        }\n        long squareSum\
    \ = 0;\n        foreach (var f in lst) {\n            squareSum += Math.Pow(f,\
    \ 2);\n        }\n        return Math.Ceiling(squareSum);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph_p018rv.cs(28,20): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmph_p018rv.cs(32,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmph_p018rv.cs(34,21): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Ceiling(decimal)'' and ''Math.Ceiling(double)''

    '
  timestamp: 1659976923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        if\
    \ (lst.Count == 0) {\n            return 0;\n        }\n        float sum = 0;\n\
    \        foreach (float f in lst) {\n            sum += Math.Sqrt(f);\n      \
    \  }\n        return (int)Math.Ceiling(sum);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqy9kgwqz.cs(29,13): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ ret = 0;\n        foreach(var f in lst) {\n            ret += Math.Pow(f, 2);\n\
    \        }\n        return ret;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf3whdsmk.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        List<float>\
    \ lst1 = lst.Select(x=>Math.Ceiling(x)).ToList();\n        List<float> lst2 =\
    \ lst.Select(x=>Math.Floor(x)).ToList();\n        long result = 0;\n        foreach\
    \ (float item in lst1) {\n            result += item*item;\n        }\n      \
    \  foreach (float item in lst2) {\n            result += item*item;\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmbxr9kbk.cs(24,28): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<double>''
    to ''System.Collections.Generic.List<float>''

    /tmp/tmpmbxr9kbk.cs(25,28): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<double>''
    to ''System.Collections.Generic.List<float>''

    /tmp/tmpmbxr9kbk.cs(28,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpmbxr9kbk.cs(31,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976923
