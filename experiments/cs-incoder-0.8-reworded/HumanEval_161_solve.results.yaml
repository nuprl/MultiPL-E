language: cs
name: HumanEval_161_solve
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var result
    = s;\n        if (s.Any(Char.IsLetter))\n        {\n            var s = String.Concat(s,
    new string('0', s.Length));\n            s = s.Replace(new string(s.Select((c,
    i) => !Char.IsLetter(c) && i != 0 && i % 2 == 0 ? '@' : c).ToArray()), String.Empty);\n
    \           int index = 0;\n            result = s.Aggregate(result, (acc, s)
    => acc + (index++ % 2 == 0 ? ((index == 0) ? \"@\" : c) : c));\n        }\n        else\n
    \       {\n            result = s.Replace(@\" \", String.Empty);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoe_gtrwp.cs(25,17): error CS0136: A local or parameter named ''s'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpoe_gtrwp.cs(25,35): error CS0841: Cannot use local variable ''s'' before
    it is declared

    /tmp/tmpoe_gtrwp.cs(25,54): error CS0841: Cannot use local variable ''s'' before
    it is declared

    /tmp/tmpoe_gtrwp.cs(28,102): error CS0103: The name ''c'' does not exist in the
    current context

    /tmp/tmpoe_gtrwp.cs(28,107): error CS0103: The name ''c'' does not exist in the
    current context

    /tmp/tmpoe_gtrwp.cs(25,35): error CS0165: Use of unassigned local variable ''s''

    '
  timestamp: 1660015985
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        char[]
    arr = s.ToCharArray();\n        string result = \"\";\n\n        foreach (char
    c in arr) {\n            if (char.IsLetter(c)) {\n                result += char.ToUpper(c);\n
    \           }\n            else {\n                result += char.ToLower(c);\n
    \           }\n        }\n\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91c48cfe2f8c4114974e5105c85985b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91c48cfe2f8c4114974e5105c85985b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015985
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    newS = \"\";\n        if (s == null || s.Length <= 1) return s;\n        bool
    flag = false;\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                if (flag) {\n                    newS = newS.ToLower().ToCharArray();\n
    \                   flag = false;\n                }\n                newS = newS.ToUpper().ToCharArray();\n
    \           } else {\n                newS = newS.ToCharArray();\n                flag
    = true;\n            }\n        }\n        return newS;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqgpxbl9y.cs(28,28): error CS0029: Cannot implicitly convert type ''char[]''
    to ''string''

    /tmp/tmpqgpxbl9y.cs(31,24): error CS0029: Cannot implicitly convert type ''char[]''
    to ''string''

    /tmp/tmpqgpxbl9y.cs(33,24): error CS0029: Cannot implicitly convert type ''char[]''
    to ''string''

    '
  timestamp: 1660015985
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s.Length
    == 0) return \"\";\n        bool flag = true;\n        for (int i = 0; i < s.Length;
    i++) {\n            if (char.IsLetter(s[i])) {\n                if (flag) s[i]
    = Char.ToUpper(s[i]);\n                else s[i] = Char.ToLower(s[i]);\n                flag
    = !flag;\n            }\n        }\n        return new string(s.ToArray());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvu_vtfix.cs(26,27): error CS0200: Property or indexer ''string.this[int]''
    cannot be assigned to -- it is read only

    /tmp/tmpvu_vtfix.cs(27,22): error CS0200: Property or indexer ''string.this[int]''
    cannot be assigned to -- it is read only

    '
  timestamp: 1660015985
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var result
    = string.Empty;\n        foreach (var letter in s.ToCharArray()) {\n            char
    original = letter;\n            char newLetter = char.IsUpper(letter) ? char.ToUpper(letter)
    : char.ToLower(letter);\n            result += newLetter;\n        }\n\n        //
    check if there is any letter, if so\n        // then reverse the string with lower
    letters to the upper\n        // this ensures original letters stay in the same
    order\n        if (result.IndexOfAny(new char[]{'0'})!=-1 )\n            result
    = result.ToUpper();\n\n        // check if there is no letter, if so\n        //
    then reverse the string with upper letters to the lower\n        // this ensures
    original letters stay in the same order\n        if (result.IndexOfAny(new char[]{'a'})!=-1)\n
    \           result = result.ToLower();\n\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fe9ee56bfcb149bb8308bcfce6cf5cb7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fe9ee56bfcb149bb8308bcfce6cf5cb7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015985
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var sol
    = new StringBuilder(s.Length);\n        foreach (var character in s) {\n            if
    (character.ToLower() != character)\n                sol.Append(character.ToString().ToUpper());\n
    \           else\n                sol.Append(character.ToString().ToLower());\n
    \       }\n        return sol.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0676vuo8.cs(24,27): error CS1501: No overload for method ''ToLower'' takes
    0 arguments

    '
  timestamp: 1660015985
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Write
    your code in C#\n        HashSet<char> chars = new HashSet<char>(s.Select(c =>
    c));\n        if (chars.Count > 0)\n        {\n            s = chars.ToString()
    + s.ToLower() + s.ToUpper();\n        }\n        return s;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9215751e97c447f5ad2b724f4b74fd5e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9215751e97c447f5ad2b724f4b74fd5e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015985
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (string.IsNullOrEmpty(s))\n
    \           return s;\n        var sb = new StringBuilder(s);\n        for (int
    i = 0; i < s.Length; i++) {\n            if (Char.IsLetter((char)s[i])) {\n                sb.Replace((char)s[i],
    (char)s[i].ToString().ToUpper());\n            } else if (Char.IsLetter((char)s[i]))
    {\n                sb.Replace((char)s[i], (char)s[i].ToString().ToLower());\n
    \           }\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkbod5whf.cs(27,40): error CS0030: Cannot convert type ''string'' to ''char''

    /tmp/tmpkbod5whf.cs(29,40): error CS0030: Cannot convert type ''string'' to ''char''

    '
  timestamp: 1660015985
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s ==
    null || s.Length <= 0) {\n            return s;\n        }\n        char[] chars
    = s.ToCharArray();\n        int i = 0;\n        while (i < chars.Length) {\n            char
    c = chars[i];\n            if (char.IsLetter(c)) {\n                chars[i] =
    char.ToUpper(c);\n            }\n            i++;\n        }\n        string str
    = string.Join(\"\", chars);\n        return s;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <95078165f2c14582b8b6573811e0bf22>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <95078165f2c14582b8b6573811e0bf22>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015985
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        char[]
    cs = s.ToCharArray();\n        foreach (char c in cs) {\n            if (char.IsLetter(c))
    {\n                string str = c.ToString();\n                string result =
    \"\";\n                for (int i = 0; i < str.Length; i++) {\n                    char
    c = str[i];\n                    c = char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c);\n
    \                   result += c;\n                }\n                for (int
    i = 0; i < str.Length; i++) {\n                    char c = str[i];\n                    c
    = char.IsUpper(c) ? char.ToUpper(c) : char.ToLower(c);\n                    result
    += c;\n                }\n                cs.RemoveAt(i);\n                cs.Insert(i,
    result);\n            }\n        }\n        return new string(cs);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjkia41di.cs(28,26): error CS0136: A local or parameter named ''c'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpjkia41di.cs(33,26): error CS0136: A local or parameter named ''c'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpjkia41di.cs(37,29): error CS0103: The name ''i'' does not exist in the
    current context

    /tmp/tmpjkia41di.cs(37,20): error CS1061: ''char[]'' does not contain a definition
    for ''RemoveAt'' and no accessible extension method ''RemoveAt'' accepting a first
    argument of type ''char[]'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpjkia41di.cs(38,27): error CS0103: The name ''i'' does not exist in the
    current context

    /tmp/tmpjkia41di.cs(38,20): error CS1061: ''char[]'' does not contain a definition
    for ''Insert'' and no accessible extension method ''Insert'' accepting a first
    argument of type ''char[]'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1660015985
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var result
    = new StringBuilder(s);\n        foreach (char c in s) {\n            result.Replace(c,
    c == char.ToUpper(c) ? char.ToLower(c) : char.ToUpper(c));\n        }\n        return
    result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <965fadc91094430a980c25a6fefa5dd3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <965fadc91094430a980c25a6fefa5dd3>:0
    \n"
  stdout: ''
  timestamp: 1660015985
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Step
    1: Count the number of each letter in the string.\n        Dictionary<char,int>
    count = new Dictionary<char,int>();\n        for (int i = 0; i < s.Length; ++i)
    {\n            char ch = s[i];\n            if (!count.ContainsKey(ch))\n                count.Add(ch,
    1);\n            else\n                count[ch] += 1;\n        }\n        //
    Step 2: Sort the count dictionary by descending value.\n        List<KeyValuePair<char,
    int>> sorted = count.OrderByDescending(kvp => kvp.Value).ToList();\n        //
    Step 3: If the size of the sorted list is 1, then \n        // return the same
    string. Otherwise, go through the sorted list and \n        // reverse each letter
    and add the resulted string to output string.\n        if (sorted.Count == 1)\n
    \           return s;\n        else \n            return sorted.Select(kvp =>
    new string(kvp.Key.ToArray())).Aggregate((s, s1) => s + s1).ToLower();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpde3aakjt.cs(39,60): error CS1061: ''char'' does not contain a definition
    for ''ToArray'' and no accessible extension method ''ToArray'' accepting a first
    argument of type ''char'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1660015985
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Your
    Code Here\n        \n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <311af87b540044b89eaafac20f057b68>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <311af87b540044b89eaafac20f057b68>:0
    \n"
  stdout: ''
  timestamp: 1660015985
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        char[]
    chars = s.ToCharArray();\n        if (chars.Length == 0)\n            return s;\n
    \       if (chars.Any(x => char.IsLetter(x)))\n            chars = chars.Select(x
    => (char.IsUpper(x) ? x : char.ToUpper(x))).ToArray();\n        else\n            chars
    = chars.Select(x => x).ToArray();\n        return new string(chars);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31ad40ba8b254307bbf8a5de2a5f9764>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31ad40ba8b254307bbf8a5de2a5f9764>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015985
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    res = \"\";\n        if (s == null) {\n            throw new ArgumentNullException();\n
    \       }\n        char[] chars = s.ToCharArray();\n        for (int i = 0; i
    < chars.Length; i++) {\n            if (chars[i] == ' ') {\n                chars[i]
    = chars[i].ToString();\n                for (int j = i + 1; j < chars.Length;
    j++) {\n                    if (chars[i] == chars[j]) {\n                        chars[j]
    = chars[i].ToString();\n                        i++;\n                    }\n
    \               }\n            }\n        }\n        for (int i = 0; i < chars.Length;
    i++) {\n            if (chars[i].ToString().Length > 0) {\n                res
    += chars[i].ToString().ToUpper();\n            } else {\n                res +=
    chars[i].ToString().ToLower();\n            }\n        }\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp07yssv8l.cs(29,28): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmp07yssv8l.cs(32,36): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    '
  timestamp: 1660015985
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        bool noLetters
    = false;\n        foreach (char c in s) {\n            if (Char.IsLetter(c)) {\n
    \               s = s.Replace(c.ToString(), c.ToString().ToUpper());\n                noLetters
    = true;\n            } else {\n                s = s.Replace(c.ToString(), c.ToString().ToLower());\n
    \           }\n        }\n        if (!noLetters) {\n            return s.ToLower();\n
    \       } else {\n            return s.ToUpper();\n        }\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dd68e7ca011148c9ac97910b924607a2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dd68e7ca011148c9ac97910b924607a2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015985
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (String.IsNullOrEmpty(s))\n
    \           return s;\n        var n = s.Length;\n        char[] chars = new char[n];\n
    \       for (int i = 0; i < n; ++i) {\n            char c = s[i];\n            if
    (char.IsLetter(c))\n                chars[i] = char.ToUpper(c);\n            else\n
    \               chars[i] = char.ToLower(c);\n        }\n        return new String(chars);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <11edd2e3ba6f4121bfd2e8c8686d40e9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <11edd2e3ba6f4121bfd2e8c8686d40e9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015985
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if(s ==
    null || s.Length <= 1) {\n            return s;\n        }\n        StringBuilder
    rev = new StringBuilder();\n        foreach(char c in s) {\n            if('A'
    <= c && c <= 'Z') {\n                rev.Append(char.ToUpper(c));\n            }
    else if('a' <= c && c <= 'z') {\n                rev.Append(char.ToLower(c));\n
    \           } else {\n                rev.Append(c);\n            }\n        }\n
    \       return rev.reverse().ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaz2zowy1.cs(35,20): error CS1061: ''StringBuilder'' does not contain a
    definition for ''reverse'' and no accessible extension method ''reverse'' accepting
    a first argument of type ''StringBuilder'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1660015985
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            if (Char.IsLetter(c))
    {\n                if (char.IsUpper(c)) {\n                    result += (char)char.ToLower(c);\n
    \               } else {\n                    result += (char)char.ToUpper(c);\n
    \               }\n            } else {\n                result += c;\n            }\n
    \       }\n        if (result == \"\") {\n            result = s;\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0128ba69d0f14ccab4dc9f8068affcce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0128ba69d0f14ccab4dc9f8068affcce>:0
    \n"
  stdout: ''
  timestamp: 1660015985
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        StringBuilder
    sb = new StringBuilder();\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                sb.Append(Char.ToUpper(c));\n            } else {\n                sb.Append(c);\n
    \           }\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d42d32ea8468490a82dc7fe1b0a7a198>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d42d32ea8468490a82dc7fe1b0a7a198>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015985
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        return
    string.Concat(s.ToCharArray().Select(c =>\n            ((char.IsLetter(c))\n                ?
    (char.ToUpper(c))\n                : (char.ToLower(c))\n            ).ToString()\n
    \       ));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <643c4cda54934833a37309f066bb4c4a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <643c4cda54934833a37309f066bb4c4a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015985
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var ls
    = \"\";\n        var arr = new List<char>();\n        foreach (var c in s) {\n
    \           if (char.IsLetter(c)) {\n                arr.Add(c);\n            }\n
    \           else {\n                arr.Add(char.ToUpper(c));\n            }\n
    \       }\n        string sResult = String.Join(\"\", arr.OrderByDescending(c=>c.GetHashCode()).ThenBy(c=>c).ToArray());\n
    \       if (arr.Count == 0) {\n            ls = String.Join(\"\", s.OrderByDescending(c=>c.GetHashCode()).ThenBy(c=>c).ToArray());\n
    \       }\n        else {\n            ls = String.Join(\"\", s.OrderByDescending(c=>c.GetHashCode()).ThenBy(c=>c).ToArray());\n
    \       }\n        return ls;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fde7dc35ab004e38a80852fbf33a7b96>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fde7dc35ab004e38a80852fbf33a7b96>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015985
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        char[]
    arr = s.ToCharArray();\n        string res = \"\";\n        int len = arr.Length;\n
    \       bool upper = false;\n        for (int i = 0; i < len; i++) {\n            if
    (isLetter(arr[i]) && upper == false) {\n                upper = true;\n                string
    temp = arr[i].ToString().ToUpper();\n                arr = arr.ToList().Select(x
    => (char)x).ToArray();\n                arr[i - 1] = temp;\n            }\n            else
    if (isLetter(arr[i]) && upper == true) {\n                upper = false;\n                string
    temp = arr[i].ToString().ToLower();\n                arr = arr.ToList().Select(x
    => (char)x).ToArray();\n                arr[i - 1] = temp;\n            }\n            else
    {\n                arr = arr.ToList().Select(x => (char)x).ToArray();\n            }\n
    \       }\n        char[] arr2 = new char[arr.Length];\n        Array.Copy(arr,
    arr2, arr.Length);\n        Array.Reverse(arr2);\n        res = arr2.ToString();\n
    \       return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps9r95tn3.cs(27,17): error CS0103: The name ''isLetter'' does not exist
    in the current context

    /tmp/tmps9r95tn3.cs(31,30): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmps9r95tn3.cs(33,22): error CS0103: The name ''isLetter'' does not exist
    in the current context

    /tmp/tmps9r95tn3.cs(37,30): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    '
  timestamp: 1660015985
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        int length
    = s.Length;\n        char[] charArray = s.ToCharArray();\n        int index =
    0;\n        while (index < length) {\n            if (charArray[index] >= 'a'
    && charArray[index] <= 'z') {\n                if (charArray[index] >= 'A' &&
    charArray[index] <= 'Z') {\n                    charArray[index] ^= 0x20;\n                }
    else {\n                    charArray[index] ^= 0x20;\n                    charArray[index]
    ^= (charArray[index] - 0x20);\n                }\n            } else {\n                charArray[index]
    ^= 0x20;\n            }\n            index++;\n        }\n        return new string(charArray,
    0, index).ToUpper();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdft9f98_.cs(28,21): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpdft9f98_.cs(30,21): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpdft9f98_.cs(31,21): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpdft9f98_.cs(34,17): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015986
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s.Length
    == 0) return s;\n        char[] ca = s.ToCharArray();\n        StringBuilder sb
    = new StringBuilder();\n        foreach (char c in ca) {\n            if (Char.IsLetter(c))
    {\n                string tmp = s.ToLower();\n                tmp = tmp.Replace(c.ToString(),
    \"\").ToUpper();\n                sb.Append(tmp);\n            } else {\n                sb.Append(c);\n
    \           }\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <27d55800e5544b5c824f971f79b49a05>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <27d55800e5544b5c824f971f79b49a05>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015986
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var list
    = s.ToCharArray();\n        var result = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        var
    hash = new HashSet<char>(list);\n        var reversed = new StringBuilder();\n
    \       foreach (char c in list) {\n            if (hash.Contains(c)) {\n                if
    (c.Equals('@') && !hash.Contains('@')) {\n                    reversed.Append(c);\n
    \                   hash.Remove(c);\n                }\n                else if
    (c.Equals('@')) {\n                    reversed.Append('@');\n                    hash.Add('@');\n
    \               }\n                else {\n                    reversed.Append(c);\n
    \                   hash.Remove(c);\n                }\n            }\n            else
    {\n                reversed.Append(c);\n            }\n        }\n        if (hash.Count
    > 0) {\n            Debug.WriteLine(\"@ is in the hash and it's not in the original
    string\");\n        }\n        else {\n            Debug.WriteLine(\"@ is in the
    hash and not in the original string\");\n        }\n        return reversed.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "@ is in the hash and not in the original string\nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2ab3e59bf36b4ffd9d11e37633d3ccaf>:0
    \n@ is in the hash and not in the original string\nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2ab3e59bf36b4ffd9d11e37633d3ccaf>:0
    \n@ is in the hash and not in the original string\nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.F"
  stdout: ''
  timestamp: 1660015986
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var newString
    = \"\";\n        for(int i = 0; i <= s.Length; i++) {\n            if(Char.IsLetter(s[i]))
    {\n                newString += Char.ToUpper(s[i]);\n            } else {\n                newString
    += s[i];\n            }\n        }\n        \n        if(newString.Length == 0)
    {\n            newString = s.ToUpper();\n        }\n\n        return newString;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.Solve (System.String s) [0x0000c] in <c2f18ae9029944778272411ada137bb1>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <c2f18ae9029944778272411ada137bb1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was
    outside the bounds of the array.\n  at Problem.Solve (System.String s) [0x0000c]
    in <c2f18ae9029944778272411ada137bb1>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <c2f18ae9029944778272411ada137bb1>:0 \n"
  stdout: ''
  timestamp: 1660015986
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    result = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            char
    c = s[i];\n            string temp = \"\";\n            if (c == '#') {\n                temp
    = \"@\";\n                c = '@';\n            } else if (c == '@') {\n                temp
    = \"#\";\n                c = '#';\n            }\n            bool isInUpper
    = false;\n            bool isInLower = false;\n            if (c >= 'A' && c <=
    'Z') {\n                isInUpper = true;\n            } else if (c >= 'a' &&
    c <= 'z') {\n                isInLower = true;\n            }\n            if
    (isInUpper && isInLower) {\n                result = temp + result.ToUpper();\n
    \           } else if (isInUpper) {\n                result = temp + result.ToUpper();\n
    \           } else if (isInLower) {\n                result = temp + result.ToLower();\n
    \           } else {\n                result = temp + c;\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1d8c52bed674f00a58cdc881bfcd87f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1d8c52bed674f00a58cdc881bfcd87f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015986
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (String.IsNullOrEmpty(s))
    {\n            return s;\n        }\n        var builder = new StringBuilder();\n
    \       for (int i = 0; i < s.Length; i++) {\n            var c = s[i];\n            if
    (Char.IsLetter(c)) {\n                switch ((char) (int) c) {\n                    case
    (char) 97:\n                    case (char) 98:\n                    case (char)
    99:\n                    case (char) 100:\n                    case (char) 101:\n
    \                   case (char) 102:\n                    case (char) 103:\n                    case
    (char) 104:\n                    case (char) 105:\n                    case (char)
    106:\n                    case (char) 107:\n                    case (char) 108:\n
    \                   case (char) 109:\n                    case (char) 110:\n                    case
    (char) 111:\n                    case (char) 112:\n                    case (char)
    113:\n                    case (char) 114:\n                    case (char) 115:\n
    \                   case (char) 116:\n                    case (char) 117:\n                    case
    (char) 118:\n                    case (char) 119:\n                    case (char)
    120:\n                    case (char) 121:\n                    case (char) 122:\n
    \                   case (char) 123:\n                    case (char) 124:\n                    case
    (char) 125:\n                    case (char) 126:\n                    case (char)
    127:\n                        builder.Append((char) (char.ToUpper(s[i]) - 64));\n
    \                       break;\n                    case (char) 65:\n                    case
    (char) 66:\n                    case (char) 67:\n                    case (char)
    68:\n                    case (char) 69:\n                    case (char) 70:\n
    \                   case (char) 71:\n                    case (char) 72:\n                    case
    (char) 73:\n                    case (char) 74:\n                    case (char)
    75:\n                    case (char) 76:\n                    case (char) 77:\n
    \                   case (char) 78:\n                    case (char) 79:\n                    case
    (char) 80:\n                    case (char) 81:\n                    case (char)
    82:\n                    case (char) 83:\n                    case (char) 84:\n
    \                   case (char) 85:\n                    case (char) 86:\n                    case
    (char) 87:\n                    case (char) 88:\n                    case (char)
    89:\n                    case (char) 90:\n                    case (char) 91:\n
    \                   case (char) 92:\n                    case (char) 93:\n                    case
    (char) 94:\n                    case (char) 95:\n                    case (char)
    96:\n                    case (char) 97:\n                    case (char) 98:\n
    \                   case (char) 99:\n                    case (char) 100:\n                    case
    (char) 101:\n                    case (char) 102:\n                    case (char)
    103:\n                    case (char) 104:\n                    case (char) 105:\n
    \                   case (char) 106:\n                    case (char) 107:\n                    case
    (char) \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnheozh_7.cs(106,32): error CS1525: Invalid expression term ''}''

    /tmp/tmpnheozh_7.cs(106,32): error CS1003: Syntax error, '':'' expected

    /tmp/tmpnheozh_7.cs(108,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpnheozh_7.cs(119,2): error CS1513: } expected

    '
  timestamp: 1660015985
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        StringBuilder
    builder = new StringBuilder();\n\n        foreach (char c in s) {\n            char
    toUp = char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c);\n            builder.Append(toUp);\n
    \       }\n\n        return builder.ToString();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0d33091d786140148b353421f9c72ff0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0d33091d786140148b353421f9c72ff0>:0
    \n"
  stdout: ''
  timestamp: 1660015986
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        int len
    = s.Length;\n        string result = \"\";\n        if (len == 0) return result;\n
    \       string temp = \"\";\n        string temp2;\n        for (int i = 0; i
    < len; i++) {\n            temp = temp + s[i];\n            if (isLetter(s[i]))
    {\n                temp2 = temp;\n                temp = temp2.ToUpper();\n            }\n
    \           else {\n                temp2 = temp;\n                temp = temp2.ToLower();\n
    \           }\n        }\n        result = temp;\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbjxp15_1.cs(29,17): error CS0103: The name ''isLetter'' does not exist
    in the current context

    '
  timestamp: 1660015986
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var builder
    = new StringBuilder();\n        foreach (var character in s) {\n            if
    (char.IsLetter(character)) {\n                builder.Append(System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToUpperInvariant(character));\n
    \           }\n            else {\n                builder.Append(character);\n
    \           }\n        }\n        if (builder.Length == 0) {\n            return
    s;\n        }\n        builder.Append(System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToLowerInvariant(s[builder.Length
    - 1]));\n        return builder.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt6f_yeqa.cs(25,32): error CS1929: ''TextInfo'' does not contain a definition
    for ''ToUpperInvariant'' and the best extension method overload ''MemoryExtensions.ToUpperInvariant(ReadOnlySpan<char>,
    Span<char>)'' requires a receiver of type ''ReadOnlySpan<char>''

    /tmp/tmpt6f_yeqa.cs(34,24): error CS1929: ''TextInfo'' does not contain a definition
    for ''ToLowerInvariant'' and the best extension method overload ''MemoryExtensions.ToLowerInvariant(ReadOnlySpan<char>,
    Span<char>)'' requires a receiver of type ''ReadOnlySpan<char>''

    '
  timestamp: 1660015986
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var rs
    = new StringBuilder(s);\n        bool hasLetter = false;\n        foreach (char
    ch in s) {\n            if (char.IsLetter(ch)) {\n                hasLetter =
    true;\n                ReverseCase(rs, ch);\n            } else {\n                rs.Replace(ch,
    string.Empty);\n            }\n        }\n        if (!hasLetter)\n            ReverseCase(rs,
    ' ');\n        return rs.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphcagtn8g.cs(27,17): error CS0103: The name ''ReverseCase'' does not exist
    in the current context

    /tmp/tmphcagtn8g.cs(29,28): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmphcagtn8g.cs(33,13): error CS0103: The name ''ReverseCase'' does not exist
    in the current context

    '
  timestamp: 1660015986
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    result = \"\";\n        char[] chars = s.ToCharArray();\n        foreach (char
    c in chars) {\n            if (Char.IsLetter(c)) {\n                string tmp
    = char.ToString(c);\n                tmp = tmp + tmp.ToUpper();\n                tmp
    = tmp + tmp.ToLower();\n                result += tmp;\n            } else {\n
    \               result += c;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5ba30a42c59437299d069758a17d510>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5ba30a42c59437299d069758a17d510>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015986
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    result = s.ToLower();\n        bool hasLetter = false;\n        for (int i = 0;
    i < result.Length; i++) {\n            if (char.IsLetter(result[i])) {\n                hasLetter
    = true;\n                switch (result[i]) {\n                    case 'a':\n
    \                       result[i] = 'A';\n                        break;\n                    case
    'b':\n                        result[i] = 'B';\n                        break;\n
    \                   case 'c':\n                        result[i] = 'C';\n                        break;\n
    \                   case 'd':\n                        result[i] = 'D';\n                        break;\n
    \                   case 'e':\n                        result[i] = 'E';\n                        break;\n
    \                   case 'f':\n                        result[i] = 'F';\n                        break;\n
    \                   case 'g':\n                        result[i] = 'G';\n                        break;\n
    \                   case 'h':\n                        result[i] = 'H';\n                        break;\n
    \                   case 'i':\n                        result[i] = 'I';\n                        break;\n
    \                   case 'j':\n                        result[i] = 'J';\n                        break;\n
    \                   case 'k':\n                        result[i] = 'K';\n                        break;\n
    \                   case 'l':\n                        result[i] = 'L';\n                        break;\n
    \                   case 'm':\n                        result[i] = 'M';\n                        break;\n
    \                   case 'n':\n                        result[i] = 'N';\n                        break;\n
    \                   case 'o':\n                        result[i] = 'O';\n                        break;\n
    \                   case 'p':\n                        result[i] = 'P';\n                        break;\n
    \                   case 'q':\n                        result[i] = 'Q';\n                        break;\n
    \                   case 'r':\n                        result[i] = 'R';\n                        break;\n
    \                   case 's':\n                        result[i] = 'S';\n                        break;\n
    \                   case 't':\n                        result[i] = 'T';\n                        break;\n
    \                   case 'u':\n                        result[i] = 'U';\n                        break;\n
    \                   case 'v':\n                        result[i] = 'V';\n                        break;\n
    \                   case 'w':\n                        result[i] = 'W';\n                        break;\n
    \                   case 'x':\n                        result[i] = 'X';\n                        break;\n
    \                   case 'y':\n                        result[i] = 'Y';\n                        break;\n
    \                   case 'z':\n                        result[i] = 'Z';\n                        break;\n
    \               }\n            }\n            else {\n                result[i]
    = result[i].ToUpper();\n            }\n        }\n        if (hasLetter != true)
    {\n            result = \"#\" + result.Substring(1);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwgymlwx_.cs(29,25): error CS0200: Property or indexer ''string.this[int]''
    cannot be assigned to -- it is read only

    /tmp/tmpwgymlwx_.cs(32,25): error CS0200: Property or indexer ''string.this[int]''
    cannot be assigned to -- it is read only

    /tmp/tmpwgymlwx_.cs(35,25): error CS0200: Property or indexer ''string.this[int]''
    cannot be assigned to -- it is read only

    /tmp/tmpwgymlwx_.cs(38,25): error CS0200: Property or indexer ''string.this[int]''
    cannot be assigned to -- it is read only

    /tmp/tmpwgymlwx_.cs(41,25): error CS0200: Property or indexer ''string.this[int]''
    cannot be assigned to -- it is read only

    /tmp/tmpwgymlwx_.cs(44,25): error CS0200: Property or indexer ''string.this[int]''
    cannot be assigned to -- it is read only

    /tmp/tmpwgymlwx_.cs(47,25): error CS0200: Property or indexer ''string.this[int]''
    cannot be assigned to -- it is read only

    /tmp/tmpwgymlwx_.cs(50,25): error CS0200: Property or indexer ''string.this[int]''
    cannot be assigned to -- it is read only

    /tmp/tmpwgymlwx_.cs(53,25): error CS0200: Property or indexer ''string.this[int]''
    cannot be assigned to -- it is read only

    /tmp/tmpwgymlwx_.cs(56,25): error CS0200: Property or indexer ''string.this[int]''
    cannot be assigned to -- it is read only

    /tmp/tmpwgymlwx_.cs(59,25): error CS0200: Property or indexer ''string.this[int]''
    cannot be assigned to -- it is read only

    /tmp/tmpwgymlwx_.cs(62,25): error CS0200: Property or indexer ''string.this[int]''
    cannot be assigned to -- it is read only

    /tmp/tmpwgymlwx_.cs(65,25): error CS0200: Property or indexer ''string.this[int]''
    cannot be assigned to -- it is read only

    /tmp/tmpwgymlwx_.cs(68,25): error CS0200: Property or indexer ''string.this[int]''
    cannot be assigned to -- it is read only

    /tmp/tmpwgymlwx_.cs(71,25): error CS0200: Property or indexer ''string.this[int]''
    cannot be assigned to -- it is read only

    /tmp/tmpwgymlwx_.cs(74,25): error CS0200: Property or indexer ''string.this[int]''
    cannot be '
  timestamp: 1660015986
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    newString = \"\";\n        foreach (char c in s) {\n            if ((c >= 'A')
    && (c <= 'Z')) {\n                c = char.ToUpper(c);\n            } else if
    ((c >= 'a') && (c <= 'z')) {\n                c = char.ToLower(c);\n            }\n
    \           newString += c;\n        }\n        return newString;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfylzwpk3.cs(25,17): error CS1656: Cannot assign to ''c'' because it is
    a ''foreach iteration variable''

    /tmp/tmpfylzwpk3.cs(27,17): error CS1656: Cannot assign to ''c'' because it is
    a ''foreach iteration variable''

    '
  timestamp: 1660015986
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var list
    = s.ToCharArray();\n        var length = list.Length;\n        if (length == 0)
    {\n            return s;\n        }\n        else if (length == 1) {\n            if
    (list[0] == 'a' || list[0] == 'A') {\n                return list.ToString().ToLower().Replace('a',
    'A');\n            }\n            return list.ToString().ToLower().Replace('e',
    'E');\n        }\n\n        var newList = new List<char>(length);\n        var
    startIndex = 0;\n        var endIndex = list.Length - 1;\n\n        while (startIndex
    < endIndex) {\n            var currentChar = list[startIndex];\n            var
    nextChar = list[startIndex + 1];\n            if (currentChar == 'a' || currentChar
    == 'A') {\n                newList.Insert(0, currentChar);\n            }\n            if
    (nextChar == 'e' || nextChar == 'E') {\n                newList.Insert(newList.Count
    - 1, nextChar);\n            }\n            startIndex += 1;\n            endIndex
    -= 1;\n        }\n        return string.Join(\"\", newList);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b754c2ff06c0406b81dbe2398330eac9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b754c2ff06c0406b81dbe2398330eac9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015986
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    result = \"\";\n        foreach (char c in s)\n        {\n            result +=
    c.ToString().ToUpper();\n            if (c.ToString().ToLower() != c)\n            {\n
    \               result += c.ToString().ToLower();\n            }\n        }\n
    \       if (result.Contains(\"#\"))\n        {\n            result = result.Replace(\"#\",
    \"\");\n        }\n        else\n        {\n            result = result.Replace(\"@\",
    \"\");\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd95yoawy.cs(26,17): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''string'' and ''char''

    '
  timestamp: 1660015986
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s.Length
    == 0) return s;\n        if (s.Length == 1) return s;\n        var r = new StringBuilder(s.Length);\n
    \       for (int i = 0; i < s.Length; i++) {\n            if (char.IsLetter(s[i]))
    {\n                if (i > 0 && char.IsLetter(s[i - 1])) r.Insert(0, (char)((s[i
    - 1] - 64) + 65));\n                else r.Insert(0, s[i - 1]);\n            }
    else {\n                r.Insert(0, s[i]);\n            }\n        }\n        return
    r.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.Solve (System.String s) [0x00087] in <b2edc44ce53c47339a19ba600ba09bdf>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <b2edc44ce53c47339a19ba600ba09bdf>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was
    outside the bounds of the array.\n  at Problem.Solve (System.String s) [0x00087]
    in <b2edc44ce53c47339a19ba600ba09bdf>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <b2edc44ce53c47339a19ba600ba09bdf>:0 \n"
  stdout: ''
  timestamp: 1660015986
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var stringbuilder
    = new StringBuilder();\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                stringbuilder.Replace(c.ToString(), Char.ToUpper(c));\n            }
    else {\n                stringbuilder.Append(c);\n            }\n        }\n        return
    stringbuilder.ToString().ToLower();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8d623y2z.cs(25,53): error CS1503: Argument 2: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1660015986
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        StringBuilder
    sb = new StringBuilder();\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                sb.Append(Char.ToUpper(c));\n            }\n            else
    {\n                sb.Append(c);\n            }\n        }\n        return sb.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <642c58c8d494479f8276ab8469964b5d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <642c58c8d494479f8276ab8469964b5d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015986
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        char[]
    chars = s.ToCharArray();\n        Stack<char> stack = new Stack<char>();\n        string
    result = \"\";\n        for (int i = 0; i < chars.Length; i++) {\n            char
    c = chars[i];\n            bool letter = char.IsLetter(c); // check if char is
    a letter\n            if (letter && char.IsUpper(c)) {\n                string
    temp = char.ToLower(c).ToString() + char.ToUpper(c);\n                chars[i]
    = temp[0]; // change first char to upper case\n            } else if (letter &&
    !char.IsUpper(c)) {\n                string temp = char.ToUpper(c).ToString()
    + char.ToLower(c);\n                chars[i] = temp[0]; // change first char to
    lower case\n            } else if (letter) {\n                chars[i] = c.ToString();
    // keep the first char as it is\n            }\n            if (stack.Count ==
    0) {\n                result = result + c;\n            } else if (stack.Count
    == 1) {\n                result = result + stack.Count.ToString() + c; // combine
    count with char\n                stack.Pop();\n            } else if (char.IsUpper(c))
    {\n                result = result + stack.Count.ToString() + c.ToLower();\n                stack.Pop();\n
    \           } else {\n                result = result + stack.Count.ToString()
    + c.ToUpper();\n                stack.Pop();\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj7odkxre.cs(35,28): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpj7odkxre.cs(43,62): error CS1501: No overload for method ''ToLower'' takes
    0 arguments

    /tmp/tmpj7odkxre.cs(46,62): error CS1501: No overload for method ''ToUpper'' takes
    0 arguments

    '
  timestamp: 1660015986
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    reverse = \"\";\n        string lowerLetters = new string(Enumerable.Repeat((char)('a'),26).Select(x
    => (char) x).ToArray());\n        string upperLetters = new string(Enumerable.Repeat((char)('A'),26).Select(x
    => (char) x).ToArray());\n        for(int i = 0; i < s.Length; i++) {\n            if(s.Substring(i,
    1).Equals(lowerLetters)) {\n                if(i == s.Length - 1) {\n                    reverse
    = upperLetters + s.Substring(0, i);\n                } else {\n                    reverse
    = upperLetters + s.Substring(0, i) + s.Substring(i+1, 1);\n                }\n
    \           } else if (s.Substring(i, 1).Equals(upperLetters)) {\n                if(i
    == s.Length - 1) {\n                    reverse = lowerLetters + s.Substring(0,
    i);\n                } else {\n                    reverse = lowerLetters + s.Substring(0,
    i) + s.Substring(i+1, 1);\n                }\n            } else {\n                reverse
    = s.Substring(i) + reverse;\n            }\n        }\n        return reverse;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bc4ffe075a7147149705dfbd0b33a6ef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bc4ffe075a7147149705dfbd0b33a6ef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015986
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        char[]
    arr = s.ToCharArray();\n        string ans = \"\";\n        if (arr.Count() ==
    0)\n            return s;\n        bool firstLetter = true;\n        foreach (char
    c in arr) {\n            if (char.IsLetter(c)) {\n                if (firstLetter)\n
    \                   ans += char.ToUpper(c);\n                else\n                    ans
    += char.ToLower(c);\n                firstLetter = false;\n            }\n        }\n
    \       return ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <25346dd48df64795ae8df9355e80e192>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <25346dd48df64795ae8df9355e80e192>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015986
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        HashSet<Character>
    hashSet = new HashSet<Character>();\n        foreach(char c in s) {\n            if(char.IsLetter(c))
    {\n                hashSet.add(c);\n            } else {\n                hashSet.add(char.ToUpper(c));\n
    \               hashSet.add(char.ToLower(c));\n            }\n        }\n        return
    s.Replace(new StringBuilder(s).ToCharArray().Where(c => hashSet.Contains(c)).ToArray(),
    new StringBuilder(s).ToCharArray().Where(c => !hashSet.Contains(c)).ToArray());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzncsdwuc.cs(22,17): error CS0246: The type or namespace name ''Character''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpzncsdwuc.cs(22,50): error CS0246: The type or namespace name ''Character''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpzncsdwuc.cs(25,25): error CS1061: ''HashSet<Character>'' does not contain
    a definition for ''add'' and no accessible extension method ''add'' accepting
    a first argument of type ''HashSet<Character>'' could be found (are you missing
    a using directive or an assembly reference?)

    /tmp/tmpzncsdwuc.cs(27,25): error CS1061: ''HashSet<Character>'' does not contain
    a definition for ''add'' and no accessible extension method ''add'' accepting
    a first argument of type ''HashSet<Character>'' could be found (are you missing
    a using directive or an assembly reference?)

    /tmp/tmpzncsdwuc.cs(28,25): error CS1061: ''HashSet<Character>'' does not contain
    a definition for ''add'' and no accessible extension method ''add'' accepting
    a first argument of type ''HashSet<Character>'' could be found (are you missing
    a using directive or an assembly reference?)

    /tmp/tmpzncsdwuc.cs(31,47): error CS1061: ''StringBuilder'' does not contain a
    definition for ''ToCharArray'' and no accessible extension method ''ToCharArray''
    accepting a first argument of type ''StringBuilder'' could be found (are you missing
    a using directive or an assembly reference?)

    /tmp/tmpzncsdwuc.cs(31,125): error CS1061: ''StringBuilder'' does not contain
    a definition for ''ToCharArray'' and no accessible extension method ''ToCharArray''
    accepting a first argument of type ''StringBuilder'' could be found (are you missing
    a using directive or an assembly reference?)

    '
  timestamp: 1660015986
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    res = string.Empty;\n        for (int i = 0; i < s.Length; i++) {\n            if
    (char.IsLetter(s[i])) {\n                res = s.Replace(s[i].ToString(), s[i].ToString().ToUpper()).Replace(s[i].ToString(),
    s[i].ToString().ToLower());\n            }\n            else {\n                res
    = s;\n            }\n        }\n        return res;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46a8436ed3ae4001a7d202cf24304bfb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46a8436ed3ae4001a7d202cf24304bfb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015986
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        int l =
    0;\n        while (l < s.Length && s[l].Equals('A'))\n            l++;\n        if
    (l == 0)\n            throw new Exception(\"String has no letters\");\n        if
    (l > s.Length)\n            throw new Exception(\"String too long\");\n        char
    first = s[l];\n        int n = s.Length - 1;\n        while (n > l && s[n - 1].Equals('A'))\n
    \           n--;\n        if (n > l)\n            throw new Exception(\"String
    too long\");\n        char second = s[n - 1];\n        if (second.Equals('a'))
    {\n            if (first.Equals('A'))\n                return Reverse(s, l, n
    - 1);\n            else if (first.Equals('a')) {\n                return Reverse(s,
    l + 1, n - 1);\n            }\n        }\n        else if (second.Equals('A'))
    {\n            if (first.Equals('a'))\n                return Reverse(s, l + 1,
    n);\n            else if (first.Equals('A')) {\n                return Reverse(s,
    l, n - 1);\n            }\n        }\n        else\n            return s;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1on9i3km.cs(38,24): error CS0103: The name ''Reverse'' does not exist
    in the current context

    /tmp/tmp1on9i3km.cs(40,24): error CS0103: The name ''Reverse'' does not exist
    in the current context

    /tmp/tmp1on9i3km.cs(45,24): error CS0103: The name ''Reverse'' does not exist
    in the current context

    /tmp/tmp1on9i3km.cs(47,24): error CS0103: The name ''Reverse'' does not exist
    in the current context

    /tmp/tmp1on9i3km.cs(21,26): error CS0161: ''Problem.Solve(string)'': not all code
    paths return a value

    '
  timestamp: 1660015986
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    result = \"\";\n        foreach (char ch in s) {\n            if (char.IsLetter(ch))
    {\n                result += char.ToUpper(ch);\n            } else {\n                result
    += ch;\n            }\n        }\n        if (s.Length > 0) {\n            return
    result;\n        }\n        return s.ToUpper();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f69819bcd2f4b1da02c9191d5dcea65>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f69819bcd2f4b1da02c9191d5dcea65>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015987
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Your
    code here\n        return s.Aggregate(\n            (string result, char ch) =>
    {\n                if(char.IsLetter(ch))\n                    result = Char.ToUpper(ch)
    + result + Char.ToLower(ch);\n                else\n                    result
    = ch + result;\n                return result;\n            }\n        );\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps8mzf_td.cs(23,18): error CS0411: The type arguments for method ''Enumerable.Aggregate<TSource>(IEnumerable<TSource>,
    Func<TSource, TSource, TSource>)'' cannot be inferred from the usage. Try specifying
    the type arguments explicitly.

    '
  timestamp: 1660015987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        char[]
    chars = s.ToCharArray();\n        Array.Sort(chars);\n        string result =
    \"\";\n        int j = 0;\n        for (int i = 0; i < s.Length; i++) {\n            if
    (chars[i] == '@') {\n                j++;\n                if (j == 1) {\n                    result
    += chars[i];\n                }\n            } else if (chars[i] == '#') {\n                j--;\n
    \               if (j == 0) {\n                    result += chars[i];\n                }\n
    \           } else {\n                result += chars[i];\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b442877a7dea4f7aaa1b94127d38987c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b442877a7dea4f7aaa1b94127d38987c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    newStr = \"\";\n        foreach(char c in s) {\n            if(char.IsLetter(c))
    {\n                if(char.IsLower(c)) {\n                    newStr += char.ToUpper(c);\n
    \               } else {\n                    newStr += char.ToLower(c);\n                }\n
    \           } else {\n                newStr += c;\n            }\n        }\n
    \       return newStr;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fe6d65aeb2cf498483840a2aa2a45b25>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fe6d65aeb2cf498483840a2aa2a45b25>:0
    \n"
  stdout: ''
  timestamp: 1660015987
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        char[]
    chars = s.ToCharArray();\n        string result = \"\";\n\n        foreach (char
    c in chars) {\n            if (char.IsLetter(c)) {\n                string temp
    = c;\n                string reversed = new StringBuilder(temp).Reverse().ToString();\n
    \               result = reversed + result;\n            } else {\n                result
    = c + result;\n            }\n        }\n\n        return new StringBuilder(result).Reverse().ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprkndbp6w.cs(27,31): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmprkndbp6w.cs(28,59): error CS1061: ''StringBuilder'' does not contain a
    definition for ''Reverse'' and no accessible extension method ''Reverse'' accepting
    a first argument of type ''StringBuilder'' could be found (are you missing a using
    directive or an assembly reference?)

    /tmp/tmprkndbp6w.cs(35,42): error CS1061: ''StringBuilder'' does not contain a
    definition for ''Reverse'' and no accessible extension method ''Reverse'' accepting
    a first argument of type ''StringBuilder'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1660015987
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    ret=\"\";\n        for (int i = 0; i < s.Length; i++)\n            if (char.IsLetter(s[i]))\n
    \           {\n                ret = char.ToUpper(s[i]) + char.ToLower(ret);\n
    \           }\n            else\n                ret += s[i];\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp_8zclk_.cs(26,57): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    '
  timestamp: 1660015987
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s ==
    null || s.Length == 0) return s;\n        if (s.Any(x => x != s[s.Length - 1]))
    s = s.Substring(0, s.Length - 1) + new char[] { s[s.Length - 1] }\n        var
    rs = \"\";\n        for (var i = 0; i < s.Length; i++) {\n            if (char.IsLetter(s[i]))
    {\n                switch (s[i]) {\n                    case 'A': rs += \"a\";
    break;\n                    case 'B': rs += \"b\"; break;\n                    case
    'C': rs += \"c\"; break;\n                    case 'D': rs += \"d\"; break;\n
    \                   case 'E': rs += \"e\"; break;\n                    case 'F':
    rs += \"f\"; break;\n                    case 'G': rs += \"g\"; break;\n                    case
    'H': rs += \"h\"; break;\n                    case 'I': rs += \"i\"; break;\n
    \                   case 'J': rs += \"j\"; break;\n                    case 'K':
    rs += \"k\"; break;\n                    case 'L': rs += \"l\"; break;\n                    case
    'M': rs += \"m\"; break;\n                    case 'N': rs += \"n\"; break;\n
    \                   case 'O': rs += \"o\"; break;\n                    case 'P':
    rs += \"p\"; break;\n                    case 'Q': rs += \"q\"; break;\n                    case
    'R': rs += \"r\"; break;\n                    case 'S': rs += \"s\"; break;\n
    \                   case 'T': rs += \"t\"; break;\n                    case 'U':
    rs += \"u\"; break;\n                    case 'V': rs += \"v\"; break;\n                    case
    'W': rs += \"w\"; break;\n                    case 'X': rs += \"x\"; break;\n
    \                   case 'Y': rs += \"y\"; break;\n                    case 'Z':
    rs += \"z\"; break;\n                    default: rs += s[i];\n                }\n
    \           }\n            else {\n                rs += s[i];\n            }\n
    \       }\n        return rs;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmiqiros1.cs(23,112): error CS1002: ; expected

    '
  timestamp: 1660015986
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s.Length
    == 0) return s;\n        if (s.All(char.IsLetter)) return SolveWithLetters(s);\n
    \       return SolveWithNoLetters(s);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2cwr1jch.cs(23,42): error CS0103: The name ''SolveWithLetters'' does not
    exist in the current context

    /tmp/tmp2cwr1jch.cs(24,16): error CS0103: The name ''SolveWithNoLetters'' does
    not exist in the current context

    '
  timestamp: 1660015987
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    result;\n        if (s == \"\") {\n            result = \"\";\n        } else
    {\n            char[] chars = s.ToCharArray();\n            for (int i = 0; i
    < chars.Length; i++) {\n                if (chars[i] >= 'a' && chars[i] <= 'z')
    {\n                    chars[i] = chars[i] - ('a' - 'A');\n                } else
    if (chars[i] >= 'A' && chars[i] <= 'Z') {\n                    chars[i] = chars[i]
    + ('a' - 'A');\n                }\n            }\n            result = new string(chars);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptqu3eel1.cs(29,32): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmptqu3eel1.cs(31,32): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015987
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (string.IsNullOrEmpty(s))\n
    \           return s;\n\n        var reversed = new StringBuilder();\n        var
    isLowerCase = false;\n        for (int i = 0; i < s.Length; i++) {\n            char
    c = s[i];\n            if (char.IsLetter(c)) {\n                if (isLowerCase
    != (s.ToLower(c) == s))\n                    reversed.Append(char.ToLower(c));\n
    \               else\n                    reversed.Append(char.ToUpper(c));\n
    \               isLowerCase = s.ToLower(c) == s;\n            }\n            else\n
    \               reversed.Append(c);\n        }\n        if (reversed.Length ==
    0)\n            return s;\n\n        return reversed.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc53aytfe.cs(30,47): error CS1503: Argument 1: cannot convert from ''char''
    to ''System.Globalization.CultureInfo''

    /tmp/tmpc53aytfe.cs(34,41): error CS1503: Argument 1: cannot convert from ''char''
    to ''System.Globalization.CultureInfo''

    '
  timestamp: 1660015987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                result += char.ToLower(c);\n            }\n            else
    {\n                result += c;\n            }\n        }\n        result = result.ToUpper();\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <060b4fd93ca34939bece2c3d50fb9859>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <060b4fd93ca34939bece2c3d50fb9859>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015987
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        bool bLetter
    = true;\n        string sResult = \"\";\n        for(int i=0;i<s.Length;i++) {\n
    \           if(char.IsLetter(s[i])) {\n                if(bLetter) {\n                    sResult
    = s[i].ToUpper() + sResult;\n                } else {\n                    sResult
    = s[i].ToLower() + sResult;\n                }\n                bLetter = !bLetter;\n
    \           } else {\n                sResult = sResult + s[i];\n            }\n
    \       }\n        return sResult;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpey0cmyk2.cs(27,36): error CS1501: No overload for method ''ToUpper'' takes
    0 arguments

    /tmp/tmpey0cmyk2.cs(29,36): error CS1501: No overload for method ''ToLower'' takes
    0 arguments

    '
  timestamp: 1660015987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (string.IsNullOrEmpty(s))\n
    \           return s;\n        char[] arr = s.ToCharArray();\n        Array.Sort(arr);\n
    \       string ret = \"\";\n        for (int i = 0; i < arr.Length; i++) {\n            if
    (arr[i] < 'a' || arr[i] > 'z')\n                ret += char.ToUpper(arr[i]);\n
    \           else\n                ret += char.ToLower(arr[i]);\n        }\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9b841c078bc343989006c1384f31fe7b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9b841c078bc343989006c1384f31fe7b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015987
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        HashSet<string>
    s = new HashSet<string>();\n        foreach(char c in s) {\n            if(c ==
    'a') s.add(\"A\");\n            else if(c == 'b') s.add(\"B\");\n            else
    if(c == 'c') s.add(\"C\");\n            else if(c == 'd') s.add(\"D\");\n            else
    if(c == 'e') s.add(\"E\");\n            else if(c == 'f') s.add(\"F\");\n            else
    if(c == 'g') s.add(\"G\");\n            else if(c == 'h') s.add(\"H\");\n            else
    if(c == 'i') s.add(\"I\");\n            else if(c == 'j') s.add(\"J\");\n            else
    if(c == 'k') s.add(\"K\");\n            else if(c == 'l') s.add(\"L\");\n            else
    if(c == 'm') s.add(\"M\");\n            else if(c == 'n') s.add(\"N\");\n            else
    if(c == 'o') s.add(\"O\");\n            else if(c == 'p') s.add(\"P\");\n            else
    if(c == 'q') s.add(\"Q\");\n            else if(c == 'r') s.add(\"R\");\n            else
    if(c == 's') s.add(\"S\");\n            else if(c == 't') s.add(\"T\");\n            else
    if(c == 'u') s.add(\"U\");\n            else if(c == 'v') s.add(\"V\");\n            else
    if(c == 'w') s.add(\"W\");\n            else if(c == 'x') s.add(\"X\");\n            else
    if(c == 'y') s.add(\"Y\");\n            else if(c == 'z') s.add(\"Z\");\n            else
    if(c == 'A') s.add(\"a\");\n            else if(c == 'B') s.add(\"b\");\n            else
    if(c == 'C') s.add(\"c\");\n            else if(c == 'D') s.add(\"d\");\n            else
    if(c == 'E') s.add(\"e\");\n            else if(c == 'F') s.add(\"f\");\n            else
    if(c == 'G') s.add(\"g\");\n            else if(c == 'H') s.add(\"h\");\n            else
    if(c == 'I') s.add(\"i\");\n            else if(c == 'J') s.add(\"j\");\n            else
    if(c == 'K') s.add(\"k\");\n            else if(c == 'L') s.add(\"l\");\n            else
    if(c == 'M') s.add(\"m\");\n            else if(c == 'N') s.add(\"n\");\n            else
    if(c == 'O') s.add(\"o\");\n            else if(c == 'P') s.add(\"p\");\n            else
    if(c == 'Q') s.add(\"q\");\n            else if(c == 'R') s.add(\"r\");\n            else
    if(c == 'S') s.add(\"s\");\n\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqjijv3m9.cs(71,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpqjijv3m9.cs(82,2): error CS1513: } expected

    '
  timestamp: 1660015987
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        char[]
    arr = s.ToCharArray();\n        foreach (char c in arr) {\n            bool letter
    = IsLetter(arr[c]);\n            if (letter) {\n                string upper =
    arr[c].ToString().ToUpper();\n                string lower = arr[c].ToString().ToLower();\n
    \               char x = arr[c];\n                arr[c] = upper;\n                arr[c]
    = lower;\n                arr[c] = x;\n            }\n        }\n        return
    new string(arr);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqkuvd3y1.cs(24,27): error CS0103: The name ''IsLetter'' does not exist
    in the current context

    /tmp/tmpqkuvd3y1.cs(29,26): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpqkuvd3y1.cs(30,26): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    '
  timestamp: 1660015987
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    t = s.ToLower();\n        char[] cArr = t.ToCharArray();\n        List<char> l
    = new List<char>();\n        for(int i = 0; i < cArr.Length; i++) {\n            l.Add(cArr[i]);\n
    \       }\n        if(l.Count == 0) {\n            return t;\n        }\n        List<int>
    li = new List<int>();\n        for(int i = 0; i < l.Count; i++) {\n            li.Add(l.IndexOf(cArr[i]));\n
    \       }\n        while(li.Count > 0) {\n            if(li.Count == 1) {\n                if(li.First()
    == l.Count) {\n                    l.RemoveAt(li.First());\n                }
    else {\n                    l.RemoveAt(li.First() - 1);\n                    li.RemoveAt(0);\n
    \               }\n            } else {\n                li.Remove(li.First()
    - 1);\n            }\n        }\n        return string.Join(\"\", l);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1660015992
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    result = \"\";\n        bool changed = false;\n        for (int i = 0; i < s.Length;
    i++) {\n            if (char.IsLetter(s[i])) {\n                result = result.ToUpper();\n
    \               changed = true;\n            } else {\n                result
    = result.ToLower();\n                changed = true;\n            }\n        }\n
    \       if (changed) {\n            return result;\n        }\n        return
    s.ToLower();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff96da8eef2842e8ac178002a8a1561e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff96da8eef2842e8ac178002a8a1561e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015987
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        char[]
    charArray = s.ToCharArray();\n        Array.Sort(charArray);\n        string chars
    = new string(charArray);\n        if (chars.All(x => chars.IndexOf(x) < chars.IndexOf(Char.Parse(x.ToString()))
    >= 0))\n            chars = chars.Replace(char.Parse(Char.Parse(x.ToString()).ToString())
    + x.ToString(), x.ToString());\n        else\n            chars = chars.Replace(char.Parse(x.ToString()).ToString()
    + char.Parse(x.ToString()), x.ToString());\n        return new string(charArray);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp_xxbyp7.cs(25,28): error CS0019: Operator ''>='' cannot be applied to
    operands of type ''bool'' and ''int''

    /tmp/tmpp_xxbyp7.cs(26,57): error CS0103: The name ''x'' does not exist in the
    current context

    /tmp/tmpp_xxbyp7.cs(26,85): error CS0103: The name ''x'' does not exist in the
    current context

    /tmp/tmpp_xxbyp7.cs(26,99): error CS0103: The name ''x'' does not exist in the
    current context

    /tmp/tmpp_xxbyp7.cs(28,46): error CS0103: The name ''x'' does not exist in the
    current context

    /tmp/tmpp_xxbyp7.cs(28,84): error CS0103: The name ''x'' does not exist in the
    current context

    /tmp/tmpp_xxbyp7.cs(28,99): error CS0103: The name ''x'' does not exist in the
    current context

    '
  timestamp: 1660015987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Your
    code goes here\n        string result = \"\";\n        foreach(char c in s) {\n
    \           if(c>='a' && c<='z')\n                result += (char)(c - 32);\n
    \           else\n                result += c;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <26e61b223ae04b5ca13207244c05b5bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <26e61b223ae04b5ca13207244c05b5bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015988
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        bool upper
    = false;\n        bool lower = false;\n        if (s.Contains(' ')) {\n            return
    Solve(s.Replace(\" \", string.Empty));\n        }\n        foreach (char c in
    s) {\n            if (char.IsLetter(c)) {\n                if (upper) {\n                    s
    = s.Replace(c, char.ToUpper(c));\n                } else {\n                    s
    = s.Replace(c, char.ToLower(c));\n                }\n            } else if (char.IsNumber(c))
    {\n                if (!lower && c > '9') {\n                    s = s.Replace(c,
    ((int)c - (int)'9') + \"0\");\n                } else if (lower && c < '9') {\n
    \                   s = s.Replace(c, ((int)c + (int)'9') + \"0\");\n                }\n
    \               lower = false;\n                upper = false;\n            }
    else if (char.IsUpper(c)) {\n                upper = true;\n            } else
    if (char.IsLower(c)) {\n                lower = true;\n            }\n        }\n
    \       return s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9ulbyrt2.cs(36,38): error CS1503: Argument 2: cannot convert from ''string''
    to ''char''

    /tmp/tmp9ulbyrt2.cs(38,38): error CS1503: Argument 2: cannot convert from ''string''
    to ''char''

    '
  timestamp: 1660015987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        return
    string.Concat(s.Select(c => char.IsLetter(char.ToLower(c)) ? char.ToUpper(c) :
    c));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8375f83ad46e41db8631d498d2c0be2b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8375f83ad46e41db8631d498d2c0be2b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015988
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var result
    = new StringBuilder();\n\n        foreach (char c in s) {\n            switch
    (c) {\n                case 'A':\n                case 'a':\n                    result.Append(\"B\");\n
    \                   break;\n                case 'B':\n                case 'b':\n
    \                   result.Append(\"a\");\n                    break;\n                case
    'C':\n                case 'c':\n                    result.Append(\"d\");\n                    break;\n
    \               case 'D':\n                case 'd':\n                    result.Append(\"c\");\n
    \                   break;\n                case 'E':\n                case 'e':\n
    \                   result.Append(\"f\");\n                    break;\n                case
    'F':\n                case 'f':\n                    result.Append(\"e\");\n                    break;\n
    \               case 'G':\n                case 'g':\n                    result.Append(\"g\");\n
    \                   break;\n                case 'H':\n                case 'h':\n
    \                   result.Append(\"h\");\n                    break;\n                case
    'I':\n                case 'i':\n                    result.Append(\"i\");\n                    break;\n
    \               case 'J':\n                case 'j':\n                    result.Append(\"j\");\n
    \                   break;\n                case 'K':\n                case 'k':\n
    \                   result.Append(\"k\");\n                    break;\n                case
    'L':\n                case 'l':\n                    result.Append(\"l\");\n                    break;\n
    \               case 'M':\n                case 'm':\n                    result.Append(\"m\");\n
    \                   break;\n                case 'N':\n                case 'n':\n
    \                   result.Append(\"n\");\n                    break;\n                case
    'O':\n                case 'o':\n                    result.Append(\"o\");\n                    break;\n
    \               case 'P':\n                case 'p':\n                    result.Append(\"p\");\n
    \                   break;\n                case 'Q':\n                case 'q':\n
    \                   result.Append(\"q\");\n                    break;\n                case
    'R':\n                case 'r':\n                    result.Append(\"r\");\n                    break;\n
    \               case 'S':\n                case 's':\n                    result.Append(\"s\");\n
    \                   break;\n                case 'T':\n                case 't':\n
    \                   result.Append(\"t\");\n                    break;\n                case
    'U':\n                case 'u':\n                    result.Append(\"u\");\n                    break;\n
    \               case 'V':\n                case 'v':\n                    result.Append(\"v\");\n
    \                   break;\n                case 'W':\n                case 'w':\n
    \                   result.Append(\"w\");\n                    break;\n                case
    'X':\n                case 'x':\n                    result.Append(\"x\");\n                    break;\n
    \               case 'Y':\n                case 'y':\n                    result.Append(\"y\");\n
    \                   break;\n                case 'Z':\n                case 'z':\n
    \                   result.Append(\"z\");\n                    break;\n                case
    '0':\n                case '1':\n                case '2':\n                case
    '3':\n                case '4':\n                case '5':\n                case
    '6':\n                case '7':\n                case '8':\n                case
    '9':\n                    result.Append(c);\n                    break;\n                default:\n
    \                   result.Append(c);\n                    break;\n            }\n
    \       }\n\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsqn9q4e4.cs(21,26): error CS0161: ''Problem.Solve(string)'': not all code
    paths return a value

    '
  timestamp: 1660015987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (string.IsNullOrEmpty(s))\n
    \           throw new ArgumentException(\"s must not be null or empty\", \"s\");\n\n
    \       // get all letters from string\n        var letters = s.ToCharArray().Where(x
    => char.IsLetter(x)).ToList();\n\n        // if there are no letters, return original
    string\n        if (letters.Count == 0)\n            return s;\n\n        // if
    we get here then we got letters in s\n        // reverse letters in s\n        var
    reversed = new char[s.Length];\n        int i = 0;\n        int k = 0;\n        foreach
    (var c in s) {\n            if (char.IsLetter(c)) {\n                // letters
    in reverse order\n                reversed[i] = char.ToUpper(c);\n                reversed[k++]
    = char.ToLower(c);\n            } else {\n                reversed[i] = c;\n                k++;\n
    \           }\n            i++;\n        }\n\n        // join reversed string
    back into string\n        return string.Join(\"\", string.Join(\"\", letters));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3546d792571b43f995e630d35d876022>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3546d792571b43f995e630d35d876022>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015988
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    result = \"\";\n        foreach (char letter in s)\n        {\n            if
    (char.IsLetter(letter))\n            {\n                result = result + char.ToUpper(letter);\n
    \           }\n            else\n            {\n                result = result
    + char.ToLower(letter);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e57363707a4c401cbc4db3250d7eed67>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e57363707a4c401cbc4db3250d7eed67>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015988
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var builder
    = new StringBuilder(s);\n        var letterCount = s.Count();\n        var toUpper
    = s.ToUpper();\n        var toLower = s.ToLower();\n        var stringList = new[]
    {toUpper, toLower};\n        stringList.SelectMany(letter => letter)\n            .Where(letter
    => builder != null && builder.Contains(letter))\n            .ToList()\n            .ForEach(letter
    => builder.Replace(letter, string.Empty));\n        return builder.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb38cqq8k.cs(28,49): error CS1929: ''StringBuilder'' does not contain a
    definition for ''Contains'' and the best extension method overload ''ParallelEnumerable.Contains<char>(ParallelQuery<char>,
    char)'' requires a receiver of type ''ParallelQuery<char>''

    '
  timestamp: 1660015987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        bool isLetter
    = true;\n        for (int i = 0; i < s.Length; i++)\n        {\n            if
    (s[i] != '#') //if the string contains at least one letter\n            {\n                isLetter
    = false; // if not, the string is not all letters \n            }\n            else
    if (s[i] == '#')\n            {\n                if (isLetter == true)\n                {\n
    \                   isLetter = false; // if the string is all letters, reverse
    it\n                }\n            }\n        }\n        if (isLetter == true)\n
    \       {\n            char[] chars = s.ToCharArray();\n            Array.Reverse(chars);\n
    \           return new string(chars);\n        }\n        else\n        {\n            char[]
    chars = s.ToCharArray();\n            Array.Reverse(chars);\n            return
    new string(chars);\n        }\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d4a545153404ae3a27b0e2b91ec3660>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d4a545153404ae3a27b0e2b91ec3660>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015988
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    result = \"\";\n        bool isLetter = false;\n        foreach(char c in s) {\n
    \           if(!isLetter && char.IsLetter(c)) {\n                result += char.ToUpper(c);\n
    \               isLetter = true;\n            }\n            else if(isLetter
    && char.IsLetter(c)) {\n                result += char.ToLower(c);\n                isLetter
    = false;\n            }\n            else {\n                result += c;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <848c509a44e5456daf8e3adbbc6c6ceb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <848c509a44e5456daf8e3adbbc6c6ceb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015988
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var isLetter
    = new bool[26];\n        int counter = 0;\n        foreach(var c in s) {\n            if
    (char.IsLetter(c))\n                isLetter[c - 'a'] = true;\n            else\n
    \               isLetter[c - 'a'] = false;\n        }\n        StringBuilder sb
    = new StringBuilder(s.Length);\n        foreach (var c in s) {\n            if
    (char.IsLetter(c)) {\n                sb.Append(isLetter[c - 'a'] ? c : char.ToUpper(c));\n
    \               counter++;\n            } else {\n                sb.Append(c);\n
    \               counter++;\n            }\n        }\n        if (counter == 0)\n
    \           return s.ToUpper();\n        return sb.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.Solve (System.String s) [0x0002b] in <98e24451e83d44369a0ab4a266d657e7>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <98e24451e83d44369a0ab4a266d657e7>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was
    outside the bounds of the array.\n  at Problem.Solve (System.String s) [0x0002b]
    in <98e24451e83d44369a0ab4a266d657e7>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <98e24451e83d44369a0ab4a266d657e7>:0 \n"
  stdout: ''
  timestamp: 1660015988
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var result
    = new List<string>();\n        var cs = CultureInfo.CurrentCulture;\n        foreach
    (var c in s) {\n            var cc = cs.TextInfo.ToTitleCase(c);\n            if
    (cc == c) result.Add(cc + \"s\");\n            else result.Add(cc.ToLowerInvariant());\n
    \       }\n        if (result.Count == 0) result.Add(s);\n        var str = \"\";\n
    \       foreach (var r in result) str = string.Concat(str,r);\n        return
    str;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeflqyyhg.cs(23,18): error CS0103: The name ''CultureInfo'' does not exist
    in the current context

    '
  timestamp: 1660015988
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    ans = s;\n        foreach (char c in s) {\n            ans = SolveHelper(ans,
    c);\n        }\n        return ans;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0axyvw1r.cs(24,19): error CS0103: The name ''SolveHelper'' does not exist
    in the current context

    '
  timestamp: 1660015988
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (String.IsNullOrEmpty(s))
    return s;\n        var result = s.ToUpper();\n        var reversedChars = result.ToCharArray().Reverse().ToArray();\n
    \       var lastIndex = -1;\n        foreach (var c in reversedChars) {\n            if
    (char.IsLetter(c)) {\n                lastIndex = char.ToUpperInvariant(c) ==
    c ? lastIndex : char.ToLower(c);\n            }\n            else {\n                lastIndex
    = char.ToUpperInvariant(c) == c ? lastIndex : char.ToUpper(c);\n            }\n
    \       }\n        return result.Substring(0, lastIndex + 1);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <daf2a86e73814e578053553547c07884>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <daf2a86e73814e578053553547c07884>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015988
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s ==
    null || s.Length == 0) return string.Empty;\n        var charArray = s.ToCharArray();\n
    \       foreach (char c in charArray)\n        {\n            if (char.IsLetter(c))\n
    \           {\n                charArray = charArray.Select(x => char.IsLowerChar(x)
    ? char.ToUpper(x) : char.ToLower(x)).ToArray();\n            }\n        }\n        return
    new string(charArray);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsc9ro52p.cs(28,56): error CS0117: ''char'' does not contain a definition
    for ''IsLowerChar''

    '
  timestamp: 1660015988
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        int N =
    s.Length;\n        bool hasLetter = false;\n\n        char[] c = s.ToCharArray();\n
    \       for (int i = 0; i < N; i++) {\n            if (char.IsLetter(c[i])) {\n
    \               hasLetter = true;\n                break;\n            }\n        }\n\n
    \       if (!hasLetter) {\n            return new string(s.OrderByDescending(x
    => x).ToArray());\n        }\n\n        char[] cc = new char[N];\n        for
    (int i = 0; i < N; i++) {\n            cc[i] = char.ToUpper(c[i]);\n        }\n\n
    \       return new string(cc);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <67227efbe4bf4b8b97e713a98898e031>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <67227efbe4bf4b8b97e713a98898e031>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015988
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    ret = \"\";\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                if (Char.IsUpper(c)) c = Char.ToUpper(c);\n                else
    c = Char.ToLower(c);\n            }\n            ret += c;\n        }\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjxl6sssl.cs(25,38): error CS1656: Cannot assign to ''c'' because it is
    a ''foreach iteration variable''

    /tmp/tmpjxl6sssl.cs(26,22): error CS1656: Cannot assign to ''c'' because it is
    a ''foreach iteration variable''

    '
  timestamp: 1660015988
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        return
    s.Where(Char.IsLetter).Aggregate(\n                s.Select((c, i) => new { c,
    i }),\n                (acc, c) => acc.Concat(new[] { c })\n                ).Aggregate(\n
    \               new StringBuilder(),\n                (acc, c) => acc.Append(c.c.ToUpperInvariant())\n
    \               ).Append(s.Where(Char.IsLetter).Select(x => x.c).Reverse().Aggregate((acc,
    x) => acc.Append(x))).ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpevwnohxy.cs(24,29): error CS1929: ''IEnumerable<<anonymous type: char
    c, int i>>'' does not contain a definition for ''Concat'' and the best extension
    method overload ''ParallelEnumerable.Concat<char>(ParallelQuery<char>, IEnumerable<char>)''
    requires a receiver of type ''ParallelQuery<char>''

    /tmp/tmpevwnohxy.cs(28,63): error CS1061: ''char'' does not contain a definition
    for ''c'' and no accessible extension method ''c'' accepting a first argument
    of type ''char'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1660015988
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    result = string.Empty;\n        foreach(char c in s) {\n            bool upperCase
    = false;\n            bool lowerCase = false;\n            if (char.IsUpper(c))
    {\n                upperCase = true;\n            }\n            if (char.IsLower(c))
    {\n                lowerCase = true;\n            }\n            if (upperCase)
    {\n                result += char.ToUpper(c);\n            }\n            if (lowerCase)
    {\n                result += char.ToLower(c);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <714ae2991d644ad6a6248c08c6e763ca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <714ae2991d644ad6a6248c08c6e763ca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015988
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        StringBuilder
    reverse = new StringBuilder();\n        foreach(char c in s) {\n            if
    (Char.IsLetter(c)) {\n                reverse.Append(Char.ToUpper(c));\n            }
    else\n                reverse.Append(c);\n        }\n        return reverse.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8c56155946fd47d5a5d9dc4bd77bfd8c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8c56155946fd47d5a5d9dc4bd77bfd8c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015988
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    result = \"\";\n        string temp = \"\";\n        for (int i = 0; i < s.Length;
    i++) {\n            if (char.IsLetter(s[i])) {\n                temp = char.ToUpper(s[i]);\n
    \           }\n            else {\n                temp = char.ToLower(s[i]);\n
    \           }\n            result += temp;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwr0gv2d6.cs(26,24): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpwr0gv2d6.cs(29,24): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1660015988
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    temp = s;\n        if (s.Contains(@\".\"))\n            temp = s.Replace(@\".\",
    string.Empty);\n        if (temp.Contains(@\".\"))\n            temp = temp.Replace(@\".\",
    string.Empty);\n        if (s.Length == 0)\n            temp = temp;\n        if
    (temp.Length == 0)\n            temp = temp;\n        if (s.Contains(@\"0\"))\n
    \           temp = temp.Replace(@\"0\", string.Empty);\n        if (temp.Contains(@\"0\"))\n
    \           temp = temp.Replace(@\"0\", string.Empty);\n        if (s.Contains(@\"A\"))\n
    \           temp = temp.Replace(@\"A\", string.Empty);\n        if (temp.Contains(@\"A\"))\n
    \           temp = temp.Replace(@\"A\", string.Empty);\n        if (s.Contains(@\"B\"))\n
    \           temp = temp.Replace(@\"B\", string.Empty);\n        if (temp.Contains(@\"B\"))\n
    \           temp = temp.Replace(@\"B\", string.Empty);\n        if (s.Contains(@\"C\"))\n
    \           temp = temp.Replace(@\"C\", string.Empty);\n        if (temp.Contains(@\"C\"))\n
    \           temp = temp.Replace(@\"C\", string.Empty);\n        if (s.Contains(@\"D\"))\n
    \           temp = temp.Replace(@\"D\", string.Empty);\n        if (temp.Contains(@\"D\"))\n
    \           temp = temp.Replace(@\"D\", string.Empty);\n        if (s.Contains(@\"E\"))\n
    \           temp = temp.Replace(@\"E\", string.Empty);\n        if (temp.Contains(@\"E\"))\n
    \           temp = temp.Replace(@\"E\", string.Empty);\n        if (s.Contains(@\"F\"))\n
    \           temp = temp.Replace(@\"F\", string.Empty);\n        if (temp.Contains(@\"F\"))\n
    \           temp = temp.Replace(@\"F\", string.Empty);\n        if (s.Contains(@\"G\"))\n
    \           temp = temp.Replace(@\"G\", string.Empty);\n        if (temp.Contains(@\"G\"))\n
    \           temp = temp.Replace(@\"G\", string.Empty);\n        if (s.Contains(@\"H\"))\n
    \           temp = temp.Replace(@\"H\", string.Empty);\n        if (temp.Contains(@\"H\"))\n
    \           temp = temp.Replace(@\"H\", string.Empty);\n        if (s.Contains(@\"I\"))\n
    \           temp = temp.Replace(@\"I\", string.Empty);\n        if (temp.Contains(@\"I\"))\n
    \           temp = temp.Replace(@\"I\", string.Empty);\n        if (s.Contains(@\"J\"))\n
    \           temp = temp.Replace(@\"J\", string.Empty);\n        if (temp.Contains(@\"J\"))\n
    \           temp = temp.Replace(@\"J\", string.Empty);\n        if (s.Contains(@\"\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu02detbj.cs(78,26): error CS1003: Syntax error, '','' expected

    /tmp/tmpu02detbj.cs(78,30): error CS1003: Syntax error, '','' expected

    /tmp/tmpu02detbj.cs(78,43): error CS1003: Syntax error, '','' expected

    /tmp/tmpu02detbj.cs(78,47): error CS1003: Syntax error, '','' expected

    /tmp/tmpu02detbj.cs(78,47): error CS1010: Newline in constant

    /tmp/tmpu02detbj.cs(78,52): error CS1003: Syntax error, '','' expected

    /tmp/tmpu02detbj.cs(79,51): error CS1026: ) expected

    '
  timestamp: 1660015988
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        char[]
    charArray = s.ToCharArray();\n        int len = charArray.Length;\n        string
    resultedString = \"\";\n        int i = 1;\n        while (i<charArray.Length)
    {\n            if (charArray[i] == '@') resultedString += charArray[i++];\n            if
    (charArray[i] == '#') {\n                resultedString += charArray[i];\n                while
    (i < len) {\n                    char c = charArray[i];\n                    resultedString
    += (char.IsUpper(c)) ? c.ToString().ToLower() : c.ToString().ToUpper();\n                    i++;\n
    \               }\n                break;\n            }\n            resultedString
    += charArray[i];\n            i++;\n        }\n        if (resultedString.Length
    == 0)\n            resultedString = s.ToUpper();\n        return resultedString;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <97fb2e3f79954b508d2ed286ba03724f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <97fb2e3f79954b508d2ed286ba03724f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015988
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    result = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            if (Char.IsLetter(s[i]))
    {\n                char a = s[i];\n                string b = s.Substring(0, i)
    + Char.ToUpper(s.Substring(i + 1)) + s.Substring(i + 2);\n                string
    c = Char.ToUpper(a) + s.Substring(i, 1) + s.Substring(i + 1);\n                result
    = result + c + b;\n            } else {\n                result = result + s[i];\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6fl1ahkf.cs(26,61): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    '
  timestamp: 1660015988
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        bool isLetter
    = char.IsLetter;\n        string lower = s.ToLower();\n        int len = s.Length;\n
    \       string upper = s.ToUpper();\n        bool hasLet = s.Any(isLetter);\n
    \       string result = new StringBuilder();\n        for (int i = 0; i < len;
    i++) {\n            if (char.IsLetter(s[s.Length - i - 1]) && char.IsLetter(s[i
    - len])) {\n                result.Append(char.ToUpper(s[i - len]));\n                result.Append(char.ToUpper(s[s.Length
    - i - 1]));\n            } else if (char.IsLetter(s[s.Length - i - 1])) {\n                result.Append(char.ToUpper(s[i
    - len]));\n            } else {\n                result.Append(s[i - len]);\n
    \           }\n        }\n        if (isLetter && !hasLet) {\n            return
    string.Concat(result);\n        }\n        return string.Concat(result).ToUpper();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4bl02cwp.cs(22,30): error CS0428: Cannot convert method group ''IsLetter''
    to non-delegate type ''bool''. Did you intend to invoke the method?

    /tmp/tmp4bl02cwp.cs(26,29): error CS1503: Argument 2: cannot convert from ''bool''
    to ''System.Func<char, bool>''

    /tmp/tmp4bl02cwp.cs(27,25): error CS0029: Cannot implicitly convert type ''System.Text.StringBuilder''
    to ''string''

    '
  timestamp: 1660015988
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s ==
    null) return null;\n        var sb = new StringBuilder(s);\n        foreach (char
    c in s) {\n            if (Char.IsLetter(c)) sb.Replace(c.ToString(), Char.ToUpper(c));\n
    \           else if (Char.IsLower(c)) sb.Replace(c.ToString(), Char.ToLower(c));\n
    \           else sb.Replace(c.ToString(), c);\n        }\n        return sb.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmponlh242d.cs(25,60): error CS1503: Argument 2: cannot convert from ''char''
    to ''string''

    /tmp/tmponlh242d.cs(26,64): error CS1503: Argument 2: cannot convert from ''char''
    to ''string''

    /tmp/tmponlh242d.cs(27,43): error CS1503: Argument 2: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1660015988
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        char lastChar
    = s[0];\n        string newStr = \"\";\n        for (int i = 1;  i <= s.Length;
    \ i++) {\n            if (s[i].Equals('a'))\n                lastChar = s[i].ToUpper();\n
    \           else if (s[i].Equals('A'))\n                lastChar = s[i].ToLower();\n
    \           else if (s[i].Equals('@'))\n                lastChar = s[i];\n            else\n
    \               lastChar = s[i];\n            newStr += lastChar;\n        }\n
    \       \n        Console.Write(newStr);\n        return newStr;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk6e0ng_j.cs(26,33): error CS1501: No overload for method ''ToUpper'' takes
    0 arguments

    /tmp/tmpk6e0ng_j.cs(28,33): error CS1501: No overload for method ''ToLower'' takes
    0 arguments

    '
  timestamp: 1660015988
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // convert
    s to an array of chars and reverse it\n        var arr= new char[s.Length];\n
    \       for (int i=0;i<s.Length;i++){\n            arr[i]=s[i];\n        }\n\n
    \       // reverse it\n        for (int i=arr.Length-1;i>=0;i--){\n            string
    reverse=new StringBuilder(arr[i]).Reverse().ToString();\n            int startIndex=s.IndexOf(reverse);\n
    \           if (startIndex>-1){\n                return reverse;\n            }\n
    \       }\n        return s;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpenxhjxj6.cs(30,54): error CS1061: ''StringBuilder'' does not contain a
    definition for ''Reverse'' and no accessible extension method ''Reverse'' accepting
    a first argument of type ''StringBuilder'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1660015988
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s.Length
    == 0) {\n            return s;\n        }\n        string result = \"\";\n        foreach
    (char c in s) {\n            if (Char.IsLetter(c)) {\n                char lower
    = (char)(Math.Min(Convert.ToInt32(c - 'A'), Convert.ToInt32(c - 'a')));\n                char
    upper = (char)(Math.Max(Convert.ToInt32(c - 'A'), Convert.ToInt32(c - 'a')));\n
    \               result += lower + upper;\n            } else {\n                result
    += c;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4c84de789cf47148890515d1d8d30ce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4c84de789cf47148890515d1d8d30ce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015989
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s ==
    null) return null;\n        if (s.Any(c => Char.IsLetter(c))) s = s.ToUpperInvariant();\n
    \       if (s.Any(c => Char.IsDigit(c))) s = s.ToLowerInvariant();\n        if
    (s.Any(c => c == '#')) {\n            s = s.Replace('#', s.ToUpperInvariant());\n
    \           s = s.Replace('@', s.ToLowerInvariant());\n        }\n        return
    s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd1x_jw62.cs(26,32): error CS1503: Argument 2: cannot convert from ''string''
    to ''char''

    /tmp/tmpd1x_jw62.cs(27,32): error CS1503: Argument 2: cannot convert from ''string''
    to ''char''

    '
  timestamp: 1660015989
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var reversed
    = s.ToLower();\n        var result = \"\";\n        if (reversed.Length > 0) {\n
    \           var firstChar = reversed[0];\n            reversed = reversed.Replace(firstChar,
    firstChar.ToUpper());\n            result += firstChar + reversed;\n        }\n
    \       if (s.Length > 0) {\n            result += s.Substring(1, s.Length - 1);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdh0wf81_.cs(26,62): error CS1501: No overload for method ''ToUpper'' takes
    0 arguments

    '
  timestamp: 1660015988
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        char[]
    chars = s.ToCharArray();\n        foreach (char c in chars) {\n            string
    lowCase = string.Empty;\n            string upperCase = string.Empty;\n            if
    (char.IsLower(c)) {\n                lowCase = string.Concat(c.ToString(), char.ToUpper(c.ToString()));\n
    \           } else {\n                upperCase = string.Concat(c.ToString(),
    char.ToLower(c.ToString()));\n            }\n            s = lowCase + upperCase;\n
    \       }\n        return s;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3aeuuqxi.cs(27,68): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmp3aeuuqxi.cs(29,70): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    '
  timestamp: 1660015989
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Your
    code here\n        var charList = s.ToCharArray();\n        foreach (var x in
    charList)\n        {\n            var reversedLetter = GetReversedLetter(charList);\n
    \           if (charList.Contains(x))\n            {\n                charList.Remove(x);\n
    \               charList.Add(reversedLetter);\n            }\n            else\n
    \           {\n                charList.Add(x);\n            }\n        }\n        return
    new string(charList);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd4mmm5ap.cs(26,34): error CS0103: The name ''GetReversedLetter'' does
    not exist in the current context

    /tmp/tmpd4mmm5ap.cs(29,26): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''value'' of ''CollectionExtensions.Remove<TKey,
    TValue>(IDictionary<TKey, TValue>, TKey, out TValue)''

    /tmp/tmpd4mmm5ap.cs(30,26): error CS1061: ''char[]'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''char[]'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpd4mmm5ap.cs(34,26): error CS1061: ''char[]'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''char[]'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1660015989
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        bool isUpper
    = true;\n        bool isLower = true;\n        bool isLetter = true;\n        bool
    isLetterOrUpper = true;\n        bool isLetterOrLower = true;\n\n        for (int
    i = 0; i < s.Length; i++) {\n            if (char.IsLetter(s[i])) {\n                if
    (isLetter) {\n                    isUpper = true;\n                    isLetter
    = false;\n                } else {\n                    isLower = true;\n                    isLetter
    = false;\n                }\n            } else\n            if (char.IsUpper(s[i]))
    {\n                if (isLetterOrUpper) {\n                    isUpper = true;\n
    \                   isLetterOrUpper = false;\n                } else {\n                    isLower
    = true;\n                    isLetterOrUpper = false;\n                }\n            }
    else\n            if (char.IsLower(s[i])) {\n                if (isLetterOrLower)
    {\n                    isLower = true;\n                    isLetterOrLower =
    false;\n                } else {\n                    isUpper = true;\n                    isLetterOrLower
    = false;\n                }\n            } else {\n                isLetter =
    true;\n                isLetterOrUpper = true;\n                isLetterOrLower
    = true;\n            }\n        }\n        if (isLetter)\n            return s.ToUpper();\n
    \       else if (isUpper)\n            return s.ToLower();\n        else if (isLower)\n
    \           return s.ToUpper();\n        else\n            return s;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4beeb723e46c48c584cb3b3ee8f62206>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4beeb723e46c48c584cb3b3ee8f62206>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015989
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        char[]
    chars = s.ToCharArray();\n        for (int i = 0; i < s.Length; i++) {\n            if
    (chars[i] == ' ') {\n                chars = chars.ToList().Where(x => x == '
    ').ToArray();\n            }\n            else if (chars[i] >= 'a' && chars[i]
    <= 'z') {\n                chars[i] = chars[i].ToString().ToUpper();\n            }\n
    \           else if (chars[i] >= 'A' && chars[i] <= 'Z') {\n                chars[i]
    = chars[i].ToString().ToLower();\n            }\n        }\n        return new
    string(chars);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkp8fd4bm.cs(28,28): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpkp8fd4bm.cs(31,28): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    '
  timestamp: 1660015989
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s.Length
    == 0)\n            return s;\n\n        string result = \"\";\n        foreach
    (char c in s)\n            if (char.IsLetter(c))\n                result += c.ToString().ToUpper();\n
    \           else\n                result += c.ToString().ToLower();\n\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9904edd36a5840b49d5229b8def5de86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9904edd36a5840b49d5229b8def5de86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015989
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    reverse = s.ToLower();\n        string reverse2 = \"\";\n        foreach (char
    c in reverse) {\n            if (char.IsLetter(c)) {\n                reverse2
    = char.ToUpper(c) + reverse2;\n            } else {\n                reverse2
    = c + reverse2;\n            }\n        }\n        return reverse2;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <974e0870a2cf4d5d8719da2b94ddceb2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <974e0870a2cf4d5d8719da2b94ddceb2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015989
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if(String.IsNullOrEmpty(s)){\n
    \           return s;\n        }\n        if(s.All(c => Char.IsLetter(c))){\n
    \           return s;\n        }\n        char[] chars = s.ToCharArray();\n        Array.Reverse(chars);\n
    \       return new string(chars);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fadde1e679784b4f9c4e17500af6c26f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fadde1e679784b4f9c4e17500af6c26f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015989
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    result = s;\n        if (s == null || s.Length == 0) {\n            return s;\n
    \       }\n        List<char> chars = new List<char>();\n        foreach (char
    c in s.ToUpper()) {\n            if (char.IsLetter(c)) {\n                chars.Add(char.ToUpper(c));\n
    \           }\n            else {\n                chars.Add(c);\n            }\n
    \       }\n        result = chars.Aggregate(s, (ss, c) => ss + c);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2aa8b63603534339bd2de2a1d59a448f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2aa8b63603534339bd2de2a1d59a448f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015989
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    newString = \"\";\n        foreach (char ch in s) {\n            if (char.IsLetter(ch))
    {\n                string firstUpper = ch.ToString().ToLower();\n                string
    firstLower = ch.ToString().ToLower();\n                string secondUpper = firstUpper.Substring(0,
    1).ToUpper() + firstUpper.Substring(1);\n                string secondLower =
    firstLower.Substring(0, 1).ToLower() + firstLower.Substring(1);\n                newString
    = newString.Replace(ch, firstUpper);\n                newString = newString.Replace(ch,
    secondLower);\n                newString = newString.Replace(ch, secondUpper);\n
    \               newString = newString.Replace(ch, firstLower);\n            }\n
    \           else {\n                newString = newString.Replace(ch, ch);\n            }\n
    \       }\n        return newString;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4u530mpu.cs(29,51): error CS1503: Argument 2: cannot convert from ''string''
    to ''char''

    /tmp/tmp4u530mpu.cs(30,51): error CS1503: Argument 2: cannot convert from ''string''
    to ''char''

    /tmp/tmp4u530mpu.cs(31,51): error CS1503: Argument 2: cannot convert from ''string''
    to ''char''

    /tmp/tmp4u530mpu.cs(32,51): error CS1503: Argument 2: cannot convert from ''string''
    to ''char''

    '
  timestamp: 1660015989
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        foreach
    (char c in s)\n        {\n            if (char.IsLetter(c))\n            {\n                var
    result = new StringBuilder(c);\n                result.MakeUpper();\n                result.MakeLower();\n
    \               s = result.ToString();\n            }\n            else\n            {\n
    \               s = s.Replace(c, char.ToUpper(c));\n            }\n        }\n
    \       return s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0qpa_3kk.cs(27,24): error CS1061: ''StringBuilder'' does not contain a
    definition for ''MakeUpper'' and no accessible extension method ''MakeUpper''
    accepting a first argument of type ''StringBuilder'' could be found (are you missing
    a using directive or an assembly reference?)

    /tmp/tmp0qpa_3kk.cs(28,24): error CS1061: ''StringBuilder'' does not contain a
    definition for ''MakeLower'' and no accessible extension method ''MakeLower''
    accepting a first argument of type ''StringBuilder'' could be found (are you missing
    a using directive or an assembly reference?)

    '
  timestamp: 1660015989
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s.Length
    > 0)\n        {\n            string temp = s;\n            char c = temp[0];\n
    \           string res = \"\";\n            for (int i = 1; i < temp.Length; i++)\n
    \           {\n                if (char.IsLetter(c))\n                {\n                    res
    = c + res;\n                }\n                else\n                {\n                    res
    = c + temp[i];\n                }\n            }\n            return res;\n        }\n
    \       else\n        {\n            return s;\n        }\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0zk9qfsk.cs(35,27): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1660015989
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        bool isUpper
    = false;\n        bool isLower = false;\n        string result = \"\";\n\n        for(int
    i = 0; i < s.Length; i++) {\n            if(Char.IsLetter(s[i])) {\n                isUpper
    = Char.IsUpper(s[i]);\n                isLower = Char.IsLower(s[i]);\n                result
    += isUpper ? s[i].ToString().ToUpper() : s[i].ToString().ToLower();\n            }
    else {\n                result += s[i];\n            }\n        }\n\n        if(s.Length
    > 0 && Char.IsLetter(s[s.Length - 1])) {\n            isUpper = Char.IsUpper(s[s.Length
    - 1]);\n            isLower = Char.IsLower(s[s.Length - 1]);\n            result
    += isUpper ? s[s.Length - 1].ToString().ToUpper() : s[s.Length - 1].ToString().ToLower();\n
    \       }\n\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5933ed1cfb314d5da48914d5c5caf404>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5933ed1cfb314d5da48914d5c5caf404>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015989
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if(s ==
    null || s.Length == 0) return s;\n        bool flag = true;\n        for(int i
    = 0; i < s.Length; i++) {\n            if(s[i] >= 'a' && s[i] <= 'z') {\n                string
    temp = s.Substring(0, i) + s.Substring(i+1, s.Length-i-1);\n                s
    = s.Substring(0, i) + s.Substring(i+1, s.Length-i-1);\n                flag =
    false;\n                break;\n            }\n        }\n        if(flag) return
    s;\n        string result = \"\";\n        for(int i = 0; i < s.Length; i++) {\n
    \           if(s[i] > 'z') result += s[i].ToString().ToUpper() + s.Substring(i+1,
    s.Length-i-1);\n            else result += s[i].ToString().ToLower() + s.Substring(i+1,
    s.Length-i-1);\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7d4fb87dd4b0455aa41b0f57f27615d9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7d4fb87dd4b0455aa41b0f57f27615d9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015990
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        char[]
    t = new char[s.Length];\n        List<char> lst = new List<char>();\n        int
    c = 0;\n        foreach (char s in s) {\n            t [c] = s;\n            c++;\n
    \       }\n        int j = 0;\n        for (int i = 0; i < t.Length; i++) {\n
    \           if (j > t.Length - 1) {\n                for (; j < t.Length; j++)
    {\n                    t[j] = lst[j];\n                }\n            }\n            if
    (t[i] >= 65 && t[i] <= 90) {\n                t[i] = (char)(t[i] - 32);\n                j++;\n
    \           }\n            if (t[i] >= 97 && t[i] <= 122) {\n                t[i]
    = (char)(t[i] + 32);\n                j++;\n            }\n            lst.Add(t[i]);\n
    \       }\n        string res = \"\";\n        for (int i = 0; i < lst.Count;
    i++) {\n            res += lst[i];\n        }\n        return res;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2ze3py1h.cs(25,23): error CS0136: A local or parameter named ''s'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1660015989
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (string.IsNullOrEmpty(s))
    return s;\n        char[] arr = s.ToCharArray();\n        List<char> res = new
    List<char>();\n        HashSet<char> temp = new HashSet<char>();\n        foreach
    (char c in arr) {\n            if (c.ToUpper() != c)\n                temp.Add(c.ToUpper());\n
    \           else\n                temp.Add(c);\n        }\n        foreach (char
    c in temp) {\n            if (res.Contains(c))\n                res.Remove(c);\n
    \           else\n                res.Add(c);\n        }\n        return res.ToString(CultureInfo.InvariantCulture);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgg4yd44d.cs(27,19): error CS1501: No overload for method ''ToUpper'' takes
    0 arguments

    /tmp/tmpgg4yd44d.cs(28,28): error CS1501: No overload for method ''ToUpper'' takes
    0 arguments

    /tmp/tmpgg4yd44d.cs(38,29): error CS0103: The name ''CultureInfo'' does not exist
    in the current context

    '
  timestamp: 1660015989
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s.Any(c
    => char.IsLetter(c))) return s.ToUpper();\n        else return s.ToLower();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd642e9ed4dd4871bc81d84a59cd8e84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd642e9ed4dd4871bc81d84a59cd8e84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015990
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        char[]
    c = s.ToCharArray();\n        Array.Sort(c);\n        string res = string.Empty;\n
    \       for (int i = 0; i < c.Length; i++) {\n            if (Char.IsLetter(c[i]))
    {\n                res += new string(c[i].ToString(), 1);\n            } else\n
    \               res += c[i].ToString();\n        }\n        res = new string(res.ToCharArray(),
    1);\n        return res;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2v7gorsf.cs(27,35): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmp2v7gorsf.cs(31,26): error CS1503: Argument 1: cannot convert from ''char[]''
    to ''char''

    '
  timestamp: 1660015989
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    r = \"\";\n        foreach (char c in s) {\n            int x = Char.ToLower(c);\n
    \           if (x != c) x = Char.ToUpper(c);\n            r += x;\n        }\n
    \       if (r.Length > 0) {\n            return r;\n        } else {\n            r
    = s.ToUpper();\n            if (r.Length > 0) {\n                return r;\n            }\n
    \           else {\n                r = s.ToLower();\n                if (r.Length
    > 0) {\n                    return r;\n                }\n            }\n        }\n
    \       return r;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8406f257a8d43f29288a406cd28bccf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8406f257a8d43f29288a406cd28bccf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015990
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    reversed = \"\";\n        if (s == \"\") return reversed;\n        foreach(char
    c in s) {\n            if (char.IsLetter(c)) {\n                char[] temp =
    Char.ToUpper(c.ToString()).ToArray();\n                temp = Char.ToLower(c.ToString()).ToArray();\n
    \               char temp = temp[0];\n                for (int i = 0; i < temp.Length;
    i++)\n                    reversed += temp;\n            } else {\n                reversed
    += c;\n            }\n        }\n        return reversed;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqydba1gi.cs(26,44): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpqydba1gi.cs(27,37): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpqydba1gi.cs(28,22): error CS0128: A local variable or function named ''temp''
    is already defined in this scope

    '
  timestamp: 1660015989
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    res = s.ToLower();\n        var newres = \"\";\n        foreach(char c in res)\n
    \       {\n            if(char.IsLetter(c))\n            {\n                if(char.IsUpper(c))\n
    \               {\n                    newres = c + newres;\n                }\n
    \               else\n                {\n                    newres = c.ToUpper()
    + newres;\n                }\n            }\n            else\n            {\n
    \               newres = c + newres;\n            }\n        }\n        return
    newres;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3pi8cwbo.cs(34,32): error CS1501: No overload for method ''ToUpper'' takes
    0 arguments

    '
  timestamp: 1660015989
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s ==
    null) return null; // no letters\n        return s.ToLower().Aggregate(new StringBuilder(),
    \n            (b, i) => (char)(i + 96 < b.Length ? b[b.Length - i - 1] + b[b.Length
    - i - 2] : b[b.Length - i - 1]), \n            s => (s.Length < b.Length ? s.ToUpperInvariant()
    : s.ToLowerInvariant())).ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphfx8buoh.cs(24,23): error CS0029: Cannot implicitly convert type ''char''
    to ''System.Text.StringBuilder''

    /tmp/tmphfx8buoh.cs(24,23): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    /tmp/tmphfx8buoh.cs(25,30): error CS0103: The name ''b'' does not exist in the
    current context

    /tmp/tmphfx8buoh.cs(25,43): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''destination'' of ''MemoryExtensions.ToUpperInvariant(ReadOnlySpan<char>,
    Span<char>)''

    /tmp/tmphfx8buoh.cs(25,66): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''destination'' of ''MemoryExtensions.ToLowerInvariant(ReadOnlySpan<char>,
    Span<char>)''

    '
  timestamp: 1660015989
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        HashSet<string>
    str = new HashSet<string>();\n        if (s == null)\n            return \"\";\n
    \       foreach (char c in s) {\n            str.Add(c.ToString());\n        }\n
    \       string str1 = \"\";\n        foreach (string t in str)\n        {\n            if
    (t.ToLower() == t.ToUpper())\n            {\n                str1 += t.ToUpper();\n
    \           }\n            else\n            {\n                str1 += t;\n            }\n
    \       }\n        return str1;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1d07cc1786784a68ab7e6ad6d11160e2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1d07cc1786784a68ab7e6ad6d11160e2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015990
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    result = string.Empty;\n        for (int i = 0; i < s.Length; i++) {\n            if
    (char.IsLetter(s[i])) {\n                result += s.Substring(i).ToUpperInvariant();\n
    \           }\n            else {\n                result += s.Substring(i);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8cd383e151e7468baaaf5eb2a818953f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8cd383e151e7468baaaf5eb2a818953f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015990
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    result = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            char
    c = s[i];\n            if (char.IsLetter(c)) {\n                int letterIndex
    = 0;\n                while (i < s.Length && char.IsLetter(s[i])) {\n                    if
    (char.IsUpper(s[i]))\n                        letterIndex++;\n                    else\n
    \                       letterIndex--;\n                    i++;\n                }\n
    \               string letter = s.Substring(letterIndex, i - letterIndex + 1);\n
    \               result += char.ToUpper(c) + letter;\n            } else {\n                result
    += c;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length
    must refer to a location within the string.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.Solve (System.String s) [0x0006b] in <c8de2b63b70a4289a7fd27bcd065780a>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <c8de2b63b70a4289a7fd27bcd065780a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    and length must refer to a location within the string.\nParameter name: length\n
    \ at System.String.Substring (System.Int32 startIndex, System.Int32 length) [0x0004c]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Solve (System.String s)
    [0x0006b] in <c8de2b63b70a4289a7fd27bcd065780a>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <c8de2b63b70a4289a7fd27bcd065780a>:0 \n"
  stdout: ''
  timestamp: 1660015990
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        return
    s.ToUpper().Replace(s.ToLower(),String.Empty).Length == 0 ? s : s.Replace(s.ToLower(),
    s.ToUpper());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b2da8744f33044fa87e3d0103774e9eb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b2da8744f33044fa87e3d0103774e9eb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015990
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (String.IsNullOrEmpty(s)
    || s.Length < 1) {\n            return s;\n        }\n        char[] sArray =
    s.ToCharArray();\n        string result = \"\";\n        for (int i = 0; i < sArray.Length;
    i++) {\n            if (Char.IsLetter(sArray[i])) {\n                string tempResult
    = string.Empty;\n                bool isReverse = false;\n                if (i
    > 0 && Char.IsUpper(sArray[i - 1])) {\n                    isReverse = true;\n
    \               }\n                string str = new String(new char[sArray.Length]);\n
    \               for (int j = 0; j < sArray.Length; j++) {\n                    if
    (j > 0 && Char.IsLower(sArray[j - 1])) {\n                        str[j] = sArray[j];\n
    \                   } else {\n                        str[j] = sArray[j];\n                    }\n
    \               }\n                string finalResult = Revert(str, isReverse);\n
    \               result = result.Length > 0 ? result + finalResult + tempResult
    : finalResult + tempResult;\n            } else {\n                result = result
    + sArray[i];\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp01qqht83.cs(37,25): error CS0200: Property or indexer ''string.this[int]''
    cannot be assigned to -- it is read only

    /tmp/tmp01qqht83.cs(39,25): error CS0200: Property or indexer ''string.this[int]''
    cannot be assigned to -- it is read only

    /tmp/tmp01qqht83.cs(42,38): error CS0103: The name ''Revert'' does not exist in
    the current context

    '
  timestamp: 1660015990
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        char[]
    chars = s.ToCharArray();\n        string result = \"\";\n        for (int i =
    0; i < chars.Length; i++) {\n            if (chars[i].IsLetterOrDigit() && !chars[i].IsUpper())
    {\n                result += chars[i].ToString().ToUpper();\n            } else
    if (chars[i].IsLetterOrDigit() && chars[i].IsUpper()) {\n                result
    += chars[i].ToString().ToLower();\n            } else {\n                result
    += chars[i].ToString();\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdskboris.cs(25,26): error CS1501: No overload for method ''IsLetterOrDigit''
    takes 0 arguments

    /tmp/tmpdskboris.cs(25,57): error CS1501: No overload for method ''IsUpper'' takes
    0 arguments

    /tmp/tmpdskboris.cs(27,33): error CS1501: No overload for method ''IsLetterOrDigit''
    takes 0 arguments

    /tmp/tmpdskboris.cs(27,63): error CS1501: No overload for method ''IsUpper'' takes
    0 arguments

    '
  timestamp: 1660015990
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        char[]
    chars = s.ToCharArray();\n        List<char> tmp = new List<char>();\n        foreach
    (char c in chars) {\n            if (char.IsLetter(c)) {\n                tmp.Add(c);\n
    \           }\n        }\n        if (tmp.Count > 0) {\n            char[] reverse
    = tmp.ToArray();\n            Array.Sort(reverse);\n            string result
    = new string(reverse);\n            return result;\n        } else {\n            return
    new string(s.ToCharArray());\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5a3ebc6c0037471e9fff88be43971457>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5a3ebc6c0037471e9fff88be43971457>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015990
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    res = \"\";\n        if (s.Length < 1)\n            return s;\n        char[]
    array = s.ToCharArray();\n        for (int i = 0; i < array.Length; i++) {\n            char
    c = array[i];\n            if (char.IsLetter(c)) {\n                string t =
    CharToUpperCase(c);\n                t = CharToLowerCase(t);\n                string
    u = CharToLowerCase(c);\n                if (t != u)\n                    res
    = CharToLowerCase(res) + CharToUpperCase(u);\n                else\n                    res
    = CharToLowerCase(res) + CharToLowerCase(c);\n            }\n            else\n
    \               res = res + c;\n        }\n        return res;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0aspy4ei.cs(29,28): error CS0103: The name ''CharToUpperCase'' does not
    exist in the current context

    /tmp/tmp0aspy4ei.cs(30,21): error CS0103: The name ''CharToLowerCase'' does not
    exist in the current context

    /tmp/tmp0aspy4ei.cs(31,28): error CS0103: The name ''CharToLowerCase'' does not
    exist in the current context

    /tmp/tmp0aspy4ei.cs(33,27): error CS0103: The name ''CharToLowerCase'' does not
    exist in the current context

    /tmp/tmp0aspy4ei.cs(33,50): error CS0103: The name ''CharToUpperCase'' does not
    exist in the current context

    /tmp/tmp0aspy4ei.cs(35,27): error CS0103: The name ''CharToLowerCase'' does not
    exist in the current context

    /tmp/tmp0aspy4ei.cs(35,50): error CS0103: The name ''CharToLowerCase'' does not
    exist in the current context

    '
  timestamp: 1660015990
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    lower = s.ToLower(CultureInfo.InvariantCulture);\n        string upper = s.ToUpper(CultureInfo.InvariantCulture);\n
    \       string reversed = new string(lower.Reverse().ToArray());\n        string
    result = new string(reversed.Reverse().ToArray());\n        if (string.IsNullOrEmpty(s))
    return reversed;\n        if (s.Contains('a')) result = s.Replace(\"a\", string.Empty).Replace(\"A\",
    string.Empty);\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz0defv87.cs(22,34): error CS0103: The name ''CultureInfo'' does not exist
    in the current context

    /tmp/tmpz0defv87.cs(23,34): error CS0103: The name ''CultureInfo'' does not exist
    in the current context

    '
  timestamp: 1660015990
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        int length
    = s.Length;\n        char[] newChar = new char[length];\n\n        for (int i
    = 0; i < length; ++i) {\n            char c = s[i];\n            if (Char.IsLetter(c))
    {\n                newChar[i] = (char)(Char.ToLower(c) - Char.ToLower(c) - 1);\n
    \           }\n            else {\n                newChar[i] = c;\n            }\n
    \       }\n\n        return new string(newChar);\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <25b74a5cb56d434886a59d3583e74079>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <25b74a5cb56d434886a59d3583e74079>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015990
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s.Contains(\"
    \"))\n            return s;\n        var letters = s.Where(c => char.IsLetter(c)).ToArray();\n
    \       if (letters.Length == 0)\n            return s;\n        var result =
    new StringBuilder(s.Length);\n        foreach (var letter in letters) {\n            switch
    (letter) {\n                case 'a':\n                    result.Append(char.ToUpper(letter));\n
    \                   break;\n                case 'A':\n                    result.Append(char.ToLower(letter));\n
    \                   break;\n                default:\n                    result.Append(letter);\n
    \                   break;\n            }\n        }\n        return result.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd963ec73ef4ce19b75fda0c11d9794>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd963ec73ef4ce19b75fda0c11d9794>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015991
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s ==
    null || s.Length == 0) {\n            throw new ArgumentException(\"Invalid string\",
    \"s\");\n        }\n        string resultString = \"\";\n        foreach (char
    ch in s.ToLower()) {\n            if (char.IsLetter(ch)) {\n                resultString
    = resultString + Char.ToUpper(ch);\n            } else {\n                resultString
    = resultString + ch;\n            }\n        }\n        if (resultString.Length
    == 0) {\n            resultString = resultString.ToLower();\n        }\n        return
    resultString;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <694e0e59b04144ca8a30941522c56b88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <694e0e59b04144ca8a30941522c56b88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015990
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        char[]
    res = s.ToCharArray();\n        if (s.Any(x => char.IsLetter(x)))\n            for
    (int i = 0; i < s.Length; i++) {\n                if (char.IsLetter(res[i])) {\n
    \                   int j = i - 1;\n                    while (j >= 0 && char.IsLetter(res[j]))\n
    \                       res[j]++;\n                } else {\n                    res[i]
    = char.ToUpper(res[i]);\n                }\n            }\n        return new
    string(res);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <939f256a68094c03aacb46e594c8fcea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <939f256a68094c03aacb46e594c8fcea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015991
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s ==
    \"\") {\n            return s;\n        }\n        char[] c = new char[s.Length];\n
    \       int n = s.Length;\n        for (int i = 0; i < n; i++) {\n            c[i]
    = s[i];\n            if (Char.IsLetter(c[i])) {\n                c[n - i - 1]
    = (Char.ToUpper(c[n - i - 1]));\n                c[n - i - 1] = (Char.ToLower(c[n
    - i - 1]));\n            } else {\n                c[n - i - 1] = (c[i]);\n            }\n
    \       }\n        return new string(c);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b63d3b8a0634e3d932c812ead6fc7fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b63d3b8a0634e3d932c812ead6fc7fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015990
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        char[]
    chars = s.ToCharArray();\n        int[] intArray = Array.ConvertAll(chars, c =>
    (int)c);\n        intArray = intArray.Reverse().ToArray();\n        return new
    string(chars);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6007ea3a096842998bca428216cdca6c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6007ea3a096842998bca428216cdca6c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015991
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        StringBuilder
    sb = new StringBuilder();\n        for (int i = 0; i < s.Length; i++) {\n            if
    (Char.IsLetter(s[i])) {\n                string temp = s.Substring(i, 1);\n                temp
    += s.Substring(i + 1, 1).ToUpper();\n                sb.Append(temp);\n                i++;\n
    \           } else {\n                sb.Append(s[i]);\n            }\n        }\n
    \       return sb.ToString().ToLower();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dfecdbe9f2124ffd973b96f7adc414cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dfecdbe9f2124ffd973b96f7adc414cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015991
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            switch (c) {\n                default:\n
    \               case ' ':\n                case ',':\n                    result
    += c;\n                    break;\n                case 'A':\n                case
    'a':\n                    result += (char)(((int)'a' - (int)'A') % 26) + c;\n
    \                   break;\n                case 'B':\n                case 'b':\n
    \                   result += (char)(((int)'b' - (int)'B') % 26) + c;\n                    break;\n
    \               case 'C':\n                case 'c':\n                    result
    += (char)(((int)'c' - (int)'C') % 26) + c;\n                    break;\n                case
    'D':\n                case 'd':\n                    result += (char)(((int)'d'
    - (int)'D') % 26) + c;\n                    break;\n                case 'E':\n
    \               case 'e':\n                    result += (char)(((int)'e' - (int)'E')
    % 26) + c;\n                    break;\n                case 'F':\n                case
    'f':\n                    result += (char)(((int)'f' - (int)'F') % 26) + c;\n
    \                   break;\n                case 'G':\n                case 'g':\n
    \                   result += (char)(((int)'g' - (int)'G') % 26) + c;\n                    break;\n
    \               case 'H':\n                case 'h':\n                    result
    += (char)(((int)'h' - (int)'H') % 26) + c;\n                    break;\n                case
    'I':\n                case 'i':\n                    result += (char)(((int)'i'
    - (int)'I') % 26) + c;\n                    break;\n                case 'J':\n
    \               case 'j':\n                    result += (char)(((int)'j' - (int)'J')
    % 26) + c;\n                    break;\n                case 'K':\n                case
    'k':\n                    result += (char)(((int)'k' - (int)'K') % 26) + c;\n
    \                   break;\n                case 'L':\n                case 'l':\n
    \                   result += (char)(((int)'l' - (int)'L') % 26) + c;\n                    break;\n
    \               case 'M':\n                case 'm':\n                    result
    += (char)(((int)'m' - (int)'M') % 26) + c;\n                    break;\n                case
    'N':\n                case 'n':\n                    result += (char)(((int)'n'
    - (int)'N') % 26) + c;\n                    break;\n                case 'O':\n
    \               case 'o':\n                    result += (char)(((int)'o' - (int)'O')
    % 26) + c;\n                    break;\n                case 'P':\n                case
    'p':\n                    result += (char)(((int)'p' - (int)'P') % 26) + c;\n
    \                   break;\n                case 'Q':\n                case 'q':\n
    \                   result += (char)(((int)'q' - (int)\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsyn4oqr3.cs(96,55): error CS1525: Invalid expression term ''}''

    /tmp/tmpsyn4oqr3.cs(96,55): error CS1026: ) expected

    /tmp/tmpsyn4oqr3.cs(96,55): error CS1002: ; expected

    /tmp/tmpsyn4oqr3.cs(98,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpsyn4oqr3.cs(109,2): error CS1513: } expected

    '
  timestamp: 1660015990
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // return
    string.Empty;\n        // Initialize your data structure here.\n        Dictionary<char,
    int> dd = new Dictionary<char, int>();\n        foreach (var item in s) {\n            if
    (dd.ContainsKey(item)) {\n                dd[item]++;\n            } else {\n
    \               dd.Add(item, 1);\n            }\n        }\n        string result
    = string.Empty;\n        foreach (var item in dd) {\n            if (item.Value
    == 1) {\n                result += item.Key;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1ae362419ad149299e96b7293df78381>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1ae362419ad149299e96b7293df78381>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015991
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        bool hasLetter
    = false;\n        string result = \"\";\n        if (s.Contains(\"A\"))\n            hasLetter
    = true;\n        else\n            s = s.ToLower();\n        char[] chars = s.ToCharArray();\n
    \       for (int i = 0; i < chars.Length; i++) {\n            if (chars[i] ==
    'a')\n                chars[i] = chars[i].ToUpper();\n            if (chars[i]
    == 'A')\n                chars[i] = chars[i].ToLower();\n        }\n        string
    temp = \"\";\n        for (int i = 0; i < chars.Length; i++) {\n            if
    (chars[i] == 'a')\n                temp += chars[i].ToUpper();\n            if
    (chars[i] == 'A')\n                temp += chars[i].ToLower();\n            else\n
    \               temp += chars[i];\n        }\n        if (hasLetter)\n            result
    = temp.ToLower();\n        else\n            result = temp.ToUpper();\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxlky5vsn.cs(31,37): error CS1501: No overload for method ''ToUpper'' takes
    0 arguments

    /tmp/tmpxlky5vsn.cs(33,37): error CS1501: No overload for method ''ToLower'' takes
    0 arguments

    /tmp/tmpxlky5vsn.cs(38,34): error CS1501: No overload for method ''ToUpper'' takes
    0 arguments

    /tmp/tmpxlky5vsn.cs(40,34): error CS1501: No overload for method ''ToLower'' takes
    0 arguments

    '
  timestamp: 1660015990
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        StringBuilder
    builder = new StringBuilder();\n        for (int i = 0; i < s.Length; i++) {\n
    \           if (Char.IsLetter(s[i])) {\n                builder.Append((s[i].ToString()).ToUpper());\n
    \           } else {\n                builder.Append(s[i]);\n            }\n        }\n
    \       return builder.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <04f42eb1ed3844f5904794b2ec0fcce7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <04f42eb1ed3844f5904794b2ec0fcce7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015991
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s ==
    null) throw new ArgumentNullException(\"s\");\n        bool flag = true;\n        char[]
    ch = s.ToCharArray();\n        for (int i = 0; i < ch.Length; i++) {\n            if
    (ch[i] >= 'a' && ch[i] <= 'z' || ch[i] >= 'A' && ch[i] <= 'Z') {\n                ch[i]
    = (char)(ch[i] - 'a' + 'A');\n            } else {\n                flag = false;\n
    \           }\n        }\n        if (flag)\n            return new string(ch);\n
    \       else\n            return s.ToUpperInvariant();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7bed26c79e7c47d08b49cdbffb6ef47f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7bed26c79e7c47d08b49cdbffb6ef47f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015991
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var dict
    = new Dictionary<char,char>();\n        foreach (var c in s.ToLower()) {\n            dict.Add(c,
    c);\n        }\n        var result = new List<char>();\n        foreach (var c
    in s) {\n            if (dict.ContainsKey(c)) {\n                result.Add(dict[c]);\n
    \           } else {\n                result.Add(c);\n            }\n        }\n
    \       return string.Concat(result);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a98a0241783e46eea4ebeb8ffd0547b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a98a0241783e46eea4ebeb8ffd0547b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015991
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        int i;\n
    \       char[] chars = s.ToCharArray();\n        string result = \"\";\n        for
    (i = 0; i < chars.Length; i++) {\n            if (chars[i] == 'a') {\n                chars[i]
    = chars[i].ToString().ToUpper();\n            } else if (chars[i] == 'A') {\n
    \               chars[i] = chars[i].ToString().ToLower();\n            } else
    if (chars[i] == '#') {\n                chars[i] = chars[i].ToString().ToUpper();\n
    \           } else if (chars[i] == '@') {\n                chars[i] = chars[i].ToString().ToLower();\n
    \           } else if (chars[i] == '$') {\n                chars[i] = chars[i].ToString().ToUpper();\n
    \           } else if (chars[i] == '%') {\n                chars[i] = chars[i].ToString().ToLower();\n
    \           } else if (chars[i] == '+') {\n                chars[i] = chars[i].ToString().ToUpper();\n
    \           } else if (chars[i] == '-') {\n                chars[i] = chars[i].ToString().ToLower();\n
    \           } else if (chars[i] == '|') {\n                chars[i] = chars[i].ToString().ToUpper();\n
    \           } else if (chars[i] == '\\\\') {\n                chars[i] = chars[i].ToString().ToUpper();\n
    \           } else if (chars[i] == '/') {\n                chars[i] = chars[i].ToString().ToLower();\n
    \           }\n            result += chars[i];\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgr73yvxk.cs(27,28): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpgr73yvxk.cs(29,28): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpgr73yvxk.cs(31,28): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpgr73yvxk.cs(33,28): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpgr73yvxk.cs(35,28): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpgr73yvxk.cs(37,28): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpgr73yvxk.cs(39,28): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpgr73yvxk.cs(41,28): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpgr73yvxk.cs(43,28): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpgr73yvxk.cs(45,28): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpgr73yvxk.cs(47,28): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    '
  timestamp: 1660015991
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        return
    s.ToLower().All(char.IsLetter) ? new string(s.ToLower().ToCharArray().Reverse()).ToUpper()
    : \"#a@C\".ToUpper();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe4o4nbku.cs(22,60): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.IEnumerable<char>''
    to ''char[]''

    '
  timestamp: 1660015991
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        List<char>
    chars = new List<char>();\n        foreach (char c in s) {\n            if (chars.Contains(c))\n
    \               chars.Remove(c);\n            else\n                chars.Add(c);\n
    \       }\n        return new string(chars.ToArray());\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <62007b38061f488f88b4cab488981e40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <62007b38061f488f88b4cab488981e40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015991
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        char[]
    input = s.ToCharArray();\n        char[] result = new char[s.Length];\n\n        bool
    first = true;\n        foreach (char c in input) {\n            if (char.IsLetter(c))
    {\n                string temp = char.ToLower(c);\n                if (!first)
    {\n                    result += temp;\n                } else {\n                    result
    += temp;\n                    first = false;\n                }\n            }
    else {\n                if (!first) {\n                    result += (char)char.ToUpper(c);\n
    \               } else {\n                    result += (char)(char.ToLower(c));\n
    \                   first = false;\n                }\n            }\n        }\n\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuo3y3h39.cs(28,31): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpuo3y3h39.cs(30,21): error CS0029: Cannot implicitly convert type ''string''
    to ''char[]''

    /tmp/tmpuo3y3h39.cs(32,21): error CS0029: Cannot implicitly convert type ''string''
    to ''char[]''

    /tmp/tmpuo3y3h39.cs(37,21): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''char[]'' and ''char''

    /tmp/tmpuo3y3h39.cs(39,21): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''char[]'' and ''char''

    /tmp/tmpuo3y3h39.cs(45,16): error CS0029: Cannot implicitly convert type ''char[]''
    to ''string''

    '
  timestamp: 1660015991
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        char[]
    chars = s.ToCharArray();\n        string result = \"\";\n        foreach (char
    c in chars) {\n            int x = chars.IndexOf(c);\n            int y = chars.IndexOf(c,
    x + 1);\n            if (x >= 0) // is letter first\n            {\n                char
    temp = chars[x];\n                chars[x] = chars[y];\n                chars[y]
    = temp;\n            }\n            else // is not letter\n            {\n                result
    += c;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3vk3t_o9.cs(25,27): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    /tmp/tmp3vk3t_o9.cs(26,35): error CS1503: Argument 1: cannot convert from ''char''
    to ''System.Array''

    '
  timestamp: 1660015991
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // your
    code goes here\n        string res = \"\";\n        for (int i = 0; i < s.Length;
    i++) {\n            char c = s[i];\n            if (char.IsLetter(c)) {\n                c
    = char.ToUpper(c);\n            } else {\n                c = char.ToLower(c);\n
    \           }\n            res += c;\n        }\n        return res;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7d2206680d764110a2c9330e4295a650>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7d2206680d764110a2c9330e4295a650>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015991
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s ==
    \"\") {\n            return s;\n        }\n        string reversed = \"\";\n        foreach
    (char c in s) {\n            int n = (int)Char.GetNumericValue(c);\n            if
    (n >= 'a' && n <= 'z') {\n                n += ('A' - 'a');\n            }\n            else
    if (n >= 'A' && n <= 'Z') {\n                n -= ('A' - 'A');\n            }\n
    \           else if (n >= '0' && n <= '9') {\n                n -= ('0' - '0');\n
    \           }\n            else if (c == '@') {\n                n -= ('@' - '@');\n
    \           }\n            else {\n                n -= (32);\n            }\n
    \           reversed += n.ToString();\n        }\n        return reversed;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f8284937326b45648fc36e292dcc5a7e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f8284937326b45648fc36e292dcc5a7e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015991
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    result = \"\";\n        string temp = \"\";\n        foreach (char c in s) {\n
    \           if (char.IsLetter(c)) {\n                temp = temp + new string(c.ToString().ToUpper());\n
    \           } else {\n                temp = temp + c;\n            }\n        }\n
    \       result = new string(temp.ToUpper().ToCharArray());\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <034c270f4a304df4b5edacf91a926aa4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <034c270f4a304df4b5edacf91a926aa4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015991
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s ==
    \"\") {\n            return \"\";\n        }\n        var sb = new StringBuilder(s.Length);\n
    \       foreach (char c in s) {\n            bool lower = false;\n            if
    (char.IsLetter(c)) {\n                lower = true;\n            }\n            else
    if (Char.IsLower(c)) {\n                c = Char.ToUpper(c);\n                lower
    = false;\n            }\n            sb.Append(c);\n        }\n        if (sb.Length
    == 1) {\n            return sb.ToString();\n        }\n        var res = Solve(sb.ToString());\n
    \       res.Reverse();\n        if (res.Length == 0) {\n            return res;\n
    \       }\n        return sb.Append(res).ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8a1z69_p.cs(32,17): error CS1656: Cannot assign to ''c'' because it is
    a ''foreach iteration variable''

    /tmp/tmp8a1z69_p.cs(27,18): warning CS0219: The variable ''lower'' is assigned
    but its value is never used

    '
  timestamp: 1660015991
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s.Length
    < 1)\n            throw new ArgumentException(\"String is empty!\", \"s\");\n
    \       char ch;\n        var sb = new StringBuilder(s.Length);\n        for (int
    i = 0; i < s.Length; i++) {\n            ch = s[i];\n            if (char.IsLetter(ch))
    {\n                if (Char.IsUpper(ch))\n                    ch = Char.ToLower(ch);\n
    \               else\n                    ch = Char.ToUpper(ch);\n            }
    else {\n                if (i == 0)\n                    ch = Char.ToUpper(ch);\n
    \               else\n                    ch = Char.ToLower(ch);\n            }\n
    \           sb.Append(ch);\n        }\n        return sb.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c8d6667f9b24ff7b7935f1689f913e9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c8d6667f9b24ff7b7935f1689f913e9>:0
    \n"
  stdout: ''
  timestamp: 1660015992
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var result
    = new StringBuilder();\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                result.Append(char.ToUpper(c));\n            } else {\n                result.Append(c);\n
    \           }\n        }\n        return result.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86954dbda7264da6b9fa438e2756067a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86954dbda7264da6b9fa438e2756067a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015991
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    temp = string.Empty;\n        foreach (char c in s) {\n            if (Char.IsLetter(c))
    {\n                temp = Char.ToLower(c);\n            }\n            else if
    (Char.IsLower(c)) {\n                temp = Char.ToUpper(c);\n            }\n
    \           else {\n                temp = c;\n            }\n        }\n        return
    temp;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjl02ez7v.cs(25,24): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpjl02ez7v.cs(28,24): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpjl02ez7v.cs(31,24): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1660015991
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    result = \"\";\n        if (s.Length > 0) {\n            bool hasLetter = false;\n
    \           for (int i = 0; i < s.Length; i++) {\n                char c = s[i];\n
    \               if (char.IsLetter(c)) {\n                    hasLetter = true;\n
    \                   result += char.ToUpper(c);\n                } else {\n                    result
    += c;\n                }\n            }\n            if (!hasLetter) result =
    new string(s.Reverse().ToArray());\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a8705753eb6546a6a582440920c3eba4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a8705753eb6546a6a582440920c3eba4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015992
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var inputArray
    = s.ToCharArray().ToList();\n        if (inputArray.Count > 0)\n        {\n            foreach
    (var item in inputArray)\n            {\n                if (char.IsLetter(item))\n
    \               {\n                    bool isLower = true;\n                    bool
    isUpper = false;\n                    foreach (var item in inputArray)\n                    {\n
    \                       if (char.IsLetter(item))\n                        {\n
    \                           if (char.IsLower(item))\n                            {\n
    \                               isLower = false;\n                                break;\n
    \                           }\n                            if (char.IsUpper(item))\n
    \                           {\n                                isUpper = true;\n
    \                               break;\n                            }\n                        }\n
    \                   }\n                    if (isLower && isUpper)\n                    {\n
    \                       inputArray.Reverse();\n                    }\n                    else
    if (isUpper)\n                    {\n                        inputArray.Reverse();\n
    \                       inputArray[0] += char.ToUpper(inputArray[0]);\n                    }\n
    \                   else if (isLower)\n                    {\n                        inputArray.Reverse();\n
    \                       inputArray[0] += char.ToLower(inputArray[0]);\n                    }\n
    \               }\n            }\n        }\n        return new string(inputArray.ToArray());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp37rm7k6k.cs(31,34): error CS0136: A local or parameter named ''item''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1660015991
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    result = \"\";\n\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                string tmp = s.ToLower() + s.ToUpper();\n                if
    (tmp.Length > s.Length)\n                    result = s.ToUpper();\n                else\n
    \                   result = tmp;\n            }\n            else\n                result
    = c + result;\n        }\n\n        return result.ToLower();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c2f1e1f838474e8599165f79ea14e1f3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c2f1e1f838474e8599165f79ea14e1f3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015992
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s ==
    null || s.Length == 0) return s;\n        bool isLetter = false;\n        int
    letterCount = 0;\n        int newStringLength = 0;\n        char currChar = s[0];\n
    \       if (char.IsLetter(currChar)) {\n            isLetter = true;\n            letterCount
    = 1;\n        }\n        else {\n            isLetter = false;\n            for
    (int i = 1; i < s.Length; i++) {\n                if (char.IsLetter(s[i]))\n                    letterCount++;\n
    \               if (letterCount > 0)\n                    newStringLength += letterCount;\n
    \               if (char.IsLetter(s[i]))\n                    letterCount--;\n
    \           }\n        }\n        if (!isLetter) {\n            for (int i = 0;
    i < newStringLength; i++)\n                s = s.Remove(i, 1);\n            s
    = s.Insert(0, currChar);\n        }\n        return s;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvne0yqi9.cs(45,29): error CS1503: Argument 2: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1660015991
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        List<char>
    a = new List<char>();\n        for (int i = 0; i < s.Length; i++) {\n            if
    (Char.IsLetter(s[i])) {\n                a.Add(s[i]);\n            } else {\n
    \               s = Char.ToUpper(s[i]);\n            }\n        }\n        char[]
    arr = s.ToCharArray();\n        for (int i = 0; i < arr.Length; i++) {\n            if
    (Char.IsLetter(arr[i])) {\n                arr[i] = Char.ToUpper(arr[i]);\n            }
    else {\n                arr[i] = Char.ToLower(arr[i]);\n            }\n        }\n
    \       return new string(arr);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprp1j_9q4.cs(27,21): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1660015991
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (string.IsNullOrEmpty(s))\n
    \           return string.Empty;\n        return s.Aggregate(new StringBuilder(),
    (builder, char) => \n            builder.Append(char).Append(char.ToString().ToUpper()));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjx3ythrs.cs(24,63): error CS1001: Identifier expected

    /tmp/tmpjx3ythrs.cs(25,28): error CS1525: Invalid expression term ''char''

    '
  timestamp: 1660015991
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    reversed = \"\";\n        foreach (var letter in s) {\n            char first
    = char.ToUpper(letter);\n            char second = char.ToLower(letter);\n            bool
    result = char.TryParse(first, out int result1);\n            bool result2 = char.TryParse(second,
    out int result2);\n            if (result1 && result2) {\n                reversed
    = reversed + second;\n            } else if (result1) {\n                reversed
    = reversed + first;\n            } else if (result2) {\n                reversed
    = reversed + second;\n            } else {\n                reversed = reversed
    + letter;\n            }\n        }\n        return reversed;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2pfsfke7.cs(26,41): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmp2pfsfke7.cs(26,52): error CS1503: Argument 2: cannot convert from ''out
    int'' to ''out char''

    /tmp/tmp2pfsfke7.cs(27,58): error CS0128: A local variable or function named ''result2''
    is already defined in this scope

    /tmp/tmp2pfsfke7.cs(27,42): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmp2pfsfke7.cs(27,54): error CS1503: Argument 2: cannot convert from ''out
    int'' to ''out char''

    /tmp/tmp2pfsfke7.cs(28,17): error CS0019: Operator ''&&'' cannot be applied to
    operands of type ''int'' and ''bool''

    /tmp/tmp2pfsfke7.cs(30,24): error CS0029: Cannot implicitly convert type ''int''
    to ''bool''

    '
  timestamp: 1660015991
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        StringBuilder
    reverse = new StringBuilder();\n        for (int i = 0; i < s.Length; i++) {\n
    \           char c = s[i];\n            if (char.IsLetter(c)) {\n                char
    u = Char.ToUpper(c);\n                char l = Char.ToLower(c);\n                reverse.Append((u
    == c) ? l : u);\n            }\n            else {\n                reverse.Append(c);\n
    \           }\n        }\n        return reverse.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <42538420467947149156623ab3dc6f0b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <42538420467947149156623ab3dc6f0b>:0
    \n"
  stdout: ''
  timestamp: 1660015992
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s ==
    null || s.Length == 0) return \"\";\n        char[] cs = s.ToCharArray();\n        bool
    found = false;\n        for (int i = 0; !found && i < cs.Length; i++) {\n            found
    = cs[i] == char.Parse(\"A\") || cs[i] == char.Parse(\"a\") || cs[i] == char.Parse(\"B\")
    || cs[i] == char.Parse(\"b\") || cs[i] == char.Parse(\"C\") || cs[i] == char.Parse(\"c\");\n
    \           if (found) cs[i] = char.Parse(\"a\");\n            else cs[i] = char.Parse(\"A\");\n
    \       }\n        return new string(cs, 0, cs.Length);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <acbe8fdce2b745b5a7c74b5dd9ddb82b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <acbe8fdce2b745b5a7c74b5dd9ddb82b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015992
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        bool reversed
    = false;\n        char[] arr = s.ToCharArray();\n        Array.Reverse(arr);\n
    \       foreach (char c in arr) {\n            if (Char.IsLetter(c))\n                reversed
    = !reversed;\n            else\n                reversed = false;\n        }\n
    \       return reversed ? s.ToUpper() : s.ToLower();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <15805273b45e4085921c5fcb75ab1df3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <15805273b45e4085921c5fcb75ab1df3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015992
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Implement
    the solution\n        string result = \"\";\n        foreach (char c in s) {\n
    \           if (char.IsLetter(c)) {\n                if (char.IsLower(c)) {\n
    \                   result += char.ToUpper(c);\n                } else {\n                    result
    += char.ToLower(c);\n                }\n            } else {\n                result
    += c;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9fdbf7650e54408aa5d9df4efb4caf4f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9fdbf7650e54408aa5d9df4efb4caf4f>:0
    \n"
  stdout: ''
  timestamp: 1660015992
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        bool flag
    = false;\n        string result = \"\";\n        for (int i = 0; i < s.Length;
    i++) {\n            char? c = s.ToCharArray()[i];\n            string temp = \"\";\n
    \           if (c == '@') {\n                temp = s.Substring(0, i) + \"@\"
    + s.Substring(i + 1, s.Length - i - 1);\n                if (temp.Length < s.Length)
    {\n                    flag = true;\n                }\n            } else {\n
    \               temp = s.Substring(0, i) + c.ToString() + s.Substring(i + 1, s.Length
    - i - 1);\n                if (temp.Length < s.Length) {\n                    flag
    = true;\n                }\n            }\n            if (flag == true) {\n                result
    = temp;\n                break;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <925ca17bde8e4727bff8690ce45196f5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <925ca17bde8e4727bff8690ce45196f5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015992
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    temp = string.Empty;\n        string reverse = string.Empty;\n        bool isUpper
    = false;\n        for (int i = 0; i < s.Length; i++) {\n            if (char.IsLetter(s[i]))
    {\n                if (isUpper) {\n                    temp = temp + s[i].ToString().ToUpper();\n
    \               } else {\n                    temp = temp + s[i].ToString().ToLower();\n
    \               }\n            } else {\n                if (isUpper) {\n                    temp
    = temp + s[i].ToString();\n                } else {\n                    temp
    = temp + s[i].ToString();\n                }\n            }\n            isUpper
    ^= char.IsUpper(s[i]);\n        }\n        if (temp.Length > 0) {\n            reverse
    = temp;\n        }\n        return reverse;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5a4874462e6646a7b8a18d9dc2fff09e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5a4874462e6646a7b8a18d9dc2fff09e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015992
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        char[]
    chars = s.ToCharArray();\n        bool isUpper = false;\n        bool isLower
    = false;\n        for (int i = 0; i < chars.Length; i++) {\n            string
    temp = chars[i].ToString();\n            bool isLetter = false;\n            isLetter
    = char.IsLetter(temp);\n            if (isLetter) {\n                if (isUpper)
    {\n                    chars[i] = char.ToUpper(temp);\n                } else
    {\n                    chars[i] = char.ToLower(temp);\n                }\n            }\n
    \           if (chars[i].ToString() == \"\") {\n                chars[i] = char.ToLower(temp);\n
    \           }\n        }\n        return new string(chars);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe0c17mu3.cs(28,38): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpe0c17mu3.cs(31,45): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpe0c17mu3.cs(33,45): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpe0c17mu3.cs(37,41): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpe0c17mu3.cs(24,14): warning CS0219: The variable ''isLower'' is assigned
    but its value is never used

    '
  timestamp: 1660015992
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        bool isUpper
    = false;\n        for (int i = 0; i < s.Length; i++) {\n            char c = s[i];\n
    \           isUpper = isUpper || Char.IsUpper(c);\n        }\n        if (isUpper)\n
    \           return new String(s.Select(c => Char.ToLower(c)).ToArray());\n        else\n
    \           return new String(s.Select(c => Char.ToUpper(c)).ToArray());\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5ba9fb2afbb249f3a675106ce64d8c5c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5ba9fb2afbb249f3a675106ce64d8c5c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015992
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var sb
    = new StringBuilder();\n        foreach (var c in s) {\n            if (Char.IsLetter(c))
    {\n                sb.Append(Char.ToUpper(c));\n            } else {\n                sb.Append(c);\n
    \           }\n        }\n        return s.Length == 0 ? s : sb;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwamhsh3a.cs(30,16): error CS0173: Type of conditional expression cannot
    be determined because there is no implicit conversion between ''string'' and ''System.Text.StringBuilder''

    '
  timestamp: 1660015992
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        char[]
    chars = s.ToCharArray();\n        string ret = \"\";\n        if (chars.Any(c
    => char.IsLetter(c))) {\n            chars = chars.Select(c=>(char.IsLetter(c)?Char.ToUpper(c):Char.ToLower(c))).ToArray();\n
    \       }\n        Array.Reverse(chars);\n        ret = new string(chars);\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c115fadaed294fed8c49e5b198169518>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c115fadaed294fed8c49e5b198169518>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015992
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    result = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            char
    c = s[i];\n            if (char.IsLetter(c))\n                result += char.ToUpper(c).ToString()
    + char.ToLower(c).ToString();\n            else\n                result += c.ToString();\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ebe3ef750e0b486bb0d5a607f2b2af4c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ebe3ef750e0b486bb0d5a607f2b2af4c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015992
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s.Length
    == 0) return \"\";\n        char[] a = new char[s.Length];\n        Arrays.Fill(a,
    Char.ToLower);\n        Arrays.Fill(a, Char.ToUpper);\n        char[] result =
    new char[s.Length];\n        foreach (char c in s) {\n            if (Char.IsLetter(c))
    {\n                result[result.Length - 1 - i] = c;\n            }\n            else
    {\n                result[result.Length - i] = c;\n            }\n        }\n
    \       return new string(result);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnli2gzyu.cs(24,9): error CS0103: The name ''Arrays'' does not exist in
    the current context

    /tmp/tmpnli2gzyu.cs(25,9): error CS0103: The name ''Arrays'' does not exist in
    the current context

    /tmp/tmpnli2gzyu.cs(29,44): error CS0103: The name ''i'' does not exist in the
    current context

    /tmp/tmpnli2gzyu.cs(32,40): error CS0103: The name ''i'' does not exist in the
    current context

    '
  timestamp: 1660015992
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s ==
    null || s.Length < 1) {\n            return s;\n        }\n        char[] arr
    = s.ToCharArray();\n        foreach (char c in arr) {\n            if (char.IsLetter(c))
    {\n                char.ToUpperInvariant(c);\n            }\n            else
    if (char.IsUpper(c)) {\n                char.ToLowerInvariant(c);\n            }\n
    \           else if (char.IsLowerOrDigit(c)) {\n                char.ToUpper(c);\n
    \           }\n            else if (char.IsLowerOrDigit(c)) {\n                char.ToLower(c);\n
    \           }\n            else if (char.IsUpperOrDigit(c)) {\n                char.ToUpper(c);\n
    \           }\n            else if (char.IsLowerOrDigit(c)) {\n                char.ToLower(c);\n
    \           }\n            else if (char.IsUpperOrDigit(c)) {\n                char.ToUpper(c);\n
    \           }\n        }\n        return new string(arr);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptp29p_0v.cs(33,27): error CS0117: ''char'' does not contain a definition
    for ''IsLowerOrDigit''

    /tmp/tmptp29p_0v.cs(36,27): error CS0117: ''char'' does not contain a definition
    for ''IsLowerOrDigit''

    /tmp/tmptp29p_0v.cs(39,27): error CS0117: ''char'' does not contain a definition
    for ''IsUpperOrDigit''

    /tmp/tmptp29p_0v.cs(42,27): error CS0117: ''char'' does not contain a definition
    for ''IsLowerOrDigit''

    /tmp/tmptp29p_0v.cs(45,27): error CS0117: ''char'' does not contain a definition
    for ''IsUpperOrDigit''

    '
  timestamp: 1660015992
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (string.IsNullOrWhiteSpace(s))\n
    \       {\n            return s;\n        }\n        var sortedChars = new List<char>(s.ToCharArray());\n
    \       sortedChars.Sort();\n        var sb = new StringBuilder(s.Length);\n        for
    (int i = 0; i <= s.Length - 1; i++)\n        {\n            if (sortedChars[i]
    == s[s.Length - i])\n            {\n                sb.Append(s[s.Length - i -
    1]);\n            }\n            else\n            {\n                sb.Append(sortedChars[i]);\n
    \           }\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.Solve (System.String s) [0x00047] in <bb593c05c42345afb3b644bd73db91d7>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <bb593c05c42345afb3b644bd73db91d7>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was
    outside the bounds of the array.\n  at Problem.Solve (System.String s) [0x00047]
    in <bb593c05c42345afb3b644bd73db91d7>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bb593c05c42345afb3b644bd73db91d7>:0 \n"
  stdout: ''
  timestamp: 1660015992
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    reverse = \"\";\n        char ch;\n        int count = 0;\n        char[] a =
    s.ToCharArray();\n        foreach (char c in a) {\n            if (char.IsLetter(c))
    {\n                count++;\n                ch = char.ToUpper(c);\n                reverse
    += ch;\n            } else {\n                reverse += ch;\n            }\n
    \       }\n        return reverse;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo2yk8am5.cs(32,28): error CS0165: Use of unassigned local variable ''ch''

    '
  timestamp: 1660015992
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        int i =
    0;\n        string a = \"\";\n        string b = \"\";\n        for (int j=0;
    j < s.Length; j++) {\n            char c = s[j];\n            if (Char.IsLetter(c))
    {\n                a += c.ToString().ToUpper();\n                b = c.ToString().ToLower();\n
    \           } else {\n                a += c;\n                b = c;\n            }\n
    \           i++;\n        }\n        if (i == 0) return b;\n        return a +
    Solve(a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp119kcahn.cs(32,21): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1660015992
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    news = \"\";\n        foreach (char c in s.ToCharArray()) {\n            if (char.IsLetter(c))
    {\n                char.ToUpperInvariant(c);\n                char.ToLowerInvariant(c);\n
    \           }\n            news += c;\n        }\n        return news;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <030f1dd6284e4d3e8cdfd5c0fc4742bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <030f1dd6284e4d3e8cdfd5c0fc4742bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015993
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    result = String.Empty;\n        foreach (char c in s) {\n            if (Char.IsLetter(c))
    {\n                string tempString = string.Empty;\n                foreach
    (char cToUpperCase in Char.ToUpper(c)) {\n                    tempString = tempString
    + cToUpperCase;\n                }\n                result = result + tempString;\n
    \           } else {\n                result = result + c;\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpka9iiaeh.cs(26,47): error CS1579: foreach statement cannot operate on
    variables of type ''char'' because ''char'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1660015992
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var sb
    = new StringBuilder();\n        var arr = s.ToCharArray().ToList();\n        for
    (int i = 0; i < arr.Length; i++) {\n            var c = arr[i];\n            if
    (char.IsLetter(c)) {\n                if (char.IsLower(c)) {\n                    sb.Append(char.ToUpper(c));\n
    \               } else {\n                    sb.Append(char.ToLower(c));\n                }\n
    \           } else {\n                sb.Append(c);\n            }\n        }\n
    \       return String.Concat(sb.ToArray());\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp1vpr5w7.cs(24,33): error CS1061: ''List<char>'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''List<char>'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpp1vpr5w7.cs(36,33): error CS1061: ''StringBuilder'' does not contain a
    definition for ''ToArray'' and no accessible extension method ''ToArray'' accepting
    a first argument of type ''StringBuilder'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1660015992
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Your
    code here\n        if (s.Equals(\"\")) {\n            return \"\";\n        }\n
    \       var result = \"\";\n        foreach (char c in s) {\n            result
    += (char.IsLetter(c)) ? (char.ToUpper(c) + char.ToLower(c)) : c;\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <833fd4cc0a50463d85652f68be09c77f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <833fd4cc0a50463d85652f68be09c77f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015993
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var result
    = \"\";\n        var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        var letters
    = new List<char>();\n        for (int i = 0; i < s.Length; i++) {\n            if
    (alphabet.Contains(s[i])) {\n                letters.Add(s[i]);\n            }
    else {\n                result += s[i];\n            }\n        }\n        var
    reversed = new StringBuilder(result);\n        reversed = reversed.Reverse();\n
    \       if (letters.Count > 0) {\n            foreach (char c in letters) {\n
    \               reversed = reversed.Insert(reversed.Length, c.ToString());\n            }\n
    \       } else {\n            reversed = reversed.Reverse();\n        }\n        return
    reversed.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmb3o0lwf.cs(33,29): error CS1061: ''StringBuilder'' does not contain a
    definition for ''Reverse'' and no accessible extension method ''Reverse'' accepting
    a first argument of type ''StringBuilder'' could be found (are you missing a using
    directive or an assembly reference?)

    /tmp/tmpmb3o0lwf.cs(39,33): error CS1061: ''StringBuilder'' does not contain a
    definition for ''Reverse'' and no accessible extension method ''Reverse'' accepting
    a first argument of type ''StringBuilder'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1660015993
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var builder
    = new StringBuilder();\n\n        foreach(var character in s)\n        {\n            var
    reversed = (char)(new string(character).Reverse().ToArray()[0]);\n\n            if
    (character.IsLetter())\n            {\n                builder.Append(reversed);\n
    \           }\n            else\n            {\n                builder.Append(character);\n
    \           }\n        }\n\n        return builder.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkyw4lsie.cs(26,46): error CS1503: Argument 1: cannot convert from ''char''
    to ''char[]''

    /tmp/tmpkyw4lsie.cs(28,27): error CS1501: No overload for method ''IsLetter''
    takes 0 arguments

    '
  timestamp: 1660015993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    reversedString = string.Empty;\n        int numbers = 0, letters = 0;\n        for
    (int i = 0; i < s.Length; i++) {\n            if (char.IsLetter(s[i]))\n                letters++;\n
    \           else\n                numbers++;\n        }\n        if (letters ==
    0)\n            for (int i = 0; i < s.Length; i++)\n                reversedString
    += s[i];\n        else\n            for (int i = 0; i < s.Length; i++) {\n                if
    (char.IsLetter(s[i]))\n                    reversedString += s[i].ToString().ToUpper();\n
    \               else\n                    reversedString += s[i].ToString().ToLower();\n
    \           }\n\n        return reversedString;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <84b86bd3288e44548d0d58c202030241>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <84b86bd3288e44548d0d58c202030241>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015993
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    strReversed = \"\";\n        foreach(char ch in s) {\n            if((int)ch !=
    (int) ch) {\n                strReversed += (char)(int)ch;\n            }\n            else
    {\n                strReversed += (char)(int)ch;\n            }\n        }\n        if
    (strReversed.Length > 0) {\n            string reversed = strReversed.Reverse();\n
    \           strReversed = string.Concat(reversed, strReversed);\n        }\n        return
    strReversed;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3i63_0ln.cs(32,31): error CS0266: Cannot implicitly convert type ''System.Collections.Generic.IEnumerable<char>''
    to ''string''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp3i63_0ln.cs(24,16): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    '
  timestamp: 1660015993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        char[]
    arr = s.ToCharArray();\n        List<char> result = new List<char>();\n        foreach
    (char c in arr) {\n            if (Char.IsLetter(c)) {\n                result.Add(Char.ToUpper(c));\n
    \           } else {\n                result.Add(c);\n            }\n        }\n
    \       return new string(result.ToArray());\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23079455f8ef4b1980a0f2c6b1753e44>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23079455f8ef4b1980a0f2c6b1753e44>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015993
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        bool isLetter
    = false, isUpperCase = false;\n        char[] alphabet = new char[] { 'A', 'B',
    'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R',
    'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z' };\n        char[] lowerLetters = new char[]
    { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p',
    'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };\n        char[] upperLetters
    = new char[] { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
    'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z' };\n\n        int
    index = 0;\n        foreach (char letter in s) {\n            if (isLetter)\n
    \           {\n                if (char.IsUpper(letter))\n                {\n
    \                   isUpperCase = false;\n                    isLetter = false;\n
    \                   index = alphabet.IndexOf(letter);\n                }\n                else\n
    \               {\n                    isUpperCase = true;\n                    isLetter
    = false;\n                    index = lowerLetters.IndexOf(letter);\n                }\n
    \           }\n            if (isUpperCase)\n            {\n                if
    (char.IsLower(letter))\n                {\n                    isUpperCase = false;\n
    \                   isLetter = false;\n                    index = alphabet.IndexOf(letter);\n
    \               }\n                else\n                {\n                    isUpperCase
    = true;\n                    isLetter = false;\n                    index = upperLetters.IndexOf(letter);\n
    \               }\n            }\n\n            if (isLetter && !isUpperCase)\n
    \           {\n                isLetter = false;\n                isUpperCase
    = true;\n                index = alphabet.IndexOf(letter);\n            }\n\n
    \           if (isUpperCase && !isLetter)\n            {\n                isUpperCase
    = false;\n                isLetter = true;\n                index = lowerLetters.IndexOf(letter);\n
    \           }\n\n            if (isLetter && isUpperCase)\n            {\n                index
    = alphabet.IndexOf(letter);\n            }\n        }\n        string result =
    new String();\n        for (int i = 0; i < s.Length; i++)\n        {\n            if
    (index != i)\n            {\n                result += s[i];\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_dr8hd9c.cs(35,38): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    /tmp/tmp_dr8hd9c.cs(41,42): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    /tmp/tmp_dr8hd9c.cs(50,38): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    /tmp/tmp_dr8hd9c.cs(56,42): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    /tmp/tmp_dr8hd9c.cs(64,34): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    /tmp/tmp_dr8hd9c.cs(71,38): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    /tmp/tmp_dr8hd9c.cs(76,34): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    /tmp/tmp_dr8hd9c.cs(79,29): error CS1729: ''string'' does not contain a constructor
    that takes 0 arguments

    '
  timestamp: 1660015993
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // write
    your code here\n        char[] c = s.ToCharArray();\n        foreach (char i in
    c)\n        {\n            if (Char.IsLower(i))\n            {\n                c
    = c.ToUpper();\n            }\n            else\n            {\n                c
    = c.ToLower();\n            }\n        }\n        return new string(c);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnt1knzay.cs(28,23): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''destination'' of ''MemoryExtensions.ToUpper(ReadOnlySpan<char>,
    Span<char>, CultureInfo)''

    /tmp/tmpnt1knzay.cs(32,23): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''destination'' of ''MemoryExtensions.ToLower(ReadOnlySpan<char>,
    Span<char>, CultureInfo)''

    '
  timestamp: 1660015993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        char[]
    charArray = s.ToCharArray();\n        for (int i = 0; i < charArray.Length; i++)
    {\n            if (charArray[i] < 'a' || charArray[i] > 'z') {\n                charArray[i]
    = (char)(charArray[i] - 32);\n            }\n        }\n        return new string(charArray);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c062db726afd45c68e154336c2d57f03>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c062db726afd45c68e154336c2d57f03>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // TODO\n
    \       var newStr = \"\";\n        foreach (char c in s)\n            if (Char.IsLetter(c))\n
    \               newStr = newStr + Char.ToUpper(c);\n            else\n                newStr
    = newStr + c;\n        return newStr;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a07de0ea42d447fc9dd08bf502e314fa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a07de0ea42d447fc9dd08bf502e314fa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015993
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        char[]
    chars = s.ToCharArray();\n        int len = chars.Length;\n        int i = 0;\n
    \       bool isLetter;\n        if (chars.All(c => c >= 'A' && c <= 'Z')) {\n
    \           isLetter = true;\n        } else {\n            isLetter = false;\n
    \       }\n        while (i < len) {\n            char ch = chars[i];\n            if
    (isLetter) {\n                if (c >= 'a' && c <= 'z') {\n                    chars[i]
    = char.ToUpper(c);\n                } else if (c >= 'A' && c <= 'Z') {\n                    chars[i]
    = char.ToLower(c);\n                }\n            } else {\n                if
    (c >= '0' && c <= '9') {\n                    chars[i] = char.ToUpper(c);\n                }
    else if (c >= 'a' && c <= 'z') {\n                    chars[i] = char.ToLower(c);\n
    \               }\n            }\n            i++;\n        }\n        return
    s.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4jv059u6.cs(34,21): error CS0103: The name ''c'' does not exist in the
    current context

    /tmp/tmp4jv059u6.cs(34,33): error CS0103: The name ''c'' does not exist in the
    current context

    /tmp/tmp4jv059u6.cs(35,45): error CS0103: The name ''c'' does not exist in the
    current context

    /tmp/tmp4jv059u6.cs(36,28): error CS0103: The name ''c'' does not exist in the
    current context

    /tmp/tmp4jv059u6.cs(36,40): error CS0103: The name ''c'' does not exist in the
    current context

    /tmp/tmp4jv059u6.cs(37,45): error CS0103: The name ''c'' does not exist in the
    current context

    /tmp/tmp4jv059u6.cs(40,21): error CS0103: The name ''c'' does not exist in the
    current context

    /tmp/tmp4jv059u6.cs(40,33): error CS0103: The name ''c'' does not exist in the
    current context

    /tmp/tmp4jv059u6.cs(41,45): error CS0103: The name ''c'' does not exist in the
    current context

    /tmp/tmp4jv059u6.cs(42,28): error CS0103: The name ''c'' does not exist in the
    current context

    /tmp/tmp4jv059u6.cs(42,40): error CS0103: The name ''c'' does not exist in the
    current context

    /tmp/tmp4jv059u6.cs(43,45): error CS0103: The name ''c'' does not exist in the
    current context

    '
  timestamp: 1660015993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s ==
    null) {\n            throw new ArgumentNullException(\"s\");\n        }\n        char[]
    arr = s.ToCharArray();\n        StringBuilder sb = new StringBuilder(s.Length);\n
    \       foreach (char c in arr) {\n            if (Char.IsLetter(c)) {\n                sb.Append(char.ToUpper(c));\n
    \           } else {\n                sb.Append(c);\n            }\n        }\n
    \       return sb.ToString();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e6828266e867440a8567a9488fd06965>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e6828266e867440a8567a9488fd06965>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // TODO
    Auto-generated method stub\n        string result = \"\";\n        foreach (char
    c in s.ToCharArray()) {\n            result += (c.Equals(Char.Parse(\"a\")) ?
    ((c.Equals(Char.Parse(\"A\")) ? \"#a@C\" : \"AB\")) \n                    : (c.Equals(Char.Parse(\"A\"))
    ? \"a@C\" : \"A#\")).ToString();\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1fea0ac7d15402d91e04902dac33b0a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1fea0ac7d15402d91e04902dac33b0a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (string.IsNullOrEmpty(s))
    return s;\n        string result = string.Empty;\n        foreach (char c in s)
    {\n            if (char.IsLetter(c)) {\n                char low = char.ToLower(c);\n
    \               char upper = char.ToUpper(c);\n                if (result.IndexOf(low)
    > result.IndexOf(upper)) {\n                    result += upper;\n                }
    else {\n                    result += low;\n                }\n            } else
    {\n                result += c;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cfa8cf1adc69408db3a7202980fb2b82>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cfa8cf1adc69408db3a7202980fb2b82>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015993
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        return
    s.Where(x => Char.IsLetter(x)).Aggregate(\n            new StringBuilder(),\n
    \           (result, x) =>\n            {\n                result.Append(char.ToUpper(x));\n
    \               result.Append(Char.ToLower(x));\n                return result;\n
    \           },\n            s => s.Reverse());\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv1ky552g.cs(30,20): error CS1061: ''StringBuilder'' does not contain a
    definition for ''Reverse'' and no accessible extension method ''Reverse'' accepting
    a first argument of type ''StringBuilder'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1660015993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        foreach
    (char ch in s) {\n            Console.WriteLine(ch);\n            if (char.IsLetter(ch))
    {\n                char ch2 = (char)(ch ^ 32);\n                char ch3 = (char)(ch2
    ^ 32);\n                char ch4 = (char)(ch3 ^ 32);\n                Console.WriteLine(ch2);\n
    \               Console.WriteLine(ch3);\n                Console.WriteLine(ch4);\n
    \               s = s.Replace(ch.ToString(), ch4.ToString());\n                Console.WriteLine(s);\n
    \               s = s.Replace(ch4.ToString(), ch3.ToString());\n                Console.WriteLine(s);\n
    \               s = s.Replace(ch3.ToString(), ch2.ToString());\n                Console.WriteLine(s);\n
    \               s = s.Replace(ch2.ToString(), ch.ToString());\n                Console.WriteLine(s);\n
    \           } else {\n                s = s.Replace(ch.ToString(), ch.ToString());\n
    \               Console.WriteLine(s);\n            }\n        }\n        return
    s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2166b844e6d3404d8039d7cd2527b5a4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2166b844e6d3404d8039d7cd2527b5a4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: 'A

    a

    A

    a

    asDf

    AsDf

    asDf

    AsDf

    s

    S

    s

    S

    ASDf

    AsDf

    ASDf

    AsDf

    D

    d

    D

    d

    Asdf

    AsDf

    Asdf

    AsDf

    f

    F

    f

    F

    AsDF

    AsDf

    AsDF

    AsDf

    1

    1234

    2

    1234

    3

    1234

    4

    1234

    a

    A

    a

    A

    Ab

    ab

    Ab

    ab

    b

    B

    b

    B

    aB

    ab

    aB

    ab

    #

    #a@C

    a

    A

    a

    A

    #A@C

    #a@C

    #A@C

    #a@C

    @

    #a@C

    C

    c

    C

    c

    #a@c

    #a@C

    #a@c

    #a@C

    #

    #AsdfW^45

    A

    a

    A

    a

    #asdfW^45

    #AsdfW^45

    #asdfW^45

    #AsdfW^45

    s

    S

    s

    S

    #ASdfW^45

    #AsdfW^45

    #ASdfW^45

    #AsdfW^45

    d

    D

    d

    D

    #AsDfW^45

    #AsdfW^45

    #AsDfW^45

    #AsdfW^45

    f

    F

    f

    F

    #AsdFW^45

    #AsdfW^45

    #AsdFW^45

    #AsdfW^45

    W

    w

    W

    w

    #Asdfw^45

    #AsdfW^45

    #Asdfw^45

    #AsdfW^45

    ^

    #AsdfW^45

    4

    #AsdfW^45

    5

    #AsdfW^45

    #

    #6@2

    6

    #6@2

    @

    #6@2

    2

    #6@2

    #

    #$a^D

    $

    #$a^D

    a

    A

    a

    A

    #$A^D

    #$a^D

    #$A^D

    #$a^D

    ^

    #$a^D

    D

    d

    D

    d

    #$a^d

    #$a^D

    #$a^d

    #$a^D

    #

    #ccc

    c

    C

    c

    C

    #CCC

    #ccc

    #CCC

    #ccc

    c

    C

    c

    C

    #CCC

    #ccc

    #CCC

    #ccc

    c

    C

    c

    C

    #CCC

    #ccc

    #CCC

    #ccc

    '
  timestamp: 1660015993
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s.Length
    == 0) {\n            return s;\n        }\n\n        // Reverse the character
    order\n        var result = new StringBuilder(s);\n        for (int i = result.Length
    - 1; i >= 0; i--) {\n            char c = result.ElementAtOrDefault(i);\n            if
    (char.IsLetter(c)) {\n                string upper = char.ToUpper(c);\n                result.Replace(upper,
    char.ToLower(c));\n            }\n            else {\n                result.Replace(c,
    c);\n            }\n        }\n\n        // if the string has no letters, return
    the string\n        if (result.ToString().Length == 0) {\n            return s;\n
    \       }\n        return result.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphxpkwr6g.cs(29,29): error CS1061: ''StringBuilder'' does not contain a
    definition for ''ElementAtOrDefault'' and no accessible extension method ''ElementAtOrDefault''
    accepting a first argument of type ''StringBuilder'' could be found (are you missing
    a using directive or an assembly reference?)

    /tmp/tmphxpkwr6g.cs(31,32): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmphxpkwr6g.cs(32,39): error CS1503: Argument 2: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1660015993
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    sol = string.Empty;\n        if (s == \"\") {\n            return s;\n        }\n
    \       var list = s.ToLower().ToCharArray().Select(c => (int)c).ToArray();\n
    \       switch (list.Length) {\n            case 0:\n                sol = s.ToUpper();\n
    \               break;\n            case 1:\n                sol = (list[0] >=
    65 && list[0] <= 90) ? s.ToLower() : s.ToUpper();\n                break;\n            case
    2:\n                sol = (list[0] == list[1]) ? s.ToUpper() : s.ToLower();\n
    \               break;\n            case 3:\n                sol = (list[0] ==
    list[1] && list[2] == list[3]) ? s.ToUpper() : s.ToLower();\n                break;\n
    \           case 4:\n                sol = (list[0] == list[1] && list[2] == list[3]
    && list[4] == list[5]) ? s.ToUpper() : s.ToLower();\n                break;\n
    \           case 5:\n                sol = (list[0] == list[1] && list[2] == list[3]
    && list[4] == list[5] && list[6] == list[7]) ? s.ToUpper() : s.ToLower();\n                break;\n
    \           case 6:\n                sol = (list[0] == list[1] && list[2] == list[3]
    && list[4] == list[5] && list[6] == list[7] && list[8] == list[9]) ? s.ToUpper()
    : s.ToLower();\n                break;\n            case 7:\n                sol
    = (list[0] == list[1] && list[2] == list[3] && list[4] == list[5] && list[6] ==
    list[7] && list[8] == list[9] && list[10] == list[11]) ? s.ToUpper() : s.ToLower();\n
    \               break;\n            case 8:\n                sol = (list[0] ==
    list[1] && list[2] == list[3] && list[4] == list[5] && list[6] == list[7] && list[8]
    == list[9] && list[10] == list[11] && list[12] == list[13]) ? s.ToUpper() : s.ToLower();\n
    \               break;\n            case 9:\n                sol = (list[0] ==
    list[1] && list[2] == list[3] && list[4] == list[5] && list[6] == list[7] && list[8]
    == list[9] && list[10] == list[11] && list[12] == list[13] && list[14] == list[15])
    ? s.ToUpper() : s.ToLower();\n                break;\n            case 10:\n                sol
    = (list[0] == list[1] && list[2] == list[3] && list[4] == list[5] && list[6] ==
    list[7] && list[8] == list[9] && list[10] == list[11] && list[12] == list[13]
    && list[14] == list[15] && list[16] == list[17]) ? s.ToUpper() : s.ToLower();\n
    \               break;\n            case 11:\n                sol = (list[0] ==
    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq26hsp3c.cs(62,34): error CS1525: Invalid expression term ''}''

    /tmp/tmpq26hsp3c.cs(62,34): error CS1026: ) expected

    /tmp/tmpq26hsp3c.cs(62,34): error CS1002: ; expected

    /tmp/tmpq26hsp3c.cs(64,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpq26hsp3c.cs(75,2): error CS1513: } expected

    '
  timestamp: 1660015993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    ans = \"\";\n        foreach (char c in s.ToCharArray()) {\n            if (char.IsLetter(c))
    {\n                ans = ans.ToUpper();\n            }\n            else\n            {\n
    \               ans = ans.ToLower();\n            }\n        }\n        return
    ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51329a4a4ebe430387159d5998f4a546>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51329a4a4ebe430387159d5998f4a546>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015993
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s ==
    null) return null;\n        var c = new StringBuilder();\n        foreach (char
    c in s) {\n            if (Char.IsLetter(c)) {\n                c.ToUpper();\n
    \               c.ToLower();\n            } else {\n                c.ToString();\n
    \           }\n            c.Append(c);\n        }\n        return c.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsr65nw_6.cs(24,23): error CS0136: A local or parameter named ''c'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpsr65nw_6.cs(26,19): error CS1501: No overload for method ''ToUpper'' takes
    0 arguments

    /tmp/tmpsr65nw_6.cs(27,19): error CS1501: No overload for method ''ToLower'' takes
    0 arguments

    /tmp/tmpsr65nw_6.cs(31,13): error CS1929: ''char'' does not contain a definition
    for ''Append'' and the best extension method overload ''Queryable.Append<char>(IQueryable<char>,
    char)'' requires a receiver of type ''IQueryable<char>''

    '
  timestamp: 1660015993
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        char[]
    c = s.ToCharArray();\n        char[] c2 = new char[c.Length];\n        System.Buffer.BlockCopy(c,
    0, c2, 0, c.Length);\n        string s2 = new string(c2);\n        string s3 =
    \"\";\n        foreach (char c in s2) {\n            char d = Convert.ToChar(System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(c.ToString()));\n
    \           if (d != c) {\n                s3 += d;\n            }\n            else
    {\n                s3 += c;\n            }\n        }\n        return s3; \n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3wk4n2jp.cs(27,23): error CS0136: A local or parameter named ''c'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1660015993
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        int l =
    s.Length;\n        for (int i = 0; i < l; i++) {\n            char ch = s[i];\n
    \           if (char.IsLetter(ch)) {\n                char upper = char.ToUpper(ch);\n
    \               if (upper != ch) {\n                    s[i] = upper;\n                }\n
    \               char lower = char.ToLower(ch);\n                if (lower != ch)
    {\n                    s[i] = lower;\n                }\n            } else {\n
    \               s[i] = ch;\n            }\n        }\n        return new string(s);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmv2p_ezh.cs(28,21): error CS0200: Property or indexer ''string.this[int]''
    cannot be assigned to -- it is read only

    /tmp/tmpmv2p_ezh.cs(32,21): error CS0200: Property or indexer ''string.this[int]''
    cannot be assigned to -- it is read only

    /tmp/tmpmv2p_ezh.cs(35,17): error CS0200: Property or indexer ''string.this[int]''
    cannot be assigned to -- it is read only

    '
  timestamp: 1660015993
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    res = \"\";\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                switch (c) {\n                    case 'a':\n                        c
    = 'A';\n                        break;\n                    case 'b':\n                        c
    = 'B';\n                        break;\n                    case 'c':\n                        c
    = 'C';\n                        break;\n                    case 'd':\n                        c
    = 'D';\n                        break;\n                    case 'e':\n                        c
    = 'E';\n                        break;\n                    case 'f':\n                        c
    = 'F';\n                        break;\n                    case 'g':\n                        c
    = 'G';\n                        break;\n                    case 'h':\n                        c
    = 'H';\n                        break;\n                    case 'i':\n                        c
    = 'I';\n                        break;\n                    case 'j':\n                        c
    = 'J';\n                        break;\n                    case 'k':\n                        c
    = 'K';\n                        break;\n                    case 'l':\n                        c
    = 'L';\n                        break;\n                    case 'm':\n                        c
    = 'M';\n                        break;\n                    case 'n':\n                        c
    = 'N';\n                        break;\n                    case 'o':\n                        c
    = 'O';\n                        break;\n                    case 'p':\n                        c
    = 'P';\n                        break;\n                    case 'q':\n                        c
    = 'Q';\n                        break;\n                    case 'r':\n                        c
    = 'R';\n                        break;\n                    case 's':\n                        c
    = 'S';\n                        break;\n                    case 't':\n                        c
    = 'T';\n                        break;\n                    case 'u':\n                        c
    = 'U';\n                        break;\n                    case 'v':\n                        c
    = 'V';\n                        break;\n                    case 'w':\n                        c
    = 'W';\n                        break;\n                    case 'x':\n                        c
    = 'X';\n                        break;\n                    case 'y':\n                        c
    = 'Y';\n                        break;\n                    case 'z':\n                        c
    = 'Z';\n                        break;\n                    default:\n                        c
    = char.ToUpper(c);\n                        break;\n                }\n            }\n
    \           res += c;\n        }\n        Console.WriteLine(res.ToString().Length);\n
    \       return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3whuaex9.cs(27,25): error CS1656: Cannot assign to ''c'' because it is
    a ''foreach iteration variable''

    /tmp/tmp3whuaex9.cs(30,25): error CS1656: Cannot assign to ''c'' because it is
    a ''foreach iteration variable''

    /tmp/tmp3whuaex9.cs(33,25): error CS1656: Cannot assign to ''c'' because it is
    a ''foreach iteration variable''

    /tmp/tmp3whuaex9.cs(36,25): error CS1656: Cannot assign to ''c'' because it is
    a ''foreach iteration variable''

    /tmp/tmp3whuaex9.cs(39,25): error CS1656: Cannot assign to ''c'' because it is
    a ''foreach iteration variable''

    /tmp/tmp3whuaex9.cs(42,25): error CS1656: Cannot assign to ''c'' because it is
    a ''foreach iteration variable''

    /tmp/tmp3whuaex9.cs(45,25): error CS1656: Cannot assign to ''c'' because it is
    a ''foreach iteration variable''

    /tmp/tmp3whuaex9.cs(48,25): error CS1656: Cannot assign to ''c'' because it is
    a ''foreach iteration variable''

    /tmp/tmp3whuaex9.cs(51,25): error CS1656: Cannot assign to ''c'' because it is
    a ''foreach iteration variable''

    /tmp/tmp3whuaex9.cs(54,25): error CS1656: Cannot assign to ''c'' because it is
    a ''foreach iteration variable''

    /tmp/tmp3whuaex9.cs(57,25): error CS1656: Cannot assign to ''c'' because it is
    a ''foreach iteration variable''

    /tmp/tmp3whuaex9.cs(60,25): error CS1656: Cannot assign to ''c'' because it is
    a ''foreach iteration variable''

    /tmp/tmp3whuaex9.cs(63,25): error CS1656: Cannot assign to ''c'' because it is
    a ''foreach iteration variable''

    /tmp/tmp3whuaex9.cs(66,25): error CS1656: Cannot assign to ''c'' because it is
    a ''foreach iteration variable''

    /tmp/tmp3whuaex9.cs(69,25): error CS1656: Cannot assign to ''c'' because it is
    a ''foreach iteration variable''

    /tmp/tmp3whuaex9.cs(72,25): error CS1656: Cannot assign to ''c'' because it is
    a ''foreach iteration variable''

    /tmp/tmp3whuaex9.cs(75,25): error CS1656: Cannot assign to ''c'' because it is
    a ''foreach iteration variable''

    /tmp/tmp3whuaex9.cs(78,25): error CS1656: Cannot assign to ''c'' because it is
    a ''forea'
  timestamp: 1660015993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        char[]
    charArray = s.ToCharArray();\n        for (int i = 0; i < charArray.Length; i++)
    {\n            char c = charArray[i];\n            if (char.IsLetter(c)) {\n                charArray[i]
    = char.ToUpper(c);\n            } else {\n                charArray[i] = char.ToLower(c);\n
    \           }\n        }\n        return new String(charArray);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <908c1888693a44d69a9a92414b5a66e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <908c1888693a44d69a9a92414b5a66e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015994
