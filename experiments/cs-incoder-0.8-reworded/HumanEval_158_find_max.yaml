name: HumanEval_158_find_max
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function that accepts a list of strings.\n    // The\
  \ list contains different words. Return the word with maximum number\n    // of\
  \ unique characters. If multiple strings have maximum number of unique\n    // characters,\
  \ return the one which comes first in lexicographical order.\n    // >>> FindMax((new\
  \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
  })))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"\
  name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new\
  \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
  })))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
  \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
  }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
  name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
  \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
  }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
  abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new\
  \ string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\"\
  , (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
  \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",\
  \ (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
  \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
  nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
  \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
  this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"\
  }))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
  play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
completions: ["        List<string> newWords = new List<string>();\n        int maxCount\
    \ = 0;\n        string maxWord = \"\";\n\n        foreach (string word in words)\
    \ {\n            int count = word.ToCharArray().Distinct().Count();\n        \
    \    if (count > maxCount) {\n                maxCount = count;\n            \
    \    maxWord = word;\n            }\n\n            newWords.Add(word);\n     \
    \   }\n\n        if (newWords.Count() == maxCount) {\n            return maxWord;\n\
    \        }\n\n        Array.Sort(newWords.ToArray());\n        return newWords.First();",
  "        string mostCommon = string.Empty;\n        List<string> temp = new List<string>();\n\
    \        for (int i = 0; i < words.Count; i++) {\n            int uniqueChars\
    \ = 0;\n            string s = words[i];\n            foreach (char c in s.ToCharArray())\
    \ {\n                if (uniqueChars++ < 1) break;\n            }\n          \
    \  if (uniqueChars > mostCommon) {\n                mostCommon = uniqueChars;\n\
    \                temp = words;\n            }\n        }\n        if (mostCommon\
    \ == 0) return string.Empty;\n        return temp[temp.FindIndex(s => s.Length\
    \ == mostCommon)];", "        bool used = false;\n        char bestChar = '\\\
    0';\n        int bestCount = 0;\n        string bestWord = null;\n        foreach\
    \ (string word in words) {\n            foreach (char c in word) {\n         \
    \       if (used.ContainsKey(c)) {\n                    used[c] += 1;\n      \
    \          }\n                else {\n                    used[c] = 1;\n     \
    \           }\n                if (used[c] > bestCount) {\n                  \
    \  bestCount = used[c];\n                    bestChar = c;\n                 \
    \   bestWord = word;\n                }\n            }\n        }\n        return\
    \ bestWord;", "        int maximum = -1;\n        int current = 0;\n        string\
    \ temp = null;\n        foreach (string word in words) {\n            int count\
    \ = word.Count(ch => ch >= 'a' && ch <= 'z').ToInt() + word.Count(ch => ch >=\
    \ 'A' && ch <= 'Z').ToInt();\n            if (count > maximum) {\n           \
    \     maximum = count;\n                temp = word;\n                current\
    \ = count;\n            }\n        }\n        if (current == maximum) {\n    \
    \        return temp;\n        } else {\n            return FindMax(words);\n\
    \        }", "        // TODO: your code goes here\n        List<string> uniqueChars\
    \ = new List<string>();\n        foreach (string s in words)\n        {\n    \
    \        foreach (char c in s)\n            {\n                if (!uniqueChars.Contains(c))\n\
    \                {\n                    uniqueChars.Add(c);\n                }\n\
    \            }\n        }\n        string res = \"\";\n        int maxCount =\
    \ 0;\n        foreach (string s in words)\n        {\n            foreach (char\
    \ c in s)\n            {\n                if (uniqueChars.Contains(c))\n     \
    \           {\n                    if (uniqueChars.Count() > maxCount)\n     \
    \               {\n                        maxCount = uniqueChars.Count();\n \
    \                       res = s;\n                    }\n                }\n \
    \           }\n        }\n        return res;", "        StringBuilder builder\
    \ = new StringBuilder();\n        int maxLength = 0;\n        string maxValue\
    \ = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n\
    \            builder.Append(word);\n            builder.Append(\" \");\n     \
    \       int len = builder.Length;\n            if (len > maxLength) {\n      \
    \          maxLength = len;\n                maxValue = builder.ToString();\n\
    \                maxCount = words.Count(w => w.Contains(maxValue));\n        \
    \    }\n        }\n        return maxValue;", "        string max = words.Aggregate((max1,\
    \ current) => {\n            string counts = current\n                .GroupBy(x\
    \ => x)\n                .OrderByDescending(x => x.Count())\n                .ThenBy(x\
    \ => x.First())\n                .First().ToString();\n            return max1\
    \ + counts;\n        }).ToLower();\n        return words.FirstOrDefault(x => x.Count()\
    \ == max.Count() && x.ToLower() == max).First();", "        char[] chars = new\
    \ char[words.Max(x => x.Length)];\n        int maxUniqueChars = words.Max(x =>\
    \ x.Distinct().Count());\n        foreach (string word in words) {\n         \
    \   char[] charArray = word.ToCharArray();\n            int uniqueChars = charArray.Distinct().Count();\n\
    \            int indexOfMax = -1;\n            for (int i = 0; i < charArray.Length;\
    \ i++) {\n                if (indexOfMax == -1 || uniqueChars > maxUniqueChars)\
    \ {\n                    indexOfMax = i;\n                } else {\n         \
    \           if (uniqueChars == maxUniqueChars && charArray[i] < charArray[indexOfMax])\n\
    \                        indexOfMax = i;\n                }\n            }\n \
    \           if (uniqueChars == maxUniqueChars && indexOfMax != -1)\n         \
    \       charArray[indexOfMax]++;\n            else\n                charArray[indexOfMax]\
    \ = 1;\n            string finalWord = new string(charArray);\n            return\
    \ finalWord;\n        }\n        return \"none\";", "        Dictionary<char,\
    \ int> counter = new Dictionary<char, int>();\n        char[] chars = new char[words.Count];\n\
    \        int j = 0;\n        foreach (string word in words) {\n            foreach\
    \ (char c in word) {\n                if (!counter.ContainsKey(c)) {\n       \
    \             counter[c] = 1;\n                    chars[j++] = c;\n         \
    \       } else {\n                    counter[c]++;\n                }\n     \
    \       }\n        }\n        int max = counter.Values.Max();\n        char[]\
    \ maxChars = new char[max];\n        int maxCount = 0;\n        foreach (KeyValuePair<char,\
    \ int> kvp in counter) {\n            if (kvp.Value == max) {\n              \
    \  maxChars = kvp.Key.ToCharArray();\n                maxCount = kvp.Value;\n\
    \            }\n        }\n        bool found = false;\n        foreach (string\
    \ word in words) {\n            foreach (char c in word) {\n                if\
    \ (maxChars.Contains(c)) {\n                    found = true;\n              \
    \      break;\n                }\n            }\n            if (found) {\n  \
    \              break;\n            }\n        }\n        if (found) {\n      \
    \      return word;\n        } else {\n            return null;\n        }", " \
    \       // Initialize counts\n        int maxCount = 0;\n        int maxIndex\
    \ = 0;\n        char highestChar = char.MaxValue;\n        foreach (string word\
    \ in words) {\n            int currentCount = word.ToLower().Select(c => (int)c).Distinct().Count();\n\
    \            if (currentCount > maxCount) {\n                maxCount = currentCount;\n\
    \                maxIndex = words.IndexOf(word);\n                highestChar\
    \ = word.ToCharArray().Max();\n            }\n        }\n        return words[maxIndex];",
  "        if (words.Count() > 0) {\n            int maxUniqueCharacters = 0;\n  \
    \          string wordWithMostUniqueCharacters = \"\";\n            foreach (string\
    \ word in words) {\n                int uniqueCharacters = 0;\n              \
    \  foreach (char c in word) {\n                    if (uniqueCharacters <= maxUniqueCharacters)\
    \ {\n                        uniqueCharacters++;\n                    } else {\n\
    \                        break;\n                    }\n                }\n  \
    \              if (uniqueCharacters > maxUniqueCharacters) {\n               \
    \     maxUniqueCharacters = uniqueCharacters;\n                    wordWithMostUniqueCharacters\
    \ = word;\n                }\n            }\n            return wordWithMostUniqueCharacters;\n\
    \        }\n        return string.Empty;", '        return FindMax(words, string.Empty);',
  "        Array.Sort<string>(words);\n        string max = words.Max();\n       \
    \ return max;", '        // Your code goes here', "        // Write your code\
    \ here\n        int MaxCount = 0;\n        int MaxIndex = 0;\n        foreach\
    \ (string word in words) {\n            int currentCount = word.Length;\n    \
    \        if (MaxCount < currentCount) {\n                MaxCount = currentCount;\n\
    \                MaxIndex = words[MaxIndex].Index;\n            }\n          \
    \  else if (MaxCount == currentCount) {\n                MaxIndex = words[MaxIndex].Index;\n\
    \            }\n        }\n        return words[MaxIndex];", "        // TODO\n\
    \        return null;", "        var dict = new Dictionary<string, int>();\n \
    \       foreach(var word in words) {\n            if(dict.ContainsKey(word)) {\n\
    \                dict[word] += 1;\n            } else {\n                dict[word]\
    \ = 1;\n            }\n        }\n        var max = words[0];\n        foreach(var\
    \ pair in dict) {\n            if(pair.Value > max.Value) {\n                max\
    \ = pair;\n            }\n        }\n        return max.Key;", "        var charCounts\
    \ = words.Select(x => new { Char = x.ToCharArray().Max(), Count = x.Count() })\n\
    \            .GroupBy(x => x.Char)\n            .OrderByDescending(x => x.Count);\n\
    \        Debug.Assert(charCounts.Any(x => x.Count == words[0].Length));\n    \
    \    if (charCounts.Count > 0)\n            return charCounts.First().Key;\n \
    \       else\n            return words[0];", "        var res = words.OrderByDescending(x\
    \ => GetUniqueChars(x)).First();\n        if (words.Count() > 1)\n        {\n\
    \            return res;\n        }\n        return string.Empty;", "        int\
    \ maxCount = 0;\n        foreach (string word in words) {\n            int count\
    \ = word.Distinct().Count();\n            if (count > maxCount) {\n          \
    \      maxCount = count;\n                maxWord = word;\n            }\n   \
    \     }\n        return maxWord;", "        Dictionary<string,int> counts = new\
    \ Dictionary<string,int>();\n        foreach (string word in words) {\n      \
    \      int count = 0;\n            if (counts.TryGetValue(word, out count)) {\n\
    \                counts[word] = count + 1;\n            } else {\n           \
    \     counts[word] = 1;\n            }\n        }\n        return counts.OrderByDescending(x\
    \ => x.Value).First().Key;", "        var dict = new Dictionary<string, int>();\n\
    \        for (int i = 0; i < words.Count; i++) {\n            foreach (char c\
    \ in words[i]) {\n                if (!dict.ContainsKey(c)) {\n              \
    \      dict.Add(c, 1);\n                }\n                else {\n          \
    \          dict[c]++;\n                }\n            }\n        }\n        foreach\
    \ (var entry in dict) {\n            if (entry.Value == dict.Max().Value) {\n\
    \                return entry.Key;\n            }\n        }\n        return \"\
    empty\";", "        var charCounts = new HashSet<char>();\n\n        foreach (var\
    \ word in words)\n        {\n            foreach (var letter in word)\n      \
    \      {\n                charCounts.Add(letter);\n            }\n        }\n\n\
    \        string max = charCounts.Aggregate((maxLetter, count) => (count>maxLetter\
    \ ? count : maxLetter));\n\n        var maxList = words.Where(w => w.Count(c=>c==max)\
    \ == w.Count());\n\n        charCounts.Remove(max);\n\n        foreach (var maxWord\
    \ in maxList)\n        {\n            if (charCounts.Contains(maxWord[0]))\n \
    \           {\n                return maxWord;\n            }\n        }\n\n \
    \       return maxList[0];", "        int[] maxVal = new int[words.Count];\n \
    \       List<string> maxItems = new List<string>();\n        foreach (string word\
    \ in words) {\n            int count = 1;\n            for (int i = 0; i < word.Length;\
    \ i++) {\n                count = (count * (word.Length - i));\n            }\n\
    \            maxVal[words.FindIndex(w => w == word)] += count;\n            if\
    \ (count > maxVal[words.FindIndex(w => w == word)]) {\n                maxItems.Clear();\n\
    \                maxItems.Add(word);\n                maxVal[words.FindIndex(w\
    \ => w == word)] = count;\n            } else {\n                maxItems.Add(word);\n\
    \                maxVal[words.FindIndex(w => w == word)] = count;\n          \
    \  }\n        }\n        int index = 0;\n        foreach (string item in maxItems)\
    \ {\n            for (int i = 0; i < item.Length; i++) {\n                int\
    \ value = (maxVal[index] * (item.Length - i));\n                index++;\n   \
    \             if (value > maxVal[index]) {\n                    maxVal[index]\
    \ = value;\n                }\n            }\n        }\n        return maxItems[0];",
  "        char[] charArray = new char[26];\n        Arrays.Fill(charArray, (char)0);\n\
    \n        int count = 0;\n        char[] array = new char[words.Count * 26];\n\
    \n        foreach (string word in words) {\n            for (int i = 0; i < word.Length;\
    \ i++) {\n                char c = word[i];\n                charArray[c] += 1;\n\
    \            }\n        }\n\n        for (int i = 0; i < 26; i++) {\n        \
    \    count = (charArray[i] - 1) / 26 + 1;\n            array[count] = Convert.ToChar(i\
    \ + 'a');\n        }\n\n        int largestCount = 0;\n        int wordIndex =\
    \ 0;\n        int currentCount = 0;\n\n        for (int i = 0; i < array.Length;\
    \ i++) {\n            if (array[i] == array[largestCount]) {\n               \
    \ currentCount += 1;\n                wordIndex += 1;\n                if (currentCount\
    \ > largestCount) {\n                    largestCount = currentCount;\n      \
    \          }\n            } else {\n                currentCount = 0;\n      \
    \      }\n        }\n\n        if (wordIndex == words.Count) {\n            return\
    \ words[wordIndex];\n        } else if (largestCount == words[wordIndex].Length)\
    \ {\n            return words[wordIndex];\n        } else {\n            return\
    \ words[wordIndex];\n        }", "        int counter = new Dictionary<char, int>();\n\
    \        StringBuilder max = new StringBuilder();\n        foreach (var word in\
    \ words) {\n            foreach (var letter in word) {\n                int count;\n\
    \                bool has = counter.TryGetValue(letter, out count);\n        \
    \        if (has) counter[letter] = count + 1;\n                else counter[letter]\
    \ = 1;\n                if (counter[letter] > max.Length) {\n                \
    \    max.Append(letter);\n                } else if (counter[letter] == max.Length)\
    \ {\n                    if (has) max.Append(letter);\n                }\n   \
    \         }\n        }\n        if (counter.Count > words.Count) max.Append(string.Empty);\n\
    \        return (counter.ElementAt(max.Length).Key == string.Empty) ? max[0] :\
    \ max;", "        string max = \"\";\n        foreach (string w in words) {\n\
    \            int uniqueChar = w.ToCharArray().Distinct().Count();\n          \
    \  if (uniqueChar > max.Length) {\n                max = w;\n            }\n \
    \       }\n        return max;", "        if (words.Count == 0) return \"\";\n\
    \n        int n = words.Count;\n        int[] freq = new int[n];\n        Dictionary<string,\
    \ int> d = new Dictionary<string, int>();\n        List<string> results = new\
    \ List<string>();\n\n        foreach (string w in words) {\n            if (d.TryGetValue(w,\
    \ out int f)) {\n                freq[f]++;\n            } else {\n          \
    \      d.Add(w, 1);\n            }\n        }\n\n        for (int i = 0; i < freq.Length;\
    \ i++) {\n            if (freq[i] == 1) {\n                results.Add(words[i]);\n\
    \            }\n        }\n\n        if (results.Count > 0)\n            return\
    \ results[0];\n        else\n            return \"\";", "        if (words.Count\
    \ < 2) {\n            throw new ArgumentException(\"words must contain at least\
    \ 2 words\");\n        }\n        int maxCount = 0;\n        string maxWord =\
    \ null;\n        for (int i = 0; i < words.Count; ++i) {\n            char[] chars\
    \ = words[i].ToCharArray();\n            int uniqueCharCount = chars.Count(c =>\
    \ chars.Contains(c));\n            if (uniqueCharCount > maxCount) {\n       \
    \         maxCount = uniqueCharCount;\n                maxWord = words[i];\n \
    \           }\n        }\n        return maxWord;", "        var maxWord = words.OrderByDescending(w\
    \ => w.Length).FirstOrDefault();\n        if (words.Select(w => w.Length).OrderByDescending(w\
    \ => w).First().Equals(maxWord.Length))\n            return maxWord;\n\n     \
    \   return maxWord.OrderBy(w => w).First();", "        HashSet<char> chars = new\
    \ HashSet<char>();\n        foreach (var word in words) {\n            foreach\
    \ (var c in word)\n                chars.Add(c);\n        }\n\n        var sortedWords\
    \ = words.OrderBy(s => chars.Count);\n        return sortedWords.First();", " \
    \       List<int> maxChars = new List<int>();\n        List<int> charCounts =\
    \ new List<int>();\n        StringBuilder sb = new StringBuilder();\n        foreach\
    \ (string word in words) {\n            foreach (char c in word) {\n         \
    \       if (maxChars.Contains(c)) {\n                    maxChars[c]++;\n    \
    \            } else {\n                    maxChars.Add(c);\n                \
    \    charCounts.Add(1);\n                }\n            }\n            foreach\
    \ (int c in maxChars) {\n                for (int i = 0; i < c; i++) {\n     \
    \               sb.Append(c);\n                }\n            }\n            sb.Append(\"\
    \ \");\n        }\n\n        charCounts.Sort();\n\n        int maxCount = 0;\n\
    \        int maxCountIndex = 0;\n        for (int i = 0; i < charCounts.Count;\
    \ i++) {\n            int count = charCounts[i];\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxCountIndex = i;\n \
    \           }\n        }\n\n        return words.ElementAt(maxCountIndex);", " \
    \       var max = new List<string>();\n        var maxCnt = 0;\n        foreach\
    \ (string s in words) {\n            var uniqueChars = new HashSet<char>(s);\n\
    \            if (uniqueChars.Count == maxCnt) {\n                max.Add(s);\n\
    \            }\n            else {\n                maxCnt = uniqueChars.Count;\n\
    \                max.Add(s);\n            }\n        }\n        return max.Count\
    \ > 0 ? max.First() : \"No solution\";", "        int numberOfUniqueCharacters\
    \ = 0;\n        string maxUniqueCharacter = \"\";\n        foreach (string word\
    \ in words) {\n            numberOfUniqueCharacters = 0;\n            foreach\
    \ (char letter in word.ToCharArray()) {\n                if (!char.IsLetter(letter))\
    \ {\n                    numberOfUniqueCharacters++;\n                }\n    \
    \        }\n            if (numberOfUniqueCharacters > maxUniqueCharacter) {\n\
    \                maxUniqueCharacter = word;\n            }\n        }\n      \
    \  return maxUniqueCharacter;", "        var orderedWords = words.OrderBy(word\
    \ => CountUnique(word)).ToList();\n        var maxCountWord = orderedWords.First();\n\
    \n        // If there exists more than one max word in the ordered list of words,\n\
    \        // select the one with the maximum number characters\n        if (orderedWords.Count\
    \ > 1) {\n            maxCountWord = orderedWords.GroupBy(word => CountUnique(word)).OrderByDescending(g\
    \ => g.Key).First().Key;\n        }\n\n        return maxCountWord;", "      \
    \  // TODO: Write code here.\n        // Your code here.\n        List<string>\
    \ orderedWords = new List<string>();\n        List<string> orderedUniqueWords\
    \ = new List<string>();\n        HashSet<string> uniqueWords = new HashSet<string>();\n\
    \        string maxWord = string.Empty;\n        foreach (string s in words) {\n\
    \            char[] letters = s.ToCharArray();\n            List<int> uniqueCounts\
    \ = new List<int>();\n            foreach (char letter in letters) {\n       \
    \         if (uniqueWords.Contains(letter)) {\n                    uniqueCounts.Add(uniqueWords.Count(y\
    \ => y == letter));\n                }\n            }\n            int maxCount\
    \ = 0;\n            bool maxCountReached = false;\n            for (int i = 0;\
    \ i < uniqueCounts.Count; ++i) {\n                if (uniqueCounts[i] > maxCount)\
    \ {\n                    maxCount = uniqueCounts[i];\n                    maxCountReached\
    \ = true;\n                }\n            }\n            if (maxCountReached)\n\
    \            {\n                orderedUniqueWords.Add(s);\n            }\n  \
    \          else\n            {\n                orderedWords.Add(s);\n       \
    \         uniqueWords.Add(s);\n            }\n        }\n        orderedWords.Sort();\n\
    \        int maxCount = 0;\n        bool maxCountReached = false;\n        foreach\
    \ (string s in orderedWords) {\n            if (uniqueWords.Contains(s))\n   \
    \         {\n                uniqueWords.Remove(s);\n                maxCount++;\n\
    \            }\n            if (maxCount > maxCountReached)\n            {\n \
    \               maxCountReached = true;\n                maxWord = s;\n      \
    \      }\n        }\n        return maxWord;", "        var max = words.Max();\n\
    \        var counts = words.GroupBy(w => w).ToDictionary(g => g.Key, g => g.Count());\n\
    \        if (counts[max].Count != 1) {\n            Debug.WriteLine(counts[max].Count.ToString()\
    \ + \" unique characters for \" + max.ToString() + \"\\n\");\n        }\n    \
    \    return max;", "        if (words.Count() == 0) return \"\";\n        char[]\
    \ array = new char[words.Count()];\n        Array.Sort(words, (x, y) => Array.IndexOf(array,\
    \ y) - Array.IndexOf(array, x));\n        int maxCount = 0;\n        string maxWord\
    \ = \"\";\n        foreach(var word in words) {\n            int count = 0;\n\
    \            foreach(var letter in word) {\n                if (letter == array[count])\
    \ count++;\n            }\n            if (count > maxCount) maxCount = count;\n\
    \            if (count == maxCount) maxWord = word;\n        }\n        return\
    \ maxWord;", "        string max = null;\n        int maxLength = 0;\n       \
    \ foreach (string word in words) {\n            int length = word.Length;\n  \
    \          if (length > maxLength) {\n                maxLength = length;\n  \
    \              max = word;\n            }\n        }\n        return max;", " \
    \       int maxCount = 0;\n        string maxString = \"\";\n        foreach (string\
    \ word in words) {\n            char[] charArray = word.ToCharArray();\n     \
    \       int charCount = charArray.Distinct().Count();\n            if (charCount\
    \ > maxCount) {\n                maxCount = charCount;\n                maxString\
    \ = word;\n            }\n        }\n        return maxString;", "        string\
    \ result;\n        List<string> wordList = new List<string>(words);\n        Dictionary<string,\
    \ int> characters = new Dictionary<string, int>();\n        foreach (string word\
    \ in wordList) {\n            foreach (char letter in word) {\n              \
    \  int count;\n                if (characters.TryGetValue(letter, out count))\
    \ {\n                    characters[letter] = count + 1;\n                } else\
    \ {\n                    characters[letter] = 1;\n                }\n        \
    \    }\n        }\n        foreach (KeyValuePair<string, int> kvp in characters)\
    \ {\n            if (kvp.Value == wordList.Count) {\n                result =\
    \ kvp.Key;\n                break;\n            }\n        }\n        return result;",
  "        List<string> sortedWords = words.OrderBy(w => w).ToList();\n        foreach\
    \ (string word in sortedWords) {\n            int count = word.ToCharArray().Distinct().Count();\n\
    \            if (count > words.Max(w => w.ToCharArray().Distinct().Count())) {\n\
    \                return word;\n            }\n        }\n        return string.Empty;",
  "        // Initialize our counter.\n        int maxCount = 0;\n\n        // Get\
    \ the first word and store it into a variable called \"a\".\n        string a\
    \ = words.First();\n\n        // Loop through each string in the list of strings.\n\
    \        foreach (string s in words) {\n            // Initialize a variable called\
    \ \"count\" to 0.\n            int count = 0;\n\n            // Initialize a variable\
    \ called \"count2\" to 0.\n            int count2 = 0;\n\n            // Loop\
    \ through each character in the string and increment the counter \n          \
    \  // if it is not the same as the character in the string \"a\".\n          \
    \  for (int i = 0; i < s.Length; i++) {\n                // If the character in\
    \ the string is different than the character in \n                // string \"\
    a\", then increment the counter.\n                if (s[i] != a[i]) {\n      \
    \              count++;\n                }\n                // If the character\
    \ in the string is equal to the character in string \"a\",\n                //\
    \ then increment the counter again but only if the count has gone up\n       \
    \         // to or equal to maxCount.\n                if (count == maxCount)\
    \ {\n                    count2++;\n                }\n            }\n       \
    \     // If the number of unique characters has gone up above maxCount,\n    \
    \        // then set the maxCount variable equal to the number of unique characters.\n\
    \            if (count2 > maxCount) {\n                maxCount = count2;\n  \
    \          }\n        }\n        // Return the first string in the list that has\
    \ the maximum number of unique characters.\n        return words.Where(s => s.Length\
    \ == maxCount).OrderBy(s => s).First();", "        Dictionary<string, int> uniqueChars\
    \ = new Dictionary<string, int>();\n        string resultString = \"\";\n    \
    \    int resultLength = 0;\n        int max = 0;\n        foreach(var word in\
    \ words) {\n            int uniqueCharsCount = 0;\n            foreach(var letter\
    \ in word) {\n                if (!uniqueChars.ContainsKey(letter)) {\n      \
    \              uniqueChars[letter] = 0;\n                    uniqueCharsCount++;\n\
    \                }\n                uniqueChars[letter]++;\n            }\n  \
    \          if (uniqueCharsCount > max) {\n                max = uniqueCharsCount;\n\
    \                resultString = word;\n                resultLength = word.Length;\n\
    \            }\n        }\n        if (uniqueChars.Count == 1) {\n           \
    \ return resultString;\n        }\n        else if (uniqueChars.Count > 1) {\n\
    \            List<string> result = new List<string>();\n            int longestWordLength\
    \ = 0;\n            foreach (var letter in uniqueChars.Keys) {\n             \
    \   if (uniqueChars[letter] == max) {\n                    result.Add(resultString);\n\
    \                }\n                if (uniqueChars[letter] > max) {\n       \
    \             break;\n                }\n                if (longestWordLength\
    \ == 0 || uniqueChars[letter] > uniqueChars[longestWordLength]) {\n          \
    \          longestWordLength = uniqueChars[letter];\n                }\n     \
    \       }\n            foreach (var word in result) {\n                return\
    \ word;\n            }\n        }\n        return \"\";", "        var charCounts\
    \ = words.Select(word => word.ToCharArray().Distinct().ToArray()).ToList();\n\n\
    \        // To keep track of which words have the maximum number of unique chars\n\
    \        var maxWords = charCounts.Where(c => c.Length == charCounts.Max(word\
    \ => word.Length)).FirstOrDefault();\n\n        // If there is more than 1 word\
    \ with maximum number of unique chars,\n        // return the word with lexicographical\
    \ order first and print it\n        if (maxWords != null && maxWords.Length >\
    \ 1)\n        {\n            return words.FindIndex(word => maxWords.All(word\
    \ => word.IndexOf(word, StringComparison.OrdinalIgnoreCase) >= 0))\n         \
    \       .ToString()\n                .TrimStart('0');\n        }\n        // If\
    \ only 1 word with maximum number of unique chars has been\n        // found,\
    \ print that word and return it\n        if (maxWords == null)\n        {\n  \
    \          return words.FindIndex(word => word.IndexOf(charCounts.Max(word =>\
    \ word.Length), StringComparison.OrdinalIgnoreCase) >= 0)\n                .ToString()\n\
    \                .TrimStart('0');\n        }\n\n        // If no words with maximum\
    \ number of unique chars have been found,\n        // return the one that comes\
    \ first lexicographical order and print it\n        return words.FindIndex(word\
    \ => word.IndexOf(charCounts.Max(word => word.Length), StringComparison.OrdinalIgnoreCase)\
    \ >= 0)\n            .ToString()\n            .TrimStart('0');", "        StringBuilder\
    \ result = new StringBuilder();\n        Dictionary<string, int> charCounts =\
    \ new Dictionary<string, int>();\n        foreach (string word in words) {\n \
    \           foreach (char c in word) {\n                if (charCounts.ContainsKey(c))\n\
    \                    charCounts[c] += 1;\n                else\n             \
    \       charCounts[c] = 1;\n            }\n        }\n        string max = \"\"\
    ;\n        int maxCount = 0;\n        foreach (KeyValuePair<char, int> kvp in\
    \ charCounts) {\n            if (kvp.Value > maxCount) {\n                maxCount\
    \ = kvp.Value;\n                max = kvp.Key;\n            }\n        }\n   \
    \     result.Append(max);\n        if (maxCount == words.Count)\n            return\
    \ max;\n        return FindMax(words);", "        Dictionary<int, List<string>>\
    \ dict = new Dictionary<int, List<string>>();\n        foreach (string word in\
    \ words) {\n            string key = word.Aggregate(0, (current, char) =>\n  \
    \              (current += (int)char,\n                (current < 0x100000000\
    \ ? current : current & 0xffffffff));\n            if (!dict.ContainsKey(key))\n\
    \                dict.Add(key, new List<string>());\n            dict[key].Add(word);\n\
    \        }\n        int max = int.MinValue;\n        foreach (KeyValuePair<int,\
    \ List<string>> entry in dict) {\n            int curr = entry.Key;\n        \
    \    if (curr > max) {\n                max = curr;\n            }\n        }\n\
    \        List<string> maxList = dict[0].Where(item => item.Length == max).OrderBy(item\
    \ => item).ToList();\n        return maxList.Count == 1 ? maxList[0] : FindMax(maxList);",
  "        // Write your code here\n        var wordCount = words.Select(x => x.ToCharArray().Distinct().Count()).OrderByDescending(x\
    \ => x).First();\n        if (wordCount.Equals(0))\n        {\n            return\
    \ words.First();\n        }\n        return words.FirstOrDefault(x => x.ToCharArray().Distinct().Count()\
    \ == wordCount);", "        // sort words by length (longest first)\n        words\
    \ =\n            words.OrderByDescending(x => x.Length).ThenBy(x => x).ToList();\n\
    \n        // map each word into its length\n        var wordByLength =\n     \
    \       words.ToDictionary(x => x.Length, x => x);\n\n        // sort words by\
    \ number of unique characters\n        words =\n            words.OrderByDescending(x\
    \ =>\n            {\n                var uniqueChars = x.GroupBy(y => y).Where(y\
    \ => y.Count() == 1).Select(y => y.Key).ToList();\n                return uniqueChars.Count;\n\
    \            }).ThenBy(x => x).ToList();\n\n        // map each word into its\
    \ number of unique characters\n        var wordByUniqueChars =\n            words.ToDictionary(x\
    \ =>\n            {\n                var uniqueChars = x.GroupBy(y => y).Where(y\
    \ => y.Count() == 1).Select(y => y.Key).ToList();\n                return uniqueChars.Count;\n\
    \            }, x => x);\n\n        // find the word with maximum number of unique\
    \ characters\n        int maxWordLength = wordByLength.Keys.Max();\n        string\
    \ maxWord = wordByLength[maxWordLength];\n\n        // find the word with maximum\
    \ number of unique characters\n        int maxWordUniqueChars = wordByUniqueChars.Keys.Max();\n\
    \        string maxWordWithUniqueChars = wordByUniqueChars[maxWordUniqueChars];\n\
    \n        // find the word with maximum number of unique characters\n        int\
    \ maxWord = wordByLength.Keys.Max();\n        string maxWordWithUniqueChars =\
    \ wordByUniqueChars[maxWord];\n\n        // return the word with the maximum number\
    \ of unique characters\n        if (maxWord.Length > maxWordWithUniqueChars.Length)\n\
    \            return maxWordWithUniqueChars;\n\n        return maxWord;", "   \
    \     bool foundMax = false;\n        int maxCharacters = 0;\n        string result\
    \ = \"\";\n        foreach (string word in words) {\n            var characters\
    \ = word.Distinct().Count();\n            if (found == false || maxCharacters\
    \ < characters) {\n                maxCharacters = characters;\n             \
    \   result = word;\n            }\n            foundMax = foundMax || characters\
    \ == maxCharacters;\n        }\n        return result;", "        int maxCount\
    \ = 0;\n        string wordWithMaxCount;\n        // for each word in the list\
    \ \n        foreach (string word in words) {\n            int currentCount = wordToNumbers.Where(x\
    \ => x.Contains(word)).Distinct().Count();\n            if (currentCount > maxCount)\
    \ {\n                maxCount = currentCount;\n                wordWithMaxCount\
    \ = word;\n            }\n        }\n        return wordWithMaxCount;", "    \
    \    string word1 = null;\n        string word2 = null;\n        int count1 =\
    \ 0, count2 = 0, maxCount = 0;\n        foreach (string word in words) {\n   \
    \         foreach (char c in word.ToCharArray()) {\n                if (count1\
    \ < count2) {\n                    count1++;\n                    word1 = word;\n\
    \                } else if (count2 < count1) {\n                    count2++;\n\
    \                    word2 = word;\n                }\n                if (count1\
    \ == count2) {\n                    maxCount++;\n                }\n         \
    \   }\n        }\n        return String.Format(\"{0}\", word1);", "        int\
    \ maxCount = new int[256]; // counts characters\n        int count = 0;\n    \
    \    Dictionary<int, int> charCounts = new Dictionary<int, int>();\n        foreach\
    \ (string word in words)\n        {\n            for (int i = 0; i < word.Length;\
    \ i++)\n            {\n                char ch = word[i];\n                if(!charCounts.ContainsKey(ch))\n\
    \                {\n                    charCounts[ch] = 1;\n                }\n\
    \                else\n                {\n                    charCounts[ch]++;\n\
    \                }\n                maxCount[ch] = Math.Max(maxCount[ch], charCounts[ch]);\n\
    \                count++;\n            }\n        }\n        if (count != 1)\n\
    \        {\n            return \"\";\n        }\n        int maxCountIndex = 0;\n\
    \        foreach (char ch in maxCount)\n        {\n            if (maxCount[ch]\
    \ > charCounts[maxCountIndex])\n            {\n                maxCountIndex =\
    \ ch;\n            }\n        }\n        return words[maxCountIndex];", "    \
    \    int counter = 0;\n        List<string> wordList = new List<string>();\n \
    \       foreach (string s in words) {\n            int uniqueChars = WordCounter(s);\n\
    \            if (uniqueChars > counter) {\n                counter = uniqueChars;\n\
    \                wordList.Clear();\n                wordList.Add(s);\n       \
    \     }\n        }\n        if (wordList.Count != 0)\n            return wordList.OrderBy(n\
    \ => n).FirstOrDefault();\n        else\n            return \"\";", "        string\
    \ result = \"\";\n        Dictionary<char, int> charCount = new Dictionary<char,\
    \ int>();\n        foreach(var word in words) {\n            foreach(var letter\
    \ in word) {\n                if (!charCount.ContainsKey(letter)) {\n        \
    \            charCount[letter] = 1;\n                }\n                else {\n\
    \                    charCount[letter] = charCount[letter] + 1;\n            \
    \    }\n            }\n        }\n        foreach (var item in charCount) {\n\
    \            var value = item.Value;\n            if (value != 1) {\n        \
    \        result += item.Key;\n            }\n        }\n        return result;",
  "        int maxCount = words[0].ToCharArray().Length;\n        string maxWord =\
    \ null;\n        foreach (string word in words) {\n            if (maxCount <\
    \ word.ToCharArray().Length) {\n                maxWord = word;\n            \
    \    maxCount = word.ToCharArray().Length;\n            } else if (maxCount ==\
    \ word.ToCharArray().Length) {\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;", "        List<string> wordsInUnique = new\
    \ List<string>();\n        words.ForEach(s => {\n            HashSet<string> characters\
    \ = new HashSet<string>();\n            foreach (char c in s.ToCharArray())\n\
    \            {\n                characters.Add(c);\n            }\n          \
    \  wordsInUnique.Add(s);\n            int maxUnique = characters.Count;\n    \
    \        int maxIndex = 0;\n            foreach (int i in Enumerable.Range(0,\
    \ characters.Count))\n            {\n                if (maxUnique < characters[i])\n\
    \                {\n                    maxUnique = characters[i];\n         \
    \           maxIndex = i;\n                }\n            }\n            words[maxIndex]\
    \ = s;\n            wordsInUnique[maxIndex] = s;\n        });\n        if (wordsInUnique.Count\
    \ > 1)\n        {\n            return wordsInUnique.OrderByDescending(s => s.Length).First();\n\
    \        }\n        else\n        {\n            return wordsInUnique[0];\n  \
    \      }", "        string result = \"\";\n        HashSet<char> chars = new HashSet<char>();\n\
    \n        foreach (string word in words) {\n            foreach (char letter in\
    \ word) {\n                if (!chars.Contains(letter)) {\n                  \
    \  chars.Add(letter);\n                }\n            }\n        }\n\n       \
    \ foreach (char c in chars) {\n            if (chars.Count(c => c == c) > words.Max(w\
    \ => w.Count(t => t == c))) {\n                result = words[words.FindIndex(w\
    \ => w.Count(t => t == c)).ToString()];\n                break;\n            }\n\
    \        }\n\n        return result;", "        Debug.Assert(words != null);\n\
    \        if (words.Count == 0) return null;\n        var max = new HashSet<char>(words.SelectMany(w\
    \ => w));\n        int max = words.Max(w => w.Distinct().Count());\n        return\
    \ words.FirstOrDefault(w => w.Distinct().Count() == max);", "        var dictionary\
    \ = new Dictionary<string, int>();\n        foreach (string word in words) {\n\
    \            foreach (char letter in word)\n                dictionary.Add(letter,\
    \ 0);\n        }\n        foreach (string word in words) {\n            foreach\
    \ (char letter in word) {\n                int count;\n                if (dictionary.TryGetValue(letter,\
    \ out count))\n                    dictionary[letter] += 1;\n                else\n\
    \                    dictionary[letter] = 1;\n            }\n        }\n     \
    \   List<KeyValuePair<string, int>> maxValues = new List<KeyValuePair<string,\
    \ int>>();\n        foreach (KeyValuePair<string, int> kvp in dictionary) {\n\
    \            if (kvp.Value == words.Count())\n                maxValues.Add(kvp);\n\
    \        }\n        if (maxValues.Count > 0)\n            return maxValues.First().Key;\n\
    \        else\n            return words[0];", "        if (words == null) {\n\
    \            return string.Empty;\n        }\n        var maxCount = new List<string>();\n\
    \        foreach (var word in words) {\n            var count = GetUniqueCharacterCount(word);\n\
    \            maxCount.Add(word);\n        }\n        string maxValue = maxCount.OrderByDescending(x\
    \ => x).First();\n        return maxValue;", "        int maxChars = 0;\n    \
    \    string maxWord = \"\";\n        foreach (string w in words)\n           \
    \ FindMaxChars(w, maxWord);\n        int maxUniqueChars = words.Count() - maxChars;\n\
    \        return maxWord + (maxUniqueChars > maxChars ? \"(\" + maxUniqueChars\
    \ + \")\" : \"\");", "        string maxWord = \"\";\n        int maxNumber =\
    \ 0;\n        foreach (string word in words) {\n            int currNumber = 0;\n\
    \            int i = 0;\n            foreach (char c in word) {\n            \
    \    if (i == 0) {\n                    currNumber++;\n                }\n   \
    \             else {\n                    currNumber++;\n                }\n \
    \               i++;\n            }\n            if (currNumber > maxNumber) {\n\
    \                maxNumber = currNumber;\n                maxWord = word;\n  \
    \          }\n        }\n        return maxWord;", "        string word = \"\"\
    ;\n        int maxCount = 0, maxCountValue = 0, maxCountIndex = 0;\n        foreach\
    \ (string str in words) {\n            var uniqueCharsCount = str.Distinct().Count();\n\
    \            if (uniqueCharsCount > maxCount) {\n                maxCount = uniqueCharsCount;\n\
    \                word = str;\n                maxCountValue = uniqueCharsCount;\n\
    \                maxCountIndex = 0;\n            } else if (uniqueCharsCount ==\
    \ maxCount) {\n                if (uniqueCharsCount < maxCountValue) {\n     \
    \               maxCountValue = uniqueCharsCount;\n                    word =\
    \ str;\n                    maxCountIndex = words.IndexOf(str);\n            \
    \    }\n            }\n        }\n        if (maxCount == 0) {\n            throw\
    \ new Exception(\"no word found in list\");\n        }\n        string returnWord\
    \ = words[maxCountIndex];\n        return returnWord;", "        List<string>\
    \ wordsInCharCountOrder = new List<string>();\n        int maxCharCount = 0;\n\
    \        foreach (string word in words) {\n            string charCountOrder =\
    \ word.ToCharArray().\n                Select(c => new { Char = c, CharCount =\
    \ word.ToCharArray().Count() }).\n                OrderBy(o => o.CharCount).\n\
    \                Select(o => o.Char).\n                Aggregate((a, b) => a +\
    \ b).ToString();\n            if (charCountOrder.Length > maxCharCount) {\n  \
    \              maxCharCount = charCountOrder.Length;\n            }\n        \
    \    wordsInCharCountOrder.Add(charCountOrder);\n        }\n        return wordsInCharCountOrder.Count\
    \ == words.Count ? wordsInCharCountOrder.First() : wordsInCharCountOrder.Last();",
  "        int maxCount = words.First().ToCharArray().Distinct().Count();\n      \
    \  return words.FirstOrDefault(w => w.ToCharArray().Distinct().Count() == maxCount);",
  "        if (words == null || words.Count == 0)\n            return \"No words provided\"\
    ;\n        int maxCount = 0;\n        string bestWord = string.Empty;\n      \
    \  string tempWord = string.Empty;\n        foreach (string word in words) {\n\
    \            char[] uniqueChars = word.ToCharArray().Distinct().ToArray();\n \
    \           int count = new string(uniqueChars).Length;\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                bestWord =\
    \ word;\n            }\n        }\n        return bestWord;", "        /*\n  \
    \          Sort by length in descending order, then alphabetically if equal length\n\
    \            Sort by first letter, then last letter in case of a tie\n       \
    \     Sort by first letter, then last letter in case of a tie\n        */\n\n\
    \        var charCount = words.Select(s => s.ToCharArray().Distinct().Count());\n\
    \        var charCountSorted = charCount.OrderByDescending(x => x).ThenBy(x =>\
    \ x.Equals(0) ? String.Empty : x.ToString()).ThenBy(x => x.Equals(0) ? String.Empty\
    \ : x.ToString());\n        /*\n            Use this for count\n            charCount\
    \ = new List<int>(new int[]{1, 3, 2, 3, 2, 1, 2, 3, 1});\n\n            Use this\
    \ for count\n            charCount = new List<int>(new int[]{1, 3, 2, 3, 2, 1,\
    \ 2, 3, 1});\n\n            charCountSorted = new List<int>(new int[]{4, 3, 2,\
    \ 1, 4, 3, 1, 2});\n        */\n\n        var max = charCountSorted.First();\n\
    \n        for (int i = 1; i < charCountSorted.Count - 1; i++) {\n            if\
    \ (charCountSorted[i] == max) {\n                max = Math.Max(max, charCountSorted[i\
    \ + 1]);\n            }\n        }\n\n        var result = words.FirstOrDefault(x\
    \ => charCountSorted.FirstOrDefault(y => x == y) == max);\n        /*\n      \
    \      charCountSorted.FirstOrDefault(y => x == y)\n        */\n\n        return\
    \ result;", "        if (words.Count == 0) return string.Empty;\n        Debug.Assert(words.Count\
    \ == 1 || words.Count == 2);\n        int maxCount = 0;\n        string maxWord\
    \ = string.Empty;\n        foreach (string word in words) {\n            int count\
    \ = GetMaxCount(word);\n            if (count > maxCount) {\n                maxWord\
    \ = word;\n                maxCount = count;\n            }\n        }\n     \
    \   return maxWord;", "        int max = 0;\n        int maxIndex = 0;\n     \
    \   string word = \"\";\n        int i = 0;\n        foreach(var item in words)\
    \ {\n            var x = item.ToCharArray().Distinct().Count();\n            if(x>max)\
    \ {\n                max = x;\n                maxIndex = i;\n               \
    \ word = item;\n            }\n            ++i;\n        }\n        return maxIndex;",
  "        int maxCount = 0;\n        int maxIndex = 0;\n        string maxWord =\
    \ \"\";\n        int maxCnt = 0;\n        string temp = \"\";\n        foreach\
    \ (string word in words) {\n            int cnt = 1;\n            foreach (char\
    \ c in word) {\n                if (cnt == maxCnt) break;\n                cnt++;\n\
    \            }\n            if (cnt == maxCnt) continue;\n            foreach\
    \ (char c in word) {\n                if (maxCnt <= maxCnt) {\n              \
    \      if (maxCnt > maxCount) {\n                        maxCount = maxCnt;\n\
    \                        maxIndex = maxWord.Length;\n                        maxWord\
    \ = word;\n                    }\n                    if (maxCnt == maxCount)\
    \ maxWord = word;\n                }\n            }\n        }\n        return\
    \ maxWord;", "        Dictionary<string, int> count = new Dictionary<string, int>();\n\
    \        words.ForEach(word => {\n            foreach (char c in word) {\n   \
    \             if (!count.ContainsKey(c)) {\n                    count[c] = 1;\n\
    \                }\n                else\n                {\n                \
    \    count[c] += 1;\n                }\n            }\n        });\n        int\
    \ maxCount = 0;\n        foreach (var pair in count) {\n            if (pair.Value\
    \ > maxCount) {\n                maxCount = pair.Value;\n            }\n     \
    \   }\n        string max = maxCount == 0 ? string.Empty : maxCount.ToString();\n\
    \        if (count.Count == 0)\n        {\n            return max;\n        }\n\
    \        foreach (var pair in count) {\n            if (pair.Value == maxCount)\
    \ {\n                return pair.Key;\n            }\n        }\n        foreach\
    \ (var pair in count) {\n            if (pair.Value > maxCount) {\n          \
    \      max = pair.Key;\n            }\n        }\n        return max;", "    \
    \    int[] max = new int[26];\n        int count = 0;\n        foreach(string\
    \ word in words) {\n            foreach(char c in word) {\n                max[c-'a']\
    \ ++;\n            }\n            foreach (char c in word) {\n               \
    \ count++;\n            }\n            if (count == words.Count()) {\n       \
    \         if (max[max[0] - 1] > max[max[1] - 1]) {\n                    return\
    \ word;\n                } else {\n                    return words[0];\n    \
    \            }\n            }\n        }\n        return words[0];", "       \
    \ int counter = 0;\n        int max = 0;\n        int min = 0;\n        string\
    \ result = \"\";\n        foreach (string word in words) {\n            string\
    \ temp = word;\n            char[] chars = temp.ToCharArray();\n            counter\
    \ = 0;\n            for (int i = 0; i < chars.Length; i++) {\n               \
    \ bool found = false;\n                for (int j = 0; j < chars.Length; j++)\
    \ {\n                    if (chars[i] == chars[j]) {\n                       \
    \ counter++;\n                        found = true;\n                        break;\n\
    \                    }\n                }\n                if (!found) {\n   \
    \                 counter = 1;\n                }\n                if (counter\
    \ > max) {\n                    max = counter;\n                }\n          \
    \      if (counter < min) {\n                    min = counter;\n            \
    \    }\n            }\n            if (min == max) {\n                result =\
    \ temp;\n            }\n        }\n        return result;", "        int maxCount\
    \ = 0;\n        string maxWord = string.Empty;\n        foreach (string word in\
    \ words) {\n            int count = 0;\n            foreach (char c in word) {\n\
    \                count += word.Count(ch => ch == c);\n            }\n        \
    \    if (count > maxCount) {\n                maxCount = count;\n            \
    \    maxWord = word;\n            }\n        }\n        return maxWord;", "  \
    \      List<string> unique = new List<string>();\n        foreach (string s in\
    \ words) {\n            string str = s.Trim().ToLower();\n            foreach\
    \ (char c in str) {\n                if (!unique.Contains(c)) {\n            \
    \        unique.Add(c);\n                }\n            }\n        }\n       \
    \ string maxValue = string.Empty;\n        foreach (char c in unique) {\n    \
    \        int count = 1;\n            foreach (string s in words) {\n         \
    \       if (s.Trim().ToLower().Contains(c.ToString())) {\n                   \
    \ count++;\n                }\n            }\n            if (count > unique.Count\
    \ && count > maxValue.Length) {\n                maxValue = c.ToString();\n  \
    \          }\n        }\n        return maxValue;", "        string maxWord =\
    \ null;\n        int maxLength = 0;\n\n        for (int i = 0; i < words.Count;\
    \ i++)\n        {\n            int wordLength = 0;\n            HashSet<char>\
    \ charSet = new HashSet<char>();\n            foreach (string s in words)\n  \
    \          {\n                int count = 0;\n                for (int j = 0;\
    \ j < s.Length; j++)\n                {\n                    if (s.Length > count)\n\
    \                    {\n                        count = s.Length;\n          \
    \          }\n                    char ch = s[j];\n                    charSet.Add(ch);\n\
    \                }\n\n                if (charSet.Count > wordLength)\n      \
    \          {\n                    wordLength = charSet.Count;\n              \
    \      maxWord = s;\n                }\n\n            }\n\n            int count\
    \ = 0;\n            for (int j = 0; j < maxWord.Length; j++)\n            {\n\
    \                if (maxWord.Length > count)\n                {\n            \
    \        count = maxWord.Length;\n                }\n            }\n\n       \
    \     if (wordLength > maxLength)\n            {\n                maxLength =\
    \ wordLength;\n                maxWord = words[i];\n            }\n        }\n\
    \n        return maxWord;", "        var counts = new int[256];\n        int uniqueCounts\
    \ = 0;\n        foreach (var word in words) {\n            var uniqueChars = new\
    \ HashSet<char>();\n            foreach (var letter in word) {\n             \
    \   uniqueChars.Add(letter);\n            }\n            foreach (var ch in uniqueChars)\
    \ {\n                counts[ch]++;\n            }\n            uniqueCounts +=\
    \ uniqueChars.Count();\n        }\n\n        int maxCount = 0;\n        for (int\
    \ i = 0; i < counts.Length; i++) {\n            if (counts[i] > maxCount) {\n\
    \                maxCount = counts[i];\n            }\n        }\n\n        for\
    \ (int i = 0; i < counts.Length; i++) {\n            if (counts[i] != maxCount)\
    \ {\n                counts[i] = maxCount;\n            }\n        }\n\n     \
    \   int max = 0;\n        int maxIndex = -1;\n        for (int i = 0; i < counts.Length;\
    \ i++) {\n            if (counts[i] > max) {\n                max = counts[i];\n\
    \                maxIndex = i;\n            }\n        }\n\n        return words[maxIndex];",
  "        // Write code here\n        var res = new List<string>();\n        var\
    \ chars = new Dictionary<char, int>();\n        var max = 0;\n        foreach(var\
    \ w in words) {\n            foreach(var c in w) {\n                if (!chars.ContainsKey(c))\
    \ {\n                    chars[c] = 0;\n                }\n                chars[c]\
    \ += 1;\n            }\n            max = Math.Max(max, chars[w.First()]);\n \
    \           if (chars[w.First()] == chars[w.Last()]) res.Add(w);\n        }\n\
    \        return res.Count == 0 ? null : res.First();", "        int counter =\
    \ 0;\n        string maxWord = \"\";\n        foreach (string word in words) {\n\
    \            for (int i = 0; i < word.Length; i++) {\n                for (int\
    \ j = 0; j < word.Length; j++) {\n                    if (counter == 0 && i ==\
    \ j) {\n                        continue;\n                    }\n           \
    \         counter++;\n                    if (word.Substring(i, j).ToUpper() !=\
    \ word.Substring(i, j).ToUpper()) {\n                        counter--;\n    \
    \                    break;\n                    }\n                    counter--;\n\
    \                }\n            }\n            if (counter == maxWord.Length)\
    \ {\n                maxWord = word;\n            }\n            counter = 0;\n\
    \        }\n        return maxWord;", "        var result = new List<string>();\n\
    \        int max = 0;\n        foreach (string word in words)\n        {\n   \
    \         int count = 0;\n            foreach (char c in word)\n            {\n\
    \                if (words.Where(w => w.ToCharArray().Any(c2 => c2 == c)).Count()\
    \ > 0)\n                {\n                    count++;\n                }\n \
    \           }\n            if (count > max)\n            {\n                max\
    \ = count;\n                result = word;\n            }\n        }\n       \
    \ return result;", "        string bestString = null;\n        long bestNumber\
    \ = 0;\n\n        for (int i = 0; i < words.Count; i++) {\n            int uniqueChars\
    \ = 0;\n            string s = words[i].ToLower();\n            for (int j = 0;\
    \ j < s.Length; j++) {\n                if (!s.Contains(s[j])) {\n           \
    \         uniqueChars++;\n                }\n            }\n            if (uniqueChars\
    \ > bestNumber) {\n                bestNumber = uniqueChars;\n               \
    \ bestString = words[i];\n            }\n        }\n        return bestString;",
  "        Dictionary<char, int> charCount = new Dictionary<char, int>();\n      \
    \  for (int i = 0; i < words.Count; ++i) {\n            string word = words[i];\n\
    \            foreach (char c in word) {\n                int count = charCount.ContainsKey(c)\
    \ ? charCount[c] : 1;\n                charCount[c] = count + 1;\n           \
    \ }\n        }\n        char maxKey = charCount.Values.Max().Key;\n        charCount.Remove(maxKey);\n\
    \        if (charCount.Count == 0) {\n            return words[0];\n        }\n\
    \        int maxCount = charCount.Values.Max().Value;\n        List<string> newWords\
    \ = new List<string>();\n        foreach (string word in words) {\n          \
    \  charCount.TryGetValue(maxKey, out int maxCountThisWord);\n            int newCount\
    \ = 0;\n            foreach (char c in word) {\n                if (charCount.ContainsKey(c))\
    \ {\n                    newCount += charCount[c];\n                }\n      \
    \      }\n            if (newCount > maxCountThisWord) {\n                newWords.Add(word);\n\
    \                maxCountThisWord = newCount;\n            }\n        }\n    \
    \    return FindMax(newWords);", "        StringBuilder sb = new StringBuilder();\n\
    \        int maxUniqueChars = 0;\n        string maxWord = null;\n        foreach\
    \ (string s in words) {\n            int uniqueChars = 0;\n            foreach\
    \ (char c in s)\n                uniqueChars++;\n            if (uniqueChars >\
    \ maxUniqueChars) {\n                maxUniqueChars = uniqueChars;\n         \
    \       maxWord = s;\n            }\n        }\n        if (maxUniqueChars ==\
    \ 0)\n            return null;\n        int minIndex = words.IndexOf(maxWord);\n\
    \        int maxIndex = words.IndexOf(maxWord, minIndex + 1);\n        if (maxIndex\
    \ == -1)\n            return maxWord;\n        List<char> uniqueChars = new List<char>(maxUniqueChars);\n\
    \        for (int i = minIndex; i <= maxIndex; i++)\n            foreach (char\
    \ c in words[i])\n                if (uniqueChars.Contains(c))\n             \
    \       uniqueChars.Remove(c);\n        return words[minIndex];", "        int\
    \ max = -1;\n        string result = \"\";\n        foreach (string word in words)\
    \ {\n            int countChars = word.Count(c => c >= 'a' && c <= 'z');\n   \
    \         if (countChars > max) {\n                max = countChars;\n       \
    \         result = word;\n            }\n        }\n        return result;", " \
    \       // TODO: Write the body of the function here.\n        List<string> sortedWords\
    \ = words.OrderBy(w => w.Length).ToList();\n        SortedSet<string> unique =\
    \ new SortedSet<string>();\n        foreach (string s in sortedWords)\n      \
    \  {\n            foreach (char c in s)\n            {\n                if (!unique.Contains(c))\n\
    \                {\n                    unique.Add(c);\n                }\n  \
    \          }\n        }\n        if (unique.Count == 0)\n        {\n         \
    \   return null;\n        }\n        string max = \"\";\n        int maxCount\
    \ = 0;\n        string temp = sortedWords.First();\n        foreach (string s\
    \ in sortedWords.Skip(1))\n        {\n            string tempCount = 0;\n    \
    \        foreach (char c in s)\n            {\n                if (unique.Contains(c))\n\
    \                {\n                    tempCount++;\n                }\n    \
    \        }\n            if (tempCount > maxCount)\n            {\n           \
    \     max = s;\n                maxCount = tempCount;\n            }\n       \
    \     temp = s;\n        }\n        return max;", "        int maxCount = 0;\n\
    \        string maxChar = \"\";\n        int maxCountIndex = 0;\n\n        //\
    \ Find the max word and it's index\n        foreach (var word in words) {\n  \
    \          var charCount = new int[word.Length];\n            for (int i = 0;\
    \ i < word.Length; i++) {\n                charCount[i] = word.Count(c => c ==\
    \ word[i]);\n            }\n\n            if (charCount.Max() != maxCount) {\n\
    \                maxCountIndex = words.IndexOf(word);\n                maxCount\
    \ = charCount.Max();\n                maxChar = word;\n            }\n       \
    \ }\n\n        // Find the second max word and it's index\n        if (maxCount\
    \ > 1) {\n            foreach (var word in words) {\n                var charCount\
    \ = new int[word.Length];\n                for (int i = 0; i < word.Length; i++)\
    \ {\n                    charCount[i] = word.Count(c => c == word[i]);\n     \
    \           }\n\n                if (charCount.Max() != maxCount &&\n        \
    \            charCount.Max() < maxCount)\n                {\n                \
    \    maxCountIndex = words.IndexOf(word);\n                    maxCount = charCount.Max();\n\
    \                    maxChar = word;\n                }\n            }\n     \
    \   }\n\n        // Return the word with max number of unique characters\n   \
    \     return maxChar;", "        char[] cArray = words[0].ToCharArray();\n   \
    \     int maxNumUniqueChars = 0;\n        string maxWord = string.Empty;\n   \
    \     foreach (string s in words) {\n            int numUniqueChars = s.Count()\
    \ - cArray.Length;\n            if (numUniqueChars > maxNumUniqueChars) {\n  \
    \              maxNumUniqueChars = numUniqueChars;\n                maxWord =\
    \ s;\n            }\n            cArray = s.ToCharArray();\n        }\n      \
    \  return maxWord;", "        if (words == null) {\n            throw new ArgumentNullException(\"\
    words\");\n        }\n        // If there are no words, return null.\n       \
    \ if (words.Count == 0) {\n            return null;\n        }\n        // Create\
    \ a hashtable for storing number of unique characters in words.\n        var num\
    \ = new Hashtable();\n        // Create a hashtable for storing unique characters\
    \ in words.\n        var unq = new Hashtable();\n        foreach (string word\
    \ in words) {\n            foreach (char c in word) {\n                int val\
    \ = num[c];\n                if (val == null) {\n                    num.Add(c,\
    \ 1);\n                } else {\n                    num[c] = val + 1;\n     \
    \           }\n            }\n        }\n        // Remove all characters whose\
    \ value is zero.\n        foreach (KeyValuePair<object, object> entry in num)\
    \ {\n            if (entry.Value == 0) {\n                num.Remove(entry.Key);\n\
    \            }\n        }\n        // Remove all characters that have the same\
    \ value from the second hashtable.\n        foreach (KeyValuePair<object, object>\
    \ entry in num) {\n            if (num[entry.Key] != 0) {\n                unq.Add(entry.Key,\
    \ entry.Value);\n            }\n        }\n        // Sort the second hashtable\
    \ by key, ascending.\n        var sorted = new SortedDictionary<object, object>(unq);\n\
    \        // Return the first item.\n        foreach (KeyValuePair<object, object>\
    \ entry in sorted) {\n            string ret = null;\n            if (num.ContainsKey(entry.Key))\
    \ {\n                ret = entry.Key.ToString();\n            }\n            if\
    \ (ret != null && ret.Length > 0) {\n                return ret;\n           \
    \ }\n        }\n        return null;", "        // Your code goes here\n     \
    \   var result = words.GroupBy(w => w.Length).OrderByDescending(g => g.Key).First().Key;\n\
    \        return result;", "        var stringMax = new List<string>();\n     \
    \   var stringCount = new List<string>();\n        var stringMaxCount = new List<int>();\n\
    \        foreach(var word in words) {\n            if(wordCount.Count == 0) {\n\
    \                stringCount.Add(word);\n                stringMax.Add(word);\n\
    \                stringMaxCount.Add(word.Length);\n            } else if(stringCount.Count\
    \ == stringMaxCount.Max()) {\n                stringCount.Add(word);\n       \
    \         stringMax.Add(word);\n                stringMaxCount.Add(word.Length);\n\
    \            } else if (stringCount.Count > stringMaxCount.Max()) {\n        \
    \        stringMax = stringCount;\n                stringCount = new List<string>();\n\
    \                stringMaxCount = new List<int>();\n                stringCount.Add(word);\n\
    \                stringMaxCount.Add(word.Length);\n            }\n        }\n\
    \        stringMax = stringCount.Count > stringMaxCount.Max() ? stringCount :\
    \ stringMax;\n        stringMaxCount = stringCount.Count > stringMaxCount.Max()\
    \ ? stringCount : stringMaxCount;\n        foreach(var word in stringMax) {\n\
    \            stringMaxCount.Remove(word.Length);\n        }\n        return stringMax.First();",
  "        int counter = 0;\n        HashSet<char> hs = new HashSet<char>();\n   \
    \     StringBuilder sb = new StringBuilder();\n        foreach (string s in words)\
    \ {\n            foreach (char c in s) {\n                counter++;\n       \
    \         hs.Add(c);\n            }\n            sb.Append(c);\n        }\n  \
    \      string maxChar = sb.ToString();\n        int maxCharCount = hs.Count;\n\
    \        if (maxCharCount > counter) {\n            return maxChar;\n        }\n\
    \        hs.Clear();\n        foreach (string s in words) {\n            foreach\
    \ (char c in s) {\n                if (!hs.Contains(c)) {\n                  \
    \  counter++;\n                    hs.Add(c);\n                }\n           \
    \ }\n            sb.Append(c);\n        }\n        maxChar = sb.ToString();\n\
    \        maxCharCount = hs.Count;\n        if (maxCharCount > counter) {\n   \
    \         return maxChar;\n        }\n        hs.Clear();\n        foreach (string\
    \ s in words) {\n            foreach (char c in s) {\n                if (!hs.Contains(c))\
    \ {\n                    counter++;\n                    hs.Add(c);\n        \
    \        }\n            }\n            sb.Append(c);\n        }\n        maxChar\
    \ = sb.ToString();\n        maxCharCount = hs.Count;\n        if (maxCharCount\
    \ > counter) {\n            return maxChar;\n        }\n        hs.Clear();\n\
    \        foreach (string s in words) {\n            foreach (char c in s) {\n\
    \                if (!hs.Contains(c)) {\n                    counter++;\n    \
    \                hs.Add(c);\n                }\n            }\n            sb.Append(c);\n\
    \        }\n        maxChar = sb.ToString();\n        maxCharCount = hs.Count;\n\
    \        if (maxCharCount > counter) {\n            return maxChar;\n        }\n\
    \        hs.Clear();\n        foreach (string s in words) {\n            foreach\
    \ (char c in s) {\n                if (!hs.Contains(c)) {\n                  \
    \  counter++;\n                    hs.Add(c);\n                }\n           \
    \ }\n            sb.Append(c);\n        }\n        maxChar = sb.ToString();\n\
    \        maxCharCount = hs.Count;\n        if (maxCharCount > counter) {\n   \
    \         return maxChar;\n        }\n        hs.Clear();\n        foreach (string\
    \ s in words) {\n            foreach (char c in s) {\n                if (!hs.Contains(c))\
    \ {\n                    counter++;\n                    hs.Add(c);\n        \
    \        }\n            }\n            sb.Append(c);\n        }\n        maxChar\
    \ = sb.ToString();\n        maxCharCount = hs.Count;\n        if (maxCharCount\
    \ > counter) {\n            return maxChar;\n        }\n        hs.Clear();\n\
    \        foreach (string s in words) {\n            foreach (char c in s) {\n\
    \                if (!hs.Contains(c)) {\n                    counter++;\n    \
    \                h", "        List<char> unique_chars = new List<char>();\n  \
    \      int max_unique = -1;\n        string word = null;\n        foreach (string\
    \ word in words) {\n            unique_chars.Clear();\n            foreach (char\
    \ c in word) {\n                if (unique_chars.Contains(c) == false) unique_chars.Add(c);\n\
    \            }\n            unique_chars.Sort();\n            if (unique_chars.Count\
    \ > max_unique) {\n                max_unique = unique_chars.Count;\n        \
    \        word = word;\n            }\n        }\n        return word;", "    \
    \    int max = 0;\n        string maxWord = \"\";\n        foreach (string word\
    \ in words) {\n            int count = GetUniqueCharCount(word);\n           \
    \ if (count > max) {\n                max = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;", "        if (words.Count()\
    \ == 0) {\n            return string.Empty;\n        }\n        var counts = words.Select(w\
    \ => w.ToCharArray().Distinct().Count()).ToList();\n        return counts.OrderByDescending(w\
    \ => w).FirstOrDefault().ToString();", "        int maxCount = 0;\n        string\
    \ retValue = \"\";\n        foreach (string word in words) {\n            int\
    \ count = 0;\n            char[] charArray = word.ToCharArray();\n           \
    \ int length = charArray.Length;\n            for (int i = 0; i < length; i++)\
    \ {\n                if (charArray[i] != charArray[length - 1 - i]) {\n      \
    \              count++;\n                }\n            }\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                retValue =\
    \ word;\n            }\n        }\n        return retValue;", '        return
    FindMax(words, new Dictionary<string, int>());', "        string maxChars = \"\
    \";\n        int maxCharCount = int.MinValue;\n        foreach (string word in\
    \ words) {\n            foreach (char c in word) {\n                if (!maxChars.Contains(c))\
    \ {\n                    if (maxCharCount < 1) maxCharCount = 1;\n           \
    \         else {\n                        if (maxCharCount > maxChars.Count(c\
    \ => c == c)) maxCharCount = maxChars.Count(c => c == c);\n                  \
    \  }\n                    maxChars += c;\n                }\n            }\n \
    \       }\n        if (maxCharCount > maxChars.Count(c => c == c)) return words[0];\n\
    \        else return maxChars;", "        char[] charArray = words.ToCharArray();\n\
    \        int characterCount = 0;\n        int maximumCharCount = 0;\n        int\
    \ maxCharIndex = 0;\n        int maxCharIndex2 = 0;\n\n        for (int i = 0;\
    \ i < charArray.Length; i++) {\n            characterCount = charArray.Count(item\
    \ => item == charArray[i]);\n            if (characterCount > maximumCharCount)\
    \ {\n                maximumCharCount = characterCount;\n                maxCharIndex\
    \ = i;\n            }\n        }\n\n        char[] charArray2 = words.ToCharArray();\n\
    \        for (int i = 0; i < charArray2.Length; i++) {\n            characterCount\
    \ = charArray2.Count(item => item == charArray2[i]);\n            if (characterCount\
    \ > maximumCharCount) {\n                maximumCharCount = characterCount;\n\
    \                maxCharIndex2 = i;\n            }\n        }\n\n        char[]\
    \ charArray3 = words.ToCharArray();\n        for (int i = 0; i < charArray3.Length;\
    \ i++) {\n            characterCount = charArray3.Count(item => item == charArray3[i]);\n\
    \            if (characterCount > maximumCharCount) {\n                maximumCharCount\
    \ = characterCount;\n                maxCharIndex3 = i;\n            }\n     \
    \   }\n\n        return ((maxCharIndex3 == maxCharIndex2 ? words[maxCharIndex]\
    \ :\n                (maxCharIndex2 > maxCharIndex ? words[maxCharIndex2] :\n\
    \                    words[maxCharIndex3])));", "        // TODO: Implement\n\
    \        var charCount = new Dictionary<char, int>();\n        foreach (string\
    \ str in words) {\n            foreach (char ch in str) {\n                if\
    \ (charCount.ContainsKey(ch))\n                    charCount[ch]++;\n        \
    \        else\n                    charCount[ch] = 1;\n            }\n       \
    \ }\n        var maxValue = 0;\n        char maxChar = '\\0';\n        foreach\
    \ (var kvp in charCount) {\n            if (kvp.Value > maxValue) {\n        \
    \        maxValue = kvp.Value;\n                maxChar = kvp.Key;\n         \
    \   }\n        }\n        return words.FirstOrDefault(x => charCount.ContainsKey(maxChar)).ToUpper();",
  "        var maxWord = words.Where(w => w.Distinct().Count() == w.Count()).OrderByDescending(w\
    \ => w.Count()).First();\n        return maxWord;", "        // Create empty sets\
    \ to store unique characters and to store counts\n        HashSet<char> uniqueCharacters\
    \ = new HashSet<char>();\n        int maxCount = 0;\n\n        // Go through each\
    \ word in the list, adding it to unique set and counting\n        foreach (string\
    \ word in words) {\n            // Go through each character in the word, add\
    \ it to unique set and count\n            for (int i = 0; i < word.Length; i++)\
    \ {\n                char c = word[i];\n                if (!uniqueCharacters.Contains(c))\
    \ {\n                    uniqueCharacters.Add(c);\n                    maxCount++;\n\
    \                }\n            }\n        }\n\n        // Return the word with\
    \ the maximum number of unique characters\n        if (uniqueCharacters.Count\
    \ > maxCount) {\n            string result = words[0];\n            for (int i\
    \ = 1; i < words.Count; i++) {\n                if (uniqueCharacters.Count ==\
    \ maxCount) {\n                    result = words[i];\n                }\n   \
    \         }\n            return result;\n        } else {\n            int uniqueCharacterCount\
    \ = uniqueCharacters.Count;\n            int maxCountIndex = 0;\n            for\
    \ (int i = 0; i < words.Count; i++) {\n                if (uniqueCharacterCount\
    \ == maxCount) {\n                    maxCountIndex = i;\n                }\n\
    \                uniqueCharacterCount = uniqueCharacters.Count;\n            }\n\
    \            return words[maxCountIndex];\n        }", "        int max = 0;\n\
    \        int len = words.Count;\n        int count = new int[len];\n        for\
    \ (int i = 0; i < len; i++)\n            count[i] = 0;\n        foreach (string\
    \ word in words)\n            for (int i = 0; i < word.Length; i++)\n        \
    \        count[(int)word[i]]++;\n        for (int i = 1; i < len; i++)\n     \
    \       if (count[i] > count[max])\n                max = i;\n        return words[max];",
  "        // write your code here\n        var wordsList = words.ToArray();\n   \
    \     Dictionary<string, int> wordDict = new Dictionary<string, int>();\n\n  \
    \      foreach (string word in wordsList)\n        {\n            if (wordDict.ContainsKey(word))\n\
    \            {\n                wordDict[word]++;\n            }\n           \
    \ else\n            {\n                wordDict.Add(word, 1);\n            }\n\
    \        }\n        var max = wordDict.OrderByDescending(x => x.Value).First().Key;\n\
    \        var result = words.Where(x => x.Equals(max)).First();\n\n        return\
    \ result;", "        char[] chars = words.Distinct().ToArray().SelectMany(w =>\
    \ w.ToCharArray()).ToArray();\n        int[] numbers = chars.Select(c => (int)Char.GetNumericValue(c)).ToArray();\n\
    \        char[] result = new char[numbers.Length];\n        int count = 0;\n \
    \       for (int i = 0; i < numbers.Length; i++) {\n            result[count]\
    \ = chars[i];\n            count++;\n        }\n        Array.Sort(numbers, result);\n\
    \        string result = new string(result);\n        return result;", "     \
    \   var dictionary = new Dictionary<char, int>();\n        words.ForEach(word\
    \ => word.ToCharArray().ToList().ForEach(c => {\n            if (!dictionary.ContainsKey(c))\
    \ {\n                dictionary.Add(c, 0);\n            }\n            dictionary[c]\
    \ += 1;\n        }));\n        var maxCount = 0;\n        var maxChar = string.Empty;\n\
    \        var wordWithMaxCount = null;\n        var wordWithMaxCountString = string.Empty;\n\
    \        foreach (var c in dictionary) {\n            if (maxCount < c.Value.Value)\
    \ {\n                maxCount = c.Value.Value;\n                maxChar = c.Key;\n\
    \            }\n            if (maxCount == c.Value.Value) {\n               \
    \ wordWithMaxCountString = c.Key;\n            }\n        }\n        return maxChar;",
  "        Debug.Assert(words != null && words.Count > 0);\n        // get maximum\
    \ unique characters\n        char[] uniqueChars = new char[words.Max(word => word.Length)];\n\
    \        foreach (string word in words) {\n            int index = 0;\n      \
    \      foreach (char c in word) {\n                if (c != uniqueChars[index])\
    \ {\n                    uniqueChars[index] = c;\n                    index++;\n\
    \                }\n            }\n        }\n        // get minimum lexicographical\
    \ order\n        List<int> lexOrder = new List<int>();\n        for (int index\
    \ = 0; index < words.Count; index++) {\n            lexOrder.Add(lexIndexOf(chars,\
    \ words[index]));\n        }\n        string maxString = lexOrder.Max().ToString();\n\
    \        // get string with minimum lexicographical order\n        if (lexOrder.Contains(lexOrder.Min()))\
    \ {\n            maxString = words[lexOrder.Min()].ToString();\n        }\n  \
    \      return maxString;", "        // TODO: Write your solution to here\n   \
    \     string max = \"\";\n        foreach (string word in words) {\n         \
    \   int[] count = new int[26];\n            char[] buffer = word.ToCharArray();\n\
    \            foreach (char c in buffer) {\n                count[c - 'a']++;\n\
    \            }\n            int maxCount = 0;\n            int maxCountIndex =\
    \ -1;\n            for (int i = 0; i < 26; i++) {\n                if (count[i]\
    \ > maxCount) {\n                    maxCount = count[i];\n                  \
    \  maxCountIndex = i;\n                }\n            }\n            if (maxCount\
    \ > 1) {\n                max = word;\n                break;\n            }\n\
    \        }\n        return max;", "        var result = new Dictionary<string,\
    \ int>();\n        foreach (string s in words) {\n            foreach (char c\
    \ in s.ToCharArray()) {\n                if (!result.ContainsKey(c)) {\n     \
    \               result[c] = 0;\n                }\n                result[c] =\
    \ result[c] + 1;\n            }\n        }\n        Debug.WriteLine($\"Result:\
    \ {result}\");\n        var maxCount = -1;\n        foreach (KeyValuePair<string,\
    \ int> kv in result) {\n            if (kv.Value > maxCount) {\n             \
    \   maxCount = kv.Value;\n            }\n        }\n        Debug.WriteLine($\"\
    Max count: {maxCount}\");\n        if (maxCount == 1) {\n            return words[0];\n\
    \        }\n        if (maxCount > 1) {\n            int minCount = words[0].Length;\n\
    \            foreach (KeyValuePair<string, int> kv in result) {\n            \
    \    if (kv.Value == minCount) {\n                    return kv.Key;\n       \
    \         }\n                if (kv.Value < minCount) {\n                    minCount\
    \ = kv.Value;\n                }\n            }\n        }\n        return null;",
  "        int[] count = new int[65536];\n        foreach(var word in words) {\n \
    \           foreach(var c in word)\n                ++count[c];\n        }\n \
    \       int maxChar = -1;\n        int maxCount = count[0];\n        foreach(var\
    \ c in count) {\n            if(c>maxCount) {\n                maxChar = c;\n\
    \                maxCount = c;\n            }\n        }\n        foreach(var\
    \ word in words) {\n            int wordCharCount = 0;\n            foreach(var\
    \ c in word)\n                wordCharCount += (c==maxChar);\n            if(wordCharCount>maxCount)\n\
    \                return word;\n        }\n        return null;", "        // Write\
    \ your code here\n        StringBuilder sb = new StringBuilder();\n        int\
    \ maxNum = 0;\n        foreach (string s in words) {\n            int numUniqueChars\
    \ = GetUniqueChars(s).Length;\n            if (numUniqueChars > maxNum)\n    \
    \            maxNum = numUniqueChars;\n        }\n        if (maxNum > 0) {\n\
    \            string maxWord = words[0];\n            foreach (string s in words)\
    \ {\n                int numUniqueChars = GetUniqueChars(s).Length;\n        \
    \        if (numUniqueChars == maxNum)\n                    maxWord = s;\n   \
    \         }\n            return maxWord;\n        }\n        return string.Empty;",
  "        int maxLength = 0;\n        string wordWithMaxLength = null;\n        foreach\
    \ (string word in words) {\n            if (word.Length > maxLength) {\n     \
    \           wordWithMaxLength = word;\n                maxLength = word.Length;\n\
    \            }\n        }\n        if (wordWithMaxLength != null) {\n        \
    \    HashSet<string> hs = new HashSet<string>();\n            foreach (string\
    \ word in words) {\n                if (hs.Contains(word)) {\n               \
    \     continue;\n                }\n                hs.Add(word);\n          \
    \  }\n            wordWithMaxLength = wordWithMaxLength.Substring(0, maxLength);\n\
    \        }\n        return wordWithMaxLength;", "        int maxCount = 0;\n \
    \       List<string> orderedWords = new List<string>();\n        List<int> orderedCount\
    \ = new List<int>();\n\n        foreach (string word in words) {\n           \
    \ int count = 0;\n            foreach (char c in word) {\n                count++;\n\
    \            }\n\n            orderedWords.Add(word);\n            orderedCount.Add(count);\n\
    \        }\n\n        for (int i = 1; i < orderedWords.Count; i++) {\n       \
    \     if (orderedCount.ElementAt<int>(i) > orderedCount.ElementAt<int>(i - 1))\
    \ {\n                string tmp = orderedWords[i - 1].ToUpper();\n           \
    \     orderedWords[i - 1] = orderedWords[i].ToUpper();\n                orderedWords[i]\
    \ = tmp;\n            }\n        }\n\n        foreach (string s in orderedWords)\
    \ {\n            if (orderedCount.ElementAt<int>(orderedWords.Count - 1) > orderedCount.ElementAt<int>(0))\
    \ {\n                string tmp = s.ToUpper();\n                orderedWords[orderedWords.Count\
    \ - 1] = orderedWords[0].ToUpper();\n                orderedWords[0] = tmp;\n\
    \            }\n        }\n\n        return orderedWords[0];", "        // TODO:\
    \ Write your solution here\n        string temp = words[0]; // init temp\n   \
    \     int tempMaxNum = 0;\n        int index = 0;\n        foreach (var item in\
    \ words) {\n            // If there is already a same char number\n          \
    \  if (temp.Count() == item.Count()) {\n                if (tempMaxNum < item.Count())\
    \ {\n                    tempMaxNum = item.Count();\n                    temp\
    \ = item;\n                    index = words.IndexOf(temp);\n                }\n\
    \            }\n        }\n        return temp;", "        int maxCount = 0;\n\
    \        string maxString = null;\n        foreach (var word in words) {\n   \
    \         var c = word.Length;\n            if (c > maxCount) {\n            \
    \    maxCount = c;\n                maxString = word;\n            } else if (c\
    \ == maxCount) {\n                maxString = (maxString == word) ? maxString\
    \ : word;\n            }\n        }\n        return maxString;", "        var\
    \ chars = new HashSet<char>();\n        foreach (var item in words) {\n      \
    \      foreach (char letter in item) {\n                chars.Add(letter);\n \
    \           }\n        }\n        return words.OrderBy(x => x.Distinct().Count()).FirstOrDefault();",
  "        int max = 0;\n        int count = 0;\n        string temp = \"\";\n   \
    \     for (int i = 0; i < words.Count; i++) {\n            count = 1;\n      \
    \      temp = words[i].ToLower();\n            for (int j = 0; j < temp.Length;\
    \ j++) {\n                if (temp.Length - 1 == j) {\n                    if\
    \ (temp.Contains(words[i]) == false) {\n                        count = 1;\n \
    \                   }\n                    else {\n                        count++;\n\
    \                    }\n                }\n                else {\n          \
    \          if (temp.Contains(words[i]) == false && count == 1) {\n           \
    \             count++;\n                    }\n                    else if (temp.Contains(words[i])\
    \ == false) {\n                        count = 1;\n                    }\n   \
    \                 else {\n                        if (count > max) {\n       \
    \                     max = count;\n                        }\n              \
    \      }\n                }\n            }\n        }\n        return max > count\
    \ ? words[max] : temp;", "        Dictionary<string,int> wordCounts = new Dictionary<string,int>();\n\
    \        foreach (string word in words) {\n            char[] c = word.ToCharArray();\n\
    \            foreach (char ch in c) wordCounts[ch] = (wordCounts[ch] ?? 0) + 1;\n\
    \        }\n        int[] counts = wordCounts.Select(kv => kv.Value).ToArray();\n\
    \        int maxIndex = 0;\n        for (int i = 1; i < counts.Length; i++)\n\
    \            if (counts[i] > counts[maxIndex])\n                maxIndex = i;\n\
    \        if (maxIndex < counts.Length)\n            return words[maxIndex];\n\
    \        else\n            return words[0];", "        int max = 0;\n        int\
    \ c = 0;\n        foreach (string s in words) {\n            int m = s.Length;\n\
    \            if (m > max) {\n                max = m;\n                c = 1;\n\
    \            } else if (m == max) {\n                c++;\n            }\n   \
    \     }\n        if (c > words[0][words[0].Length - 1].ToString().Count()) {\n\
    \            return words[0];\n        }\n        return words[words.FindIndex(w\
    \ => w.Length == max)].OrderBy(w => w.First()).First();", "        var uniqueCharacters\
    \ = new HashSet<char>();\n        \n        foreach (string word in words) {\n\
    \            foreach (char c in word) {\n                if (uniqueCharacters.Add(c))\
    \ {\n                    uniqueCharacters.Remove(c);\n                    break;\n\
    \                }\n            }\n        }\n        \n        string max = string.Empty;\n\
    \        \n        if (uniqueCharacters.Count == 0) {\n            max = words.First();\n\
    \        }\n        \n        return max;", "        // Your code here!\n    \
    \    var sorted = new List<string>(words);\n        sorted.Sort();\n        var\
    \ uniques = sorted.GroupBy(c => c).Where(g => g.Count() == sorted.Count()).ToList();\n\
    \        var max = (uniques.Count > 0) ? uniques.OrderBy(g => g.Key).First().Key\
    \ : null;\n        return max;", "        var uniqueChars = new HashSet<char>();\n\
    \        foreach (var word in words) {\n            foreach (var letter in word)\
    \ {\n                if (!uniqueChars.Contains(letter))\n                    uniqueChars.Add(letter);\n\
    \            }\n        }\n        return words.OrderBy(l => uniqueChars.Count).FirstOrDefault();",
  "        // Write your code here.\n        var result = new Dictionary<string, int>();\n\
    \        foreach (var word in words) {\n            foreach (var c in word) {\n\
    \                if (!result.ContainsKey(c))\n                    result[c] =\
    \ 1;\n                else\n                    result[c]++;\n            }\n\
    \        }\n\n        var sorted = result.OrderByDescending(x => x.Value);\n \
    \       return sorted.First().Key;", "        string ret = null;\n        int\
    \ max = 0;\n        foreach (string w in words) {\n            int count = 0;\n\
    \            foreach (char c in w.ToCharArray()) {\n                count++;\n\
    \            }\n            if (count > max) {\n                max = count;\n\
    \                ret = w;\n            }\n        }\n        return ret;", " \
    \       int maxCount = 0;\n        int maxLength = 0;\n        string maxValue\
    \ = null;\n        foreach (string s in words) {\n            int count = 0;\n\
    \            int length = s.Length;\n            for (int i = 0; i < length; i++)\
    \ {\n                if (s[i] == 'a') {\n                    count++;\n      \
    \          }\n            }\n            if (count > maxCount) {\n           \
    \     maxCount = count;\n                maxLength = length;\n               \
    \ maxValue = s;\n            }\n        }\n        Console.WriteLine($\"({maxValue})\"\
    );\n        return maxValue;", "        var wordCount = new HashSet<int>();\n\
    \        var max = new List<string>();\n        int wordMaxCount = 0;\n      \
    \  var index = 0;\n        foreach (var word in words) {\n            wordCount.Add(word.Length);\n\
    \            if (max.Count > index) {\n                wordMaxCount = Math.Max(wordMaxCount,\
    \ wordCount.Count);\n            }\n            if (wordCount.Count == wordMaxCount)\
    \ {\n                max.Add(word);\n            }\n            wordCount.Remove(word.Length);\n\
    \        }\n        if (wordCount.Count > wordMaxCount) {\n            max.Add(words[max.Count\
    \ - 1]);\n        }\n        return max[max.Count - 1];", "        int maxCount\
    \ = 0;\n        string max = string.Empty;\n        string max = string.Empty;\n\
    \        int maxLength = -1;\n        foreach (string s in words) {\n        \
    \    int count = 0;\n            foreach (char c in s.ToCharArray()) {\n     \
    \           if (s.Contains(c))\n                    count++;\n            }\n\
    \            if (count > maxCount) {\n                maxCount = count;\n    \
    \            max = s;\n                maxLength = s.Length;\n            }\n\
    \        }\n        return max;", "        ArrayList al = new ArrayList();\n \
    \       foreach(string word in words)\n        {\n            char[] charArray\
    \ = word.ToCharArray();\n            ArrayList uniqueList = new ArrayList();\n\
    \            int uniqueCount = 0;\n            foreach(char c in charArray)\n\
    \            {\n                if (uniqueList.Contains(c))\n                \
    \    uniqueCount++;\n                else\n                {\n               \
    \     uniqueList.Add(c);\n                    uniqueCount++;\n               \
    \ }\n            }\n            int maxCount = uniqueCount;\n            string\
    \ tempWord = word;\n            foreach (char c in charArray)\n            {\n\
    \                uniqueList.Remove(c);\n                if (uniqueCount == 0)\n\
    \                {\n                    uniqueCount--;\n                }\n  \
    \              if (maxCount > uniqueCount)\n                {\n              \
    \      maxCount = uniqueCount;\n                    tempWord = word;\n       \
    \         }\n            }\n            al.Add(tempWord);\n        }\n       \
    \ string maxWord = FindMax(al);\n        return maxWord;", "        var dict =\
    \ words.GroupBy(w => w).ToDictionary(grp => grp.Key, grp => grp.Count());\n  \
    \      IEnumerable<string> keys = dict.Keys.OrderBy(k => k).Take(1);\n       \
    \ return keys[0];", "        int maxCount = 0;\n        int uniqueCount = 0;\n\
    \        string word = \"\";\n        foreach(string word in words) {\n      \
    \      uniqueCount += 1;\n            int c = word.Length;\n            if(c ==\
    \ uniqueCount) {\n                maxCount += 1;\n            }\n        }\n \
    \       if(uniqueCount > maxCount) {\n            word = string.Join(\"\", words.OrderBy(x\
    \ => x));\n        }\n        return word;", "        char[] uniqueChars = new\
    \ char[128];\n        int[] uniqueCount = new int[128];\n        string maxWord\
    \ = null;\n        int maxCount = 0;\n        for (int i = 0; i < words.Count;\
    \ i++) {\n            foreach (char c in words[i].ToCharArray()) {\n         \
    \       if (!uniqueChars[c]) {\n                    uniqueChars[c] = true;\n \
    \                   uniqueCount[c] = 1;\n                }\n                else\
    \ {\n                    uniqueCount[c]++;\n                }\n            }\n\
    \            if (uniqueCount[char.MaxValue] > maxCount) {\n                maxCount\
    \ = uniqueCount[char.MaxValue];\n                maxWord = words[i];\n       \
    \     }\n        }\n        return maxWord;", "        string maxWord = String.Empty;\n\
    \        int[] count = new int[26];\n        foreach (string w in words) {\n \
    \           for (int i = 0; i < w.Length; i++) {\n                count[(int)w[i]]\
    \ += 1;\n            }\n        }\n        int maxCount = 0;\n        foreach\
    \ (int c in count) {\n            maxCount = Math.Max(maxCount, c);\n        }\n\
    \        List<string> maxWords = new List<string>();\n        foreach (string\
    \ w in words) {\n            int c = count[(int)w[w.Length - 1]];\n          \
    \  if (c > maxCount) {\n                break;\n            }\n            string\
    \ w2 = new string(w.ToCharArray(), 0, w.Length - 1);\n            while (w2[0]\
    \ == w2[1]) {\n                w2 = new string(w.ToCharArray(), 1, w.Length -\
    \ 1);\n            }\n            int i = w2.IndexOf('\\0');\n            if (i\
    \ != -1) {\n                w2 = new string(w.ToCharArray(), i + 1, w.Length -\
    \ i - 1);\n            }\n            while (w2[0] == w2[1]) {\n             \
    \   w2 = new string(w.ToCharArray(), 1, w.Length - 1);\n            }\n      \
    \      if (c == maxCount || w2.StartsWith(maxWord, StringComparison.OrdinalIgnoreCase))\
    \ {\n                maxWords.Add(w2);\n            }\n        }\n        if (maxWords.Count\
    \ > 0) {\n            int maxCount = maxWords.Max(w => w.Count(w => w.ToCharArray().Any(c=>(int)c\
    \ < 0 || c > 25)));\n            if (maxCount > 1) {\n                string maxWord\
    \ = maxWords.OrderBy(w => w.Count(w => w.ToCharArray().Any(c => (int)c < 0 ||\
    \ c > 25))).First();\n                return maxWord;\n            }\n       \
    \     else\n                return maxWords[0];\n        }\n        else\n   \
    \         return String.Empty;", "        int counter = 0;\n        int max =\
    \ 0;\n        int maxCount = 0;\n        string res = \"\";\n        foreach(var\
    \ w in words) {\n            counter += w.Distinct().Count();\n            if(counter\
    \ > maxCount) {\n                max = counter;\n                maxCount = counter;\n\
    \                res = w;\n            }\n        }\n        return res;", " \
    \       string currentMax = \"\";\n        int maxCount = 0;\n        foreach(string\
    \ word in words) {\n            foreach(char c in word) {\n                if(!currentMax.Contains(c))\
    \ {\n                    currentMax += c;\n                    maxCount = 1;\n\
    \                }\n                else {\n                    if(currentMax.Contains(c))\
    \ {\n                        maxCount++;\n                    }\n            \
    \        if(maxCount > currentMax.Count(c)) {\n                        currentMax\
    \ += c;\n                        maxCount = 1;\n                    }\n      \
    \          }\n            }\n        }\n        return currentMax;", "       \
    \ if (words == null || words.Count == 0) throw new ArgumentException(\"List cannot\
    \ be null or empty\");\n        var maxCounts = new Dictionary<char, int>(words.Count);\n\
    \        foreach (var word in words)\n            foreach (var c in word)\n  \
    \              if (!maxCounts.ContainsKey(c))\n                    maxCounts[c]\
    \ = 0;\n                else {\n                    maxCounts[c] = maxCounts[c]\
    \ + 1;\n                }\n        var maxCount = new char[maxCounts.Count];\n\
    \        int counter = 0;\n        foreach (var pair in maxCounts)\n         \
    \   if (pair.Value > 0)\n                maxCount[counter++] = pair.Key;\n   \
    \     if (maxCount.Length == 0)\n            return string.Empty;\n        if\
    \ (maxCount.Length > 1)\n            Array.Sort(maxCount, (x, y) => Array.IndexOf(maxCount,\
    \ y) - Array.IndexOf(maxCount, x));\n        return maxCount[0];", "        //\
    \ write your code\n        string temp = \"\";\n        char max = words[0].Length;\n\
    \        foreach (string word in words) {\n            for (int i = 0; i < word.Length;\
    \ i++) {\n                if (word[i] == max) {\n                    temp = word;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return temp;", "        // Find the largest string in the list of strings\n\
    \        string maxWord = null;\n        int maxCount = 0;\n        foreach (string\
    \ word in words) {\n            int count = GetUniqueChars(word).Count();\n  \
    \          if (count > maxCount) {\n                maxCount = count;\n      \
    \          maxWord = word;\n            }\n        }\n        return maxWord;",
  "        var chars = new HashSet<char>();\n        foreach (var word in words) {\n\
    \            foreach (var letter in word)\n                chars.Add(letter);\n\
    \        }\n        return chars.Max().ToString();", "        var result = new\
    \ Dictionary<string, int>();\n        foreach(var s in words) {\n            foreach(var\
    \ c in s)\n                if (!result.ContainsKey(c))\n                    result.Add(c,\
    \ 0);\n                result[c]++;\n        }\n        foreach(var kvp in result)\
    \ {\n            if(kvp.Value > result.Max())\n                return kvp.Key;\n\
    \        }\n        return words[0];", "        int max = 0;\n        var result\
    \ = words.FirstOrDefault();\n        foreach (string word in words) {\n      \
    \      if (result.Length == word.Length)\n                max = Math.Max(max,\
    \ word.Distinct().Count());\n            else if (result.Length < word.Length)\n\
    \                max = Math.Max(max, word.Length);\n            if (result.Length\
    \ == word.Length)\n                result += \"*\";\n        }\n        return\
    \ result.Substring(0, Math.Max(0, max));", "        string max = \"empty\";\n\
    \        foreach (string word in words) {\n            int maxCount = 1;\n   \
    \         foreach (char c in word.ToCharArray()) {\n                int count\
    \ = words.Count(ws => ws == word && ws.Contains(c.ToString()) == true);\n    \
    \            if (count > maxCount) {\n                    maxCount = count;\n\
    \                    max = word;\n                }\n            }\n        }\n\
    \        return max;", "        StringBuilder sb = new StringBuilder();\n    \
    \    List<string> wordList = new List<string>();\n        foreach (string word\
    \ in words) {\n            if (wordList.Count > 0) {\n                List<string>\
    \ list = new List<string>();\n                foreach (string value in wordList)\
    \ {\n                    if (word.ToCharArray().Distinct().Count() > value.ToCharArray().Distinct().Count())\
    \ {\n                        list.Add(value);\n                    }\n       \
    \         }\n                foreach (string value in list) {\n              \
    \      sb.Append(value);\n                    sb.Append(' ');\n              \
    \  }\n                wordList.Clear();\n            } else {\n              \
    \  wordList.Add(word);\n            }\n        }\n        if (wordList.Count >\
    \ 0) {\n            foreach (string value in wordList) {\n                sb.Append(value);\n\
    \                sb.Append(' ');\n            }\n        }\n        return sb.ToString().TrimEnd('\
    \ ');", "        // Step 1: Use a dictionary of words and number of characters\
    \ for each word\n        Dictionary<string, int> wordDictionary = new Dictionary<string,\
    \ int>();\n        foreach (string word in words) {\n            int chars = word.Length;\n\
    \            if (wordDictionary.ContainsKey(word)) {\n                wordDictionary[word]\
    \ = wordDictionary[word] + chars;\n            } else {\n                wordDictionary.Add(word,\
    \ chars);\n            }\n        }\n\n        // Step 2: Sort the dictionary\
    \ by count\n        List<KeyValuePair<string, int>> sortedWordDictionary = new\
    \ List<KeyValuePair<string, int>>(wordDictionary);\n        sortedWordDictionary.Sort();\n\
    \n        // Step 3: Return the word with highest count\n        return sortedWordDictionary.Last().Key;",
  "        string max = null;\n        int count = 0;\n        foreach(var word in\
    \ words)\n        {\n            foreach(var character in word)\n            {\n\
    \                if(max != null && max == character) count++;\n              \
    \  else if((character == max) && (count > count)) max = character;\n         \
    \   }\n        }\n        if(max != null) return max;\n        else return null;",
  "        char[] charArray = new char[words.Count];\n        int count = new int[words.Count];\n\
    \n        foreach (string s in words) {\n            foreach (char c in s) {\n\
    \                if (!Char.IsLetter(c)) {\n                    charArray[words.IndexOf(s)]--;\n\
    \                    count[words.IndexOf(s)]--;\n                    return;\n\
    \                }\n\n                charArray[words.IndexOf(s)]++;\n       \
    \         count[words.IndexOf(s)]++;\n            }\n        }\n\n        int\
    \ maxCount = count.Max();\n        for (int i = 0; i < words.length; i++) {\n\
    \            if (maxCount == count[i]) {\n                char temp = charArray[i];\n\
    \                charArray[i] = charArray[words.IndexOf(words[i])];\n        \
    \        charArray[words.IndexOf(words[i])] = temp;\n            }\n        }\n\
    \        string result = new string(charArray);\n\n        return result;", " \
    \       var res = new List<char>();\n        var counts = new Dictionary<char,\
    \ int>();\n        foreach (var word in words) {\n            foreach (var c in\
    \ word) {\n                if (!counts.ContainsKey(c)) {\n                   \
    \ counts.Add(c, 1);\n                }\n                else {\n             \
    \       counts[c] = counts[c] + 1;\n                }\n            }\n       \
    \ }\n        foreach (var c in counts) {\n            if (counts[c] > 1) {\n \
    \               res.Add(c);\n            }\n        }\n        var max = new string(res.ToArray());\n\
    \        if (words.Count > 1) {\n            max = words[0];\n        }\n    \
    \    return max;", "        var characters = new List<char>();\n        var maxCount\
    \ = 0;\n        foreach (var word in words) {\n            var uniqueCount = word.Distinct().Count();\n\
    \            if (uniqueCount > maxCount) {\n                maxCount = uniqueCount;\n\
    \            }\n            characters.AddRange(word);\n        }\n        if\
    \ (maxCount == 0) {\n            return \"empty\";\n        }\n        var maxCount\
    \ = characters.Count();\n        if (maxCount > maxUnique) {\n            maxUnique\
    \ = maxCount;\n        }\n        characters.Sort();\n        foreach (var character\
    \ in characters) {\n            Console.WriteLine(character);\n        }\n   \
    \     var result = words.First(word => characters.Contains(word[0]));\n      \
    \  Console.WriteLine(result);\n        return result;", "        List<string>\
    \ uniqueWords = new List<string>();\n        foreach (string word in words) {\n\
    \            foreach (char c in word) {\n                uniqueWords.Add(new string(new\
    \ char[] { c }));\n            }\n        }\n        Array.Sort(uniqueWords);\n\
    \        int maxCharCount = 0;\n        int curCount = uniqueWords.Count;\n  \
    \      while (curCount > 0) {\n            if (maxCharCount < uniqueWords.Count)\
    \ {\n                maxCharCount = uniqueWords.Count;\n            }\n      \
    \      if (maxCharCount == curCount) {\n                return uniqueWords[0];\n\
    \            }\n            curCount = curCount - 1;\n        }\n        return\
    \ \"\";", "        var d = new Dictionary<string, int>();\n        int max = words.Count;\n\
    \        foreach (string str in words) {\n            foreach (char c in str)\
    \ {\n                if (d.ContainsKey(c)) {\n                    int count =\
    \ d[c];\n                    if (count > max) {\n                        max =\
    \ count;\n                    }\n                }\n                else {\n \
    \                   d[c] = 1;\n                }\n            }\n        }\n \
    \       foreach (KeyValuePair<string, int> kvp in d) {\n            kvp.Value\
    \ = kvp.Value < max ? kvp.Value : max;\n        }\n        string maxKey = d.Keys.OrderByDescending(s\
    \ => s[s.Length]).First();\n        return maxKey == d.Keys.First() ? maxKey :\
    \ maxKey.Substring(0, maxKey.Length - 1);", "        string maxString = null;\n\
    \        string maxCountString = null;\n        char charCounter = ' ';\n    \
    \    int maxCount = 1;\n\n        foreach (string word in words) {\n         \
    \   charCounter = ' ';\n            foreach (char ch in word) {\n            \
    \    charCounter += ch;\n            }\n            charCounter = charCounter.ToUpperInvariant();\n\
    \n            int count = charCounter.Count(c => c == 'A') +\n               \
    \          charCounter.Count(c => c == 'B') +\n                         charCounter.Count(c\
    \ => c == 'C') +\n                         charCounter.Count(c => c == 'D') +\n\
    \                         charCounter.Count(c => c == 'E') +\n               \
    \          charCounter.Count(c => c == 'F') +\n                         charCounter.Count(c\
    \ => c == 'G') +\n                         charCounter.Count(c => c == 'H') +\n\
    \                         charCounter.Count(c => c == 'I') +\n               \
    \          charCounter.Count(c => c == 'J') +\n                         charCounter.Count(c\
    \ => c == 'K') +\n                         charCounter.Count(c => c == 'L') +\n\
    \                         charCounter.Count(c => c == 'M') +\n               \
    \          charCounter.Count(c => c == 'N') +\n                         charCounter.Count(c\
    \ => c == 'O') +\n                         charCounter.Count(c => c == 'P') +\n\
    \                         charCounter.Count(c => c == 'Q') +\n               \
    \          charCounter.Count(c => c == 'R') +\n                         charCounter.Count(c\
    \ => c == 'S') +\n                         charCounter.Count(c => c == 'T') +\n\
    \                         charCounter.Count(c => c == 'U') +\n               \
    \          charCounter.Count(c => c == 'V') +\n                         charCounter.Count(c\
    \ => c == 'W') +\n                         charCounter.Count(c => c == 'X') +\n\
    \                         charCounter.Count(c => c == 'Y') +\n               \
    \          charCounter.Count(c => c == 'Z');\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxString = word;\n  \
    \          }\n        }\n        if (maxCount > 1) {\n            maxString =\
    \ maxString.Replace(maxString, maxCount.ToString() + \" \" + (maxCount - 1).ToString());\n\
    \        }\n\n        if (maxCount > 1) {\n            foreach (string word in\
    \ words) {\n                string newWord = word;\n                string maxString2\
    \ = null;\n                int maxCount2 = 1;\n\n                foreach (char\
    \ ch in word) {\n                    charCounter = ' ';\n                    ",
  "        // Get the number of unique characters.\n        var uniqueCharacters =\
    \ new Dictionary<char, int>();\n        foreach(var word in words) {\n       \
    \     foreach(var character in word)\n                if(!uniqueCharacters.ContainsKey(character))\n\
    \                    uniqueCharacters.Add(character, 1);\n        }\n        \n\
    \        // Get the number of characters in lexicographical order.\n        var\
    \ characters = uniqueCharacters.Keys.ToList();\n        characters.Sort();\n \
    \       \n        // Get the number of words with maximum unique characters (in\
    \ lexicographical order).\n        var maxCount = 0;\n        var maxWord = \"\
    \";\n        foreach(var word in words) {\n            var count = 0;\n      \
    \      foreach(var character in word) {\n                if(uniqueCharacters[character]\
    \ >= count)\n                    count++;\n            }\n            if(count\
    \ == maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;", "        // Your\
    \ code goes here\n        string maxWord = String.Empty;\n        long maxUniqueChars\
    \ = -1;\n        string maxWordIndex = 0;\n        foreach (string word in words)\
    \ {\n            long uniqueChars = 0;\n            foreach (char c in word) {\n\
    \                if (char.IsLetter(c)) {\n                    uniqueChars++;\n\
    \                }\n            }\n            if (maxUniqueChars < uniqueChars)\
    \ {\n                maxUniqueChars = uniqueChars;\n                maxWord =\
    \ word;\n                maxWordIndex = words[words.FindIndex(x => x == word)];\n\
    \            }\n        }\n        return maxWord;", "        if (words == null\
    \ || words.Count == 0) {\n            throw new ArgumentException(\"The argument\
    \ words cannot be null or empty.\");\n        }\n\n        string temp = words[0];\n\
    \        int count = 1;\n        for (int i = 1; i < words.Count; i++) {\n   \
    \         temp = FindMax(words[i], temp);\n            count++;\n        }\n\n\
    \        return temp;", "        int maxCount = 0;\n        string maxWord = null;\n\
    \        foreach (string word in words) {\n            int count = 0;\n      \
    \      foreach (char c in word) {\n                if (count > maxCount) {\n \
    \                   maxCount = count;\n                    maxWord = word;\n \
    \               }\n                count++;\n            }\n        }\n      \
    \  return maxWord;", "        if (words.Count == 0)\n            return string.Empty;\n\
    \        if (words.Count == 1)\n            return words[0];\n        var chars\
    \ = new HashSet<char>();\n        string currentChars = string.Empty;\n      \
    \  for (int i = 0; i < words.Count; i++) {\n            string s = words[i];\n\
    \            for (int j = 0; j < s.Length; j++) {\n                char c = s[j];\n\
    \                if (!chars.Contains(c)) {\n                    chars.Add(c);\n\
    \                    currentChars += c;\n                }\n            }\n  \
    \      }\n        int maxCount = 0;\n        int index = -1;\n        for (int\
    \ i = 0; i < words.Count; i++) {\n            string s = words[i];\n         \
    \   for (int j = 0; j < s.Length; j++) {\n                char c = s[j];\n   \
    \             if (chars.Contains(c)) {\n                    maxCount++;\n    \
    \                if (maxCount > index) index = maxCount;\n                }\n\
    \            }\n        }\n        if (index == words.Count - 1) return words[words.Count\
    \ - 1];\n        return words[index];", "        // Your code here...\n      \
    \  return words.GroupBy(w=>w.Length).OrderByDescending(g=>g.Count()).First().Key;",
  "        int maxCount = 0;\n        string maxWord = null;\n        foreach (var\
    \ word in words) {\n            var count = word.Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;", "        if (words.Count\
    \ == 0)\n            throw new ArgumentException(\"List of words cannot be empty\"\
    );\n        \n        string currentMax = string.Empty;\n        string currentChars\
    \ = string.Empty;\n        int currentCharCount = 1;\n        foreach (string\
    \ word in words) {\n            currentChars += word;\n            int uniqueCharCount\
    \ = currentChars.Distinct().Count();\n            if (uniqueCharCount > currentCharCount)\
    \ {\n                currentCharCount = uniqueCharCount;\n                currentMax\
    \ = word;\n            }\n        }\n        if (currentMax.Length > currentChars.Length)\n\
    \            currentMax = currentMax.Substring(currentChars.Length);\n       \
    \ return currentMax;", "        // Your code goes here\n        var sorted = words.OrderByDescending(x\
    \ => x.Length).ThenBy(x => x);\n        return sorted.FirstOrDefault();", "  \
    \      var unique = words.Select(x => x.ToCharArray().Distinct().Count() ).OrderByDescending(x\
    \ => x).First();\n        if (unique.Equals(words.Select(x => x.ToCharArray().Distinct().Count()).Max()))\n\
    \            return words.OrderByDescending(x => x).First();\n        return \"\
    \";", "        List<char> chars = new List<char>();\n        int maxCount = 0;\n\
    \        string maxWord = \"\";\n        foreach (string word in words) {\n  \
    \          int count = 1;\n            foreach (char c in word) {\n          \
    \      if (!chars.Contains(c)) {\n                    chars.Add(c);\n        \
    \            count++;\n                }\n            }\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        if (maxCount == 1) {\n            return\
    \ maxWord;\n        }\n        List<string> sortedWords = new List<string>();\n\
    \        foreach (string word in words) {\n            int count = 1;\n      \
    \      foreach (char c in word) {\n                if (!chars.Contains(c)) {\n\
    \                    chars.Add(c);\n                    count++;\n           \
    \     }\n            }\n            if (count == maxCount) {\n               \
    \ sortedWords.Add(word);\n            }\n        }\n        if (sortedWords.Count\
    \ == 1) {\n            return sortedWords[0];\n        }\n        string min =\
    \ sortedWords[0];\n        for (int i = 1; i < sortedWords.Count; i++) {\n   \
    \         if (sortedWords[i].Length < min.Length) {\n                min = sortedWords[i];\n\
    \            }\n        }\n        return min;", "        var d = new Dictionary<char,\
    \ int>();\n        foreach (var word in words) {\n            foreach (var c in\
    \ word)\n                d[c] =\n                    d.ContainsKey(c) ? d[c] +\
    \ 1 : 1;\n        }\n        var max = d.OrderByDescending(p => p.Value).FirstOrDefault();\n\
    \        return max.Key == string.Empty ? \"empty\" : max.Key;", "        if (words\
    \ == null || words.Count == 0)\n            throw new ArgumentException(\"words\"\
    , \"List cannot be null or empty.\");\n        var result = (from word in words\n\
    \                      orderby word.Count()\n                      select word).FirstOrDefault();\n\
    \        return result;", "        int max = 0;\n        string word = null;\n\
    \        char maxChar = 0;\n        int maxCharCount = 0;\n        foreach (string\
    \ word in words) {\n            string temp = word;\n            int c = 0;\n\
    \            foreach (char c in word) {\n                ++c;\n              \
    \  if (c > maxCharCount) {\n                    maxCharCount = c;\n          \
    \          maxChar = c;\n                }\n            }\n            max = maxCharCount;\n\
    \            if (maxCharCount == max)\n                return word;\n        }\n\
    \        throw new Exception(\"no word has maximum number of unique characters\"\
    );", "        string max = null;\n        foreach (string word in words) {\n \
    \           int n = word.Distinct().Count();\n            if (n > max && word.Length\
    \ > 0)\n                max = word;\n        }\n        if (max != null)\n   \
    \         max = max.Substring(0, max.Length - 1);\n        return max;", "   \
    \     StringBuilder str = new StringBuilder();\n        string temp = string.Empty;\n\
    \        long count = new long();\n        foreach(string w in words)\n      \
    \  {\n            temp.Length = 0;\n            temp = w;\n            foreach\
    \ (string s in words)\n            {\n                if (temp.Length + s.Length\
    \ > s.Length)\n                    temp = s;\n            }\n            count++;\n\
    \            str.Append(temp.ToString());\n            str.Append(\"\\r\\n\");\n\
    \        }\n        Console.WriteLine(str);\n        long maxVal = count;\n  \
    \      for(int i = 0; i < words.Count; i++)\n        {\n            long count\
    \ = GetUniqueCount(str.ToString());\n            if (count > maxVal)\n       \
    \     {\n                maxVal = count;\n            }\n        }\n        return\
    \ maxVal.ToString();", '        // TODO: Fill in the code here', "        int\
    \ maxCharacterCount = words.Max(w => w.Count());\n        string maxStringWithMostUniqueCharacters\
    \ = String.Empty;\n        string maxStringWithMostUniqueCharactersMostRecentlyAddedToMax\
    \ = String.Empty;\n        string recentStringWithMostUniqueCharactersMostRecentlyAddedToMax\
    \ = String.Empty;\n        List<string> wordsWithMostUniqueCharacters = words.Where(w\
    \ => w.Count() == maxCharacterCount).ToList();\n        if (wordsWithMostUniqueCharacters.Any())\
    \ {\n            string mostRecentlyAddedToMax = wordsWithMostUniqueCharacters.Last();\n\
    \            for (int i = 0; i < words.Count; i++) {\n                if (words[i].ToLower().Equals(mostRecentlyAddedToMax.ToLower()))\
    \ {\n                    maxStringWithMostUniqueCharactersMostRecentlyAddedToMax\
    \ = mostRecentlyAddedToMax;\n                    maxStringWithMostUniqueCharacters\
    \ = mostRecentlyAddedToMax;\n                    recentStringWithMostUniqueCharactersMostRecentlyAddedToMax\
    \ = words[i];\n                    break;\n                } else {\n        \
    \            for (int j = 0; j < wordsWithMostUniqueCharacters.Count; j++) {\n\
    \                        if (wordsWithMostUniqueCharacters[j].ToLower().Equals(words[i].ToLower()))\
    \ {\n                            string mostRecentlyAddedToMax2 = wordsWithMostUniqueCharacters[j];\n\
    \                            for (int k = 0; k < wordsWithMostUniqueCharacters.Count;\
    \ k++) {\n                                if (wordsWithMostUniqueCharacters[k].ToLower().Equals(mostRecentlyAddedToMax2.ToLower()))\
    \ {\n                                    maxStringWithMostUniqueCharactersMostRecentlyAddedToMax\
    \ = mostRecentlyAddedToMax2;\n                                    maxStringWithMostUniqueCharacters\
    \ = mostRecentlyAddedToMax2;\n                                    recentStringWithMostUniqueCharactersMostRecentlyAddedToMax\
    \ = words[i];\n                                    break;\n                  \
    \              }\n                            }\n                            break;\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        return maxStringWithMostUniqueCharacters;", "    \
    \    if (words.Count == 0) {\n            throw new ArgumentException(\"The list\
    \ must contain at least one string\");\n        }\n\n        int maxCount = words.Max(w\
    \ => w.Length);\n        int maxIndex = words.IndexOf(words.Max(ww => ww.Length));\n\
    \        if (maxIndex == -1) return \"\";\n\n        List<string> longestWords\
    \ = new List<string>();\n\n        foreach (string w in words) {\n           \
    \ if (w.Length == maxCount) {\n                longestWords.Add(w);\n        \
    \    }\n        }\n        Debug.Assert(longestWords.Count > 1);\n\n        foreach\
    \ (string w in longestWords) {\n            int uniqueChars = words.Where(w =>\
    \ w.Length == w.Count()).Distinct().Count();\n            if (uniqueChars == maxCount)\
    \ {\n                return w;\n            }\n        }\n\n        throw new\
    \ ArgumentException(\"Unable to find word with max count of unique characters\
    \ in list\");", "        // Create two dictionaries, one for counting and another\
    \ for max count.\n        Dictionary<string, int> count = new Dictionary<string,\
    \ int>();\n        Dictionary<string, int> maxCount = new Dictionary<string, int>();\n\
    \n        // Count the frequency of each word\n        for (int i = 0; i < words.Count;\
    \ i++) {\n            string word = words[i];\n\n            // If word is not\
    \ in the dictionary, add it\n            if (count.ContainsKey(word) == false)\
    \ {\n                count[word] = 1;\n            }\n            else {\n   \
    \             // If word is in the dictionary, increment the count of that word\n\
    \                count[word]++;\n            }\n        }\n\n        // Get the\
    \ top most common word and its count\n        string wordWithMostCharacters =\
    \ \"\";\n        int maxCountWord = 0;\n        for (int i = 0; i < words.Count;\
    \ i++) {\n            string word = words[i];\n\n            // Get the count\
    \ for the word\n            int count = count[word];\n\n            // If count\
    \ is greater than max\n            if (count > maxCount) {\n                //\
    \ Store the word and its count\n                maxCount = count;\n          \
    \      maxCountWord = i;\n                wordWithMostCharacters = word;\n   \
    \         }\n        }\n\n        // Return the top most common word and max count\n\
    \        if (maxCountWord > 0) {\n            return words[maxCountWord];\n  \
    \      }\n        else {\n            return wordWithMostCharacters;\n       \
    \ }", "        HashSet<string> uniques = new HashSet<string>();\n        foreach\
    \ (string word in words) {\n            foreach (char c in word) {\n         \
    \       if (!uniques.Contains(c)) {\n                    uniques.Add(c);\n   \
    \             }\n            }\n        }\n\n        foreach (string word in words)\
    \ {\n            if (uniques.Count == words.Count) {\n                return word;\n\
    \            }\n        }\n\n        return null;", "        char maxChar = words[0].ToCharArray().Max();\n\
    \        string maxWord = \"\";\n\n        for (int i = 1; i < words.Count; i++)\n\
    \        {\n            char currentChar = words[i].ToCharArray().Max();\n   \
    \         if (currentChar > maxChar)\n            {\n                maxChar =\
    \ currentChar;\n                maxWord = words[i];\n            }\n        }\n\
    \n        return maxWord;", "        HashSet<char> set = new HashSet<char>();\n\
    \        int maxUniqueCharacters = 0;\n        string wordWithMaxUniqueCharacters\
    \ = string.Empty;\n        foreach (string word in words) {\n            char[]\
    \ words = word.ToCharArray();\n            foreach (char character in words) {\n\
    \                if (set.Add(character)) {\n                    maxUniqueCharacters++;\n\
    \                }\n            }\n            if (maxUniqueCharacters > wordWithMaxUniqueCharacters)\
    \ {\n                wordWithMaxUniqueCharacters = word;\n            }\n    \
    \        set.Clear();\n        }\n        char[] wordsWithMaxUniqueCharacters\
    \ = wordWithMaxUniqueCharacters.ToCharArray();\n        Array.Sort(wordsWithMaxUniqueCharacters);\n\
    \        return wordWithMaxUniqueCharacters;", "        if (words.Count == 0)\
    \ return \"\";\n        // Use a dictionary to store number of occurrences of\
    \ each character and sort using linq\n        var counts = words.GroupBy(w =>\
    \ w.ToCharArray())\n            .Select(g => new { \n                Key = g.Key,\n\
    \                Count = g.Count() \n            })\n            .OrderByDescending(o\
    \ => o.Count)\n            .ToDictionary(o => o.Key.ToString(), o => o.Count);\n\
    \        // Use a dictionary to store characters that appears the most frequently\n\
    \        var mostFrequent = words.GroupBy(w => w.ToCharArray())\n            .Select(g\
    \ => new {\n                Key = g.Key,\n                Count = g.Count()\n\
    \            })\n            .OrderByDescending(o => o.Count)\n            .First();\n\
    \        // Count the number of unique characters and compare it to the most frequent\n\
    \        var uniqueCharCount = counts.Keys.Where(x => !counts.ContainsKey(x)).Distinct().Count();\n\
    \        if (uniqueCharCount > mostFrequent.Count) return mostFrequent.Key;\n\
    \        return FindMax(words.Except(new List<string> { mostFrequent.Key }));",
  "        Dictionary<char, int> counter = new Dictionary<char, int>();\n        int\
    \ maxChars = 0;\n        string maxWord = \"\";\n        string currWord = \"\"\
    ;\n        foreach (string word in words) {\n            char[] chars = word.ToCharArray();\n\
    \            foreach (char ch in chars) {\n                if (!counter.ContainsKey(ch))\n\
    \                    counter.Add(ch, 1);\n                else\n             \
    \       counter[ch] += 1;\n            }\n            if (counter.Values.Sum()\
    \ == chars.Length) {\n                currWord = word;\n                maxChars\
    \ = counter.Values.Max();\n            }\n            else if (counter.Values.Sum()\
    \ > maxChars) {\n                currWord = word;\n                maxChars =\
    \ counter.Values.Max();\n            }\n        }\n        if (maxChars != 0)\
    \ {\n            List<string> orderedWords = words.Select(w => w).OrderBy(w =>\
    \ w).ToList();\n            foreach (string word in orderedWords) {\n        \
    \        char[] chars = word.ToCharArray();\n                foreach (char ch\
    \ in chars) {\n                    if (!counter.ContainsKey(ch))\n           \
    \             counter.Add(ch, 1);\n                    else\n                \
    \        counter[ch] += 1;\n                }\n                if (counter.Values.Sum()\
    \ == chars.Length) {\n                    currWord = word;\n                 \
    \   maxChars = counter.Values.Max();\n                }\n                else\
    \ if (counter.Values.Sum() > maxChars) {\n                    currWord = word;\n\
    \                    maxChars = counter.Values.Max();\n                }\n   \
    \         }\n        }\n        return maxWord;", "        var result = new List<string>();\n\
    \        int maxCount = 0;\n        var sortedWords = words.OrderBy(x => x).ToList();\n\
    \        foreach (string word in sortedWords) {\n            int count = 0;\n\
    \            foreach (char c in word) {\n                if (c.Equals('a') ||\
    \ c.Equals('z') || c.Equals('A') || c.Equals('Z'))\n                    count++;\n\
    \            }\n            if (count > maxCount) {\n                maxCount\
    \ = count;\n                result = word;\n            }\n        }\n       \
    \ if (!result.Any())\n            return null;\n        return result.First();",
  "        int maxCharCount = 1;\n        var max = words.Max(w => w.Count(c=>c=='a'));\n\
    \        int currCount = words.Count(w => w.Count(c=>c=='a'));\n        if (currCount>max)\
    \ {\n            return max;\n        }\n        words.ForEach(w => { \n     \
    \       int curr = w.Count(c=>c=='a');\n            if (curr>max) {\n        \
    \        if (curr>maxCharCount) {\n                    maxCharCount = curr;\n\
    \                }\n            }\n        });\n        return words.FirstOrDefault(w\
    \ => w.Count(c=>c=='a')==maxCharCount)?.FirstOrDefault();", "        if (words\
    \ == null) return null;\n        HashSet<char> counts = new HashSet<char>();\n\
    \        string max = null;\n        int maxCount = 0;\n        foreach (string\
    \ w in words) {\n            foreach (char c in w) {\n                if (counts.Contains(c))\
    \ counts[c]++;\n                else {\n                    counts.Add(c);\n \
    \                   maxCount = counts.Count;\n                }\n            }\n\
    \            if (max != null && maxCount > counts.Count) continue;\n         \
    \   if (maxCount == counts.Count) {\n                max = w;\n            } else\
    \ {\n                if (words.FindIndex(x => x.Contains(max, StringComparer.OrdinalIgnoreCase))\
    \ == words.Count - 1) max = w;\n            }\n        }\n        return max;",
  "        if (words == null) return null;\n        var result = new Dictionary<char,\
    \ int>();\n        words.ForEach(w => {\n            var length = w.Length;\n\
    \            w.Aggregate(0, (acc, c) => {\n                if (!result.ContainsKey(c))\
    \ {\n                    result[c] = 1;\n                } else {\n          \
    \          result[c] += 1;\n                }\n                return acc + 1;\n\
    \            }, 0);\n        });\n        var max = result.Keys.Max();\n     \
    \   var maxIndex = 0;\n        var maxCount = result[max];\n        words.ForEach(w\
    \ => {\n            var length = w.Length;\n            var count = result[w];\n\
    \            if (count > maxCount) {\n                maxCount = count;\n    \
    \            maxIndex = words.IndexOf(w);\n            } else if (count < maxCount)\
    \ {\n                return;\n            }\n        });\n        return words[maxIndex];",
  "        int maxCount = 0;\n        string word = \"\";\n        foreach (string\
    \ s in words) {\n            List<char> uniques = new List<char>();\n        \
    \    foreach (char c in s) {\n                if (uniques.Contains(c))\n     \
    \               uniques.Add(c);\n                else\n                    uniques.Add(0);\n\
    \            }\n            int count = uniques.Count;\n            if (count\
    \ > maxCount) {\n                word = s;\n                maxCount = count;\n\
    \            }\n        }\n        if (maxCount > 0)\n            return word;\n\
    \        else\n            return \"\";", "        string max = \"\";\n      \
    \  int maxCount = 0;\n        foreach (string word in words)\n        {\n    \
    \        int count = 0;\n            foreach (char c in word)\n            {\n\
    \                if (word.IndexOf(c) > -1)\n                    count++;\n   \
    \         }\n            if (count > maxCount)\n            {\n              \
    \  maxCount = count;\n                max = word;\n            }\n        }\n\
    \        return max;", "        if (words.Count > 0)\n        {\n            int\
    \ maxCount = 0;\n            string tempString = \"\";\n            foreach(var\
    \ word in words)\n            {\n                char[] charArray = word.ToCharArray();\n\
    \                int count = 0;\n                foreach (char ch in charArray)\n\
    \                {\n                    count++;\n                }\n        \
    \        if (count > maxCount)\n                {\n                    maxCount\
    \ = count;\n                    tempString = word;\n                }\n      \
    \      }\n            return tempString;\n        }\n        return string.Empty;",
  "        int maxCount = 0;\n        string maxWord = null;\n        foreach (string\
    \ s in words) {\n            int count = 0;\n            foreach (char c in s)\
    \ {\n                if (char.IsLetter(c)) {\n                    count += 1;\n\
    \                }\n            }\n            if (count > maxCount) {\n     \
    \           maxCount = count;\n                maxWord = s;\n            }\n \
    \       }\n        if (maxCount > 0) {\n            return maxWord;\n        }\n\
    \        char[] chars = new char[maxCount];\n        foreach (string s in words)\
    \ {\n            int i = 0;\n            foreach (char c in s) {\n           \
    \     chars[i++] = c;\n            }\n            Array.Sort(chars, 0, chars.Length);\n\
    \            chars = Array.ConvertAll(chars, c => (char)c);\n            string\
    \ ss = new string(chars);\n            if (ss == maxWord) {\n                return\
    \ ss;\n            }\n        }\n        return maxWord;", "        StringBuilder\
    \ str = new StringBuilder();\n        List<string> ordered = new List<string>();\n\
    \        foreach (string word in words) {\n            foreach (char c in word)\
    \ {\n                if (str.Length > 0) {\n                    str.Append(c);\n\
    \                }\n                else {\n                    str.Append(c);\n\
    \                }\n            }\n            ordered.Add(str.ToString());\n\
    \            str.Clear();\n        }\n        int max = ordered.Max(x => x.Length);\n\
    \        string result = ordered.Where(x => x.Length == max).FirstOrDefault();\n\
    \        if (result == null) {\n            return string.Empty;\n        }\n\
    \        return result;", "        if (words == null || words.Count < 1)\n   \
    \         return \"\";\n        string max = null;\n        int maxCount = 0;\n\
    \        foreach (string word in words) {\n            int count = word.Distinct().Count();\n\
    \            if (count > maxCount) {\n                max = word;\n          \
    \      maxCount = count;\n            }\n        }\n        if (maxCount == 0)\n\
    \            return \"\";\n        if (maxCount > 1)\n            return FindMax(words.Where(w\
    \ => w != max).ToList());\n        return max;", "        int count = new int[26];\n\
    \n        for (int i = 0; i < words.Count; i++) {\n            string word = words[i];\n\
    \            for (int j = 0; j < word.Length; j++) {\n                count[(int)word[j]]\
    \ += 1;\n            }\n        }\n\n        Array.Sort(count, (x, y) => x - y);\n\
    \n        for (int i = 0; i < count.Length; i++) {\n            if (count[i] >\
    \ 0)\n                return words[i];\n        }\n\n        return words[0];",
  '        return words.OrderBy(w => w.Length).LastOrDefault();', "        int count\
    \ = 0;\n        string maxWord = string.Empty;\n        foreach (string word in\
    \ words) {\n            count += word.ToCharArray().Distinct().Count();\n    \
    \        if (count == words.Max()) {\n                maxWord = word;\n      \
    \      }\n        }\n        if (count == words.Max()) {\n            return maxWord;\n\
    \        } else {\n            return words.Max();\n        }", "        int maxCount\
    \ = 0;\n        foreach (string word in words) {\n            int count = CalculateUniqueCharCount(word);\n\
    \            if (count > maxCount) {\n                maxCount = count;\n    \
    \        }\n        }\n\n        return words[words.IndexOf(words[words.IndexOf(words[0])]\n\
    \            .OrderBy(c => c.ToString()).ToArray())];", "        char[] charArray\
    \ = words[0].ToCharArray();\n        int numberOfUniqueCharacters = 1;\n     \
    \   for (int i = 0; i < charArray.Length; i++) {\n            for (int j = i+1;\
    \ j < charArray.Length; j++) {\n                char characterA = charArray[i];\n\
    \                char characterB = charArray[j];\n                if (characterA\
    \ == characterB) continue;\n                if (characterA.ToString().Length <\
    \ characterB.ToString().Length) {\n                    char temp = characterA;\n\
    \                    characterA = characterB;\n                    characterB\
    \ = temp;\n                }\n                if (characterA != characterB) {\n\
    \                    numberOfUniqueCharacters++;\n                }\n        \
    \    }\n        }\n        List<string> duplicates = new List<string>();\n   \
    \     foreach (string word in words) {\n            char[] charArray = word.ToCharArray();\n\
    \            int numberOfUniqueCharacters = 1;\n            for (int i = 0; i\
    \ < charArray.Length; i++) {\n                for (int j = i+1; j < charArray.Length;\
    \ j++) {\n                    char characterA = charArray[i];\n              \
    \      char characterB = charArray[j];\n                    if (characterA ==\
    \ characterB) continue;\n                    if (characterA.ToString().Length\
    \ < characterB.ToString().Length) {\n                        char temp = characterA;\n\
    \                        characterA = characterB;\n                        characterB\
    \ = temp;\n                    }\n                    if (characterA != characterB)\
    \ {\n                        numberOfUniqueCharacters++;\n                   \
    \ }\n                }\n            }\n            if (numberOfUniqueCharacters\
    \ > words.Count)\n                duplicates.Add(word);\n        }\n        foreach\
    \ (string word in duplicates) {\n            int number = 0;\n            foreach\
    \ (char c in word) {\n                if (char.IsNumber(c)) {\n              \
    \      number++;\n                }\n            }\n            string newWord\
    \ = word;\n            if (number == words.Count && word != words[0])\n      \
    \          newWord = words[0];\n            return newWord;\n        }\n     \
    \   return words[0];", "        var result = words.GroupBy(x => x.Length).Select(x\
    \ => new {\n            count = x.Key,\n            word = x\n        }).OrderByDescending(x\
    \ => x.count).First().word;\n        return result;", "        // code here\n\
    \        var wordCounts = words.GroupBy(x => x).ToDictionary(x => x.Key, x =>\
    \ x.Count());\n        string result = null;\n        if (wordCounts.ContainsKey(wordCounts.Values.Max()))\n\
    \        {\n            result = wordCounts.Values.Max().ToString();\n       \
    \ }\n        else if (wordCounts.ContainsKey(wordCounts.Values.Min()))\n     \
    \   {\n            result = wordCounts.Values.Min().ToString();\n        }\n \
    \       else\n        {\n            result = words.First().ToString();\n    \
    \    }\n        return result;", "        long maxCount = 0;\n        string maxWord\
    \ = null;\n        for (int i = 0; i < words.Count; i++) {\n            long uniqueCharCount\
    \ = 0;\n            for (int j = 0; j < words.Count; j++) {\n                uniqueCharCount\
    \ += words[j].Count(c => c==words[i].ElementAt(j));\n            }\n         \
    \   if (uniqueCharCount > maxCount) {\n                maxCount = uniqueCharCount;\n\
    \                maxWord = words[i];\n            }\n        }\n        return\
    \ maxWord;", "        int[] uniqueValues = new int[256];\n        int max = 0;\n\
    \        foreach (string word in words) {\n            foreach (char ch in word)\n\
    \                uniqueValues[ch]++;\n            if (uniqueValues.Length > max)\n\
    \                max = uniqueValues.Length;\n        }\n        foreach (string\
    \ word in words) {\n            int count = 0;\n            foreach (char ch in\
    \ word)\n                count+=uniqueValues[ch];\n            if (count>max)\n\
    \                max = count;\n        }\n        foreach (string word in words)\
    \ {\n            int index = 0;\n            foreach (char ch in word)\n     \
    \           index+=uniqueValues[ch];\n            if (index>max)\n           \
    \     max = index;\n        }\n        if (uniqueValues.Length>max)\n        \
    \    max = uniqueValues.Length;\n        string result = string.Empty;\n     \
    \   for (int i = 0; i < uniqueValues.Length; i++) {\n            if (uniqueValues[i]==max)\n\
    \                result += words[i];\n        }\n        return result;", "  \
    \      char[] myCharArray = new char[500];\n        int uniqueCount = 0;\n   \
    \     int count = 0;\n        for (int i = 0; i < words.Count; i++)\n        {\n\
    \            for (int j = 1; j < words.Count; j++)\n            {\n          \
    \      if (words[i].ToCharArray().SequenceEqual(words[j].ToCharArray()))\n   \
    \             {\n                    myCharArray[count] = words[i].ToCharArray()[0];\n\
    \                    uniqueCount++;\n                    break;\n            \
    \    }\n                else\n                {\n                    count++;\n\
    \                }\n            }\n        }\n        int maxCount = Math.Max(count,\
    \ uniqueCount);\n        for (int i = 0; i < myCharArray.Length; i++)\n      \
    \  {\n            if (maxCount == uniqueCount)\n            {\n              \
    \  if (myCharArray[i] == words[words.Count - 1].ToCharArray()[0])\n          \
    \      {\n                    return words[words.Count - 1];\n               \
    \ }\n            }\n        }\n        return \"None\";", "        var uniqueChars\
    \ = new HashSet<char>();\n        foreach (var word in words)\n        {\n   \
    \         var str = word.ToLower();\n            var count = str.Count(c => uniqueChars.Contains(c));\n\
    \            if (count == uniqueChars.Count)\n            {\n                return\
    \ word;\n            }\n            uniqueChars.UnionWith(str.ToLower());\n  \
    \      }\n        return words[0];", "        int uniqueChars = 0;\n        int\
    \ i = 0;\n        string maxWord = \"\";\n        string curWord = \"\";\n   \
    \     foreach (string word in words) {\n            if (word.Count() > uniqueChars)\
    \ {\n                uniqueChars = word.Count();\n                maxWord = curWord;\n\
    \            }\n            curWord = word;\n        }\n        if (uniqueChars\
    \ == words.Count()) {\n            return maxWord;\n        }\n        int curChar\
    \ = 0;\n        bool changed = true;\n        while (changed && i < words.Count())\
    \ {\n            if (words[i].Count() > curChar) {\n                curChar =\
    \ words[i].Count();\n                maxWord = curWord;\n            }\n     \
    \       curWord = words[i];\n            i++;\n            if (i < words.Count())\
    \ {\n                if (words[i].Count() < curChar) {\n                    changed\
    \ = false;\n                }\n            }\n        }\n        return maxWord;",
  "        char[] charArray = new char[words.Count * words.Max(w => w.Count(c => c\
    \ == ' '))];\n        int count = 0;\n        foreach (var word in words) {\n\
    \            for (int i = 0; i < word.Length; i++) {\n                charArray[count++]\
    \ = word[i];\n            }\n        }\n        var r = new Random();\n      \
    \  Array.Sort(charArray);\n        charArray = charArray.Take(charArray.Length\
    \ - words.Max(w => w.Count(c => c == ' '))).ToArray();\n        for (int i = 0;\
    \ i < words.Count; i++) {\n            var d = charArray.Take(charArray.Length\
    \ - words.Max(w => w.Count(c => c == ' ')));\n            d = d.Distinct().ToArray();\n\
    \            if (d.Count() > 1) {\n                return words[i];\n        \
    \    }\n        }\n        return words[0];", "        int maxUnique = 0;\n  \
    \      string word = \"\";\n        foreach(var item in words) {\n           \
    \ int uniqueChars = item.Distinct().Count();\n            if(uniqueChars > maxUnique)\
    \ {\n                maxUnique = uniqueChars;\n                word = item;\n\
    \            }\n        }\n        return word;", "        Dictionary<string,\
    \ int> chars = new Dictionary<string, int>();\n        foreach (string word in\
    \ words) {\n            int count = 0;\n            foreach (char ch in word)\
    \ {\n                count++;\n                chars[ch.ToString()] += 1;\n  \
    \          }\n            if (count > chars.MaxValue) {\n                chars.Clear();\n\
    \                chars.Add(\"*\", count);\n            }\n        }\n        if\
    \ (chars.Count > 0)\n            chars = chars.OrderBy(x => x.Value).ToDictionary(x\
    \ => x.Key, x => x.Value);\n\n        foreach (string key in chars.Keys)\n   \
    \         chars[key] = chars[key].ToString();\n\n        if (chars.Keys.Count\
    \ == 1)\n            return chars.Keys.First();\n\n        chars = chars.OrderBy(x\
    \ => x.Key, new DictionaryComparer()).ToDictionary(x => x.Key, x => x.Value);\n\
    \        return chars.Keys.First();"]
stop_tokens:
- "\n    }\n"
