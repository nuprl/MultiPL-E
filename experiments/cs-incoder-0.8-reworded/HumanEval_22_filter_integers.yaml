name: HumanEval_22_filter_integers
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Filter given list of any csthon values only for integers\n \
  \   // >>> FilterIntegers((new List<object>(new string[]{(string)\"a\", (string)3.14f,\
  \ (string)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>> FilterIntegers((new\
  \ List<object>(new object[]{1L, 2L, 3L, \"abc\", new List<object>()})))\n    //\
  \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))\n    public static\
  \ List<long> FilterIntegers(List<object> values) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FilterIntegers((new\
  \ List<object>())).Equals((new List<long>())));\n    Debug.Assert(FilterIntegers((new\
  \ List<object>(new object[]{4L, new List<object>(), 23.2f, 9L, \"adasd\"}))).Equals((new\
  \ List<long>(new long[]{(long)4L, (long)9L}))));\n    Debug.Assert(FilterIntegers((new\
  \ List<object>(new object[]{3L, \"c\", 3L, 3L, \"a\", \"b\"}))).Equals((new List<long>(new\
  \ long[]{(long)3L, (long)3L, (long)3L}))));\n    }\n\n}\n"
completions: ["        var filteredValues = new List<long>();\n        foreach (var\
    \ v in values) {\n            if (!(v.GetType().Equals(typeof(int))\n        \
    \            || v.GetType().Equals(typeof(Decimal))\n                    || v.GetType().Equals(typeof(short))\n\
    \                    || v.GetType().Equals(typeof(ushort))\n                 \
    \   || v.GetType().Equals(typeof(uint))\n                    || v.GetType().Equals(typeof(ulong))\n\
    \                    || v.GetType().Equals(typeof(float))\n                  \
    \  || v.GetType().Equals(typeof(double))\n                    || v.GetType().Equals(typeof(decimal))\n\
    \                    || v.GetType().Equals(typeof(bool))\n                   \
    \ || v.GetType().Equals(typeof(byte))\n                    || v.GetType().Equals(typeof(sbyte)))\n\
    \                continue;\n            filteredValues.Add((long)v);\n       \
    \ }\n        return filteredValues;", "        var result = new List<long>();\n\
    \        foreach (var value in values) {\n            if (!(value is long || value\
    \ is int)) {\n                continue;\n            }\n            result.Add((long)value);\n\
    \        }\n        return result;", "        List<long> integers = new List<long>();\n\
    \        foreach (object value in values) {\n            if (value is int) {\n\
    \                integers.Add((long)value);\n            }\n        }\n      \
    \  return integers;", '        return values.Cast<object>().Select(x => x is long
    ? x : (long)x).ToList();', "        List<long> result = new List<long>();\n  \
    \      foreach (object value in values) {\n            if (value is int) result.Add((long)value);\n\
    \        }\n        return result;", "        if (values.Count == 0) return new\
    \ List<long>();\n        List<long> ret = new List<long>();\n        bool isInteger\
    \ = true;\n        foreach (object value in values) {\n            long val =\
    \ (long)value;\n            if (val == (int) val) {\n                if (isInteger)\
    \ {\n                    ret.Add(val);\n                } else {\n           \
    \         isInteger = false;\n                }\n            } else {\n      \
    \          isInteger = true;\n            }\n        }\n        if (values.Count\
    \ > 0 && !isInteger) {\n            ret.Add(0);\n        }\n        return ret;",
  "        if (values == null || values.Count == 0) return values;\n        var list\
    \ = values.Cast<object>().Where(value => value is int).Cast<long>();\n       \
    \ list.Insert(0, 0);\n        list.Reverse();\n        return list;", "      \
    \  var result = new List<long>();\n        foreach (var value in values) {\n \
    \           if (value is long) {\n                result.Add((long) value);\n\
    \            }\n            else if (value is int || value is uint) {\n      \
    \          result.Add((long) value);\n            }\n            else if (value\
    \ is double || value is decimal) {\n                result.Add((long) value);\n\
    \            }\n            else if (value is object || value is string) {\n \
    \               result.Add((long) value);\n            }\n            else {\n\
    \                Debug.Assert(false, \"Unknown type: \" + value.GetType());\n\
    \            }\n        }\n        return result;", "        var filtered = new\
    \ List<long>();\n        foreach (var value in values) {\n            if (value\
    \ is int) {\n                filtered.Add((long)value);\n            }\n     \
    \   }\n        return filtered;", "        List<long> results = new List<long>();\n\
    \        foreach (object value in values) {\n            if (value is int) {\n\
    \                results.Add((long)value);\n            }\n        }\n       \
    \ return results;", "        if (values == null) return null;\n        var list\
    \ = values.ToList();\n        if (values.Count != list.Count) return null;\n \
    \       var result = new List<long>();\n        for (int i = 0; i < values.Count;\
    \ i++) {\n            object val = list[i];\n            if (val is int) {\n \
    \               result.Add((long)val);\n            }\n        }\n        return\
    \ result;", "        List<long> filteredValues = new List<long>();\n        foreach\
    \ (object value in values) {\n            long valueAsLong;\n            if (value\
    \ is long) {\n                valueAsLong = (long)value;\n            } else {\n\
    \                valueAsLong = 0;\n            }\n            filteredValues.Add(valueAsLong);\n\
    \        }\n        return filteredValues;", "        List<long> result = new\
    \ List<long>();\n        foreach (object value in values) {\n            if (value\
    \ is long || value is int || value is decimal) {\n                result.Add((long)value);\n\
    \            } else if (value is string) {\n                result.Add((long)Convert.ToInt64(value,\
    \ 0));\n            }\n        }\n        return result;", "        if (values\
    \ == null || values.Count == 0) return new List<long>();\n        List<long> result\
    \ = new List<long>();\n        foreach (var item in values) {\n            var\
    \ value = item.ToString().ToLowerInvariant();\n            if (value != null &&\
    \ value.Contains(\".\") && value.Contains(\"e\") && value.Contains(\"-\") && value.Contains(\"\
    +\")) {\n                var split = value.Split(new char[] { '-', '+' }, 2);\n\
    \                if (split.Length != 2) throw new Exception(\"Invalid value\"\
    );\n                result.Add(new long(Convert.ToInt64(split[0], CultureInfo.InvariantCulture),\
    \ Convert.ToInt64(split[1], CultureInfo.InvariantCulture)));\n            } else\n\
    \                result.Add(Convert.ToInt64(value));\n        }\n        return\
    \ result;", "        List<long> newValues = new List<long>();\n        foreach(var\
    \ item in values) {\n            if(item.GetType() != typeof(long))\n        \
    \        continue;\n            newValues.Add((long)item);\n        }\n      \
    \  return newValues;", "        List<long> filteredValues = new List<long>();\n\
    \        foreach (object value in values) {\n            if (!(value is int))\
    \ {\n                filteredValues.Add(value);\n            }\n        }\n  \
    \      return filteredValues;", "        List<long> list = new List<long>();\n\
    \        foreach (object o in values) {\n            if (o is long) {\n      \
    \          list.Add((long)o);\n            }\n        }\n        return list;",
  "        if (values == null || values.Count < 1)\n            return null;\n\n \
    \       var filtered = new List<long>();\n\n        foreach (var value in values)\
    \ {\n            if (value is long) {\n                filtered.Add((long)value);\n\
    \            } else\n            {\n                var longValue = (long)value;\n\
    \                if (longValue % 1 == 0) {\n                    filtered.Add(longValue);\n\
    \                }\n            }\n        }\n        return filtered;", "   \
    \     // Use generic list as default to avoid boxing\n        List<long> result\
    \ = new List<long>();\n        // Make sure we only use non-null values\n    \
    \    foreach (object value in values) {\n            if (value is long && value.Equals((long)\
    \ value)) {\n                result.Add((long) value);\n            }\n      \
    \      else if (value is int) {\n                result.Add((long) value);\n \
    \           }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (object value in values) {\n          \
    \  bool isInt = value is int ? (int)value == value : Convert.ToInt32(value) ==\
    \ value;\n            if (isInt) {\n                result.Add(value);\n     \
    \       }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (values.Count == 0) return result;\n        foreach\
    \ (object item in values) {\n            if (item is int) {\n                result.Add((long)item);\n\
    \            } else if (item is System.Numerics.BigInteger) {\n              \
    \  result.Add((long)item.GetHashCode());\n            } else {\n             \
    \   // Ignore other types if they don't support casting.\n            }\n    \
    \    }\n        return result;", "        if (values == null || values.Count ==\
    \ 0)\n            return values;\n        var list = values.Cast<object>().ToList();\n\
    \        list.Sort();\n        var filteredValues = list.ConvertAll<long>(x =>\
    \ (long)x);\n        return filteredValues;", "        var integers = new List<long>();\n\
    \        foreach (var value in values) {\n            int val;\n            try\
    \ {\n                val = Convert.ToInt32(value);\n            }\n          \
    \  catch (Exception) {\n                continue;\n            }\n           \
    \ integers.Add(val);\n        }\n        return integers;", "        List<long>\
    \ result = new List<long>();\n        foreach (object value in values) {\n   \
    \         long value;\n            bool success = TryParseLong(value, out value);\n\
    \            if (success) {\n                result.Add(value);\n            }\n\
    \        }\n        return result;", "        List<long> results = new List<long>();\n\
    \        foreach (object value in values) {\n            long num;\n         \
    \   if (value is long) {\n                num = (long)value;\n            }\n\
    \            else {\n                num = Convert.ToInt64(value);\n         \
    \   }\n            if (num >= 1 && num <= long.MaxValue) {\n                results.Add(num);\n\
    \            }\n        }\n        return results;", "        List<long> ret =\
    \ new List<long>();\n        foreach (object obj in values) {\n            if\
    \ (obj is int) {\n                ret.Add((int)obj);\n            } else {\n \
    \               ret.Add((long)obj);\n            }\n        }\n        return\
    \ ret;", '        return values.Where(x => x is long).Select(x => (long)x).ToList();',
  "        // TODO: Improve performance of this algorithm\n        var filtered =\
    \ new List<long>();\n        foreach (var item in values) {\n            if (item\
    \ is long) {\n                filtered.Add((long)item);\n            }\n     \
    \   }\n        return filtered;", "        return values.Where(p => p.GetType().Equals(typeof(long)))\n\
    \            .Cast<object>()\n            .ToList();", "        List<long> result\
    \ = new List<long>();\n        foreach (var v in values) {\n            long i;\n\
    \            if (long.TryParse(v.ToString(), out i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> output\
    \ = new List<long>();\n        bool isInteger = true;\n        foreach (object\
    \ value in values) {\n            string text = value.ToString();\n          \
    \  if (text.Length > 0) {\n                if (!int.TryParse(text, out int result))\
    \ {\n                    isInteger = false;\n                }\n             \
    \   else {\n                    output.Add((long)result);\n                }\n\
    \            }\n        }\n        if (isInteger) {\n            return output;\n\
    \        }\n        return null;", "        if (values != null) {\n          \
    \  var result = new List<long>();\n            foreach (var item in values) {\n\
    \                var value = Convert.ToInt64(item);\n                if (value\
    \ == Int64.MinValue || value == Int64.MaxValue) {\n                    continue;\n\
    \                }\n                result.Add(value);\n            }\n      \
    \      return result;\n        }\n        return null;", "        List<long> result\
    \ = new List<long>();\n        foreach (object value in values) {\n          \
    \  if (value is long)\n                result.Add((long)value);\n            else\
    \ if (value is int)\n                result.Add((int)value);\n        }\n    \
    \    return result;", '        return values.Where(o => o.GetType() == typeof(long)).Select(o
    => (long)o).ToList();', "        if (values == null) {\n            return null;\n\
    \        }\n        List<long> filteredList = new List<long>();\n        foreach\
    \ (object value in values) {\n            long val;\n            if (value is\
    \ long) {\n                val = (long)value;\n            } else if (value is\
    \ IEnumerable<long>) {\n                val = ((IEnumerable<long>)value).Sum();\n\
    \            } else if (value is IList<long>) {\n                val = ((IList<long>)value).Sum();\n\
    \            } else if (value is List<long>) {\n                val = ((List<long>)value).Sum();\n\
    \            } else {\n                val = Convert.ToInt64(value);\n       \
    \     }\n            if (val >= 0) {\n                filteredList.Add(val);\n\
    \            }\n        }\n        return filteredList;", "        List<long>\
    \ values = new List<long>();\n\n        if (values != null && values.Count > 0)\
    \ {\n            foreach (object value in values) {\n                if (value\
    \ is long) {\n                    values.Add((long) value);\n                }\
    \ else if (value is int) {\n                    values.Add((long) value);\n  \
    \              } else if (value is double) {\n                    values.Add((long)\
    \ value);\n                }\n            }\n        }\n\n        return values;",
  "        List<long> result = new List<long>();\n        foreach (object value in\
    \ values) {\n            try {\n                long casted;\n               \
    \ if (long.TryParse(value.ToString(), out casted)) {\n                    result.Add(casted);\n\
    \                }\n            } catch {\n                throw new Exception(\"\
    Not integer: \" + value);\n            }\n        }\n        return result;",
  "        if (values == null) {\n            return null;\n        }\n\n        List<long>\
    \ results = new List<long>();\n        foreach (object value in values) {\n  \
    \          if (value is long) {\n                results.Add((long)value);\n \
    \           } else if (value is IEnumerable<object>) {\n                results.AddRange(FilterIntegers((IEnumerable<object>)value));\n\
    \            } else if (value is ICollection<object>) {\n                results.AddRange(FilterIntegers((ICollection<object>)value));\n\
    \            } else if (value is IEnumerable) {\n                foreach (object\
    \ itemValue in (IEnumerable)value) {\n                    results.AddRange(FilterIntegers((IEnumerable<object>)itemValue));\n\
    \                }\n            } else if (value is ICollection) {\n         \
    \       foreach (object itemValue in (ICollection)value) {\n                 \
    \   results.AddRange(FilterIntegers((IEnumerable<object>)itemValue));\n      \
    \          }\n            } else {\n                // handle other collection\
    \ types like List<string> etc\n            }\n        }\n        return results;",
  "        List<long> result = new List<long>();\n        foreach (object val in values)\
    \ {\n            if (val is long) result.Add((long)val);\n            else if\
    \ (val is int) result.Add((int)val);\n        }\n        return result;", "  \
    \      List<long> integers = new List<long>();\n        foreach (var value in\
    \ values) {\n            bool isInt = value is int || value is long || value is\
    \ short;\n            if (isInt) {\n                integers.Add((int)value);\n\
    \            }\n        }\n        return integers;", "        List<long> ret\
    \ = new List<long>();\n        bool inDouble = false;\n        for (int i = 0;\
    \ i < (values.Count - 1); i++) {\n            if (values[i] is double && values[i\
    \ + 1] is int && values[i] == values[i + 1]) {\n                inDouble = true;\n\
    \            } else {\n                if (!inDouble) {\n                    ret.Add((long)values[i]);\n\
    \                }\n            }\n        }\n        if (!inDouble) {\n     \
    \       ret.Add((long)values[values.Count - 1]);\n        }\n        return ret;",
  "        if (values == null || values.Count == 0)\n            return values;\n\
    \        List<long> integers = new List<long>();\n        foreach (object value\
    \ in values) {\n            if (value is long) {\n                integers.Add((long)value);\n\
    \            }\n        }\n        return integers;", '        return values.Where(x
    => x is long).Select(x => (long)x).ToList();', "        List<long> result = new\
    \ List<long>();\n        foreach (object value in values) {\n            bool\
    \ isInteger = value is long;\n            if (isInteger) {\n                result.Add((long)value);\n\
    \            }\n        }\n        return result;", "        var filter = new\
    \ List<long>();\n        foreach(object value in values) {\n            if (value\
    \ is long) {\n                filter.Add((long)value);\n            } else {\n\
    \                filter.Add((int)value);\n            }\n        }\n        return\
    \ filter;", "        var result = new List<long>();\n        foreach (object value\
    \ in values) {\n            if (value is int || value is long) {\n           \
    \     result.Add((long) value);\n            }\n        }\n        return result;",
  "        List<long> valueList = new List<long>();\n        foreach (object item\
    \ in values) {\n            if (item is long) {\n                valueList.Add((long)\
    \ item);\n            }\n        }\n        return valueList;", "        // Check\
    \ input data type\n        if (values == null || values.Count == 0) {\n      \
    \      throw new ArgumentException(\"Values list is null or empty\");\n      \
    \  }\n        // Check input values\n        if (!(values.All(x => x is long)\
    \ || values.All(x => x is int))) {\n            throw new ArgumentException(\"\
    Values list contains values of different types\");\n        }\n        // Initialize\
    \ output\n        List<long> outList = new List<long>();\n        // Run filter\n\
    \        foreach (object item in values) {\n            // Try to convert item\
    \ to long\n            long tmp;\n            if (long.TryParse(item.ToString(),\
    \ out tmp)) {\n                // Add item to output list\n                outList.Add(tmp);\n\
    \            } else {\n                // Convert item to int\n              \
    \  int tmp2;\n                if (int.TryParse(item.ToString(), out tmp2)) {\n\
    \                    outList.Add(tmp2);\n                } else {\n          \
    \          throw new ArgumentException(\"Values list contains values of different\
    \ types\");\n                }\n            }\n        }\n        return outList;",
  "        List<long> result = new List<long>();\n        foreach (object o in values)\
    \ {\n            try {\n                long n = (long)o;\n                if\
    \ (n != o) {\n                    result.Add(n);\n                }\n        \
    \    }\n            catch (Exception ex) {\n                // Not a long...\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        foreach (var value in values) {\n            if (value\
    \ is int)\n                result.Add((long)value);\n        }\n        return\
    \ result;", "        var result = new List<long>();\n        foreach (var i in\
    \ values) {\n            if (i.GetType() == typeof(long)) {\n                result.Add(Convert.ToInt64(i));\n\
    \            } else {\n                result.Add(0);\n            }\n       \
    \ }\n        return result;", '        return values.Select(o => o.ToInt64()).Where(i
    => i >= 0).Select(i => i).ToList();', "        var result = new List<long>();\n\
    \        foreach(var value in values) {\n            var x = System.Convert.ToInt64(value);\n\
    \            if(x >= 0)\n                result.Add((long)x);\n        }\n   \
    \     return result;", '        return values.Where(p => p is long).Select(p =>
    (long)p).ToList();', "        var newValues = new List<long>();\n        foreach\
    \ (var value in values) {\n            if (value is int) {\n                newValues.Add((long)value);\n\
    \            } else if (value is long) {\n                newValues.Add((long)value);\n\
    \            } else if (value is decimal) {\n                newValues.Add((long)value);\n\
    \            } else if (value is string) {\n                newValues.Add((long)value);\n\
    \            } else if (value is System.Collections.IEnumerable) {\n         \
    \       newValues.AddRange(FilterIntegers((List<object>)value));\n           \
    \ }\n        }\n        return newValues;", "        var result = new List<long>();\n\
    \        foreach (object val in values) {\n            if (val is long)\n    \
    \            result.Add((long)val);\n            else if (val is IEnumerable)\n\
    \                result.AddRange(FilterIntegers((List<object>)val));\n       \
    \ }\n        return result;", '        return values.Cast<long>().Where(i => i.ToString().ToLower()
    != "nan").Select(i => (long)i).ToList();', "        List<long> result = new List<long>();\n\
    \        foreach (object obj in values) {\n            if (obj is long)\n    \
    \            result.Add((long)obj);\n            else if (obj is string)\n   \
    \             result.AddRange(FilterIntegers((List<object>)obj));\n          \
    \  else if (obj is List<object>) {\n                result.AddRange(FilterIntegers((List<object>)obj));\n\
    \            } else\n                result.Add(obj);\n        }\n        return\
    \ result;", "        // Sort values by type to avoid unnecessary overhead with\
    \ generics.\n        List<object> sorted = values.OrderBy(o => o.GetType()).ToList();\n\
    \        List<long> filtered = new List<long>();\n        long currentValue =\
    \ 0;\n        bool isInt = false;\n        bool isIntOrLong = false;\n\n     \
    \   // Process one object at a time.\n        foreach (object obj in sorted) {\n\
    \            isInt = obj.GetType() == typeof(int);\n            isIntOrLong =\
    \ obj.GetType() == typeof(Int64) || obj.GetType() == typeof(long);\n\n       \
    \     // Keep processing long values (i.e. numbers)\n            if (isIntOrLong)\
    \ {\n                if (isInt) {\n                    currentValue = (long)obj;\n\
    \                    filtered.Add(currentValue);\n                } else {\n \
    \                   // The value is either a number or an enumerable of numbers\n\
    \                    // so we need recurse into it if the value is a collection\n\
    \                    filtered.AddRange(FilterIntegers((List<object>)obj));\n \
    \               }\n            }\n        }\n        return filtered;", "    \
    \    List<long> newValues = new List<long>();\n        foreach (var value in values)\
    \ {\n            try {\n                if (value is long && value > 0)\n    \
    \                newValues.Add(value);\n            }\n            catch { }\n\
    \        }\n        return newValues;", "        List<long> list = new List<long>();\n\
    \        foreach (object value in values) {\n            if (value is long) {\n\
    \                list.Add((long)value);\n            }\n        }\n        return\
    \ list;", '        return values.Where(x => x is long).Select(x => (long)x).ToList();',
  "        List<long> result = new List<long>();\n        foreach (var value in values)\
    \ {\n            try {\n                long value = Convert.ToInt64(value);\n\
    \                result.Add(value);\n            } catch (Exception ex) {\n  \
    \              // Not an integer, keep this value\n            }\n        }\n\
    \        return result;", '        return values.Where(val => val is long).Select(val
    => (long)val).ToList();', "        if (values == null) return new List<long>();\n\
    \        List<long> result = new List<long>();\n        for (int i = 0; i < values.Count;\
    \ ++i) {\n            object value = values[i];\n            if (value is long)\
    \ {\n                result.Add((long)value);\n            } else if (value is\
    \ decimal) {\n                result.Add((long)((decimal)value).ToInt64());\n\
    \            } else if (value is int) {\n                result.Add((long)((int)value));\n\
    \            } else if (value is string) {\n                string s = (string)value;\n\
    \                if (s.StartsWith(\"0x\")) s = s.Substring(2);\n             \
    \   if (s.StartsWith(\"0+\")) s = s.Substring(2);\n                result.Add((long)Convert.ToInt64(s));\n\
    \            }\n        }\n        return result;", "        if (values.Count\
    \ < 1) return new List<long>();\n\n        if (values.Count == 1) {\n        \
    \    // Single value\n            object first = values[0];\n            if (!(first\
    \ is long)) return new List<long>();\n\n            return (new List<long>() {\
    \ (long)first });\n        }\n\n        // List of values\n        List<long>\
    \ integers = new List<long>();\n        long current = 1;\n        foreach (object\
    \ value in values) {\n            if (!(value is long)) {\n                Debug.WriteLine(string.Format(\"\
    Bad value {0}\", value));\n                continue;\n            }\n\n      \
    \      integers.add(current);\n            current *= (long)value;\n        }\n\
    \n        return integers;", "        List<long> result = new List<long>();\n\
    \        if (values.Count > 0) {\n            foreach (object item in values)\
    \ {\n                long iValue = 0L;\n                int intValue = 0;\n  \
    \              decimal dValue = 0;\n                if (item.GetType() == typeof(long))\
    \ {\n                    iValue = Convert.ToInt64(item);\n                } else\
    \ if (item.GetType() == typeof(int)) {\n                    intValue = (int)item;\n\
    \                } else if (item.GetType() == typeof(decimal)) {\n           \
    \         dValue = (decimal)item;\n                }\n                if (iValue\
    \ != 0) {\n                    result.Add(iValue);\n                }\n      \
    \          if (intValue != 0) {\n                    result.Add(intValue);\n \
    \               }\n                if (dValue != 0) {\n                    result.Add(dValue);\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   if (values == null) return null;\n        List<long> ret = new List<long>();\n\
    \        foreach (object val in values) {\n            if (val == null) return\
    \ ret;\n            if (val is long) ret.Add((long)val);\n        }\n        return\
    \ ret;", "        List<long> result = new List<long>();\n        foreach (object\
    \ val in values) {\n            int i;\n            bool isInt;\n            if\
    \ (val is int) {\n                isInt = (int)val == val;\n            } else\
    \ if (val is decimal) {\n                isInt = (decimal)val == (decimal)val;\n\
    \            } else if (val is double) {\n                isInt = (double)val\
    \ == (double)val;\n            } else {\n                isInt = false;\n    \
    \        }\n            if (isInt) {\n                result.Add((long)val);\n\
    \            }\n        }\n        return result;", "        List<long> res =\
    \ new List<long>();\n        foreach (object v in values) {\n            try {\n\
    \                res.Add((long)v);\n            } catch {\n                res.Add((long)0);\n\
    \            }\n        }\n        return res;", "        if (values.Count ==\
    \ 0) return new List<long>();\n        var result = new List<long>();\n      \
    \  foreach (var value in values) {\n            if (value is string) value = ((string)value).Trim();\n\
    \            if (value is long) {\n                if (value.CompareTo(long.MinValue)\
    \ > 0 || value.CompareTo(long.MaxValue) < 0) result.Add((long)value);\n      \
    \      } else if (value is int) {\n                if (value.CompareTo((int)(long)value)\
    \ > 0 || value.CompareTo((int)(long)value) < 0) result.Add((long)value);\n   \
    \         }\n        }\n        return result;", "        var result = new List<long>();\n\
    \        foreach (var value in values) {\n            if (value is int || value\
    \ is long) {\n                result.Add((long)value);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (object o in values) {\n            try{\n                result.Add((long)o);\n\
    \            }\n            catch(InvalidCastException)\n            {\n     \
    \           result.Add(0);\n            }\n        }\n        return result;",
  '        return values.Select(o => Convert.ToInt64(o.ToString())).Where(o => o !=
    null).ToList();', "        List<long> filtered = new List<long>();\n        foreach\
    \ (object value in values) {\n            long integer;\n            if (value\
    \ is int) {\n                integer = (int)value;\n            } else if (value\
    \ is long) {\n                integer = (long)value;\n            } else {\n \
    \               // The value is not an int/long.\n                throw new ArgumentException(\"\
    Values must be of type int/long.\");\n            }\n\n            // Do your\
    \ check here.\n            filtered.Add(integer);\n        }\n        return filtered;",
  "        List<long> results = new List<long>();\n        foreach (object item in\
    \ values) {\n            if (item is long) {\n                results.Add((long)item);\n\
    \            } else {\n                throw new ArgumentException(\"Invalid type\"\
    );\n            }\n        }\n        return results;", "        List<long> result\
    \ = new List<long>();\n        foreach (object v in values) {\n            if\
    \ (v is long) {\n                result.Add((long)v);\n            } else if(v\
    \ is string) {\n                long l = 0;\n                bool tryParse = long.TryParse(v.ToString(),\
    \ out l);\n                if (tryParse) {\n                    result.Add(l);\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   var result = new List<long>();\n        foreach (var v in values) {\n    \
    \        if (v is long) {\n                result.Add((long)v);\n            }\
    \ else if (v is double) {\n                result.Add((double)v);\n          \
    \  } else {\n                result.Add(0);\n            }\n        }\n      \
    \  return result;", '        return values.Where(x => x.GetType() == typeof(Int64)).Cast<Int64>().ToList();',
  "        var ret = new List<long>();\n        foreach(var v in values) {\n     \
    \       if(v is long) {\n                ret.Add((long)v);\n            } else\
    \ if(v is int) {\n                ret.Add((int)v);\n            } else {\n   \
    \             // Not an int\n            }\n        }\n        return ret;", " \
    \       List<long> filteredValues = new List<long>();\n\n        if (values !=\
    \ null) {\n            foreach (object val in values) {\n                Debug.Assert(val\
    \ is long);\n                filteredValues.Add((long)val);\n            }\n \
    \       }\n        return filteredValues;", "        var convertedValues = new\
    \ List<long>();\n        foreach(var value in values) {\n            if (value\
    \ is long) {\n                convertedValues.Add((long)value);\n            }\
    \ else if (value is int) {\n                convertedValues.Add((int)value);\n\
    \            } else if (value is int?) {\n                convertedValues.Add(((double)value).ToInt64());\n\
    \            } else if (value is double?) {\n                convertedValues.Add(((double)value).ToInt64());\n\
    \            }\n        }\n        return convertedValues;", '        return values.Where(i
    => (i as long?) != null).Select(i => (i as long?) ?? 0).ToList();', "        List<long>\
    \ result = new List<long>();\n\n        foreach (object value in values) {\n \
    \           long resultValue;\n\n            if (value is long) {\n          \
    \      resultValue = (long)value;\n            } else if (value is int) {\n  \
    \              resultValue = (long)value;\n            } else if (value is double)\
    \ {\n                resultValue = (long)value;\n            } else if (value\
    \ is decimal) {\n                resultValue = (long)value;\n            } else\
    \ if (value is int?) {\n                resultValue = (long)value;\n         \
    \   } else if (value is float?) {\n                resultValue = (long)value;\n\
    \            } else if (value is string) {\n                resultValue = Convert.ToInt64(value);\n\
    \            } else if (value is IList) {\n                IList<object> innerValues\
    \ = (IList<object>)value;\n                foreach (object innerValue in innerValues)\
    \ {\n                    long innerResultValue;\n                    if (innerValue\
    \ is long) {\n                        innerResultValue = (long)innerValue;\n \
    \                   } else if (innerValue is int) {\n                        innerResultValue\
    \ = (long)innerValue;\n                    } else if (innerValue is double) {\n\
    \                        innerResultValue = (long)innerValue;\n              \
    \      } else if (innerValue is decimal) {\n                        innerResultValue\
    \ = (long)innerValue;\n                    } else if (innerValue is int?) {\n\
    \                        innerResultValue = (long)innerValue;\n              \
    \      } else if (innerValue is float?) {\n                        innerResultValue\
    \ = (long)innerValue;\n                    } else if (innerValue is string) {\n\
    \                        innerResultValue = Convert.ToInt64(innerValue);\n   \
    \                 } else if (innerValue is IList) {\n                        IList<object>\
    \ innerInnerValues = (IList<object>)innerValue;\n                        foreach\
    \ (object innerInnerValue in innerInnerValues) {\n                           \
    \ long innerInnerResultValue;\n                            if (innerInnerValue\
    \ is long) {\n                                innerInnerResultValue = (long)innerInnerValue;\n\
    \                            } else if (innerInnerValue is int) {\n          \
    \                      innerInnerResultValue = (long)innerInnerValue;\n      \
    \                      } else if (innerInnerValue is double) {\n             \
    \                   innerInnerResultValue = (long)innerInnerValue;\n         \
    \                   } else if (innerInnerValue is decimal) {\n               \
    \                 innerInnerResultValue = (long)innerInnerValue;\n           \
    \                 } else if (innerInnerValue is int?) {\n                    \
    \            innerInnerResultValue = (long)innerInnerValue;\n                \
    \            } else if (innerInnerValue is float?) {\n                       \
    \         innerInnerResultValue = (long)innerInnerValue;\n                   \
    \         } else if (innerInnerValue is string) {\n                          \
    \      innerInnerResultValue = Convert.ToInt64(innerInnerValue);\n           \
    \                 } else if (innerInnerValue is IList) {\n                   \
    \             IList<object> innerInnerInnerValues = (IList<object>)innerInnerValue;\n\
    \                                foreach (object innerInnerInnerValue in innerInnerInnerValues)\
    \ {\n                                    long innerInnerInnerResultValue;\n  \
    \                                  if (innerInnerInnerValue is ", '        return
    values.Where(n => (long) n == n).Select(n => (long) n).ToList();', "        var\
    \ result = new List<long>();\n        if (values.Any()) {\n            foreach\
    \ (var value in values) {\n                if (value is int) {\n             \
    \       result.Add((long)value);\n                } else if (value is long) {\n\
    \                    result.Add((long)value);\n                } else if (value\
    \ is double) {\n                    result.Add((long)value);\n               \
    \ } else if (value is decimal) {\n                    result.Add((long)value);\n\
    \                } else if (value is char) {\n                    result.Add((long)value);\n\
    \                } else if (value is DateTime) {\n                    result.Add((long)value);\n\
    \                } else if (value is bool) {\n                    result.Add((long)value);\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<long> ret = new List<long>();\n        foreach(object value in values)\
    \ {\n            long val;\n            if(value is long) {\n                val\
    \ = ((long)value);\n            } else {\n                val = Long.Parse(value.ToString());\n\
    \            }\n            if(!ret.Contains(val)) {\n                ret.Add(val);\n\
    \            }\n        }\n        return ret;", '        return values.Where(v
    => v is long).Select(v => (long)v).ToList();', "        if (values == null ||\
    \ values.Count == 0)\n            return new List<long>();\n        var values\
    \ = values.OfType<object>().Select(x=>long.Parse(x)).Where(x=>x > 0);\n      \
    \  return values.Select(x => (long)x).ToList();", "        List<long> results\
    \ = new List<long>();\n        foreach (object value in values) {\n          \
    \  object objectValue;\n            if (value is long)\n                objectValue\
    \ = (long)value;\n            else if (value is int)\n                objectValue\
    \ = (int)value;\n            else\n                objectValue = value;\n    \
    \        long l = Convert.ToInt64(objectValue);\n            results.Add(l);\n\
    \        }\n        return results;", "        if (values == null) {\n       \
    \     return null;\n        }\n        return values.Where(value => value is long?).Select(value\
    \ => (long)value).ToList();", "        List<long> result = new List<long>();\n\
    \        foreach (object value in values) {\n            try {\n             \
    \   result.Add((long)Convert.ToInt64(value));\n            } catch (InvalidCastException)\
    \ {\n                result.Add((long)0);\n            }\n        }\n        return\
    \ result;", "        List<long> ret = new List<long>();\n        if (values ==\
    \ null || values.Count == 0) { return ret; }\n        foreach (var item in values)\
    \ {\n            bool bInt = true;\n            double dNum;\n            long\
    \ lNum;\n            Debug.Assert(item != null);\n            Debug.Assert(item.GetType()\
    \ != typeof(object));\n            if (item is string || item.GetType() == typeof(string))\
    \ {\n                var val = item as string;\n                if (string.IsNullOrEmpty(val))\
    \ { continue; }\n                try {\n                    dNum = Double.Parse(val);\n\
    \                    bInt = false;\n                } catch (Exception e) {\n\
    \                    continue;\n                }\n            }\n           \
    \ if (item is long) {\n                lNum = item as long;\n            } else\
    \ if (item is double) {\n                dNum = item as double;\n            }\
    \ else {\n                continue;\n            }\n            if (bInt) {\n\
    \                ret.Add(lNum);\n            }\n        }\n        return ret;",
  "        var result = new List<long>();\n        foreach(var value in values) {\n\
    \            if(value is long integer) result.Add((long)value);\n            else\
    \ if(value is double) result.Add((long)Double.Parse(value.ToString()));\n    \
    \        else if(value is int) result.Add((long)value);\n            else if(value\
    \ is string) result.Add(long.Parse(value.ToString()));\n            else if(value\
    \ is object[]) result = FilterIntegers((List<object>)value);\n            else\
    \ throw new Exception(\"Cannot parse all values!\");\n        }\n        return\
    \ result;", "        return values.Where(x => x is long)\n                   \
    \ .Select(x => (long)x)\n                    .ToList();", "        List<long>\
    \ list = new List<long>();\n        foreach(object value in values) {\n      \
    \      if(value is int) {\n                list.Add((long)value);\n          \
    \  } else if(value is string) {\n                long i;\n                if(long.TryParse(value.ToString(),\
    \ out i)) {\n                    list.Add(i);\n                }\n           \
    \ }\n        }\n        return list;", "        var convertedValues = new List<long>();\n\
    \        foreach (object value in values) {\n            if (value is long) {\n\
    \                convertedValues.Add((long)value);\n            }\n        }\n\
    \        return convertedValues;", "        if (values == null)\n            return\
    \ null;\n        if (values.Count == 0)\n            return new List<long>();\n\
    \        if (values.Count < 1)\n            return null;\n        List<long> result\
    \ = new List<long>();\n        foreach (object value in values) {\n          \
    \  if (value is long)\n                result.Add((long)value);\n            else\
    \ if (value is int) {\n                result.Add((int)value);\n            }\n\
    \        }\n        return result;", "        List<long> ret = new List<long>();\n\
    \        foreach (object item in values) {\n            Debug.WriteLine(\"Item=\"\
    \ + item + \", Type=\" + item.GetType().FullName);\n            if (item is long)\n\
    \                ret.Add((long)item);\n        }\n        return ret;", "    \
    \    List<long> filtered = new List<long>();\n        foreach (object value in\
    \ values) {\n            if (value is long) {\n                filtered.Add((long)value);\n\
    \            } else {\n                filtered.Add(0);\n            }\n     \
    \   }\n        return filtered;", "        List<long> result = new List<long>();\n\
    \        if (values != null) {\n            foreach (object value in values) {\n\
    \                bool isInt = value is int ? true : false;\n                if\
    \ (isInt) {\n                    result.Add((long)value);\n                }\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        foreach (var value in values) {\n            var value\
    \ = Convert.ToInt64(value);\n            result.Add(value);\n        }\n     \
    \   return result;", '        return values.Where(x => x.GetType() == typeof(BigInteger)).Select(x
    => (BigInteger)x).ToList();', "        var result = new List<long>();\n      \
    \  foreach (var value in values) {\n            long i;\n            if (value\
    \ is int || value is long) {\n                i = Convert.ToInt64(value);\n  \
    \          }\n            else {\n                i = Convert.ToInt64(value, CultureInfo.InvariantCulture);\n\
    \            }\n            result.Add(i);\n        }\n        return result;",
  "        var result = new List<long>();\n        foreach (var item in values) {\n\
    \            if (item is long)\n                result.Add((long)item);\n    \
    \        else if (item is string)\n                result.Add((long)Convert.ToInt64(item));\n\
    \            else\n                result.Add((long)0L);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (object\
    \ o in values) {\n            long value;\n            if (o as long != null)\n\
    \                value = o as long;\n            else if (o as int != null)\n\
    \                value = o as int;\n            else if (o as short != null)\n\
    \                value = o as short;\n            else if (o as float != null)\n\
    \                value = o as float;\n            else if (o as double != null)\n\
    \                value = o as double;\n            else\n                continue;\n\
    \            if (value == 0)\n                continue;\n            result.Add(value);\n\
    \        }\n        return result;", "        // Make a list of all integers from\
    \ all values\n        var intValues = values.Select(o => o as int?).Where(o =>\
    \ o.HasValue).Select(o => o.Value).ToList();\n        // If there's only one value,\
    \ just return that value, otherwise make a list of\n        // lists of values\n\
    \        return intValues.Count == 1 ? intValues[0] : intValues;", '        return
    values.Where(x => !x.GetType().IsPrimitive && x.GetType().IsAssignableFrom(typeof(long))
    == false).Select(xx => (long)xx).ToList();', '        return values.Cast<object>().Select(v
    => Convert.ToInt64(v)).ToList();', "        List<long> result = new List<long>();\n\
    \n        for (int i = 0; i < values.Count; i++) {\n            if (values[i].GetType().IsNumeric)\
    \ {\n                result.Add((long)values[i]);\n            }\n        }\n\
    \        return result;", "        List<long> valueList = new List<long>();\n\
    \        foreach (var value in values) {\n            if (value is int) {\n  \
    \              valueList.Add((long)value);\n            }\n        }\n       \
    \ return valueList;", "        List<long> ret = new List<long>();\n        foreach\
    \ (object val in values) {\n            long tmp = 0;\n            if (val is\
    \ long)\n                tmp = (long)val;\n            else if (val is int)\n\
    \                tmp = (int)val;\n            else // string\n               \
    \ tmp = 0;\n            ret.Add(tmp);\n        }\n        return ret;", "    \
    \    if (values.Count < 1) return values;\n\n        List<long> ints = new List<long>();\n\
    \        foreach (object val in values) {\n            if (val is long)\n    \
    \            ints.Add((long)val);\n            else if (val is BigInteger)\n \
    \               ints.Add((BigInteger)val);\n            else if (val is BigDecimal)\n\
    \                ints.Add((BigDecimal)val);\n            else if (val is Decimal)\n\
    \                ints.Add((Decimal)val);\n            else if (val is int)\n \
    \               ints.Add((int)val);\n            else if (val is short)\n    \
    \            ints.Add((short)val);\n            else if (val is byte)\n      \
    \          ints.Add((byte)val);\n            else if (val is sbyte)\n        \
    \        ints.Add((sbyte)val);\n            else if (val is short)\n         \
    \       ints.Add((short)val);\n            else if (val is float)\n          \
    \      ints.Add((float)val);\n            else if (val is decimal)\n         \
    \       ints.Add((decimal)val);\n            else if (val is double)\n       \
    \         ints.Add((double)val);\n            else if (val is bool)\n        \
    \        ints.Add((bool)val != false);\n            else if (val is string)\n\
    \                ints.Add((string)val);\n            else\n                throw\
    \ new ArgumentException(\"Cannot cast to long\", val.GetType());\n        }\n\
    \        return ints;", "        var filtered = new List<long>();\n        foreach\
    \ (var value in values) {\n            if (value is long) filtered.Add((long)value);\n\
    \            if (value is int) filtered.Add((int)value);\n            if (value\
    \ is double) filtered.Add((double)value);\n            if (value is string) filtered.Add((string)value);\n\
    \            if (value is IComparable) filtered.Add((IComparable)value);\n   \
    \     }\n        return filtered;", "        List<long> result = new List<long>();\n\
    \        foreach (var value in values) {\n            try {\n                long\
    \ num;\n                if (!long.TryParse(Convert.ToString(value), out num))\
    \ {\n                    continue;\n                }\n                result.Add(num);\n\
    \            } catch (Exception e) {\n                // Do nothing, just move\
    \ on\n            }\n        }\n        return result;", "        if (values ==\
    \ null)\n            return new List<long>();\n        List<long> filtered = new\
    \ List<long>();\n        foreach (object o in values) {\n            if (o is\
    \ long)\n                filtered.Add((long)o);\n            else if (o is string)\n\
    \                filtered.Add((long)Long.Parse((string)o));\n        }\n     \
    \   return filtered;", "        var result = new List<long>();\n        foreach(var\
    \ item in values) {\n            if(item is long) {\n                result.Add((long)item);\n\
    \            } else {\n                result.Add((long)item);\n            }\n\
    \        }\n        return result;", "        var filteredValues = new List<long>();\n\
    \n        foreach (var value in values) {\n            if (value is int) {\n \
    \               filteredValues.Add((long)value);\n            }\n        }\n\n\
    \        return filteredValues;", "        List<long> returnValue = new List<long>();\n\
    \        foreach (object value in values) {\n            long valueAsLong;\n \
    \           if (value is long) {\n                valueAsLong = (long)value;\n\
    \            } else {\n                valueAsLong = Convert.ToInt64(value);\n\
    \            }\n            if (valueAsLong == 0) {\n                continue;\n\
    \            }\n            returnValue.Add(valueAsLong);\n        }\n       \
    \ return returnValue;", '        return values.Where(v => v is long).Select(v
    => (long)v).ToList();', "        var list = new List<long>();\n        foreach(var\
    \ value in values) {\n            if(!IsInteger(value)) {\n                list.Add(new\
    \ InvalidOperationException($\"{value.GetType().Name} is not integer\"));\n  \
    \              continue;\n            }\n            list.Add(Convert.ToInt64(value));\n\
    \        }\n        return list;", "        List<long> result = new List<long>();\n\
    \        foreach (object value in values) {\n            bool isInteger = value\
    \ is long l;\n            if (isInteger) {\n                result.Add((long)value);\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n\n        foreach (var value in values) {\n            long value;\n\
    \n            if (value is long) {\n                value = ((long)value);\n \
    \           } else if (value is int) {\n                value = ((int)value);\n\
    \            } else if (value is double) {\n                value = ((double)value);\n\
    \            } else {\n                continue;\n            }\n\n          \
    \  result.Add(value);\n        }\n\n        return result;", "        List<long>\
    \ result = new List<long>();\n\n        foreach (object obj in values) {\n   \
    \         if (obj is int)\n                result.Add((long)obj);\n        }\n\
    \        return result;", "        List<long> filteredValues = new List<long>();\n\
    \        if (values == null) throw new ArgumentNullException(nameof(values));\n\
    \        foreach (object value in values) {\n            if (value is int)\n \
    \               filteredValues.Add((long)value);\n            else if (value is\
    \ long)\n                filteredValues.Add((long)value);\n            else\n\
    \                filteredValues.Add((long)Convert.ToInt64(value));\n        }\n\
    \        return filteredValues;", "        var result = new List<long>();\n  \
    \      foreach (object o in values) {\n            if (o is long) result.Add((long)o);\n\
    \            else if (o is int) result.Add((int)o);\n            else if (o is\
    \ string) result.Add(o.ToString());\n            else if (!Convert.IsDBNull(o))\
    \ throw new InvalidOperationException(\"Invalid object\");\n            else result.Add(0);\n\
    \        }\n        return result;", "        if (values == null) return null;\n\
    \        var filtered = new List<long>();\n        foreach (var item in values)\
    \ {\n            if (item is long) {\n                filtered.Add((long)item);\n\
    \            }\n        }\n        return filtered;", "        Debug.WriteLine(string.Format(\"\
    Filter {0}\", values));\n        List<long> result = new List<long>();\n     \
    \   foreach (object value in values) {\n            long number;\n           \
    \ try {\n                number = Convert.ToInt64(value);\n            } catch(FormatException\
    \ ex) {\n                continue;\n            }\n            result.Add(number);\n\
    \        }\n        Debug.WriteLine(string.Format(\"Filter {0} -> {1}\", values,\
    \ result));\n        return result;", '        return values.Select(value => (long)Math.Round(value)).ToList();',
  "        if (values.Count == 0) return new List<long>();\n        return values.Cast<object>()\n\
    \                    .Where(v => v is long)\n                    .Cast<long>()\n\
    \                    .ToList();", "        var result = new List<long>();\n  \
    \      foreach (var value in values) {\n            if (value is long) {\n   \
    \             result.Add((long)value);\n            } else if (value is int) {\n\
    \                result.Add((int)value);\n            } else {\n             \
    \   result.Add(0);\n            }\n        }\n        return result;", '        return
    values.Where(x => Convert.ToInt32(x)).ToList();', "        if (values == null)\n\
    \            return null;\n        List<long> result = new List<long>();\n   \
    \     foreach (object value in values) {\n            bool ok;\n            if\
    \ (value.GetType() == typeof(long)) {\n                ok = true;\n          \
    \  }\n            else if (value.GetType() == typeof(int)) {\n               \
    \ ok = true;\n            }\n            else if (value.GetType() == typeof(float))\
    \ {\n                ok = true;\n            }\n            else if (value.GetType()\
    \ == typeof(string)) {\n                ok = value.ToString() == value.ToString().ToLower();\n\
    \            }\n            else {\n                ok = false;\n            }\n\
    \            if (ok)\n                result.Add((long)value);\n        }\n  \
    \      return result;", "        if (values == null)\n            throw new ArgumentNullException(\"\
    values\");\n        var list = new List<long>();\n        foreach (var value in\
    \ values) {\n            try {\n                long value;\n                if\
    \ (long.TryParse(Convert.ToString(value), out value))\n                    list.Add(value);\n\
    \            } catch {\n            }\n        }\n        return list;", "   \
    \     if (values == null) {\n            return new List<long>();\n        }\n\
    \        var filteredValues = new List<long>();\n        foreach (var v in values)\
    \ {\n            if (v == null || v is long) {\n                filteredValues.Add((long)v);\n\
    \            } else {\n                filteredValues.AddRange(FilterIntegers(v\
    \ as List<object>));\n            }\n        }\n        return filteredValues;",
  "        if (values.Count == 0) {\n            return new List<long>();\n      \
    \  }\n\n        if (values.Count == 1) {\n            return new List<long>((List<long>)values[0]);\n\
    \        }\n\n        foreach (object item in values) {\n            bool isInteger\
    \ = item is long;\n            if (!isInteger) {\n                continue;\n\
    \            }\n\n            if (isInteger && ((long)item) < 0) {\n         \
    \       Debug.WriteLine(\"WARNING: negative long value found in list of \" + values.Count.ToString()\
    \ + \"; converting to negative int\");\n                item *= -1;\n        \
    \    }\n\n            int intValue = item as int;\n            if (intValue >=\
    \ 0) {\n                Debug.WriteLine(\"WARNING: non-negative int value found\
    \ in list of \" + values.Count.ToString() + \"; converting to positive long\"\
    );\n                item = (long)intValue;\n            }\n\n            long\
    \ longValue = item as long;\n            if (longValue >= 0) {\n             \
    \   Debug.WriteLine(\"WARNING: non-negative long value found in list of \" + values.Count.ToString()\
    \ + \"; not converting\");\n            }\n        }\n\n        return new List<long>(values);",
  "        List<long> filtered = new List<long>();\n        foreach (object o in values)\
    \ {\n            long val;\n            if (long.TryParse(o.ToString(), out val))\
    \ {\n                filtered.Add(val);\n            }\n        }\n        return\
    \ filtered;", "        var returnValue = new List<long>();\n        foreach(var\
    \ item in values) {\n            if(item is long) {\n                returnValue.Add((long)item);\n\
    \            } else {\n                returnValue.Add((long)Math.Round(Convert.ToDouble(item)));\n\
    \            }\n        }\n        return returnValue;", '        return values.Where(v
    => v is long).Select(v => (long)v).ToList();', "        List<long> res = new List<long>();\n\
    \        foreach (object val in values) {\n            long l = (long)val;\n \
    \           if (l != val)\n                throw new Exception(\"Non-integer value\
    \ \" + val + \" cannot be filtered!\");\n            if (l > int.MaxValue || l\
    \ < int.MinValue)\n                throw new Exception(\"Non-integer value \"\
    \ + val + \" cannot be filtered!\");\n            res.Add(l);\n        }\n   \
    \     return res;", "        // Find all numbers except null\n        var numbers\
    \ = values.Where(x => x is long).ToList();\n        // Create empty list of longs\n\
    \        var longs = new List<long>();\n        foreach (var item in numbers)\n\
    \        {\n            longs.Add(item);\n        }\n        return longs;", " \
    \       if (values == null) {\n            return null;\n        }\n\n       \
    \ // Convert each object into a long\n        var integers = values.Select(v =>\
    \ (long) Convert.ChangeType(v, typeof(object))).ToList();\n\n        // Filter\
    \ out any non-integers\n        return integers.Where(i => i >= 0L).ToList();",
  "        List<long> result = new List<long>();\n        foreach (object value in\
    \ values) {\n            if (value is int || value is long)\n                result.Add((int)value);\n\
    \        }\n        return result;", '        return values.Select(v => (long)
    v).ToList();', "        if (values == null || values.Count == 0) return null;\n\
    \        List<long> result = new List<long>();\n        foreach (var value in\
    \ values) {\n            if (value is long)\n                result.Add((long)value);\n\
    \            else if (value is int) {\n                result.Add(Convert.ToInt64(value));\n\
    \            } else if (value is double) {\n                result.Add(Convert.ToInt64((double)value));\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (object value in values) {\n          \
    \  if (value is long) {\n                result.Add((long)value);\n          \
    \  }\n        }\n        return result;", "        if (values.Count == 0) return\
    \ values;\n        if (values.Count == 1) return new List<long>(values);\n   \
    \     List<long> results = new List<long>();\n        // Get all numbers from\
    \ first item and apply filter to each item\n        List<long> allNumbers = new\
    \ List<long>(values.Cast<long>().ToList());\n        foreach (object value in\
    \ values) {\n            List<long> numbersOfType = new List<long>();\n      \
    \      bool isNumber = int.TryParse(value.ToString(), out int parsedInt);\n  \
    \          if (isNumber) numbersOfType.Add((long)parsedInt);\n            else\
    \ if (value is List<object>) foreach (object innerValue in (List<object>)value)\
    \ {\n                if (innerValue is long) numbersOfType.Add((long)innerValue);\n\
    \            }\n            else if (value is string) foreach (string innerValue\
    \ in (List<string>)value) {\n                if (long.TryParse(innerValue, out\
    \ long parsedInt)) numbersOfType.Add((long)parsedInt);\n            }\n      \
    \      else if (value is IList) {\n                IList<object> list = (IList<object>)value;\n\
    \                foreach (object innerValue in list) {\n                    if\
    \ (innerValue is long) numbersOfType.Add((long)innerValue);\n                }\n\
    \            }\n            if (numbersOfType.Count > 0) {\n                allNumbers.AddRange(numbersOfType);\n\
    \            }\n        }\n        results.AddRange(allNumbers);\n        return\
    \ results;", "        var result = new List<long>();\n        values.ForEach(value\
    \ => {\n            if (value is int) {\n                result.Add((long)value);\n\
    \            }\n        });\n        return result;", "        List<long> filteredValues\
    \ = new List<long>();\n        foreach (object item in values) {\n           \
    \ if (item is long) {\n                filteredValues.Add((long)item);\n     \
    \       } else {\n                filteredValues.Add((long)Convert.ToInt64(item));\n\
    \            }\n        }\n        return filteredValues;", "        var result\
    \ = new List<long>();\n        foreach (var item in values) {\n            if\
    \ (item is int) {\n                result.Add((int)item);\n            }\n   \
    \     }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (object value in values) {\n            long value;\n       \
    \     if (long.TryParse(value, out value)) {\n                result.Add(value);\n\
    \            }\n        }\n        return result;", '        return values.Select(x
    => (long)x).Where(x => Math.Abs((int)x) == x).ToList();', "        List<long>\
    \ result = new List<long>();\n        foreach(var value in values) {\n       \
    \     try\n            {\n                long tmp = (long)value;\n          \
    \      result.Add(tmp);\n            }\n            catch (InvalidCastException)\n\
    \            {\n                result.Add(0);\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  if (null == values) return result;\n        foreach (object value in values)\
    \ {\n            if (value is long)\n                result.Add((long)value);\n\
    \            else if (value is int) {\n                if (value < int.MinValue\
    \ || value > int.MaxValue)\n                    continue;\n                result.Add((long)value);\n\
    \            } else {\n                if (value is string)\n                \
    \    if (!string.IsNullOrEmpty(value))\n                        result.Add(long.Parse(value));\n\
    \                else\n                    result.Add((long)value);\n        \
    \    }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (values != null && values.Count > 0) {\n            foreach (object\
    \ obj in values) {\n                if (obj is long) result.Add((long) obj);\n\
    \                else if (obj is string) result.Add((long) long.Parse((string)obj));\n\
    \                else if (obj is long?) result.Add((long)obj?? 0);\n         \
    \       else if (obj is string?) result.Add((long)long.Parse((string)obj?? \"\"\
    ));\n                else if (obj is IEnumerable) result.AddRange(obj.SelectMany(FilterIntegers));\n\
    \                else throw new InvalidOperationException(\"Unsupported value\"\
    );\n            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n\n        values.ForEach(v => {\n            try {\n        \
    \        if (v is IComparable) {\n                    var vAsLong = v as? IComparable;\n\
    \                    if (vAsLong != null && vAsLong.CompareTo(0) >= 0)\n     \
    \                   result.Add((long)v);\n                }\n                else\n\
    \                    result.Add((long)v);\n            }\n            catch (Exception)\
    \ {\n                result.Add((long)0);\n            }\n        });\n\n    \
    \    return result;", "        var result = new List<long>();\n\n        foreach\
    \ (var value in values) {\n            try {\n                result.Add((long)value);\n\
    \            } catch (InvalidCastException) {\n                // Do nothing -\
    \ not an integer\n            }\n        }\n\n        return result;", "     \
    \   List<long> ret = new List<long>();\n        foreach(object v in values) {\n\
    \            try {\n                ret.Add((long)v);\n            } catch (InvalidCastException\
    \ exception) {\n            }\n        }\n        return ret;", "        if (values\
    \ == null || values.Count == 0) return values;\n\n        var l = new List<long>();\n\
    \        foreach (var value in values) {\n            if (value is long) {\n \
    \               l.Add((long)value);\n            } else if (value is string) {\n\
    \                l.Add((long)(Int64.Parse((string)value)));\n            } else\
    \ if (value is double) {\n                l.Add((long)(Int64.Parse((string)value)));\n\
    \            } else {\n                // other types are not supported\n    \
    \            Debug.Fail(\"Unsupported type \" + value.GetType().FullName);\n \
    \           }\n        }\n\n        return l;", "        List<long> ret = new\
    \ List<long>();\n        foreach (object val in values) {\n            ret.Add((long)val);\n\
    \        }\n        return ret;", '        return values.Where(x => x is long).Cast<long>().ToList();',
  "        List<long> result = new List<long>();\n        foreach (object value in\
    \ values) {\n            long val = 0;\n            try {\n                val\
    \ = (long)Convert.ChangeType(value, typeof(long));\n            } catch (Exception)\
    \ {\n            }\n            if (val > 0) {\n                result.Add(val);\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        foreach (var value in values) {\n            if (value\
    \ is int) {\n                result.Add((long)value);\n            }\n       \
    \ }\n        return result;", "        List<long> out = new List<long>();\n  \
    \      foreach (object v in values) {\n            if (v is int) {\n         \
    \       out.Add((long)v);\n            }\n        }\n        return out;", " \
    \       List<long> result = new List<long>();\n        foreach (object value in\
    \ values) {\n            if (value is int || value is long || value is BigInteger\
    \ || value is decimal) {\n                result.Add((long)value);\n         \
    \   }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (var item in values) {\n            if (item is int) {\n    \
    \            result.Add((long)item);\n            }\n        }\n        return\
    \ result;", "        // Get integer type\n        var iType = values.Select(o\
    \ => o.GetType().GetInterfaces().First(i => i.IsGenericType && i.GetGenericTypeDefinition()\
    \ == typeof(IEnumerable<>))).First();\n        // Get integer value type\n   \
    \     var iValue = values.Select(o => o.GetType().GetInterfaces().First(i => i.IsGenericType\
    \ && i.GetGenericTypeDefinition() == typeof(IEnumerable<>)\n                &&\
    \ i.GetGenericArguments().First() == iType)).First();\n        // Get integer\
    \ value type\n        var iResult = values.Select(o => o.GetType().GetInterfaces().First(i\
    \ => i.IsGenericType && i.GetGenericTypeDefinition() == typeof(IEnumerable<>)\n\
    \                && i.GetGenericArguments().First() == iValue)).First();\n   \
    \     // Filter list of integers from list of objects\n        return values.Where(o\
    \ => o.GetType() == iResult).Select(o => (long)o).ToList();", "        var integers\
    \ = new List<long>();\n        foreach (var value in values) {\n            try\
    \ {\n                int tempValue = (int)value;\n                integers.Add(tempValue);\n\
    \            } catch {\n                integers.Add((long)value);\n         \
    \   }\n        }\n        return integers;", "        return values.Where(x =>\
    \ x is long)\n            .Select(x => (long)x).ToList();", "        if (values\
    \ == null)\n            return null;\n        if (values.Count != 0)\n       \
    \     return values.Select(o => o.GetType().IsValueType && o.GetType().IsNumeric).Where(o\
    \ => o).Select(o => (long)o).ToList();\n        return null;", "        if (values\
    \ == null)\n            return null;\n        List<long> result = new List<long>();\n\
    \        foreach (object value in values) {\n            if (value == null ||\
    \ value is long) {\n                result.Add((long) value);\n            }\n\
    \            else if (value is string && value.Length == 1) {\n              \
    \  result.Add((long) Char.GetNumericValue(value[0]));\n            }\n       \
    \ }\n        return result;", '        return values.Cast<long>().ToList();',
  '        return values.Where(x => x is long).Select(x => (long)x).ToList();', " \
    \       if (values.Count == 0) {\n            return new List<long>();\n     \
    \   }\n        var valueSet = values.OfType<long>().ToArray();\n        bool isSet\
    \ = valueSet.Length > 0;\n        if (!isSet) {\n            return values;\n\
    \        }\n        var filtered = new List<long>();\n        for (var i = 0;\
    \ i < values.Count; ++i) {\n            var value = values[i];\n            bool\
    \ ok = value >= 0L;\n            if (!ok) {\n                filtered[i] = value;\n\
    \            } else {\n                filtered.Add((long)value);\n          \
    \  }\n        }\n        return filtered;", "        return values.Where(o =>\
    \ o != null && o.GetType().IsGenericType &&\n                              o.GetType().GetGenericTypeDefinition()\
    \ == typeof(IComparable<>) &&\n                              o.GetType().GetGenericArguments()[0].IsInteger()).Select(o\
    \ => ((IComparable<long>)o)).Cast<long>().ToList();", "        if (values == null\
    \ || values.Count == 0)\n            return values;\n        return values.Cast<object>().Where(o\
    \ => o is long).ToList();", "        List<long> result = new List<long>();\n \
    \       foreach (object value in values) {\n            if (value is long || value\
    \ is int) {\n                result.Add((long) value);\n            } else if\
    \ (value is string) {\n                result.Add((long) Convert.ToInt64(value));\n\
    \            } else if (value is IEnumerable) {\n                foreach (object\
    \ item in (IEnumerable) value) {\n                    if (!(item is long || item\
    \ is int)) {\n                        result.Add((long) item);\n             \
    \       }\n                }\n            }\n        }\n        return result;",
  "        var result = new List<long>();\n        foreach (var value in values) {\n\
    \            if (value is long) {\n                result.Add((long)value);\n\
    \            } else if (value is int) {\n                result.Add((int)value);\n\
    \            } else if (value is double) {\n                result.Add((double)value);\n\
    \            } else {\n                result.Add(long.Parse(value.ToString()));\n\
    \            }\n        }\n        return result;", '        return values.Where(value
    => value is long).Cast<long>().ToList();', "        if (values.Count < 1)\n  \
    \          throw new ArgumentException(\"Must provide a list with at least one\
    \ value\");\n        List<long> results = new List<long>();\n        foreach (object\
    \ value in values) {\n            try {\n                long val = Convert.ToInt64(value);\n\
    \                results.Add(val);\n            } catch (FormatException) {\n\
    \            }\n        }\n        return results;", '        return values.Where(x
    => x is long).Cast<long>().ToList();', "        if (values.Count == 0) {\n   \
    \         return new List<long>();\n        }\n        if (values.Count > 1) {\n\
    \            throw new ArgumentException(\"List contains multiple objects\");\n\
    \        }\n\n        foreach (object value in values) {\n            if (value\
    \ is int) {\n                values.Remove(value);\n                return new\
    \ List<long>(values);\n            }\n        }\n        throw new ArgumentException(\"\
    List contains values other than integers\");", "        var result = new List<long>();\n\
    \        foreach (var value in values) {\n            object o = value;\n    \
    \        try {\n                if (o is long) {\n                    result.Add((long)o);\n\
    \                }\n            }\n            catch (Exception ex) {\n      \
    \          Console.WriteLine(\"{0} - {1}\", value, ex);\n            }\n     \
    \   }\n        return result;", "        var result = new List<long>();\n    \
    \    foreach (var value in values) {\n            if (value is IEnumerable)\n\
    \                result.AddRange(FilterIntegers((List<object>)value));\n     \
    \       else if (value is long)\n                result.Add((long)value);\n  \
    \          else\n                result.Add((long)0);\n        }\n        return\
    \ result;", "        // TODO: optimize performance (use a dictionary for faster\
    \ lookup, use a custom comparer, use binary search, ...)\n        List<long> result\
    \ = new List<long>();\n        foreach (object v in values) {\n            if\
    \ (v is int || v is long)\n                result.Add((v as int) ?? 0);\n    \
    \    }\n        return result;", '        return values.OfType<object>().Select(o
    => (long) o).ToList();', "        var newValues = new List<long>();\n        foreach\
    \ (var value in values) {\n            if (value is long) {\n                newValues.Add((long)value);\n\
    \            } else {\n                // do something\n            }\n      \
    \  }\n        return newValues;", "        // Filter only int values\n       \
    \ List<long> result = new List<long>();\n        foreach (object value in values)\
    \ {\n            object result = System.Convert.ChangeType(value, typeof(long));\n\
    \            if (result is int)\n                result.Add((long)result);\n \
    \       }\n        return result;", '        return values.Where(value => value
    is long).Select(value => (long)value).ToList();', "        var newValues = new\
    \ List<long>();\n        foreach (var val in values) {\n            try {\n  \
    \              newValues.Add(Convert.ToInt64(val));\n            } catch (Exception)\
    \ {\n                continue;\n            }\n        }\n        return newValues;",
  "        // Use generic type constraints, because we don't know the types involved\n\
    \        var filteredValues = new List<long>();\n        foreach (var item in\
    \ values) {\n            if (item is long) {\n                filteredValues.Add((long)item);\n\
    \            } else if (item is List<object>) {\n                filteredValues.AddRange(FilterIntegers((List<object>)item));\n\
    \            } else {\n                filteredValues.Add(Convert.ToInt64(item));\n\
    \            }\n        }\n        return filteredValues;", "        var result\
    \ = new List<long>();\n        foreach (var value in values) {\n            if\
    \ (value is int) {\n                result.Add((long)value);\n            }\n\
    \            else if (value is string) {\n                var stringValue = (string)value;\n\
    \                if (int.TryParse(stringValue, out int intValue)) {\n        \
    \            result.Add((long)intValue);\n                }\n            }\n \
    \           else {\n                throw new Exception(\"Unknown type\");\n \
    \           }\n        }\n        return result;", "        // For each value\
    \ in the list of values\n        foreach (object value in values) {\n        \
    \    // If the value is an integer, add it to the list of integers\n         \
    \   if (value is int) {\n                values.Add((int)value);\n           \
    \ }\n        }\n        // Return the list of integers\n        return values;",
  "        List<long> result = new List<long>();\n\n        foreach (var value in\
    \ values) {\n            try {\n                result.Add((long)value);\n   \
    \         } catch { }\n        }\n\n        return result;", "        if (values.Count\
    \ < 1) return new List<long>();\n        var longs = new List<long>();\n     \
    \   foreach (object val in values) {\n            long l = 0;\n            try\n\
    \            {\n                l = Convert.ToInt64(val);\n            }\n   \
    \         catch (Exception)\n            {\n                try\n            \
    \    {\n                    l = Convert.ToInt32(val);\n                }\n   \
    \             catch (Exception)\n                {\n                    try\n\
    \                    {\n                        l = Convert.ToDouble(val);\n \
    \                   }\n                    catch (Exception)\n               \
    \     {\n                        try\n                        {\n            \
    \                l = long.Parse(val.ToString());\n                        }\n\
    \                        catch (Exception)\n                        {\n      \
    \                      longs.Add(0L);\n                            continue;\n\
    \                        }\n                    }\n                }\n       \
    \     }\n            longs.Add(l);\n        }\n        return longs;", '        return
    values.Where(x => x is int).Select(x => (long)x).ToList();', "        List<long>\
    \ ints = new List<long>();\n        foreach(object value in values) {\n      \
    \      long temp;\n            bool success = long.TryParse(value.ToString(),\
    \ out temp);\n            if (success)\n                ints.Add(temp);\n    \
    \    }\n        return ints;", '        return values.Select(o => ((long)o)).ToList();',
  '        return values.OfType<long>().ToList();', "        List<long> result = new\
    \ List<long>();\n        foreach (object value in values) {\n            long\
    \ valueAsLong = Convert.ToInt64(value);\n            if (valueAsLong == valueAsLong)\n\
    \                result.Add(valueAsLong);\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
