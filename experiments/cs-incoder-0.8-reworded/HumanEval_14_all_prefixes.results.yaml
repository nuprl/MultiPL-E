language: cs
name: HumanEval_14_all_prefixes
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        return AllPrefixes(str, str.Length);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt1kqb87x.cs(13,16): error CS1501: No overload for method ''AllPrefixes''
    takes 2 arguments

    '
  timestamp: 1659977371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        return AllPrefixes(str, 0);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvvx3ilpw.cs(13,16): error CS1501: No overload for method ''AllPrefixes''
    takes 2 arguments

    '
  timestamp: 1659977371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        // Find the smallest prefix\
    \ of all input strings whose length is equal to 0.\n        List<string> result\
    \ = new List<string>();\n        int minLength = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str.Length - i - 1 == minLength) {\n \
    \               result.Add(str.Substring(0, i));\n            } else if (str.Length\
    \ - i - 1 < minLength) {\n                minLength = str.Length - i - 1;\n  \
    \          }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d240eb6da3a49709f9cb0b94efc23db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d240eb6da3a49709f9cb0b94efc23db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        Debug.Assert(str.Length > 0);\n\
    \        List<string> result = new List<string>();\n        Stack<string> stack\
    \ = new Stack<string>();\n        foreach (char c in str) {\n            Debug.Assert(!stack.Contains(c));\n\
    \            stack.Add(c);\n        }\n        while (!stack.IsEmpty()) {\n  \
    \          string str = stack.Pop();\n            result.Add(str);\n         \
    \   foreach (char c in str) {\n                Debug.Assert(!stack.Contains(c));\n\
    \                stack.Add(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0kj2lnua.cs(17,42): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmp0kj2lnua.cs(18,19): error CS1061: ''Stack<string>'' does not contain a
    definition for ''Add'' and no accessible extension method ''Add'' accepting a
    first argument of type ''Stack<string>'' could be found (are you missing a using
    directive or an assembly reference?)

    /tmp/tmp0kj2lnua.cs(20,23): error CS1061: ''Stack<string>'' does not contain a
    definition for ''IsEmpty'' and no accessible extension method ''IsEmpty'' accepting
    a first argument of type ''Stack<string>'' could be found (are you missing a using
    directive or an assembly reference?)

    /tmp/tmp0kj2lnua.cs(21,20): error CS0136: A local or parameter named ''str'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp0kj2lnua.cs(24,46): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmp0kj2lnua.cs(25,23): error CS1061: ''Stack<string>'' does not contain a
    definition for ''Add'' and no accessible extension method ''Add'' accepting a
    first argument of type ''Stack<string>'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1659977371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (string.IsNullOrEmpty(str))\n\
    \            return new List<string>(new string[0]);\n\n        List<string> prefix\
    \ = new List<string>();\n        string temp = str;\n\n        // Remove from\
    \ beginning\n        temp = temp.Substring(1);\n\n        // Find prefixes\n \
    \       while (temp != string.Empty) {\n            prefix.Add(temp);\n      \
    \      temp = temp.Substring(0, temp.Length - 1);\n        }\n\n        return\
    \ prefix;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <865d69b69c0946b2a235ecda0353b37d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <865d69b69c0946b2a235ecda0353b37d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (str == null)\n         \
    \   throw new ArgumentNullException(\"str\");\n        int[] index = new int[str.Length\
    \ + 1];\n        int len = str.Length;\n        for (int i = 0; i < len; i++)\
    \ {\n            index[i] = i;\n        }\n        while (index[len] == len)\n\
    \            index[len]++;\n        int len = str.Length;\n        for (int i\
    \ = len - 1; i >= 0; i--) {\n            if (index[i] == len)\n              \
    \  index[i]++;\n            else\n                break;\n        }\n        int\
    \ prefix = len;\n        List<string> result = new List<string>(len + 1);\n  \
    \      for (int i = len; i >= 0; i--) {\n            if (index[i] == len) {\n\
    \                result.Add((str[prefix] + str[i]));\n                index[i]\
    \ = 0;\n                len--;\n                prefix--;\n            }\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n   \
    \ Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaob_ip0l.cs(22,13): error CS0128: A local variable or function named ''len''
    is already defined in this scope

    /tmp/tmpaob_ip0l.cs(33,29): error CS1503: Argument 1: cannot convert from ''int''
    to ''string''

    '
  timestamp: 1659977371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        int max = str.Length;\n    \
    \    List<string> prefixes = new List<string>();\n        for (int i = 1; i <\
    \ max; ++i) {\n            prefixes.Add((new string[] { str[i] }).Concat(AllPrefixes(str.Substring(i\
    \ + 1))).ToList());\n        }\n        return prefixes;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new\
    \ List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new\
    \ string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"\
    asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new\
    \ List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9fqsaeer.cs(16,42): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659977371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> ret = new List<string>();\n\
    \        int sz = str.Length;\n        for (int i = 0; i < sz; i++) {\n      \
    \      string prefix = str.Substring(0, i + 1);\n            for (int j = sz -\
    \ i - 1; j >=0; j--) {\n                string prefix2 = str.Substring(j + 1,\
    \ i + 1);\n                ret.Add(\"(\" + prefix + \" \" + prefix2 + \")\");\n\
    \            }\n        }\n        return ret;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7633cc443f184095b68056cc45470557>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Index and length must refer to a location\
    \ within the string.\nParameter name: length\n  at System.String.Substring (System.Int32\
    \ startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.AllPrefixes (System.String str) [0x00028] in <7633cc443f184095b68056cc45470557>:0\
    \ \n  at Problem.Main (System.String[] args) [0x0001b] in <7633cc443f184095b68056cc45470557>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ and length must refer to a location within the string.\nParameter name: length\n\
    \  at System.String.Substring (System.Int32 startIndex, System.Int32 length) [0x0004c]\
    \ in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.AllPrefixes (System.String\
    \ str) [0x00028] in <7633cc443f184095b68056cc45470557>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x0001b] in <7633cc443f184095b68056cc45470557>:0 \n"
  stdout: ''
  timestamp: 1659977371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        // Step 1.\n        // Sort\
    \ the input string by length and reverse it so we can easily find the \n     \
    \   // longest prefix\n        // >>> AllPrefixes((\"abc\"))\n        // (new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"b\", (string)\"a\"}))\n\
    \        str = str.OrderByDescending(s => s.Length).Reverse().ToString();\n  \
    \      // Step 2.\n        // Create a \"dictionary\" to store all prefixes in\
    \ O(n) time\n        // >>> AllPrefixes((\"abc\"))\n        // (new List<string>(new\
    \ string[]{(string)\"abc\", (string)\"b\", (string)\"a\"}))\n        Dictionary<string,\
    \ int> dict = new Dictionary<string, int>();\n        // Step 3.\n        // Find\
    \ the length of the longest prefix in the dictionary and add it\n        // to\
    \ the dictionary if its a new prefix\n        // >>> AllPrefixes((\"abc\"))\n\
    \        // (new List<string>(new string[]{(string)\"abc\", (string)\"b\", (string)\"\
    a\"}))\n        for (int i = 0; i < str.Length; i++) {\n            string prefix\
    \ = str.Substring(0, i);\n            string suffixStr = str.Substring(i);\n \
    \           int length = 0;\n            // Step 4.\n            // Get the length\
    \ of the current prefix\n            // >>> AllPrefixes((\"abc\"))\n         \
    \   // (new List<string>(new string[]{(string)\"abc\", (string)\"b\", (string)\"\
    a\"}))\n            while (prefixDict.ContainsKey(prefix)) {\n               \
    \ length++;\n                prefix = prefixDict[prefix];\n            }\n   \
    \         // Step 5.\n            // If new prefix found, add it to dictionary\n\
    \            if (dict.ContainsKey(suffixStr)) {\n                dict[suffixStr]\
    \ += length;\n            }\n            else {\n                dict.Add(suffixStr,\
    \ length);\n            }\n        }\n        // Step 6.\n        // Add prefix\
    \ to longest prefix\n        // >>> AllPrefixes((\"abc\"))\n        // (new List<string>(new\
    \ string[]{(string)\"abc\", (string)\"b\", (string)\"a\"}))\n        List<string>\
    \ result = new List<string>();\n        int longest = 0;\n        foreach (KeyValuePair<string,\
    \ int> entry in dict) {\n            if (entry.Value > longest) {\n          \
    \      result.Add(entry.Key);\n                longest = entry.Value;\n      \
    \      }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmputpd5phb.cs(18,44): error CS1061: ''char'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''char'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmputpd5phb.cs(37,20): error CS0103: The name ''prefixDict'' does not exist
    in the current context

    /tmp/tmputpd5phb.cs(39,26): error CS0103: The name ''prefixDict'' does not exist
    in the current context

    '
  timestamp: 1659977371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> result = new List<string>();\n\
    \        int len = str.Length;\n        for (int i = 0; i < len; i++) {\n    \
    \        int index = str.IndexOf(str[i], i + 1);\n            while (index > 0)\
    \ {\n                result.Add(new string(str.Take(index).ToArray()));\n    \
    \            index = str.IndexOf(str[i], index + 1);\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"\
    asdfgh\")).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\"\
    , (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n\
    \    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new string[]{(string)\"\
    W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <caba9a8870f04d68b54fa9c669c63b56>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <caba9a8870f04d68b54fa9c669c63b56>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> result = new List<string>();\n\
    \        if (str == null) return result;\n        bool isPrefix = true;\n    \
    \    for(int i=0; i<str.Length; i++) {\n            if(str[i].ToLower() == str[i])\
    \ {\n                isPrefix = true;\n                continue;\n           \
    \ }\n            if (isPrefix) result.Add(str.Substring(0, i));\n            isPrefix\
    \ = false;\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppaogrk5m.cs(17,23): error CS1501: No overload for method ''ToLower'' takes
    0 arguments

    '
  timestamp: 1659977371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        string prefix = \"\";\n    \
    \    List<string> res = new List<string>();\n\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            if (str[i] == str[0])\n                res.Add(prefix);\n\
    \            else {\n                prefix = prefix + str[i];\n             \
    \   res.Add(prefix);\n            }\n        }\n        return res;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea6fdb87657f4bdd8540e6b3e1942b86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea6fdb87657f4bdd8540e6b3e1942b86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        return AllPrefixes(str, str);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc7z25pv9.cs(13,16): error CS1501: No overload for method ''AllPrefixes''
    takes 2 arguments

    '
  timestamp: 1659977371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> prefixes = new\
    \ List<string>();\n        for (int i = 0; i < str.Length; i++)\n            prefixes.Add(string.Concat(Enumerable.Repeat(str,\
    \ i)));\n        return prefixes;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ae43a58a36ef42c09b0e8e95917e92c5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ae43a58a36ef42c09b0e8e95917e92c5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var result = new List<string>();\n\
    \        for (int i = 0; i < str.Length; ++i) {\n            for (int j = 0; j\
    \ < i; ++j) {\n                result.Add((new string(str.Take(i).ToArray())).Substring(j));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b595f776056c45859f19221c13d7dcf7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b595f776056c45859f19221c13d7dcf7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var chars = new List<string>();\n\
    \        var list = new List<string>();\n        if (str == \"\") {\n        \
    \    chars.Add(\"\");\n            list.Add(\"\");\n        }\n        else {\n\
    \            chars.Add(\"\");\n            var index = str.Length;\n         \
    \   while (index-- > 1) {\n                chars.Add(str[index]);\n          \
    \      list.Add(str[index]);\n            }\n        }\n        return chars.ToList().Concat(list.ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyjk4s2fv.cs(23,27): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpyjk4s2fv.cs(24,26): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpyjk4s2fv.cs(27,16): error CS0266: Cannot implicitly convert type ''System.Collections.Generic.IEnumerable<string>''
    to ''System.Collections.Generic.List<string>''. An explicit conversion exists
    (are you missing a cast?)

    '
  timestamp: 1659977371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> prefixes = new\
    \ List<string>();\n        if (str == \"\") return prefixes;\n        for (int\
    \ i = 0; i < str.Length; i++) {\n            prefixes.Add((str).Substring(0, i));\n\
    \        }\n        return prefixes;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1be84a8b2bc046f5a8441f4d72e75de7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1be84a8b2bc046f5a8441f4d72e75de7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977371
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        List<string> res = new List<string>();\n        string prefix = string.Empty;\n\
    \n        // For each character\n        foreach (char c in chars) {\n       \
    \     // Append all prefixes of current char\n            // And if the current\
    \ char is first character then append \"\"\n            res.AddRange(AllPrefixes(prefix\
    \ + c));\n            if (res.Count == 0) res.Add(\"\");\n        }\n\n      \
    \  return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b8941c291d448c0850c991edb5a2125>:0 \n"
  stdout: None
  timestamp: 1659977376
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var l = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            l.Add(str.Substring(0,\
    \ i));\n        }\n        return l;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <86195adcca054cbf889ecec7ca102b5b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <86195adcca054cbf889ecec7ca102b5b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> prefixes = new\
    \ List<string>();\n\n        for (int i = 0; i < str.Length; i++) {\n        \
    \    prefixes.Add((new string[] { str[i].ToString() }).Concat(prefixes));\n  \
    \      }\n\n        return prefixes;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6ppmh_ay.cs(16,26): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.IEnumerable<string>''
    to ''string''

    '
  timestamp: 1659977371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        return AllPrefixesInternal(str.ToLower(),\
    \ 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf1h81soq.cs(13,16): error CS0103: The name ''AllPrefixesInternal'' does
    not exist in the current context

    '
  timestamp: 1659977371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (str == null || str.Length\
    \ == 0) return new List<string>();\n        var prefix = new List<string>();\n\
    \        prefixes.Add(str);\n        foreach (var s in prefix) {\n           \
    \ prefix = prefix.Concat(AllPrefixes(s));\n        }\n        return prefix;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpytd1mktg.cs(15,9): error CS0103: The name ''prefixes'' does not exist
    in the current context

    /tmp/tmpytd1mktg.cs(17,22): error CS0266: Cannot implicitly convert type ''System.Collections.Generic.IEnumerable<string>''
    to ''System.Collections.Generic.List<string>''. An explicit conversion exists
    (are you missing a cast?)

    '
  timestamp: 1659977371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        // This hash table can be pre-populated\
    \ for O(1) lookup\n        HashSet<string> prefixes = new HashSet<string>();\n\
    \        if (str.Length == 0) {\n            return prefixes;\n        }\n   \
    \     // Populate hash table\n        foreach (char c in str) {\n            prefixes.Add(c.ToString());\n\
    \            prefixes.AddRange(AllPrefixes(c.ToString()));\n        }\n      \
    \  return prefixes;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"\
    asdfgh\")).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\"\
    , (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n\
    \    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new string[]{(string)\"\
    W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc5_g2skh.cs(16,20): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.HashSet<string>''
    to ''System.Collections.Generic.List<string>''

    /tmp/tmpc5_g2skh.cs(21,22): error CS1061: ''HashSet<string>'' does not contain
    a definition for ''AddRange'' and no accessible extension method ''AddRange''
    accepting a first argument of type ''HashSet<string>'' could be found (are you
    missing a using directive or an assembly reference?)

    /tmp/tmpc5_g2skh.cs(23,16): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.HashSet<string>''
    to ''System.Collections.Generic.List<string>''

    '
  timestamp: 1659977371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> ret = new List<string>();\n\
    \        foreach (char c in str) {\n            ret.AddRange(AllPrefixes(new string(new\
    \ char[] {c}, 1)));\n        }\n        return ret;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new\
    \ List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new\
    \ string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"\
    asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new\
    \ List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsg80axx_.cs(15,49): error CS1503: Argument 1: cannot convert from ''char[]''
    to ''char''

    '
  timestamp: 1659977372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        int length = str.Length;\n \
    \       List<string> prefixes = new List<string>();\n        \n        // Add\
    \ all prefixes of the length 1 string\n        if (length == 1) {\n          \
    \  prefixes.Add(str);\n            return prefixes;\n        }\n        \n   \
    \     // Add all prefixes of the length 2 string\n        List<string> smallerPrefixes\
    \ = AllPrefixes(str.Substring(1));\n        foreach (string s in smallerPrefixes)\
    \ {\n            prefixes.Add((length == s.Length) ? str : (length < s.Length)\
    \ ? s.Substring(0, length) : s);\n        }\n        \n        return prefixes;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: startIndex\
    \ cannot be larger than length of string.\nParameter name: startIndex\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0001d] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.String.Substring (System.Int32 startIndex) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.AllPrefixes (System.String str) [0x00024] in <6dbfd825dd18430cb877afba88ef6f2e>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <6dbfd825dd18430cb877afba88ef6f2e>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: startIndex\
    \ cannot be larger than length of string.\nParameter name: startIndex\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0001d] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.String.Substring (System.Int32 startIndex) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.AllPrefixes (System.String str) [0x00024] in <6dbfd825dd18430cb877afba88ef6f2e>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <6dbfd825dd18430cb877afba88ef6f2e>:0\
    \ \n"
  stdout: ''
  timestamp: 1659977372
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (string.IsNullOrEmpty(str))\n\
    \            return new List<string>();\n        List<string> result = new List<string>();\n\
    \        int minPrefixLen = Math.Min(str.Length, 1);\n        int maxPrefixLen\
    \ = Math.Max(str.Length, 1);\n        for (int i = 1; i < minPrefixLen; i++) {\n\
    \            if (str[i - 1] != '\\0')\n                result.Add(str.Substring(0,\
    \ i));\n        }\n        for (int i = maxPrefixLen; i > minPrefixLen; i--) {\n\
    \            if (str[i - 1] != '\\0')\n                result.Add(str.Substring(0,\
    \ i));\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c47cf84f3e59478eb498b65aee883e9e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c47cf84f3e59478eb498b65aee883e9e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (str.Length == 0) return\
    \ new List<string>();\n        Stack<string> stack = new Stack<string>();\n  \
    \      foreach (char c in str) {\n            stack.Push(c); // push the current\
    \ character onto the stack\n            if (stack.Count > 1) // if we have more\
    \ characters to push\n            {\n                while (stack.Count > 1 &&\
    \ !stack.Peek().Equals(c)) { // while stack is not empty\n                   \
    \ stack.Pop(); // pop off the current item\n                }\n            }\n\
    \        }\n        List<string> prefixes = new List<string>(stack.Count); //\
    \ create a new list to hold the prefixes\n        while (stack.Count > 0) { //\
    \ while stack is not empty\n            prefixes.Add(stack.Pop()); // add the\
    \ item to the list\n        }\n        return prefixes;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new\
    \ List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new\
    \ string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"\
    asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new\
    \ List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqqnhbxin.cs(16,24): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659977372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (str == null || str.Length\
    \ == 0)\n            return null;\n\n        List<string> prefixes = new List<string>();\n\
    \        Stack<string> stack = new Stack<string>();\n\n        foreach (char c\
    \ in str) {\n            if (c == '|')\n                prefixes.Add(stack.Count\
    \ > 0 ? stack.Count : \"\");\n            stack.Add(c);\n        }\n        stack.Pop();\n\
    \        prefixes.Add(stack.Count);\n        return prefixes;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new\
    \ List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new\
    \ string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"\
    asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new\
    \ List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaae9mv9w.cs(21,30): error CS0173: Type of conditional expression cannot
    be determined because there is no implicit conversion between ''int'' and ''string''

    /tmp/tmpaae9mv9w.cs(22,19): error CS1061: ''Stack<string>'' does not contain a
    definition for ''Add'' and no accessible extension method ''Add'' accepting a
    first argument of type ''Stack<string>'' could be found (are you missing a using
    directive or an assembly reference?)

    /tmp/tmpaae9mv9w.cs(25,22): error CS1503: Argument 1: cannot convert from ''int''
    to ''string''

    '
  timestamp: 1659977372
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        string prefix = \"\";\n    \
    \    int length = 0;\n        List<string> result = new List<string>();\n\n  \
    \      for (int i = 0; i < str.Length; i++) {\n            length++;\n       \
    \     prefix = str[i].ToString() + prefix;\n            result.Add(prefix);\n\
    \        }\n\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a3de0e69a554435a6e3594bd70b7551>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a3de0e69a554435a6e3594bd70b7551>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        Stack<char> stack = new Stack<char>();\n\
    \        List<string> result = new List<string>();\n        foreach (char c in\
    \ str) {\n            if (c == '.') continue;\n            if (stack.Count ==\
    \ 0) break;\n            stack.Push(c);\n            for (int i = 0; i < stack.Count;\
    \ i++) {\n                char nc = stack.Pop();\n                result.Add(c\
    \ + nc);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new\
    \ List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new\
    \ string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"\
    asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new\
    \ List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu70u1a7v.cs(21,28): error CS1503: Argument 1: cannot convert from ''int''
    to ''string''

    '
  timestamp: 1659977372
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var result = new List<string>();\n\
    \        using (var md5 = new MD5CryptoServiceProvider()) {\n            md5.ComputeHash(Encoding.UTF8.GetBytes(str));\n\
    \            foreach (byte x in md5.Hash) {\n                result.Add(x.ToString(\"\
    X2\"));\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new\
    \ List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new\
    \ string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"\
    asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new\
    \ List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1f3484ca1a9a4ad3bef4bf9375bc00d8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1f3484ca1a9a4ad3bef4bf9375bc00d8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        return AllPrefixes(str, new\
    \ List<string>());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp62slpeq2.cs(13,16): error CS1501: No overload for method ''AllPrefixes''
    takes 2 arguments

    '
  timestamp: 1659977372
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (str == null) return null;\n\
    \        var result = new List<string>();\n        var len = str.Length;\n   \
    \     for (var i = 0; i < (len - 1); i++) {\n            var prefix = str.Substring(0,\
    \ i);\n            var suffix = str.Substring(i);\n            result.AddRange(AllPrefixes(prefix));\n\
    \            if (suffix.Length > 0) {\n                result.Add(prefix);\n \
    \               result.Add(suffix);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2d184d74f745428da2f3c070aab0ed90>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2d184d74f745428da2f3c070aab0ed90>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> ret = new List<string>();\n\
    \        if (str == \"\") return ret;\n        int len = str.Length;\n       \
    \ string first = str.Substring(0, 1);\n        ret.Add(first);\n        for (int\
    \ i = 0; i < len; i++) {\n            string next = str.Substring(i + 1, 1);\n\
    \            ret = (new List<string>(ret.Where(a => a != next && a.Length > next.Length).ToList())).Union(new\
    \ List<string>(ret.Where(a => a != next && a.Length < next.Length).ToList())).Concat(ret.Where(a\
    \ => a == next && a.Length == next.Length).ToList()).ToList();\n        }\n  \
    \      return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <20c28c8c1d9044a3a5b1133e2c37e07d>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Index and length must refer to a location\
    \ within the string.\nParameter name: length\n  at System.String.Substring (System.Int32\
    \ startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.AllPrefixes (System.String str) [0x00046] in <20c28c8c1d9044a3a5b1133e2c37e07d>:0\
    \ \n  at Problem.Main (System.String[] args) [0x0001b] in <20c28c8c1d9044a3a5b1133e2c37e07d>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ and length must refer to a location within the string.\nParameter name: length\n\
    \  at System.String.Substring (System.Int32 startIndex, System.Int32 length) [0x0004c]\
    \ in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.AllPrefixes (System.String\
    \ str) [0x00046] in <20c28c8c1d9044a3a5b1133e2c37e07d>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x0001b] in <20c28c8c1d9044a3a5b1133e2c37e07d>:0 \n"
  stdout: ''
  timestamp: 1659977372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> prefixes = new\
    \ List<string>();\n        string prefix = \"\";\n        int n = str.Length;\n\
    \        int longest = 0;\n        // Loop for each character in the input string\n\
    \        for (int i = 0; i < n; i++) {\n            // Add the prefix to the prefixes\
    \ list\n            prefixes.Add(prefix);\n            // Reset the prefix for\
    \ the next iteration of the loop\n            prefix = str.Substring(0, i);\n\
    \            // Loop over the input string again and find the longest prefix so\
    \ far\n            for (int j = n; j > longest; j--) {\n                prefix\
    \ = prefix.Substring(0, j);\n                int j2 = str.IndexOf(prefix, j);\n\
    \                if (j2 < 0) break;\n                longest = j2;\n         \
    \   }\n        }\n        prefixes.Add(prefix);\n        return prefixes;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <10dc36e32ed145d5a0196a7e2c0de7b8>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Index and length must refer to a location\
    \ within the string.\nParameter name: length\n  at System.String.Substring (System.Int32\
    \ startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.AllPrefixes (System.String str) [0x00034] in <10dc36e32ed145d5a0196a7e2c0de7b8>:0\
    \ \n  at Problem.Main (System.String[] args) [0x0001b] in <10dc36e32ed145d5a0196a7e2c0de7b8>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ and length must refer to a location within the string.\nParameter name: length\n\
    \  at System.String.Substring (System.Int32 startIndex, System.Int32 length) [0x0004c]\
    \ in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.AllPrefixes (System.String\
    \ str) [0x00034] in <10dc36e32ed145d5a0196a7e2c0de7b8>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x0001b] in <10dc36e32ed145d5a0196a7e2c0de7b8>:0 \n"
  stdout: ''
  timestamp: 1659977372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (str == null) {\n       \
    \     return null;\n        }\n        List<string> res = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            char c = str[i];\n\
    \            if (i == 0) {\n                res.Add(c.ToString());\n         \
    \   } else {\n                res.AddRange(AllPrefixes(new string[] { c, string.Empty\
    \ }, i));\n            }\n        }\n        return res;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new\
    \ List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new\
    \ string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"\
    asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new\
    \ List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8dphlyef.cs(22,57): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659977372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (string.IsNullOrEmpty(str))\n\
    \            return null;\n        // Compute length of str\n        string strTemp\
    \ = str.Length > str.MaxLength ? str.Substring(0, str.MaxLength) : str;\n    \
    \    var allPrefixes = new List<string>();\n        while (true) {\n         \
    \   var start = strTemp.Length > str.Length ? str.Length : strTemp.Length;\n \
    \           while (strTemp.StartsWith(str, start)) // Start with str\n       \
    \         start++;\n            allPrefixes.Add(new string(strTemp.Take(start).ToArray()));\n\
    \            if (strTemp.StartsWith(str)) // No more prefixes\n              \
    \  return allPrefixes;\n            // Skip str\n            strTemp = strTemp.Substring(str.Length);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb_uweax2.cs(16,43): error CS1061: ''string'' does not contain a definition
    for ''MaxLength'' and no accessible extension method ''MaxLength'' accepting a
    first argument of type ''string'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpb_uweax2.cs(16,76): error CS1061: ''string'' does not contain a definition
    for ''MaxLength'' and no accessible extension method ''MaxLength'' accepting a
    first argument of type ''string'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpb_uweax2.cs(20,44): error CS1503: Argument 2: cannot convert from ''int''
    to ''System.StringComparison''

    '
  timestamp: 1659977372
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var result = new List<string>();\n\
    \        var start = 0;\n        var end = 0;\n        var count = 0;\n      \
    \  for (end = str.Length - 1; end >= 0; end--) {\n            if (str[end] ==\
    \ 'a') start++;\n            if (str[end] == 'b') start++;\n            if (str[end]\
    \ == 'c') start++;\n            count++;\n            if (count == 3) result.Add(new\
    \ string(str.Substring(start, end - start + 1) + \"a\"));\n        }\n       \
    \ return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a9e2628522b54ec3b3ba0031a05f74b6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a9e2628522b54ec3b3ba0031a05f74b6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> result = new List<string>();\n\
    \        DoAllPrefixes(str, result);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new\
    \ List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new\
    \ string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"\
    asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new\
    \ List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbtbvgtpu.cs(14,9): error CS0103: The name ''DoAllPrefixes'' does not exist
    in the current context

    '
  timestamp: 1659977372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        return AllPrefixes(new List<char>(str.ToCharArray()));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfjodu92a.cs(13,28): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<char>''
    to ''string''

    '
  timestamp: 1659977372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        // O(n) time and O(n) space\n\
    \        var prefixes = new List<string>();\n        while (0 < str.Length) {\n\
    \            // Find longest prefix of all characters\n            var longestPrefixOfAllCharacters\
    \ = Enumerable.Range(0, str.Length)\n                .Select(i => new string(str,\
    \ i, 1))\n                .GroupBy(c => c)\n                .OrderByDescending(g\
    \ => g.Count())\n                .First();\n\n            // Add the longest prefix\
    \ of all characters to result\n            foreach (var prefix in longestPrefixOfAllCharacters)\n\
    \                prefixes.Add(prefix);\n\n            // Remove longest prefix\
    \ of all characters\n            str = str.Substring(longestPrefixOfAllCharacters.Count());\n\
    \        }\n        return prefixes;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc1g5p5q8.cs(18,41): error CS1503: Argument 1: cannot convert from ''string''
    to ''char[]''

    '
  timestamp: 1659977372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> result = new List<string>();\n\
    \        if (str == null)\n            return result;\n\n        // Build prefix\
    \ tree\n        PrefixTree.PrefixTree tree = new PrefixTree.PrefixTree(str);\n\
    \n        // Find all leaves in the prefix tree\n        PrefixTree.PrefixTree.PrefixTreeNodeCollection\
    \ leaves = tree.FindLeaves();\n        string longestPrefix = string.Empty;\n\
    \        int longestPrefixLength = str.Length;\n        foreach (PrefixTree.PrefixTree.PrefixTreeNode\
    \ leaf in leaves) {\n            // If the current node prefix is longer, update\
    \ longest prefix and length\n            if (leaf.Prefix.Length > longestPrefixLength)\
    \ {\n                longestPrefix = leaf.Prefix;\n                longestPrefixLength\
    \ = leaf.Prefix.Length;\n            }\n            // If the current node prefix\
    \ is equal to the longest prefix, add the current node's prefix to the list\n\
    \            if (leaf.Prefix == longestPrefix) {\n                result.Add((string)\
    \ leaf.Prefix);\n            }\n        }\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\"\
    )).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new\
    \ List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"\
    asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9n7sxgtk.cs(18,9): error CS0246: The type or namespace name ''PrefixTree''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmp9n7sxgtk.cs(18,42): error CS0246: The type or namespace name ''PrefixTree''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmp9n7sxgtk.cs(21,9): error CS0246: The type or namespace name ''PrefixTree''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmp9n7sxgtk.cs(24,18): error CS0246: The type or namespace name ''PrefixTree''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659977372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        return AllPrefixes(new List<string>(str));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgerxis_x.cs(13,45): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    '
  timestamp: 1659977372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        return AllPrefixes(str, str);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc7z25pv9.cs(13,16): error CS1501: No overload for method ''AllPrefixes''
    takes 2 arguments

    '
  timestamp: 1659977371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (str.length == 0) return\
    \ new List<string>();\n        var prefixes = AllPrefixes(str, 1, str);\n    \
    \    for (int i = 0; i < str.length; i++)\n            prefixes.Add(str[i]);\n\
    \        return prefixes;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"\
    asdfgh\")).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\"\
    , (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n\
    \    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new string[]{(string)\"\
    W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6byhtumu.cs(13,17): error CS1061: ''string'' does not contain a definition
    for ''length'' and no accessible extension method ''length'' accepting a first
    argument of type ''string'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmp6byhtumu.cs(14,24): error CS1501: No overload for method ''AllPrefixes''
    takes 3 arguments

    /tmp/tmp6byhtumu.cs(15,33): error CS1061: ''string'' does not contain a definition
    for ''length'' and no accessible extension method ''length'' accepting a first
    argument of type ''string'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmp6byhtumu.cs(16,26): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659977372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (string.IsNullOrEmpty(str))\n\
    \            return new List<string>();\n        var result = new List<string>();\n\
    \        AddPrefix(str.Length, str, result, 0);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6gl2gqf_.cs(16,9): error CS0103: The name ''AddPrefix'' does not exist
    in the current context

    '
  timestamp: 1659977372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        int[] count = new int[str.Length\
    \ + 1];\n        StringBuilder temp = new StringBuilder();\n        for (int i\
    \ = 0; i < str.Length; i++) {\n            count[i + 1] = 1;\n            temp\
    \ += str[i];\n        }\n        // Prefix lengths start from 1 as 0 is for empty\
    \ string\n        for (int i = str.Length - 1; i >= 0; i--) {\n            for\
    \ (int j = 0; j < count[i]; j++)\n                temp.Insert(0, str[i]);\n  \
    \          count[i]++;\n        }\n        return new List<string>(temp.ToString().Split('\\\
    0'));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpivd_l0zo.cs(17,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''StringBuilder'' and ''char''

    '
  timestamp: 1659977372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (string.IsNullOrEmpty(str))\
    \ {\n            return new List<string>();\n        }\n\n        if (str[0] ==\
    \ str[1]) {\n            return new List<string> {str[0]};\n        }\n\n    \
    \    var strs = new List<string>();\n        var length = 1;\n        for (int\
    \ i = 1; i < str.Length; i++) {\n            if (str[i] != str[0]) {\n       \
    \         strs.Add(str[i - length]);\n                length++;\n            }\n\
    \        }\n        if (str.Length < length + 1) {\n            strs.Add(str[length\
    \ - 1]);\n        }\n        return strs;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdpmmf5ph.cs(18,38): error CS1950: The best overloaded Add method ''List<string>.Add(string)''
    for the collection initializer has some invalid arguments

    /tmp/tmpdpmmf5ph.cs(18,38): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpdpmmf5ph.cs(25,26): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpdpmmf5ph.cs(30,22): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659977372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> result = new List<string>();\n\
    \        if (str == null || str.Length == 0) return result;\n        // Scan for\
    \ the longest prefix\n        int longest = 0;\n        int prefixLength = str.Length;\n\
    \        for (int i = 0; i < prefixLength; i++) {\n            if (str[i] == str[longest])\
    \ {\n                longest++;\n                if (longest == prefixLength)\
    \ {\n                    result.Add(new string(str, 0, i));\n                }\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_yufa7nl.cs(22,43): error CS1503: Argument 1: cannot convert from ''string''
    to ''char[]''

    '
  timestamp: 1659977372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (string.IsNullOrEmpty(str))\n\
    \            throw new ArgumentNullException(\"str\");\n\n        List<string>\
    \ list = new List<string>();\n        // Use a stack to traverse the string\n\
    \        Stack<string> stack = new Stack<string>();\n\n        stack.Push(str);\n\
    \        while (stack.Count > 0) {\n            string current = stack.Pop();\n\
    \n            list.Add(current);\n            // Add the prefix of the current\
    \ string to the stack\n            for (int i = 0; i < current.Length; i++)\n\
    \                stack.Push(current.Substring(0, i));\n        }\n\n        return\
    \ list;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentNullException: Value cannot be null.\n\
    Parameter name: str\n  at Problem.AllPrefixes (System.String str) [0x0000b] in\
    \ <492d5e5b21344b79ab3a496464f19637>:0 \n  at Problem.Main (System.String[] args)\
    \ [0x00001] in <492d5e5b21344b79ab3a496464f19637>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentNullException: Value cannot be null.\nParameter name:\
    \ str\n  at Problem.AllPrefixes (System.String str) [0x0000b] in <492d5e5b21344b79ab3a496464f19637>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <492d5e5b21344b79ab3a496464f19637>:0\
    \ \n"
  stdout: ''
  timestamp: 1659977372
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (String.IsNullOrEmpty(str))\n\
    \            return new List<string>();\n\n        var prefixes = new List<string>();\n\
    \        var current = new List<char>(str.ToCharArray());\n        while (current.Count\
    \ > 0) {\n            prefixes.Add(String.Join(\"\", current));\n            current.RemoveAt(0);\n\
    \        }\n\n        return prefixes;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6a69f398f0d74fa894da114f6025b4bc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6a69f398f0d74fa894da114f6025b4bc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var result = new List<string>();\n\
    \        var allPrefixes = AllPrefixes(str, 0);\n        // Add all prefixes from\
    \ longest to shortest\n        foreach (var prefix in allPrefixes.Reverse()) {\n\
    \            result.AddRange(prefix.ToArray());\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfhtt_q4l.cs(14,27): error CS1501: No overload for method ''AllPrefixes''
    takes 2 arguments

    /tmp/tmpfhtt_q4l.cs(16,32): error CS1579: foreach statement cannot operate on
    variables of type ''void'' because ''void'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659977372
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var result = new List<string>();\n\
    \        string prefix = \"\";\n        string temp;\n        for (int i = 0;\
    \ i < str.Length; i++) {\n            temp = (i < str.Length - 1 ? str.Substring(i\
    \ + 1, 1) : \"\") + prefix;\n            result.Add(temp);\n            prefix\
    \ = str.Substring(0, i);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new\
    \ List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new\
    \ string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"\
    asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new\
    \ List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <544c58b17519416782825814353fa9e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <544c58b17519416782825814353fa9e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var result = new List<string>();\n\
    \        var chars = new List<char>();\n        foreach (var c in str) {\n   \
    \         chars.Add(c);\n        }\n        for (var len = 1; len < chars.Count;\
    \ len++) {\n            var subStr = new string(chars.Take(len).ToArray());\n\
    \            var prefix = new List<char>();\n            for (var i = 0; i <=\
    \ chars.Count; i++) {\n                prefix.Add(chars[i]);\n               \
    \ if (prefix.Count == len) {\n                    result.Add(new string(prefix.ToArray()));\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ff6ab000112436ab9c250e2b7e4ead7>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative\
    \ and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item\
    \ (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ Problem.AllPrefixes (System.String str) [0x0005c] in <9ff6ab000112436ab9c250e2b7e4ead7>:0\
    \ \n  at Problem.Main (System.String[] args) [0x0001b] in <9ff6ab000112436ab9c250e2b7e4ead7>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.AllPrefixes\
    \ (System.String str) [0x0005c] in <9ff6ab000112436ab9c250e2b7e4ead7>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x0001b] in <9ff6ab000112436ab9c250e2b7e4ead7>:0\
    \ \n"
  stdout: ''
  timestamp: 1659977373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        // Create array of char\n  \
    \      char[] arr = str.ToCharArray();\n        List<string> res = new List<string>();\n\
    \        // Add first prefix for each character\n        for (int i = 0; i <=\
    \ arr.Length; i++) {\n            res.Add(new string(arr, 0, i));\n        }\n\
    \        // Remove next prefix for each character\n        for (int i = 0; i <=\
    \ arr.Length; i++) {\n            // Remove previous prefix for each character\n\
    \            while (i > 0 && arr[i] != arr[i - 1]) {\n                res.RemoveAt(res.Count\
    \ - 1);\n                i--;\n            }\n        }\n        return res;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dd78c25e78ca4f52810bb609e165a992>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative\
    \ and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].RemoveAt\
    \ (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ Problem.AllPrefixes (System.String str) [0x00044] in <dd78c25e78ca4f52810bb609e165a992>:0\
    \ \n  at Problem.Main (System.String[] args) [0x0001b] in <dd78c25e78ca4f52810bb609e165a992>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].RemoveAt (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.AllPrefixes\
    \ (System.String str) [0x00044] in <dd78c25e78ca4f52810bb609e165a992>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x0001b] in <dd78c25e78ca4f52810bb609e165a992>:0\
    \ \n"
  stdout: ''
  timestamp: 1659977373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        // Create array holding the\
    \ prefixes\n        List<string> prefixes = new List<string>();\n\n        //\
    \ Loop through each character of the original string\n        foreach (char c\
    \ in str)\n        {\n            // If the current character is not a prefix\
    \ of the string\n            // then we must append the current character to the\
    \ list of prefixes\n            if (prefixes.IndexOf(c) < 0)\n            {\n\
    \                // Then we append the current character to the list of prefixes\n\
    \                prefixes.Add((c + \"\").ToUpper());\n                // We then\
    \ loop through the prefixes list\n                for (int i = 0; i < (prefixes.Count\
    \ - 1); i++)\n                {\n                    // If the prefix is not the\
    \ previous character then we can\n                    // add it to the prefixes\
    \ list\n                    if (prefixes[i] != prefixes[i + 1]) {\n          \
    \              prefixes.Add(prefixes[i + 1]);\n                        break;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ prefixes;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqpn8rgnm.cs(21,34): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659977372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> prefixes = new\
    \ List<string>();\n        if (str.Length > 0) {\n            prefixes.Add(str[0]);\n\
    \        }\n        for (int i = 1; i < str.Length; ++i) {\n            prefixes.AddRange(AllPrefixes(str.Substring(i,\
    \ str.Length - i)));\n        }\n        return prefixes;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new\
    \ List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new\
    \ string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"\
    asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new\
    \ List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdh9fylkm.cs(15,26): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659977372
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> prefixes = new\
    \ List<string>();\n        for (int i = 0; i < str.Length; ++i) {\n          \
    \  prefixes.Add((new string(str.Take(i).ToArray())));\n        }\n        return\
    \ prefixes;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <938b634dc9194132a710e95763a08e4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <938b634dc9194132a710e95763a08e4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var res = new List<string>();\n\
    \        var stack = new Stack<string>();\n        var len = str.Length;\n   \
    \     while (len > 0) {\n            stack.Push(str.Substring(0, len));\n    \
    \        str = str.Substring(len);\n            len = str.Length;\n          \
    \  if (len == 0)\n                res.AddRange(stack.Peek().Select(p => (string)p));\n\
    \        }\n        return res;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n   \
    \ Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi47wkryp.cs(21,55): error CS0030: Cannot convert type ''char'' to ''string''

    '
  timestamp: 1659977372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        int N = str.Length;\n      \
    \  List<string> result = new List<string>();\n        for(int i = 0; i < N; i++)\
    \ {\n            for(int j = 0; j < N; j++) {\n                result.Add(str.Substring(i,\
    \ j));\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new\
    \ List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new\
    \ string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"\
    asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new\
    \ List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3ccb0851d53c4da1b1b9552f84351e15>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Index and length must refer to a location\
    \ within the string.\nParameter name: length\n  at System.String.Substring (System.Int32\
    \ startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.AllPrefixes (System.String str) [0x00018] in <3ccb0851d53c4da1b1b9552f84351e15>:0\
    \ \n  at Problem.Main (System.String[] args) [0x0001b] in <3ccb0851d53c4da1b1b9552f84351e15>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ and length must refer to a location within the string.\nParameter name: length\n\
    \  at System.String.Substring (System.Int32 startIndex, System.Int32 length) [0x0004c]\
    \ in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.AllPrefixes (System.String\
    \ str) [0x00018] in <3ccb0851d53c4da1b1b9552f84351e15>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x0001b] in <3ccb0851d53c4da1b1b9552f84351e15>:0 \n"
  stdout: ''
  timestamp: 1659977373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var result = new List<string>();\n\
    \        foreach (var i in AllPrefixesHelper(str,0))\n        {\n            result.Add(i.item);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppwahdj18.cs(14,27): error CS0103: The name ''AllPrefixesHelper'' does
    not exist in the current context

    '
  timestamp: 1659977372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        // Use a dictionary to store\
    \ each prefix seen so far\n        var prefixes = new Dictionary<string, int>();\n\
    \        // Iterate through string until end of string is reached\n        for(int\
    \ i = 0; i < str.Length; i++) {\n            // If the current prefix has not\
    \ been seen yet,\n            // add it to the dictionary and set the prefix length\
    \ to one\n            if(!prefixes.ContainsKey(str.Substring(0, i))) {\n     \
    \           prefixes.Add(str.Substring(0, i), 1);\n            }\n           \
    \ // Otherwise, increment the prefix length\n            else {\n            \
    \    prefixes[str.Substring(0, i)]++;\n            }\n        }\n        // Return\
    \ the list of unique prefixes that have been seen\n        return new List<string>(prefixes.Values.Distinct());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6z9g4ys5.cs(28,33): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.IEnumerable<int>''
    to ''int''

    '
  timestamp: 1659977372
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        int len = str.Length;\n    \
    \    List<string> all = new List<string>();\n        List<string> cur = new List<string>();\n\
    \        cur.Add(str);\n        all.Add(string.Join(\"\", cur));\n        while(cur.Count\
    \ > 0) {\n            foreach (string s in cur) {\n                cur = cur\n\
    \                    .Where(s => !s.Equals(string.Join(\"\", cur)))\n        \
    \            .Select(s => s + s)\n                    .ToList();\n           \
    \     all.Add(string.Join(\"\", cur));\n            }\n        }\n        return\
    \ all;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6e62dd58de4e4f57b80f8faa6cb23fd0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6e62dd58de4e4f57b80f8faa6cb23fd0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977373
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> ret = new List<string>();\n\
    \        int maxLen = str.Length;\n        int curLen = 1;\n        string prefix\
    \ = str.Substring(0, maxLen);\n        foreach (char c in prefix) {\n        \
    \    ret.Add(prefix + c);\n            ret.Add(prefix + c.ToString());\n     \
    \       ret.Add(prefix + (char)((int)c + 1));\n            ret.Add(prefix + (char)((int)c\
    \ + 1));\n        }\n        return ret;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eba3baf4735f4801be02aa3dd948d411>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eba3baf4735f4801be02aa3dd948d411>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (str.Length == 0) return\
    \ new List<string>();\n        List<string> result = new List<string>();\n   \
    \     int len = str.Length;\n        int[,] dp = new int[len, len];\n        for\
    \ (int i = 0; i <= len; i++) {\n            dp[i, 0] = i;\n        }\n       \
    \ for (int i = 1; i <= len; i++) {\n            dp[0, i] = i;\n        }\n   \
    \     for (int i = 1; i <= len; i++) {\n            for (int j = i; j <= len;\
    \ j++) {\n                dp[i, j] = Math.Min(dp[i, j - 1], dp[i - 1, j]);\n \
    \           }\n        }\n        for (int i = 0; i <= len; i++) {\n         \
    \   for (int j = i; j <= len; j++) {\n                string str2 = str.Substring(i,\
    \ j);\n                result.Add((dp[i, j] + str2));\n            }\n       \
    \ }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n   \
    \ Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9065b8c840664ed4b4d0d4110a09303c>:0 \n\nUnhandled Exception:\n\
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n\
    \  at Problem.AllPrefixes (System.String str) [0x00035] in <9065b8c840664ed4b4d0d4110a09303c>:0\
    \ \n  at Problem.Main (System.String[] args) [0x0001b] in <9065b8c840664ed4b4d0d4110a09303c>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index\
    \ was outside the bounds of the array.\n  at Problem.AllPrefixes (System.String\
    \ str) [0x00035] in <9065b8c840664ed4b4d0d4110a09303c>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x0001b] in <9065b8c840664ed4b4d0d4110a09303c>:0 \n"
  stdout: ''
  timestamp: 1659977373
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (str.Length < 2) { return\
    \ new List<string>(); }\n        var prefixes = AllPrefixes(str.Substring(1));\n\
    \        if (str.Length > 2 && prefixes.Contains(str.Substring(0, 2))) { prefixes.Add(str.Substring(0,\
    \ 2)); }\n        return prefixes;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <527d42992e9344a584fa3f22a98b02ac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <527d42992e9344a584fa3f22a98b02ac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        // Initialize with empty list\n\
    \        var results = new List<string>();\n\n        // Iterate over characters,\
    \ add characters to prefix list\n        foreach(var c in str) {\n           \
    \ // If character is not alpha, add prefix to result list\n            if (c <\
    \ 'a' || c > 'z') results.Add($\"{c}\");\n            // Iterate over letters\
    \ above c, add previous prefix to result\n            // Add all non-alpha characters\
    \ to the result list\n            foreach(var i in Enumerable.Range(c-1, 26))\
    \ {\n                if (c >= 'a' && c <= 'z') results.Add($\"{(char)(c - i)}{results[results.Count-1]}\"\
    );\n            }\n        }\n\n        return results;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new\
    \ List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new\
    \ string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"\
    asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new\
    \ List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5bf89643a9db4e909ad63a1ec21dc2ad>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative\
    \ and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item\
    \ (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ Problem.AllPrefixes (System.String str) [0x0008f] in <5bf89643a9db4e909ad63a1ec21dc2ad>:0\
    \ \n  at Problem.Main (System.String[] args) [0x0001b] in <5bf89643a9db4e909ad63a1ec21dc2ad>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.AllPrefixes\
    \ (System.String str) [0x0008f] in <5bf89643a9db4e909ad63a1ec21dc2ad>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x0001b] in <5bf89643a9db4e909ad63a1ec21dc2ad>:0\
    \ \n"
  stdout: ''
  timestamp: 1659977373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> prefixes = new\
    \ List<string>();\n        bool isPresent = false;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (isPresent) {\n                prefixes.Add(str.Substring(0,\
    \ i));\n            }\n            if (str[i] == str[i+1]) {\n               \
    \ isPresent = true;\n            }\n            else {\n                isPresent\
    \ = false;\n            }\n        }\n        return prefixes;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new\
    \ List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new\
    \ string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"\
    asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new\
    \ List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f6a77fd376034971964350c437c0012f>:0 \n\nUnhandled Exception:\n\
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n\
    \  at Problem.AllPrefixes (System.String str) [0x0002b] in <f6a77fd376034971964350c437c0012f>:0\
    \ \n  at Problem.Main (System.String[] args) [0x0001b] in <f6a77fd376034971964350c437c0012f>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index\
    \ was outside the bounds of the array.\n  at Problem.AllPrefixes (System.String\
    \ str) [0x0002b] in <f6a77fd376034971964350c437c0012f>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x0001b] in <f6a77fd376034971964350c437c0012f>:0 \n"
  stdout: ''
  timestamp: 1659977373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var prefixes = new List<string>();\n\
    \        foreach (var c in str) {\n            prefixes.AddRange(AllPrefixes(new\
    \ [] { c }));\n        }\n        return prefixes;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi366q25p.cs(15,43): error CS1503: Argument 1: cannot convert from ''char[]''
    to ''string''

    '
  timestamp: 1659977373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        return str.SelectMany(c => AllPrefixes(c,\
    \ new List<string>(), false)).ToList();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzclq91_7.cs(13,36): error CS1501: No overload for method ''AllPrefixes''
    takes 3 arguments

    '
  timestamp: 1659977373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> list = new List<string>();\n\
    \        string prefix = str;\n        int maxLength = str.Length;\n        int\
    \ next = 1;\n        while (str.Length > 0) {\n            while (next <= maxLength\
    \ && str.StartsWith(prefix, next)) {\n                prefix += next;\n      \
    \          next++;\n            }\n            list.Add(prefix);\n           \
    \ maxLength = str.Length;\n            prefix = str.Substring(prefix.Length);\n\
    \        }\n        return list;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp22nn5d3z.cs(18,64): error CS1503: Argument 2: cannot convert from ''int''
    to ''System.StringComparison''

    '
  timestamp: 1659977373
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var prefix = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++)\n            prefix.Add(str.Substring(0,\
    \ i));\n        return prefix;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n   \
    \ Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2cef8a6d6a7048af869934c63e45cd98>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2cef8a6d6a7048af869934c63e45cd98>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977373
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (str == null) return null;\n\
    \        var prefixes = new List<string>();\n        var length = str.Length;\n\
    \        for (int i = 0; i <= length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i));\n        }\n        return prefixes;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d3a8ec16a6284a57aa3dd40766b19255>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d3a8ec16a6284a57aa3dd40766b19255>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977373
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var allPrefixes = new List<string>();\n\
    \        var len = str.Length;\n        for (var i = len; i >= 0; i--) {\n   \
    \         allPrefixes.Add(str.Substring(0, i));\n        }\n        return allPrefixes;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fc53ba928bfd487a94c6f047fa9b34be>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fc53ba928bfd487a94c6f047fa9b34be>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977373
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> prefixes = new\
    \ List<string>();\n        int length = str.Length;\n        int lastIndex = str.Length\
    \ - 1;\n        bool isPrefix = true;\n        while (lastIndex >= 0) {\n    \
    \        prefixes.Add(str.Substring(0, lastIndex));\n            isPrefix = isPrefix\
    \ && str.StartsWith(prefixes[prefixes.Count - 1]);\n            lastIndex--;\n\
    \        }\n        if (!isPrefix)\n            prefixes.Add(str);\n        return\
    \ prefixes;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ede65639da842568c77fe8744c3b90c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ede65639da842568c77fe8744c3b90c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var list = new List<string>();\n\
    \        AddPrefix(str.Length, list);\n        return list;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new\
    \ List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new\
    \ string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"\
    asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new\
    \ List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6iz093fz.cs(14,9): error CS0103: The name ''AddPrefix'' does not exist
    in the current context

    '
  timestamp: 1659977373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> lst = new List<string>();\n\
    \        lst = Prefixes(str).ToList();\n        str = lst.First();\n        List<string>\
    \ newlst = new List<string>();\n        for(int i = 0;i < str.Length; i++)\n \
    \       {\n            string s = str.Substring(0, i);\n            if(!lst.Contains(s))\n\
    \            {\n                newlst.Add(s);\n            }\n        }\n   \
    \     return newlst;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"\
    asdfgh\")).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\"\
    , (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n\
    \    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new string[]{(string)\"\
    W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsyydts2r.cs(14,15): error CS0103: The name ''Prefixes'' does not exist
    in the current context

    '
  timestamp: 1659977373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (str == null) throw new ArgumentNullException(\"\
    str\");\n        char[] c = new char[str.Length];\n        char[] d = str.ToArray();\n\
    \        Array.Sort(d);\n        List<string> result = new List<string>();\n \
    \       for (int i = 0; i < d.Length; i++)\n            if (d[i - 1] == d[i])\n\
    \                result.Add(new string(d, 0, i));\n            else\n        \
    \        result.AddRange(AllPrefixes(new string(d, i, str.Length - i)));\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"\
    asdfgh\")).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\"\
    , (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n\
    \    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new string[]{(string)\"\
    W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8b0c67ee82554381978e8bf0be1978a1>:0 \n\nUnhandled Exception:\n\
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n\
    \  at Problem.AllPrefixes (System.String str) [0x00039] in <8b0c67ee82554381978e8bf0be1978a1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x0001b] in <8b0c67ee82554381978e8bf0be1978a1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index\
    \ was outside the bounds of the array.\n  at Problem.AllPrefixes (System.String\
    \ str) [0x00039] in <8b0c67ee82554381978e8bf0be1978a1>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x0001b] in <8b0c67ee82554381978e8bf0be1978a1>:0 \n"
  stdout: ''
  timestamp: 1659977373
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> prefixes = new\
    \ List<string>();\n\n        if (string.IsNullOrWhiteSpace(str)) {\n         \
    \   return prefixes;\n        }\n\n        // Generate all combinations of length\
    \ 1, 2, ... len(str) - 1\n        for (int i = 1; i <= str.Length; i++) {\n  \
    \          prefixes.AddRange(new List<string>(AllPrefixes(str.Substring(0, i))));\n\
    \        }\n\n        // Remove any combinations containing only empty strings\n\
    \        prefixes.RemoveAll(a => a == \"\");\n\n        return prefixes;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1e4d61c99fa746aea16848413193ffa8>:0 \n"
  stdout: None
  timestamp: 1659977378
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        return AllPrefixes(new string(str));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659977379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        // Compute list of all prefixes\
    \ of str\n        List<string> prefixes = new List<string>();\n        ComputePrefixes(\"\
    \", str, prefixes);\n        return prefixes;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdym1p9zk.cs(15,9): error CS0103: The name ''ComputePrefixes'' does not
    exist in the current context

    '
  timestamp: 1659977373
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (str == null)\n         \
    \   throw new ArgumentNullException(\"str\");\n        List<string> result = new\
    \ List<string>();\n        for (int i = 0; i < str.Length; i++)\n            result.AddRange(AllPrefixes(str.Substring(i\
    \ + 1)));\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2b9e1e0e6b3f48458dd2bd3e93cafa15>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2b9e1e0e6b3f48458dd2bd3e93cafa15>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var result = new List<string>();\n\
    \        if (!str.IsNullOrEmpty()) {\n            result.AddRange(AllPrefixesCore(str,\
    \ \"\"));\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprppe3g1f.cs(14,18): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''value'' of ''string.IsNullOrEmpty(string)''

    /tmp/tmprppe3g1f.cs(15,29): error CS0103: The name ''AllPrefixesCore'' does not
    exist in the current context

    '
  timestamp: 1659977373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var result = new List<string>();\n\
    \        bool done = false;\n        while (!done) {\n            var prefixes\
    \ = new List<string>();\n            for (var i = 1; i < str.Length; i++) {\n\
    \                var chars = new List<string>();\n                var str = str.Substring(i,\
    \ str.Length - i);\n                chars.Add(str[0]);\n                for (var\
    \ j = 1; j <= str.Length; j++)\n                    chars.Add(str[j]);\n     \
    \           for (int k = i + 1; k <= str.Length; k++)\n                    chars.Add(str[k]);\n\
    \                prefixes.Add(string.Join(\"\", chars));\n            }\n    \
    \        foreach (var prefix in prefixes) {\n                for (int j = 0; j\
    \ < prefixes.Count; j++) {\n                    var p = prefixes[j];\n       \
    \             var p2 = prefixes[j - 1];\n                    var c = prefixes[j];\n\
    \                    if (p.Contains(c) && p.Contains(p2) && p.Contains(c + p2))\n\
    \                        result.Add(prefix + p);\n                    if (p.Contains(c)\
    \ && p.Contains(p2) && !p.Contains(c + p2))\n                        result.Add(prefix\
    \ + p);\n                }\n            }\n            done = true;\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"\
    asdfgh\")).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\"\
    , (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n\
    \    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new string[]{(string)\"\
    W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgzanljen.cs(19,21): error CS0136: A local or parameter named ''str'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpgzanljen.cs(19,27): error CS0841: Cannot use local variable ''str'' before
    it is declared

    /tmp/tmpgzanljen.cs(19,44): error CS0841: Cannot use local variable ''str'' before
    it is declared

    '
  timestamp: 1659977373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> result = new List<string>();\n\
    \n        char[] chars = str.ToCharArray();\n        List<int> suffixLengths =\
    \ new List<int>();\n\n        char[] suffixChars = new char[chars.Length];\n \
    \       for (int i = 1; i < chars.Length; ++i) {\n            suffixChars[i -\
    \ 1] = '0';\n            suffixChars[i] = chars[i];\n            suffixLengths.Add(i);\n\
    \        }\n\n        string s = \"\";\n        while (true) {\n            while\
    \ (suffixLengths.Count != 0) {\n                int i = suffixLengths.RemoveAt(0);\n\
    \                result.Add(s);\n                s += suffixChars[i];\n      \
    \      }\n            if (suffixLengths.Count == 0) {\n                break;\n\
    \            }\n            int j = chars.Length - 1;\n            while (suffixLengths.Count\
    \ != 0) {\n                int i = suffixLengths.RemoveAt(0);\n              \
    \  j--;\n                suffixChars[j] = '0';\n                suffixChars[i]\
    \ = chars[i];\n                suffixLengths.Add(i);\n            }\n        \
    \    suffixChars[j] = '0';\n            suffixLengths.Add(1);\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"\
    asdfgh\")).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\"\
    , (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n\
    \    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new string[]{(string)\"\
    W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpitbofas1.cs(28,25): error CS0029: Cannot implicitly convert type ''void''
    to ''int''

    /tmp/tmpitbofas1.cs(37,25): error CS0029: Cannot implicitly convert type ''void''
    to ''int''

    '
  timestamp: 1659977373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> prefixes = new\
    \ List<string>();\n        if (str == null) return prefixes;\n        // Using\
    \ ToCharArray to avoid unnecessary copying of the char array (which could occur\
    \ \n        // if the string was a very large array). Also avoiding duplicates\
    \ since they can \n        // occur multiple times in a short string. \n     \
    \   char[] chars = str.ToCharArray();\n        Debug.Assert(chars[0] == str[0]);\n\
    \        int i = 0;\n        for (int j = 0; j < chars.Length; j++) {\n      \
    \      int count = i;\n            while (count < j && chars[count] == chars[j])\
    \ {\n                count++;\n            }\n            prefixes.Add((chars[count]).ToString());\n\
    \            i = count;\n        }\n        return prefixes;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new\
    \ List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new\
    \ string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"\
    asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new\
    \ List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.AllPrefixes (System.String str) [0x0001b]\
    \ in <a70dc3b4da3b46b3b327caac20f8fcfe>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <a70dc3b4da3b46b3b327caac20f8fcfe>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of\
    \ the array.\n  at Problem.AllPrefixes (System.String str) [0x0001b] in <a70dc3b4da3b46b3b327caac20f8fcfe>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <a70dc3b4da3b46b3b327caac20f8fcfe>:0\
    \ \n"
  stdout: ''
  timestamp: 1659977373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        string str = str + new string(new\
    \ char[] {'a'});\n        List<string> result = new List<string>();\n        for\
    \ (char c = 'a'; c <= 'z'; c++) {\n            result.AddRange(AllPrefixes(str,\
    \ c));\n        }\n        result.Add(str);\n        return result;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqbr9exhh.cs(13,16): error CS0136: A local or parameter named ''str'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpqbr9exhh.cs(16,29): error CS1501: No overload for method ''AllPrefixes''
    takes 2 arguments

    /tmp/tmpqbr9exhh.cs(13,22): error CS0165: Use of unassigned local variable ''str''

    '
  timestamp: 1659977373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> prefixes = new\
    \ List<string>();\n        foreach (string s in str.Substring(0, str.Length))\
    \ {\n            prefixes.Add(s);\n            prefixes.AddRange(AllPrefixes(s));\n\
    \        }\n        return prefixes;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3eityr1_.cs(14,9): error CS0030: Cannot convert type ''char'' to ''string''

    '
  timestamp: 1659977373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        return AllPrefixesImpl(str,\
    \ 0, new List<string>());\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"\
    asdfgh\")).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\"\
    , (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n\
    \    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new string[]{(string)\"\
    W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv_u6yuja.cs(13,16): error CS0103: The name ''AllPrefixesImpl'' does not
    exist in the current context

    '
  timestamp: 1659977373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        return AllPrefixes(new List<char>(str));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqz85q105.cs(13,28): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<char>''
    to ''string''

    '
  timestamp: 1659977373
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        string longest = null;\n   \
    \     string shortest = null;\n        int i = 0;\n        List<string> result\
    \ = new List<string>();\n\n        while (longest == null || shortest == null\
    \ || i < str.Length) {\n            shortest = str.Substring(0, i);\n        \
    \    longest = str.Substring(i);\n            result.Add(longest);\n         \
    \   i += shortest.Length;\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new\
    \ List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new\
    \ string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"\
    asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new\
    \ List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a35dee84de5f409eb8ad8aaac662eb53>:0 \n"
  stdout: None
  timestamp: 1659977378
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var result = new List<string>();\n\
    \        var len = 0;\n        while (len < str.Length) {\n            len++;\n\
    \            for (var i = 0; i < str.Length - len; i++) {\n                var\
    \ substr = str.Substring(i, len);\n                result.Add(substr);\n     \
    \       }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2a3088de7ede480182f26d9bf0aa1a3c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2a3088de7ede480182f26d9bf0aa1a3c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977374
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        return AllPrefixes(new StringBuilder(),\
    \ str);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpacvgvp8z.cs(13,16): error CS1501: No overload for method ''AllPrefixes''
    takes 2 arguments

    '
  timestamp: 1659977373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> prefixes = new\
    \ List<string>();\n        foreach (char c in str) {\n            prefixes.AddRange(AllPrefixes(new\
    \ string[] { (char) c, str}));\n        }\n        return prefixes;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpien445dz.cs(15,58): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659977374
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        return str.Aggregate((accumulator,\
    \ current) => accumulator.AddRange(AllPrefixes(current)), new List<string>());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpubv8lmmc.cs(13,89): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpubv8lmmc.cs(13,68): error CS1061: ''char'' does not contain a definition
    for ''AddRange'' and no accessible extension method ''AddRange'' accepting a first
    argument of type ''char'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977374
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> ret = new List<string>();\n\
    \        foreach (string s in AllPrefixes(str, 1, str.Length)) {\n           \
    \ ret.Add(s);\n        }\n        return ret;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp87h77spi.cs(14,30): error CS1501: No overload for method ''AllPrefixes''
    takes 3 arguments

    '
  timestamp: 1659977374
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (str == null)\n         \
    \   return null;\n        List<string> ret = new List<string>();\n        int\
    \ n = str.Length;\n        int k = n;\n        int c = n - 1;\n        while (c\
    \ > 0) {\n            ret.Add(str.Substring(0, c));\n            k -= c;\n   \
    \         c--;\n        }\n        while (c >= 0) {\n            int m = n % c;\n\
    \            ret.Add(str.Substring(m, c));\n            n -= m;\n            c--;\n\
    \        }\n        return ret;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n   \
    \ Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <88dda2d6e62943dbb95b3318c08d8545>:0 \n\nUnhandled Exception:\n\
    System.DivideByZeroException: Attempted to divide by zero.\n  at Problem.AllPrefixes\
    \ (System.String str) [0x0004b] in <88dda2d6e62943dbb95b3318c08d8545>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x0001b] in <88dda2d6e62943dbb95b3318c08d8545>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.DivideByZeroException: Attempted\
    \ to divide by zero.\n  at Problem.AllPrefixes (System.String str) [0x0004b] in\
    \ <88dda2d6e62943dbb95b3318c08d8545>:0 \n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <88dda2d6e62943dbb95b3318c08d8545>:0 \n"
  stdout: ''
  timestamp: 1659977374
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> prefixes = new\
    \ List<string>();\n        if (str == null)\n            return prefixes;\n  \
    \      if (str.Length == 0)\n            return prefixes;\n        List<string>\
    \ prefixes1 = new List<string>(new string[]{str[0]});\n        if (str.Length\
    \ > 1)\n            for (int i = 1; i < str.Length; i++)\n                prefixes1.AddRange(AllPrefixes(str.Substring(0,\
    \ i)));\n        prefixes.AddRange(prefixes1);\n        return prefixes;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprfrqp6h9.cs(18,64): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659977374
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        Debug.Assert(str != null);\n\
    \n        List<string> allPrefixes = new List<string>();\n        int length =\
    \ str.Length;\n\n        // If all characters are the same, there will be no prefixes\n\
    \        if (length == 1)\n        {\n            allPrefixes.Add(str);\n    \
    \        return allPrefixes;\n        }\n\n        // Loop through each character\
    \ and compare it with the first character\n        // of the next string.\n  \
    \      // If we encounter a different character, then add it to the list\n   \
    \     for (int i = 0; i < length - 1; i++)\n        {\n            if (str[i]\
    \ != str[i + 1])\n            {\n                allPrefixes.Add(str.Substring(0,\
    \ i));\n                break;\n            }\n        }\n\n        return allPrefixes;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2fee59ca44784e95bf9b1596cca033ba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2fee59ca44784e95bf9b1596cca033ba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977374
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        int n = str.Length;\n      \
    \  List<string> ret = new List<string>();\n        StringBuilder sb = new StringBuilder();\n\
    \        sb.Append(str);\n        sb.Append(\"\");\n        for (int i = 1; i\
    \ < n; i++) {\n            for (int j = 0; j < i; j++) {\n                sb.Insert(j,\
    \ str[j]);\n            }\n            ret.Add(sb.ToString());\n            sb.Clear();\n\
    \        }\n        return ret;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n   \
    \ Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cf0a2eb4e8574f348f816a931171e32b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cf0a2eb4e8574f348f816a931171e32b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977374
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (str.Length < 2) return new\
    \ List<string>();\n        var prefixes = new List<string>();\n        var prefix\
    \ = new StringBuilder();\n        bool done = false;\n        foreach (var c in\
    \ str) {\n            prefix.Append(c);\n            if (prefix.Length > 1) prefixes.Add(prefix.ToString());\n\
    \            prefix.Length = 0;\n            if (c == str[0]) {\n            \
    \    done = true;\n                prefix.Length++;\n            }\n        }\n\
    \        if (prefix.Length > 0) prefixes.Add(prefix.ToString());\n        return\
    \ prefixes;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <29af27c53acc47b0a91bab0d1b75b04b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <29af27c53acc47b0a91bab0d1b75b04b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977374
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var result = new List<string>();\n\
    \        for (var n = 1; n <= str.Length; n++) {\n            result.Add((new\
    \ string((new string[]{str.Substring(0, n)}))));\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpad6qyuvd.cs(15,37): error CS1503: Argument 1: cannot convert from ''string[]''
    to ''char[]''

    '
  timestamp: 1659977374
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (str == null)\n         \
    \   throw new ArgumentNullException(\"str\");\n        var result = new List<string>();\n\
    \        result.Add(\"\");\n        if (str.Length == 0)\n            return result;\n\
    \        var prefix = \"\";\n        var i = 1;\n        while (i < str.Length)\
    \ {\n            if (i == str.Length) {\n                result.Add(prefix);\n\
    \                return result;\n            }\n            prefix = prefix +\
    \ str[i];\n            i++;\n        }\n        // If we've reached the end of\
    \ the string, \n        // we're done.\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new\
    \ List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new\
    \ string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"\
    asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new\
    \ List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <88dcbf2ce20a4c8ca5e16e24cd666c79>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <88dcbf2ce20a4c8ca5e16e24cd666c79>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977374
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var result = new List<string>();\n\
    \        \n        // Find longest match\n        var prefix = str.TakeWhile(c\
    \ => c != str[0]).ToArray();\n        if (prefix.Length > str.Length)\n      \
    \      result.AddRange(prefix);\n        else\n            result.Add(new string(prefix));\n\
    \        \n        // Find shortest match\n        string suffix = new string(prefix.Reverse().Take(str.Length\
    \ - prefix.Length).ToArray());\n        if (suffix.Length > str.Length)\n    \
    \        result.AddRange(suffix);\n        else\n            result.Add(new string(suffix));\n\
    \        \n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk7bk4524.cs(18,29): error CS1503: Argument 1: cannot convert from ''char[]''
    to ''System.Collections.Generic.IEnumerable<string>''

    /tmp/tmpk7bk4524.cs(25,29): error CS1503: Argument 1: cannot convert from ''string''
    to ''System.Collections.Generic.IEnumerable<string>''

    '
  timestamp: 1659977374
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (str == null || str.Length\
    \ <= 0)\n            throw new ArgumentNullException(\"str\");\n        // initialize\
    \ hash table\n        HashSet<string> prefixes = new HashSet<string>();\n    \
    \    // populate hash table\n        int curLength = str.Length;\n        while\
    \ (curLength > 0) {\n            prefixes.Add(str.Substring(0, curLength));\n\
    \            str = str.Substring(curLength);\n            curLength -= 1;\n  \
    \      }\n        // return result \n        return prefixes.OrderBy(str => str).ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentNullException: Value cannot be null.\n\
    Parameter name: str\n  at Problem.AllPrefixes (System.String str) [0x00017] in\
    \ <7aa1b11eda5d414580959449cb840769>:0 \n  at Problem.Main (System.String[] args)\
    \ [0x00001] in <7aa1b11eda5d414580959449cb840769>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentNullException: Value cannot be null.\nParameter name:\
    \ str\n  at Problem.AllPrefixes (System.String str) [0x00017] in <7aa1b11eda5d414580959449cb840769>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <7aa1b11eda5d414580959449cb840769>:0\
    \ \n"
  stdout: ''
  timestamp: 1659977374
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> prefixes = new\
    \ List<string>();\n        AddPrefixes(prefixes, str, 0, 0);\n        return prefixes;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr0i8j4hw.cs(14,9): error CS0103: The name ''AddPrefixes'' does not exist
    in the current context

    '
  timestamp: 1659977374
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        int len = str.Length;\n    \
    \    Stack<char> strstack = new Stack<char>(str);\n        List<string> result\
    \ = new List<string>();\n        // Build prefixes from str\n        while (true)\
    \ {\n            result.Add(strstack.Count > 0 ? strstack.Pop() : \"\");\n   \
    \         if (strstack.Count == 0) {\n                break;\n            }\n\
    \            char c = strstack.Pop();\n            if (str.Length > len + 1) {\n\
    \                // Stack still has chars - try and pop them out\n           \
    \     while (strstack.Count > 0) {\n                    c = strstack.Pop();\n\
    \                    if (str.Length > len + 1) {\n                        // Stack\
    \ still has chars - try and pop them out\n                        continue;\n\
    \                    }\n                    strstack.Add(c);\n               \
    \     break;\n                }\n            } else {\n                // Stack\
    \ has chars, but we were asked to pop them out - try and build them\n        \
    \        for (int i = 0; i < str.Length - len; i++) {\n                    strstack.Add(str[i]);\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbly2awhx.cs(18,24): error CS0173: Type of conditional expression cannot
    be determined because there is no implicit conversion between ''char'' and ''string''

    /tmp/tmpbly2awhx.cs(31,30): error CS1061: ''Stack<char>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<char>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpbly2awhx.cs(37,30): error CS1061: ''Stack<char>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<char>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659977374
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (string.IsNullOrEmpty(str))\n\
    \            return new List<string>();\n        var stack = new Stack<string>();\n\
    \        foreach (var c in str)\n            if (IsPrefix(c, stack))\n       \
    \         stack.Push(c);\n            else\n                while (stack.Count\
    \ > 0) {\n                    var last = stack.Pop();\n                    yield\
    \ return last;\n                    foreach (var c in str)\n                 \
    \       if (IsPrefix(c, stack)) {\n                            stack.Push(c);\n\
    \                            break;\n                        }\n             \
    \   }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpahuxlrjb.cs(12,32): error CS1624: The body of ''Problem.AllPrefixes(string)''
    cannot be an iterator block because ''List<string>'' is not an iterator interface
    type

    /tmp/tmpahuxlrjb.cs(14,13): error CS1622: Cannot return a value from an iterator.
    Use the yield return statement to return a value, or yield break to end the iteration.

    /tmp/tmpahuxlrjb.cs(17,17): error CS0103: The name ''IsPrefix'' does not exist
    in the current context

    /tmp/tmpahuxlrjb.cs(18,28): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpahuxlrjb.cs(23,34): error CS0136: A local or parameter named ''c'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpahuxlrjb.cs(24,29): error CS0103: The name ''IsPrefix'' does not exist
    in the current context

    /tmp/tmpahuxlrjb.cs(25,40): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659977374
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var allPrefixes = new List<string>();\n\
    \        var currentPrefix = new char[0];\n        var currentPrefixLen = 1;\n\
    \        for (int i = 0; i < str.Length; i++) {\n            currentPrefix[currentPrefixLen]\
    \ = str[i];\n            currentPrefixLen++;\n        }\n        if (str.Length\
    \ == 0) return allPrefixes;\n        for (int i = 0; i < str.Length; i++) {\n\
    \            var newPrefix = currentPrefix;\n            newPrefix[currentPrefixLen]\
    \ = str[i];\n            currentPrefixLen++;\n            allPrefixes.Add(new\
    \ string(newPrefix.Take(currentPrefixLen).ToArray()));\n        }\n        return\
    \ allPrefixes;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <68c4bf1415cc42dc98f7c49e92a7e408>:0 \n\nUnhandled Exception:\n\
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n\
    \  at Problem.AllPrefixes (System.String str) [0x0001e] in <68c4bf1415cc42dc98f7c49e92a7e408>:0\
    \ \n  at Problem.Main (System.String[] args) [0x0001b] in <68c4bf1415cc42dc98f7c49e92a7e408>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index\
    \ was outside the bounds of the array.\n  at Problem.AllPrefixes (System.String\
    \ str) [0x0001e] in <68c4bf1415cc42dc98f7c49e92a7e408>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x0001b] in <68c4bf1415cc42dc98f7c49e92a7e408>:0 \n"
  stdout: ''
  timestamp: 1659977374
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        int minLength = str.Length;\n\
    \        List<string> result = new List<string>();\n        // All prefixes of\
    \ input string are already in result list\n        foreach (string p in str.Take(str.Length))\
    \ {\n            // Update result with current prefix\n            result.Add(p);\n\
    \            // If input string is reduced to its last character without losing\
    \ any prefix\n            if (p.Length > minLength) {\n                // Update\
    \ min length\n                minLength = p.Length;\n            }\n        }\n\
    \        // Add final prefix if input string is at least 1 character\n       \
    \ if (str.Length > minLength) {\n            result.Add(str.Substring(0, minLength));\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpect8ckx8.cs(16,9): error CS0030: Cannot convert type ''char'' to ''string''

    '
  timestamp: 1659977374
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> prefixes = new\
    \ List<string>();\n        if (str == \"\") {\n            return prefixes;\n\
    \        }\n        int n = str.Length;\n        int i = 0;\n        while (i\
    \ < n) {\n            i++;\n            prefixes.Add(str.Substring(0, i));\n \
    \       }\n        return prefixes;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <99d933cd0758439391120eb7f4d4c299>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <99d933cd0758439391120eb7f4d4c299>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977374
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> prefixes = new\
    \ List<string>();\n        // loop through all characters in input string\n  \
    \      for (int i = 0; i < str.Length; i++) {\n            // loop through all\
    \ possible combinations of input string\n            for (int j = i; j <= str.Length\
    \ - i; j++) {\n                // add prefix to prefix list\n                prefixes.Add(str.Substring(i,\
    \ j));\n            }\n        }\n        return prefixes;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new\
    \ List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new\
    \ string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"\
    asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new\
    \ List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9972243d6dd544cc851a6ca45ce1d780>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9972243d6dd544cc851a6ca45ce1d780>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977374
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        // The prefix tree data structure\
    \ is as follows:\n        //\n        // Prefixes is a tree that has all prefixes\
    \ in a string sorted\n        // by length\n        // Prefixes->'a' is a prefix\
    \ of 'abc', so its value would be 1\n        // Prefixes->'ab' is a prefix of\
    \ 'abc', so its value would be 2\n        // Prefixes->'abc' is a prefix of 'abc',\
    \ so its value would be 3\n        //\n        // The prefix tree is a dictionary\
    \ mapping all prefixes of a given string\n        // to their respective values.\n\
    \        \n        List<string> prefixes = new List<string>();\n        \n   \
    \     prefixes.Add(str);\n        \n        // Build prefix tree from prefix string\
    \ and set prefix value to\n        // longest prefix of str.\n        Dictionary<string,\
    \ int> prefixTree = new Dictionary<string, int>();\n        \n        int longest\
    \ = str.Length;\n        int longestPrefix = 0;\n        int longestPrefixValue\
    \ = 0;\n        \n        int prefixLength;\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            prefixLength = i;\n            prefixTree.Add(str.Substring(i,\
    \ 1), prefixLength);\n            if (i > 1) {\n                if (prefixLength\
    \ > longest) {\n                    longest = prefixLength;\n                \
    \    longestPrefix = 1;\n                    longestPrefixValue = prefixTree[str.Substring(0,\
    \ i)];\n                }\n                if (prefixLength == longest) {\n  \
    \                  longestPrefixValue += prefixTree[str.Substring(0, i)];\n  \
    \              }\n            }\n        }\n        prefixes.Add(new string(new\
    \ char[longest].ToArray()));\n        prefixTree[new string(new char[longest].ToArray())]\
    \ = longestPrefixValue;\n        \n        // Recursively build prefixes and prefixTree\n\
    \        List<string> allPrefixes = new List<string>();\n        \n        allPrefixes.Add(prefixes.First());\n\
    \        \n        allPrefixes.AddRange(prefixes.Skip(1));\n        \n       \
    \ foreach (string prefix in prefixes) {\n            Dictionary<string, int> prefixTree\
    \ = new Dictionary<string, int>();\n            \n            prefixTree.Add(prefix,\
    \ prefixTree[prefixTree.First().Value]);\n            \n            int prefixLength;\n\
    \            for (int i = 0; i < prefix.Length; i++) {\n                prefixLength\
    \ = i;\n                prefixTree.Add(prefix.Substring(i, 1), prefixLength);\n\
    \                if (i > 1) {\n                    if (prefixLength > longest)\
    \ {\n                        longest = prefixLength;\n                       \
    \ longestPrefix = 1;\n                        longestPrefixValue = prefixTree[prefix.Substring(0,\
    \ i)];\n                    }\n                    if (prefixLength == longest)\
    \ {\n                        longestPrefixValue += prefixTree[prefix.Substring(0,\
    \ i)];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptjuk68s5.cs(79,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmptjuk68s5.cs(85,2): error CS1513: } expected

    '
  timestamp: 1659977374
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var result = new List<string>();\n\
    \        var n = str.Length;\n        for (int i = 0; i < n; ++i) {\n        \
    \    var prefix = new string[] { str[n - i - 1] };\n            for (int j = i;\
    \ j < n; ++j) {\n                prefix.Append(str[j]);\n                result.Add(prefix);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4ayf4whk.cs(16,41): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmp4ayf4whk.cs(18,17): error CS1929: ''string[]'' does not contain a definition
    for ''Append'' and the best extension method overload ''Queryable.Append<char>(IQueryable<char>,
    char)'' requires a receiver of type ''IQueryable<char>''

    /tmp/tmp4ayf4whk.cs(19,28): error CS1503: Argument 1: cannot convert from ''string[]''
    to ''string''

    '
  timestamp: 1659977374
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (str == null || str.Length\
    \ == 0) return new List<string>();\n        List<string> res = new List<string>();\n\
    \        for(int i=1; i<str.Length; i++) {\n            res.Add(str.Substring(0,\
    \ i));\n        }\n        return res;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b1634460634d426baaea3b7415c24648>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b1634460634d426baaea3b7415c24648>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977374
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var prefixes = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i));\n        }\n        return prefixes;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f2f5f645aa7431cace8aa31774baf6d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f2f5f645aa7431cace8aa31774baf6d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> result = new List<string>();\n\
    \        bool first = true;\n        foreach (char c in str) {\n            if\
    \ (first) {\n                result.Add((new string[]{c.ToString()}));\n     \
    \           first = false;\n            } else {\n                result.Add((new\
    \ string[]{c, c.ToString()}));\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdk28vt4b.cs(17,29): error CS1503: Argument 1: cannot convert from ''string[]''
    to ''string''

    /tmp/tmpdk28vt4b.cs(20,42): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659977374
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        return AllPrefixes(str, str.Length);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt1kqb87x.cs(13,16): error CS1501: No overload for method ''AllPrefixes''
    takes 2 arguments

    '
  timestamp: 1659977371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (str.Length == 0)\n     \
    \       return new List<string>();\n\n        if (str.Length == 1)\n         \
    \   return new List<string> {str[0]};\n\n        var result = new List<string>();\n\
    \        var prefix = new string[1];\n        prefix[0] = str[0];\n\n        result.AddRange(AllPrefixes(str.Remove(0,\
    \ 1)));\n        result.AddRange(AllPrefixes(str.Remove(0, 1)));\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnwj_2p3x.cs(17,38): error CS1950: The best overloaded Add method ''List<string>.Add(string)''
    for the collection initializer has some invalid arguments

    /tmp/tmpnwj_2p3x.cs(17,38): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpnwj_2p3x.cs(21,21): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659977374
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (str == null)\n         \
    \   throw new ArgumentNullException(\"str\");\n\n        List<string> ret = new\
    \ List<string>();\n        Stack<string> stack = new Stack<string>();\n\n    \
    \    foreach (char c in str) {\n            stack.Add(c.ToString());\n       \
    \     while (stack.Count != 0 && stack.Peek() != c) {\n                ret.Add(stack.Pop());\n\
    \            }\n        }\n        return ret;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_quc68vg.cs(20,19): error CS1061: ''Stack<string>'' does not contain a
    definition for ''Add'' and no accessible extension method ''Add'' accepting a
    first argument of type ''Stack<string>'' could be found (are you missing a using
    directive or an assembly reference?)

    /tmp/tmp_quc68vg.cs(21,40): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''string'' and ''char''

    '
  timestamp: 1659977374
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> all = new List<string>();\n\
    \        List<string> prefixes = new List<string>();\n        string current =\
    \ \"\";\n        foreach (char c in str) {\n            current += c;\n      \
    \      while (current.Length > 0) {\n                prefixes.Add(current);\n\
    \                current = current.Substring(0, current.Length - 1);\n       \
    \     }\n            all.Add(current);\n            current = \"\";\n        }\n\
    \        return prefixes;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"\
    asdfgh\")).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\"\
    , (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n\
    \    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new string[]{(string)\"\
    W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <09c76ed371b642d1ad9cffb8332ea3f6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <09c76ed371b642d1ad9cffb8332ea3f6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (string.IsNullOrEmpty(str))\
    \ {\n            return new List<string>();\n        }\n\n        // Find the\
    \ longest matching prefix\n        int[] matches = new int[str.Length];\n    \
    \    int longest = str.Length;\n        for (int i = 0; i < str.Length; i++) {\n\
    \            int j = i;\n            while (j < str.Length && str[j] == str[i])\
    \ {\n                j++;\n            }\n            matches[i] = j;\n      \
    \      longest = j;\n        }\n\n        // Create an array with only the prefixes\
    \ found\n        List<string> prefixes = new List<string>(longest);\n        for\
    \ (int i = 0; i < longest; i++) {\n            prefixes.Add(new string(str, i,\
    \ matches[i] - i));\n        }\n        return prefixes;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new\
    \ List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new\
    \ string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"\
    asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new\
    \ List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpucn5zrz4.cs(32,37): error CS1503: Argument 1: cannot convert from ''string''
    to ''char[]''

    '
  timestamp: 1659977374
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        return AllPrefixes(str, 1);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg9z16e4u.cs(13,16): error CS1501: No overload for method ''AllPrefixes''
    takes 2 arguments

    '
  timestamp: 1659977374
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (string.IsNullOrEmpty(str))\n\
    \            return new List<string>();\n        List<string> prefixes = new List<string>();\n\
    \        prefixes.AddRange(new List<string>() {str});\n        while (prefixes.Count\
    \ > 1)\n        {\n            prefixes.RemoveAt(0);\n            List<string>\
    \ newPrefixes = new List<string>();\n            for (int i = 0; i < prefixes.Count;\
    \ i++)\n            {\n                newPrefixes.AddRange(prefixes.Skip(i +\
    \ 1).Select(s => s.Substring(0, s.Length - 1)));\n            }\n            prefixes.Clear();\n\
    \            prefixes.AddRange(newPrefixes);\n        }\n        return prefixes.ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <04a0d27a04a64004b43a35375ea0efeb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <04a0d27a04a64004b43a35375ea0efeb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977375
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var allPrefixes = new List<string>();\n\
    \        string shortest = str;\n        string longest = str;\n        if (str.Length\
    \ == 1) {\n            return allPrefixes;\n        }\n        var n = str.Length;\n\
    \        int i = 0;\n        while (i < n) {\n            allPrefixes.Add(str.Substring(i++,\
    \ Math.Min(str.Length - i - 1, n)));\n            i += n;\n            n = str.Length\
    \ - i;\n        }\n        allPrefixes.Add(longest);\n        return allPrefixes;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d8a3c2eedacc4e9994e3a2cda2949b5b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d8a3c2eedacc4e9994e3a2cda2949b5b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (str.Length == 0) return\
    \ new List<string>(new string[0]);\n        int[] prefix = new int[str.Length];\n\
    \        for (int i = 0, j = 0; i < str.Length; i++) {\n            prefix[i]\
    \ = j;\n            for (; j < str.Length && str[i] == str[j]; j++)\n        \
    \        ;\n        }\n        List<string> results = new List<string>();\n  \
    \      int j = 0;\n        for (int i = 1, k = prefix.Max(); i <= prefix.Length;\
    \ i++) {\n            bool inside = false;\n            for (; j < prefix.Length\
    \ && prefix[j] == i; j++)\n                inside = inside;\n            if (inside)\
    \ {\n                results.Add(new string(str.Take(k - i).ToArray()));\n   \
    \             j++;\n            }\n        }\n        return results;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkco1w8bu.cs(15,25): error CS0136: A local or parameter named ''j'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpkco1w8bu.cs(25,17): warning CS1717: Assignment made to same variable;
    did you mean to assign something else?

    '
  timestamp: 1659977375
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> prefixes = new\
    \ List<string>();\n        int startIndex = 0;\n        int currIndex = -1;\n\
    \        while (startIndex < str.Length) {\n            currIndex = str.IndexOf(str[startIndex],\
    \ currIndex + 1);\n            if (currIndex != -1) {\n                prefixes.Add(str.Substring(startIndex,\
    \ currIndex - startIndex));\n                startIndex = currIndex + 1;\n   \
    \         }\n        }\n        prefixes.Add(str.Substring(startIndex));\n   \
    \     return prefixes;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"\
    asdfgh\")).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\"\
    , (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n\
    \    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new string[]{(string)\"\
    W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <147da410799346e1a0936be1e94a8068>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <147da410799346e1a0936be1e94a8068>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> prefixes = new\
    \ List<string>();\n        prefixes.Add(string.Empty);\n        prefixes.Add(str);\n\
    \        for (int i = 1; i < str.Length; i++) {\n            prefixes.AddRange(AllPrefixes(str,\
    \ i));\n        }\n        return prefixes;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp409_9soa.cs(17,31): error CS1501: No overload for method ''AllPrefixes''
    takes 2 arguments

    '
  timestamp: 1659977375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var prefixes = new List<string>();\n\
    \n        // add first prefix\n        prefixes.Add((new string[]{str}));\n\n\
    \        // add remaining prefixes\n        var longest = str.Length;\n      \
    \  foreach (var prefix in AllPrefixes(str.Substring(1))) {\n            foreach\
    \ (var c in prefix) {\n                prefixes.Add((new string[]{prefix + c}));\n\
    \            }\n            if (prefixes.Count > longest) {\n                longest\
    \ = prefixes.Count;\n            }\n        }\n\n        return prefixes;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc1t26lj1.cs(16,23): error CS1503: Argument 1: cannot convert from ''string[]''
    to ''string''

    /tmp/tmpc1t26lj1.cs(22,31): error CS1503: Argument 1: cannot convert from ''string[]''
    to ''string''

    '
  timestamp: 1659977375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        Debug.Assert(str != null);\n\
    \        Debug.Assert(str.Length > 0);\n        var result = new List<string>();\n\
    \        // All the possible prefixes\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            result.Add(str.Substring(0, i));\n        }\n        Debug.Assert(result.Count\
    \ > 0);\n        // Now find the shortest prefix to all the possible prefixes\n\
    \        var minPrefixLength = (from x in result\n                           \
    \    orderby x.Length ascending\n                               select x).First().Length;\n\
    \        for (int i = 0; i < result.Count; i++) {\n            // Find the minimum\
    \ length prefix\n            string prefix = result[i];\n            while (prefix.Length\
    \ < minPrefixLength) {\n                var newPrefix = (from x in result\n  \
    \                              orderby x.Length descending\n                 \
    \               select x).First();\n                prefix = newPrefix.Substring(0,\
    \ prefix.Length);\n            }\n            // Make sure the prefix is of the\
    \ right length\n            int prefixLength = prefix.Length;\n            if\
    \ (prefixLength < minPrefixLength) {\n                prefix = prefix.Substring(0,\
    \ minPrefixLength);\n            }\n            result.RemoveAt(i);\n        \
    \    result.Insert(i, prefix);\n        }\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\"\
    )).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new\
    \ List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"\
    asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.AllPrefixes (System.String\
    \ str) [0x00000] in <1c91aa49e856434b9bc4b57b47f0d16a>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1c91aa49e856434b9bc4b57b47f0d16a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.AllPrefixes (System.String\
    \ str) [0x00000] in <1c91aa49e856434b9bc4b57b47f0d16a>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1c91aa49e856434b9bc4b57b47f0d16a>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.First[TSource]\
    \ (System.Collections.Gen"
  stdout: ''
  timestamp: 1659977375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> ret = new List<string>();\n\
    \        foreach(char c in str) {\n            ret.AddRange(AllPrefixes(new string[]{c,\
    \ c.ToString()}));\n        }\n        return ret;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnejh44kt.cs(15,51): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659977375
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (str == null)\n         \
    \   throw new ArgumentNullException(\"str\");\n\n        List<string> prefixes\
    \ = new List<string>();\n        for (int i = 0; i < str.Length; i++)\n      \
    \      prefixes.Add(str.Substring(0, i));\n\n        return prefixes;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <01e49107e01743d2b669e0a5656cfa16>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <01e49107e01743d2b669e0a5656cfa16>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977375
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (str == null || str.Length\
    \ == 0) return new List<string>();\n        List<string> lst = new List<string>();\n\
    \        string prefix = \"\";\n        for (int i = 0; i < str.Length; i++) {\n\
    \            lst.Add(prefix);\n            prefix = prefix + str[i];\n       \
    \ }\n        return lst;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"\
    asdfgh\")).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\"\
    , (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n\
    \    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new string[]{(string)\"\
    W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <76be2ab0b5b44d31bdae80527797d8de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <76be2ab0b5b44d31bdae80527797d8de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> list = new List<string>();\n\
    \        str = str.ToLower();\n        // Find all permutations of str\n     \
    \   List<int> perms = GetPerms(str.Length);\n        // Loop over each permutation\n\
    \        foreach (int perm in perms) {\n            // Find longest prefix\n \
    \           int maxLen = FindLongestPrefix(str, perm, perms);\n            if\
    \ (maxLen != 0) {\n                // Loop over all possible substrings of length\
    \ maxLen\n                for (int i = 0; i < str.Length - maxLen; ++i) {\n  \
    \                  list.Add(str.Substring(i, maxLen));\n                }\n  \
    \          }\n        }\n        return list;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzw1fvi94.cs(16,27): error CS0103: The name ''GetPerms'' does not exist
    in the current context

    /tmp/tmpzw1fvi94.cs(20,26): error CS0103: The name ''FindLongestPrefix'' does
    not exist in the current context

    '
  timestamp: 1659977375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var result = new List<string>();\n\
    \        AllPrefixes(str, \"\", result);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new\
    \ List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new\
    \ string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"\
    asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new\
    \ List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwh9ar4n3.cs(14,9): error CS1501: No overload for method ''AllPrefixes''
    takes 3 arguments

    '
  timestamp: 1659977375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        Debug.Assert(str.Length > 0);\n\
    \        if (str.Length == 1) return new[] { str };\n        string prefix = str.Substring(0,\
    \ 1);\n        List<string> prefixes = AllPrefixes(str.Substring(1));\n      \
    \  List<string> result = new List<string>();\n        result.Add(prefix);\n  \
    \      foreach (string prefix2 in prefixes) {\n            result.AddRange(new\
    \ string[] { prefix + (string)prefix2 });\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpti_p2xy_.cs(14,37): error CS0029: Cannot implicitly convert type ''string[]''
    to ''System.Collections.Generic.List<string>''

    '
  timestamp: 1659977375
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var allPrefixes = new List<string>();\n\
    \        foreach(var a in str) {\n            allPrefixes.AddRange(AllPrefixes(a\
    \ + \"z\"));\n        }\n        allPrefixes.Add(str);\n        return allPrefixes;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b104af159d7d4b4d9202ea0c81660bf4>:0 \n"
  stdout: None
  timestamp: 1659977380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var prefixes = new List<string>();\n\
    \        if (str == null)\n            return prefixes;\n        if (str.Length\
    \ == 0)\n            return prefixes;\n\n        prefixes.Add(\"a\");\n      \
    \  prefixes.Add(\"b\");\n        prefixes.Add(\"c\");\n\n        var curr = prefixes.First();\n\
    \        prefixes.RemoveAt(0);\n\n        var lastPrefixIndex = str.Length - 1;\n\
    \        while (lastPrefixIndex >= 0) {\n            var lastPrefix = new string(str,\
    \ lastPrefixIndex, 1);\n            if (lastPrefix != curr && lastPrefix != str.Substring(0,\
    \ lastPrefixIndex)) {\n                prefixes.Insert(prefixes.Count, curr);\n\
    \                curr = lastPrefix;\n                prefixes.RemoveAt(prefixes.Count\
    \ - 1);\n            }\n            lastPrefixIndex--;\n        }\n\n        return\
    \ prefixes;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmputy7c_x3.cs(28,41): error CS1503: Argument 1: cannot convert from ''string''
    to ''char[]''

    '
  timestamp: 1659977375
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        // Make an array of all characters\
    \ in the string\n        char[] chars = str.ToCharArray();\n        // Initialize\
    \ prefix array\n        List<string> prefixes = new List<string>();\n        //\
    \ While not at the end\n        while (chars.Length > 0) {\n            // Add\
    \ the prefix to array of prefixes\n            prefixes.Add(new string(chars.TakeWhile(x\
    \ => x != chars[0]).ToArray()));\n            // Delete the first element from\
    \ the array\n            chars = chars.SkipWhile(x => x != chars[0]).ToArray();\n\
    \        }\n        // Return array of prefixes\n        return prefixes;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a7eca13405504c2e9fb73ed7dfe95e34>:0 \n"
  stdout: None
  timestamp: 1659977380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        int n = str.Length;\n      \
    \  List<string> result = new List<string>();\n        for (int i = 0; i < n; i++)\
    \ {\n            result.Add(new string(str, 0, i));\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyadk02qq.cs(16,35): error CS1503: Argument 1: cannot convert from ''string''
    to ''char[]''

    '
  timestamp: 1659977375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (string.IsNullOrEmpty(str))\n\
    \            return new List<string>();\n        int len = str.Length;\n     \
    \   List<string> prefixes = new List<string>();\n        // Add prefix to list\
    \ if it is a permutation of the input string\n        // >>> AllPrefixes(\"ab\"\
    ) -> [\"a\"]\n        for (int i = 0; i < len; i++) {\n            if (string.IsNullOrEmpty(prefixes))\n\
    \                prefixes.Add(\"\");\n            for (int j = 0; j < i; j++)\
    \ {\n                if (str[i] == str[j])\n                    continue;\n  \
    \              if (prefixes.Contains(prefixes[j].Substring(0, prefixes[j].Length\
    \ + 1)))\n                    continue;\n                prefixes.Add((prefixes[j].Length\
    \ == 0 ? prefixes[j] : prefixes[j].Substring(0, prefixes[j].Length + 1)) + str[i]);\n\
    \            }\n        }\n        return prefixes;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new\
    \ List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new\
    \ string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"\
    asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new\
    \ List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpohlh8g9g.cs(20,38): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<string>''
    to ''string''

    '
  timestamp: 1659977375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var result = new List<string>();\n\
    \        var prefixes = new Dictionary<char, string>();\n        for (int i =\
    \ 0; i < str.Length; i++) {\n            prefixes.Add(str[i], '');\n        }\n\
    \        foreach (var pair in prefixes) {\n            if (pair.Value.Length >\
    \ result.Count)\n                result.Add(pair.Value);\n            else {\n\
    \                string prefix = pair.Value.Substring(1);\n                if\
    \ (!result.Any(p => p.StartsWith(prefix)))\n                    result.Add(pair.Value);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_qp7z50v.cs(16,34): error CS1011: Empty character literal

    '
  timestamp: 1659977375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        int shortestLength = str.Length;\n\
    \        List<string> result = new List<string>();\n        foreach (string prefix\
    \ in AllPrefixesHelper(str))\n            if (prefix.Length < shortestLength)\
    \ shortestLength = prefix.Length;\n            else\n                result.Add(prefix);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"\
    asdfgh\")).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\"\
    , (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n\
    \    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new string[]{(string)\"\
    W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0xkoefcg.cs(15,35): error CS0103: The name ''AllPrefixesHelper'' does
    not exist in the current context

    '
  timestamp: 1659977375
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> prefix = new List<string>();\n\
    \        bool first = true;\n        foreach (char c in str) {\n            if\
    \ (!first) prefix.Add(c.ToString());\n            first = false;\n        }\n\
    \        List<string> results = new List<string>();\n        foreach (string s\
    \ in prefix) {\n            if (s.Length > 0) {\n                results.Add(s);\n\
    \                prefix = new List<string>();\n            }\n        }\n    \
    \    return results;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"\
    asdfgh\")).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\"\
    , (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n\
    \    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new string[]{(string)\"\
    W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <482545089c9c4405b21ad75ef05cf6f3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <482545089c9c4405b21ad75ef05cf6f3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        // Create an array of the characters\
    \ in the string\n        var charArray = str.ToCharArray();\n        // Create\
    \ an array of unique prefixes by looping through the characters in the string\n\
    \        var prefixes = charArray.GroupBy(c => c).Select(g => new string(g.ToArray()));\n\
    \        // Return array list\n        return prefixes;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new\
    \ List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new\
    \ string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"\
    asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new\
    \ List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2_8bshpf.cs(18,16): error CS0266: Cannot implicitly convert type ''System.Collections.Generic.IEnumerable<string>''
    to ''System.Collections.Generic.List<string>''. An explicit conversion exists
    (are you missing a cast?)

    '
  timestamp: 1659977375
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var result = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            var temp = str;\n\
    \            var prefix = \"\";\n            for (int j = i; j < str.Length; j++)\
    \ {\n                temp += str[j];\n                prefix += str[j];\n    \
    \        }\n            result.Add(prefix);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c5316cd1038c4d4789900f412a2cfcb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c5316cd1038c4d4789900f412a2cfcb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977376
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        string longest = str;\n    \
    \    string shortest = new string(str.Take(str.Length - 1).ToArray());\n     \
    \   if (shortest == \"\") return new List<string>();\n        List<string> result\
    \ = new List<string>();\n        string longestPrefix = \"\";\n        foreach\
    \ (string s in AllPrefixes(shortest)) {\n            bool isLongestMatch = (longestPrefix.Length\
    \ + s.Length >= longest.Length);\n            if (isLongestMatch) {\n        \
    \        longestPrefix = s;\n            }\n            result.Add(\"\" + s +\
    \ longestPrefix);\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new\
    \ List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new\
    \ string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"\
    asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new\
    \ List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c909f55e76bf470ab981b3ac0e793bbe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c909f55e76bf470ab981b3ac0e793bbe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> prefixes = new\
    \ List<string>();\n        string prefix;\n        for (int i = 0; i < str.Length;\
    \ i++)\n            prefix = new string(' ', str.Length - 1 - i);\n          \
    \  prefixes.Add(prefix);\n            prefixes.Add(prefix + new string(str[i]));\n\
    \        return prefixes;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"\
    asdfgh\")).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\"\
    , (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n\
    \    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new string[]{(string)\"\
    W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbpbj66u7.cs(18,50): error CS0103: The name ''i'' does not exist in the
    current context

    /tmp/tmpbpbj66u7.cs(17,26): error CS0165: Use of unassigned local variable ''prefix''

    '
  timestamp: 1659977375
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        StringBuilder sb = new StringBuilder();\n\
    \        int start = 0;\n        while (start < str.Length) {\n            int\
    \ index = str.IndexOf(str[start], start);\n            if (index > start) {\n\
    \                sb.Append(str.Substring(start, index));\n                start\
    \ = index;\n            }\n        }\n        sb.Append(str.Substring(start));\n\
    \        return AllPrefixes(sb.ToString());\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659977381
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (str.Length == 0)\n     \
    \       return new List<string>();\n\n        List<string> prefixes = new List<string>();\n\
    \        foreach (char c in str)\n            prefixes.AddRange(AllPrefixes(str.Substring(0,\
    \ str.Length - 1)).Select(prefix => prefix + (char)(c + 1)));\n\n        return\
    \ prefixes;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <70a6af26c2f84151bdd8822fe7afa60a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <70a6af26c2f84151bdd8822fe7afa60a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var res = new List<string>();\n\
    \        var prefixesList = new List<string>();\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            prefixesList.Add(str.Substring(0, i));\n        }\n    \
    \    var prefixes = prefixesList.Distinct().ToArray();\n        var prefixCount\
    \ = prefixes.Count();\n        foreach (var prefix in prefixes) {\n          \
    \  var suffix = str.Substring(prefix.Length, str.Length - prefix.Length);\n  \
    \          var prefixCount = prefixesList.Count();\n            if (suffix ==\
    \ \"\") {\n                res.Add(prefix);\n                continue;\n     \
    \       }\n            for (int j = 1; j < prefixCount; j++) {\n             \
    \   if (suffix == prefixesList[j - 1]) {\n                    var suffix = str.Substring(prefix.Length\
    \ + j, str.Length - prefix.Length - j);\n                    res.Add(prefix +\
    \ suffix);\n                    prefixesList.RemoveAt(j);\n                  \
    \  prefixCount = prefixesList.Count();\n                    break;\n         \
    \       }\n            }\n        }\n        return res;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new\
    \ List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new\
    \ string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"\
    asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new\
    \ List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2rups9r1.cs(22,17): error CS0136: A local or parameter named ''prefixCount''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp2rups9r1.cs(29,25): error CS0136: A local or parameter named ''suffix''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659977375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> all = new List<string>();\n\
    \        string tmp = str;\n        do {\n            all.Add(tmp);\n        \
    \    tmp = tmp.Substring(1);\n        } while (tmp.Length > 0);\n        return\
    \ all;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: startIndex\
    \ cannot be larger than length of string.\nParameter name: startIndex\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0001d] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.String.Substring (System.Int32 startIndex) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.AllPrefixes (System.String str) [0x00012] in <5c8c1d7389154ad798b44d99322440bf>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <5c8c1d7389154ad798b44d99322440bf>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: startIndex\
    \ cannot be larger than length of string.\nParameter name: startIndex\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0001d] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.String.Substring (System.Int32 startIndex) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.AllPrefixes (System.String str) [0x00012] in <5c8c1d7389154ad798b44d99322440bf>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <5c8c1d7389154ad798b44d99322440bf>:0\
    \ \n"
  stdout: ''
  timestamp: 1659977376
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (str == null) return null;\n\
    \        List<string> prefixes = new List<string>();\n        if (str.Length <\
    \ 2) return prefixes;\n        char firstChar = str[0];\n        if (str.Length\
    \ == 2) {\n            prefixes.Add(firstChar.ToString());\n            return\
    \ prefixes;\n        }\n        // First try with first two chars\n        prefixes\
    \ = AllPrefixes(str.Substring(1));\n        // Now try with last two chars\n \
    \       if (prefixes.Count > 0) {\n            prefixes.Add(prefixes[prefixes.Count\
    \ - 1] + firstChar.ToString());\n            return prefixes;\n        }\n   \
    \     return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4fcb0b60e2194a49b25303acce984bb0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4fcb0b60e2194a49b25303acce984bb0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (str == null) return new\
    \ List<string>();\n\n        // Recursion termination\n        if (str.Length\
    \ <= 1) return new List<string>(new string[]{str});\n\n        // Get first character\
    \ and add prefix recursively\n        var prefix = str.Take(1);\n        var prefixes\
    \ = AllPrefixes(str.Skip(1));\n\n        // Add prefix to prefixes list if prefix\
    \ is not already in there\n        return prefixes.Where(p => !prefix.Contains(p)).ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppcqa8qz5.cs(20,36): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.IEnumerable<char>''
    to ''string''

    /tmp/tmppcqa8qz5.cs(23,37): error CS1929: ''IEnumerable<char>'' does not contain
    a definition for ''Contains'' and the best extension method overload ''ParallelEnumerable.Contains<string>(ParallelQuery<string>,
    string)'' requires a receiver of type ''ParallelQuery<string>''

    '
  timestamp: 1659977376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var result = new List<string>();\n\
    \        var prefixes = new List<string>(str.Select(c => c).TakeWhile(c => c !=\
    \ '.'));\n        foreach (var prefix in prefixes) {\n            foreach (var\
    \ substring in AllPrefixes(str.Substring(0, prefix.Length))) {\n             \
    \   result.Add(prefix + substring);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4g31ettq.cs(14,41): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.IEnumerable<char>''
    to ''int''

    '
  timestamp: 1659977376
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (str == null || str.Length\
    \ == 0) return new List<string>();\n\n        List<string> prefixes = new List<string>();\n\
    \        string longestPrefix = str;\n        int longestPrefixLength = str.Length;\n\
    \n        for (int i = 0; i < str.Length; i++)\n        {\n            prefixes.Add(str.Substring(0,\
    \ i));\n\n            int lengthToEnd = longestPrefixLength - i;\n\n         \
    \   if (lengthToEnd < 0)\n            {\n                continue;\n         \
    \   }\n\n            string prefix = str.Substring(0, i);\n            string\
    \ suffix = str.Substring(i);\n\n            bool isLargerThanLongest = prefix.Length\
    \ > longestPrefix.Length;\n            bool isLargerThanPrev = longestPrefix.Length\
    \ > prefix.Length;\n\n            string tempLongestPrefix = longestPrefix;\n\
    \            longestPrefix = prefix;\n            longestPrefixLength = prefix.Length;\n\
    \n            if (isLargerThanPrev && !isLargerThanLongest)\n            {\n \
    \               longestPrefix = tempLongestPrefix;\n                longestPrefixLength\
    \ = tempLongestPrefix.Length;\n                prefixes.Add(prefix);\n       \
    \     }\n        }\n\n        return prefixes;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a8dcf533f76549a28ea10cbf91a210cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a8dcf533f76549a28ea10cbf91a210cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> result = new List<string>();\n\
    \        AllPrefixesRecursive(str, 0, new List<string>(new string[0]), result);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"\
    asdfgh\")).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\"\
    , (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n\
    \    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new string[]{(string)\"\
    W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpima7nwap.cs(14,9): error CS0103: The name ''AllPrefixesRecursive'' does
    not exist in the current context

    '
  timestamp: 1659977376
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        // The algorithm takes O(N)\
    \ time and O(1) space.\n        var allPrefixes = new List<string>();\n      \
    \  // Find the prefix of the longest possible string\n        // The longest prefix\
    \ will be the prefix with minimum length\n        var maxLen = str.Length;\n \
    \       var prefixLen = 0;\n        while (prefixLen < maxLen) {\n           \
    \ prefixLen++;\n            allPrefixes.Add(str.Substring(0, prefixLen));\n  \
    \      }\n        // Now go through the input string again to see what prefixes\
    \ have already been used.\n        // Note that we need to check whether our current\
    \ string is equal to the prefix \n        // of the longest possible string, because\
    \ once we find that the string is already \n        // prefixed, we don't need\
    \ to keep looking.\n        // Since prefixes only get used up to the length of\
    \ the longest possible string, \n        // we are guaranteed to find all prefixes\
    \ using this algorithm.\n        for (var i = 1; i < str.Length; i++) {\n    \
    \        // Find out what prefix the string has already used\n            var\
    \ prefixUsedAtPosition = str.Substring(i, maxLen-i);\n            // If we found\
    \ a prefix that is already used, skip this string\n            if (allPrefixes.Any(prefix\
    \ => prefixUsedAtPosition == prefix)) {\n                continue;\n         \
    \   }\n            // If we found a prefix that hasn't already been used, add\
    \ it to the list\n            allPrefixes.Add(prefixUsedAtPosition);\n       \
    \     // If we are at the end of the string, we're done\n            if (i ==\
    \ str.Length - 1) {\n                break;\n            }\n        }\n      \
    \  return allPrefixes;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"\
    asdfgh\")).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\"\
    , (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n\
    \    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new string[]{(string)\"\
    W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <960bae29b44e4616aab943036fe13eaf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <960bae29b44e4616aab943036fe13eaf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        Debug.Assert(str.Length > 0);\n\
    \        List<string> result = new List<string>();\n        int n = str.Length;\n\
    \        if (n == 0) return result;\n        // Start with empty prefix (first\
    \ char in string minus last char of previous prefix)\n        for (int i = 0;\
    \ i < str.Length - 1; i++) {\n            result.Add(str.Substring(0, i));\n \
    \       }\n        string prefix = str.Substring(0, str.Length - 1);\n       \
    \ List<string> shortest = new List<string>();\n        // Add shortest prefix\
    \ of string\n        bool incomplete = false;\n        for (int i = 0; i < n;\
    \ i++) {\n            List<string> prefix = new List<string>();\n            while\
    \ (prefix.Count < result.Count && !incomplete) {\n                prefix.Add(prefix);\n\
    \                incomplete = IsPrefixComplete(prefix, result);\n            }\n\
    \            string current = string.Empty;\n            for (int j = 0; j < prefix.Count;\
    \ j++) {\n                current = prefix + result[j];\n                if (current.Length\
    \ < shortest.Count) {\n                    shortest.Add(current);\n          \
    \      }\n            }\n            if (incomplete) {\n                incomplete\
    \ = false;\n            }\n        }\n        for (int i = 0; i < shortest.Count;\
    \ i++) {\n            result.Insert(0, shortest[i]);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk6a_ivnt.cs(26,26): error CS0136: A local or parameter named ''prefix''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpk6a_ivnt.cs(28,28): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<string>''
    to ''string''

    /tmp/tmpk6a_ivnt.cs(29,30): error CS0103: The name ''IsPrefixComplete'' does not
    exist in the current context

    '
  timestamp: 1659977376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (str == null) return null;\n\
    \        var res = new List<string>();\n        foreach (var c in str) {\n   \
    \         var prefix = AllPrefixesHelper(str.Substring(0, str.Length - 1), c);\n\
    \            res.AddRange(prefix.ToList());\n        }\n        return res;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa_a1qmi0.cs(16,26): error CS0103: The name ''AllPrefixesHelper'' does
    not exist in the current context

    '
  timestamp: 1659977376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var prefixes = new List<string>();\n\
    \        int len = str.Length;\n        // All prefixes of length 1 are equal\
    \ to input string.\n        // A prefix of length 2 can be obtained by removing\
    \ one character\n        // from the input string and adding it again to get a\
    \ prefix of length 3.\n        // A prefix of length 3 can be obtained by removing\
    \ two characters\n        // from the input string and adding them again to get\
    \ a prefix of length 4.\n        // A prefix of length 4 can be obtained by removing\
    \ three characters\n        // from the input string and adding them again to\
    \ get a prefix of length 5.\n        for (int i = 0; i < len; i++) {\n       \
    \     prefixes.Add(new string(new char[]{str[i]}));\n            if (i > 0 &&\
    \ len - i == 1) {\n                prefixes.Add(new string(new char[]{str[i -\
    \ 1]}));\n            }\n            if (i > 0 && len - i == 2) {\n          \
    \      prefixes.Add(new string(new char[]{str[i - 2]}));\n            }\n    \
    \        if (i > 0 && len - i == 3) {\n                prefixes.Add(new string(new\
    \ char[]{str[i - 3]}));\n            }\n            if (i > 0 && len - i == 4)\
    \ {\n                prefixes.Add(new string(new char[]{str[i - 4]}));\n     \
    \       }\n            if (i > 0 && len - i == 5) {\n                prefixes.Add(new\
    \ string(new char[]{str[i - 5]}));\n            }\n        }\n        return prefixes;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0bac37b1345b47af983c05fe5bd52727>:0 \n\nUnhandled Exception:\n\
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n\
    \  at Problem.AllPrefixes (System.String str) [0x00110] in <0bac37b1345b47af983c05fe5bd52727>:0\
    \ \n  at Problem.Main (System.String[] args) [0x0001b] in <0bac37b1345b47af983c05fe5bd52727>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index\
    \ was outside the bounds of the array.\n  at Problem.AllPrefixes (System.String\
    \ str) [0x00110] in <0bac37b1345b47af983c05fe5bd52727>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x0001b] in <0bac37b1345b47af983c05fe5bd52727>:0 \n"
  stdout: ''
  timestamp: 1659977376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (str.Length < 1) throw new\
    \ ArgumentOutOfRangeException(\"str\");\n\n        var prefixes = new List<string>();\n\
    \        var lastIndex = str.Length - 1;\n        var currentIndex = 0;\n    \
    \    while (currentIndex < lastIndex) {\n            var prefix = str.Substring(currentIndex,\
    \ 1);\n            prefixes.Add(prefix);\n            currentIndex++;\n      \
    \  }\n\n        return prefixes;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument\
    \ was out of the range of valid values.\nParameter name: str\n  at Problem.AllPrefixes\
    \ (System.String str) [0x0000e] in <dff01abe1ff84942822065710e8a6d2e>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x00001] in <dff01abe1ff84942822065710e8a6d2e>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified\
    \ argument was out of the range of valid values.\nParameter name: str\n  at Problem.AllPrefixes\
    \ (System.String str) [0x0000e] in <dff01abe1ff84942822065710e8a6d2e>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x00001] in <dff01abe1ff84942822065710e8a6d2e>:0\
    \ \n"
  stdout: ''
  timestamp: 1659977376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> prefixes = new\
    \ List<string>();\n\n        if (str == null || str.Length == 0)\n           \
    \ return prefixes;\n\n        List<char> chars = new List<char>(str);\n      \
    \  chars.RemoveAll(x => x == '0');\n        Debug.Assert(chars.Count != 0 && chars.Count\
    \ != 1);\n\n        Debug.Assert(chars.Sum() > 0);\n\n        int length = 0;\n\
    \n        for (int i = 0; i < chars.Count; i++) {\n            if (chars[i] ==\
    \ '1')\n                length++;\n            else {\n                int newLength\
    \ = 1;\n                while (newLength <= length) {\n                    if\
    \ (newLength == length) {\n                        prefixes.Add(string.Empty);\n\
    \                        break;\n                    }\n\n                   \
    \ prefixes.Add(new string(chars.Take(newLength).ToArray()));\n               \
    \     length = newLength;\n                }\n                length = 0;\n  \
    \          }\n        }\n\n        return prefixes;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new\
    \ List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new\
    \ string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"\
    asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new\
    \ List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphgpp7j89.cs(22,22): error CS1929: ''List<char>'' does not contain a definition
    for ''Sum'' and the best extension method overload ''ParallelEnumerable.Sum(ParallelQuery<int>)''
    requires a receiver of type ''ParallelQuery<int>''

    '
  timestamp: 1659977376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (str.Length <= 1) return\
    \ new List<string>(str);\n        List<string> prefixes = new List<string>();\n\
    \        prefixes.AddRange(AllPrefixes(str.Substring(0, str.Length - 1)));\n \
    \       prefixes.Add(str);\n        return prefixes;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new\
    \ List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new\
    \ string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"\
    asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new\
    \ List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjwuo35wh.cs(13,54): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    '
  timestamp: 1659977376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> result = new List<string>();\n\
    \        result.AddRange(AllPrefixes(str, 0));\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8jr8ouc3.cs(14,25): error CS1501: No overload for method ''AllPrefixes''
    takes 2 arguments

    '
  timestamp: 1659977376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        return AllPrefixes(str, 0);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvvx3ilpw.cs(13,16): error CS1501: No overload for method ''AllPrefixes''
    takes 2 arguments

    '
  timestamp: 1659977371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var prefixes = Enumerable.Range(0,\
    \ str.Length - 1).Select(i => str.Substring(i)).ToList();\n        while (prefixes.Count\
    \ == 1) {\n            prefixes = prefixes.Where(p => !str.StartsWith(p)).ToList();\n\
    \        }\n        return prefixes.Select(p => p.Substring(0, p.Length - 1)).ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument\
    \ was out of the range of valid values.\nParameter name: count\n  at System.Linq.Enumerable.Range\
    \ (System.Int32 start, System.Int32 count) [0x00020] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.AllPrefixes (System.String str) [0x0001a] in <876ca78834bb49d2afd743746e6dd356>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <876ca78834bb49d2afd743746e6dd356>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified\
    \ argument was out of the range of valid values.\nParameter name: count\n  at\
    \ System.Linq.Enumerable.Range (System.Int32 start, System.Int32 count) [0x00020]\
    \ in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.AllPrefixes (System.String\
    \ str) [0x0001a] in <876ca78834bb49d2afd743746e6dd356>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <876ca78834bb49d2afd743746e6dd356>:0 \n"
  stdout: ''
  timestamp: 1659977376
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (string.IsNullOrEmpty(str))\n\
    \            return new List<string>();\n        var ret = new List<string>();\n\
    \        var start = str.Length > 0 ? 1 : 0;\n        var longest = str.Length;\n\
    \        for (var i = start; i < str.Length; i++) {\n            var prefix =\
    \ str.Substring(start, i - start);\n            if (ret.Contains(prefix))\n  \
    \              continue;\n            var newLen = longest - prefix.Length;\n\
    \            if (newLen > ret.Count)\n                ret.Add(prefix);\n     \
    \       else {\n                ret.Add(prefix + ret.FirstOrDefault());\n    \
    \            break;\n            }\n        }\n        return ret;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\"\
    )).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new\
    \ List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"\
    asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d89bffaa17e14d63bd70aa4b56f8603d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d89bffaa17e14d63bd70aa4b56f8603d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977376
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var result = new List<string>();\n\
    \        // Start from longest prefix and add prefixes to result\n        for\
    \ (int i = str.Length - 1; i >= 0; i--) {\n            result.Add(str.Substring(0,\
    \ i));\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4e30a6f64ddc45c8a4b0916394698ed3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4e30a6f64ddc45c8a4b0916394698ed3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (str == null || str.Length\
    \ <= 0) {\n            throw new ArgumentException(\"str must be a non-empty string\"\
    );\n        }\n        // create list of empty strings\n        var prefixes =\
    \ new List<string>();\n        // add first character\n        prefixes.Add(string.Empty);\n\
    \        // add remaining characters\n        for (var i = 0; i < str.Length;\
    \ i++) {\n            prefixes.Add((prefixes[prefixes.Count - 1] + str[i]).Substring(1));\n\
    \        }\n        return prefixes;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: str must be a non-empty\
    \ string\n  at Problem.AllPrefixes (System.String str) [0x00018] in <97b55d395c6b4a2290a2aae82208da4d>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <97b55d395c6b4a2290a2aae82208da4d>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: str must be a\
    \ non-empty string\n  at Problem.AllPrefixes (System.String str) [0x00018] in\
    \ <97b55d395c6b4a2290a2aae82208da4d>:0 \n  at Problem.Main (System.String[] args)\
    \ [0x00001] in <97b55d395c6b4a2290a2aae82208da4d>:0 \n"
  stdout: ''
  timestamp: 1659977376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> result = new List<string>();\n\
    \        StringBuilder sb = new StringBuilder(str);\n        do {\n          \
    \  while (sb.Length > 0) {\n                result.Add(sb.ToString());\n     \
    \           sb.Remove(0, 1);\n            }\n        } while (Char.IsLetter(str[0]));\n\
    \        result.Add(str);\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.AllPrefixes (System.String str) [0x00037]\
    \ in <73bf4ac370b54206a5a4a25774ce8011>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <73bf4ac370b54206a5a4a25774ce8011>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of\
    \ the array.\n  at Problem.AllPrefixes (System.String str) [0x00037] in <73bf4ac370b54206a5a4a25774ce8011>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <73bf4ac370b54206a5a4a25774ce8011>:0\
    \ \n"
  stdout: ''
  timestamp: 1659977376
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var prefixes = new List<string>();\n\
    \        foreach (var c in str) {\n            prefixes.AddRange(AllPrefixes(c\
    \ + str));\n        }\n        return prefixes;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <be3cd4c0614e4775b89ac72388dccff1>:0 \n"
  stdout: None
  timestamp: 1659977382
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var result = new List<string>();\n\
    \        var all = new List<string>(new string[] { str });\n        var prefixes\
    \ = Enumerable.Range(0, all.Count).Select(i => all[all.Count - i]);\n\n      \
    \  foreach (var prefix in prefixes) {\n            result.AddRange(AllPrefixes(prefix));\n\
    \        }\n\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c__DisplayClass0_0.<AllPrefixes>b__0\
    \ (System.Int32 i) [0x00011] in <60becad12c414356a26f2add21cbfa46>:0 \n  at System.Linq.Enumerable+SelectIPartitionIterator`2[TSource,TResult].MoveNext\
    \ () [0x00048] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.AllPrefixes\
    \ (System.String str) [0x00067] in <60becad12c414356a26f2add21cbfa46>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x00001] in <60becad12c414356a26f2add21cbfa46>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c__DisplayClass0_0.<AllPrefixes>b__0\
    \ (System.Int32 i) [0x00011] in <60becad12c414356a26f2add21cbfa46>:0 \n  at System.Linq.Enumerable+SelectIPartitionIterator`2[TSource,TResult].MoveNext\
    \ () [0x00048] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.AllPrefixes\
    \ (System.String str) [0x00067] in <60becad12c414356a26f2add21cbfa46>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x00001] in <60becad12c414356a26f2add21cbfa46>:0\
    \ \n"
  stdout: ''
  timestamp: 1659977377
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (str == null || str.Length\
    \ == 0) return new List<string>();\n        List<string> lst = new List<string>();\n\
    \        foreach (string s in AllPrefixes(str.Substring(0, str.Length - 1))) {\n\
    \            lst.Add(s + s.Substring(0, str.Length));\n        }\n        return\
    \ lst;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <27c74e560fbd44dbb3eec08770b9cca3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <27c74e560fbd44dbb3eec08770b9cca3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977377
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var result = new List<string>();\n\
    \n        string prefix = \"\";\n        int prefixLength = 0;\n        int maxLength\
    \ = 0;\n        int i;\n        for (i = 0; i < str.Length; i++) {\n         \
    \   if (str[i] == '\\0') {\n                // Escape '\\0' at end of prefix if\
    \ we find it\n                result.Add(prefix + new string(new char[] {'\\0'}));\n\
    \                prefix = \"\";\n                prefixLength = 0;\n         \
    \       maxLength = 0;\n                result.Add(new string(new char[] {str[i]}));\n\
    \            } else {\n                prefix = prefix + str[i];\n           \
    \     prefixLength++;\n                if (prefixLength > maxLength) {\n     \
    \               maxLength = prefixLength;\n                }\n            }\n\
    \        }\n\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b2da32f35e8e4df28c535e7febaae875>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b2da32f35e8e4df28c535e7febaae875>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977377
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> prefixes = new\
    \ List<string>();\n        // We use two variables here: len is the length of\
    \ the \n        // current prefix and the lenMin is the length of the shortest\
    \ \n        // prefix of the current input\n        int len = str.Length, lenMin\
    \ = len;\n        // Loop through all characters and append them to the prefixes\n\
    \        for(int i = 0; i < len; i++) {\n            // If we found the shortest\
    \ prefix then stop here\n            if(lenMin == len) {\n                prefixes.Add(new\
    \ string(str.Take(lenMin).ToArray()));\n                break;\n            }\n\
    \            // Get the new shortest prefix by removing one character\n      \
    \      string newPrefix = str.Substring(0, lenMin);\n            // If the new\
    \ shortest prefix is shorter than the shortest prefix \n            // then we\
    \ have found the shortest prefix here\n            if(newPrefix.Length < lenMin)\
    \ {\n                prefixes.Add(newPrefix);\n                // Increment the\
    \ length with the new shortest prefix\n                lenMin = newPrefix.Length;\n\
    \            }\n            // Otherwise increase the length of the shortest prefix\n\
    \            else {\n                lenMin = lenMin;\n            }\n       \
    \ }\n        // Return the list of prefixes\n        return prefixes;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8def967bd32c4ab39976f33d4095eec7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8def967bd32c4ab39976f33d4095eec7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (str == null || str.Length\
    \ < 1) return null;\n        var prefixes = new List<string>();\n        // Recursively\
    \ add prefixes of length 1, to the list of prefixes\n        prefixes.AddRange(AllPrefixes(str,\
    \ 1, prefixes));\n        return prefixes;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp961spoml.cs(16,27): error CS1501: No overload for method ''AllPrefixes''
    takes 3 arguments

    '
  timestamp: 1659977376
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> result = new List<string>();\n\
    \        Stack<string> stack = new Stack<string>();\n        stack.Push(str);\n\
    \        while (stack.Count > 0) {\n            string prefix = stack.Pop();\n\
    \            result.Add(prefix);\n            foreach (char c in prefix)\n   \
    \             stack.Push(prefix + c);\n        }\n        return result;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <453bf091a6694bdfa4abc5b8611f6d63>:0 \n"
  stdout: None
  timestamp: 1659977382
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> prefix = new List<string>();\n\
    \        Stack<string> toProcess = new Stack<string>();\n        toProcess.Push(str);\n\
    \        while (toProcess.Count > 0) {\n            string current = toProcess.Pop();\n\
    \            for (int i = 0; i <= current.Length; i++) {\n                prefix.Add(current.Substring(0,\
    \ i));\n            }\n        }\n        return prefix;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new\
    \ List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new\
    \ string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"\
    asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new\
    \ List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6bd98a25c7fe40778c835601fb37991e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6bd98a25c7fe40778c835601fb37991e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> ret = new List<string>();\n\
    \        bool changed = true;\n        while (changed) {\n            changed\
    \ = false;\n            foreach (var a in AllPrefixes(str.Substring(0, str.Length\
    \ - 1), ret))\n            {\n                changed = true;\n              \
    \  ret.Add(a);\n            }\n        }\n        return ret;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new\
    \ List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new\
    \ string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"\
    asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new\
    \ List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphtn2e2v3.cs(17,31): error CS1501: No overload for method ''AllPrefixes''
    takes 2 arguments

    '
  timestamp: 1659977377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        // Create array of size 2 \n\
    \        char[] chars = new char[2];\n        // Add character to array\n    \
    \    chars[0] = str[0];\n        // Add character to array\n        chars[1] =\
    \ str[1];\n        List<string> result = new List<string>();\n        for (int\
    \ i = 0; i < str.Length; i++) {\n            // Add prefix character to result\n\
    \            result.Add(chars[0]);\n            // Add prefix character to result\n\
    \            result.Add(chars[1]);\n            // Add prefix character to result\n\
    \            result.Add(str[i]);\n            // Add prefix character to result\n\
    \            result.Add(chars[1]);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe3ne3zx8.cs(22,24): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpe3ne3zx8.cs(24,24): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpe3ne3zx8.cs(26,24): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpe3ne3zx8.cs(28,24): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659977377
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> prefixes = new\
    \ List<string>();\n        int startIndex = 0;\n        while (startIndex < str.Length)\
    \ {\n            if (str[startIndex] == 'z')\n                break;\n       \
    \     prefixes.Add((new string(str.Take(startIndex + 1).ToArray())));\n      \
    \      startIndex++;\n        }\n        return prefixes;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new\
    \ List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new\
    \ string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"\
    asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new\
    \ List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0fdc07fe2faf4e0bb1c9fbaa0b2fd221>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0fdc07fe2faf4e0bb1c9fbaa0b2fd221>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977377
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (str == null) return new\
    \ List<string>();\n        if (str.Length == 1) return new List<string>(new string[]{str});\n\
    \        List<string> result = new List<string>();\n        for (int i = 1; i\
    \ < str.Length; i++) {\n            List<string> candidates = AllPrefixes(str.Substring(0,\
    \ i));\n            foreach (string candidate in candidates) {\n             \
    \   result.Add(string.Concat(candidate, str.Substring(i)));\n            }\n \
    \       }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d8b74c8e697b42ff9804e9fd0002c921>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d8b74c8e697b42ff9804e9fd0002c921>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977377
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (str == null) return null;\n\
    \        List<string> result = new List<string>();\n        bool first = true;\n\
    \        foreach (char c in str) {\n            result.Add(first ? \"\" : c.ToString());\n\
    \            if (first) {\n                first = false;\n                for\
    \ (int i = 1; i < str.Length; i++)\n                    result.Add(str.Substring(0,\
    \ i));\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new\
    \ List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new\
    \ string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"\
    asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new\
    \ List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d17ba95a52c74625bb05fe7e9453f185>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d17ba95a52c74625bb05fe7e9453f185>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        Debug.Assert(str != null);\n\
    \        Debug.Assert(str.Length > 0);\n        var prefixes = new List<string>();\n\
    \        if (str.Length == 1) {\n            prefixes.Add(str);\n            return\
    \ prefixes;\n        }\n        var prefix = str.Substring(0, 1);\n        prefixes.Add(prefix);\n\
    \        return prefixes;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"\
    asdfgh\")).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\"\
    , (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n\
    \    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new string[]{(string)\"\
    W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.AllPrefixes (System.String\
    \ str) [0x00000] in <294ed7501e2a44b4b01bb5aa4e8e183f>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <294ed7501e2a44b4b01bb5aa4e8e183f>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Index and length must refer to a location\
    \ within the string.\nParameter name: length\n  at System.String.Substring (System.Int32\
    \ startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.AllPrefixes (System.String str) [0x0003a] in <294ed7501e2a44b4b01bb5aa4e8e183f>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <294ed7501e2a44b4b01bb5aa4e8e183f>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ and length must refer to a location within the string.\nParameter name: length\n\
    \  at System.String.Substring (System.Int32 startIndex, System.Int32 length) [0x0004c]\
    \ in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.AllPrefixes (System.String\
    \ str) [0x0003a] in <294ed7501e2a44b4b01bb5aa4e8e183f>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <294ed7501e2a44b4b01bb5aa4e8e183f>:0 \n"
  stdout: ''
  timestamp: 1659977377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        return AllPrefixes(str, new\
    \ List<string>());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp62slpeq2.cs(13,16): error CS1501: No overload for method ''AllPrefixes''
    takes 2 arguments

    '
  timestamp: 1659977372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> result = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            for (int j = i; j\
    \ < str.Length; j++) {\n                result.Add((new string[]{str[j], str.Substring(j)}));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n\
    \    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa2t6_v3w.cs(16,42): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659977377
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var result = new List<string>();\n\
    \        var prefix = new StringBuilder();\n\n        foreach (var c in str) {\n\
    \            if (prefix.Length == 0) {\n                prefix.Append(c);\n  \
    \          }\n            else if (prefix.Length != 0) {\n                prefix.Append(c);\n\
    \                result.Add(prefix.ToString());\n                prefix.Clear();\n\
    \            }\n        }\n\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new\
    \ List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new\
    \ string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"\
    asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new\
    \ List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4fa91ae267c84aaa8bad626e40778067>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4fa91ae267c84aaa8bad626e40778067>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        // Create array for storing\
    \ substrings\n        var results = new List<string>();\n        // For all characters\
    \ in string\n        for (var i = 0; i < str.Length; i++) {\n            // Add\
    \ prefix to results if character at position is not empty\n            if (str[i]\
    \ != \"\") {\n                results.Add(new string(new char[] {str[i]}));\n\
    \            }\n            // If character at position is empty, skip it\n  \
    \          else {\n                // Iterate through all characters in string,\
    \ adding new prefix if at beginning of each substring\n                // or if\
    \ character at current position is empty\n                for (var j = 0; j <\
    \ str.Length; j++) {\n                    if (j == i || str[j] == \"\") {\n  \
    \                      continue;\n                    }\n                    else\
    \ {\n                        results.Add(new string(new char[] {str[j]}));\n \
    \                   }\n                }\n                // Remove prefix from\
    \ results\n                results.RemoveAt(0);\n            }\n        }\n  \
    \      return results;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"\
    asdfgh\")).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\"\
    , (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n\
    \    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new string[]{(string)\"\
    W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeclq3eni.cs(18,17): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmpeclq3eni.cs(26,35): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    '
  timestamp: 1659977377
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> result = new List<string>();\n\
    \        char[] charArray = str.ToCharArray();\n        for (int i = 0; i < charArray.Length;\
    \ i++) {\n            for (int j = i; j < charArray.Length; j++) {\n         \
    \       result.Add(charArray[j].ToString());\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67b8c1bbdae74d7385e4d84b7b306a49>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67b8c1bbdae74d7385e4d84b7b306a49>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> prefixes = new\
    \ List<string>();\n        int n = str.Length;\n        string suffix = str.Substring(n\
    \ - 1);\n        string current = \"\";\n        for (int i = 0; i < n; i++) {\n\
    \            current += str[i];\n            prefixes.Add(current);\n        }\n\
    \        return prefixes;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"\
    asdfgh\")).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\"\
    , (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n\
    \    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new string[]{(string)\"\
    W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: StartIndex\
    \ cannot be less than zero.\nParameter name: startIndex\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x00004] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.String.Substring (System.Int32 startIndex) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.AllPrefixes (System.String str) [0x0000e] in <b639542f3ffa4e278e97cd4b0f6b9b48>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <b639542f3ffa4e278e97cd4b0f6b9b48>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: StartIndex\
    \ cannot be less than zero.\nParameter name: startIndex\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x00004] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.String.Substring (System.Int32 startIndex) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.AllPrefixes (System.String str) [0x0000e] in <b639542f3ffa4e278e97cd4b0f6b9b48>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <b639542f3ffa4e278e97cd4b0f6b9b48>:0\
    \ \n"
  stdout: ''
  timestamp: 1659977377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        if (str == null)\n         \
    \   return null;\n        return AllPrefixes(str, str.Length);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new\
    \ List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new\
    \ string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"\
    asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new\
    \ List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf81gh7dg.cs(15,16): error CS1501: No overload for method ''AllPrefixes''
    takes 2 arguments

    '
  timestamp: 1659977377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        int len = str.Length;\n    \
    \    if (len == 0) return new List<string>();\n        List<string> res = new\
    \ List<string>();\n        res.Add(str.Substring(0, 0));\n        while (len >\
    \ 0) {\n            List<string> tmp = new List<string>();\n            for (int\
    \ i = 0; i < len; i++) {\n                tmp.Add((str[i] + \"a\").Substring(0,\
    \ 1));\n            }\n            res = res.Concat(tmp);\n            len--;\n\
    \        }\n        return res;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n   \
    \ Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"\
    a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"\
    asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new\
    \ string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ojed5d_.cs(22,19): error CS0266: Cannot implicitly convert type ''System.Collections.Generic.IEnumerable<string>''
    to ''System.Collections.Generic.List<string>''. An explicit conversion exists
    (are you missing a cast?)

    '
  timestamp: 1659977377
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        int minLength = str.Length;\n\
    \        List<string> prefixes = new List<string>();\n        while (minLength\
    \ > 1) {\n            prefixes.Add(str.Substring(0, minLength));\n           \
    \ minLength--;\n        }\n        prefixes.Add(str);\n        return prefixes;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a90928b8f2354f98a15ff38f0b8f40d4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a90928b8f2354f98a15ff38f0b8f40d4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var stack = new Stack<string>();\n\
    \        var result = new List<string>();\n\n        foreach (var c in str) {\n\
    \            while (stack.Peek() != c) {\n                result.Add(stack.Pop());\n\
    \            }\n            stack.Push(c);\n        }\n\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3t7pjy3e.cs(17,20): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''string'' and ''char''

    /tmp/tmp3t7pjy3e.cs(20,24): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659977377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        return AllPrefixes(str, 0);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvvx3ilpw.cs(13,16): error CS1501: No overload for method ''AllPrefixes''
    takes 2 arguments

    '
  timestamp: 1659977371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        // Initialize variables\n  \
    \      List<string> prefixes = new List<string>();\n        int len = str.Length;\n\
    \        int prefixLen = 0;\n        int count = 0;\n\n        // Set default\
    \ value for count\n        int maxCount = 0;\n\n        // Determine longest prefix\n\
    \        foreach (char letter in str) {\n            prefixLen++;\n          \
    \  while (str[prefixLen] != letter) {\n                prefixLen++;\n        \
    \    }\n            if (prefixLen > maxCount) {\n                maxCount = prefixLen;\n\
    \            }\n        }\n\n        // Add prefix to all prefixes with same max\
    \ length\n        while (count < maxCount) {\n            prefixes.Add(new string(str.Take(count).ToArray()));\n\
    \            count += 1;\n        }\n\n        return prefixes;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new\
    \ List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new\
    \ string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"\
    asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new\
    \ List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <584061e6275b4b119f74e91a160391f3>:0 \n\nUnhandled Exception:\n\
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n\
    \  at Problem.AllPrefixes (System.String str) [0x00036] in <584061e6275b4b119f74e91a160391f3>:0\
    \ \n  at Problem.Main (System.String[] args) [0x0001b] in <584061e6275b4b119f74e91a160391f3>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index\
    \ was outside the bounds of the array.\n  at Problem.AllPrefixes (System.String\
    \ str) [0x00036] in <584061e6275b4b119f74e91a160391f3>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x0001b] in <584061e6275b4b119f74e91a160391f3>:0 \n"
  stdout: ''
  timestamp: 1659977378
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> prefixes = new\
    \ List<string>();\n        int currentLength = str.Length;\n        while (currentLength\
    \ > 1) {\n            prefixes.Add(str.Substring(0, currentLength));\n       \
    \     str = str.Substring(1);\n            currentLength = str.Length;\n     \
    \   }\n        prefixes.Add(str);\n        return prefixes;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new\
    \ List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new\
    \ string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"\
    asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new\
    \ List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8b09d8b4b5c143e7ad95e4fc67cda1d4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8b09d8b4b5c143e7ad95e4fc67cda1d4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        List<string> prefix = new List<string>();\n\
    \n        // Use recursion to find all prefixes from shortest to longest\n   \
    \     foreach (var c in str) {\n            prefix.Add(c);\n            List<string>\
    \ p = AllPrefixes(prefix.ToArray());\n            if (p != null) {\n         \
    \       prefix.Clear();\n                prefix.AddRange(p);\n            }\n\
    \        }\n\n        // Find all possible longest prefixes\n        string longest\
    \ = prefix.OrderByDescending(s => s.Length).FirstOrDefault();\n        List<string>\
    \ p = new List<string>();\n        while (longest != null && longest != \"\")\
    \ {\n            p.Add(longest);\n            longest = prefix.OrderByDescending(s\
    \ => s.Length).FirstOrDefault(x => x != longest);\n        }\n        return p;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp21f7viqn.cs(17,24): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmp21f7viqn.cs(18,26): error CS0136: A local or parameter named ''p'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp21f7viqn.cs(18,42): error CS1503: Argument 1: cannot convert from ''string[]''
    to ''string''

    '
  timestamp: 1659977378
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllPrefixes(string str) {\n        var result = new List<string>();\n\
    \        string prefix = \"\";\n        int len = 0;\n        while (!str.StartsWith(prefix,\
    \ StringComparison.OrdinalIgnoreCase)) {\n            prefix += str;\n       \
    \     str = str.Substring(1);\n            len++;\n        }\n        for (int\
    \ i = 1; i <= len; ++i) {\n            result.Add(prefix.Substring(0, i));\n \
    \           prefix = prefix.Substring(i);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
    \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\"\
    )).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"\
    asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
    WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
    WWW\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aae751134efc4918a0a9484ab3d3eecc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aae751134efc4918a0a9484ab3d3eecc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977378
