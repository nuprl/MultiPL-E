name: HumanEval_141_file_name_check
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Create a function which takes a string representing a file's\
  \ name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
  \ otherwise.\n    // A file's name is considered to be valid if and only if all\
  \ the following conditions \n    // are met:\n    // - There should not be more\
  \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
  \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
  \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
  \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
  \    // Examples:\n    // >>> FileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
  )\n    // >>> FileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    public static\
  \ string FileNameCheck(string file_name) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
  example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
  )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
  MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
  )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\"\
  )));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
  /this_is_valid.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\"\
  )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"\
  Yes\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
  \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
  Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
  )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\")));\n\
  \    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
  final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_f4indsartal132.\"\
  )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\")).Equals((\"No\"\
  )));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\")));\n    }\n\n}\n"
completions: ["        bool status = false;\n        if (file_name != null) {\n  \
    \          int file_length = 0;\n            bool is_dot = (file_name as string).Contains(\"\
    .\");\n            bool is_valid = file_name.Length <= 3 && is_dot && file_name.Substring(0,\
    \ 1).Any(c => char.IsLetterOrDigit(c)) && file_name.Substring(0, 4).All(c => char.IsLetterOrDigit(c));\n\
    \            if (is_valid) {\n                file_length = file_name.Length -\
    \ 2;\n                List<char> dots = new List<char>(new char[] { '.' });\n\
    \                status = dots.All(c => file_name.Substring(0, file_length).Contains(c))\
    \ && file_name.Substring(file_length + 1).All(c => file_name.Substring(0, file_length).Contains(c));\n\
    \            }\n        }\n        return status.ToString() ? \"Yes\" : \"No\"\
    ;", "        if(!((file_name.Length >= 3) && (file_name.Contains('.') && file_name[0]\
    \ >= 'a' && file_name[0] <= 'z')\n            && (file_name.Substring(0,1) !=\
    \ '') && (file_name.Substring(0, 1).Contains('.'))))\n        {\n            return\
    \ (\"No\");\n        }\n        else if(file_name.Contains(\".\") && file_name.Substring(0,1).Contains('.'))\n\
    \        {\n            return (\"Yes\");\n        }\n        else\n        {\n\
    \            if(file_name.Contains(\".\"))\n            {\n                string\
    \ filename = file_name.Substring(0,file_name.IndexOf(\".\"));\n              \
    \  if(filename.length == 0)\n                {\n                    return (\"\
    No\");\n                }\n                else\n                {\n         \
    \           if(filename.Length == 1)\n                    {\n                \
    \        if(filename[0] == '.')\n                        {\n                 \
    \           if(filename[1] >= 'a' && filename[1] <= 'z')\n                   \
    \         {\n                                return (\"Yes\");\n             \
    \               }\n                            else\n                        \
    \    {\n                                return (\"No\");\n                   \
    \         }\n                        }\n                        else\n       \
    \                 {\n                            if(filename[1] >= 'A' && filename[1]\
    \ <= 'Z')\n                            {\n                                return\
    \ (\"Yes\");\n                            }\n                            else\n\
    \                            {\n                                return (\"No\"\
    );\n                            }\n                        }\n               \
    \     }\n                    else\n                    {\n                   \
    \     if(filename.Length == 2)\n                        {\n                  \
    \          if(filename[1] >= 'a' && filename[1] <= 'z')\n                    \
    \        {\n                                if(filename[0] >= 'a' && filename[0]\
    \ <= 'z')\n                                {\n                               \
    \     return (\"Yes\");\n                                }\n                 \
    \               else\n                                {\n                    \
    \                return (\"No\");\n                                }\n       \
    \                     }\n                            else\n                  \
    \          {\n                                if(filename[1] >= 'A' && filename[1]\
    \ <= 'Z')\n                                {\n                               \
    \     if(filename[0] >= 'A' && filename[0] <= 'Z')\n                         \
    \           {\n                                        return ((\"Yes\"));\n \
    \                                   }\n                                    else\n\
    \                                    {\n                                     \
    \   return ((\"No\"));\n                                    }\n              \
    \                  }\n                                else\n                 \
    \               {\n                                    if(filename[0] >= 'a' &&\
    \ filename[0] <= 'z')\n                                    {\n               \
    \                         if(filename[1] >= 'a' && filename[1] <= 'z')\n     \
    \                                   {\n                                      \
    \      return ((\"Yes\"));\n                                        }\n      \
    \                                  else\n                                    \
    \    {\n                                            return ((\"No\"));\n     \
    \                                   }\n                                    }\n\
    \                                    else\n                                  \
    \  {\n                                        if(filename[1] >= 'A' && filename[1]\
    \ <= 'Z')\n                                        {\n                       \
    \                     if(filename[0] >= 'A' && filename[0] <= 'Z')\n         \
    \                                   {\n                                      \
    \          return (((\"Yes", "        string regex_check = \"^[0-9][0-9]\\.[a-z]{0,1}$\"\
    ;\n        string regex_check2 = \"^[a-z]{0,1}[0-9].txt$\";\n        Regex check\
    \ = new Regex(regex_check);\n        Regex check2 = new Regex(regex_check2);\n\
    \        if (check.IsMatch(file_name)) {\n            if (check2.IsMatch(file_name))\
    \ {\n                return \"Yes\";\n            }\n            else {\n    \
    \            return \"No\";\n            }\n        }\n        else {\n      \
    \      return \"No\";\n        }", "        var match = Regex.Match(file_name,\
    \ \"^[a-zA-Z]([a-zA-Z0-9]{3,})\\.[a-zA-Z][a-zA-Z0-9]{3,4}$\");\n        if (!match.Success)\
    \ return false;\n        var dot = file_name.IndexOf('.');\n        if (dot <\
    \ 0) return false;\n        var file_name = file_name.Substring(0, dot);\n   \
    \     var valid = file_name.All(ch => ch == '0' || ch == '1' || ch == '2' || ch\
    \ == '3' || ch == '4' || ch == '5' || ch == '6' || ch == '7' || ch == '8' || ch\
    \ == '9' || ch == 'A' || ch == 'B' || ch == 'C' || ch == 'D' || ch == 'E' || ch\
    \ == 'F');\n        return valid;", "        string[] words = file_name.Split('.');\n\
    \        int count = 0;\n        foreach (string word in words) {\n          \
    \  if (word.Length > 3 || (word.Length == 0 && !word.StartsWith(\"_\")) || (word.Length\
    \ == 1 && !word.StartsWith(\"a\") && (word.ToLower() != \"a\")))) {\n        \
    \        count++;\n                if (count > 1) {\n                    return\
    \ \"No\";\n                }\n            }\n        }\n        if (words[words.length\
    \ - 1].Length == 2 && !((words[words.length - 1].StartsWith(\"a\") || words[words.length\
    \ - 1].StartsWith(\"A\")) && words[words.length - 1].ToLower() == \"txt\")) {\n\
    \            return \"No\";\n        }\n        return \"Yes\";", "        string\
    \ pattern = @\"^[0-9]{3}\\.[a-zA-Z]{1}\\..*$\";\n        if (!Regex.IsMatch(file_name,pattern))\
    \ {\n            return \"No\";\n        }\n        if (!(file_name.Split('.').Length\
    \ == 1)) {\n            return \"No\";\n        }\n        if (!(file_name.Split('.')[0].Length\
    \ > 0)) {\n            return \"No\";\n        }\n        if (!(file_name.Split('.')[0].Substring(0,\
    \ 1).ToUpper() >= 'A' && file_name.Split('.')[0].Substring(0, 1).ToUpper() <=\
    \ 'Z')) {\n            return \"No\";\n        }\n        if (fileName.Split('.')[0].Substring(1,\
    \ 3) != \"txt\" && fileName.Split('.')[0].Substring(1, 3) != \"exe\" && fileName.Split('.')[0].Substring(1,\
    \ 3) != \"dll\") {\n            return \"No\";\n        }\n        return \"Yes\"\
    ;", "        if (file_name.Length > 3) {\n            return (\"No\");\n     \
    \   }\n        bool dot_found = false;\n        bool first_letter_found = false;\n\
    \        string substr = file_name.Substring(0, 1);\n        if (substr.Length\
    \ == 0) {\n            return (\"No\");\n        }\n        char first_letter\
    \ = char.ToUpper(substr[0]);\n        for (int i = 0; i < 9; i++) {\n        \
    \    if (i == 0) {\n                first_letter_found = true;\n            }\n\
    \            if (!(first_letter == char.ToUpper(Convert.ToChar(i + 'a'))) && first_letter_found)\
    \ {\n                return (\"No\");\n            }\n        }\n        for (int\
    \ i = 0; i < 3; i++) {\n            char current = char.ToUpper(substr[i]);\n\
    \            char next_char = Convert.ToChar(i + 1);\n            char next_next_char\
    \ = Convert.ToChar(i + 2);\n            if (next == '.') {\n                dot_found\
    \ = true;\n            }\n            if (!(current == '.') && !dot_found) {\n\
    \                return (\"No\");\n            }\n            if (!(first_letter\
    \ == char.ToUpper(next_char)) && (first_letter_found)) {\n                return\
    \ (\"No\");\n            }\n            if (!(first_letter == char.ToUpper(next_next_char))\
    \ && (first_letter_found)) {\n                return (\"No\");\n            }\n\
    \        }\n        if (substr.Contains(\"exe\") || substr.Contains(\"dll\"))\
    \ {\n            return (\"Yes\");\n        }\n        else {\n            return\
    \ (\"No\");\n        }", "        if (file_name.Length > 3) return \"No\";\n \
    \       char first_char = (char)file_name[0];\n        int i = 0;\n        while\
    \ (i < file_name.Length) {\n            if (char.IsDigit(file_name[i])) {\n  \
    \              i++;\n            } else if (file_name[i] == '.') {\n         \
    \       i++;\n            } else {\n                break;\n            }\n  \
    \      }\n        bool contains_dot = file_name.IndexOf('.') != -1;\n        bool\
    \ valid_beginning = true;\n        while (i < file_name.Length) {\n          \
    \  char current_char = (char)file_name[i];\n            if (!char.IsLetter(current_char))\
    \ {\n                valid_beginning = false;\n                break;\n      \
    \      }\n            i++;\n        }\n        bool valid_ending = false;\n  \
    \      while (i < file_name.Length) {\n            if (file_name[i] == '.') {\n\
    \                valid_ending = true;\n                break;\n            }\n\
    \            i++;\n        }\n        if (valid_beginning && valid_ending && !contains_dot)\
    \ return \"Yes\";\n        return \"No\";", "        var valid = false;\n    \
    \    if (file_name.Contains(\".\") && file_name.Length > 2 && file_name.Substring(0,\
    \ 1).Contains('a') && file_name.Substring(0, 1).Contains('z') && file_name.Substring(0,\
    \ 1).Contains('A') && file_name.Substring(0, 1).Contains('Z')) {\n           \
    \ valid = true;\n            string extension = file_name.Substring(1, file_name.Length\
    \ - 2);\n            if (extension.ToLower() == \"txt\" || extension.ToLower()\
    \ == \"exe\" || extension.ToLower() == \"dll\") {\n                valid = true;\n\
    \            }\n        }\n        if (!valid) {\n            return \"No\";\n\
    \        }\n        return valid;", "        // Implement your code here.\n  \
    \      if (string.IsNullOrEmpty(file_name)) {\n            return \"No\";\n  \
    \      }\n        if (!(file_name.Length <= 3)) {\n            return \"No\";\n\
    \        }\n        var first_char = file_name.First();\n        if (!(first_char.IsLetterOrDigit()))\
    \ {\n            return \"No\";\n        }\n        var last_char = file_name.Last();\n\
    \        if (!(last_char.Equals(file_name.Substring(0,1)) || last_char.Equals(file_name.Substring(1,\
    \ 1))))\n        {\n            return \"No\";\n        }\n        var extensions\
    \ = new[] { \"txt\", \"exe\", \"dll\" };\n        if (!extensions.Contains(file_name.Substring(file_name.IndexOf('.')\
    \ + 1))) {\n            return \"No\";\n        }\n        return \"Yes\";", " \
    \       if (file_name.IndexOf('.') > 4) {\n            return \"No\";\n      \
    \  }\n        if (file_name.Length > 3) {\n            return \"No\";\n      \
    \  }\n        if (file_name[0] != string.IsNullOrEmpty(file_name[0].ToString()))\
    \ {\n            return \"No\";\n        }\n        if (file_name.Length > 1 &&\
    \ file_name.Substring(0, 1).ToLower() == \"x\" &&\n            file_name.Substring(1,\
    \ 3) != \"exe\" && file_name.Substring(1, 3) != \"dll\") {\n            return\
    \ \"No\";\n        }\n        return \"Yes\";", "        string dot_found = false;\n\
    \        string first_letter = \"\";\n        string extension = \"\";\n     \
    \   string last_letter = \"\";\n        string extension_array = \"\";\n\n   \
    \     if (file_name.Length > 3 && file_name.Contains('.') == false) {\n      \
    \      return \"No\";\n        }\n        if (file_name.Contains('.') == true)\
    \ {\n            dot_found = true;\n        }\n        first_letter = file_name.Substring(0,\
    \ 1);\n        last_letter = file_name.Substring(1, 1);\n        extension = file_name.Substring(2);\n\
    \        extension_array = extension.ToLower();\n        if (last_letter == first_letter\
    \ && extension_array.Contains(\"txt\") || extension_array.Contains(\"exe\") ||\
    \ extension_array.Contains(\"dll\")) {\n            return \"Yes\";\n        }\n\
    \        return \"No\";", "        if (file_name.Length > 3)\n            return\
    \ \"No\";\n        if (file_name.Contains(\".\")) return false;\n        if (file_name.Substring(0,\
    \ 1).IsEmpty()) return \"No\";\n        if (file_name.Substring(0, 1) != Char.ToUpper(file_name.Substring(0,\
    \ 1))) return \"No\";\n        if (file_name.Substring(0, file_name.IndexOf('.')).ToLower()\
    \ != \"example\")\n            return \"No\";\n        char[] file_name_char =\
    \ file_name.Substring(0, file_name.IndexOf('.')).ToLower().ToCharArray();\n  \
    \      char[] allowed_char = { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'\
    \ };\n        if (file_name_char.Count() != allowed_char.Count())\n          \
    \  return \"No\";\n        for (int i = 0; i < file_name_char.Length; i++) {\n\
    \            if (file_name_char[i] != allowed_char[(i + 1) % allowed_char.Length])\n\
    \                return \"No\";\n        }\n        return \"Yes\";", "      \
    \  return ((file_name.Count(c => c > 0 && c < 10)) \n            && file_name.Contains(\"\
    .\")\n            && file_name.IndexOf(\".\") > 0 \n            && file_name[0]\
    \ >= 'a' && file_name[0] <= 'z' \n            && file_name.Substring(0, file_name.IndexOf(\"\
    .\") - 1).Count(c => c >= 'a' && c <= 'z') <= 1 \n            && file_name.Substring(file_name.IndexOf(\"\
    .\") + 1).Count(c => c == '.') >= 3\n            && (file_name.Contains(\"txt\"\
    ) || file_name.Contains(\"exe\") || file_name.Contains(\"dll\")));", "       \
    \ string[] string_array = file_name.Split(new char[] { \n        '.','_','0'-'9','a','z','A','Z','-','\
    \ ','/','\\\\'});\n        if (string_array.Length > 3) {\n            return\
    \ \"No\";\n        }\n        if (string_array.Length < 2 || string_array[0]==null\
    \ || string_array[0]==\"\") {\n            return \"No\";\n        }\n       \
    \ for (int i=0;i<string_array.Length;i++) {\n            if (string_array[i] !=\
    \ null && !(string_array[i] == \"txt\" || string_array[i] == \"exe\" || string_array[i]\
    \ == \"dll\") ) {\n                return \"No\";\n            }\n        }\n\
    \        return \"Yes\";", "        string result = \"\";\n        Console.WriteLine(\"\
    Enter 'Yes' or 'No'\");\n        string check = \"Yes\";\n        do\n       \
    \ {\n            Console.WriteLine(check);\n            string input = Console.ReadLine();\n\
    \            if (String.Compare(input, check) == 0) {\n                result\
    \ = input;\n                break;\n            }\n            else if (String.Compare(input,\
    \ check) == 1) {\n                result = check;\n                break;\n  \
    \          }\n        } while (!input.Equals(\"Yes\") || !input.Equals(\"No\"\
    ));\n        return result;", "        Regex expression = new Regex(\"^[0-9]*$\"\
    );\n        Regex dots = new Regex(\".\");\n        Regex letters = new Regex(\"\
    [a-z]\");\n        Regex names = new Regex(\"^[a-z][a-z]+\");\n        if (expression.IsMatch(file_name)\
    \ == false) {\n            return \"No\";\n        }\n        if (dots.IsMatch(file_name)\
    \ == false || dots.Match(file_name).Value == null || dots.Match(file_name).Value\
    \ == \"\") {\n            return \"No\";\n        }\n        if (letters.IsMatch(file_name)\
    \ == false || letters.Match(file_name).Value == null || letters.Match(file_name).Value\
    \ == \"\") {\n            return \"No\";\n        }\n        if (names.IsMatch(file_name)\
    \ == false || names.Match(file_name).Value == null || names.Match(file_name).Value\
    \ == \"\") {\n            return \"No\";\n        }\n        if (file_name.IndexOf(\"\
    .\") != -1) {\n            if (file_name.Substring(0, file_name.IndexOf(\".\"\
    )).IndexOfAny(new char[] { '0', '1' }) != -1) {\n                if (file_name.Substring(0,\
    \ file_name.IndexOf(\".\")).IndexOfAny(new char[] { 'a', 'b', 'c', 'd', 'e', 'f',\
    \ 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\
    \ 'w', 'x', 'y', 'z' }) != -1) {\n                    if (file_name.Substring(file_name.IndexOf(\"\
    .\") + 1).IndexOfAny(new char[] { 't', 'e', 'r', 'n', 'v' }) != -1) {\n      \
    \                  return \"Yes\";\n                    }\n                }\n\
    \            }\n        }\n        return \"No\";", "        string dot = \".\"\
    ;\n        string file_name = file_name.ToLower();\n        string first_char\
    \ = file_name.Substring(0, 1).ToLower();\n        string last_char = file_name.Substring(1,\
    \ file_name.Length - 1);\n        if ((first_char.Length == 0) || (first_char.Length\
    \ == 1) || (first_char != \"a\" && first_char != \"b\" && first_char != \"c\"\
    \ && first_char != \"d\" && first_char != \"e\" && first_char != \"f\" && first_char\
    \ != \"g\" && first_char != \"h\" && first_char != \"i\" && first_char != \"j\"\
    \ && first_char != \"k\" && first_char != \"l\" && first_char != \"m\" && first_char\
    \ != \"n\" && first_char != \"o\" && first_char != \"p\" && first_char != \"q\"\
    \ && first_char != \"r\" && first_char != \"s\" && first_char != \"t\" && first_char\
    \ != \"u\" && first_char != \"v\" && first_char != \"w\" && first_char != \"x\"\
    \ && first_char != \"y\" && first_char != \"z\"))\n            return \"No\";\n\
    \        if ((last_char.Length == 0) || (last_char.Length > 3) || (last_char !=\
    \ \"a\" && last_char != \"b\" && last_char != \"c\" && last_char != \"d\" && last_char\
    \ != \"e\" && last_char != \"f\" && last_char != \"g\" && last_char != \"h\" &&\
    \ last_char != \"i\" && last_char != \"j\" && last_char != \"k\" && last_char\
    \ != \"l\" && last_char != \"m\" && last_char != \"n\" && last_char != \"o\" &&\
    \ last_char != \"p\" && last_char != \"q\" && last_char != \"r\" && last_char\
    \ != \"s\" && last_char != \"t\" && last_char != \"u\" && last_char != \"v\" &&\
    \ last_char != \"w\" && last_char != \"x\" && last_char != \"y\" && last_char\
    \ != \"z\"))\n            return \"No\";\n        if (file_name.Contains(dot))\n\
    \            return \"No\";\n        if (file_name.IndexOf(\".\") < 0)\n     \
    \       return \"No\";\n        if (file_name.IndexOf(\".\") > file_name.LastIndexOf(\"\
    .\"))\n            return \"No\";\n        if (file_name.Substring(0, 1).ToLower()\
    \ != \"a\" && file_name.Substring(0, 1).ToLower() != \"b\" && file_name.Substring(0,\
    \ 1).ToLower() != \"c\" && file_name.Substring(0, 1).ToLower() != \"d\" && file_name.Substring(0,\
    \ 1).ToLower() != \"e\" && file_name.Substring(0, 1).ToLower() != \"f\" && file_name.Substring(0,\
    \ 1).ToLower() != \"g\" && file_name.Substring(0, 1).ToLower() != \"h\" && file_name.Substring(0,\
    \ 1).ToLower() != \"i\" && ", "        if (file_name != null) {\n            //remove\
    \ everything after the dot\n            int dot = file_name.IndexOf(\".\");\n\
    \            if (dot > -1) {\n                string before_dot = file_name.Substring(0,\
    \ dot);\n                char[] valid_names = new char[] {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};\n\
    \                if (valid_names.Contains(before_dot[0])) {\n                \
    \    //remove the leading character\n                    string after_dot = file_name.Substring(dot\
    \ + 1);\n                    string[] extensions = new string[] {\n          \
    \           \"exe\", \"dll\", \"txt\", \"xml\"\n                    };\n     \
    \               if (extensions.Contains(after_dot)) {\n                      \
    \  return \"Yes\";\n                    } else {\n                        return\
    \ \"No\";\n                    }\n                } else {\n                 \
    \   return \"No\";\n                }\n            } else {\n                return\
    \ \"No\";\n            }\n        } else {\n            return \"No\";\n     \
    \   }", "        if (file_name.Length > 3) {\n            return \"No\";\n   \
    \     }\n        if (file_name.IndexOf('.') != file_name.Length - 1) {\n     \
    \       return \"No\";\n        }\n        if (file_name.Substring(0, 1).IsEmpty)\
    \ {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ 1).Contains('a') || file_name.Substring(0, 1).Contains('A')) {\n           \
    \ return \"No\";\n        }\n        if (file_name.Substring(0, file_name.Length\
    \ - 3).ToLower().Contains(\"txt\") ||\n            file_name.Substring(0, file_name.Length\
    \ - 3).ToLower().Contains(\"exe\") ||\n            file_name.Substring(0, file_name.Length\
    \ - 3).ToLower().Contains(\"dll\")) {\n            return \"Yes\";\n        }\n\
    \        return \"No\";", "        int numDigits = file_name.Length;\n       \
    \ if (numDigits >= 3) {\n            if (file_name.Substring(0, 1).Equals(\".\"\
    ) && file_name.Substring(0, 1).Length > 1)\n            {\n                if\
    \ (file_name.Substring(0, 1).StartsWith(\"a\") || file_name.Substring(0, 1).StartsWith(\"\
    A\"))\n                {\n                    if (file_name.Substring(0, 1).EndsWith(\"\
    txt\") || file_name.Substring(0, 1).EndsWith(\"exe\") || file_name.Substring(0,\
    \ 1).EndsWith(\"dll\"))\n                    {\n                        return(\"\
    Yes\");\n                    }\n                    else\n                   \
    \ {\n                        return(\"No\");\n                    }\n        \
    \        }\n                else\n                {\n                    return(\"\
    No\");\n                }\n            }\n            else\n            {\n  \
    \              return(\"No\");\n            }\n        }\n        else\n     \
    \   {\n            return(\"No\");\n        }", "        int length = file_name.Length;\n\
    \        int dots = 0;\n        string name = file_name.Substring(0, 3);\n   \
    \     bool name_ok = true;\n        string name_before_dot;\n        string name_after_dot;\n\
    \        if (length != 3 || string.IsNullOrEmpty(name))\n        {\n         \
    \   name_ok = false;\n        }\n        else\n        {\n            name_before_dot\
    \ = name.Substring(0, 1);\n            name_after_dot = name.Substring(1);\n \
    \           if (!(name_before_dot.Any(x => (x >= 'a' && x <= 'z')) ||\n      \
    \          name_before_dot.Any(x => (x >= 'A' && x <= 'Z')) ||\n             \
    \   name_before_dot == null || name_before_dot.Length != 1 || \n             \
    \   name_after_dot.Any(x => x != 'txt' && x != 'exe' && x != 'dll')))\n      \
    \      {\n                name_ok = false;\n            }\n        }\n       \
    \ if (name_ok)\n        {\n            return file_name;\n        }\n        else\n\
    \        {\n            return \"No\";\n        }", "        int file_name = file_name.Length;\n\
    \        int dots_count = file_name.Count(Char.IsLetter);\n        if (dots_count\
    \ > 3) {\n            return \"No\";\n        }\n        int index = file_name.IndexOf('.');\n\
    \        if (index == -1) {\n            return \"No\";\n        }\n        if\
    \ (file_name.Substring(0, index).Length != 0) {\n            return \"No\";\n\
    \        }\n        bool result = true;\n        string[] valid_names = new string[]\
    \ { \"txt\", \"exe\", \"dll\" };\n        for (int i = 0; i < valid_names.Length;\
    \ i++) {\n            if (file_name.Substring(index + 1, valid_names[i].Length).ToLower()\
    \ == valid_names[i].ToLower()) {\n                result = true;\n           \
    \ }\n        }\n        if (!result) {\n            return \"No\";\n        }\n\
    \        return \"Yes\";", "        // Split the file name at the period\n   \
    \     string[] filenames = file_name.Split(new char[] { '.' });\n        string\
    \ file_extension = \"\";\n\n        // Validate file extension\n        for (int\
    \ i = 0; i < filenames.Length; i++) {\n            file_extension += filenames[i]\
    \ + \", \";\n        }\n\n        if (file_extension.Substring(0,2).ToLower()\
    \ == \"exe\" || file_extension.Substring(0,2).ToLower() == \"dll\") {\n      \
    \      file_extension = file_extension.Substring(0, file_extension.Length - 2);\n\
    \        }\n\n        // Verify that the file name contains exactly one '.'\n\
    \        if (filenames.Length != 2 && filenames.Length != 1 && filenames[0] !=\
    \ \"\" && file_extension == \"\") {\n            return \"No\";\n        }\n\n\
    \        // Validate first character\n        string first_character = filenames[0];\n\
    \        for (int i = 0; i < first_character.Length; i++) {\n            if ((first_character[i]<'a'\
    \ || first_character[i]>'z') && (first_character[i]<'A' || first_character[i]>'Z'))\
    \ {\n                return \"No\";\n            }\n        }\n\n        // Validate\
    \ last character\n        string last_character = filenames[filenames.Length -\
    \ 1];\n        for (int i = 0; i < last_character.Length; i++) {\n           \
    \ if ((last_character[i]<'a' || last_character[i]>'z') && (last_character[i]<'A'\
    \ || last_character[i]>'Z')) {\n                return \"No\";\n            }\n\
    \        }\n\n        // Validate first character and last character\n       \
    \ string middle_character = \"\";\n        bool all_letters = true;\n        for\
    \ (int i = 0; i < filenames.Length - 1; i++) {\n            all_letters = all_letters\
    \ && filenames[i][0] < 'a' || filenames[i][0] > 'z';\n            all_letters\
    \ = all_letters && filenames[i][1] < 'a' || filenames[i][1] > 'z';\n         \
    \   middle_character += filenames[i][0] + filenames[i][1];\n        }\n\n    \
    \    string middle_character2 = \"\";\n        bool all_letters2 = true;\n   \
    \     for (int i = 0; i < filenames.Length - 1; i++) {\n            all_letters2\
    \ = all_letters2 && filenames[i][0] < 'a' || filenames[i][0] > 'z';\n        \
    \    all_letters2 = all_letters2 && filenames[i][1] < 'a' || filenames[i][1] >\
    \ 'z';\n            middle_character2 += filenames[i][0] + filenames[i][1];\n\
    \        }\n\n        if (all_letters && all_letters2) {\n            return \"\
    No\";\n        }\n\n        if (middle_character != middle_character2) {\n   \
    \         return \"No\";\n        }\n\n        // Validate file name\n       \
    \ for (int i = 0; i < filenames.Length; i++) {\n            if (filenames[i].Length\
    \ > 3) {\n                return \"No\";\n            }\n        }\n\n       \
    \ return \"Yes\";", "        if (file_name.Length >= 3 && file_name.Contains('.')\
    \ == false\n            && file_name.Substring(0, 1) != '\\0' && file_name.Substring(0,\
    \ 1) != '\\\\'\n            && file_name.Substring(0, 1) != '\\\\0' && file_name.Substring(0,\
    \ 1) != '/'\n            && file_name.Substring(0, 1) != '/0' && file_name.Substring(0,\
    \ 1) != '\\\\'\n            && file_name.Substring(0, 1) != '\\\\0' && file_name.Substring(0,\
    \ 1) != '/'\n            && file_name.Substring(0, 1) != '/0' && file_name.Substring(0,\
    \ 1) != '\\\\'\n            && file_name.Substring(0, 1) != '\\\\0' && file_name.Substring(0,\
    \ 1) != '/'\n            && file_name.Substring(0, 1) != '/0' && file_name.Substring(0,\
    \ 1) != '\\\\'\n            && file_name.Substring(0, 1) != '\\\\0' && file_name.Substring(0,\
    \ 1) != '/'\n            && file_name.Substring(0, 1) != '/0' && file_name.Substring(0,\
    \ 1) != '\\\\'\n            && file_name.Substring(0, 1) != '\\\\0' && file_name.Substring(0,\
    \ 1) != '/'\n            && file_name.Substring(0, 1) != '/0' && file_name.Substring(0,\
    \ 1) != '\\\\'\n            && file_name.Substring(0, 1) != '\\\\0' && file_name.Substring(0,\
    \ 1) != '/'\n            && file_name.Substring(0, 1) != '/0' && file_name.Substring(0,\
    \ 1) != '\\\\'\n            && file_name.Substring(0, 1) != '\\\\0' && file_name.Substring(0,\
    \ 1) != '/'\n            && file_name.Substring(0, 1) != '/0' && file_name.Substring(0,\
    \ 1) != '\\\\'\n            && file_name.Substring(0, 1) != '\\\\0' && file_name.Substring(0,\
    \ 1) != '/'\n            && file_name.Substring(0, 1) != '/0' && file_name.Substring(0,\
    \ 1) != '\\\\'\n            && file_name.Substring(0, 1) != '\\\\0' && file_name.Substring(0,\
    \ 1) != '/'\n            && file_name.Substring(0, 1) != '/0' && file_name.Substring(0,\
    \ 1) != '\\\\'\n            && file_name.Substring(0, 1) != '\\\\0' && file_name.Substring(0,\
    \ 1) != '/'\n            && file_name.Substring(0, 1) != '/0' && file_name.Substring(0,\
    \ 1) != '\\\\'\n            && file_name.Substring(0, 1) != '\\\\0' && file_name.Substring(0,\
    \ 1) != '/'\n            && file_name.Substring(0, 1) != '/0' && file_name.Substring(0,\
    \ 1) != '\\\\'\n            && ", "        var isInvalid = true;\n        var\
    \ dotPos = file_name.IndexOf('.');\n        if (dotPos == -1) \n        {\n  \
    \          isInvalid = false;\n        }\n        if (file_name.Length > 3) \n\
    \        {\n            isInvalid = false;\n        }\n        if (file_name.StartsWith(String.Empty))\
    \ \n        {\n            isInvalid = false;\n        }\n        var allowedExtensions\
    \ = new List<string> { \"txt\", \"exe\", \"dll\" };\n        var allowedExtensionsString\
    \ = String.Join(\",\", allowedExtensions.ToArray());\n        var subString =\
    \ file_name.Substring(0, dotPos);\n        var subStringWithoutSpace = subString.Trim();\n\
    \        if (!allowedExtensions.Contains(subStringWithoutSpace)) \n        {\n\
    \            isInvalid = false;\n        }\n        return isInvalid ? \"No\"\
    \ : \"Yes\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]{0,3}$\";\n  \
    \      Regex reg = new Regex(pattern);\n        string result = reg.Match(file_name).Value;\n\
    \        if (result.Length >= 3) {\n            return \"No\";\n        }\n  \
    \      if (result.Contains(\".\")) {\n            if (result.IndexOf(\".\") ==\
    \ 0 || result[0] == 'A' || result[0] == 'a') {\n                return \"No\"\
    ;\n            }\n        }\n        return \"Yes\";", "        int dotPos = file_name.IndexOf('.');\n\
    \        if (dotPos > -1) {\n            string beforeDot = file_name.Substring(0,\
    \ dotPos);\n            string afterDot = file_name.Substring(dotPos + 1, file_name.Length\
    \ - dotPos - 1);\n            if (beforeDot.Length == 0 ||\n                beforeDot.Length\
    \ > 3 ||\n                !Char.IsLetter(beforeDot[0]) ||\n                afterDot.Length\
    \ != 3 ||\n                !afterDot.Contains(\"txt\") ||\n                !afterDot.Contains(\"\
    exe\") ||\n                !afterDot.Contains(\"dll\")) {\n                return\
    \ \"No\";\n            }\n        }\n        return \"Yes\";", "        bool isValid\
    \ = false;\n        if (file_name.Length > 4) {\n            isValid = true;\n\
    \        }\n        else if (file_name.Contains(\".\")) {\n            isValid\
    \ = true;\n        }\n        else if (!String.IsNullOrEmpty(file_name.Substring(0,\
    \ 1))) {\n            isValid = true;\n        }\n        else if (file_name.Substring(0,\
    \ 1).ToLower() == \"a\" || file_name.Substring(0, 1).ToLower() == \"b\"\n    \
    \         || file_name.Substring(0, 1).ToLower() == \"c\" || file_name.Substring(0,\
    \ 1).ToLower() == \"d\"\n             || file_name.Substring(0, 1).ToLower() ==\
    \ \"e\" || file_name.Substring(0, 1).ToLower() == \"f\"\n             || file_name.Substring(0,\
    \ 1).ToLower() == \"g\" || file_name.Substring(0, 1).ToLower() == \"h\"\n    \
    \         || file_name.Substring(0, 1).ToLower() == \"i\" || file_name.Substring(0,\
    \ 1).ToLower() == \"j\"\n             || file_name.Substring(0, 1).ToLower() ==\
    \ \"k\" || file_name.Substring(0, 1).ToLower() == \"l\"\n             || file_name.Substring(0,\
    \ 1).ToLower() == \"m\" || file_name.Substring(0, 1).ToLower() == \"n\"\n    \
    \         || file_name.Substring(0, 1).ToLower() == \"o\" || file_name.Substring(0,\
    \ 1).ToLower() == \"p\"\n             || file_name.Substring(0, 1).ToLower() ==\
    \ \"q\" || file_name.Substring(0, 1).ToLower() == \"r\"\n             || file_name.Substring(0,\
    \ 1).ToLower() == \"s\" || file_name.Substring(0, 1).ToLower() == \"t\"\n    \
    \         || file_name.Substring(0, 1).ToLower() == \"u\" || file_name.Substring(0,\
    \ 1).ToLower() == \"v\"\n             || file_name.Substring(0, 1).ToLower() ==\
    \ \"w\" || file_name.Substring(0, 1).ToLower() == \"x\"\n             || file_name.Substring(0,\
    \ 1).ToLower() == \"y\" || file_name.Substring(0, 1).ToLower() == \"z\") {\n \
    \           isValid = true;\n        }\n        if (isValid) {\n            return\
    \ (\"Yes\");\n        }\n        else {\n            return (\"No\");\n      \
    \  }", "        // TODO: Write your function here\n        if (file_name == \"\
    \" || file_name.IndexOf(\".\") > -1) {\n            return \"No\";\n        }\n\
    \        char[] ch1 = new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8',\
    \ '9' };\n        char[] ch2 = new char[] { 'A', 'B', 'C', 'D', 'E', 'F', 'G',\
    \ 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W',\
    \ 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };\n       \
    \ if (file_name[0] != ch1[0]) {\n            return \"No\";\n        }\n     \
    \   int index = 0;\n        while (file_name[index] != '.') {\n            index++;\n\
    \            if (index >= file_name.Length - 1) {\n                return \"No\"\
    ;\n            }\n        }\n        char[] charArray = file_name.ToCharArray();\n\
    \        char[] dot1 = new char[] { '.' };\n        char[] dot2 = new char[] {\
    \ '.' };\n        char[] dot3 = new char[] { '.' };\n        for (int i = 0; i\
    \ < dot1.Length; i++) {\n            dot1[i] = charArray[dot1.Length - 1 - i];\n\
    \        }\n        for (int i = 0; i < dot2.Length; i++) {\n            dot2[i]\
    \ = charArray[dot2.Length - 1 - i];\n        }\n        for (int i = 0; i < dot3.Length;\
    \ i++) {\n            dot3[i] = charArray[dot3.Length - 1 - i];\n        }\n \
    \       if (dot1[0] != dot2[0] || dot1[0] != dot3[0]) {\n            return \"\
    No\";\n        }\n        string ch3 = file_name.Substring(0, dot1.Length - 2);\n\
    \        foreach (char c in ch1) {\n            if (ch3.IndexOf(c) < 0) {\n  \
    \              return \"No\";\n            }\n        }\n        string ch4 =\
    \ file_name.Substring(dot1.Length - 2, file_name.Length - dot1.Length - 4);\n\
    \        foreach (char c in ch2) {\n            if (ch4.IndexOf(c) < 0) {\n  \
    \              return \"No\";\n            }\n        }\n        string ch5 =\
    \ file_name.Substring(dot1.Length - 2, file_name.Length - dot1.Length - 4);\n\
    \        foreach (char c in ch3) {\n            if (ch5.IndexOf(c) < 0) {\n  \
    \              return \"No\";\n            }\n        }\n        string ch6 =\
    \ file_name.Substring(dot2.Length - 2, file_name.Length - dot2.Length - 4);\n\
    \        foreach (char c in ch1) {\n            if (ch6.IndexOf(c) < 0) {\n  \
    \              return ", "        char dot_position = file_name.IndexOf('.');\n\
    \        if (dot_position == -1) {\n            return \"No\";\n        }\n  \
    \      if (file_name.Length < 4 || file_name.Contains('0') || file_name.Contains('1')\
    \ || file_name.Contains('2') || file_name.Contains('3') || file_name.Contains('4')\
    \ || file_name.Contains('5') || file_name.Contains('6') || file_name.Contains('7')\
    \ || file_name.Contains('8') || file_name.Contains('9') \n            || file_name.IndexOf(\"\
    \ \") != -1 || file_name.IndexOf(\".\") != 0) {\n            return \"No\";\n\
    \        }\n        if (file_name.Substring(0, 1) == ' ' || file_name.Substring(0,\
    \ 1) == '\\n' || file_name.Substring(0, 1) == '\\r') {\n            return \"\
    No\";\n        }\n        if (file_name.Substring(0, 1) < 'a' || file_name.Substring(0,\
    \ 1) > 'z' || file_name.Substring(0, 1) < 'A' || file_name.Substring(0, 1) > 'Z')\
    \ {\n            return \"No\";\n        }\n        if (file_name.Substring(dot_position\
    \ - 1).IndexOf(\"exe\", StringComparison.OrdinalIgnoreCase) == -1 && file_name.Substring(dot_position\
    \ - 1).IndexOf(\"dll\", StringComparison.OrdinalIgnoreCase) == -1 && file_name.Substring(dot_position\
    \ - 1).IndexOf(\"txt\", StringComparison.OrdinalIgnoreCase) == -1) {\n       \
    \     return \"No\";\n        }\n        return \"Yes\";", "        int i = 0;\n\
    \        while (file_name[i] != '\\0') {\n            if (file_name[i] < '0' ||\
    \ file_name[i] > '9') return \"No\";\n            if (file_name[i] == '.') return\
    \ \"No\";\n            if (file_name[i] < 'a' || file_name[i] > 'z') return \"\
    No\";\n            if (file_name[i] < 'A' || file_name[i] > 'Z') return \"No\"\
    ;\n            if (file_name[i] < 'a' || file_name[i] > 'z' || file_name[i] <\
    \ 'A' || file_name[i] > 'Z') return \"No\";\n            i++;\n        }\n   \
    \     if (i >= 3) return \"No\";\n        if (file_name.IndexOf('.') != -1) return\
    \ \"No\";\n        if (file_name.Substring(0, 1) != '_') return \"No\";\n    \
    \    if (file_name.Substring(0, 2) != \"ex_\" || file_name.Substring(0, 2) !=\
    \ \"dll_\" || file_name.Substring(0, 2) != \"txt_\" || file_name.Substring(0,\
    \ 2) != \"exe_\" || file_name.Substring(0, 2) != \"dll_\") return \"No\";\n  \
    \      return \"Yes\";", "        var regex = new Regex(@\"^\\d+\\.\\w+$\");\n\
    \        var file_name = regex.Replace(file_name, \"\");\n\n        var index\
    \ = file_name.IndexOf(\".\");\n        if (index != -1) {\n            var prefix\
    \ = file_name.Substring(0, index);\n            if (string.IsNullOrEmpty(prefix))\n\
    \                return \"No\";\n\n            var suffix = file_name.Substring(index);\n\
    \            var invalidSuffixes = new List<string>() { \"txt\", \"exe\", \"dll\"\
    \ };\n            if (!invalidSuffixes.Contains(suffix))\n                return\
    \ \"No\";\n\n            var startLetter = prefix.ToUpper().First();\n       \
    \     var validChars = new List<string>() { \"A\", \"B\", \"C\", \"D\", \"E\"\
    , \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"\
    , \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\" };\n  \
    \          if (!validChars.Contains(startLetter))\n                return \"No\"\
    ;\n            \n            return \"Yes\";\n        }\n        return \"No\"\
    ;", "        //TODO: Insert function code here\n        return string.Empty;",
  "        string pattern = @\"^[0-9]{1,3}\\.[a-zA-Z][a-zA-Z\\.]$\";\n        Regex\
    \ r = new Regex(pattern);\n        return r.IsMatch(file_name) ? \"Yes\" : \"\
    No\";", "        string file_ext = System.IO.Path.GetExtension(file_name);\n \
    \       bool check_file_name_valid = false;\n        Regex file_name_regex;\n\
    \        string input_file_name = file_name;\n        string dot_position = input_file_name.IndexOf(\"\
    .\");\n        string first_letter = input_file_name.Substring(0, 1);\n      \
    \  if (dot_position == -1) {\n            check_file_name_valid = true;\n    \
    \    } else {\n            check_file_name_valid = true;\n        }\n        //\
    \ TODO: This should probably be a recursive function\n        file_name_regex\
    \ = new Regex(@\".*\");\n        if (file_name_regex.IsMatch(input_file_name))\
    \ {\n            check_file_name_valid = true;\n        }\n        // TODO: This\
    \ should probably be a recursive function\n        file_name_regex = new Regex(@\"\
    .*\");\n        if (file_name_regex.IsMatch(input_file_name)) {\n            check_file_name_valid\
    \ = true;\n        }\n        // TODO: This should probably be a recursive function\n\
    \        file_name_regex = new Regex(@\".*\");\n        if (file_name_regex.IsMatch(input_file_name))\
    \ {\n            check_file_name_valid = true;\n        }\n        // TODO: This\
    \ should probably be a recursive function\n        file_name_regex = new Regex(@\"\
    .*\");\n        if (file_name_regex.IsMatch(input_file_name)) {\n            check_file_name_valid\
    \ = true;\n        }\n        if (check_file_name_valid == true) {\n         \
    \   return (\"Yes\");\n        } else {\n            return (\"No\");\n      \
    \  }", "        int numDigits = file_name.Count();\n        if (numDigits > 3)\
    \ //Check that the file has more than 3 digits in it\n        {\n            return\
    \ \"No\";\n        }\n        int dotIndex = file_name.IndexOf('.'); //Get the\
    \ index of the dot '.'\n        if (dotIndex < 1) //If the dot is not found\n\
    \        {\n            return \"No\";\n        }\n        char startLetter =\
    \ file_name[0].ToString().ToUpper(); //Get the first letter\n        char[] nameCharArray\
    \ = file_name.ToCharArray(); //Create an array of the file's name\n        string\
    \ nameBeforeDot = nameCharArray.Take(dotIndex - 1).ToArray(); //Grab the substring\
    \ before the dot\n        if (nameBeforeDot.Length > 0) //If the substring before\
    \ the dot is empty\n        {\n            if ((nameBeforeDot.IndexOf(\"A\") >\
    \ -1) || (nameBeforeDot.IndexOf(\"a\") > -1)) //Check that it starts with an alpha\n\
    \            {\n                return \"No\";\n            }\n        }\n   \
    \     string nameAfterDot = nameCharArray.Skip(dotIndex + 1).ToArray(); //Grab\
    \ the substring after the dot\n        if (nameAfterDot.Length > 0) //If the substring\
    \ after the dot is empty\n        {\n            if (!nameAfterDot.Contains(\"\
    txt\") && !nameAfterDot.Contains(\"exe\") && !nameAfterDot.Contains(\"dll\"))\
    \ //Check to make sure it is not 'txt', 'exe', or 'dll'\n            {\n     \
    \           return \"No\";\n            }\n        }\n        return \"Yes\";",
  "        char[] digits = new char[11];\n        string name = file_name.Substring(0,\
    \ file_name.Length - 3);\n        string dot = name.LastIndexOf('.');\n      \
    \  if (dot != -1) {\n            if (name.Substring(0, dot) == \"\" && name.Substring(dot)\
    \ == '0' || name.Substring(dot) == '0' || name.Substring(dot) == '1') {\n    \
    \            for (int i = 0; i <= 9; i++) {\n                    digits[i] = Convert.ToChar(name.Substring(dot\
    \ - 1, 1));\n                }\n                Array.Reverse(digits);\n     \
    \           for (int i = 0; i <= 10; i++) {\n                    if (digits[i]\
    \ != 0 && digits[i] != 9) {\n                        for (int j = 0; j <= 9; j++)\
    \ {\n                            if (digits[i] == Convert.ToChar(name.Substring(dot\
    \ + 1, 1))) {\n                                return \"Yes\";\n             \
    \               }\n                        }\n                    }\n        \
    \        }\n                return \"No\";\n            }\n        }\n       \
    \ for (int i = 0; i <= 9; i++) {\n            digits[i] = Convert.ToChar(name.Substring(dot,\
    \ 1));\n        }\n        Array.Reverse(digits);\n        for (int i = 0; i <=\
    \ 10; i++) {\n            if (digits[i] != 0 && digits[i] != 9) {\n          \
    \      for (int j = 0; j <= 9; j++) {\n                    if (digits[i] == Convert.ToChar(name.Substring(dot\
    \ + 1, 1))) {\n                        return \"Yes\";\n                    }\n\
    \                }\n            }\n        }\n        return \"No\";", "     \
    \   int dotIndex = file_name.IndexOf(\".\");\n        if (dotIndex == -1 || \n\
    \            dotIndex == 0 || \n            file_name[0] != ('a'|'z') ||\n   \
    \         file_name[0] != ('A'|'Z')) {\n            return \"No\";\n        }\n\
    \n        string beforeDot = file_name.Substring(0, dotIndex);\n        char[]\
    \ charArray = beforeDot.ToCharArray();\n        if (charArray.Count() == 0 ||\
    \ \n            charArray.Count() > 3 ||\n            charArray.Count() > charArray.IndexOf('.')\
    \ ||\n            charArray.Count() > charArray.IndexOf(' ') ||\n            charArray.Count()\
    \ > charArray.IndexOf(',')) {\n            return \"No\";\n        }\n\n     \
    \   string afterDot = file_name.Substring(dotIndex + 1);\n        if (afterDot\
    \ == \"txt\" || \n            afterDot == \"exe\" || \n            afterDot ==\
    \ \"dll\") {\n            return \"Yes\";\n        }\n        return \"No\";",
  "        //Your code goes here\n        var dotIndex = file_name.IndexOf('.');\n\
    \        if(dotIndex < 0)\n            return (\"No\");\n        var letterIndex\
    \ = file_name.IndexOf(file_name[0], 1);\n        if(letterIndex < 0)\n       \
    \     return (\"No\");\n        if(letterIndex > dotIndex)\n            return\
    \ (\"No\");\n        if(!((file_name.Substring(0, dotIndex).All(ch => Char.IsDigit(ch))\
    \ && file_name.Substring(dotIndex).All(ch => ch == '.') && file_name.Substring(dotIndex).StartsWith(Char.ToLower(file_name[0].ToString()))\
    \ || \n            file_name.Substring(dotIndex).All(ch => ch == '.') && file_name.Substring(dotIndex).All(ch\
    \ => !Char.IsDigit(ch) && ch != '_' && ch != '-' && ch != '.'))))\n          \
    \  return (\"No\");\n        if(file_name.Substring(dotIndex).Length > 3 || file_name.Substring(dotIndex).Length\
    \ < 1)\n            return (\"No\");\n        if(file_name.Substring(dotIndex).ToLower()\
    \ == \"dll\" || file_name.Substring(dotIndex).ToLower() == \"exe\" || file_name.Substring(dotIndex).ToLower()\
    \ == \"txt\" || file_name.Substring(dotIndex).ToLower() == \"py\" || file_name.Substring(dotIndex).ToLower()\
    \ == \"pyw\")\n            return (\"Yes\");\n        \n        return (\"No\"\
    );", "        if (file_name == null || file_name.Length == 0) {\n            return\
    \ \"No\";\n        }\n        // Check that the string does not contain more than\
    \ 3 digits\n        int num_digits = file_name.Where(char.IsDigit).Count();\n\
    \        if (num_digits > 3) {\n            return \"No\";\n        }\n      \
    \  // Check that the string contains exactly one dot\n        int dot = file_name.IndexOf('.');\n\
    \        if (dot < 0) {\n            return \"No\";\n        }\n        // Check\
    \ that string before dot is not empty\n        int before_dot = file_name.IndexOf('.',\
    \ 0, dot);\n        if (before_dot < 0) {\n            return \"No\";\n      \
    \  }\n        // Check that string after dot contains one of the given values\n\
    \        string suffixes = \".txt, .exe, .dll\";\n        string[] suffixes_array\
    \ = suffixes.Split(',');\n        int suffixes_count = suffixes_array.Length;\n\
    \        for (int i = 0; i < suffixes_count; i++) {\n            int after_dot\
    \ = file_name.IndexOf('.', dot + 1, suffixes_count - 1);\n            if (after_dot\
    \ >= 0) {\n                string suffix = file_name.Substring(dot, after_dot\
    \ - dot);\n                if (suffixes_array.Contains(suffix)) {\n          \
    \          return \"Yes\";\n                }\n            }\n        }\n    \
    \    return \"No\";", "        // 1. There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n        int file_name = file_name.Length;\n \
    \       if (file_name <= 3) return \"No\";\n\n        // 2. The file's name contains\
    \ exactly one dot '.'\n        int i = file_name.IndexOf('.');\n        if (i\
    \ == -1) return \"No\";\n\n        // 3. the substring before the dot should not\
    \ be empty, and it starts with a letter \n        // from the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n        int j = file_name.IndexOf('.', 1);\n        if (j ==\
    \ -1) return \"No\";\n\n        // 4. the substring after the dot should be one\
    \ of these: ['txt', 'exe', 'dll']\n        char[] valid_extensions = new char[]\
    \ {'txt', 'exe', 'dll'};\n        string extension = file_name.Substring(j);\n\
    \        if (valid_extensions.Contains(extension) == false) return \"No\";\n \
    \       return \"Yes\";", "        // Write your code here\n        int counter\
    \ = 0;\n        string file_name_split = file_name.Split('.');\n        foreach(var\
    \ file in file_name_split){\n            if(file.Length<3){\n                counter++;\n\
    \            }\n        }\n        if (counter == 1){\n            counter = 0;\n\
    \            foreach(var file in file_name_split){\n                if (file.Length\
    \ > 1 && file.StartsWith(\"a\") && file.EndsWith(\"txt\")){\n                \
    \    counter++;\n                }\n            }\n        }\n        if (counter\
    \ == 1){\n            counter = 0;\n            foreach(var file in file_name_split){\n\
    \                if (file.Length > 1 && file.StartsWith(\"a\") && file.EndsWith(\"\
    exe\")){\n                    counter++;\n                }\n            }\n \
    \       }\n        if (counter == 1){\n            counter = 0;\n            foreach(var\
    \ file in file_name_split){\n                if (file.Length > 1 && file.StartsWith(\"\
    a\") && file.EndsWith(\"dll\")){\n                    counter++;\n           \
    \     }\n            }\n        }\n        if (counter == 3){\n            return\
    \ \"Yes\";\n        }else{\n            return \"No\";\n        }", "        //\
    \ your code here\n        if (file_name.Length > 3) {\n            return \"No\"\
    ;\n        }\n        if (!file_name.Contains(\".\"))\n        {\n           \
    \ return \"No\";\n        }\n        string file_name = file_name.Substring(0,\
    \ file_name.IndexOf(\".\") + 1);\n        if (file_name.Length != 1)\n       \
    \ {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ 1).ToLower() !=\"a\")\n        {\n            return \"No\";\n        }\n  \
    \      if (file_name.Substring(1, 1).ToLower() !=\"z\")\n        {\n         \
    \   return \"No\";\n        }\n        return file_name;", "        if (file_name.Length\
    \ > 3) {\n            return \"No\";\n        }\n        if (file_name.Contains(\"\
    .\")) {\n            return \"No\";\n        }\n        if (file_name.StartsWith(string.Empty))\
    \ {\n            return \"No\";\n        }\n        char[] chars = file_name.ToCharArray();\n\
    \        bool IsContainLetter = false;\n        bool IsContainDot = false;\n \
    \       for (int i = 0; i < chars.Length; i++) {\n            if (chars[i] ==\
    \ '.') {\n                IsContainDot = true;\n            }\n            if\
    \ (chars[i] == 'a') {\n                IsContainLetter = true;\n            }\n\
    \            if (chars[i] == 'z') {\n                IsContainLetter = true;\n\
    \            }\n            if (chars[i] == 'A') {\n                IsContainLetter\
    \ = true;\n            }\n            if (chars[i] == 'Z') {\n               \
    \ IsContainLetter = true;\n            }\n        }\n        if (IsContainLetter)\
    \ {\n            return \"No\";\n        }\n        if (IsContainDot) {\n    \
    \        return \"No\";\n        }\n        if (chars[chars.Length - 2] == 0 ||\
    \ chars[chars.Length - 2] == '.' || chars[chars.Length - 2] == 1) {\n        \
    \    return \"No\";\n        }\n        return \"Yes\";", "        var regex =\
    \ new Regex(@\"^\\d+\\.[a-zA-Z]+$\");\n        var regex_substring = new Regex(@\"\
    ^[a-zA-Z]+\\.\");\n        var file_parts = regex.Split(file_name);\n        if\
    \ (file_parts.Length > 3) {\n            return \"No\";\n        }\n        if\
    \ (!regex.IsMatch(file_name)) {\n            return \"No\";\n        }\n     \
    \   if (!regex_substring.IsMatch(file_parts[0])) {\n            return \"No\"\
    ;\n        }\n        var extension = file_parts[file_parts.Length - 1];\n   \
    \     if (new string[] { \"txt\", \"exe\", \"dll\" }.Any(e => e == extension))\
    \ {\n            return \"Yes\";\n        }\n        return \"No\";", "      \
    \  string result = string.Empty;\n        // Make sure the file name is less than\
    \ 3 characters long\n        if (file_name.Length > 3) {\n            result =\
    \ \"No\";\n        }\n        // Make sure the file name contains only one period\n\
    \        if (file_name.Count(x => x == '.') != 1) {\n            result = \"No\"\
    ;\n        }\n        // Make sure the file name is longer than 3 characters\n\
    \        if (file_name.Count(x => x == '.') != 1) {\n            result = \"No\"\
    ;\n        }\n        // Make sure the file name starts with an alpha character\n\
    \        if (file_name.Count(x => x == '.') != 1 || file_name.Count(x => x ==\
    \ '.') != 1) {\n            result = \"No\";\n        }\n        // Make sure\
    \ the file name ends with one of these extensions: \n        // ['txt', 'exe',\
    \ 'dll']\n        if (file_name.Count(x => x == '.') != 1 || file_name.Count(x\
    \ => x == '.') != 1 || file_name.Count(x => x == '.') != 1 || file_name.Count(x\
    \ => x == '.') != 1 || file_name.Count(x => x == '.') != 1 || file_name.Count(x\
    \ => x == '.') != 1 || file_name.Count(x => x == '.') != 1 || file_name.Count(x\
    \ => x == '.') != 1 || file_name.Count(x => x == '.') != 1 || file_name.Count(x\
    \ => x == '.') != 1 || file_name.Count(x => x == '.') != 1 || file_name.Count(x\
    \ => x == '.') != 1 || file_name.Count(x => x == '.') != 1 || file_name.Count(x\
    \ => x == '.') != 1 || file_name.Count(x => x == '.') != 1 || file_name.Count(x\
    \ => x == '.') != 1 || file_name.Count(x => x == '.') != 1 || file_name.Count(x\
    \ => x == '.') != 1 || file_name.Count(x => x == '.') != 1 || file_name.Count(x\
    \ => x == '.') != 1 || file_name.Count(x => x == '.') != 1 || file_name.Count(x\
    \ => x == '.') != 1 || file_name.Count(x => x == '.') != 1 || file_name.Count(x\
    \ => x == '.') != 1 || file_name.Count(x => x == '.') != 1 || file_name.Count(x\
    \ => x == '.') != 1 || file_name.Count(x => x == '.') != 1 || file_name.Count(x\
    \ => x == '.') != 1 || file_name.Count(x => x == '.') != 1 || file_name.Count(x\
    \ => x == '.') != 1 || file_name.Count(x => x == '.') != 1 || file_name.Count(x\
    \ => x == '.') != 1 || file_name.Count(x => x == '.", "        string pattern\
    \ = \"^([0-9])*([.])*([a-zA-Z])*\";\n        if (file_name.Length > 3)\n     \
    \   {\n            return (\"No\");\n        }\n        if (file_name.IndexOf('.')\
    \ != -1)\n        {\n            string sub_string = file_name.Substring(0, file_name.IndexOf('.'));\n\
    \            if (sub_string.IndexOf(\".\") != -1)\n            {\n           \
    \     return (\"No\");\n            }\n            if (sub_string.Substring(0,\
    \ 1) != (Convert.ToChar(65)))\n            {\n                return (\"No\");\n\
    \            }\n            if (sub_string.Substring(0, 2) != (Convert.ToChar(97)))\n\
    \            {\n                return (\"No\");\n            }\n        }\n \
    \       return (file_name.IndexOf(pattern) != -1);", "        var invalidCharacters\
    \ = file_name.ToCharArray();\n        var charCount = invalidCharacters.Where(char.IsDigit).Count();\n\
    \        var dotIndex = invalidCharacters.IndexOf('.');\n        if (dotIndex\
    \ < 0 || dotIndex > charCount - 1 || invalidCharacters[dotIndex] == '')\n    \
    \    {\n            return \"No\";\n        }\n        var firstChar = invalidCharacters[dotIndex\
    \ - 1];\n        if (firstChar < 'a' || firstChar > 'z')\n        {\n        \
    \    return \"No\";\n        }\n        var restOfString = invalidCharacters.Skip(dotIndex).Take(2);\n\
    \        if (restOfString.Any()) {\n            var firstChar = restOfString.First();\n\
    \            if (firstChar < 'a' || firstChar > 'z')\n            {\n        \
    \        return \"No\";\n            }\n        }\n        var isValid = restOfString.All(x\
    \ => new [] {'t', 'e', 'x'}.Contains(x));\n        if (!isValid)\n        {\n\
    \            return \"No\";\n        }\n        return \"Yes\";", "        //\
    \ Solution\n        if (file_name.Length > 3) return \"No\";\n        if (file_name.Contains(\"\
    .\")) return \"No\";\n        if (file_name.Substring(0,1) == \"\" || !char.IsLetter(file_name.Substring(0,1)))\
    \ return \"No\";\n        if (file_name.Substring(file_name.IndexOf(\".\") + 1)\
    \ != \"exe\" && file_name.Substring(file_name.IndexOf(\".\") + 1) != \"dll\")\
    \ return \"No\";\n        return \"Yes\";", "        Regex regex = new Regex(@\"\
    ^[0-9]{3}\\.[a-z]{2}$\");\n        return regex.IsMatch(file_name) ? \"Yes\" :\
    \ \"No\";", "        var isValid = false;\n        var dotIndex = file_name.IndexOf('.');\n\
    \        var numIndex = file_name.IndexOf('0', 0);\n        var numLength = (numIndex\
    \ + 1 - file_name.IndexOf('0'));\n        var nameLength = file_name.Length;\n\
    \        if (numLength > 3) {\n            return \"Yes\";\n        }\n      \
    \  if (dotIndex < 1) {\n            return \"No\";\n        }\n        if (nameLength\
    \ < 2) {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ dotIndex).All(c => c != '.')) {\n            return \"No\";\n        }\n   \
    \     if (file_name.Substring((dotIndex + 1), (file_name.Length - (dotIndex +\
    \ 1))).All(c => c == '.' || c != '.')) {\n            return \"No\";\n       \
    \ }\n        if (file_name.Substring(0, (dotIndex + 1)).All(c => !(char.IsLetter(c))))\
    \ {\n            return \"No\";\n        }\n        if (file_name.Substring((dotIndex\
    \ + 1), (file_name.Length - (dotIndex + 1))).All(c => !(char.IsLetter(c)))) {\n\
    \            return \"No\";\n        }\n        return \"Yes\";", "        var\
    \ chars = new List<char>();\n        foreach (var c in file_name)\n          \
    \  chars.Add(c);\n        if (chars.Count > 3 || chars.Contains('.') || (chars.Count\
    \ > 0 && chars[0].ToLower() != 'a' && chars[0].ToLower() != 'b' && chars[0].ToLower()\
    \ != 'c' && chars[0].ToLower() != 'd' && chars[0].ToLower() != 'e' && chars[0].ToLower()\
    \ != 'f' && chars[0].ToLower() != 'g' && chars[0].ToLower() != 'h' && chars[0].ToLower()\
    \ != 'i' && chars[0].ToLower() != 'j' && chars[0].ToLower() != 'k' && chars[0].ToLower()\
    \ != 'l' && chars[0].ToLower() != 'm' && chars[0].ToLower() != 'n' && chars[0].ToLower()\
    \ != 'o' && chars[0].ToLower() != 'p' && chars[0].ToLower() != 'q' && chars[0].ToLower()\
    \ != 'r' && chars[0].ToLower() != 's' && chars[0].ToLower() != 't' && chars[0].ToLower()\
    \ != 'u' && chars[0].ToLower() != 'v' && chars[0].ToLower() != 'w' && chars[0].ToLower()\
    \ != 'x' && chars[0].ToLower() != 'y' && chars[0].ToLower() != 'z'))\n       \
    \     return \"No\";\n        else\n            return \"Yes\";", "        //\
    \ Your code goes here\n        if (file_name.Contains(\".\")) {\n            string\
    \ file_extension = file_name.Substring(0, file_name.LastIndexOf(\".\") + 1);\n\
    \            string file_prefix = file_name.Substring(0, file_name.IndexOf(\"\
    .\") + 1);\n            if (file_extension == \"txt\" || file_extension == \"\
    exe\" || file_extension == \"dll\") {\n                return \"Yes\";\n     \
    \       } else {\n                return \"No\";\n            }\n        }\n \
    \       else if (file_name.Substring(0,1) == \"0\") {\n            return \"No\"\
    ;\n        } else if (file_name.Substring(0,1) == \"9\") {\n            return\
    \ \"No\";\n        } else if (file_name.Substring(0, 1) == \" \") {\n        \
    \    return \"No\";\n        } else if (file_name.IndexOf(\".\") <= 0) {\n   \
    \         return \"No\";\n        } else if (file_name.IndexOf(\".\") > 0) {\n\
    \            string file_extension = file_name.Substring(0, file_name.LastIndexOf(\"\
    .\") + 1);\n            if (file_extension == \"txt\" || file_extension == \"\
    exe\" || file_extension == \"dll\") {\n                return \"Yes\";\n     \
    \       } else {\n                return \"No\";\n            }\n        }", " \
    \       string dot_count = file_name.Count(c => c == '.');\n        int dot_index\
    \ = file_name.IndexOf(\".\");\n        if (dot_count > 2) {\n            return\
    \ \"No\";\n        }\n        else if (dot_count == 2) {\n            if (dot_index\
    \ == 0) {\n                char first = file_name[dot_index];\n              \
    \  if (first != 'a' && first != 'A') {\n                    return \"No\";\n \
    \               }\n            }\n            else {\n                char last\
    \ = file_name[dot_index - 1];\n                if (last != 'a' && last != 'A')\
    \ {\n                    return \"No\";\n                }\n            }\n  \
    \      }\n        else {\n            return \"No\";\n        }\n        \n  \
    \      string sub_string = file_name.Substring(0, dot_index);\n        bool is_valid\
    \ = sub_string.All(c => c >= 'a' && c <= 'z');\n        if (!is_valid) {\n   \
    \         return \"No\";\n        }\n        \n        string sub_string2 = file_name.Substring(dot_index);\n\
    \        bool is_valid2 = sub_string2.All(c => c >= 'a' && c <= 'z');\n      \
    \  if (!is_valid2) {\n            return \"No\";\n        }\n        \n      \
    \  if (file_name.IndexOf(\".\") > 0) {\n            return \"No\";\n        }\n\
    \        \n        return \"Yes\";", "        char[] chars = file_name.ToCharArray();\n\
    \        int len = chars.Length;\n        if (len < 3 || chars[0] == '.' || chars[len-1]\
    \ == '.' || chars.TakeWhile(chars.TakeWhile(chars.TakeWhile(x => x<='9').TakeWhile(x\
    \ => x>='A').TakeWhile(x => x>='Z')).TakeWhile(x => x<='9').TakeWhile(x => x<='9').Skip(1).Take(1).Any())\
    \ != \"txt\") {\n            return \"No\";\n        }\n        bool isInt = false;\n\
    \        foreach (char ch in file_name) {\n            if (char.IsDigit(ch)) {\n\
    \                isInt = true;\n                break;\n            }\n      \
    \  }\n        if (isInt != true) {\n            return \"No\";\n        }\n  \
    \      return null;", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z][a-zA-Z][a-zA-Z]$\"\
    ;\n        if (!Regex.IsMatch(file_name,pattern)) {\n            return \"No\"\
    ;\n        }\n        if (file_name.IndexOf('.') > 1) {\n            return \"\
    No\";\n        }\n        if (file_name.Substring(0, 1) == \"\" ||\n         \
    \   file_name.Substring(0, 1) < 'a' || file_name.Substring(0, 1) > 'z') {\n  \
    \          return \"No\";\n        }\n        if (!file_name.Substring(0, 3).Any(char.IsLetter))\
    \ {\n            return \"No\";\n        }\n        return file_name.Substring(0,\
    \ 3).Contains(\"txt\") ||\n               file_name.Substring(0, 3).Contains(\"\
    exe\") ||\n               file_name.Substring(0, 3).Contains(\"dll\");", "   \
    \     string[] file_name = file_name.Split('.')[0].ToCharArray();\n        string\
    \ ext = file_name.Split('.')[1];\n        int i = 0;\n        while (i < file_name.Length)\
    \ {\n            char c = file_name[i];\n            if (!char.IsLetterOrDigit(c))\
    \ {\n                i += 1;\n            } else {\n                if (!(i <\
    \ fileName.Length && char.IsLetterOrDigit(file_name[i])) || !char.IsLetterOrDigit(file_name[i\
    \ + 1])) {\n                    i += 1;\n                } else {\n          \
    \          if (i < fileName.Length && char.IsLetterOrDigit(file_name[i]) && !(file_name[i\
    \ + 1] == 't' || file_name[i + 1] == 'e' || file_name[i + 1] == 'x' || file_name[i\
    \ + 1] == 'd') && !(file_name[i + 1] == 'T' || file_name[i + 1] == 'E' || file_name[i\
    \ + 1] == 'X' || file_name[i + 1] == 'D')) {\n                        i += 1;\n\
    \                    } else {\n                        if (ext == \"txt\" || ext\
    \ == \"exe\" || ext == \"dll\") {\n                            i += 1;\n     \
    \                   } else {\n                            if (i < fileName.Length\
    \ && file_name[i + 1] == '.') {\n                                i += 1;\n   \
    \                         } else {\n                                return \"\
    No\";\n                            }\n                        }\n            \
    \        }\n                }\n            }\n        }\n        return \"Yes\"\
    ;", "        bool valid = true;\n        Regex regex = new Regex(@\"^(?>[^\\.]{0,3}\\\
    .)(?!\\.)[a-zA-Z]+\\.(txt|exe|dll)$\");\n        if (!regex.IsMatch(file_name))\
    \ {\n            valid = false;\n        }\n        return valid ? \"Yes\" : \"\
    No\";", "        string pattern = @\"^[0-9]+\\.[a-z]+$\";\n        return Regex.IsMatch(file_name,pattern)\n\
    \                ? file_name\n                : String.Empty;", "        int dotIndex\
    \ = file_name.IndexOf(\".\");\n        if (dotIndex == -1) {\n            Console.WriteLine(\"\
    File name is invalid\");\n            return \"No\";\n        }\n        string\
    \ prefix = file_name.Substring(0, dotIndex);\n        if (string.IsNullOrEmpty(prefix))\
    \ {\n            Console.WriteLine(\"File name is not valid\");\n            return\
    \ \"No\";\n        }\n        char[] allowedChars = new char[] { 'a', 'b', 'c',\
    \ 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',\
    \ 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I',\
    \ 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y',\
    \ 'Z' };\n        if (!allowedChars.Contains(prefix[0])) {\n            Console.WriteLine(\"\
    File name is not valid\");\n            return \"No\";\n        }\n        if\
    \ (!(new string[] { \"txt\", \"exe\", \"dll\" }.Contains(file_name.Substring(dotIndex\
    \ + 1, file_name.Length - (dotIndex + 1))))) {\n            Console.WriteLine(\"\
    File name is not valid\");\n            return \"No\";\n        }\n        return\
    \ \"Yes\";", "        var regex = new Regex(@\"^\\d*\\.txt$|^\\d*\\.exe$|^\\d*\\\
    .dll$\", RegexOptions.IgnoreCase);\n        var file_parts = regex.Split(file_name);\n\
    \n        if (file_parts.Length >= 2 && file_parts[0].Length > 0)\n        {\n\
    \            var last_part = file_parts[file_parts.Length - 1];\n            var\
    \ file_start = last_part.IndexOf(\".\");\n            var file_end = file_start.Length\
    \ == 0 ? 0 : last_part.IndexOf(\".\", file_start + 1);\n            var file_name\
    \ = file_parts[file_parts.Length - 2];\n            var result = file_name ==\
    \ null ? false : regex.IsMatch(file_name);\n\n            if (result)\n      \
    \          return \"Yes\";\n            else\n                return \"No\";\n\
    \        }\n        else\n        {\n            return \"No\";\n        }", " \
    \       string pattern = @\"^\\d*\\.txt|exe|dll$\";\n        Regex r = new Regex(pattern,\
    \ RegexOptions.IgnoreCase);\n        bool valid = r.IsMatch(file_name);\n    \
    \    return valid ? \"Yes\" : \"No\";", "        int len= file_name.Length;\n\
    \        string sub= file_name.Substring(0,4);\n        int dot1= sub.IndexOf('.');\n\
    \        if (len<4 || dot1==-1 || sub[0]<'a' || sub[0]>'z' || sub[1]<'a' || sub[1]>'z')\
    \ {\n            return \"No\";\n        }\n        string sub2= file_name.Substring(4,\
    \ dot1-4);\n        char dot2= sub2.ToCharArray()[0];\n        string valid= new\
    \ string(new char[] { 'd', 'e', 'f', 't' }) + new string(new char[] { '.' }) +\
    \ \n                        new string(new char[] { 't', 'x', 't', 'x' }) + new\
    \ string(new char[] { 'e', 'x' });\n        if ((valid.Contains(dot2)) && (valid.IndexOf(dot2)<0\
    \ || valid.IndexOf(dot2)>4)) {\n            return \"No\";\n        }\n      \
    \  string str=new string(new char[] { 'd', 'e', 'f', 't' }) + new string(new char[]\
    \ { '.' }) + \n                        new string(new char[] { 't', 'x', 't',\
    \ 'x' }) + new string(new char[] { 'e', 'x' });\n        string str1=new string(new\
    \ char[] { 'd', 'e', 'f', 't' });\n        string str2=new string(new char[] {\
    \ '.' });\n        string str3=new string(new char[] { 't', 'x', 't', 'x' });\n\
    \        string str4=new string(new char[] { 'e', 'x' });\n        if (file_name.IndexOf(str1)!=-1\
    \ && file_name.IndexOf(str2)!=-1 && file_name.IndexOf(str3)!=-1 && file_name.IndexOf(str4)!=-1)\
    \ {\n            return \"Yes\";\n        }\n        return \"No\";", "      \
    \  if (file_name.Length > 3 || (file_name.Length == 0 && !string.IsNullOrEmpty(file_name[0]))\
    \ || (file_name.Length == 1 && !char.IsDigit(file_name[0])) || (file_name.Length\
    \ > 1 && !file_name[0].Equals('.')) || file_name.IndexOf(\".\") < 0 || file_name.Substring(0,\
    \ file_name.IndexOf(\".\") + 1).ToLowerInvariant().Contains(\"a\") || file_name.Substring(0,\
    \ file_name.IndexOf(\".\") + 1).ToLowerInvariant().Contains(\"b\") || file_name.Substring(0,\
    \ file_name.IndexOf(\".\") + 1).ToLowerInvariant().Contains(\"c\") || file_name.Substring(0,\
    \ file_name.IndexOf(\".\") + 1).ToLowerInvariant().Contains(\"d\") || file_name.Substring(0,\
    \ file_name.IndexOf(\".\") + 1).ToLowerInvariant().Contains(\"e\") || file_name.Substring(0,\
    \ file_name.IndexOf(\".\") + 1).ToLowerInvariant().Contains(\"f\") || file_name.Substring(0,\
    \ file_name.IndexOf(\".\") + 1).ToLowerInvariant().Contains(\"g\") || file_name.Substring(0,\
    \ file_name.IndexOf(\".\") + 1).ToLowerInvariant().Contains(\"h\") || file_name.Substring(0,\
    \ file_name.IndexOf(\".\") + 1).ToLowerInvariant().Contains(\"i\") || file_name.Substring(0,\
    \ file_name.IndexOf(\".\") + 1).ToLowerInvariant().Contains(\"j\") || file_name.Substring(0,\
    \ file_name.IndexOf(\".\") + 1).ToLowerInvariant().Contains(\"k\") || file_name.Substring(0,\
    \ file_name.IndexOf(\".\") + 1).ToLowerInvariant().Contains(\"l\") || file_name.Substring(0,\
    \ file_name.IndexOf(\".\") + 1).ToLowerInvariant().Contains(\"m\") || file_name.Substring(0,\
    \ file_name.IndexOf(\".\") + 1).ToLowerInvariant().Contains(\"n\") || file_name.Substring(0,\
    \ file_name.IndexOf(\".\") + 1).ToLowerInvariant().Contains(\"o\") || file_name.Substring(0,\
    \ file_name.IndexOf(\".\") + 1).ToLowerInvariant().Contains(\"p\") || file_name.Substring(0,\
    \ file_name.IndexOf(\".\") + 1).ToLowerInvariant().Contains(\"q\") || file_name.Substring(0,\
    \ file_name.IndexOf(\".\") + 1).ToLowerInvariant().Contains(\"r\") || file_name.Substring(0,\
    \ file_name.IndexOf(\".\") + 1).ToLowerInvariant().Contains(\"s\") || file_name.Substring(0,\
    \ file_name.IndexOf(\".\") + 1).ToLowerInvariant().Contain", "        //return\
    \ 'Yes' if the file's name is valid, and 'No' otherwise\n        char[] dots =\
    \ file_name.Split('.').Select(c => c).ToArray();\n        if (dots.Length > 3)\n\
    \            return \"No\";\n        else if (dots.Length == 0 || dots[0][0] ==\
    \ '0' || dots[0][0] != '9')\n            return \"No\";\n        else if (dots.Length\
    \ == 1 || dots[1] == \"\")\n            return \"No\";\n        else if (dots[dots.Length\
    \ - 1] == \"txt\" || dots[dots.Length - 1] == \"exe\" || dots[dots.Length - 1]\
    \ == \"dll\")\n            return \"Yes\";\n        else\n            return \"\
    No\";", "        var dotIndex = file_name.IndexOf('.');\n        var startWithLetterIndex\
    \ = file_name.IndexOfAny(new[] {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'});\n\
    \        if (dotIndex < 0 || startWithLetterIndex < 0 || dotIndex < startWithLetterIndex)\
    \ {\n            return \"No\";\n        }\n        var subStringBeforeDot = file_name.Substring(0,\
    \ dotIndex).Trim();\n        if (!(subStringBeforeDot.Length > 0)) {\n       \
    \     return \"No\";\n        }\n        var extensions = new[] {\"txt\", \"exe\"\
    , \"dll\"};\n        if (!(extensions.Contains(subStringBeforeDot))) {\n     \
    \       return \"No\";\n        }\n        return \"Yes\";", "        string dotLocation\
    \ = file_name.IndexOf('.');\n        if (dotLocation < 3 || dotLocation > file_name.Length\
    \ - 3) {\n            return \"No\";\n        }\n        else if (dotLocation\
    \ == dotLocation) {\n            return (\"Yes\");\n        }\n        else {\n\
    \            string fileName = file_name.Substring(0, dotLocation);\n        \
    \    string firstChar = file_name.Substring(dotLocation - 1);\n            if\
    \ (firstChar != \".\" || firstChar < 'a' || firstChar > 'z') {\n             \
    \   return \"No\";\n            }\n            else if (fileName.IndexOf(\".exe\"\
    ) > -1 || fileName.IndexOf(\".dll\") > -1) {\n                return (\"Yes\"\
    );\n            }\n            else {\n                return (\"No\");\n    \
    \        }\n        }", "        // Write your code here\n        char[] dots\
    \ = new char[] {'.'};\n        char[] digits = new char[] { '0', '1', '2', '3',\
    \ '4', '5', '6', '7', '8', '9' };\n        char[] letters = new char[] { 'a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };\n        char[] letters_upper\
    \ = new char[] { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\
    \ 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z' };\n\n     \
    \   string temp = file_name.ToLower();\n        for (int i = 1; i < temp.length;\
    \ i++) {\n            if (!digits[temp[i] - '0']) {\n                return \"\
    No\";\n            }\n        }\n        if (temp.IndexOf('.') > -1) {\n     \
    \       if (temp.Substring(0, temp.IndexOf('.')) == \"\") {\n                return\
    \ \"No\";\n            }\n            string name = temp.Substring(0, temp.IndexOf('.'));\n\
    \            if (!name.Equals(name[0], StringComparison.OrdinalIgnoreCase)) {\n\
    \                return \"No\";\n            }\n            char[] dots_before\
    \ = name.ToCharArray();\n            int count = 0;\n            for (int i =\
    \ 0; i < dots_before.Length; i++) {\n                if (dots_before[i] != dots[0]\
    \ && dots_before[i] != dots[1] && dots_before[i] != dots[2] && dots_before[i]\
    \ != dots[3] && dots_before[i] != dots[4] && dots_before[i] != dots[5] && dots_before[i]\
    \ != dots[6] && dots_before[i] != dots[7] && dots_before[i] != dots[8] && dots_before[i]\
    \ != dots[9]) {\n                    if (dots_before[i] == dots[0]) {\n      \
    \                  count++;\n                    }\n                }\n      \
    \      }\n            if (count == 0) {\n                return \"Yes\";\n   \
    \         }\n        }\n        return \"No\";", "        var match = Regex.Match(file_name,\
    \ @\"^[0-9]+([a-z]\\.)?[a-zA-Z]+\\.(txt|exe|dll)$\");\n        var file_name =\
    \ match.Groups[0].Value;\n\n        if (file_name.Contains('.')) {\n         \
    \   return file_name;\n        }\n\n        if (file_name.Trim().Length < 3) {\n\
    \            return \"No\";\n        }\n\n        if (!file_name.StartsWith(\"\
    a\") || !file_name.StartsWith(\"A\")) {\n            return \"No\";\n        }\n\
    \n        if (!file_name.EndsWith(\"txt\") && !file_name.EndsWith(\"exe\") &&\
    \ !file_name.EndsWith(\"dll\")) {\n            return \"No\";\n        }\n\n \
    \       return file_name;", "        string pattern = @\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z][a-zA-Z0-9]{0,4}$\";\n        Match match = Regex.Match(file_name.Replace(\"\
    \\\\\", \"/\"), pattern);\n        if (match.Success) {\n            if (match.Value\
    \ != \"exe\" && match.Value != \"dll\" && match.Value != \"txt\") {\n        \
    \        return \"No\";\n            }\n        }\n        return \"Yes\";", " \
    \       var isValid = false;\n\n        Console.WriteLine($\"Checking if {file_name}\
    \ is valid...\");\n        \n        var name = file_name.Substring(0, file_name.IndexOf('.')).Trim();\n\
    \        Console.WriteLine($\"Checking if {name} has a valid name...\");\n   \
    \     \n        var letters = 'a' - 'A' + 'z' - 'Z';\n        var startsWithLetter\
    \ = name.Any(l => l < letters);\n        Console.WriteLine($\"Checking if {name}\
    \ starts with a letter...\");\n        \n        var extensions = new[] {\n  \
    \          \"txt\", \"exe\", \"dll\"\n        };\n        var endsWithOneOfTheseExtensions\
    \ = extensions.Contains(name.Substring(name.Length - 3));\n        Console.WriteLine($\"\
    Checking if {name} ends with one of these: {extensions}...\");\n        \n   \
    \     var hasOneOfTheseNumbers = \"0\".ToCharArray().Except(name).Any();\n   \
    \     Console.WriteLine($\"Checking if {name} has at least one number from 0 to\
    \ 9...\");\n\n        isValid = startsWithLetter && endsWithOneOfTheseExtensions\
    \ && hasOneOfTheseNumbers;\n\n        Console.WriteLine($\"{isValid} is valid!\"\
    );\n        return isValid.ToString() ? \"Yes\" : \"No\";", "        // Your code\
    \ goes here\n        char firstLetter = file_name[0];\n        char lastLetter\
    \ = file_name[file_name.Length - 1];\n        string fileWithoutDot = file_name.Remove(0,\
    \ 1);\n        string fileWithDot = file_name.Remove(0, fileWithoutDot.Length\
    \ - 1);\n        int indexDot = fileWithDot.IndexOf('.');\n        if (indexDot\
    \ > 0) {\n            string prefix = fileWithDot.Substring(0, indexDot);\n  \
    \          if (prefix != \"\" && prefix.All(char.IsLetter)) {\n              \
    \  string suffix = fileWithDot.Substring(indexDot + 1);\n                return\
    \ (suffix.Equals(\"txt\", StringComparison.CurrentCultureIgnoreCase)\n       \
    \                 && firstLetter < lastLetter)\n                        ? (\"\
    Yes\") : (\"No\");\n            }\n        }\n        return \"No\";", "     \
    \   \n        Regex check = new Regex(@\"\\d\");\n        if (check.IsMatch(file_name))\
    \ {\n            Console.Write(\"File name contains more than 3 digits\");\n \
    \           return \"No\";\n        }\n        Regex check2 = new Regex(@\"\\\
    .\");\n        if (check2.IsMatch(file_name)) {\n            Console.Write(\"\
    File name contains more than one dot\");\n            return \"No\";\n       \
    \ }\n        Regex check3 = new Regex(@\"^[a-zA-Z]\");\n        if (!check3.IsMatch(file_name))\
    \ {\n            Console.Write(\"File name starts with a letter from Latin alphabet\"\
    );\n            return \"No\";\n        }\n        Regex check4 = new Regex(@\"\
    \\.(exe|dll)\");\n        if (check4.IsMatch(file_name)) {\n            Console.Write(\"\
    File name ends with 'exe' or 'dll'\");\n            return \"Yes\";\n        }\n\
    \        return \"No\";", "        int index = file_name.IndexOf('.');\n     \
    \   if (index >= 0) {\n            char first_char = file_name[index - 1];\n \
    \           if (first_char == '\\0' || first_char < 'a' || first_char > 'z') {\n\
    \                return \"No\";\n            }\n        }\n\n        int dot1\
    \ = file_name.IndexOf('.', index + 1);\n        if (dot1 == -1) {\n          \
    \  return \"No\";\n        }\n\n        int dot2 = file_name.IndexOf('.', dot1\
    \ + 1);\n        if (dot2 == -1) {\n            return \"No\";\n        }\n\n\
    \        string extension = file_name.Substring(dot1 + 1, dot2 - dot1 - 1);\n\n\
    \        if (extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    ) {\n            return \"Yes\";\n        } else {\n            return \"No\"\
    ;\n        }", "        string pattern = @\"^[0-9]{3,3}\\.[a-zA-Z0-9]$\";\n  \
    \      Regex regex = new Regex(pattern);\n\n        if (regex.IsMatch(file_name)\
    \ && file_name.Contains(\".\"))\n        {\n            if (Regex.Match(file_name,\
    \ \"^[a-zA-Z].*\").Success\n                && !Regex.Match(file_name, \"^[0-9]\"\
    ).Success)\n            {\n                return \"Yes\";\n            }\n  \
    \          return \"No\";\n        }\n        return \"No\";", "        int num_digits\
    \ = 0;\n        int dot_index = 0;\n        string prefix = \"\";\n        string\
    \ suffix = \"\";\n        string temp;\n\n        // Check if the file's name\
    \ is valid\n        temp = file_name;\n        if (temp.IndexOfAny('0', '9') !=\
    \ -1)\n        {\n            Console.WriteLine(\"Invalid file's name.\");\n \
    \           return \"No\";\n        }\n        else if (file_name.IndexOf('.')\
    \ != -1)\n        {\n            temp = file_name;\n            dot_index = file_name.IndexOf('.');\n\
    \            prefix = temp.Substring(0, dot_index);\n            suffix = temp.Substring(dot_index\
    \ + 1);\n            if (prefix == \"\")\n            {\n                Console.WriteLine(\"\
    Invalid file's name.\");\n                return \"No\";\n            }\n    \
    \        else if (suffix.IndexOfAny(\"exe\", \"dll\") != -1)\n            {\n\
    \                Console.WriteLine(\"Invalid file's name.\");\n              \
    \  return \"No\";\n            }\n            else\n            {\n          \
    \      Console.WriteLine(\"Valid file's name.\");\n                return \"Yes\"\
    ;\n            }\n        }\n        else\n        {\n            Console.WriteLine(\"\
    Invalid file's name.\");\n            return \"No\";\n        }", "        if\
    \ (file_name.Length > 3) { return \"No\"; }\n        int i;\n        for (i =\
    \ 0; i < file_name.Length; ++i) {\n            if (file_name[i] < 'a' || file_name[i]\
    \ > 'z') { return \"No\"; }\n            if (file_name[i] == '.') { return \"\
    No\"; }\n            if (file_name[i] == '\\\\') { return \"No\"; }\n        }\n\
    \        if (file_name[0] == '.' || !(file_name[0] == 'a' || file_name[0] == 'z'))\
    \ {\n            return \"No\";\n        }\n        foreach (string ext in new\
    \ string[] {\"txt\", \"exe\", \"dll\"}) {\n            if (file_name.EndsWith(ext,\
    \ StringComparison.OrdinalIgnoreCase)) {\n                return \"Yes\";\n  \
    \          }\n        }\n        return \"No\";", "        bool is_valid = false;\n\
    \        bool dotValid = false;\n        string first_letter = \"\";\n       \
    \ string after_dot = \"\";\n        string all_extensions = \"\";\n        //\
    \ Count number of digits in the string\n        int num_digits_in_file = file_name.Length;\n\
    \        // Count the number of digits before the dot ('.') in the string\n  \
    \      int num_digits_before_dot = file_name.IndexOf(\".\") - 1;\n        // Count\
    \ the number of digits after the dot ('.') in the string\n        int num_digits_after_dot\
    \ = file_name.IndexOf(\".\") + 1;\n        // Check if there exists a dot ('.')\
    \ in the string\n        if (num_digits_before_dot > 3) {\n            is_valid\
    \ = false;\n            return is_valid;\n        }\n        // Check if the file's\
    \ name contains exactly one dot ('.') in the string\n        if (num_digits_before_dot\
    \ == 1) {\n            dotValid = true;\n        }\n        // Get the first letter\
    \ of the file's name\n        first_letter = file_name.Substring(0, 1);\n    \
    \    // Check if the first letter is a letter from the latin alphabet ('a' to\
    \ 'z' and 'A' to\n        // 'Z')\n        if (first_letter.IndexOf(\"A\") > -1)\
    \ {\n            if (first_letter.IndexOf(\"Z\") > -1) {\n                is_valid\
    \ = false;\n                return is_valid;\n            }\n        }\n     \
    \   // Get the rest of the file's name\n        after_dot = file_name.Substring(1);\n\
    \        // Check that the rest of the file's name contains one of the extensions\
    \ ('txt', 'exe', 'dll')\n        all_extensions = \"\";\n        if (num_digits_after_dot\
    \ == 3 || num_digits_after_dot == 4) {\n            if (after_dot.IndexOf(\"txt\"\
    ) > -1) {\n                all_extensions = \"txt\";\n            } else if (after_dot.IndexOf(\"\
    exe\") > -1) {\n                all_extensions = \"exe\";\n            } else\
    \ if (after_dot.IndexOf(\"dll\") > -1) {\n                all_extensions = \"\
    dll\";\n            }\n        }\n        // Check if the file's name contains\
    \ all the above conditions\n        if (dotValid && first_letter.IndexOf(\"a\"\
    ) > -1 && first_letter.IndexOf(\"z\") > -1) {\n            is_valid = true;\n\
    \        }\n        if (dotValid && after_dot.IndexOf(\"txt\") > -1 && after_dot.IndexOf(\"\
    exe\") > -1 && after_dot.IndexOf(\"dll\") > -1) {\n            is_valid = true;\n\
    \        }\n        if (dotValid && all_extensions != \"\") {\n            is_valid\
    \ = true;\n        }\n        return is_valid;", "        int num = file_name.Length;\n\
    \        char ch;\n        int index = 0;\n        for (int i = 0; i < num; i++)\
    \ {\n            ch = file_name[i];\n            if (i < num - 1) {\n        \
    \        if (char.IsNumber(ch) || ch != '.') {\n                    if (file_name[index]\
    \ == '.' && file_name[++index] == '.') {\n                        if (index <\
    \ num - 1) {\n                            char ch2 = file_name[index];\n     \
    \                       char ch3 = file_name[++index];\n                     \
    \       if (char.IsLetter(ch) && char.IsLetter(ch2) && char.IsLetter(ch3)) {\n\
    \                                continue;\n                            }\n  \
    \                          if (index == num - 2) {\n                         \
    \       return \"No\";\n                            }\n                      \
    \  }\n                    }\n                }\n            }\n        }\n   \
    \     return \"Yes\";", "        int num;\n        int numDot = file_name.IndexOf('.');\n\
    \        if (numDot <= 0) {\n            return \"No\";\n        }\n        string\
    \ firstChar = file_name.Substring(0, 1);\n        if (firstChar != 'a' && firstChar\
    \ != 'b' && firstChar != 'c' && firstChar != 'd' && firstChar != 'e' && firstChar\
    \ != 'f' && firstChar != 'g' && firstChar != 'h' && firstChar != 'i' && firstChar\
    \ != 'j' && firstChar != 'k' && firstChar != 'l' && firstChar != 'm' && firstChar\
    \ != 'n' && firstChar != 'o' && firstChar != 'p' && firstChar != 'q' && firstChar\
    \ != 'r' && firstChar != 's' && firstChar != 't' && firstChar != 'u' && firstChar\
    \ != 'v' && firstChar != 'w' && firstChar != 'x' && firstChar != 'y' && firstChar\
    \ != 'z')\n            return \"No\";\n        char secondChar = file_name.Substring(1,\
    \ 1);\n        if (secondChar != 'a' && secondChar != 'b' && secondChar != 'c'\
    \ && secondChar != 'd' && secondChar != 'e' && secondChar != 'f' && secondChar\
    \ != 'g' && secondChar != 'h' && secondChar != 'i' && secondChar != 'j' && secondChar\
    \ != 'k' && secondChar != 'l' && secondChar != 'm' && secondChar != 'n' && secondChar\
    \ != 'o' && secondChar != 'p' && secondChar != 'q' && secondChar != 'r' && secondChar\
    \ != 's' && secondChar != 't' && secondChar != 'u' && secondChar != 'v' && secondChar\
    \ != 'w' && secondChar != 'x' && secondChar != 'y' && secondChar != 'z')\n   \
    \         return \"No\";\n        int numOfLetter = file_name.IndexOf('a') - 1;\n\
    \        int numOfLetter2 = file_name.IndexOf('A') - 1;\n        int numOfDigit\
    \ = file_name.IndexOf('0') - 1;\n        if (numOfDigit >= numOfLetter) {\n  \
    \          return \"No\";\n        }\n        if (numOfDigit >= numOfLetter2)\
    \ {\n            return \"No\";\n        }\n        if (numOfDigit >= numOfDot)\
    \ {\n            return \"No\";\n        }\n        return \"Yes\";", "      \
    \  // TODO: Write code here\n        char[] delimiter = new char[] { '.' };\n\
    \        string before_dot;\n        string after_dot;\n        string final_string;\n\
    \        char[] alphabet = new char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',\
    \ 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',\
    \ 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',\
    \ 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z' };\n        bool\
    \ is_valid;\n        bool has_alpha;\n        bool has_punc;\n        bool has_digit;\n\
    \        int num_digits;\n        int num_digits_after_dot;\n        bool has_three_digits;\n\
    \        bool has_four_digits;\n        bool has_five_digits;\n        bool has_six_digits;\n\
    \        bool has_seven_digits;\n        bool has_eight_digits;\n        bool\
    \ has_nine_digits;\n        bool has_ten_digits;\n        bool has_eleven_digits;\n\
    \        bool has_twelve_digits;\n        bool has_eleven_letters;\n        bool\
    \ has_twelve_letters;\n        bool has_three_letters;\n        bool has_four_letters;\n\
    \        bool has_five_letters;\n        bool has_six_letters;\n        bool has_seven_letters;\n\
    \        bool has_eight_letters;\n        bool has_nine_letters;\n        bool\
    \ has_ten_letters;\n        bool has_eleven_letters;\n        bool has_twelve_letters;\n\
    \        bool has_three_letters_after_dot;\n        bool has_four_letters_after_dot;\n\
    \        bool has_five_letters_after_dot;\n        bool has_six_letters_after_dot;\n\
    \        bool has_seven_letters_after_dot;\n        bool has_eight_letters_after_dot;\n\
    \        bool has_nine_letters_after_dot;\n        bool has_ten_letters_after_dot;\n\
    \        bool has_eleven_letters_after_dot;\n        bool has_twelve_letters_after_dot;\n\
    \        bool has_three_letters_before_dot;\n        bool has_four_letters_before_dot;\n\
    \        bool has_five_letters_before_dot;\n        bool has_six_letters_before_dot;\n\
    \        bool has_seven_letters_before_dot;\n        bool has_e", "        //\n\
    \        // Write your code here\n        //\n        string str = file_name;\n\
    \        int start = 0;\n        int end = str.Length;\n        bool flag = true;\n\
    \        int sum = 0;\n        char ch;\n        char firstChar;\n        char\
    \ secondChar;\n        char thirdChar;\n        char fourthChar;\n        char\
    \ fifthChar;\n        char sixthChar;\n        char seventhChar;\n        char\
    \ eighthChar;\n        char ninthChar;\n        char tenthChar;\n\n        do\
    \ {\n            ch = str[start];\n            firstChar = ch;\n            secondChar\
    \ = str[start + 1];\n            thirdChar = str[start + 2];\n            fourthChar\
    \ = str[start + 3];\n            fifthChar = str[start + 4];\n            sixthChar\
    \ = str[start + 5];\n            seventhChar = str[start + 6];\n            eighthChar\
    \ = str[start + 7];\n            ninthChar = str[start + 8];\n            tenthChar\
    \ = str[start + 9];\n\n            sum = sum + firstChar - '0';\n            sum\
    \ = sum + secondChar - '0';\n            sum = sum + thirdChar - '0';\n      \
    \      sum = sum + fourthChar - '0';\n            sum = sum + fifthChar - '0';\n\
    \            sum = sum + sixthChar - '0';\n            sum = sum + seventhChar\
    \ - '0';\n            sum = sum + eighthChar - '0';\n            sum = sum + ninthChar\
    \ - '0';\n            sum = sum + tenthChar - '0';\n\n            start++;\n \
    \       } while (sum > 4 && flag == true);\n\n        flag = false;\n        sum\
    \ = 0;\n        do {\n            ch = str[start];\n            firstChar = ch;\n\
    \            secondChar = str[start + 1];\n            thirdChar = str[start +\
    \ 2];\n            fourthChar = str[start + 3];\n            fifthChar = str[start\
    \ + 4];\n            sixthChar = str[start + 5];\n            seventhChar = str[start\
    \ + 6];\n            eighthChar = str[start + 7];\n            ninthChar = str[start\
    \ + 8];\n            tenthChar = str[start + 9];\n\n            sum = sum + firstChar\
    \ - '0';\n            sum = sum + secondChar - '0';\n            sum = sum + thirdChar\
    \ - '0", "        bool isValid = true;\n\n        if(file_name.Length > 3) {\n\
    \            isValid = false;\n        }\n        else if(file_name.IndexOf(\"\
    .\") > -1) {\n            isValid = false;\n        }\n        else if(file_name.Substring(0,\
    \ 1).IsLetter() && file_name.Substring(1, 1).IsLetter()) {\n            isValid\
    \ = false;\n        }\n        else {\n            isValid = false;\n        }\n\
    \n        return isValid ? \"Yes\" : \"No\";", "        return file_name.Length\
    \ <= 3 || file_name.Contains('.') ? \n        string.Empty : file_name.Substring(0,\
    \ file_name.IndexOf('.')).First() >= 'a' && \n        file_name.Substring(0, file_name.IndexOf('.')).First()\
    \ <= 'z' ?\n        \"Yes\" : \"No\";", "        bool isValid = false;\n     \
    \   string file_name = file_name.Replace('.','_');\n        if (file_name.Length\
    \ > 3 && file_name.Substring(0, 1).All(char.IsDigit) && \n            !file_name.Substring(0,\
    \ 1).IsNullOrWhitespace && \n            !file_name.Substring(0, 1).Contains(\"\
    .\") && \n            !file_name.Substring(0, 1).StartsWith(\"a\") &&\n      \
    \      !file_name.Substring(0, 1).StartsWith(\"z\") &&\n            !file_name.Substring(0,\
    \ 1).StartsWith(\"A\") &&\n            !file_name.Substring(0, 1).StartsWith(\"\
    Z\") &&\n            !file_name.Substring(0, 1).Equals(\"_\")) {\n           \
    \ isValid = true;\n        }\n        return isValid ? \"Yes\" : \"No\";", " \
    \       // TODO: Use Regex to check the validity of the file name\n        int\
    \ nDigits = file_name.Count(x => x >= '0' && x <= '9');\n        if (nDigits >\
    \ 3) \n        {\n            return \"No\";\n        }\n        int nDot = file_name.IndexOf('.');\n\
    \        if (nDot == -1) \n        {\n            return \"No\";\n        }\n\
    \        string substr = file_name.Substring(0, nDot);\n        if (!substr.Contains('\
    \ ')) \n        {\n            return \"No\";\n        }\n        if (substr.IndexOf(\"\
    ..\") == -1 && \n            substr.IndexOf(\".\") != 0) \n        {\n       \
    \     return \"No\";\n        }\n        string extension = file_name.Substring(nDot);\n\
    \        switch (extension) \n        {\n            case \"txt\":\n         \
    \   case \"exe\":\n            case \"dll\":\n                return \"Yes\";\n\
    \            default:\n                return \"No\";\n        }", "        if\
    \ (string.IsNullOrEmpty(file_name)) {\n            return \"No\";\n        }\n\
    \n        string dotPosition = file_name.IndexOf('.');\n        if (dotPosition\
    \ < 1 || dotPosition > file_name.Length - 1) {\n            return \"No\";\n \
    \       }\n\n        string firstLetter = file_name.Substring(0, dotPosition);\n\
    \        if (firstLetter.Length != 1 || firstLetter < 'a' || firstLetter > 'z')\
    \ {\n            return \"No\";\n        }\n\n        bool isExtention = file_name.Substring(dotPosition,\
    \ 1).ToLower().Contains(\".txt\") || \n            file_name.Substring(dotPosition,\
    \ 1).ToLower().Contains(\".exe\") || \n            file_name.Substring(dotPosition,\
    \ 1).ToLower().Contains(\".dll\");\n\n        if (!isExtention) {\n          \
    \  return \"No\";\n        }\n\n        return \"Yes\";", "        // Your code\
    \ here\n        int digits_found = 0;\n        bool contains_dot = (file_name.IndexOf(\"\
    .\") > -1);\n        bool contains_underscore = (file_name.IndexOf(\"_\") > -1);\n\
    \        bool contains_letter = (file_name.IndexOfAny(new char[] { 'a', 'b', 'c',\
    \ 'd', 'e', 'f', 'h', 'j', 'k', 'm', 'n', 'p', 'q', 'r', 't', 'v', 'w', 'x', 'y',\
    \ 'z' }) > -1);\n        bool contains_number = (file_name.IndexOfAny(new char[]\
    \ { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' }) > -1);\n\n        if (contains_dot\
    \ && contains_underscore) {\n            return (\"No\");\n        }\n       \
    \ if (contains_letter) {\n            digits_found = file_name.Length;\n     \
    \   }\n        if (contains_number) {\n            digits_found = file_name.Length;\n\
    \        }\n        if (digits_found < 3) {\n            return (\"No\");\n  \
    \      }\n        if (contains_letter && contains_number) {\n            digits_found\
    \ = file_name.Length;\n        }\n\n        if (contains_dot) {\n            digits_found\
    \ = file_name.IndexOf(\".\") - 1;\n        }\n        if (contains_underscore)\
    \ {\n            digits_found = file_name.IndexOf(\"_\") - 1;\n        }\n   \
    \     if (contains_letter) {\n            digits_found = file_name.IndexOfAny(new\
    \ char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'h', 'j', 'k', 'm', 'n', 'p', 'q', 'r',\
    \ 't', 'v', 'w', 'x', 'y', 'z' }) - 1;\n        }\n        if (contains_number)\
    \ {\n            digits_found = file_name.IndexOfAny(new char[] { '0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9' }) - 1;\n        }\n        if (digits_found\
    \ > 1) {\n            return (\"No\");\n        }\n        if (contains_letter\
    \ && contains_number) {\n            digits_found = file_name.IndexOfAny(new char[]\
    \ { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' }) - 1;\n        }\n    \
    \    if (digits_found != 3) {\n            return (\"No\");\n        }\n\n   \
    \     return \"Yes\";", "        if (file_name.Length < 3 || file_name.Length\
    \ > 4 || file_name.Contains('.') \n            || file_name[0].ToString().Length\
    \ < 'a' || file_name[0].ToString().Length > 'z' \n            || file_name[file_name.Length\
    \ - 1].ToString().Length < 'a' || file_name[file_name.Length - 1].ToString().Length\
    \ > 'z' || \n            (file_name[0].ToString().Length == 1 && file_name[file_name.Length\
    \ - 1].ToString().Length == 0) || \n            (file_name[0].ToString().Length\
    \ == 1 && file_name[file_name.Length - 1].ToString().Length > 1)) \n        {\n\
    \            return \"No\";\n        }\n        else \n        {\n           \
    \ return \"Yes\";\n        }", "        var invalid = false;\n        if (file_name.Length\
    \ > 4) {\n            invalid = true;\n        } else {\n            var file_name\
    \ = file_name.ToLower().Trim();\n            invalid = file_name.Contains(\".\"\
    );\n            if (invalid) {\n                invalid = file_name.IndexOf(\"\
    .\") > 0;\n            }\n        }\n\n        if (!invalid) {\n            var\
    \ file_name = file_name.ToLower().Trim();\n            invalid = file_name.IndexOf(\"\
    .\") >= 0;\n            if (!invalid) {\n                var file_name = file_name.ToLower().Trim();\n\
    \                var index = file_name.IndexOf(\".\");\n                invalid\
    \ = !CheckCharacter(file_name[index - 1]) && \n                !CheckCharacter(file_name[index\
    \ + 1]);\n            }\n        }\n\n        return (invalid ? \"No\" : \"Yes\"\
    );", "        if (file_name.Length > 3) return false;\n        if (file_name.Contains(\"\
    .\")) return false;\n        if (!file_name.StartsWith(Char.ToLower('a'))) return\
    \ false;\n        if (!file_name.Contains('.')) return false;\n        foreach\
    \ (char c in file_name.Substring(1)) {\n            if (!(Char.IsLetter(c) &&\
    \ Char.IsUpper(c))) return false;\n        }\n        string ext = file_name.Substring(file_name.IndexOf('.'));\n\
    \        if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\") return false;\n\
    \        return \"Yes\";", "        int dot_location = file_name.IndexOf(\".\"\
    );\n        int num_digits = file_name.Length - dot_location - 1;\n        if(dot_location\
    \ != -1 && num_digits < 3 && file_name.Substring(0, dot_location).Trim() != \"\
    ..\" && char.IsLetter(file_name[dot_location + 1]) && file_name[dot_location +\
    \ 1] != '_')\n        {\n            return \"Yes\";\n        }\n        else\n\
    \        {\n            return \"No\";\n        }", "        Regex rgx = new Regex(@\"\
    ^([a-zA-Z][a-z]*)\\.(txt|exe|dll)$\", RegexOptions.IgnoreCase);\n        return\
    \ rgx.IsMatch(file_name)\n            ? file_name\n            : String.Format(\"\
    No\");", "        Regex r = new Regex(@\"[^0-9]\");\n        string name = file_name.Substring(0,\
    \ file_name.IndexOf('.'))\n        r.IsMatch(name);\n        List<string> types\
    \ = new[]\n        {\n            \"txt\", \"exe\", \"dll\"\n        };\n    \
    \    bool valid = types.Contains(name.Substring(0, name.IndexOf('.')));\n    \
    \    return valid ? file_name : \"\";", "        var invalid = file_name.Split('.').Length\
    \ > 3;\n        var dotPos = file_name.IndexOf('.');\n        var letters = file_name.Substring(0,\
    \ dotPos).ToLower();\n        var ext = file_name.Substring(dotPos).ToLower();\n\
    \        var exts = [\"txt\", \"exe\", \"dll\"];\n        var ext = exts.FirstOrDefault(x\
    \ => x == ext);\n        var valid = letters.IndexOf(\"a\") > -1 && letters.IndexOf(\"\
    z\") > -1 && letters.IndexOf(\"A\") > -1;\n        if (invalid || (!valid && exts.Contains(ext)))\n\
    \            return \"No\";\n        return \"Yes\";", "        int dotIndex =\
    \ file_name.IndexOf('.');\n        if(dotIndex < 1 || dotIndex > file_name.Length\
    \ - 1 || (!file_name.Substring(0, dotIndex).Contains(' ') && \n            !file_name.Substring(0,\
    \ dotIndex).Contains('.') && !file_name.Substring(0, dotIndex).StartsWith(\"a\"\
    ) &&\n            !file_name.Substring(0, dotIndex).StartsWith(\"A\") && !file_name.Substring(0,\
    \ dotIndex).EndsWith(\"0\") &&\n            !file_name.Substring(0, dotIndex).EndsWith(\"\
    9\") && !file_name.Substring(0, dotIndex).EndsWith(\"?\"))) {\n            return\
    \ \"No\";\n        }\n        string prefix = file_name.Substring(0, dotIndex);\n\
    \        if(!prefix.All(char.IsLetter)) {\n            return \"No\";\n      \
    \  }\n        if(!prefix.StartsWith(\"a\") && !prefix.StartsWith(\"A\") && !prefix.EndsWith(\"\
    0\") &&\n            !prefix.EndsWith(\"9\") && !prefix.EndsWith(\"?\")) {\n \
    \           return \"No\";\n        }\n        if(!file_name.EndsWith(\"txt\"\
    ) && !file_name.EndsWith(\"exe\") && !file_name.EndsWith(\"dll\")) {\n       \
    \     return \"No\";\n        }\n        return \"Yes\";", "        int counter\
    \ = 0;\n        // If there are more than 3 digits, return the 'No' output.\n\
    \        if (file_name.Length > 3) {\n            return \"No\";\n        }\n\
    \        // If the substring before dot is empty return the 'No' output.\n   \
    \     if (file_name.Length < 2 || !file_name.Substring(0, 1).Equals(\"\")) {\n\
    \            return \"No\";\n        }\n        // If the substring after dot\
    \ is not in the list, return the 'No' output.\n        if (!file_name.Substring(1).ToLower().Contains(\"\
    .txt\") \n                && !file_name.Substring(1).ToLower().Contains(\".exe\"\
    )\n                && !file_name.Substring(1).ToLower().Contains(\".dll\")) {\n\
    \            return \"No\";\n        }\n        // If the substring after dot\
    \ is a valid file extension, return 'Yes' output.\n        return file_name.Substring(1).ToLower().Contains(\"\
    .txt\") ? \"Yes\" : \"No\";", "        // Convert file_name's value to lower case.\n\
    \        string file_name = file_name.ToLower();\n\n        // Declare a character\
    \ array that contains the file's name.\n        char[] file_name = file_name.ToCharArray();\n\
    \n        // Declare a boolean variable to check whether there is a digit in the\
    \ file's name.\n        bool digit_found = false;\n\n        // Declare a boolean\
    \ variable to check whether there is a dot ('.') in the file's name.\n       \
    \ bool dot_found = false;\n\n        // Declare a boolean variable to check whether\
    \ there is an extension in the file's name.\n        bool extension_found = false;\n\
    \n        // Declare a boolean variable to check whether there is a letter from\
    \ the latin alphabet\n        // in the file's name.\n        bool letters_found\
    \ = false;\n\n        // Declare a boolean variable to check whether there is\
    \ a special character in the file's\n        // name.\n        bool special_found\
    \ = false;\n\n        // Declare a boolean variable to check whether there is\
    \ a letter from the latin alphabet\n        // in the file's name.\n        bool\
    \ letters_found = false;\n\n        // Declare a boolean variable to check whether\
    \ there is a digit in the file's name.\n        bool digit_found = false;\n\n\
    \        // Declare a boolean variable to check whether there is a dot ('.') in\
    \ the file's name.\n        bool dot_found = false;\n\n        // Declare a boolean\
    \ variable to check whether there is an extension in the file's name.\n      \
    \  bool extension_found = false;\n\n        // Declare a boolean variable to check\
    \ whether there is a letter from the latin alphabet\n        // in the file's\
    \ name.\n        bool letters_found = false;\n\n        // Declare a boolean variable\
    \ to check whether there is a digit in the file's name.\n        bool digit_found\
    \ = false;\n\n        // Declare a boolean variable to check whether there is\
    \ a dot ('.') in the file's name.\n        bool dot_found = false;\n\n       \
    \ // Declare a boolean variable to check whether there is an extension in the\
    \ file's name.\n        bool extension_found = false;\n\n        // Declare a\
    \ boolean variable to check whether there is a letter from the latin alphabet\n\
    \        // in the file's name.\n        bool letters_found = false;\n\n     \
    \   // Declare a boolean variable to check whether there is a digit in the file's\
    \ name.\n        bool digit_found = false;\n\n        // Declare a boolean variable\
    \ to check whether there is a dot ('.') in the file's name.\n        bool dot_found\
    \ = false;\n\n        // Declare a boolean variable to check whether there is\
    \ an extension in the file's name.\n        bool extension_found = false;\n\n\
    \        // Declare a boolean variable to check whether there is a letter from\
    \ the latin alphabet\n        // in the file's name.\n        bool letters_found\
    \ = false;\n\n        // Declare a boolean variable to check whether there is\
    \ a digit in the file's name.\n        bool digit_found", "        string check_name\
    \ = file_name;\n        bool invalid = false;\n        string pattern = \"^[a-z][a-z0-9\\\
    \\.]+\\\\.txt$\";\n        if (check_name.Length > 3)\n            invalid = true;\n\
    \        if (check_name.IndexOf(\".\") > -1)\n            invalid = true;\n  \
    \      int index = check_name.IndexOf('.');\n        if (index > 0)\n        \
    \    invalid = true;\n        char ch = check_name[0];\n        if (ch < 'a' ||\
    \ ch > 'z')\n            invalid = true;\n        char ch2 = check_name[index\
    \ + 1];\n        if (ch2 < 'a' || ch2 > 'z')\n            invalid = true;\n  \
    \      if (invalid)\n            return \"No\";\n        else\n            return\
    \ \"Yes\";", "        string result = \"\";\n        if (file_name.Length > 3)\
    \ {\n            result = \"No\";\n        } else\n        if (file_name.IndexOf('.')\
    \ < 0)\n        {\n            result = \"No\";\n        } else\n        if (file_name.Substring(0,\
    \ 1) == \" \" || file_name.Substring(0, 1) == \"\\t\")\n        {\n          \
    \  result = \"No\";\n        } else\n        if (!(file_name.Substring(0, 1).ToLower().Contains(\"\
    a\") || file_name.Substring(0, 1).ToLower().Contains(\"b\") || file_name.Substring(0,\
    \ 1).ToLower().Contains(\"c\") || file_name.Substring(0, 1).ToLower().Contains(\"\
    d\") || file_name.Substring(0, 1).ToLower().Contains(\"e\") || file_name.Substring(0,\
    \ 1).ToLower().Contains(\"f\") || file_name.Substring(0, 1).ToLower().Contains(\"\
    g\") || file_name.Substring(0, 1).ToLower().Contains(\"h\") || file_name.Substring(0,\
    \ 1).ToLower().Contains(\"i\") || file_name.Substring(0, 1).ToLower().Contains(\"\
    j\") || file_name.Substring(0, 1).ToLower().Contains(\"k\") || file_name.Substring(0,\
    \ 1).ToLower().Contains(\"l\") || file_name.Substring(0, 1).ToLower().Contains(\"\
    m\") || file_name.Substring(0, 1).ToLower().Contains(\"n\") || file_name.Substring(0,\
    \ 1).ToLower().Contains(\"o\") || file_name.Substring(0, 1).ToLower().Contains(\"\
    p\") || file_name.Substring(0, 1).ToLower().Contains(\"q\") || file_name.Substring(0,\
    \ 1).ToLower().Contains(\"r\") || file_name.Substring(0, 1).ToLower().Contains(\"\
    s\") || file_name.Substring(0, 1).ToLower().Contains(\"t\") || file_name.Substring(0,\
    \ 1).ToLower().Contains(\"u\") || file_name.Substring(0, 1).ToLower().Contains(\"\
    v\") || file_name.Substring(0, 1).ToLower().Contains(\"w\") || file_name.Substring(0,\
    \ 1).ToLower().Contains(\"x\") || file_name.Substring(0, 1).ToLower().Contains(\"\
    y\") || file_name.Substring(0, 1).ToLower().Contains(\"z\"))) {\n            result\
    \ = \"No\";\n        } else\n        if (file_name.Substring(file_name.IndexOf(\"\
    .\") + 1, 3) != \"txt\" && file_name.Substring(file_name.IndexOf(\".\") + 1, 3)\
    \ != \"exe\" && file_name.Substring(file_name.IndexOf(\".\") + 1, 3) != \"dll\"\
    ) {\n            result = \"No\";\n        }\n        else\n        if (file_name.Substring(file_name.",
  "        // TODO: Declare variables\n        int number_of_chars = 0;\n        bool\
    \ dotFound = false;\n        bool letterFound = false;\n        bool dotFound1\
    \ = false;\n        string temp1 = \"\";\n        string temp2 = \"\";\n     \
    \   string temp3 = \"\";\n        string temp4 = \"\";\n        string temp5 =\
    \ \"\";\n        bool temp6 = false;\n        bool temp7 = false;\n        bool\
    \ temp8 = false;\n        bool temp9 = false;\n        bool temp10 = false;\n\
    \        bool temp11 = false;\n        bool temp12 = false;\n        bool temp13\
    \ = false;\n        bool temp14 = false;\n        bool temp15 = false;\n     \
    \   bool temp16 = false;\n        bool temp17 = false;\n        bool temp18 =\
    \ false;\n        bool temp19 = false;\n        bool temp20 = false;\n       \
    \ bool temp21 = false;\n        bool temp22 = false;\n        bool temp23 = false;\n\
    \        bool temp24 = false;\n        bool temp25 = false;\n        bool temp26\
    \ = false;\n        bool temp27 = false;\n        bool temp28 = false;\n     \
    \   bool temp29 = false;\n        bool temp30 = false;\n        bool temp31 =\
    \ false;\n        bool temp32 = false;\n        bool temp33 = false;\n       \
    \ bool temp34 = false;\n        bool temp35 = false;\n        bool temp36 = false;\n\
    \        bool temp37 = false;\n        bool temp38 = false;\n        bool temp39\
    \ = false;\n        bool temp40 = false;\n        bool temp41 = false;\n     \
    \   bool temp42 = false;\n        bool temp43 = false;\n        bool temp44 =\
    \ false;\n        bool temp45 = false;\n        bool temp46 = false;\n       \
    \ bool temp47 = false;\n        bool temp48 = false;\n        bool temp49 = false;\n\
    \        bool temp50 = false;\n        bool temp51 = false;\n        bool temp52\
    \ = false;\n        bool temp53 = false;\n        bool temp54 = false;\n     \
    \   bool temp55 = false;\n        bool temp56 = false;\n        bool temp57 =\
    \ false;\n        bool temp58 = false;\n        bool temp59 = false;\n       \
    \ bool temp60 = false;\n        bool temp61 = false;\n        bool temp62 = false;\n\
    \        bool temp63 = false;\n        bool temp64 = false;\n        bool temp65\
    \ = false;\n        bool temp66 = false;\n        bool temp67 = false;\n     \
    \   bool temp68 = false;\n        bool temp69 = false;\n        bool temp70 =\
    \ false;\n        bool temp71 = false;\n        bool temp72 = false;\n       \
    \ bool temp73 = false;\n        bool temp74 = false;\n        bool temp75 = false;\n\
    \        bool temp76 = false;\n        bool temp77 = false;\n        bool temp",
  "        // Your code goes here\n        int num = file_name.Length;\n        if\
    \ (num < 4 || num > 10 || num.ToString().Contains(\".\") || file_name.Substring(0,\
    \ 1).ToUpper() != \"A\" || file_name.Substring(0, 1).ToUpper() != \"B\" || file_name.Substring(0,\
    \ 1).ToUpper() != \"C\" || file_name.Substring(0, 1).ToUpper() != \"D\" || file_name.Substring(0,\
    \ 1).ToUpper() != \"E\" || file_name.Substring(0, 1).ToUpper() != \"F\" || file_name.Substring(0,\
    \ 1).ToUpper() != \"G\" || file_name.Substring(0, 1).ToUpper() != \"H\" || file_name.Substring(0,\
    \ 1).ToUpper() != \"I\" || file_name.Substring(0, 1).ToUpper() != \"J\" || file_name.Substring(0,\
    \ 1).ToUpper() != \"K\" || file_name.Substring(0, 1).ToUpper() != \"L\" || file_name.Substring(0,\
    \ 1).ToUpper() != \"M\" || file_name.Substring(0, 1).ToUpper() != \"N\" || file_name.Substring(0,\
    \ 1).ToUpper() != \"O\" || file_name.Substring(0, 1).ToUpper() != \"P\" || file_name.Substring(0,\
    \ 1).ToUpper() != \"Q\" || file_name.Substring(0, 1).ToUpper() != \"R\" || file_name.Substring(0,\
    \ 1).ToUpper() != \"S\" || file_name.Substring(0, 1).ToUpper() != \"T\" || file_name.Substring(0,\
    \ 1).ToUpper() != \"U\" || file_name.Substring(0, 1).ToUpper() != \"V\" || file_name.Substring(0,\
    \ 1).ToUpper() != \"W\" || file_name.Substring(0, 1).ToUpper() != \"X\" || file_name.Substring(0,\
    \ 1).ToUpper() != \"Y\" || file_name.Substring(0, 1).ToUpper() != \"Z\")\n   \
    \     {\n            return \"No\";\n        }\n        else\n        {\n    \
    \        return \"Yes\";\n        }", "        // Initialize variables to hold\
    \ results of checks.\n        string result = \"No\";\n        int len = 0;\n\
    \        int dotPos = 0;\n        bool firstChar = true;\n        bool lastDot\
    \ = true;\n        bool letter = true;\n        string dotPos_string = \"0\";\n\
    \        bool dotPos2 = true;\n\n        // Get length of file_name.\n       \
    \ len = file_name.Length;\n\n        // Check if file_name's length is less than\
    \ 3.\n        if (len < 3) {\n            result = \"Yes\";\n            return\
    \ result;\n        }\n\n        // Check if file_name's first character is a letter.\n\
    \        if (file_name[0] != LetterToNumber(file_name[0])) {\n            result\
    \ = \"Yes\";\n            return result;\n        }\n\n        // Check if file_name's\
    \ last character is a dot.\n        if (file_name[len - 1] != '.') {\n       \
    \     result = \"Yes\";\n            return result;\n        }\n\n        // Get\
    \ the dot's position in the file_name.\n        dotPos = file_name.IndexOf('.');\n\
    \n        // Check if dot's position is greater than 0.\n        if (dotPos >\
    \ 0) {\n            // Get the position of the first letter in the dot's position.\n\
    \            dotPos_string = file_name.Substring(0, dotPos);\n\n            //\
    \ Check if the first letter of the dot's position is less than 'a' or 'z'.\n \
    \           if (dotPos_string[0] <= 'z' && dotPos_string[0] <= 'Z') {\n      \
    \          // Get the position of the last letter in the dot's position.\n   \
    \             dotPos2 = file_name.Substring(dotPos + 1, 1);\n\n              \
    \  // Check if the last letter in the dot's position is a dot.\n             \
    \   if (dotPos2 != '.') {\n                    // Check if the last letter in\
    \ the dot's position is a letter.\n                    if (dotPos2 <= 'z' && dotPos2\
    \ <= 'Z') {\n                        // If this is the last letter and first letter\
    \ in dot's position \n                        // are less than 'a' or 'z', then\
    \ return 'Yes' as the file's name \n                        // is valid.\n   \
    \                     result = \"Yes\";\n                    } else {\n      \
    \                  // If this is not the last letter and first letter in dot's\
    \ \n                        // position are greater than 'a' or 'z', then return\
    \ 'No' as the \n                        // file's name is valid.\n           \
    \             result = \"No\";\n                    }\n                } else\
    \ {\n                    // If this is the last letter, then return 'Yes' as the\
    \ file's name \n                    // is valid.\n                    result =\
    \ \"Yes\";\n                }\n            } else {\n                // If dot's\
    \ position is greater than 'a' or 'z', then return 'No' as the \n            \
    \    // file's name is valid.\n                result = \"No\";\n            }\n\
    \        } else {\n            // If dot's position is equal to 0, then return\
    \ 'No' as the file's name is \n            // valid.\n            result = \"\
    No\";\n        }\n\n        // If the file's name is valid, return 'Yes', otherwise ",
  "        // TODO: Please write a solution below (hint: use Regular Expressions to\
    \ solve this\n        // problem).\n        return String.Empty;", "        if(file_name.Length\
    \ > 3) return \"No\";\n        if(file_name.Count(x => x!='.') == 0) return \"\
    No\";\n        if(file_name.IndexOf('.') != 0) return \"No\";\n        for(int\
    \ i=0; i<file_name.IndexOf('.');i++) {\n            if(!(Char.IsLetter(file_name[i])))\
    \ return \"No\";\n        }\n        for(int i=file_name.IndexOf('.'); i<file_name.Length;\
    \ i++) {\n            if(!(file_name[i] == '.' && file_name[i+1] == '.')) return\
    \ \"No\";\n            if(file_name[i] == '.') return \"No\";\n        }\n   \
    \     return \"Yes\";", "        if (file_name == \"\") {\n            return\
    \ \"No\";\n        }\n        if (file_name.IndexOf('.') <= 0) {\n           \
    \ return \"No\";\n        }\n        string str = file_name.Substring(0, file_name.IndexOf('.'));\n\
    \        if (str.Length > 3 || str[0].IsDigit() || str[1].IsDigit()) {\n     \
    \       return \"No\";\n        }\n        if (!str.Contains('.') || !file_name.Substring(0,\
    \ file_name.IndexOf('.')).IsEmpty()) {\n            return \"No\";\n        }\n\
    \        if (!(new List<string> { \"txt\", \"exe\", \"dll\" }.Contains(file_name.Substring(file_name.IndexOf('.')\
    \ + 1))) || file_name.Substring(0, file_name.IndexOf('.')).IsEmpty()) {\n    \
    \        return \"No\";\n        }\n        return \"Yes\";", "        string\
    \ dotIndex = file_name.IndexOf('.');\n        string prefix = file_name.Substring(0,\
    \ dotIndex);\n        if (dotIndex == 0) {\n            return (\"No\");\n   \
    \     }\n        if (prefix.Length == 0 || prefix.First().ToString().ToLower()\
    \ != \"a\" && prefix.First().ToString().ToLower() != \"b\" && prefix.First().ToString().ToLower()\
    \ != \"c\" && prefix.First().ToString().ToLower() != \"d\" && prefix.First().ToString().ToLower()\
    \ != \"e\" && prefix.First().ToString().ToLower() != \"f\" && prefix.First().ToString().ToLower()\
    \ != \"g\" && prefix.First().ToString().ToLower() != \"h\" && prefix.First().ToString().ToLower()\
    \ != \"i\" && prefix.First().ToString().ToLower() != \"j\" && prefix.First().ToString().ToLower()\
    \ != \"k\" && prefix.First().ToString().ToLower() != \"l\" && prefix.First().ToString().ToLower()\
    \ != \"m\" && prefix.First().ToString().ToLower() != \"n\" && prefix.First().ToString().ToLower()\
    \ != \"o\" && prefix.First().ToString().ToLower() != \"p\" && prefix.First().ToString().ToLower()\
    \ != \"q\" && prefix.First().ToString().ToLower() != \"r\" && prefix.First().ToString().ToLower()\
    \ != \"s\" && prefix.First().ToString().ToLower() != \"t\" && prefix.First().ToString().ToLower()\
    \ != \"u\" && prefix.First().ToString().ToLower() != \"v\" && prefix.First().ToString().ToLower()\
    \ != \"w\" && prefix.First().ToString().ToLower() != \"x\" && prefix.First().ToString().ToLower()\
    \ != \"y\" && prefix.First().ToString().ToLower() != \"z\" && prefix.First().ToString().ToLower()\
    \ != \"A\" && prefix.First().ToString().ToLower() != \"B\" && prefix.First().ToString().ToLower()\
    \ != \"C\" && prefix.First().ToString().ToLower() != \"D\" && prefix.First().ToString().ToLower()\
    \ != \"E\" && prefix.First().ToString().ToLower() != \"F\" && prefix.First().ToString().ToLower()\
    \ != \"G\" && prefix.First().ToString().ToLower() != \"H\" && prefix.First().ToString().ToLower()\
    \ != \"I\" && prefix.First().ToString().ToLower() != \"J\" && prefix.First().ToString().ToLower()\
    \ != \"K\" && prefix.First().ToString().ToLower() != \"L\" && prefix.First().ToString().ToLower()\
    \ != \"M\" && prefix.First().ToString().", "        string pattern = @\"^[0-9]{3}\"\
    ;\n        string sub_pattern = @\"^[a-z][a-z0-9]*\\.[a-z][a-z0-9]*$\";\n    \
    \    Regex rgx = new Regex(pattern);\n        Match match = rgx.Match(file_name);\n\
    \        if (!match.Success) {\n            return \"No\";\n        }\n      \
    \  if (file_name.Count(x => x == '.') != 1) {\n            return \"No\";\n  \
    \      }\n        if (!rgx.IsMatch(file_name.Substring(0, match.Index))) {\n \
    \           return \"No\";\n        }\n        if (!rgx.IsMatch(file_name.Substring(match.Index\
    \ + 1, file_name.Length - (match.Index + 1))) || \n            !rgx.IsMatch(sub_pattern))\
    \ {\n            return \"No\";\n        }\n        return \"Yes\";", "      \
    \  if (string.IsNullOrEmpty(file_name)) return (\"No\");\n        var digits =\
    \ file_name.Where(c => char.IsDigit(c)).ToArray();\n        var dots = file_name.Where(c\
    \ => c == '.').ToArray();\n        if (digits == null || dots == null || !dots.Any())\
    \ return (\"No\");\n        var first = file_name.TakeWhile(c => !char.IsLetterOrDigit(c)).FirstOrDefault();\n\
    \        if (first == null || string.IsNullOrEmpty(first)) return (\"No\");\n\
    \        var dotPos = file_name.IndexOf('.');\n        if (dotPos < 0 || dotPos\
    \ >= file_name.Length) return (\"No\");\n        string ext = file_name.Substring(dotPos\
    \ + 1).ToLower();\n        var allowedExtensions = new List<string> { \"txt\"\
    , \"exe\", \"dll\" };\n        if (!allowedExtensions.Contains(ext)) return (\"\
    No\");\n        return (\"Yes\");", "        // TODO\n\n        // Make sure that\
    \ the string isn't null or empty or longer than 3 characters\n        if (string.IsNullOrEmpty(file_name)\
    \ || file_name == \"\" || file_name >= \"000\")\n            return \"No\";\n\
    \        else {\n            // TODO\n\n            // Make sure that the string\
    \ doesn't contain a dot ('.') \n            if (file_name.Contains(\".\") || file_name\
    \ >= \"000\")\n                return \"No\";\n            else {\n          \
    \      // TODO\n\n                // Make sure that the string is longer than\
    \ 3 characters, and that\n                // the string begins with an alphabetical\
    \ character\n                if (file_name.length < 3 || file_name[0] >= \"a\"\
    \ || file_name[0] < \"A\")\n                    return \"No\";\n             \
    \   else {\n                    // TODO\n\n                    // Make sure that\
    \ the string contains one of these 3 strings:\n                    // - 'txt',\
    \ 'exe', 'dll'\n                    string string_to_check = file_name.Substring(1);\n\
    \                    string_to_check = string_to_check.ToLower();\n          \
    \          string_to_check = string_to_check.Replace(\".\", \"\");\n         \
    \           if (string_to_check == \"exe\" || string_to_check == \"dll\" || string_to_check\
    \ == \"txt\")\n                        return \"Yes\";\n                    else\n\
    \                        return \"No\";\n                }\n            }\n  \
    \      }", "        int index = 0;\n        string character = \"0\";\n      \
    \  while (index >= 0) {\n            character = file_name[index];\n         \
    \   index = character;\n        }\n        char letter = '0';\n        while (letter<'a'\
    \ || letter>'z' || letter>'A') {\n            letter = (char)Convert.ToInt32(letter);\n\
    \        }\n        string[] substrings = file_name.Split('.');\n        string\
    \ first_substring = substrings[0];\n        int length = first_substring.Length;\n\
    \        if (length > 3 && length > 0 && first_substring[0] < 'a' && first_substring[0]\
    \ > 'z' && first_substring[0] < 'A') {\n            return \"No\";\n        }\n\
    \        if (length >= 2 && length > 1 && substrings[1] != null && substrings[1].ToLower().StartsWith((\"\
    txt\"))) {\n            return \"Yes\";\n        }\n        if (length >= 2 &&\
    \ length > 1 && substrings[1] != null && substrings[1].ToLower().StartsWith((\"\
    exe\"))) {\n            return \"Yes\";\n        }\n        if (length >= 2 &&\
    \ length > 1 && substrings[1] != null && substrings[1].ToLower().StartsWith((\"\
    dll\"))) {\n            return \"Yes\";\n        }\n        return \"No\";", " \
    \       int num_digits = file_name.Count(f => char.IsDigit(f));\n        if (num_digits\
    \ > 3) { return \"No\"; }\n        if (file_name.Contains('.')) { return \"No\"\
    ; }\n        if (file_name.Substring(0, 1).Trim() == \"\") { return \"No\"; }\n\
    \        if (!(new string[] { \"txt\", \"exe\", \"dll\" }).Contains(file_name.Substring(1)))\
    \ { return \"No\"; }\n        return \"Yes\";", "        if (file_name == null\
    \ || !Regex.IsMatch(file_name, \"^[0-9]+\\\\.[a-zA-Z]+\"))\n            return\
    \ \"No\";\n        if (file_name.Count(x => x != '\\\\') == 3 &&\n           \
    \ file_name.IndexOf('.') != -1 &&\n            !file_name.StartsWith(string.Empty)\
    \ &&\n            !file_name.Any(x => Char.IsLetter(x)))\n            return \"\
    No\";\n        return \"Yes\";", "        Regex regex = new Regex(@\"^[0-9]{0,3}\\\
    .[a-z][a-z].*$\");\n        Match match = regex.Match(file_name);\n        if\
    \ (match.Success) {\n            string first_part = (match.Value);\n        \
    \    int dot_index = first_part.IndexOf(\".\");\n            if (dot_index > 0)\
    \ {\n                string first_part_before = first_part.Substring(0, dot_index);\n\
    \                if (string.IsNullOrEmpty(first_part_before)) {\n            \
    \        bool isValid = true;\n                    for (int i = 1; i < first_part.Length;\
    \ i++) {\n                        bool foundLetter = char.IsLetter(first_part[i]);\n\
    \                        bool foundDigit = char.IsDigit(first_part[i]);\n    \
    \                    isValid = isValid && foundLetter && foundDigit;\n       \
    \             }\n                    return (isValid ? \"Yes\" : \"No\");\n  \
    \              } else {\n                    return \"No\";\n                }\n\
    \            }\n            return \"No\";\n        }\n        return \"No\";",
  "        string pattern = @\"^[1-9][0-9]{3}\\.([a-z][a-zA-Z])*$\";\n        if (Regex.IsMatch(file_name.ToLower(),\
    \ pattern)) {\n            if (file_name.Contains(\".\")) {\n                if\
    \ (file_name.IndexOf(\".\") > 0) {\n                    int index = file_name.IndexOf(\"\
    .\");\n                    for (int i = index - 1; i >= 0; i--) {\n          \
    \              if (char.IsLetter(file_name[i])) {\n                          \
    \  break;\n                        }\n                    }\n                }\n\
    \            }\n        }\n        else {\n            return \"No\";\n      \
    \  }\n        return \"Yes\";", "        string s = file_name.Replace(\".txt\"\
    , \"\").Replace(\".exe\", \"\").Replace(\".dll\", \"\");\n        if (s.Length\
    \ > 3) return \"No\";\n        if (s.Length < 2) return \"No\";\n        if (s.Substring(0,1).Trim()\
    \ == \"\") return \"No\";\n        string dots = s.Substring(0, s.IndexOf(\".\"\
    ) - 1);\n        string first_char = (new string(s.Take(s.IndexOf(\".\")).ToArray())).Substring(0,\
    \ 1);\n        if (first_char not in ['a'-'z','A'-'Z']) return \"No\";\n     \
    \   if (dots not in ['txt','exe','dll']) return \"No\";\n        return \"Yes\"\
    ;", "        // Get the index of the dot '.'\n        int pos = file_name.IndexOf('.');\n\
    \        // If the index is positive, then the file's name is valid.\n       \
    \ if (pos != -1) {\n            // If the dot is not the first character, then\
    \ the file's name is invalid.\n            if (pos < file_name.Length - 1) {\n\
    \                // Get the substring before the dot\n                string before\
    \ = file_name.Substring(0, pos);\n                // If the substring before the\
    \ dot is not empty, then the file's name is invalid.\n                if (before.Length\
    \ > 0) {\n                    // Get the substring after the dot\n           \
    \         string after = file_name.Substring(pos + 1);\n                    //\
    \ If the substring after the dot is not one of these, then the file's name is\
    \ invalid.\n                    if ((after == \"txt\") || (after == \"exe\") ||\
    \ (after == \"dll\")) {\n                        return \"Yes\";\n           \
    \         } else {\n                        return \"No\";\n                 \
    \   }\n                }\n            }\n        }\n        return \"No\";", " \
    \       int num = file_name.Length;\n        if (num > 3) {\n            return\
    \ \"No\";\n        }\n        if (file_name.IndexOf('.') != -1) {\n          \
    \  int index = file_name.IndexOf('.');\n            if (index != -1) {\n     \
    \           string first_part = file_name.Substring(0, index);\n             \
    \   char first_part_char = first_part[0];\n                if (!(first_part_char\
    \ >= 'a' && first_part_char <= 'z') && !(first_part_char >= 'A' && first_part_char\
    \ <= 'Z')) {\n                    return \"No\";\n                }\n        \
    \        string second_part = file_name.Substring(index + 1);\n              \
    \  string valid_extensions = \"txt|exe|dll\";\n                int valid_extensions_length\
    \ = valid_extensions.Length;\n                if (valid_extensions.IndexOf(\"\
    .\") != -1) {\n                    int valid_extensions_index = valid_extensions.IndexOf(\"\
    .\");\n                    if (valid_extensions_index != -1) {\n             \
    \           string ext = valid_extensions.Substring(valid_extensions_index);\n\
    \                        bool is_valid = true;\n                        for (int\
    \ i = 0; i < valid_extensions_length; i++) {\n                            if (ext\
    \ == valid_extensions.Substring(i, 1)) {\n                                is_valid\
    \ = false;\n                                break;\n                         \
    \   }\n                        }\n                        if (!is_valid) {\n \
    \                           return \"No\";\n                        }\n      \
    \              }\n                }\n            }\n        }\n        return\
    \ \"Yes\";", "        if (file_name.Length > 3) {\n            return \"No\";\n\
    \        }\n        if (file_name.Contains(\".\")) {\n            return \"No\"\
    ;\n        }\n        if (file_name.Substring(0, 1).Equals('0') ||\n         \
    \   file_name.Substring(0, 1).Equals('9')) {\n            return \"No\";\n   \
    \     }\n        if (file_name.Substring(0, 2).Equals(\"..\")) {\n           \
    \ return \"No\";\n        }\n        char[] valid_names = {'a', 'b', 'c', 'd',\
    \ 'e', 'f'\n                            , 'g', 'h', 'i', 'j', 'k'\n          \
    \                  , 'l', 'm', 'n', 'o', 'p', 'q'\n                          \
    \  , 'r', 's', 't', 'u', 'v', 'w'\n                            , 'x', 'y', 'z',\
    \ 'A', 'B', 'C'\n                            , 'D', 'E', 'F', 'G', 'H', 'I'\n\
    \                            , 'J', 'K', 'L', 'M', 'N', 'O'\n                \
    \            , 'P', 'Q', 'R', 'S', 'T', 'U'\n                            , 'V',\
    \ 'W', 'X', 'Y', 'Z'};\n        if (file_name.Substring(0, 1).Equals(valid_names))\
    \ {\n            return \"Yes\";\n        }\n        return \"No\";", "      \
    \  // Implement your function here\n        string strFileName = file_name;\n\
    \        if (strFileName.Length > 3)\n        {\n            return (\"No\");\n\
    \        }\n        else if (strFileName.IndexOf('.') < 0)\n        {\n      \
    \      return (\"No\");\n        }\n        else if (strFileName.Substring(0,\
    \ 1).ToLower() != \"a\")\n        {\n            return (\"No\");\n        }\n\
    \        else if (strFileName.Substring(1, strFileName.IndexOf('.')).ToLower()\
    \ != \"txt\")\n        {\n            return (\"No\");\n        }\n        else\n\
    \        {\n            return (\"Yes\");\n        }", "        if (file_name.Length\
    \ > 3 || file_name.Contains('.') || file_name.Substring(0, 1).Length == 0 ||\n\
    \            !(file_name.Substring(0, 1).Contains('a') || file_name.Substring(0,\
    \ 1).Contains('A') || \n            file_name.Substring(0, 1).Contains('0') ||\
    \ file_name.Substring(0, 1).Contains('9')) ||\n            file_name.Substring(1).Trim().ToLower().Contains(\"\
    exe\") || file_name.Substring(1).Trim().ToLower().Contains(\"dll\") ||\n     \
    \       file_name.Substring(1).Trim().ToLower().Contains(\"txt\")) {\n       \
    \     return \"No\";\n        } else {\n            return \"Yes\";\n        }",
  "        string dots = file_name.Split('.').Length;\n        if (dots > 3) {\n \
    \           return \"No\";\n        }\n\n        string first_char = file_name.Split('.')[0].First();\n\
    \        if (!(first_char.Length >= 1 && first_char.Length <= 2 && (first_char\
    \ >= 'a' && first_char <= 'z') || (first_char >= 'A' && first_char <= 'Z'))) {\n\
    \            return \"No\";\n        }\n\n        if (!(file_name.Split('.')[1].Contains('.')\
    \ && file_name.Split('.')[1].Length >= 1 && (file_name.Split('.')[1].First() ==\
    \ 'txt' || file_name.Split('.')[1].First() == 'exe' || file_name.Split('.')[1].First()\
    \ == 'dll'))) {\n            return \"No\";\n        }\n\n        return \"Yes\"\
    ;", "        // TODO: Implement this function by verifying that all the listed\
    \ conditions are met.\n        char[] characters = file_name.ToCharArray();\n\
    \        Array.Sort(characters);\n        if (characters[0] != '0' && characters[1]\
    \ != '9' || characters[2] != '.' || characters[3].Length != 1 || characters[3]\
    \ != 'a' || characters[3] != 'z' || characters[3] != 'A' || characters[3] != 'Z'\
    \ || characters[4] != 't' || characters[5] != 'x' || characters[5] != 'e' || characters[5]\
    \ != 'r' || characters[5] != 'u' || characters[5] != '.' || characters[6] != 'd'\
    \ || characters[7] != 'l' || characters[7] != 'l' || characters[7] != 'b' || characters[8]\
    \ != 't')\n            return \"No\";\n        return \"Yes\";", "        return\
    \ string.IsNullOrEmpty(file_name) ? \"No\" : ((file_name.Length >= 3) && (file_name.IndexOf('.')\
    \ == -1) && (file_name.Substring(0, 1).All(x => Char.IsLetter(x))) && (file_name.Substring(1,\
    \ 3) != \"txt\" && file_name.Substring(1, 3) != \"exe\" && file_name.Substring(1,\
    \ 3) != \"dll\") ? \"No\" : (\"Yes\");", "        string pattern = @\"^((?!\\\
    .).{3})\\.(?<name>(?!txt|exe|dll).+?)$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            return file_name;\n    \
    \    }\n        else {\n            return \"No\";\n        }", "        if (file_name.Length\
    \ < 3 || file_name.Contains('.') == true || file_name.Substring(0, 1).IsLetter()\
    \ == true || file_name.Substring(0, 1).IsLower()){\n            return \"No\"\
    ;\n        }\n        for (int i = 0; i < file_name.Length - 1; i++) {\n     \
    \       char c = file_name[i];\n            if (c < '0' || c > '9') {\n      \
    \          return \"No\";\n            }\n        }\n        string extension\
    \ = file_name.Substring(file_name.IndexOf('.') + 1);\n        if (extension ==\
    \ \"txt\" || extension == \"exe\" || extension == \"dll\") {\n            return\
    \ \"Yes\";\n        }\n        return \"No\";", "        string pattern = @\"\
    ^[^\\.]+\\.[a-zA-Z0-9]+$\";\n        if (!Regex.IsMatch(file_name,pattern))\n\
    \            return (\"No\");\n        List<string> allowedExtensions = new List<string>\
    \ {\n            \"txt\", \"exe\", \"dll\"\n        };\n        if (file_name.IndexOf(\"\
    .\") > 1)\n            return (\"No\");\n        if (file_name.Substring(0, 1).ToLower()\
    \ != \"a\")\n            return (\"No\");\n        if (!allowedExtensions.Contains(file_name.Substring(1,\
    \ file_name.Length-2)))\n            return (\"No\");\n        return (\"Yes\"\
    );", "        // Define variable for return\n        string return_status = \"\
    No\";\n        // Define variable for counting dots in file\n        string dots_in_file\
    \ = \"\";\n        // Define variable for counting numbers in file\n        string\
    \ numbers_in_file = \"\";\n        // Define variable for counting letters in\
    \ file\n        string letters_in_file = \"\";\n        // Define variable for\
    \ counting letters after dot in file\n        string letters_after_dot = \"\"\
    ;\n        // Define variable for counting file extension in file\n        string\
    \ file_extension = \"\";\n        // Define variable for counting total characters\
    \ in file\n        long total_chars;\n        \n        // Get number of chars\
    \ in file name\n        total_chars = file_name.Length;\n        // Get number\
    \ of dots in file name\n        dots_in_file = file_name.Count(c => c == '.');\n\
    \        // Get number of numbers in file name\n        numbers_in_file = file_name.Count(c\
    \ => c == '0' || c == '1' || c == '2' || c == '3' || c == '4' || c == '5' || c\
    \ == '6' || c == '7' || c == '8' || c == '9');\n        // Get number of letters\
    \ in file name\n        letters_in_file = file_name.Count(c => c >= 'a' && c <=\
    \ 'z' || c >= 'A' && c <= 'Z');\n        // Get number of letters after dot in\
    \ file name\n        letters_after_dot = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1).Count(c => c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z');\n        //\
    \ Get file extension in file name\n        file_extension = file_name.Substring(file_name.LastIndexOf(\"\
    .\") + 1);\n        \n        // If there is more than 3 digits in file name return\
    \ \"No\"\n        if (dots_in_file > 3) {\n            return_status = \"No\"\
    ;\n        // If there is only one dot return \"No\"\n        } else if (dots_in_file\
    \ == 1) {\n            return_status = \"No\";\n        // If there is more than\
    \ two dots in file name return \"No\"\n        } else if (dots_in_file > 2) {\n\
    \            return_status = \"No\";\n        // If there are numbers in the file\
    \ name return \"No\"\n        } else if (numbers_in_file > 1) {\n            return_status\
    \ = \"No\";\n        // If there are letters in the file name return \"No\"\n\
    \        } else if (letters_in_file > 1) {\n            return_status = \"No\"\
    ;\n        // If there are letters after dots in the file name return \"No\"\n\
    \        } else if (letters_after_dot > 1) {\n            return_status = \"No\"\
    ;\n        // If there are letters in the file name return \"No\"\n        } else\
    \ if (letters_in_file == 1) {\n            return_", "        // TODO: Complete\
    \ the function.\n        return null;", "        // If the file's name contains\
    \ less than 3 digits, return 'No'.\n        if (file_name.Length < 3)\n      \
    \  {\n            return \"No\";\n        }\n\n        // If the file's name contains\
    \ more than 3 digits, return 'No'.\n        if (file_name.Length > 3)\n      \
    \  {\n            return \"No\";\n        }\n\n        // If the file's name contains\
    \ more than one dot, return 'No'.\n        if (file_name.Count(x => x == '.')\
    \ > 1)\n        {\n            return \"No\";\n        }\n\n        // If the\
    \ file's name contains no dot, return 'No'.\n        if (file_name.Count(x =>\
    \ x == '.') == 1)\n        {\n            return \"No\";\n        }\n\n      \
    \  // If the file's name doesn't contain any letters from the latin alphabetic\
    \ \n        // alphabet, return 'No'.\n        string first_char = file_name.First().ToString();\n\
    \        if (!first_char.All(x => char.IsLetter(x)))\n        {\n            return\
    \ \"No\";\n        }\n\n        // If the file's name doesn't start with a letter\
    \ from the latin alphabetic \n        // alphabet, return 'No'.\n        if (!first_char.Any(x\
    \ => char.IsLetter(x)))\n        {\n            return \"No\";\n        }\n\n\
    \        // If the file's name doesn't end with a letter from the latin alphabetic\
    \ \n        // alphabet, return 'No'.\n        if (!first_char.All(x => char.IsLetter(x)))\n\
    \        {\n            return \"No\";\n        }\n\n        // If the file's\
    \ name doesn't contain any of the substring listed above, \n        // return\
    \ 'No'.\n        bool test_string = false;\n        if (file_name.Count(x => x\
    \ == '.') == 0)\n        {\n            test_string = true;\n        }\n     \
    \   else if (file_name.Count(x => x == '.') == 1 && file_name.Count(y => y ==\
    \ '.') == 1)\n        {\n            test_string = true;\n        }\n        else\
    \ if (file_name.Count(x => x == '.') == 1 && file_name.Count(y => y == '.') ==\
    \ 2)\n        {\n            test_string = true;\n        }\n        else if (file_name.Count(x\
    \ => x == '.') == 2 && file_name.Count(y => y == '.') == 1)\n        {\n     \
    \       test_string = true;\n        }\n        else if (file_name.Count(x =>\
    \ x == '.') == 2 && file_name.Count(y => y == '.') == 2)\n        {\n        \
    \    test_string = true;\n        }\n\n        if (!test_string)\n        {\n\
    \            return \"No\";\n        }\n\n        // If we get this far, then\
    \ the file's name contains all the necessary conditions.\n        return \"Yes\"\
    ;", "        char dot = '.';\n        if (file_name.Length > 3) {\n          \
    \  return \"No\";\n        }\n        if (file_name.Contains(dot)) {\n       \
    \     return \"No\";\n        }\n        if (file_name.Length > 1 && file_name[0]\
    \ != ' ' && file_name[0] != '0' && file_name[0] != '9' && file_name[0] != 'a'\
    \ && file_name[0] != 'A' && file_name[0] != '-' && file_name[0] != '_') {\n  \
    \          return \"No\";\n        }\n        if (!file_name.Contains(dot) ||\
    \ !file_name.StartsWith(\"a\") || !file_name.StartsWith(\"A\") || !file_name.StartsWith(\"\
    -\") || !file_name.StartsWith(\"_\") || !file_name.StartsWith(\"0\") || !file_name.StartsWith(\"\
    9\")) {\n            return \"No\";\n        }\n        char[] charArray = file_name.ToCharArray();\n\
    \        int count = 0;\n        for (int i = 0; i < charArray.Length; i++) {\n\
    \            if (charArray[i] == '.') {\n                if (count == 0) {\n \
    \                   count++;\n                }\n            }\n            if\
    \ (charArray[i] == 'a' || charArray[i] == 'A' || charArray[i] == '-' || charArray[i]\
    \ == '_' || charArray[i] == '0' || charArray[i] == '9') {\n                if\
    \ (count > 0) {\n                    count--;\n                }\n           \
    \ }\n        }\n        if (count == 3) {\n            return \"Yes\";\n     \
    \   }\n        return \"No\";", "        string pattern = @\".+\\.(txt|exe|dll)$\"\
    ;\n        Regex rgx = new Regex(pattern);\n        string result;\n        if\
    \ (rgx.IsMatch(file_name))\n        {\n            int index = file_name.Length\
    \ - 1;\n            result = file_name.Substring(0, index).Trim();\n         \
    \   while (index >= 0) {\n                int first = file_name[index].ToLower()\
    \ + 1;\n                int last = file_name[index + 1].ToLower() - 1;\n     \
    \           if (first < 'a' || first > 'z') {\n                    result = result\
    \ + \"0\";\n                    index--;\n                }\n                else\
    \ if (last < 'a' || last > 'z') {\n                    result = result + \"0\"\
    ;\n                    index--;\n                }\n                else if (first\
    \ < 'a' || first > 'z' ||\n                    last < 'a' || last > 'z' ||\n \
    \                   (first == 'a' && last == 'z') ||\n                    (first\
    \ == 'z' && last == 'a'))\n                {\n                    result = result\
    \ + file_name[index].ToString();\n                    index--;\n             \
    \   }\n                else\n                {\n                    result = result\
    \ + file_name[index].ToString();\n                    index--;\n             \
    \   }\n            }\n            return result;\n        }\n        return \"\
    No\";", "        string sub_string;\n        sub_string = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n        if (sub_string.Length >= 3 || (sub_string.Length\
    \ == 0 && (file_name.IndexOf(\".\") == -1))) {\n            return \"No\";\n \
    \       }\n        string alphabet = string.Empty;\n        char letter;\n   \
    \     foreach (char c in file_name) {\n            letter = c;\n            if\
    \ (letter == '.') {\n                alphabet = sub_string.Substring(0,1);\n \
    \           }\n            if (alphabet.IndexOf(letter) == -1) {\n           \
    \     return \"No\";\n            }\n        }\n        return \"Yes\";", "  \
    \      int count = 0;\n        if (file_name.Length > 3) {\n            count++;\n\
    \        }\n        if (file_name.Contains(\".\")) {\n            count++;\n \
    \       }\n        if (file_name.Substring(0, 1) != \"\" || (file_name.Substring(0,\
    \ 1) != \"a\" && file_name.Substring(0, 1) != \"A\")) {\n            count++;\n\
    \        }\n        if (file_name.Substring(file_name.Length - 1, 1) != \"txt\"\
    \ &&\n            file_name.Substring(file_name.Length - 1, 1) != \"exe\" &&\n\
    \            file_name.Substring(file_name.Length - 1, 1) != \"dll\") {\n    \
    \        count++;\n        }\n        if (count == 3) {\n            return \"\
    Yes\";\n        } else {\n            return \"No\";\n        }", "        int\
    \ dotPos = file_name.IndexOf(\".\");\n        if (dotPos < 0) return \"No\";\n\
    \        if (dotPos == 0) return \"Yes\";\n        if (file_name.IndexOf('.')\
    \ < 2) return \"No\";\n        if (file_name[0] != Char.ToUpper(file_name[0]))\
    \ return \"No\";\n        if (file_name[dotPos - 1] == file_name[dotPos - 1])\
    \ \n            return \"Yes\";\n        if (file_name.Substring(0, dotPos) ==\
    \ \"\") \n            return \"Yes\";\n        if (!file_name.Substring(0, dotPos).All(char.IsLetter))\
    \ \n            return \"No\";\n        if (!file_name.Substring(dotPos).Any((x)\
    \ => x == '.' || x == '\\\\')) \n            return \"No\";\n        return \"\
    Yes\";", "        string pattern = \"^[0-9]{3}\\.([a-z][a-z]|txt|exe|dll)$\";\n\
    \        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ return \"Yes\";\n        return \"No\";", "        string valid_filename = \"\
    Yes\";\n        string dotname = file_name.Substring(0, file_name.IndexOf(\".\"\
    ));\n        string subfilename = file_name.Substring(dotname.Length);\n     \
    \   if (dotname.Length < 3 || dotname != \"..\" || subfilename.ToLower() == \"\
    exe\")\n            valid_filename = \"No\";\n        return valid_filename;",
  "        char[] dot = file_name.IndexOf('.');\n        if (dot > file_name.Length\
    \ - 1) {\n            return \"No\";\n        }\n        // If there are only\
    \ digits, return \"Yes\"\n        if (Char.IsDigit(file_name[0])) {\n        \
    \    return \"Yes\";\n        }\n        // If there is only one dot, return \"\
    No\"\n        if (dot < 1) {\n            return \"No\";\n        }\n        //\
    \ The substring before the dot should not empty, and it starts with a letter from\
    \ the \n        // latin alphapet ('a'-'z' and 'A'-'Z')\n        char first_letter\
    \ = file_name[0].ToString().ToLower();\n        if (first_letter < 'a' || first_letter\
    \ > 'z') {\n            return \"No\";\n        }\n        // The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n        var file_name_extensions\
    \ = new List<string> {\n            \"txt\",\n            \"exe\",\n         \
    \   \"dll\"\n        };\n        if (file_name.Substring(0, dot) == \"\") {\n\
    \            return \"No\";\n        }\n        if (file_name.Substring(dot).ToLower()\
    \ not in file_name_extensions) {\n            return \"No\";\n        }\n    \
    \    return \"Yes\";", "        Regex regex = new Regex(@\"^([0-9]{1,3})\\.[a-z][a-z]\"\
    );\n        if (regex.IsMatch(file_name))\n            return file_name;\n   \
    \     else return \"No\";", "        // Define variables\n        string string_to_check;\n\
    \        string string_before_dot;\n        string string_after_dot;\n       \
    \ char c;\n        bool is_valid;\n\n        // Set variables\n        string_to_check\
    \ = file_name;\n        string_before_dot = string_to_check.Substring(0, string_to_check.IndexOf(\"\
    .\"));\n        string_after_dot = string_to_check.Substring(string_to_check.IndexOf(\"\
    .\") + 1);\n\n        // Check condition\n        is_valid = false;\n        if\
    \ (string_to_check.Length > 3) {\n            is_valid = true;\n        }\n  \
    \      if (string_to_check.Contains('.')) {\n            is_valid = true;\n  \
    \      }\n        if (string_before_dot != \"\" && string_before_dot.Length >=\
    \ 1 && string_before_dot[0] >= 'a' && string_before_dot[0] <= 'z') {\n       \
    \     is_valid = true;\n        }\n        if (string_after_dot != \"\" && string_after_dot.Length\
    \ >= 1 && string_after_dot[0] >= 'a' && string_after_dot[0] <= 'z' && string_after_dot[1]\
    \ == '.') {\n            is_valid = true;\n        }\n\n        if (is_valid)\
    \ {\n            return \"Yes\";\n        } else {\n            return \"No\"\
    ;\n        }", "        Regex regex = new Regex(\"^[0-9]{1,3}\\.\", RegexOptions.IgnoreCase);\n\
    \        if (regex.IsMatch(file_name) == false)\n        {\n            return\
    \ \"No\";\n        }\n        string first_part = regex.Match(file_name)[0].Value;\n\
    \        if (first_part == \"\") {\n            return \"No\";\n        }\n  \
    \      if (first_part == file_name[0]) {\n            return \"No\";\n       \
    \ }\n        bool check = false;\n        foreach (char c in first_part) {\n \
    \           if (c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z') {\n            \
    \    if (first_part.Substring(0, 1) != \"\") {\n                    return \"\
    No\";\n                }\n            }\n            else {\n                return\
    \ \"No\";\n            }\n        }\n        List<string> extensions = new List<string>();\n\
    \        extensions.AddRange(new string[] { \"txt\", \"exe\", \"dll\" });\n  \
    \      if (extensions.Contains(file_name.Substring(first_part.IndexOf(\".\") +\
    \ 1))) {\n            return \"Yes\";\n        }\n        return \"No\";", " \
    \       // Your code goes here\n        if (file_name.Length > 3) return false;\n\
    \        if (file_name.IndexOf('.') == -1) return false;\n        if (file_name.Substring(0,\
    \ 1) == \"a\" || file_name.Substring(0, 1) == \"A\") return false;\n        if\
    \ (file_name.Substring(file_name.LastIndexOf('.')+1) == \".txt\" || file_name.Substring(file_name.LastIndexOf('.')+1)\
    \ == \".exe\" || file_name.Substring(file_name.LastIndexOf('.')+1) == \".dll\"\
    \ || file_name.Substring(file_name.LastIndexOf('.')+1) == \".dll\" || file_name.Substring(file_name.LastIndexOf('.')+1)\
    \ == \".dll\") return true;\n        else\n            return false;", "     \
    \   string str = file_name;\n        str = str.ToUpper();\n        str = str.Replace(\"\
    .\", \"\");\n        char[] chars = new char[10];\n        str[0] = 'a';\n   \
    \     str[1] = 'A';\n        int i = 0;\n        for (i = 1; i < str.Length; i++)\
    \ {\n            chars[i] = str[i];\n        }\n        int len = str.Length;\n\
    \        if (len > 3) {\n            return \"No\";\n        }\n        if (str.Length\
    \ < 1) {\n            return \"No\";\n        }\n        if (str[0] < 'a' || str[0]\
    \ > 'z') {\n            return \"No\";\n        }\n        if (str[1] < 'A' ||\
    \ str[1] > 'Z') {\n            return \"No\";\n        }\n        foreach (char\
    \ c in chars) {\n            if (!(c >= '0' && c <= '9')) {\n                return\
    \ \"No\";\n            }\n        }\n        if (str.Substring(0, 1) != \".\"\
    ) {\n            return \"No\";\n        }\n        switch (str.Substring(1, str.Length\
    \ - 1)) {\n            case \"exe\":\n            case \"dll\":\n            \
    \    return \"Yes\";\n            default:\n                return \"No\";\n \
    \       }", "        string pattern = @\"^\\d{0,3}\\.\\w{0,3}$\";\n        Regex\
    \ rgx = new Regex(pattern);\n        if (rgx.IsMatch(file_name)) {\n         \
    \   if (!file_name.Contains(\".\")) {\n                return \"No\";\n      \
    \      }\n            char[] charArray = file_name.ToCharArray();\n          \
    \  if (charArray[0] == '0' || charArray[0] == '9') {\n                return \"\
    No\";\n            }\n            if (charArray.Contains('.')) {\n           \
    \     int index = charArray.IndexOf('.');\n                if (index == -1) {\n\
    \                    return \"No\";\n                }\n                if (!charArray[index\
    \ - 1].ToString().IsLetter()) {\n                    return \"No\";\n        \
    \        }\n            }\n            if (charArray.Contains(\"exe\") || charArray.Contains(\"\
    dll\")) {\n                return \"Yes\";\n            }\n        }\n       \
    \ return \"No\";", "        int dotIndex = file_name.IndexOf(\".\");\n       \
    \ int digitCount = 0;\n        int index = 0;\n        string fileType = \"\"\
    ;\n        while (index < dotIndex) {\n            char c = file_name[index];\n\
    \            if (char.IsDigit(c)) {\n                digitCount++;\n         \
    \   }\n            index++;\n        }\n        if (digitCount >= 3) {\n     \
    \       return (\"No\");\n        }\n        if (dotIndex < 1) {\n           \
    \ return (\"No\");\n        }\n        char c = file_name[dotIndex - 1];\n   \
    \     if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z')) {\n            return\
    \ (\"No\");\n        }\n        char d = file_name[dotIndex + 1];\n        if\
    \ ((d != 'txt') && (d != 'exe') && (d != 'dll')) {\n            return (\"No\"\
    );\n        }\n        return (\"Yes\");", "        // Get the length of file_name\n\
    \        int length = file_name.Length;\n        // Check if there are exactly\
    \ 3 characters\n        if (length < 3)\n        {\n            return \"No\"\
    ;\n        }\n        // Check if the string contains one dot\n        if (file_name.IndexOf('.')\
    \ != -1)\n        {\n            return \"No\";\n        }\n        // Check if\
    \ the string starts with a letter\n        if (file_name[0] < 'a' || file_name[0]\
    \ > 'z')\n        {\n            return \"No\";\n        }\n        // Check if\
    \ the string ends with a letter\n        if (file_name[length - 1] < 'a' || file_name[length\
    \ - 1] > 'z')\n        {\n            return \"No\";\n        }\n        // Check\
    \ if the substring before the dot contains exactly one letter\n        if (file_name.Substring(0,\
    \ 1) < 'a' || file_name.Substring(0, 1) > 'z')\n        {\n            return\
    \ \"No\";\n        }\n        // Check if the substring after the dot contains\
    \ one of the following strings:\n        string[] extension = new string[] { \"\
    txt\", \"exe\", \"dll\" };\n        if (extension.Any(x => file_name.Substring(1,\
    \ length).Contains(x)))\n        {\n            return \"Yes\";\n        }\n \
    \       return \"No\";", "        char[] delimiters = { '.' };\n        int index_of_first\
    \ = file_name.IndexOf(delimiters[0]);\n        if (index_of_first < 0) {\n   \
    \         return \"No\";\n        }\n        string first_string = file_name.Substring(0,\
    \ index_of_first);\n        if (first_string.Length > 3) {\n            return\
    \ \"No\";\n        }\n        char first_char = 0;\n        if (!first_string.StartsWith((char)\
    \ first_char)) {\n            return \"No\";\n        }\n        string last_string\
    \ = file_name.Substring(index_of_first + 1, file_name.Length - index_of_first\
    \ - 1);\n        IEnumerable<string> suffixes = new[] { \"txt\", \"exe\", \"dll\"\
    \ };\n        if (!suffixes.Any(last_string.Contains)) {\n            return \"\
    No\";\n        }\n        return \"Yes\";", "        if (file_name == \"\") {\n\
    \            return \"No\";\n        }\n        var file_length = file_name.Length;\n\
    \        if (file_length != 8) {\n            return \"No\";\n        }\n    \
    \    if (file_name.IndexOf(\".\") == -1) {\n            return \"No\";\n     \
    \   }\n        if (file_name.Substring(0,1) == \"0\" || file_name.Substring(0,1)\
    \ == \"1\" || \nfile_name.Substring(0,1) == \"2\" || file_name.Substring(0,1)\
    \ == \"3\" || \nfile_name.Substring(0,1) == \"4\" || file_name.Substring(0,1)\
    \ == \"5\" || \nfile_name.Substring(0,1) == \"6\" || file_name.Substring(0,1)\
    \ == \"7\" || \nfile_name.Substring(0,1) == \"8\" || file_name.Substring(0,1)\
    \ == \"9\") {\n            return \"No\";\n        }\n        if (!(file_name.Substring(0,\
    \ 1).ToString() >= 'a' && file_name.Substring(0, 1).ToString() <= 'z' || \n  \
    \          file_name.Substring(0, 1).ToString() >= 'A' && file_name.Substring(0,\
    \ 1).ToString() <= 'Z')) {\n            return \"No\";\n        }\n        switch\
    \ (file_name.Substring(1, 1).ToString()) {\n            case \"e\":\n        \
    \    case \"E\":\n            case \"x\":\n            case \"X\":\n         \
    \   case \"d\":\n            case \"D\":\n            case \"s\":\n          \
    \  case \"S\":\n            case \"m\":\n            case \"M\":\n           \
    \ case \"c\":\n            case \"C\":\n                return \"No\";\n     \
    \       default:\n                return \"Yes\";\n        }", "        //TODO:\
    \ implement this function.\n        return \"Yes\";", "        int length = file_name.Length;\n\
    \        // if length = 3 or less than 3\n        if (length == 3 || length <\
    \ 3) {\n            return \"No\";\n        }\n        // if length = 4\n    \
    \    if (length == 4) {\n            // if it contains dot\n            if (file_name.Contains(\"\
    .\")) {\n                // if substring before dot is empty\n               \
    \ if (file_name.Substring(0, 1) == \"\") {\n                    return \"No\"\
    ;\n                }\n                // if it starts with a letter from latin\
    \ alphabet\n                else if (file_name.Substring(0, 1).ToLower() == \"\
    a\" ||\n                     file_name.Substring(0, 1).ToLower() == \"b\" ||\n\
    \                     file_name.Substring(0, 1).ToLower() == \"c\" ||\n      \
    \               file_name.Substring(0, 1).ToLower() == \"d\" ||\n            \
    \         file_name.Substring(0, 1).ToLower() == \"e\" ||\n                  \
    \   file_name.Substring(0, 1).ToLower() == \"f\" ||\n                     file_name.Substring(0,\
    \ 1).ToLower() == \"g\" ||\n                     file_name.Substring(0, 1).ToLower()\
    \ == \"h\" ||\n                     file_name.Substring(0, 1).ToLower() == \"\
    i\" ||\n                     file_name.Substring(0, 1).ToLower() == \"j\" ||\n\
    \                     file_name.Substring(0, 1).ToLower() == \"k\" ||\n      \
    \               file_name.Substring(0, 1).ToLower() == \"l\" ||\n            \
    \         file_name.Substring(0, 1).ToLower() == \"m\" ||\n                  \
    \   file_name.Substring(0, 1).ToLower() == \"n\" ||\n                     file_name.Substring(0,\
    \ 1).ToLower() == \"o\" ||\n                     file_name.Substring(0, 1).ToLower()\
    \ == \"p\" ||\n                     file_name.Substring(0, 1).ToLower() == \"\
    q\" ||\n                     file_name.Substring(0, 1).ToLower() == \"r\" ||\n\
    \                     file_name.Substring(0, 1).ToLower() == \"s\" ||\n      \
    \               file_name.Substring(0, 1).ToLower() == \"t\" ||\n            \
    \         file_name.Substring(0, 1).ToLower() == \"u\" ||\n                  \
    \   file_name.Substring(0, 1).ToLower() == \"v\" ||\n                     file_name.Substring(0,\
    \ 1).ToLower() == \"w\" ||\n                     file_name.Substring(0, 1).ToLower()\
    \ == \"x\" ||\n                     file_name.Substring(0, 1).ToLower() == \"\
    y\" ||\n                     file_name.Substring(0, 1).ToLower() == \"z\") {\n\
    \                    return \"Yes\";\n                } else {\n             \
    \       return \"No\";\n                }\n            } else {\n            \
    \    return \"No\";\n            }\n        } else {\n            return \"No\"\
    ;\n        }", "        char[] arr = file_name.ToCharArray();\n        int num\
    \ = 0;\n        for (int i = 0; i < arr.Length; i++) {\n            if (arr[i]\
    \ >= '0' && arr[i] <= '9') {\n                num += arr[i] - '0';\n         \
    \   }\n            if (arr[i] == '.') {\n                if (i == 0) {\n     \
    \               return \"No\";\n                }\n                num++;\n  \
    \          }\n        }\n        if (num > 3) {\n            return \"No\";\n\
    \        }\n        if (num < 1) {\n            return \"No\";\n        }\n  \
    \      if (num < 2) {\n            return \"No\";\n        }\n        string result\
    \ = \"\";\n        for (int i = 0; i < arr.Length; i++) {\n            if (arr[i]\
    \ == '.') {\n                if (i == 0) {\n                    continue;\n  \
    \              }\n                result += \"0\";\n            }\n          \
    \  if (arr[i] >= 'a' && arr[i] <= 'z') {\n                result += 'a' - 'a'\
    \ + 1;\n            } else if (arr[i] >= 'A' && arr[i] <= 'Z') {\n           \
    \     result += 'A' - 'A' + 1;\n            } else {\n                return \"\
    No\";\n            }\n        }\n        foreach (char c in result.ToCharArray())\
    \ {\n            if (c > '9') {\n                return \"No\";\n            }\n\
    \        }\n        return \"Yes\";", "        Regex regex = new Regex(@\"^([0-9]{3})\\\
    .?[a-zA-Z][a-zA-Z0-9\\.]*$\");\n        if (!regex.IsMatch(file_name)\n      \
    \      || !regex.IsMatch(file_name.Substring(0, file_name.IndexOf('.')))\n   \
    \         || !regex.IsMatch(file_name.Substring(file_name.IndexOf('.'), 4))) {\n\
    \            return \"No\";\n        }\n        return \"Yes\";", "        char[]\
    \ file_name_chArray = file_name.ToCharArray();\n\n        // No more than three\
    \ digits should be in the file's name\n        if (file_name_chArray.Length >\
    \ 3) {\n            return \"No\";\n        }\n        // The file's name contains\
    \ exactly one dot '.'\n        if (file_name_chArray.Length == 1 && file_name_chArray[0]\
    \ == '.') {\n            return \"No\";\n        }\n        // The substring before\
    \ the dot should not be empty, and it starts with a letter from the latin alphabet\n\
    \        if (file_name_chArray.Length == 1 && file_name_chArray[0] != '\\\\' &&\
    \ file_name_chArray[0] != '/' &&\n            file_name_chArray[0] != '_' && file_name_chArray[0]\
    \ != '\\0' && file_name_chArray[0] != '\\t' &&\n            file_name_chArray[0]\
    \ != '\\n' && file_name_chArray[0] != '\\r' && file_name_chArray[0] != '\\v' &&\n\
    \            file_name_chArray[0] != '\\a' && file_name_chArray[0] != '\\b' &&\
    \ file_name_chArray[0] != '\\f' &&\n            file_name_chArray[0] != '\\v'\
    \ && file_name_chArray[0] != '\\0') {\n            return \"No\";\n        }\n\
    \        // The substring after the dot should be one of these: ['txt', 'exe',\
    \ 'dll']\n        if (file_name_chArray.Length > 1 && file_name_chArray[1] ==\
    \ '.' &&\n            file_name_chArray[0] == 'a' || file_name_chArray[0] == 'b'\
    \ || file_name_chArray[0] == 'c' ||\n            file_name_chArray[0] == 'd' ||\
    \ file_name_chArray[0] == 'e' || file_name_chArray[0] == 'f' ||\n            file_name_chArray[0]\
    \ == 'g' || file_name_chArray[0] == 'h' || file_name_chArray[0] == 'i' ||\n  \
    \          file_name_chArray[0] == 'j' || file_name_chArray[0] == 'k' || file_name_chArray[0]\
    \ == 'l' ||\n            file_name_chArray[0] == 'm' || file_name_chArray[0] ==\
    \ 'n' || file_name_chArray[0] == 'o' ||\n            file_name_chArray[0] == 'p'\
    \ || file_name_chArray[0] == 'q' || file_name_chArray[0] == 'r' ||\n         \
    \   file_name_chArray[0] == 's' || file_name_chArray[0] == 't' || file_name_chArray[0]\
    \ == 'u' ||\n            file_name_chArray[0] == 'v' || file_name_chArray[0] ==\
    \ 'w' || file_name_chArray[0] == 'x' ||\n            file_name_chArray[0] == 'y'\
    \ || file_name_chArray[0] == 'z') {\n            return \"Yes\";\n        }\n\n\
    \        return \"No\";", "        int file_name = file_name.Length;\n       \
    \ if (file_name.Length >= 3 && file_name.Contains(\".\") == true && \n       \
    \ file_name.Substring(0, 1).Equals(\"0\") == false &&\n        file_name.Substring(0,\
    \ 1).Equals(\"1\") == false &&\n        file_name.Substring(0, 1).Equals(\"2\"\
    ) == false &&\n        file_name.Substring(0, 1).Equals(\"3\") == false &&\n \
    \       file_name.Substring(0, 1).Equals(\"4\") == false &&\n        file_name.Substring(0,\
    \ 1).Equals(\"5\") == false &&\n        file_name.Substring(0, 1).Equals(\"6\"\
    ) == false &&\n        file_name.Substring(0, 1).Equals(\"7\") == false &&\n \
    \       file_name.Substring(0, 1).Equals(\"8\") == false &&\n        file_name.Substring(0,\
    \ 1).Equals(\"9\") == false && \n        file_name.Substring(0, 1).Equals(\"A\"\
    ) == false && \n        file_name.Substring(0, 1).Equals(\"B\") == false && \n\
    \        file_name.Substring(0, 1).Equals(\"C\") == false && \n        file_name.Substring(0,\
    \ 1).Equals(\"D\") == false && \n        file_name.Substring(0, 1).Equals(\"E\"\
    ) == false && \n        file_name.Substring(0, 1).Equals(\"F\") == false && \n\
    \        file_name.Substring(0, 1).Equals(\"G\") == false && \n        file_name.Substring(0,\
    \ 1).Equals(\"H\") == false && \n        file_name.Substring(0, 1).Equals(\"I\"\
    ) == false && \n        file_name.Substring(0, 1).Equals(\"J\") == false && \n\
    \        file_name.Substring(0, 1).Equals(\"K\") == false && \n        file_name.Substring(0,\
    \ 1).Equals(\"L\") == false && \n        file_name.Substring(0, 1).Equals(\"M\"\
    ) == false && \n        file_name.Substring(0, 1).Equals(\"N\") == false && \n\
    \        file_name.Substring(0, 1).Equals(\"O\") == false && \n        file_name.Substring(0,\
    \ 1).Equals(\"P\") == false && \n        file_name.Substring(0, 1).Equals(\"Q\"\
    ) == false && \n        file_name.Substring(0, 1).Equals(\"R\") == false && \n\
    \        file_name.Substring(0, 1).Equals(\"S\") == false && \n        file_name.Substring(0,\
    \ 1).Equals(\"T\") == false && \n        file_name.Substring(0, 1).Equals(\"U\"\
    ) == false && \n        file_name.Substring(0, 1).Equals(\"V\") == false && \n\
    \        file_name.Substring(0, 1).Equals(\"W\") == false && \n        file_name.Substring(0,\
    \ 1).Equals(\"X\") == false && \n        file_name.Substring(0, 1).Equals(\"Y\"\
    ) == false ", "        return file_name.Split('.')\n                         \
    \ .Any(\n                                (string sub) => \n                  \
    \                  sub != null && \n                                    sub.Length\
    \ > 3 && \n                                    !sub.StartsWith(string.Empty) &&\
    \ \n                                    sub.Length <= 3 && \n                \
    \                    !sub.All(char => char.IsLetter(char)));", "        int count\
    \ = 0;\n        if (file_name == null || file_name.Length == 0)\n            return\
    \ \"No\";\n\n        // Split the string into an array of strings. Remove trailing\
    \ dots and spaces.\n        string file_name_array = file_name.Replace(\" \",\
    \ \"\").Replace(\"\\t\", \"\").Replace(\"\\n\", \"\").Replace(\"\\r\", \"\").Replace(\"\
    ,\", \"\").Replace(\".\", \"\").Replace(\"-\", \"\").Replace(\"_\", \"\").Replace(\"\
    (\", \"\").Replace(\")\", \"\").Replace(\"?\", \"\").Replace(\"/\", \"\").Replace(\"\
    :\", \"\").Replace(\"&\", \"\").Replace(\"+\", \"\");\n        file_name_array\
    \ = file_name_array.Split(',').ToList();\n\n        // If the number of elements\
    \ in the array is 1, then the filename is valid.\n        if (file_name_array.Count()\
    \ == 1)\n            return \"Yes\";\n\n        // If there are more than 3 digits,\
    \ then the filename is invalid.\n        if (file_name_array.Count() > 3 || file_name_array.Count()\
    \ < 1 || file_name_array.Any(item => item != \"\" || item == \"0\") || file_name_array.Any(item\
    \ => item.IndexOf('.') > 0 || item == \"0\") || file_name_array.Any(item => item.IndexOf('.')\
    \ == -1 || item.Substring(0, 1) != \"a\" || item.Substring(0, 1) != \"b\" || item.Substring(0,\
    \ 1) != \"c\" || item.Substring(0, 1) != \"d\" || item.Substring(0, 1) != \"e\"\
    \ || item.Substring(0, 1) != \"f\" || item.Substring(0, 1) != \"g\" || item.Substring(0,\
    \ 1) != \"h\" || item.Substring(0, 1) != \"i\" || item.Substring(0, 1) != \"j\"\
    \ || item.Substring(0, 1) != \"k\" || item.Substring(0, 1) != \"l\" || item.Substring(0,\
    \ 1) != \"m\" || item.Substring(0, 1) != \"n\" || item.Substring(0, 1) != \"o\"\
    \ || item.Substring(0, 1) != \"p\" || item.Substring(0, 1) != \"q\" || item.Substring(0,\
    \ 1) != \"r\" || item.Substring(0, 1) != \"s\" || item.Substring(0, 1) != \"t\"\
    \ || item.Substring(0, 1) != \"u\" || item.Substring(0, 1) != \"v\" || item.Substring(0,\
    \ 1) != \"w\" || item.Substring(0, 1) != \"x\" || item.Substring(0, 1) != \"y\"\
    \ || item.Substring(0, 1) != \"z\"))\n            return \"No\";\n\n        //\
    \ If there is exactly one dot, then remove it from the string.\n        if (file_name_array.Count()\
    \ == 2 && file_name_array.ElementAt(1).Contains('.'))\n            file_name_array.Remove(file_name_array.ElementAt(1));\n\
    \n        // If there is more than one dot, then return 'No' if the first one\
    \ is '0'.\n        if (file_name_array.Count() > 1 && file_name_", "        //The\
    \ conditions need to be met for the file's name to return 'Yes'.\n        //Check\
    \ if the file's name has less than three digits.\n        if (file_name.Count()\
    \ > 3 && file_name.Where(x => !char.IsDigit(x)).Count() > 0) {\n            //Check\
    \ if the file's name contains more than one dot.\n            if (file_name.Count()\
    \ > 1 && file_name.Where(x => x == '.').Count() > 0) {\n                //Check\
    \ if the substring before dot starts with a letter.\n                if (file_name.Where(x\
    \ => x.Length > 0 && char.IsLetter(x)).Count() > 0) {\n                    //Check\
    \ if the substring after dot has one of the following\n                    if\
    \ (file_name.Where(x => x == '.' || x == 'd' || x == 'e' || x == 'l' || x == 'o').Count()\
    \ == 0) {\n                        return \"Yes\";\n                    }\n  \
    \              }\n            }\n        }\n        return \"No\";", "       \
    \ int digits;\n        // Check for valid file name characters\n        // if\
    \ fileName contains at least 1 '.'\n        if (file_name.IndexOf('.') != -1)\
    \ {\n            digits = file_name.Length - file_name.Replace('.', '').Length;\n\
    \            if (digits >= 3) {\n                // Check for valid characters\
    \ in front of '.'\n                // If fileName does not start with letter,\
    \ return No\n                if (!(file_name[0].IsLetterOrDigit())) {\n      \
    \              return \"No\";\n                }\n                // Check for\
    \ valid characters after '.'\n                // if fileName does not end with\
    \ one of these, return No\n                switch (file_name[file_name.Length\
    \ - 1]) {\n                    case 'txt':\n                    case 'exe':\n\
    \                    case 'dll':\n                    default:\n             \
    \           return \"No\";\n                }\n            }\n        }\n    \
    \    return \"Yes\";", "        // Your code goes here\n        if (file_name.Length\
    \ > 3) return false;\n        if(file_name.Contains('.')) return false;\n    \
    \    if(file_name.Substring(0, 1).IsEmpty()) return false;\n        if(!char.IsLetter(file_name.Substring(0,\
    \ 1).First())) return false;\n        if(file_name.Substring(0, file_name.IndexOf(\"\
    .\")).Contains(\".txt\") ||\n           file_name.Substring(0, file_name.IndexOf(\"\
    .\")).Contains(\".exe\") ||\n           file_name.Substring(0, file_name.IndexOf(\"\
    .\")).Contains(\".dll\")) return false;\n        return true;", "        Regex\
    \ rgx = new Regex(@\"^[0-9]{1,3}\\.[a-z]{3,3}$\", RegexOptions.IgnoreCase);\n\
    \        Regex rgx2 = new Regex(@\"^[a-zA-Z]{1}\\.txt$\", RegexOptions.IgnoreCase);\n\
    \        Regex rgx3 = new Regex(@\"^[a-zA-Z]{1}\\.exe$\", RegexOptions.IgnoreCase);\n\
    \        Regex rgx4 = new Regex(@\"^[a-zA-Z]{1}\\.dll$\", RegexOptions.IgnoreCase);\n\
    \        Regex rgx5 = new Regex(@\"^[a-zA-Z]{1}$\", RegexOptions.IgnoreCase);\n\
    \n        bool is_valid = true;\n        // If the file's name contains less than\
    \ three digits, return 'No'\n        if (file_name.Count() < 3) return \"No\"\
    ;\n        // If the file's name contains more than one dot, return 'No'\n   \
    \     if (file_name.Count() > 3) return \"No\";\n        // If the file's name\
    \ does not contain exactly one dot ('.'), return 'No'\n        if (file_name.Count()\
    \ == 1) return \"No\";\n        // If the substring before the dot is empty, the\
    \ file's name contains more than \n        // three digits, return 'No'\n    \
    \    if (file_name.Substring(0, 1).Trim() == \"\") return \"No\";\n        //\
    \ If the substring before the dot does not start with a letter, return 'No'\n\
    \        if (!rgx.IsMatch(file_name.Substring(0, 1))) return \"No\";\n       \
    \ // If the substring after the dot is invalid, return 'No'\n        if (!rgx4.IsMatch(file_name.Substring(1,\
    \ file_name.Length - 1))) return \"No\";\n        // If the substring after the\
    \ dot is one of these, return 'Yes'\n        if (rgx5.IsMatch(file_name.Substring(1,\
    \ file_name.Length - 1))) return \"Yes\";\n        // Otherwise, return 'No'\n\
    \        return \"No\";", "        return file_name.Split('.').Length == 3 &&\
    \ \n            file_name.Substring(0, 1) != string.Empty &&\n            !file_name.Substring(0,\
    \ 1).All(char.IsLetter) ||\n            new string[] {\"txt\", \"exe\", \"dll\"\
    }.Any(file_name.Substring(1));", "        Regex r = new Regex(@\"^(?!\\d\\.)(?!\\\
    .)[a-z]\\.[a-z]$\");\n        string file_name_clean = r.Replace(file_name, \"\
    .\");\n        Regex r_nums = new Regex(@\"^\\d+$\");\n        if (file_name_clean\
    \ == file_name) {\n            return \"Yes\";\n        }\n        if (file_name.Contains('.'))\
    \ {\n            return \"No\";\n        }\n        if (r_nums.IsMatch(file_name_clean))\
    \ {\n            return \"No\";\n        }\n        return \"Yes\";", "      \
    \  bool isValid = true;\n        int numOfDigits = 0;\n        int dotsIndex =\
    \ 0;\n        int index = 0;\n        int fileNameLength = file_name.Length;\n\
    \        char dotIndex = file_name.IndexOf('.');\n        string tempString =\
    \ \"\";\n        while (dotIndex != -1) {\n            numOfDigits++;\n      \
    \      dotIndex = file_name.IndexOf('.', index + 1);\n        }\n\n        if\
    \ (numOfDigits > 3) {\n            isValid = false;\n        }\n\n        if (dotIndex\
    \ != -1) {\n            tempString = file_name.Substring(0, dotIndex);\n     \
    \       if (tempString.Length > 0) {\n                index = dotIndex + 1;\n\
    \                if (index < fileNameLength && file_name[index] >= 'a' && file_name[index]\
    \ <= 'z') {\n                    index++;\n                    if (index < fileNameLength\
    \ && file_name[index] >= 'A' && file_name[index] <= 'Z') {\n                 \
    \       index++;\n                    } else {\n                        isValid\
    \ = false;\n                    }\n                } else {\n                \
    \    isValid = false;\n                }\n            } else {\n             \
    \   isValid = false;\n            }\n        }\n\n        if (is_valid)\n    \
    \        return \"Yes\";\n        return \"No\";", "        string dotloc = file_name.IndexOf(\"\
    .\");\n        if (dotloc == -1) {\n            return \"No\";\n        }\n  \
    \      string first = file_name.Substring(0, dotloc);\n        string second =\
    \ file_name.Substring(dotloc, 4);\n        if (second.Length == 0 || second[0]\
    \ != first || second[1] < 'a' || second[1] > 'z') {\n            return \"No\"\
    ;\n        }\n        if (file_name.IndexOf(\"txt\", 0) != -1 || file_name.IndexOf(\"\
    exe\", 0) != -1 || file_name.IndexOf(\"dll\", 0) != -1) {\n            return\
    \ \"Yes\";\n        }\n        return \"No\";", "        string[] file_name_parts\
    \ = file_name.Split('.');\n        if (file_name_parts.Length < 2 || file_name_parts[0].Length\
    \ > 3 || file_name_parts[0].Substring(0, 1).Equals(\"0\") || file_name_parts[0].Substring(0,\
    \ 1).Equals(\"9\")) {\n            return \"No\";\n        } else {\n        \
    \    char[] file_prefix = file_name_parts[0].ToCharArray();\n            char\
    \ letter = file_prefix[0];\n            bool is_letter = false;\n            for\
    \ (int i = 1; i < file_prefix.Length; i++) {\n                if (file_prefix[i]\
    \ < 'a' || file_prefix[i] > 'z') {\n                    return \"No\";\n     \
    \           }\n                if (file_prefix[i] > 'Z') {\n                 \
    \   return \"No\";\n                }\n                is_letter = true;\n   \
    \         }\n            if (!is_letter) {\n                return \"No\";\n \
    \           }\n            int len = file_name_parts[1].Length;\n            if\
    \ (len < 1 || len > 3 || file_name_parts[1].Substring(0, 1).Equals(\"0\") || file_name_parts[1].Substring(0,\
    \ 1).Equals(\"9\")) {\n                return \"No\";\n            }\n       \
    \     string[] suffixes = { \"txt\", \"exe\", \"dll\" };\n            bool is_valid\
    \ = false;\n            foreach (string suffix in suffixes) {\n              \
    \  if (file_name_parts[1].EndsWith(suffix)) {\n                    is_valid =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!is_valid) {\n                return \"No\";\n            }\n     \
    \       return \"Yes\";\n        }", "        // Declare your variables.\n   \
    \     string first_substring, second_substring, file_name = \"\";\n        int\
    \ file_name_length = 0;\n        bool valid = false;\n\n        // Get the length\
    \ of the file's name.\n        file_name_length = file_name.Length;\n\n      \
    \  // If there are no more characters in the string, return \"No\".\n        if\
    \ (file_size_length == 0)\n            return \"No\";\n\n        // Get the length\
    \ of the substring before the dot\n        first_substring = file_name.Substring(0,\
    \ (file_name_length - 1));\n\n        // If the first substring contains less\
    \ than three digits, return \"No\".\n        if (first_substring.Length < 3)\n\
    \            return \"No\";\n\n        // If the first substring contains more\
    \ than three digits, return \"No\".\n        if (first_substring.Length > 3)\n\
    \            return \"No\";\n\n        // If the first substring does not start\
    \ with a letter from the latin alphabet \n        // ('a'-'z' or 'A'-'Z'), return\
    \ \"No\".\n        if (first_substring.IndexOf(\"a\") < 0)\n            return\
    \ \"No\";\n\n        // If the first substring does not start with a letter from\
    \ the latin alphabet \n        // ('a'-'z' or 'A'-'Z'), return \"No\".\n     \
    \   if (first_substring.IndexOf(\"A\") < 0)\n            return \"No\";\n\n  \
    \      // Get the length of the substring after the dot\n        second_substring\
    \ = file_name.Substring((file_size_length - 1));\n\n        // If the second substring\
    \ does not contain 'txt', 'exe' or 'dll', return \"No\".\n        if (second_substring.IndexOf(\"\
    txt\") < 0)\n            return \"No\";\n\n        if (second_substring.IndexOf(\"\
    exe\") < 0)\n            return \"No\";\n\n        if (second_substring.IndexOf(\"\
    dll\") < 0)\n            return \"No\";\n\n        // If the second substring\
    \ contains 'txt', 'exe' or 'dll', return \"Yes\".\n        if (second_substring.IndexOf(\"\
    txt\") >= 0 || second_substring.IndexOf(\"exe\") >= 0 || second_substring.IndexOf(\"\
    dll\") >= 0)\n            return \"Yes\";\n\n        // If the second substring\
    \ contains none of the above three strings, return \"No\".\n        return \"\
    No\";", "        if(file_name.IndexOf('.')==-1 || file_name.Substring(0,1)==\"\
    .\" || \n            file_name.Substring(file_name.IndexOf('.'),1).IndexOf(\"\
    ..\")!=-1)\n            return \"No\";\n        char first_letter = file_name.Substring(0,1).ToLower();\n\
    \        if(first_letter >= 'a' && first_letter <= 'z')\n            return \"\
    Yes\";\n        if(first_letter >= 'A' && first_letter <= 'Z')\n            return\
    \ \"Yes\";\n        return \"No\";", "        Regex file_check = new Regex(@\"\
    ^[0-9]\\.(?!\\s)([a-zA-Z]){1,3}$\", RegexOptions.IgnoreCase);\n        if (file_check.IsMatch(file_name))\
    \ {\n            return file_name;\n        }\n        else {\n            return\
    \ \"No\";\n        }", "        if (file_name.Length > 3 || file_name.Length <\
    \ 1) {\n            return \"No\";\n        }\n        if (file_name.IndexOf('.')\
    \ < 1) {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ 1).Length == 0) {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ 1).ToLower() != \"a\" && file_name.Substring(0, 1).ToLower() != \"b\" && file_name.Substring(0,\
    \ 1).ToLower() != \"c\" && file_name.Substring(0, 1).ToLower() != \"d\" && file_name.Substring(0,\
    \ 1).ToLower() != \"e\" && file_name.Substring(0, 1).ToLower() != \"f\" && file_name.Substring(0,\
    \ 1).ToLower() != \"g\" && file_name.Substring(0, 1).ToLower() != \"h\" && file_name.Substring(0,\
    \ 1).ToLower() != \"i\" && file_name.Substring(0, 1).ToLower() != \"j\" && file_name.Substring(0,\
    \ 1).ToLower() != \"k\" && file_name.Substring(0, 1).ToLower() != \"l\" && file_name.Substring(0,\
    \ 1).ToLower() != \"m\" && file_name.Substring(0, 1).ToLower() != \"n\" && file_name.Substring(0,\
    \ 1).ToLower() != \"o\" && file_name.Substring(0, 1).ToLower() != \"p\" && file_name.Substring(0,\
    \ 1).ToLower() != \"q\" && file_name.Substring(0, 1).ToLower() != \"r\" && file_name.Substring(0,\
    \ 1).ToLower() != \"s\" && file_name.Substring(0, 1).ToLower() != \"t\" && file_name.Substring(0,\
    \ 1).ToLower() != \"u\" && file_name.Substring(0, 1).ToLower() != \"v\" && file_name.Substring(0,\
    \ 1).ToLower() != \"w\" && file_name.Substring(0, 1).ToLower() != \"x\" && file_name.Substring(0,\
    \ 1).ToLower() != \"y\" && file_name.Substring(0, 1).ToLower() != \"z\") {\n \
    \           return \"No\";\n        }\n        if (file_name.Substring(0, 1).ToLower()\
    \ == \"a\" || file_name.Substring(0, 1).ToLower() == \"b\" || file_name.Substring(0,\
    \ 1).ToLower() == \"c\" || file_name.Substring(0, 1).ToLower() == \"d\" || file_name.Substring(0,\
    \ 1).ToLower() == \"e\" || file_name.Substring(0, 1).ToLower() == \"f\" || file_name.Substring(0,\
    \ 1).ToLower() == \"g\" || file_name.Substring(0, 1).ToLower() == \"h\" || file_name.Substring(0,\
    \ 1).ToLower() == \"i\" || file_name.Substring(0, 1).", "        if (file_name.Length\
    \ > 3) {\n            return \"No\";\n        }\n        if (file_name.Contains(\"\
    .\")) {\n            return \"No\";\n        }\n        if (file_name.StartsWith(\"\
    0\") || file_name.StartsWith(\"1\") ||\n            file_name.StartsWith(\"2\"\
    ) || file_name.StartsWith(\"3\") ||\n            file_name.StartsWith(\"4\") ||\
    \ file_name.StartsWith(\"5\") ||\n            file_name.StartsWith(\"6\") || file_name.StartsWith(\"\
    7\") ||\n            file_name.StartsWith(\"8\") || file_name.StartsWith(\"9\"\
    )) {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ 1).IsLetter() ||\n            file_name.Substring(0, 1).IsDigit() ||\n     \
    \       file_name.Substring(0, 1).Equals(\".\") ||\n            file_name.Substring(0,\
    \ 1).Equals(\"/\")) {\n            return \"No\";\n        }\n        if (file_name.Substring(1,\
    \ 3).Contains(\"exe\") ||\n            file_name.Substring(1, 3).Contains(\"dll\"\
    )) {\n            return \"Yes\";\n        }\n        return \"No\";", "     \
    \   string dotted_file = file_name.Substring(0, file_name.IndexOf(\".\"));\n \
    \       int dot_index = dotted_file.IndexOf(\".\");\n        string first_char;\n\
    \        if (dot_index != -1) {\n            first_char = dotted_file.Substring(0,\
    \ dot_index);\n            if (!(first_char.Any(c => char.IsDigit(c)) && first_char.Length\
    \ > 3)) {\n                return \"No\";\n            }\n        } else {\n \
    \           return \"No\";\n        }\n\n        string extension = file_name.Substring(dot_index\
    \ + 1);\n        if (!(extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\")) {\n            return \"No\";\n        }\n\n        return \"Yes\"\
    ;", "        // Your code goes here\n        var count = file_name.Length;\n \
    \       if (count < 3)\n        {\n            return (\"No\");\n        }\n \
    \       if (file_name.Contains(\" \"))\n        {\n            return (\"No\"\
    );\n        }\n        if (file_name.Substring(0, 1).IndexOfAny(new[] {'a', 'b',\
    \ 'c', 'd', 'e', 'f', 'g', 'h', 'j', 'k', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\
    \ 'u', 'v', 'w', 'x', 'y', 'z', '0', '1'}, StringComparison.OrdinalIgnoreCase)\
    \ == -1)\n        {\n            return (\"No\");\n        }\n        if (file_name.Substring(0,\
    \ 1).Contains('.') != true)\n        {\n            return (\"No\");\n       \
    \ }\n        if (file_name.Substring(0, 1).Contains('.') == true && file_name.Substring(0,\
    \ 2).ToUpper().Contains(\"DLL\") != true)\n        {\n            return (\"No\"\
    );\n        }\n        if (file_name.Substring(0, 1).Contains('.') == true &&\
    \ file_name.Substring(0, 2).ToUpper().Contains(\"EXE\") != true)\n        {\n\
    \            return (\"No\");\n        }\n        return (\"Yes\");", "      \
    \  // Declare a new string variable that stores the answer to this question.\n\
    \        string answer;\n\n        // Declare a Boolean value that stores the\
    \ answer to the question 'Does \n        // the file's name contain any non-numeric\
    \ characters? If it does, set \n        // the Boolean value to 'Yes'. Otherwise,\
    \ set the Boolean value to 'No'.\n        bool invalidName = false;\n\n      \
    \  // Declare an integer variable that holds the length of the file's name.\n\
    \        int nameLength;\n\n        // Declare a Boolean value that stores the\
    \ answer to the question \n        // 'Does the file's name contain any letters\
    \ from the latin alphabet? If \n        // it does, set the Boolean value to 'Yes'.\
    \ Otherwise, set the Boolean value \n        // to 'No'.\n        bool invalidLetters\
    \ = false;\n\n        // Declare a Boolean value that stores the answer to the\
    \ question \n        // 'Does the file's name contain any numbers in the file's\
    \ name? If it \n        // does, set the Boolean value to 'Yes'. Otherwise, set\
    \ the Boolean value \n        // to 'No'.\n        bool invalidNumbers = false;\n\
    \n        // Declare a Boolean value that stores the answer to the question \n\
    \        // 'Does the file's name contain any uppercase letters in the file's\
    \ \n        // name? If it does, set the Boolean value to 'Yes'. Otherwise, set\
    \ the \n        // Boolean value to 'No'.\n        bool invalidUppercase = false;\n\
    \n        // Declare a Boolean value that stores the answer to the question \n\
    \        // 'Does the file's name contain any lowercase letters in the file's\
    \ \n        // name? If it does, set the Boolean value to 'Yes'. Otherwise, set\
    \ the \n        // Boolean value to 'No'.\n        bool invalidLowercase = false;\n\
    \n        // Declare a Boolean value that stores the answer to the question \n\
    \        // 'Does the file's name contain any symbols in the file's name? If it\
    \ \n        // does, set the Boolean value to 'Yes'. Otherwise, set the Boolean\
    \ value \n        // to 'No'.\n        bool invalidSymbols = false;\n\n      \
    \  // Declare a Boolean value that stores the answer to the question \n      \
    \  // 'Does the file's name contain any punctuation characters in the \n     \
    \   // file's name? If it does, set the Boolean value to 'Yes'. Otherwise, set\
    \ the \n        // Boolean value to 'No'.\n        bool invalidPunctuation = false;\n\
    \n        // Declare a Boolean value that stores the answer to the question \n\
    \        // 'Does the file's name contain any special characters in the \n   \
    \     // file's name? If it does, set the Boolean value to 'Yes'. Otherwise, set\
    \ the \n        // Boolean value to 'No'.\n        bool invalidSpecial = false;\n\
    \n        // Declare a Boolean value that stores the answer to the question \n\
    \        // '", "        // Write your code here\n        // TODO: Replace the\
    \ code below with your own implementation.\n        if (file_name == null || file_name.Length\
    \ <= 3) return \"No\";\n        if (file_name.Contains('.') == false) return \"\
    No\";\n        if (file_name.Substring(0, 1).ToLowerInvariant() == string.Empty\
    \ || \n            (file_name.Substring(0, 1).ToLowerInvariant()  \n         \
    \   != \"a\" && file_name.Substring(0, 1).ToLowerInvariant()  \n            !=\
    \ \"b\" && file_name.Substring(0, 1).ToLowerInvariant()  \n            != \"c\"\
    \ && file_name.Substring(0, 1).ToLowerInvariant()  \n            != \"d\" && file_name.Substring(0,\
    \ 1).ToLowerInvariant()  \n            != \"e\" && file_name.Substring(0, 1).ToLowerInvariant()\
    \  \n            != \"f\" && file_name.Substring(0, 1).ToLowerInvariant()  \n\
    \            != \"g\" && file_name.Substring(0, 1).ToLowerInvariant()  \n    \
    \        != \"h\" && file_name.Substring(0, 1).ToLowerInvariant()  \n        \
    \    != \"i\" && file_name.Substring(0, 1).ToLowerInvariant()  \n            !=\
    \ \"j\" && file_name.Substring(0, 1).ToLowerInvariant()  \n            != \"k\"\
    \ && file_name.Substring(0, 1).ToLowerInvariant()  \n            != \"l\" && file_name.Substring(0,\
    \ 1).ToLowerInvariant()  \n            != \"m\" && file_name.Substring(0, 1).ToLowerInvariant()\
    \  \n            != \"n\" && file_name.Substring(0, 1).ToLowerInvariant()  \n\
    \            != \"o\" && file_name.Substring(0, 1).ToLowerInvariant()  \n    \
    \        != \"p\" && file_name.Substring(0, 1).ToLowerInvariant()  \n        \
    \    != \"q\" && file_name.Substring(0, 1).ToLowerInvariant()  \n            !=\
    \ \"r\" && file_name.Substring(0, 1).ToLowerInvariant()  \n            != \"s\"\
    \ && file_name.Substring(0, 1).ToLowerInvariant()  \n            != \"t\" && file_name.Substring(0,\
    \ 1).ToLowerInvariant()  \n            != \"u\" && file_name.Substring(0, 1).ToLowerInvariant()\
    \  \n            != \"v\" && file_name.Substring(0, 1).ToLowerInvariant()  \n\
    \            != \"w\" && file_name.Substring(0, 1).ToLowerInvariant()  \n    \
    \        != \"x\" && file_name.Substring(0, 1).ToLowerInvariant()  \n        \
    \    != \"y\" && file_name.Substring(0, 1).ToLowerInvariant()  \n            !=\
    \ \"z\" && file_name.Substring(0, 1).ToLowerInvariant", "        if (file_name.Length\
    \ <= 3) {\n            return \"No\";\n        }\n        if (file_name.Contains(\"\
    .\")) {\n            return \"No\";\n        }\n        if (file_name[0] != '.')\
    \ {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ 1).IndexOfAny(System.IO.Path.GetInvalidFileNameChars()) != -1) {\n         \
    \   return \"No\";\n        }\n        if (file_name.Substring(file_name.LastIndexOf('.')).ToUpper()\
    \ != \"EXE\") {\n            return \"No\";\n        }\n        return \"Yes\"\
    ;", "        if (file_name == null) {\n            throw new ArgumentNullException(\"\
    file_name\");\n        }\n        int count = 0;\n        int dotIndex = file_name.IndexOf('.');\n\
    \        if (dotIndex == -1) {\n            return null;\n        }\n        char\
    \ firstLetter = file_name.Substring(0, dotIndex).ToUpper().ToCharArray()[0];\n\
    \        if (firstLetter == '.') {\n            return null;\n        }\n    \
    \    for (int index = 0; index < file_name.Length; index++) {\n            if\
    \ (file_name[index] == dot) {\n                count++;\n            }\n     \
    \   }\n        if (count > 2) {\n            return null;\n        }\n       \
    \ if (count < 1) {\n            return null;\n        }\n        string validNames\
    \ = new[] {\n            \".txt\",\n            \".exe\",\n            \".dll\"\
    \n        };\n        if (!validNames.Contains(file_name.Substring(1, dotIndex\
    \ + 1))) {\n            return null;\n        }\n        return String.Format(\"\
    {0}{1}\", firstLetter, file_name.Substring(dotIndex + 1, file_name.Length - 1\
    \ - dotIndex));", "        string first_part_of_file_name;\n        string second_part_of_file_name;\n\
    \        if (file_name.Contains(\".\")) {\n            first_part_of_file_name\
    \ = file_name.Substring(0, file_name.IndexOf(\".\"));\n            second_part_of_file_name\
    \ = file_name.Substring(file_name.IndexOf(\".\"));\n        }\n        else {\n\
    \            first_part_of_file_name = file_name;\n            second_part_of_file_name\
    \ = \"\";\n        }\n        if (first_part_of_file_name.Length > 3 || first_part_of_file_name.IndexOf(\"\
    .\") != -1 || \n            first_part_of_file_name[0] < 'a' || first_part_of_file_name[0]\
    \ > 'z' || \n            first_part_of_file_name[first_part_of_file_name.Length\
    \ - 1] < 'a' || \n            first_part_of_file_name[first_part_of_file_name.Length\
    \ - 1] > 'z') {\n            return \"No\";\n        }\n        if (second_part_of_file_name.Length\
    \ > 3 || second_part_of_file_name.IndexOf(\".\") != -1 || \n            second_part_of_file_name[0]\
    \ < 'a' || second_part_of_file_name[0] > 'z' || \n            second_part_of_file_name[second_part_of_file_name.Length\
    \ - 1] < 'a' || \n            second_part_of_file_name[second_part_of_file_name.Length\
    \ - 1] > 'z') {\n            return \"No\";\n        }\n        if (second_part_of_file_name.Contains(\"\
    txt\") || second_part_of_file_name.Contains(\"exe\") || \n            second_part_of_file_name.Contains(\"\
    dll\")) {\n            return \"Yes\";\n        }\n        return \"No\";", " \
    \       //string pattern = @\"^\\d*\\d*\\.txt$|^\\..*$|^[A-Za-z]{1}.*\\.exe$|^[A-Za-z]{1}.*\\\
    .dll$\";\n        string pattern = @\"^\\d+\\.txt$|^\\..*$|^[A-Za-z]{1}.*\\.exe$|^[A-Za-z]{1}.*\\\
    .dll$\";\n\n        Regex regex = new Regex(pattern);\n        string result =\
    \ regex.Match(file_name).Success;\n\n        if (result)\n            return \"\
    Yes\";\n        else\n            return \"No\";", "        var invalid_name =\
    \ false;\n        var name_length = file_name.Length;\n        if (name_length\
    \ < 3 || \n            (name_length != 3 && file_name.IndexOf(\".\") < 0)) {\n\
    \            invalid_name = true;\n        }\n        var dotPos = file_name.IndexOf(\"\
    .\");\n        if (dotPos >= 0) {\n            var start = file_name.Substring(0,\
    \ dotPos);\n            var end = file_name.Substring(dotPos + 1);\n         \
    \   var check_pos = 0;\n            for (;check_pos < start.Length;) {\n     \
    \           var char = start[check_pos];\n                if ((char < 'a' || char\
    \ > 'z') && (char < 'A' || char > 'Z')) {\n                    invalid_name =\
    \ true;\n                    break;\n                }\n                check_pos++;\n\
    \            }\n            for (;check_pos < end.Length;) {\n               \
    \ var char = end[check_pos];\n                if (!(check_pos < start.Length &&\
    \ char == ' ')) {\n                    if (char == '.') {\n                  \
    \      if (!(check_pos < start.Length && start[check_pos] == ' ')) {\n       \
    \                     invalid_name = true;\n                            break;\n\
    \                        }\n                    }\n                    check_pos++;\n\
    \                }\n                else {\n                    if (char != '.')\
    \ {\n                        invalid_name = true;\n                        break;\n\
    \                    }\n                    else {\n                        check_pos++;\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ (invalid_name) {\n            return \"No\";\n        }\n        return \"Yes\"\
    ;", "        if (file_name.Length > 3) return \"No\";\n        if (file_name.Contains(\"\
    .\")) return \"No\";\n        if (file_name[0] == 'a' && file_name[1] == 'z' ||\
    \ file_name[0] == 'A' && file_name[1] == 'Z') return \"No\";\n        if (file_name.Substring(0,\
    \ 1) == \"_\") return \"No\";\n        if (file_name.Substring(0, 2) == \"_00\"\
    ) return \"No\";\n        return \"Yes\";", "        Regex regex = new Regex(@\"\
    ^(?<digit>\\d{0,3})\\.(?<letters>[a-zA-z0-9])+\\.(?<extension>(?:txt|exe|dll))$\"\
    );\n        if (regex.IsMatch(file_name)) {\n            return file_name.Substring(0,\
    \ file_name.IndexOf(\".\", StringComparison.Ordinal))==\".\" ? \n            \
    \            \"Yes\" : \"No\";\n        }\n        return \"No\";", "        string\
    \ s = \"\";\n        int counter = 0;\n        bool flag = false;\n        for\
    \ (int i = 0; i < file_name.Length; i++) {\n            if (char.IsNumber(file_name[i]))\n\
    \                counter++;\n            if (counter > 2)\n                flag\
    \ = true;\n            if (file_name[i] == '.') {\n                if (i == 0)\n\
    \                    flag = false;\n                else\n                   \
    \ flag = true;\n            }\n            if (char.IsLetter(file_name[i]))\n\
    \                counter++;\n        }\n        if (file_name.Substring(0, 1)\
    \ == file_name.Substring(0, 1).ToUpper() && counter > 1)\n            flag = true;\n\
    \        if (file_name.Substring(0, 1) == file_name.Substring(0, 1).ToUpper()\
    \ && file_name.Substring(0, 2) != \"\")\n            flag = true;\n        if\
    \ (file_name.Substring(0, 1) != file_name.Substring(0, 1).ToUpper() && file_name.Substring(0,\
    \ 3) == \"\")\n            flag = true;\n        if (file_name.Substring(0, 1)\
    \ != file_name.Substring(0, 1).ToUpper() && file_name.Substring(0, 2) == file_name.Substring(0,\
    \ 2).ToUpper())\n            flag = true;\n        if (flag == true)\n       \
    \     s = \"Yes\";\n        else\n            s = \"No\";\n        return s;",
  "        if (file_name.Length > 3 || file_name.Contains(\".\") || \n           \
    \ file_name.Substring(0, 1).Length == 0 || \n            file_name.Substring(0,\
    \ 1).ToLower() == \"a\" || \n            file_name.Substring(0, 1).ToLower() ==\
    \ \"b\" || \n            file_name.Substring(0, 1).ToLower() == \"c\" || \n  \
    \          file_name.Substring(0, 1).ToLower() == \"d\" || \n            file_name.Substring(0,\
    \ 1).ToLower() == \"e\" || \n            file_name.Substring(0, 1).ToLower() ==\
    \ \"f\" || \n            file_name.Substring(0, 1).ToLower() == \"g\" || \n  \
    \          file_name.Substring(0, 1).ToLower() == \"h\" || \n            file_name.Substring(0,\
    \ 1).ToLower() == \"i\" || \n            file_name.Substring(0, 1).ToLower() ==\
    \ \"j\" || \n            file_name.Substring(0, 1).ToLower() == \"k\" || \n  \
    \          file_name.Substring(0, 1).ToLower() == \"l\" || \n            file_name.Substring(0,\
    \ 1).ToLower() == \"m\" || \n            file_name.Substring(0, 1).ToLower() ==\
    \ \"n\" || \n            file_name.Substring(0, 1).ToLower() == \"o\" || \n  \
    \          file_name.Substring(0, 1).ToLower() == \"p\" || \n            file_name.Substring(0,\
    \ 1).ToLower() == \"q\" || \n            file_name.Substring(0, 1).ToLower() ==\
    \ \"r\" || \n            file_name.Substring(0, 1).ToLower() == \"s\" || \n  \
    \          file_name.Substring(0, 1).ToLower() == \"t\" || \n            file_name.Substring(0,\
    \ 1).ToLower() == \"u\" || \n            file_name.Substring(0, 1).ToLower() ==\
    \ \"v\" || \n            file_name.Substring(0, 1).ToLower() == \"w\" || \n  \
    \          file_name.Substring(0, 1).ToLower() == \"x\" || \n            file_name.Substring(0,\
    \ 1).ToLower() == \"y\" || \n            file_name.Substring(0, 1).ToLower() ==\
    \ \"z\" || \n            file_name.Substring(0, 1).ToLower() == \"0\" || \n  \
    \          file_name.Substring(0, 1).ToLower() == \"1\" ||\n            file_name.Substring(0,\
    \ 1).ToLower() == \"2\" || \n            file_name.Substring(0, 1).ToLower() ==\
    \ \"3\" || \n            file_name.Substring(0, 1).ToLower() == \"4\" || \n  \
    \          file_name.Substring(0, 1).ToLower() == \"5\" || \n            file_name.Substring(0,\
    \ 1).ToLower() == \"6\" || \n            file_name.Substring(0, 1).ToLower() ==\
    \ \"7\" || \n            file_name.Substring(0, 1).ToLower(", "        if (file_name.Length\
    \ > 3 || !file_name.Contains('.'))\n            return \"No\";\n        else if\
    \ (file_name.IndexOf('.') != 0)\n            return \"No\";\n        else if (file_name.Substring(0,\
    \ 1).IsLetter() || file_name.Substring(0, 1).IsDigit())\n            return \"\
    No\";\n        else if (file_name.Substring(0, 2).Contains('.'))\n           \
    \ return \"No\";\n        else if (file_name.Substring(0, 3).Contains('.'))\n\
    \            return \"No\";\n        else if (file_name.Substring(0, file_name.IndexOf('.'))\n\
    \                .ToLowerInvariant()\n                .Equals(new string[] {\"\
    txt\", \"exe\", \"dll\"})\n                || file_name.Substring(0, file_name.IndexOf('.')).ToUpperInvariant()\n\
    \                .Equals(new string[] {\"TXT\", \"EXE\", \"DLL\"}))\n        \
    \    return \"Yes\";\n        else\n            return \"No\";", "        bool\
    \ valid = true;\n\n        int name_digits = file_name.Length - 1;\n        valid\
    \ = valid && name_digits >= 3 && file_name.Contains(\".\");\n        valid = valid\
    \ && file_name.Substring(0, 1).StartsWith(\"a\") && file_name.Substring(0, 1).EndsWith(\"\
    z\");\n        valid = valid && file_name.Substring(0, 1).StartsWith(\"A\") &&\
    \ file_name.Substring(0, 1).EndsWith(\"Z\");\n        valid = valid && file_name.Substring(0,\
    \ 2) != \"\";\n        valid = valid && (file_name.Substring(0, 2).ToLower() ==\
    \ \"txt\" ||\n                          file_name.Substring(0, 2).ToLower() ==\
    \ \"exe\" ||\n                          file_name.Substring(0, 2).ToLower() ==\
    \ \"dll\");\n\n        if (valid)\n        {\n            return \"Yes\";\n  \
    \      }\n        else\n        {\n            return \"No\";\n        }", " \
    \       string digits = \"\";\n        for (int i = 0; i < file_name.Length; i++)\
    \ {\n            if (file_name[i] < '0' || file_name[i] > '9')\n             \
    \   return \"No\";\n            digits += file_name[i];\n        }\n        if\
    \ (digits.Length > 3)\n            return \"No\";\n        if (file_name.Length\
    \ != 2 || file_name[0] != char.ToUpper(file_name[0]))\n            return \"No\"\
    ;\n        if (file_name[1] != '.' || file_name[1].Length == 0)\n            return\
    \ \"No\";\n        if (file_name[1].Length > 3 || file_name[1] < 'a' || file_name[1]\
    \ > 'z')\n            return \"No\";\n        if (file_name[1] != \".exe\" &&\
    \ file_name[1] != \".dll\" && file_name[1] != \".txt\")\n            return \"\
    No\";\n        return \"Yes\";", "        string sub_string;\n        string sub_string2;\n\
    \        string sub_string3;\n        bool valid = false;\n        int num_1 =\
    \ 0;\n        int num_2 = 0;\n        int num_3 = 0;\n        string string_1;\n\
    \        string string_2;\n        string string_3;\n        string string_4;\n\
    \        string string_5;\n        int index;\n        int index_2;\n        int\
    \ index_3;\n        int index_4;\n        int index_5;\n        bool valid_1;\n\
    \        bool valid_2;\n        bool valid_3;\n        int num_valid;\n      \
    \  string string_valid;\n        string string_valid2;\n        string string_valid3;\n\
    \        int index_valid;\n        if (file_name.Length > 3) {\n            valid\
    \ = false;\n            Console.WriteLine(\"Invalid length. File name should contain\
    \ less than 3 digits.\");\n        }\n        if (file_name.IndexOf(\".\") ==\
    \ -1) {\n            valid = false;\n            Console.WriteLine(\"Invalid character.\
    \ File name should end with '.'.\");\n        }\n        sub_string = file_name.Substring(0,\
    \ file_name.LastIndexOf('.'));\n        string_1 = sub_string.Substring(0, 1);\n\
    \        string_2 = sub_string.Substring(1, 1);\n        string_3 = sub_string.Substring(2,\
    \ 1);\n        string_4 = sub_string.Substring(3, 1);\n        string_5 = sub_string.Substring(4,\
    \ 1);\n        string_valid = string_1 + \"txt\";\n        string_valid2 = string_2\
    \ + \"exe\";\n        string_valid3 = string_3 + \"dll\";\n        index = string_1.IndexOf(char.ToLowerInvariant('A'));\n\
    \        index_2 = string_2.IndexOf(char.ToLowerInvariant('A'));\n        index_3\
    \ = string_3.IndexOf(char.ToLowerInvariant('A'));\n        index_4 = string_4.IndexOf(char.ToLowerInvariant('A'));\n\
    \        index_5 = string_5.IndexOf(char.ToLowerInvariant('A'));\n        index_valid\
    \ = index >= 0;\n        index_valid2 = index_2 >= 0;\n        index_valid3 =\
    \ index_3 >= 0;\n        index_valid4 = index_4 >= 0;\n        index_valid5 =\
    \ index_5 >= 0;\n        if (index_valid) {\n            index_2 = string_2.IndexOf(char.ToLowerInvariant('z'));\n\
    \            index_3 = string_3.IndexOf(char.ToLowerInvariant('z'));\n       \
    \     index_4 = string_4.IndexOf(char.ToLowerInvariant('z'));\n            index_5\
    \ = string_5.IndexOf(char.ToLowerInvariant('z'));\n            index_valid2 =\
    \ index_2 >= 0;\n            index_valid3 = index_3 >= 0;\n            index_valid4\
    \ = index_4 >= 0;\n            index_valid5 = index_5 >= ", "        int dotIndex\
    \ = file_name.IndexOf('.');\n        if (dotIndex >= 0 && dotIndex < file_name.Length\
    \ - 1) {\n            if (file_name.Substring(0, dotIndex.ToString()) != string.Empty)\
    \ {\n                if (file_name[dotIndex.ToString()] != '0' && file_name[dotIndex.ToString()]\
    \ != '1' &&\n                file_name[dotIndex.ToString()] != '2' && file_name[dotIndex.ToString()]\
    \ != '3' &&\n                file_name[dotIndex.ToString()] != '4' && file_name[dotIndex.ToString()]\
    \ != '5' &&\n                file_name[dotIndex.ToString()] != '6' && file_name[dotIndex.ToString()]\
    \ != '7' &&\n                file_name[dotIndex.ToString()] != '8' && file_name[dotIndex.ToString()]\
    \ != '9') {\n                    return \"No\";\n                }\n         \
    \   }\n        }\n        string name = file_name;\n        int index = name.IndexOf(@\"\
    \\\");\n        if (index > 0) {\n            name = name.Substring(0, index);\n\
    \        }\n        if (name.Length == 0 || name == \"..\" || name == \".\" ||\
    \ name == \".\\\\\") {\n            return \"No\";\n        }\n        bool startWithLetter\
    \ = false;\n        bool containDot = false;\n        bool containTxt = false;\n\
    \        bool containExe = false;\n        bool containDll = false;\n        for\
    \ (int i = 0; i < name.Length; i++) {\n            char ch = name[i];\n      \
    \      if (ch == '.') {\n                containDot = true;\n            }\n \
    \           if (ch == '/') {\n                containTxt = true;\n           \
    \ }\n            if (ch == '/') {\n                containExe = true;\n      \
    \      }\n            if (ch == '/') {\n                containDll = true;\n \
    \           }\n            if (ch == 'a' || ch == 'A') {\n                startWithLetter\
    \ = true;\n            }\n        }\n        if (startWithLetter == false || containDot\
    \ == true || containTxt == true ||\n        containExe == true || containDll ==\
    \ true) {\n            return \"No\";\n        }\n        return \"Yes\";", " \
    \       // Extract the first three digits from the file's name.\n        // If\
    \ that fails, return \"No\".\n        if (file_name.Length > 3 || file_name.Contains('.')\
    \ == false || file_name.Substring(0, 1).IsLetter() == false || file_name.Substring(0,\
    \ 1).IsDigit() == false || file_name.Substring(0, 2).IsDigit() == false) {\n \
    \           return \"No\";\n        }\n\n        // Extract the first letter.\
    \ If that fails, return \"No\".\n        string first_letter = file_name.Substring(0,\
    \ 1);\n        if (first_letter.IsLetter() == false) {\n            return \"\
    No\";\n        }\n\n        // Extract the first two digits. If that fails, return\
    \ \"No\".\n        if (file_name.Substring(0, 2).IsDigit() == false) {\n     \
    \       return \"No\";\n        }\n\n        // Test to see if the file's name\
    \ contains 'txt', 'exe', or 'dll'.\n        // If it does, return 'Yes'.\n   \
    \     if (file_name.Substring(0, 4).Equals(\"txt\", StringComparison.OrdinalIgnoreCase)\
    \ || file_name.Substring(0, 5).Equals(\"exe\", StringComparison.OrdinalIgnoreCase)\
    \ || file_name.Substring(0, 6).Equals(\"dll\", StringComparison.OrdinalIgnoreCase))\
    \ {\n            return \"Yes\";\n        }\n\n        return \"No\";", "    \
    \    var digits = new Regex(@\"^[0-9]{1,3}$\");\n        var letters = new Regex(@\"\
    ^[a-zA-Z]\");\n        var dots = new Regex(@\"^\\.\");\n        var fileNameWithDot\
    \ = file_name.Substring(0, file_name.IndexOf(\".\")).ToLower();\n        var fileNameWithoutDot\
    \ = file_name.Substring(file_name.IndexOf(\".\")).ToLower();\n        var dotToTheLeft\
    \ = fileNameWithoutDot.Substring(0, 1);\n        if (dotToTheLeft == \".\") {\n\
    \            throw new ArgumentException(\"Wrong file's name format\");\n    \
    \    }\n        if (!digits.IsMatch(fileNameWithoutDot)) {\n            throw\
    \ new ArgumentException(\"Wrong file's name format\");\n        }\n        if\
    \ (!letters.IsMatch(fileNameWithoutDot)) {\n            throw new ArgumentException(\"\
    Wrong file's name format\");\n        }\n        if (fileNameWithoutDot != fileNameWithDot)\
    \ {\n            throw new ArgumentException(\"Wrong file's name format\");\n\
    \        }\n        if (dots.IsMatch(fileNameWithoutDot)) {\n            throw\
    \ new ArgumentException(\"Wrong file's name format\");\n        }\n        return\
    \ file_name;", "        // Write your logic here\n        int startIndex = 0;\n\
    \        int endIndex = 0;\n        bool dotFound = false;\n        bool letterFound\
    \ = false;\n\n        // 1. Find the first '.' in the file's name\n        while\
    \ ((startIndex = file_name.IndexOf('.', startIndex + 1)) != -1) {\n          \
    \  // 2. Check if the file's name contains exactly one '.'\n            if (file_name.Substring(startIndex\
    \ - 1, 1) == \"..\") {\n                // 3. Check if the substring before the\
    \ dot contains only '0'-'9'\n                while ((endIndex = file_name.IndexOf('0',\
    \ startIndex)) != null) {\n                    if (endIndex == startIndex) {\n\
    \                        // 4. If a '.' is found, make sure it does not contain\
    \ the string \n                        // '..'\n                        letterFound\
    \ = true;\n                    }\n                    startIndex = endIndex +\
    \ 1;\n                }\n                // 5. If a '.' is found, make sure it\
    \ starts with a letter from the \n                // latin alphapet ('a'-'z' and\
    \ 'A'-'Z')\n                if (letterFound) {\n                    startIndex\
    \ = file_name.IndexOf('A', startIndex) + 1;\n                }\n            }\n\
    \        }\n        return dotFound;", "        // Write your code here\n    \
    \    string pattern = @\"^([a-zA-Z0-9]{3})\\.([a-zA-Z0-9]{1,3})$\";\n        Regex\
    \ rgx = new Regex(pattern);\n        if (rgx.IsMatch(file_name)) {\n         \
    \   if (file_name.IndexOf('.') != -1 && \n                file_name.Substring(0,\
    \ 1) != string.Empty) {\n                if (file_name.Substring(0, 1).IndexOf('a')\
    \ == 0) {\n                    if (file_name.Substring(0, 1).IndexOf('A') == 0)\
    \ {\n                        return (\"Yes\");\n                    }\n      \
    \              else {\n                        return (\"No\");\n            \
    \        }\n                }\n                else {\n                    return\
    \ (\"No\");\n                }\n            }\n            else {\n          \
    \      return (\"No\");\n            }\n        }\n        else {\n          \
    \  return (\"No\");\n        }", "        string file_ext = Path.GetExtension(file_name);\n\
    \        if (file_ext == \".dll\" || file_ext == \".exe\") {\n            return\
    \ \"Yes\";\n        } else {\n            return \"No\";\n        }", "      \
    \  // Write your solution here\n        string[] parts = new string[file_name.Length];\n\
    \        parts.CopyTo(new char[] { }, 0);\n        if (parts.Length > 3) {\n \
    \           return \"No\";\n        }\n        if (parts[2] != '.') {\n      \
    \      return \"No\";\n        }\n        if (parts[0] == \"\") {\n          \
    \  return \"No\";\n        }\n        if (parts[0].ToLower() != \"a\" && parts[0].ToLower()\
    \ != \"b\" &&\n        parts[0].ToLower() != \"c\" && parts[0].ToLower() != \"\
    d\" &&\n        parts[0].ToLower() != \"e\" && parts[0].ToLower() != \"f\" &&\n\
    \        parts[0].ToLower() != \"g\" && parts[0].ToLower() != \"h\" &&\n     \
    \   parts[0].ToLower() != \"i\" && parts[0].ToLower() != \"j\" &&\n        parts[0].ToLower()\
    \ != \"k\" && parts[0].ToLower() != \"l\" &&\n        parts[0].ToLower() != \"\
    m\" && parts[0].ToLower() != \"n\" &&\n        parts[0].ToLower() != \"o\" &&\
    \ parts[0].ToLower() != \"p\" &&\n        parts[0].ToLower() != \"q\" && parts[0].ToLower()\
    \ != \"r\" &&\n        parts[0].ToLower() != \"s\" && parts[0].ToLower() != \"\
    t\" &&\n        parts[0].ToLower() != \"u\" && parts[0].ToLower() != \"v\" &&\n\
    \        parts[0].ToLower() != \"w\" && parts[0].ToLower() != \"x\" &&\n     \
    \   parts[0].ToLower() != \"y\" && parts[0].ToLower() != \"z\") {\n          \
    \  return \"No\";\n        }\n        foreach (string value in {\"txt\", \"exe\"\
    , \"dll\"}) {\n            if (parts[parts.Length-1] != value) {\n           \
    \     return \"No\";\n            }\n        }\n        return \"Yes\";", "  \
    \      int dotIndex = file_name.IndexOf('.');\n        if (dotIndex == -1) {\n\
    \            return \"No\";\n        }\n        string fileName = file_name.Substring(0,\
    \ dotIndex);\n        if (fileName.Length < 1) {\n            return \"No\";\n\
    \        }\n        string fileType = file_name.Substring(dotIndex + 1);\n   \
    \     if ((fileType.Length < 1) || (fileType.Length > 3)) {\n            return\
    \ \"No\";\n        }\n        char firstLetter = file_name[0];\n        if (!(firstLetter\
    \ == 'a' || firstLetter == 'b' || firstLetter == 'c' || firstLetter == 'd' ||\
    \ firstLetter == 'e' || firstLetter == 'f' || firstLetter == 'g' || firstLetter\
    \ == 'h' || firstLetter == 'i' || firstLetter == 'j' || firstLetter == 'k' ||\
    \ firstLetter == 'l' || firstLetter == 'm' || firstLetter == 'n' || firstLetter\
    \ == 'o' || firstLetter == 'p' || firstLetter == 'q' || firstLetter == 'r' ||\
    \ firstLetter == 's' || firstLetter == 't' || firstLetter == 'u' || firstLetter\
    \ == 'v' || firstLetter == 'w' || firstLetter == 'x' || firstLetter == 'y' ||\
    \ firstLetter == 'z')) {\n            return \"No\";\n        }\n        List<string>\
    \ allowedFileTypes = new List<string>() { \"txt\", \"exe\", \"dll\" };\n     \
    \   if (!allowedFileTypes.Contains(fileType)) {\n            return \"No\";\n\
    \        }\n        return \"Yes\";", "        if(!file_name.Contains('.'))\n\
    \        {\n            return \"No\";\n        }\n        if(!file_name.Contains('0'))\n\
    \        {\n            return \"No\";\n        }\n        if(file_name.IndexOf('.')\
    \ < 1)\n        {\n            return \"No\";\n        }\n        char ch = file_name[file_name.IndexOf('.')];\n\
    \        if(!(ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z'))\n        {\n\
    \            return \"No\";\n        }\n        if(file_name.Substring(0, file_name.IndexOf('.'))\
    \ != \"\")\n        {\n            return \"No\";\n        }\n        if(!new\
    \ string[] {\"txt\",\"exe\",\"dll\"}.Contains(file_name.Substring(1, file_name.Length\
    \ - 2)))\n        {\n            return \"No\";\n        }\n        return \"\
    Yes\";", "        int num_digits = file_name.Length;\n        if (num_digits >\
    \ 3 || file_name.Contains(\".\")) return false;\n        if (file_name.IndexOf(\"\
    .\") == -1) return false;\n        string first_char = file_name.Substring(0,\
    \ 1);\n        if (first_char.IndexOf(\"a\") == 0 || first_char.IndexOf(\"b\"\
    ) == 0 ||\n           first_char.IndexOf(\"c\") == 0 || first_char.IndexOf(\"\
    d\") == 0 ||\n           first_char.IndexOf(\"e\") == 0 || first_char.IndexOf(\"\
    f\") == 0 ||\n           first_char.IndexOf(\"g\") == 0 || first_char.IndexOf(\"\
    h\") == 0 ||\n           first_char.IndexOf(\"i\") == 0 || first_char.IndexOf(\"\
    j\") == 0 ||\n           first_char.IndexOf(\"k\") == 0 || first_char.IndexOf(\"\
    l\") == 0 ||\n           first_char.IndexOf(\"m\") == 0 || first_char.IndexOf(\"\
    n\") == 0 ||\n           first_char.IndexOf(\"o\") == 0 || first_char.IndexOf(\"\
    p\") == 0 ||\n           first_char.IndexOf(\"q\") == 0 || first_char.IndexOf(\"\
    r\") == 0 ||\n           first_char.IndexOf(\"s\") == 0 || first_char.IndexOf(\"\
    t\") == 0 ||\n           first_char.IndexOf(\"u\") == 0 || first_char.IndexOf(\"\
    v\") == 0 ||\n           first_char.IndexOf(\"w\") == 0 || first_char.IndexOf(\"\
    x\") == 0 ||\n           first_char.IndexOf(\"y\") == 0 || first_char.IndexOf(\"\
    z\") == 0) {\n            return false;\n        }\n        string after_dot =\
    \ file_name.Substring(1);\n        if (after_dot.IndexOf(\"txt\") == 0 || after_dot.IndexOf(\"\
    exe\") == 0 ||\n           after_dot.IndexOf(\"dll\") == 0) {\n            return\
    \ false;\n        }\n        return true;", "        var file_count = file_name.Count(c\
    \ => c != '_');\n        if (file_count > 3) {\n            return \"No\";\n \
    \       }\n        var dot_index = file_name.IndexOf('.');\n        if (dot_index\
    \ < 0) {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ dot_index).Trim().Length == 0) {\n            return \"No\";\n        }\n  \
    \      var dot = file_name.Substring(dot_index + 1, 2);\n        if (dot.ToUpper()\
    \ != \"TXT\" && dot.ToUpper() != \"EXE\" && dot.ToUpper() != \"DLL\") {\n    \
    \        return \"No\";\n        }\n        return \"Yes\";", "        //Implement\
    \ the code below\n\n        int dotpos = file_name.IndexOf('.');\n        int\
    \ name_length;\n        if (dotpos == -1) {\n            name_length = file_name.Length;\n\
    \        }\n        else {\n            name_length = dotpos - 2;\n        }\n\
    \        if (name_length < 3 || dotpos != 0) {\n            return \"No\";\n \
    \       }\n        else if (file_name.IndexOf(\".\") == -1) {\n            return\
    \ \"No\";\n        }\n        else {\n            string first_letter = file_name.Substring(0,\
    \ 1);\n            string extension = file_name.Substring(1, 1);\n           \
    \ string ext = extension;\n            if ((ext == \"txt\" || ext == \"exe\" ||\
    \ ext == \"dll\") &&\n                ((first_letter == \"a\" || first_letter\
    \ == \"A\") &&\n                (extension != \"dll\" && extension != \"exe\"\
    \ && extension != \"txt\")))\n            {\n                return \"No\";\n\
    \            }\n            else\n            {\n                return \"Yes\"\
    ;\n            }\n        }"]
stop_tokens:
- "\n    }\n"
