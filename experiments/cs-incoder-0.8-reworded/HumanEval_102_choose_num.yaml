name: HumanEval_102_choose_num
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // This function takes two positive numbers x and y and returns\
  \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
  \ If \n    // there's no such number, then the function should return -1.\n    //\
  \ For example:\n    // >>> ChooseNum((12L), (15L))\n    // (14L)\n    // >>> ChooseNum((13L),\
  \ (12L))\n    // (-1L)\n    public static long ChooseNum(long x, long y) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChooseNum((12L),\
  \ (15L)) == (14L));\n    Debug.Assert(ChooseNum((13L), (12L)) == (-1L));\n    Debug.Assert(ChooseNum((33L),\
  \ (12354L)) == (12354L));\n    Debug.Assert(ChooseNum((5234L), (5233L)) == (-1L));\n\
  \    Debug.Assert(ChooseNum((6L), (29L)) == (28L));\n    Debug.Assert(ChooseNum((27L),\
  \ (10L)) == (-1L));\n    Debug.Assert(ChooseNum((7L), (7L)) == (-1L));\n    Debug.Assert(ChooseNum((546L),\
  \ (546L)) == (546L));\n    }\n\n}\n"
completions: ["        long small, smallEven;\n        small = x;\n        smallEven\
    \ = small;\n        while (small < y) {\n            smallEven += small;\n   \
    \         small++;\n        }\n        long even = 0;\n        long odd = 0;\n\
    \        biggestEven = smallEven;\n        while ((small > 0) || (smallEven >\
    \ 0)) {\n            if (smallEven > 0 && small % 2 == 0) {\n                even++;\n\
    \                smallEven -= small;\n            }\n            if (small % 2\
    \ != 0) {\n                odd++;\n            }\n            small--;\n     \
    \       smallEven--;\n        }\n        if (odd > even) {\n            return\
    \ -1;\n        }\n        return biggestEven;", '        return (long) Math.Sqrt(Math.Pow((double)x
    - y, 2));', "        long min = Math.Min(x, y);\n        long max = Math.Max(x,\
    \ y);\n        if (min == max) {\n            if (x == y) return min;\n      \
    \      return -1;\n        }\n        if (min % 2 == 0) return ChooseNum(min,\
    \ max - 1);\n        return ChooseNum(min - 1, max);", "        long retVal =\
    \ -1L;\n        if (x >= y || x <= y) {\n            retVal = x;\n        }\n\
    \        else {\n            BigInteger a = new BigInteger(x);\n            BigInteger\
    \ b = new BigInteger(y);\n            BigInteger m = a.ModPow(b, (b.BitLength\
    \ / 32L));\n            BigInteger ret = new BigInteger(m.ToString());\n     \
    \       if (ret.BitLength < 64L) {\n                retVal = ret.ToString();\n\
    \            }\n        }\n        return retVal;", "        if (x >= y || (x\
    \ | y) < 0) {\n            throw new ArgumentException(\"The range must be positive\"\
    );\n        }\n        long max = (long) Math.Max(x, y);\n        long evens =\
    \ 0;\n        long odds = 0;\n        // Find the first even number between x\
    \ and y\n        while (true) {\n            if (max % 2 == 0) {\n           \
    \     evens = max;\n                break;\n            }\n            max = max\
    \ / 2;\n        }\n        // Find the first odd number between x and y\n    \
    \    while (true) {\n            if (max % 2 == 1) {\n                odds = max;\n\
    \                break;\n            }\n            max = max / 2;\n        }\n\
    \        if (evens < x || odds < y) {\n            return -1;\n        }\n   \
    \     if (evens > odds) {\n            return evens;\n        } else {\n     \
    \       return odds;\n        }", "        long a = Math.Abs(x - y);\n       \
    \ long b = x - y;\n        long c = y;\n        if (a > c) {\n            b =\
    \ b;\n            c = a;\n        }\n        long xx = x;\n        while (b !=\
    \ 0) {\n            xx = xx * 10;\n            b--;\n        }\n        xx +=\
    \ y;\n        while (xx > b) {\n            xx /= 10;\n        }\n        return\
    \ xx;", "        if (x > y) {\n            long m = (long)Math.Min(x, y);\n  \
    \          long n = (long)Math.Max(x, y);\n            if (n % 2 == 0) {\n   \
    \             if (m > n / 2) {\n                    return m;\n              \
    \  }\n                else {\n                    return n;\n                }\n\
    \            }\n            else {\n                return m;\n            }\n\
    \        }\n        else {\n            long m = (long)Math.Min(x, y);\n     \
    \       long n = (long)Math.Max(x, y);\n            if (n % 2 == 0) {\n      \
    \          if (m > n / 2) {\n                    return n;\n                }\n\
    \                else {\n                    return m;\n                }\n  \
    \          }\n            else {\n                return -1;\n            }\n\
    \        }", "        Debug.Assert(x >= 0L);\n        Debug.Assert(y >= 0L);\n\
    \        long x_even = (x / 2L) % 2L;\n        long x_odd = (x % 2L) / 2;\n  \
    \      long y_even = (y / 2L) % 2L;\n        long y_odd = (y % 2L) / 2;\n    \
    \    Debug.Assert(x_even <= y_even && x_odd <= y_odd);\n        if (x_even < y_even)\
    \ {\n            if (x_even > x_odd) {\n                if (y_even < y_odd) {\n\
    \                    if (x_even == y_even) {\n                        return x;\n\
    \                    }\n                    return -1;\n                }\n  \
    \              return -1;\n            }\n            return -1;\n        }\n\
    \        if (x_odd < y_odd) {\n            return -1;\n        }\n        long\
    \ max_even = x;\n        long max_odd = y;\n        if (x_even > y_even) {\n \
    \           max_even = y;\n            max_odd = x;\n        }\n        long min_even\
    \ = y;\n        long min_odd = x;\n        if (x_odd > y_odd) {\n            min_even\
    \ = x;\n            min_odd = y;\n        }\n        while (true) {\n        \
    \    Debug.Assert(max_even >= min_odd);\n            Debug.Assert(max_odd >= min_even);\n\
    \            if (max_even < max_odd) {\n                if (max_even > max_odd\
    \ && max_even == max_odd) {\n                    return max_even;\n          \
    \      }\n                return -1;\n            }\n            if (max_odd >\
    \ max_even && max_odd == max_even) {\n                return max_odd;\n      \
    \      }\n            Debug.Assert(max_even >= min_odd);\n            Debug.Assert(max_odd\
    \ >= min_even);\n            if (max_even < max_odd) {\n                if (max_even\
    \ > max_odd && max_even == max_odd) {\n                    return max_even;\n\
    \                }\n                return -1;\n            }\n            if\
    \ (max_odd > max_even && max_odd == max_even) {\n                return max_odd;\n\
    \            }\n            if (min_even > min_odd) {\n                if (min_even\
    \ < min_odd && min_even == min_odd) {\n                    return min_even;\n\
    \                }\n                return -1;\n            }\n            if\
    \ (min_odd > min_even && min_odd == min_even) {\n                return min_odd;\n\
    \            }\n            if (max_even < max_odd) {\n                long r\
    \ = max_even;\n                max_even = max_odd;\n                max_odd =\
    \ r;\n            }\n            if (max_odd > max_even) {\n                long\
    \ r = max_odd;\n                max_even = max_odd;\n                max_odd =\
    \ r;\n            }\n            if (min_even > min_odd", "        // We start\
    \ by finding which number in [x, y] has the most digits \n        // in the least\
    \ significant bit of the binary representation of it\n        var mostDigits =\
    \ FindMostDigits(x);\n        if (mostDigits < FindMostDigits(y)) {\n        \
    \    // x is larger\n            return x;\n        }\n        else {\n      \
    \      // y is larger\n            return y;\n        }", "        if (x > y)\n\
    \            return ChooseNum(y, x);\n\n        if (x % 2 == 0)\n            return\
    \ x;\n        else\n            return ChooseNum(x / 2, y);", "        if (x ==\
    \ 0 && y == 0) {\n            return -1;\n        }\n        long xRemY = x /\
    \ y;\n        long yRem = x % y;\n\n        // Only even numbers\n        if (x\
    \ % 2 == 0) {\n            long xModY = xRemY % y;\n            long evenNum =\
    \ x;\n            long evenRem = yRem;\n            while (true) {\n         \
    \       if (evenRem % 2 == 0) {\n                    evenRem--;\n            \
    \        evenNum++;\n                }\n                if (evenNum == y) {\n\
    \                    return evenNum;\n                }\n                if (evenNum\
    \ == xModY) {\n                    return evenNum;\n                }\n      \
    \      }\n        }\n\n        // Only odd numbers\n        if (y % 2 == 0) {\n\
    \            long yModX = yRem % x;\n            long evenNum = x;\n         \
    \   long evenRem = yRem;\n            while (true) {\n                if (evenRem\
    \ % 2 == 0) {\n                    evenRem--;\n                    evenNum++;\n\
    \                }\n                if (evenNum == y) {\n                    return\
    \ evenNum;\n                }\n                if (evenNum == yModX) {\n     \
    \               return evenNum;\n                }\n            }\n        }\n\
    \n        // No even numbers in range\n        if (x > y) {\n            return\
    \ -1;\n        }\n        long xModY = xRemY % y;\n        long evenNum = x;\n\
    \        long evenRem = yRem;\n        while (true) {\n            if (evenRem\
    \ % 2 == 0) {\n                evenRem--;\n                evenNum++;\n      \
    \      }\n            if (evenNum == y) {\n                return evenNum;\n \
    \           }\n            if (evenNum == xModY) {\n                return evenNum;\n\
    \            }\n        }", "        if ((x == -1L) || (y == -1L) || (x >= y))\
    \ {\n            return -1L;\n        }\n        var biggest = x;\n        for\
    \ (var n = x + y; n < biggest; n++) {\n            if (IsEven(n)) {\n        \
    \        if (n > biggest) {\n                    biggest = n;\n              \
    \  }\n            }\n        }\n        return biggest;", "        long result;\n\
    \        long maxEvenNum = x % 2 == 0 ? x : y + 1;\n        long minEvenNum =\
    \ y % 2 == 0 ? y : x + 1;\n        while ((maxEvenNum <= minEvenNum) && minEvenNum\
    \ < maxEvenNum) {\n            if (x % 2 == 0 || (x % 2 == 0 && y % 2 == 1)) {\n\
    \                maxEvenNum += 1;\n            } else {\n                minEvenNum\
    \ += 1;\n            }\n        }\n        if (minEvenNum == maxEvenNum) {\n \
    \           return minEvenNum;\n        } else {\n            result = minEvenNum;\n\
    \        }\n        long maxEvenNum1 = y % 2 == 0 ? y : x + 1;\n        long minEvenNum1\
    \ = x % 2 == 0 ? x : y + 1;\n        while ((maxEvenNum1 <= minEvenNum1) && minEvenNum1\
    \ < maxEvenNum1) {\n            if (y % 2 == 0 || (y % 2 == 0 && x % 2 == 1))\
    \ {\n                maxEvenNum1 += 1;\n            } else {\n               \
    \ minEvenNum1 += 1;\n            }\n        }\n        if (minEvenNum1 == maxEvenNum1)\
    \ {\n            return minEvenNum1;\n        } else {\n            result = minEvenNum1;\n\
    \        }\n        long maxEvenNum2 = y % 2 == 0 ? y : x + 1;\n        long minEvenNum2\
    \ = x % 2 == 0 ? y : x + 1;\n        while ((maxEvenNum2 <= minEvenNum2) && minEvenNum2\
    \ < maxEvenNum2) {\n            if (y % 2 == 0 || (y % 2 == 0 && x % 2 == 1))\
    \ {\n                maxEvenNum2 += 1;\n            } else {\n               \
    \ minEvenNum2 += 1;\n            }\n        }\n        if (minEvenNum2 == maxEvenNum2)\
    \ {\n            return minEvenNum2;\n        } else {\n            result = minEvenNum2;\n\
    \        }\n        long maxEvenNum3 = y % 2 == 0 ? y : x + 1;\n        long minEvenNum3\
    \ = x % 2 == 0 ? y : x + 1;\n        while ((maxEvenNum3 <= minEvenNum3) && minEvenNum3\
    \ < maxEvenNum3) {\n            if (y % 2 == 0 || (y % 2 == 0 && x % 2 == 1))\
    \ {\n                maxEvenNum3 += 1;\n            } else {\n               \
    \ minEvenNum3 += 1;\n            }\n        }\n        if (minEvenNum3 == maxEvenNum3)\
    \ {\n            return minEvenNum3;\n        } else {\n            result = minEvenNum3;\n\
    \        }\n        long maxEvenNum4 = y % 2 == 0 ? y : x + 1;\n        long minEvenNum4\
    \ = x % 2 == 0 ? y : x + 1;\n        while ((maxEvenNum4 <= minEvenNum4) && minEvenNum4\
    \ < maxEvenNum4) {\n            if (y % 2 == 0 || (y % 2 == 0 && x % 2 == ", '        return
    Convert.ToInt64((y / 2L) * x + (y % 2L));', '        return (long)(Math.Max(Math.Min((long)x,
    (long)y), 0L) + 1);', "        if (x == y || x == 0 || y == 0)\n            return\
    \ -1;\n        return ChooseNum(y - 1, x + (((y - 1) / 2) * 2));", "        //\
    \ Write your code here.\n        // If the given number is either 0 or less, return\
    \ -1.\n        if (x <= 0 || y <= 0)\n            return -1;\n\n        // If\
    \ the given numbers are equal, return 0.\n        if (x == y)\n            return\
    \ 0;\n\n        // Otherwise, use the following formula.\n        long result\
    \ = (x + y) / 2;\n        while (result % 2 == 0) {\n            if (result <\
    \ x)\n                return -1;\n            if (result > y)\n              \
    \  return -1;\n            result = (result + y) / 2;\n        }\n        return\
    \ result;", "        long even = x;\n        long odd = y;\n        while (even\
    \ > 0 && odd > 0) {\n            long m = Math.Min(even, odd);\n            if\
    \ (m % 2 == 0) {\n                even = even - m;\n            }\n          \
    \  else {\n                odd = odd - (m - 1);\n            }\n        }\n  \
    \      return even;", "        // Check if x or y is negative\n        if ((x\
    \ > 0L) && (y > 0L)) {\n            long res = x;\n            while (res <= y)\
    \ {\n                if ((res % 2) == 0L) {\n                    return res;\n\
    \                }\n                res++;\n            }\n            return\
    \ -1L;\n        } else {\n            return -1L;\n        }", "        if (x\
    \ >= y)\n            return -1;\n        int m = (int) Math.Sqrt(Math.Pow(x -\
    \ y, 2));\n        if (m >= 0)\n            return m;\n        m = Math.Ceiling(Math.Sqrt(Math.Pow(x\
    \ - y, 2)));\n        if (m > y)\n            return m;\n        return -1;",
  "        long z = (long) Math.Max(x, y);\n        long temp;\n        long even\
    \ = 1L;\n        bool evenInRange = false;\n        for (temp = z; temp < z; temp++)\
    \ {\n            if (even % 2 == 0 && temp % 2 == 0) {\n                if (temp\
    \ <= z) {\n                    evenInRange = true;\n                }\n      \
    \          else {\n                    evenInRange = false;\n                \
    \    break;\n                }\n            }\n            even = even * 2L;\n\
    \        }\n        if (evenInRange) {\n            return even;\n        }\n\
    \        return -1L;", "        long m = Math.Min(x, y);\n        long n = Math.Max(x,\
    \ y);\n        long odd = m % 2 == 1 ? 1 : -1;\n        long even = n % 2 == 1\
    \ ? 1 : -1;\n        long sum = odd + (even + odd) * m;\n        long min = 0;\n\
    \        long max = (long) Math.Sqrt(sum);\n        while (min<max) {\n      \
    \      long mid = (min + max) / 2;\n            long sum1 = mid % 2 == 1 ? 1 :\
    \ -1;\n            long sum2 = n % 2 == 1 ? 1 : -1;\n            long test = (sum1\
    \ + sum2) * mid;\n            if (test == sum) {\n                return mid;\n\
    \            } else if (test < sum) {\n                max = mid;\n          \
    \  } else {\n                min = mid;\n            }\n        }\n        return\
    \ -1L;", "        long result = 1;\n        long lx = x;\n        long ly = y;\n\
    \        \n        // Find largest even integers ly/lx are in [x, y]\n       \
    \ while(ly%2==0 && (lx%2==0 || lx==ly)) {\n            ly--;\n            lx--;\n\
    \        }\n        \n        // Now ly = x or lx = y and ly/lx are in range [x,\
    \ y]\n        // So lx must be smaller than ly and lx/ly must be in the range\
    \ [2, y+2]\n        while(ly < x) {\n            \n            long temp1 = lx/ly;\n\
    \            long temp2 = lx - temp1*ly;\n            \n            // If both\
    \ numbers are even\n            if(temp1%2==0 && temp2%2==0) {\n             \
    \   // Find the maximum\n                if(temp1 > temp2) {\n               \
    \     result = temp1;\n                } else {\n                    result =\
    \ temp2;\n                }\n                \n                // Now we know\
    \ the value of result and ly/lx is in range\n                // [2, y+2]\n   \
    \             while(ly < x) {\n                    temp1 = lx/ly;\n          \
    \          temp2 = lx - temp1*ly;\n                    if(temp1%2==0 && temp2%2==0)\
    \ {\n                        if(temp1 > temp2) {\n                           \
    \ result = temp1;\n                        } else {\n                        \
    \    result = temp2;\n                        }\n                        break;\n\
    \                    }\n                    ly++;\n                }\n       \
    \         break;\n            }\n            ly++;\n        }\n        \n    \
    \    if(result == 1) {\n            return -1;\n        }\n        \n        return\
    \ result;", "        long num = Math.Max(x, y);\n        while (true) {\n    \
    \        if (num % 2 == 0) {\n                return num;\n            }\n   \
    \         num = num / 2;\n        }", "        if (x >= y || (x == y)) {\n   \
    \         return -1;\n        }\n\n        // We will check all the even numbers\
    \ between x and y inclusively.\n        // If x is even, then we return x, otherwise\
    \ we start from y.\n        var evens = Enumerable.Range(x, y).Where(x => (x &\
    \ 1) == 0).ToArray();\n\n        // If x is even, then the number we are looking\
    \ for is even.\n        if (evens.Length == 1) {\n            // If x is not even,\
    \ then return -1\n            if (x != evens[0]) {\n                return -1;\n\
    \            }\n        }\n\n        // If x is odd, then we will have to start\
    \ from y.\n        if (evens.Length == 2) {\n            // If y is not even,\
    \ then return -1\n            if (y != evens[1]) {\n                return -1;\n\
    \            }\n        }\n\n        // If we are here, then we return evens[0]\
    \ or evens[1]\n        return evens.FirstOrDefault();", "        // This function\
    \ will return the biggest even number that is in [x, y]\n        // inclusive.\n\
    \        long max = Math.Max(x, y);\n        long min = Math.Min(x, y);\n    \
    \    long ans = -1;\n\n        // Go through the numbers from min to max and compute\
    \ the sum of the\n        // even numbers between min and max. Stop when sum is\
    \ even.\n        for (int i = min; i <= max; i++) {\n            long evenSum\
    \ = 0;\n            for (int j = min; j < i; j++)\n                evenSum +=\
    \ j % 2 == 0 ? j : 0;\n            if (evenSum == 0)\n                break;\n\
    \            else\n                ans = Math.Max(ans, i);\n        }\n      \
    \  return ans;", "        long num = x;\n        long limitY = y;\n        while\
    \ (true) {\n            while (num % 2 == 0) num = num / 2;\n            if (num\
    \ < limitY) break;\n            limitY = limitY - 1;\n            while (limitY\
    \ % 2 == 0) limitY = limitY / 2;\n            if (limitY < 0) return -1;\n   \
    \         num = num * 2;\n        }\n        return num;", '        return ((x
    % 2 == 0) && (y % 2 == 0) && !(x > y)) ? x : -1;', "        long num = x + y;\n\
    \        long even = 0;\n        while (num % 2 == 0) {\n            even = num;\n\
    \            num /= 2;\n        }\n        if (even > y) return even;\n      \
    \  return -1;", "        if ((x<0 && y >= 0) || (x > 0 && y < 0)) {\n        \
    \    return -1;\n        }\n        else {\n            long result = 0;\n   \
    \         while (x != 0) {\n                long temp1 = (long)(x / 2);\n    \
    \            long temp2 = (long)(y / 2);\n                if (temp1 % 2 == 0 &&\
    \ temp2 % 2 == 0) {\n                    result = temp1 + temp2;\n           \
    \         break;\n                }\n                else {\n                \
    \    x = temp1;\n                    y = temp2;\n                }\n         \
    \   }\n            return result;\n        }", "        long result = -1;\n  \
    \      if ((x + y) > (y << 1) * (y >> 1) * (y >> 2)) {\n            if (x % y\
    \ == 0) {\n                result = x;\n            }\n        }\n        if ((x\
    \ % y) == 0) {\n            result = x;\n        }\n        return result;", " \
    \       if (x == 0 || y == 0 || x == y || x == y - 1) {\n            return -1;\n\
    \        }\n\n        if (x % 2 == 0 && y % 2 == 0) {\n            return Math.Max(x,\
    \ y);\n        }\n\n        long num;\n        if (y % 2 == 0) {\n           \
    \ num = y;\n        } else {\n            num = x;\n        }\n\n        while\
    \ (x % 2 == 0 && num % 2 == 0) {\n            x /= 2;\n            num /= 2;\n\
    \        }\n\n        long minX = x, minY = y;\n\n        while (x % 2 == 0 &&\
    \ num % 2 == 0) {\n            if (x < minX) {\n                minX = x;\n  \
    \          }\n            x /= 2;\n            num /= 2;\n        }\n\n      \
    \  if (num < minY) {\n            return num;\n        } else {\n            return\
    \ minX;\n        }", "        return Math.Max(x, y)\n                + (Math.Min(Math.Max(x,\
    \ y), Math.Sqrt(y * y + x * x))\n                      - x * x) / 2;", "     \
    \   Debug.Assert(x >= 0L);\n        Debug.Assert(y > 0L);\n\n        long mid\
    \ = (x + y) / 2L;\n        long mid2 = mid * mid;\n        long mid3 = mid2 *\
    \ mid;\n        long mid4 = mid3 * mid;\n        long mid5 = mid4 * mid;\n   \
    \     long mid6 = mid5 * mid;\n        long mid7 = mid6 * mid;\n\n        long\
    \ top = (long) Math.Sqrt(mid7);\n        if (mid7 < mid) top = mid;\n        if\
    \ (mid7 < mid2) top = mid2;\n        if (mid7 < mid3) top = mid3;\n        if\
    \ (mid7 < mid4) top = mid4;\n        if (mid7 < mid5) top = mid5;\n        if\
    \ (mid7 < mid6) top = mid6;\n        if (mid7 < mid7) top = mid7;\n\n        if\
    \ (top - y != 0)\n            return -1;\n        if (x > y) \n            return\
    \ top;\n        return y;", "        long even = x | y & ~(x | y);\n        long\
    \ odd = x ^ y ^ even;\n        long even2 = x | y & ~(x | y);\n        long odd2\
    \ = x ^ y ^ even2;\n        long even3 = x | y & ~(x | y);\n        long odd3\
    \ = x ^ y ^ even3;\n        long even4 = x | y & ~(x | y);\n        long odd4\
    \ = x ^ y ^ even4;\n        long even5 = x | y & ~(x | y);\n        long odd5\
    \ = x ^ y ^ even5;\n        long even6 = x | y & ~(x | y);\n        long odd6\
    \ = x ^ y ^ even6;\n        long even7 = x | y & ~(x | y);\n        long odd7\
    \ = x ^ y ^ even7;\n        long even8 = x | y & ~(x | y);\n        long odd8\
    \ = x ^ y ^ even8;\n        long even9 = x | y & ~(x | y);\n        long odd9\
    \ = x ^ y ^ even9;\n        long even10 = x | y & ~(x | y);\n        long odd10\
    \ = x ^ y ^ even10;\n        long even11 = x | y & ~(x | y);\n        long odd11\
    \ = x ^ y ^ even11;\n        long even12 = x | y & ~(x | y);\n        long odd12\
    \ = x ^ y ^ even12;\n        long even13 = x | y & ~(x | y);\n        long odd13\
    \ = x ^ y ^ even13;\n        long even14 = x | y & ~(x | y);\n        long odd14\
    \ = x ^ y ^ even14;\n        long even15 = x | y & ~(x | y);\n        long odd15\
    \ = x ^ y ^ even15;\n        long even16 = x | y & ~(x | y);\n        long odd16\
    \ = x ^ y ^ even16;\n        long even17 = x | y & ~(x | y);\n        long odd17\
    \ = x ^ y ^ even17;\n        long even18 = x | y & ~(x | y);\n        long odd18\
    \ = x ^ y ^ even18;\n        long even19 = x | y & ~(x | y);\n        long odd19\
    \ = x ^ y ^ even19;\n        long even20 = x | y & ~(x | y);\n        long odd20\
    \ = x ^ y ^ even20;\n        long even21 = x | y & ~(x | y);", "        if (x\
    \ == 0 || y == 0)\n            return -1;\n        long minVal = Math.Min(x, y);\n\
    \        long maxVal = Math.Max(x, y);\n        long result = minVal;\n      \
    \  while (result < maxVal) {\n            long num = (result + minVal) / 2L;\n\
    \            if (Math.Abs(num % 2L) == 0)\n                return num;\n     \
    \       result = num;\n        }\n        return -1;", "        long result =\
    \ 0;\n        if (x > y) {\n            long temp = x;\n            x = y;\n \
    \           y = temp;\n        }\n        if (x < y) {\n            while (x >\
    \ y) {\n                long even = x % 2 == 0 ? x : x - 2;\n                if\
    \ (even > y) {\n                    return -1;\n                }\n          \
    \      result += even;\n                x /= 2;\n            }\n            while\
    \ (x < y) {\n                long odd = x % 2 == 0 ? x : x + 2;\n            \
    \    if (odd < y) {\n                    return -1;\n                }\n     \
    \           result += odd;\n                x /= 2;\n            }\n        }\n\
    \        bool negative = false;\n        if (x < 0) {\n            negative =\
    \ true;\n            x = -x;\n        }\n        long temp = 0;\n        while\
    \ (x > 0) {\n            temp = x % 2 == 0 ? x : x - 2;\n            if (temp\
    \ > y) {\n                return -1;\n            }\n            result += temp;\n\
    \            x /= 2;\n        }\n        result = negative ? -result : result;\n\
    \        temp = result;\n        while (y > 0) {\n            temp = y % 2 ==\
    \ 0 ? y : y - 2;\n            if (temp > result) {\n                return -1;\n\
    \            }\n            result -= temp;\n            y /= 2;\n        }\n\
    \        return result;", "        long ans = (long)0;\n        long biggerEven\
    \ = (long)0;\n        long smallerEven = (long)0;\n        long a = (long)0;\n\
    \        long b = (long)0;\n\n        do {\n            a = (long)x;\n       \
    \     b = (long)y;\n            if (a > b) {\n                smallerEven = b;\n\
    \                biggerEven = a;\n            }\n            else {\n        \
    \        biggerEven = a;\n                smallerEven = b;\n            }\n  \
    \          ans = biggerEven;\n            while (a > 0 && ans % 2 == 0) {\n  \
    \              ans = ans / 2;\n                a = a - 1;\n            }\n   \
    \         if (ans == (long)0) {\n                ans = (long)-1;\n           \
    \ }\n        } while ((long)ans != ((long)-1L) && (long)ans < biggerEven);\n\n\
    \        return (ans % 2 == 0) ? ans : -1;", "        long z = (long)x;\n    \
    \    long zz = (long)y;\n        if (x == y) \n            return (-1);\n    \
    \    if (z > zz) {\n            z = zz;\n            zz = x;\n        }\n    \
    \    long[] a = new long[] { \n            2, z, z + zz, z + zz * 2, z + zz *\
    \ 3, \n            z + zz * 4, z + zz * 5, z + zz * 6, z + zz * 7,\n         \
    \   z + zz * 8, z + zz * 9, z + zz * 10, z + zz * 11 };\n        int n = a.Length\
    \ - 1;\n        if (n < 0) \n            return (-1);\n        while (z < zz)\
    \ {\n            if (a[(n + 1) % (int)a.Length] == z)\n                return\
    \ (z);\n            z += a[n] % a[0];\n            n -= 1;\n        }\n      \
    \  return (-1);", "        long a = 0;\n        for (int i = x; i <= y; i++)\n\
    \            if (i % 2 == 0)\n                a = i;\n        return a;", "  \
    \      if ((x > 0) && (y > 0)) {\n            if (x % 2 == 0 && y % 2 == 0) {\n\
    \                long m = (x + y) / 2;\n                while (m % 2 == 0) {\n\
    \                    m = (x + y) / 2;\n                }\n                if (m\
    \ > x && m > y) {\n                    return m;\n                }\n        \
    \        else if (m < x && m < y) {\n                    return m;\n         \
    \       }\n            }\n            else {\n                long m = (x + y)\
    \ / 2;\n                while (m % 2 == 0) {\n                    m = (x + y)\
    \ / 2;\n                }\n                if (m > x && m > y) {\n           \
    \         return m;\n                }\n                else {\n             \
    \       return m;\n                }\n            }\n        }\n        else {\n\
    \            return -1;\n        }", "        // A trick: we can use the fact\
    \ that if y is odd, then y / 2 = x and\n        // y % 2 will result in 0. So\
    \ we can do this:\n        // if (y % 2 == 0) return (x / y) * y;\n        //\
    \ Otherwise, we need to check if the y value is even or odd, so we\n        //\
    \ check it first:\n        if (y % 2 == 0) {\n            // Even number, so just\
    \ do x % y\n            return ((x % y) / y) * y;\n        } else {\n        \
    \    // y is not even, so we need to check if the x value is even or odd\n   \
    \         // so we can use the same trick:\n            if (x % 2 == 0) {\n  \
    \              // x is even, so we simply return x % y:\n                return\
    \ x % y;\n            } else {\n                // x is not even, so we just return\
    \ (x/y)*y:\n                return ((x / y) * y);\n            }\n        }",
  "        if (x < 0 || y < 0)\n            return -1;\n        long m = x + (y -\
    \ x);\n        if (m / 2 != 0)\n            return m;\n        long m2 = m / 2;\n\
    \        if (m2 % 2 == 0)\n            return m2;\n        long m3 = m2 / 2;\n\
    \        if (m3 % 2 == 0)\n            return m3;\n        long m4 = m3 / 2;\n\
    \        if (m4 % 2 == 0)\n            return m4;\n        long m5 = m4 / 2;\n\
    \        if (m5 % 2 == 0)\n            return m5;\n        return -1;", "    \
    \    int z = (int)y;\n        int n = z / 2 + z;\n        while (z > 1 && n <\
    \ (int)x) {\n            z = (z % 2) * 2 - z;\n            n++;\n        }\n \
    \       if (n < x)\n            return -1;\n        else\n            return n;",
  "        // TODO: Complete this function.\n        long res = 0;\n        while\
    \ (x<y){\n            res +=  Math.Max(x-y, x+y); \n            x = x+y;\n   \
    \         y = res; \n        }\n        return Math.Max(x-y, x+y);", "       \
    \ long i = y;\n        long j = x;\n        long k = x;\n        long m = x;\n\
    \        long l = x;\n        long n = x;\n        while ((i <= j) && (j <= k)\
    \ && (k <= m) && (m <= l) && (l <= n)) {\n            if ((i % 2 == 0) && (j %\
    \ 2 == 0) && (k % 2 == 0) && (m % 2 == 0) && (l % 2 == 0) && (n % 2 == 0)) {\n\
    \                i = j;\n                j = k;\n                k = m;\n    \
    \            m = l;\n                l = n;\n                n = x;\n        \
    \    }\n            else {\n                if (i > j) i = j;\n              \
    \  if (j > k) j = k;\n                if (k > m) k = m;\n                if (m\
    \ > l) m = l;\n                if (l > n) l = n;\n                if (n > x) n\
    \ = x;\n            }\n        }\n        return i;", "        // Check for valid\
    \ input here...\n        long min = (x < y) ? x : y;\n        long max = (x >\
    \ y) ? x : y;\n\n        // Initialize a variable to hold the sum and a variable\
    \ to hold the number\n        // that we're comparing.\n        long sum = 0;\n\
    \        long even;\n\n        // Iterate through the range\n        for (long\
    \ i = min; i <= max; i++) {\n            // If the number is even\n          \
    \  if (i % 2 == 0) {\n                // If it is the current sum\n          \
    \      if (sum < i) {\n                    // Then record the current sum and\
    \ record it.\n                    sum = i;\n                    even = i;\n  \
    \              }\n                // Otherwise keep looking\n            } else\
    \ {\n                // If it is the current sum\n                if (sum > i)\
    \ {\n                    // Then record the current sum and record it.\n     \
    \               sum = i;\n                    even = i;\n                }\n \
    \               // Otherwise keep looking\n            }\n        }\n\n      \
    \  // Return the largest even number between min and max\n        if (even !=\
    \ -1 && sum >= even) {\n            return even;\n        } else {\n         \
    \   return -1;\n        }", "        var evens = Enumerable.Range(0, x).Where(x\
    \ => x % 2 == 0).ToArray();\n        var odd = Enumerable.Range(x, y - x + 1).Where(x\
    \ => x % 2 != 0).ToArray();\n        var res = Enumerable.Range(0, y).Select(y\
    \ => \n                Enumerable.Range(0, x).Select(x => \n                 \
    \   Enumerable.Range(evens, x).Aggregate(0, (acc, e) => acc * 2 + e)).Where(x\
    \ => x > y).Max()\n            ).Where(x => x >= x).Max();\n\n        return res\
    \ == -1 ? -1 : res;", "        long num = Math.Max(Math.Min(x, y), x - y);\n \
    \       return num;", "        long z = x + y;\n        if (z > 0) {\n       \
    \     z = x % z;\n            if (z == 0) {\n                z++;\n          \
    \  }\n            if (z % 2 == 0) {\n                return z;\n            }\n\
    \        }\n        return -1;", "        long min = Math.Min(x, y);\n       \
    \ long max = Math.Max(x, y);\n        long sum = 0;\n        for (long i = min;\
    \ i <= max; i++) {\n            sum += i;\n            long mod = sum % 2 == 0\
    \ ? i : -1;\n            if (mod != -1) sum -= mod;\n        }\n        return\
    \ sum;", "        // The answer is in the range [0, y / 2]\n        long range\
    \ = Math.Max(y, x / 2L);\n        long answer = 0;\n        \n        // Compute\
    \ nth power of 2\n        long power = 1;\n        for (int i = 0; i < range;\
    \ i++)\n            power *= 2L;\n        \n        // Multiply x by n until x\
    \ reaches power of 2\n        while (x % power != 0L) {\n            x = (long)\
    \ (x * power);\n            power *= 2L;\n        }\n        \n        // Now\
    \ find the biggest even integer number in range [0, power / 2]\n        // by\
    \ checking the least significant bit in x\n        for (int i = 0; i < range;\
    \ i++) {\n            if (x % 2L == 1L) {\n                answer = Math.Max(answer,\
    \ i);\n                break;\n            }\n            x = (long) (x * power);\n\
    \            power *= 2L;\n        }\n        \n        return answer;", "   \
    \     if ((x - y) > 0)\n            return -1;\n        if ((x - y) == 0)\n  \
    \          return x;\n\n        BigInteger bigNum = BigInteger.Zero;\n       \
    \ for (int i = x; i <= y; i++) {\n            if (BigInteger.Divide(i, 2) == BigInteger.Zero)\n\
    \                bigNum = i;\n        }\n        return bigNum.ToString().Length\
    \ > 1 ? bigNum.ToString() : -1;", "        if (x > y) {\n            long temp;\n\
    \            temp = x;\n            x = y;\n            y = temp;\n        }\n\
    \        long z = x - y;\n        long t = x / y;\n        long remainder = x\
    \ % y;\n        long s = 1;\n        if (remainder == 0) {\n            return\
    \ z;\n        }\n        if (z < 0 ) {\n            z = z * -1;\n        }\n \
    \       if (t < 1) {\n            s = z;\n            z = z - s;\n        }\n\
    \        else {\n            t = t * -1;\n        }\n        while (t < 1) {\n\
    \            t = t * -1;\n        }\n        s = z + s;\n        if (t < 1) {\n\
    \            return s * t;\n        }\n        else {\n            if (remainder\
    \ > 1) {\n                s = s * t;\n            }\n            else {\n    \
    \            s = z - s;\n            }\n            return s;\n        }", " \
    \       long num = 0;\n        long min = x - y;\n        if (min < 0) {\n   \
    \         min = x + y;\n        }\n        if (min % 2 == 1) {\n            num\
    \ = min;\n        }\n        else {\n            while (min % 2 != 0) {\n    \
    \            num = num * 10 + min;\n                min = min / 2;\n         \
    \   }\n            num = num * 10 + min;\n        }\n        return num;", " \
    \       long z = x;\n        while (z < y) {\n            z = z * 2;\n       \
    \ }\n        while (z <= y) {\n            long a = z;\n            z += 1;\n\
    \            if (z > y) {\n                z -= y;\n                z *= 2;\n\
    \                z += 1;\n            }\n            if (z >= a) {\n         \
    \       return a;\n            }\n        }\n        return -1;", "        long\
    \ min = Math.Min(x, y);\n        long max = Math.Max(x, y);\n        long range\
    \ = Math.Abs(max - min);\n\n        long result = range;\n\n        if (range\
    \ % 2 != 0)\n        {\n            result = -1;\n        }\n\n        return\
    \ result;", "        long z = x - y;\n        if (z < 0)\n            z = -z;\n\
    \        long ans = 0;\n        do {\n            ans = x + ans;\n           \
    \ if (ans > y)\n                break;\n            x = ans;\n        } while\
    \ (ans < y);\n        return ans;", "        if ((x < y) && (x >= (long)Math.Sqrt(x)))\n\
    \            return x;\n        if ((x > y) && (x <= (long)Math.Sqrt(x)))\n  \
    \          return y;\n        long max = 0;\n        for (long i = (long)Math.Sqrt(x);\
    \ i <= (long)Math.Sqrt(y); i++) {\n            long n = (long)Math.Floor(Math.Sqrt(i));\n\
    \            long sq = n * n;\n            if (x >= (long)Math.Sqrt(i)) {\n  \
    \              if ((x > sq) && (x < i)) {\n                    max = sq;\n   \
    \             }\n            }\n            else {\n                if ((x < sq)\
    \ && (x > i)) {\n                    max = sq;\n                }\n          \
    \  }\n        }\n        return max;", "        var x1 = x;\n        var y1 =\
    \ y;\n        if (x < y) { x = y; y1 = x; }\n        if (x > y) { x = y; y1 =\
    \ x; }\n        var maxnum = x + y;\n        if (maxnum > x1) maxnum = x1;\n \
    \       if (maxnum > y1) maxnum = y1;\n        if (maxnum == 0) return -1;\n \
    \       long res = maxnum;\n        int i = 0;\n        for (; (i * 2) < maxnum;\
    \ i++);\n        for (; (i * 2) < maxnum; i = i + 2);\n        if (i == maxnum)\
    \ res = maxnum + 1;\n        return res;", "        Debug.Assert(x != 0L);\n \
    \       Debug.Assert(y != 0L);\n        Debug.Assert(x <= y);\n        long a\
    \ = x + y;\n        if (a <= x) {\n            if (x % 2 == 0) return x;\n   \
    \         return -1;\n        }\n        if (y % 2 == 0) return y;\n        if\
    \ (a > y) a -= y;\n        while (a % 2 == 0) {\n            a /= 2;\n       \
    \ }\n        return a;", "        if (x < y) {\n            return -1;\n     \
    \   }\n        BigInteger a = BigInteger.DivRem(x, y, out long q, out long r);\n\
    \        if (r == 0) {\n            return q;\n        }\n        if (r % 2 ==\
    \ 0) {\n            return -1;\n        }\n        return q;", "        long xx\
    \ = x;\n        long yy = y;\n        long xc = xx + 1;\n        long yc = yy\
    \ + 1;\n        long odd = 1;\n        long even = 0;\n        while (xc < yc)\
    \ {\n            if (xc % 2 == 1 && yc % 2 == 0) {\n                odd *= xc;\n\
    \                xc += 1;\n                yc += 1;\n            } else if (xc\
    \ % 2 == 0 && yc % 2 == 1) {\n                even *= yc;\n                xc\
    \ += 1;\n                yc += 1;\n            } else {\n                odd =\
    \ odd + xc;\n                even = even + yc;\n                xc += 1;\n   \
    \             yc += 1;\n            }\n        }\n        if (odd > even) {\n\
    \            return odd;\n        } else if (even > odd) {\n            return\
    \ even;\n        } else {\n            return -1;\n        }", "        int min\
    \ = (x < y ? x : y);\n        int max = (x > y ? x : y);\n\n        if (min ==\
    \ max) return min;\n\n        long m = (long)Math.Ceiling((double)max/(double)min);\n\
    \        long n = min * m;\n\n        long maxEven = n;\n        while (n < max)\
    \ {\n            int even = (int)Math.Ceiling(n/(double)m);\n            if (even\
    \ % 2 == 0) {\n                maxEven = even;\n            }\n            n++;\n\
    \        }\n\n        return maxEven;", "        // The biggest even number that\
    \ is in [x, y] inclusive.\n        long min = (long)Math.Min(x, y);\n        long\
    \ max = (long)Math.Max(x, y);\n        long range = max - min;\n        long even\
    \ = min;\n        \n        // Make sure that the function is working with integers,\n\
    \        // without floating point numbers. \n        while (even % 2 == 0) {\n\
    \            even += 1;\n        }\n        \n        // Check all numbers in\
    \ the range. \n        while (true) {\n            if (even % 2 != 0) {\n    \
    \            return even;\n            }\n            long remainder = even %\
    \ range;\n            even = (long)Math.Floor(even / 2);\n            if (min\
    \ <= remainder) {\n                return -1;\n            }\n        }", "  \
    \      if (x < y)\n            Swap(x, y);\n        \n        long max = (long)(Math.Max(x,\
    \ y));\n        if (x % 2 == 0) {\n            if (y % 2 == 0) {\n           \
    \     if (max > x)\n                    max = x;\n            }\n            else\
    \ {\n                if (max < y)\n                    max = y;\n            }\n\
    \        }\n        else {\n            if (y % 2 == 0) {\n                if\
    \ (max < x)\n                    max = x;\n            }\n            else {\n\
    \                if (max > y)\n                    max = y;\n            }\n \
    \       }\n\n        return max;", "        // Create two lists X and Y. X will\
    \ contain the even numbers in the\n        // range [x, y] inclusive. Y will contain\
    \ the odd numbers in\n        // [x, y] inclusive.\n        var x = Enumerable.Range(x,\
    \ y).Where(n => ((n % 2) == 0))\n            .Select(n => (long)n).ToList();\n\
    \        var y = Enumerable.Range(y, x).Where(n => ((n % 2) == 1))\n         \
    \   .Select(n => (long)n).ToList();\n\n        // Sort the lists.\n        x.Sort();\n\
    \        y.Sort();\n\n        // Check whether the lists are identical.\n    \
    \    if (x.SequenceEqual(y)) {\n            return -1;\n        }\n\n        //\
    \ Check whether y has a greater even number than x.\n        if (x.ElementAt(0)\
    \ > y.ElementAt(0)) {\n            return x.ElementAt(0);\n        }\n\n     \
    \   // Check whether x has a greater odd number than y.\n        if (x.ElementAt(0)\
    \ > y.ElementAt(1)) {\n            return y.ElementAt(0);\n        }\n\n     \
    \   // If both lists have a greater even number than y, then return y.\n     \
    \   if (x.ElementAt(0) == y.ElementAt(0)) {\n            return y.ElementAt(1);\n\
    \        }\n\n        // If both lists have a greater odd number than y, then\
    \ return x.\n        if (x.ElementAt(0) == y.ElementAt(1)) {\n            return\
    \ x.ElementAt(1);\n        }\n\n        // Otherwise return -1. There is no such\
    \ number in the range.\n        return -1;", "        long even;\n        long\
    \ maxEven = x;\n        // While loop to find even numbers between x and y.\n\
    \        while (x <= y) {\n            // If x is even, x is even and we can skip\
    \ to the next odd number.\n            if (x % 2 == 0) {\n                even\
    \ = x;\n                x++;\n                // While loop to find odd numbers\
    \ between x and y.\n                while (x <= y) {\n                    // If\
    \ x is odd, then skip to next even number.\n                    if (x % 2 != 0)\
    \ {\n                        even = x;\n                        x++;\n       \
    \             }\n                    // If even number has found its max value\
    \ so far\n                    if (even > maxEven) {\n                        maxEven\
    \ = even;\n                    }\n                    x++;\n                }\n\
    \            }\n            x++;\n        }\n        return maxEven;", "     \
    \   if (x >= y || y <= 0)\n            return -1;\n\n        long xRev = x % y;\
    \ \n        if (xRev >= 0)\n            return y;\n\n        long yRev = y % x;\n\
    \        if (yRev >= 0)\n            return x;\n\n        long largest = xRev\
    \ + yRev;\n        if (xRev > yRev)\n            largest = largest % y;\n\n  \
    \      if (largest == 0 || largest == y)\n            return largest;\n\n    \
    \    if (largest == x)\n            return y;\n\n        if (xRev > 0)\n     \
    \       return ChooseNum(y, largest);\n        else\n            return ChooseNum(largest,\
    \ x); ", "        // Write your code in C# here\n        var result=1;\n     \
    \   var temp=2;\n        do{\n            temp=temp*2;\n            if (temp>y){\n\
    \                return result;\n            }\n            result=temp;\n   \
    \     }while (temp<y);\n        return -1;", "        if (x > y) x = y;\n    \
    \    if (x == 0 || y == 0) return -1;\n        long min = x - 1;\n        long\
    \ max = y + 1;\n        while (min < max) {\n            long middle = min + (max\
    \ - min) / 2;\n            if (middle % 2 == 0) {\n                max = middle;\n\
    \            } else {\n                min = middle;\n            }\n        }\n\
    \        return min;", "        long range = Math.Max(x, y);\n        long even\
    \ = 1;\n        long odd = 0;\n        long xEven = 1;\n        long xOdd = 0;\n\
    \        long yEven = 1;\n        long yOdd = 0;\n        while (even < range)\
    \ {\n            even *= 2;\n            xEven *= 2;\n            odd++;\n   \
    \     }\n        while (odd < range) {\n            odd *= 2;\n            xOdd\
    \ *= 2;\n            even++;\n        }\n        if (xEven == xOdd && yEven ==\
    \ yOdd) {\n            return -1;\n        }\n        while (even > range) {\n\
    \            even /= 2;\n            xEven *= 2;\n            odd++;\n       \
    \ }\n        while (odd > range) {\n            odd /= 2;\n            xOdd *=\
    \ 2;\n            even++;\n        }\n        while (xEven < range) {\n      \
    \      while (even > range) {\n                even /= 2;\n                xEven\
    \ *= 2;\n                odd++;\n            }\n            while (odd > range)\
    \ {\n                odd /= 2;\n                xOdd *= 2;\n                even++;\n\
    \            }\n            xEven *= 2;\n            even++;\n        }\n    \
    \    while (xOdd < range) {\n            while (even > range) {\n            \
    \    even /= 2;\n                xEven *= 2;\n                odd++;\n       \
    \     }\n            while (odd > range) {\n                odd /= 2;\n      \
    \          xOdd *= 2;\n                even++;\n            }\n            xOdd\
    \ *= 2;\n            odd++;\n        }\n        if (xEven == xOdd) {\n       \
    \     return xEven;\n        }\n        if (yEven == yOdd) {\n            return\
    \ yEven;\n        }\n        return -1;", "        if(x % 2 == 0 && y % 2 == 0)\n\
    \            return x + (long) Math.Floor(y);\n        \n        long num = -1;\n\
    \        for(int a = 0; a < x; a++)\n            if((y % 2 == 0) && (x % 2 !=\
    \ 0)) {\n                num += (long)Math.Floor(y);\n                y /= 2;\n\
    \            }\n        return num;", "        long z = x + y - 1L;\n        long\
    \ ans = long.MaxValue;\n        foreach (long i = 1L; z >> i >= 0; i *= 2L) {\n\
    \            ans = (ans >= (long)i ? ans : i);\n        }\n        return ans;",
  "        long num = (long)x;\n        long num2 = (long)y;\n        long min1 =\
    \ num - num2;\n        if (min1 < 0) {\n            return -1;\n        }\n  \
    \      long min2 = num + num2;\n        if (min2 > long.MaxValue) {\n        \
    \    return -1;\n        }\n        while (true) {\n            long sum = num\
    \ + num2;\n            if (sum > long.MaxValue) {\n                return -1;\n\
    \            }\n            if (sum == min1) {\n                return num;\n\
    \            }\n            if (sum == min2) {\n                return num2;\n\
    \            }\n            num = num2;\n            num2 = sum;\n        }",
  "        if (y <= 0 || x >= y) {\n            return -1;\n        }\n        long\
    \ xEven = x & ~(x >> 1);\n        long yEven = y & ~(y >> 1);\n        if (xEven\
    \ == yEven) {\n            return x + (x >> 1);\n        }\n        long biggest\
    \ = y;\n        for (long i = x << 1; i <= y; i++) {\n            if (IsEven(i))\
    \ {\n                long c = BiggestEven(i);\n                biggest = c > biggest\
    \ ? c : biggest;\n            }\n        }\n        return biggest;", "      \
    \  long a = ((long)x / 2);\n        long b = ((long)y / 2);\n        long c =\
    \ ((long)Math.Sqrt(a + b));\n\n        if ((int)a >= (int)b || (int)b == (int)c\
    \ || (int)a == (int)c) {\n            return c;\n        }\n        else {\n \
    \           return -1;\n        }", "        if (x >= y) return -1;\n        if\
    \ (x == 0 || y == 0 || x == y) return x;\n        if (x < 0) return -1;\n    \
    \    long even = x + (long)(y / x);\n        if (even < x) even += x;\n      \
    \  if (even > y) even -= y;\n        return even;", "        long maxX = (long)Math.Pow((double)x,\
    \ (double)2);\n        long maxY = (long)Math.Pow((double)y, (double)2);\n   \
    \     long maxEven = 0;\n        long maxOdd = 0;\n\n        // If x < y then\
    \ (x mod 2^2) must be >= 0\n        if (x <= y) {\n            maxX -= (long)Math.Pow((double)x,\
    \ (double)2) % 2;\n            maxY -= (long)Math.Pow((double)y, (double)2) %\
    \ 2;\n            maxEven = maxX;\n            maxOdd = maxY;\n        }\n   \
    \     else {\n            maxEven = maxY;\n            maxOdd = maxX;\n      \
    \  }\n\n        while (true) {\n            if (maxEven > maxOdd) {\n        \
    \        if (maxEven % 2 == 0) {\n                    return maxEven;\n      \
    \          }\n                else {\n                    maxEven--;\n       \
    \         }\n            }\n            else {\n                if (maxOdd % 2\
    \ == 0) {\n                    return maxOdd;\n                }\n           \
    \     else {\n                    maxOdd--;\n                }\n            }\n\
    \        }", "        long maxnum = -1;\n        long num = 1;\n        while\
    \ (x != 0 && y != 0) {\n            long tempnum = (x + y) /2; // the biggest\
    \ even number in the range\n            num++;\n            if (tempnum % 2 ==\
    \ 0) {\n                maxnum = tempnum;\n            }\n            x = x -\
    \ tempnum;\n            y = y - tempnum;\n        }\n        if (maxnum == -1)\
    \ {\n            return -1L;\n        }\n        return maxnum;", "        if\
    \ (x == 0 || y == 0) {\n            return -1L;\n        }\n        long maxEvenNumber\
    \ = 0;\n        long minNum = x;\n        long maxNum = y;\n        while (true)\
    \ {\n            long m = long.Parse(Math.Ceiling(Math.Floor((minNum + maxNum)\
    \ / 2.0)));\n            long mPlus1 = m + 1L;\n            if (mPlus1 % 2 ==\
    \ 0) {\n                maxEvenNumber = m;\n                minNum = mPlus1;\n\
    \                if (mPlus1 > maxNum) {\n                    maxNum = mPlus1;\n\
    \                }\n            } else {\n                if (mPlus1 < minNum)\
    \ {\n                    return -1L;\n                }\n                maxEvenNumber\
    \ = -1;\n                break;\n            }\n        }\n        return maxEvenNumber;",
  "        long even = x * 2;\n        long odd = (x + y) / 2;\n        long evenodd\
    \ = even + odd;\n\n        if (evenodd > x) {\n            return evenodd;\n \
    \       } else {\n            return -1;\n        }", '        return (long)(Math.Floor(y
    * (x + 1)) / x);', "        long even = x, yEven = y;\n\n        bool foundEven\
    \ = false;\n\n        while (!foundEven && (even < x)) {\n            even++;\n\
    \n            if (even % 2 == 0) {\n                foundEven = true;\n      \
    \      } else {\n                even = even + 1;\n            }\n        }\n\n\
    \        if (foundEven) {\n            while ((yEven < y) && (even > yEven)) {\n\
    \                yEven++;\n                even = even + 1;\n            }\n\n\
    \            if (even > y) {\n                return even;\n            }\n  \
    \      }\n\n        return -1;", "        long ans = 0;\n        ans = x < y ?\
    \ x : (x + 1);\n        long tmp = 0;\n        while (ans < y) {\n           \
    \ tmp = ans;\n            ans = (tmp + y) / 2;\n            if (ans == tmp) break;\n\
    \        }\n        if (ans != tmp) return -1;\n        else return ans;", " \
    \       long z = x + y;\n        z -= z;\n        while (z != 0) {\n         \
    \   z -= z & -z;\n        }\n        return z;", "        long retVal = -1;\n\
    \        if ((x > 0L) && (y > 0L)) {\n            if (x % 2L == 0L) {\n      \
    \          retVal = x + ((y % 2L + 1L) / 2L);\n            }\n            if (y\
    \ % 2L == 0L) {\n                retVal = x + ((y % 2L + 1L) / 2L);\n        \
    \    }\n        }\n        return retVal;", "        if (x < y) {\n          \
    \  long temp = x;\n            x = y;\n            y = temp;\n        }\n    \
    \    \n        long max_num = 0;\n        int num_count = 0;\n        \n     \
    \   long temp = 0;\n        int num_value = 0;\n        \n        while (y > x)\
    \ {\n            num_value = x;\n            temp = y;\n            x = y - num_value;\n\
    \            y = temp;\n            \n            num_count += 1;\n          \
    \  \n            if (num_value == 0) {\n                max_num = num_count;\n\
    \                break;\n            }\n            \n            if (num_value\
    \ % 2 == 1) {\n                temp = num_value - 1;\n                num_value\
    \ = x;\n                x = temp;\n                num_value = y;\n          \
    \      y = temp;\n                num_count += 1;\n            }\n        }\n\
    \        \n        if (num_value == 0) {\n            return -1;\n        }\n\
    \        \n        max_num += num_count;\n        return max_num;", "        long\
    \ z = (x + y) / 2;\n        if (x % 2 == 0 && y % 2 == 0) {\n            return\
    \ z;\n        }\n        if (z % 2 == 0) {\n            return z;\n        }\n\
    \        long a = x % 2 == 0 ? x : y;\n        long b = x % 2 == 0 ? y : x;\n\
    \        long c = a % 2 == 0 ? a : b;\n        long d = a % 2 == 0 ? b : a;\n\
    \        long e = (x + c) / 2;\n        if (e % 2 == 0) {\n            return\
    \ e;\n        }\n        if (d % 2 == 0) {\n            return d;\n        }\n\
    \        long f = x % 2 == 0 ? y : x;\n        long g = y % 2 == 0 ? x : y;\n\
    \        long h = f % 2 == 0 ? f : g;\n        long i = (f + g) / 2;\n       \
    \ if (i % 2 == 0) {\n            return i;\n        }\n        if ((h + i) % 2\
    \ == 0) {\n            return (h + i);\n        }\n        return -1;", "    \
    \    long a = Math.Max(x, y);\n        long b = Math.Min(x, y);\n        long\
    \ c;\n        do {\n            a = a / 2;\n            b = b / 2;\n         \
    \   c = a + b;\n        } while (c % 2 == 0);\n        return c;", "        long\
    \ i = x, j = y;\n        while (i <= j) {\n            long p = i;\n         \
    \   if (p == 0)\n                return -1;\n            i = p * 2 + 1;\n    \
    \        j = p * 2 + 2;\n        }\n        return i;", "        long m = Math.Min(x,\
    \ y);\n        long n = Math.Max(x, y);\n        if (m == n || x == m && y ==\
    \ m) {\n            return m;\n        }\n        long temp;\n        do {\n \
    \           temp = m % n;\n            m = n;\n            n = temp;\n       \
    \ } while (n > m && m > 0);\n        if (temp == 1) {\n            return m;\n\
    \        } else {\n            return -1;\n        }", "        if (x == 0 ||\
    \ y == 0 || x == y || (x <= 0 && y > 0))\n            return -1;\n        else\n\
    \        {\n            long[] arr = new long[x];\n            for (int i = 1;\
    \ i < x; i++)\n            {\n                arr[i] = i;\n            }\n   \
    \         arr[0] = x;\n            int count = 0;\n            while (arr[count]\
    \ < y)\n            {\n                if (arr[(arr[count] - 1)]%2 == 0)\n   \
    \                 arr[count] = arr[count] - 1;\n                else\n       \
    \             count++;\n            }\n            long result = arr[count];\n\
    \            for (int i = 1; i < count; i++)\n            {\n                if\
    \ (arr[i] > y)\n                {\n                    result = result - 1;\n\
    \                    break;\n                }\n            }\n            return\
    \ result;\n        }", "        long max = -1;\n        int n = 0;\n        for\
    \ (long i = x; i <= y; i++) if (i % 2 == 0) {\n            n = i;\n          \
    \  max = n;\n        } else if (n > max) {\n            max = n;\n        }\n\
    \        return max;", "        long result = -1;\n        long[] evenNumbers\
    \ = new long[4];\n        for(long i = 2; i <= (y+2); i++) {\n            if(\
    \ (i * i) <= (x+y)) {\n                evenNumbers[0] = i;\n                evenNumbers[1]\
    \ = (i + 1);\n                evenNumbers[2] = (i * i);\n                evenNumbers[3]\
    \ = ((x * x) + (y * y));\n            }\n        }\n        if(evenNumbers.Length\
    \ == 0) {\n            return result;\n        }\n        foreach(var ev in evenNumbers)\
    \ {\n            if(ev % 2 == 0) {\n                result = ev;\n           \
    \ }\n        }\n        return result;", "        long result = -1;\n        long\
    \ xMinusY = x - y;\n        long evenNum = 0;\n        bool hasEvenNumber = false;\n\
    \        for (long i = x; i <= y; i++) {\n            long num = i * i;\n    \
    \        bool isEven = true;\n            foreach (long num2 in num.Reverse())\
    \ {\n                if (num2 != 0) {\n                    isEven = !isEven;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isEven) {\n                evenNum = num;\n                hasEvenNumber =\
    \ true;\n            }\n        }\n        if (hasEvenNumber) {\n            result\
    \ = evenNum;\n        } else {\n            if (xMinusY == 0) {\n            \
    \    result = x;\n            }\n        }\n        return result;", "       \
    \ long z = 0;\n        long m = 1;\n        while (x > 0) {\n            z = z\
    \ * m + (x % 2);\n            m = m << 1;\n            x = x / 2;\n        }\n\
    \        while (y > 0) {\n            z = z * m + (y % 2);\n            m = m\
    \ << 1;\n            y = y / 2;\n        }\n        return z < 0 ? -1 : z;", " \
    \       long xy = x * y;\n        long ans = 0;\n        for (long i = 2; i <=\
    \ xy; i *= 2)\n            if (xy % i == 0)\n                ans = i;\n      \
    \  return ans == 0 ? -1 : ans;", "        long min = Math.Min(x, y);\n       \
    \ long max = Math.Max(x, y);\n        long result = -1;\n\n        double xd =\
    \ x - min;\n        double yd = y - max;\n\n        double xm = Math.Floor(xd);\n\
    \        double ym = Math.Floor(yd);\n\n        double xM = xd - xm;\n       \
    \ double yM = yd - ym;\n\n        double xM2 = Math.Pow(xM, 2);\n        double\
    \ yM2 = Math.Pow(yM, 2);\n\n        double xM3 = Math.Pow(xM, 3);\n        double\
    \ yM3 = Math.Pow(yM, 3);\n\n        double xM4 = Math.Pow(xM, 4);\n        double\
    \ yM4 = Math.Pow(yM, 4);\n\n        double xM5 = Math.Pow(xM, 5);\n        double\
    \ yM5 = Math.Pow(yM, 5);\n\n        double a1 = xM + yM;\n        double a2 =\
    \ yM + xM;\n        double a3 = xM - yM;\n        double a4 = yM - xM;\n\n   \
    \     double a5 = xM * yM;\n        double a6 = yM * xM;\n\n        double a =\
    \ (long) Math.Pow(xM2, 5) + Math.Pow(yM2, 5);\n        double b = (long) Math.Pow(xM3,\
    \ 5) + Math.Pow(yM3, 5);\n        double c = (long) Math.Pow(xM4, 5) + Math.Pow(yM4,\
    \ 5);\n        double d = (long) Math.Pow(xM5, 5) + Math.Pow(yM5, 5);\n\n    \
    \    double e = (a1 + a2 + a3 + a4 + a5 + a6 + b + c + d + e) / 10;\n\n      \
    \  if (e <= 0) {\n            result = -1;\n        } else if (e == 1) {\n   \
    \         result = (long)Math.Ceiling(x);\n        } else {\n            result\
    \ = (long)Math.Ceiling(x * (long)Math.Pow(e, (double)2));\n        }\n\n     \
    \   return result;", "        if ((x < 0L) || (y < 0L)) {\n            return\
    \ -1L;\n        }\n        long num = 0L;\n        while (num <= y) {\n      \
    \      long xy = x * y;\n            if (xy % 2L != 0L) {\n                long\
    \ num = xy;\n            } else {\n                long num = x;\n           \
    \ }\n            x = num;\n        }\n        return x;", "        var maxEven\
    \ = -1;\n        for (var n = x; n <= y; n++) {\n            var even = n%2 ==\
    \ 0 ? n : -1;\n            if (even > maxEven) {\n                maxEven = even;\n\
    \            }\n        }\n        return maxEven;", "        var evens = (long)Math.Floor(x\
    \ / 2);\n        var remainder = (long)x % 2;\n        if (remainder == 0) {\n\
    \            return evens;\n        }\n        else {\n            return ChooseNum(evens,\
    \ y);\n        }", "        int yy = y;\n        while (yy > x - 1) {\n      \
    \      yy /= 2;\n        }\n        int xx = x;\n        while (xx > y - 1) {\n\
    \            xx /= 2;\n        }\n        if (yy == 0 && xx == 0) {\n        \
    \    return -1;\n        } else if (yy == 0 || xx == 0) {\n            return\
    \ yy == 0 ? -1 : yy;\n        } else {\n            return yy + xx;\n        }",
  "        // Initialize a variable to hold the biggest even number that is in\n \
    \       // the range. Since the range is [x, y], the biggest even number that\n\
    \        // is bigger than x and smaller than y is [x, y] inclusive.\n       \
    \ long maxNumber = x;\n        \n        // Check to see if the number in the\
    \ range [x, y] contains even\n        // numbers. If it does, then the biggest\
    \ even number must be x or\n        // y, and we can stop the loop.\n        if\
    \ (x > y) {\n            // If x > y, then we're looping over the range [x, y],\
    \ and we\n            // want to keep looping until we find the biggest even number\
    \ \n            // that is greater than x and smaller than y.\n            while\
    \ (maxNumber < y) {\n                // Increment maxNumber by the even number\
    \ that is in the range\n                // [x, y], and check to see if it divides\
    \ evenly into x.\n                if (maxNumber % x == 0) {\n                \
    \    maxNumber = maxNumber + x;\n                    break;\n                }\n\
    \                maxNumber = maxNumber + y;\n            }\n        }\n      \
    \  else if (x < y) {\n            // If x < y, then we're looping over the range\
    \ [x, y], and we\n            // want to keep looping until we find the biggest\
    \ even number \n            // that is less than x and greater than y.\n     \
    \       while (maxNumber > y) {\n                // Increment maxNumber by the\
    \ even number that is in the range\n                // [x, y], and check to see\
    \ if it divides evenly into y.\n                if (maxNumber % y == 0) {\n  \
    \                  maxNumber = maxNumber + y;\n                    break;\n  \
    \              }\n                maxNumber = maxNumber + x;\n            }\n\
    \        }\n        else {\n            // If x == y, then we've found the biggest\
    \ even number that is\n            // bigger than x and smaller than y, and we\
    \ return it.\n            maxNumber = x + y;\n        }\n        \n        return\
    \ maxNumber;", "        long z = 0;\n        long z2 = x;\n        long z3 = y;\n\
    \        long z4 = 0;\n        long z5 = 0;\n        long z6 = 0;\n        long\
    \ z7 = 0;\n        long z8 = 0;\n        long z9 = 0;\n        long z10 = 0;\n\
    \        long z11 = 0;\n        long z12 = 0;\n        long z13 = 0;\n       \
    \ long z14 = 0;\n        long z15 = 0;\n        long z16 = 0;\n        long z17\
    \ = 0;\n        long z18 = 0;\n        long z19 = 0;\n        long z20 = 0;\n\
    \        long z21 = 0;\n        long z22 = 0;\n        long z23 = 0;\n       \
    \ long z24 = 0;\n        long z25 = 0;\n        long z26 = 0;\n        long z27\
    \ = 0;\n        long z28 = 0;\n        long z29 = 0;\n        long z30 = 0;\n\
    \        long z31 = 0;\n        long z32 = 0;\n        long z33 = 0;\n       \
    \ long z34 = 0;\n        long z35 = 0;\n        long z36 = 0;\n        long z37\
    \ = 0;\n        long z38 = 0;\n        long z39 = 0;\n        long z40 = 0;\n\
    \        long z41 = 0;\n        long z42 = 0;\n        long z43 = 0;\n       \
    \ long z44 = 0;\n        long z45 = 0;\n        long z46 = 0;\n        long z47\
    \ = 0;\n        long z48 = 0;\n        long z49 = 0;\n        long z50 = 0;\n\
    \        long z51 = 0;\n        long z52 = 0;\n        long z53 = 0;\n       \
    \ long z54 = 0;\n        long z55 = 0;\n        long z56 = 0;\n        long z57\
    \ = 0;\n        long z58 = 0;\n        long z59 = 0;\n        long z60 = 0;\n\
    \        long z61 = 0;\n        long z62 = 0;\n        long z63 = 0;\n       \
    \ long z64 = 0;\n        long z65 = 0;\n        long z66 = 0;\n        long z67\
    \ = 0;\n        long z68 = 0;\n        long z69 = 0;\n        long z70 = 0;\n\
    \        long z71 = 0;\n        long z72 = 0;\n        long z73 = 0;\n       \
    \ long z74 = 0;\n        long z75 = 0;\n        long z76 = 0;\n        long z77\
    \ = 0;\n        long z78 = 0;\n        long z79 = 0;\n        long z80 = 0;\n\
    \        long z81 = 0;\n        long z82 = 0;\n        long z83 = 0;\n       \
    \ long z84 = 0;\n        long z85 = 0;\n        long z86 = 0;", "        Debug.Assert(x\
    \ >= 0 && x <= y);\n        if ((x | y) < 0)\n            return -1;\n       \
    \ long lower = x | 1;\n        long upper = y | 1;\n        long diff = upper\
    \ - lower;\n        while (diff > 0 && upper > lower) {\n            upper--;\n\
    \            diff >>= 1;\n        }\n        while (diff > 0 && lower > upper)\
    \ {\n            lower--;\n            diff >>= 1;\n        }\n        while (diff\
    \ > 0) {\n            long mid = (lower + upper) >> 1;\n            if (mid %\
    \ 2 != 0)\n                lower = mid;\n            else\n                upper\
    \ = mid;\n            diff >>= 1;\n        }\n        return lower;", "      \
    \  if (x % 2 == 0) {\n            if (y % 2 == 0) {\n                return x;\n\
    \            }\n            else\n                return -1;\n        }\n    \
    \    long retNum = 0;\n        for (int i = 1; i < y; i++) {\n            retNum\
    \ += x % i;\n            if (retNum > x)\n                return -1;\n       \
    \ }\n        return retNum;", "        if ((x - y) < 0) {\n            return\
    \ -1;\n        }\n        if ((x + y - 2) > long.MaxValue) {\n            return\
    \ -1;\n        }\n        long[] a = new long[4];\n        a[0] = x;\n       \
    \ a[1] = y;\n        a[2] = (x + y - 2);\n        a[3] = (x + y - 1);\n      \
    \  Array.Sort(a);\n        long maxEven = -1;\n        long minEven = 1;\n   \
    \     if (x > y) {\n            minEven = x - y;\n            maxEven = x + y\
    \ - 2;\n        }\n        else {\n            minEven = y - x;\n            maxEven\
    \ = y + x - 1;\n        }\n        long result = 0;\n        for (int i = 3; i\
    \ <= 3; i++) {\n            if (a[i]%2 == 0) {\n                result = a[i]/2;\n\
    \                break;\n            }\n        }\n        if (result < 0) {\n\
    \            return -1;\n        }\n        return maxEven + minEven + result;",
  "        long evenRangeStart = (x + y) / 2;\n        long evenRangeEnd = (x + y)\
    \ / 2 - (x & y);\n        bool evenRangeIncludesAll = ((x + y) & 1) == 0;\n  \
    \      long result = evenRangeStart;\n        bool nextEven = true;\n        do\
    \ {\n            if (nextEven) {\n                if (result < evenRangeStart)\
    \ {\n                    result += evenRangeStart;\n                } else if\
    \ (result < evenRangeEnd) {\n                    result += evenRangeEnd;\n   \
    \             }\n            } else {\n                if (result > evenRangeEnd)\
    \ {\n                    result -= evenRangeEnd;\n                } else if (result\
    \ > evenRangeStart) {\n                    result -= evenRangeStart;\n       \
    \         }\n            }\n            nextEven = !nextEven;\n        } while\
    \ (evenRangeIncludesAll && (result < 0 || result > y));\n        return result\
    \ < 0 ? -1 : result;", "        if (x >= y) {\n            throw new ArgumentOutOfRangeException(\n\
    \                \"The x must be greater than or equal to y.\");\n        }\n\n\
    \        long result = 0;\n        long divisor = 2;\n        while (result <=\
    \ y && divisor <= y) {\n            if ((result + divisor) > y) {\n          \
    \      divisor = divisor * 2;\n                continue;\n            }\n\n  \
    \          if ((result + divisor) >= y) {\n                result = result + divisor;\n\
    \            }\n\n            divisor = divisor + 1;\n        }\n\n        if\
    \ (result > y) {\n            result = -1;\n        }\n\n        return result;",
  "        if (x < y) {\n            long temp = x;\n            x = y;\n        \
    \    y = temp;\n        }\n        long xy = x * y;\n        long xysq = x * xy\
    \ + y * y;\n        long sq = x * x + y * y;\n        if (xy % 2 == 0) return\
    \ xy;\n        while (xysq != sq) {\n            long n1 = xy;\n            long\
    \ n2 = xy;\n            long n3 = xy;\n            n1 += y;\n            n2 +=\
    \ x;\n            n3 += y;\n            long n4 = xy;\n            long n5 = xy;\n\
    \            n4 += x;\n            n5 += y;\n            xy = n1 * n5 - n2 * n4\
    \ + n3 * n3 + n4 * n2 - n1 * n4;\n            xysq = xy;\n            sq = sq\
    \ * sq;\n        }\n        return xy;", "        if (x >= y) {\n            return\
    \ ChooseNum(y, x);\n        }\n        long sum = x;\n        long mod = y;\n\
    \        while (true) {\n            int even = 1;\n            long remainder\
    \ = sum;\n            while (remainder >= mod) {\n                even *= 2;\n\
    \                remainder -= mod;\n            }\n            if (even == 0)\
    \ {\n                return sum;\n            }\n            mod += 1;\n     \
    \       sum += mod;\n        }", "        if(x < y && x > 0)\n            return\
    \ x;\n        if(x < 0 && y > 0)\n            return -1;\n        if(y < 0 &&\
    \ x > 0)\n            return -1;\n        if(y == 0)\n            return -1L;\n\
    \n        long xmod = x / y;\n        long ymod = y % y;\n        long result\
    \ = 0;\n        long temp;\n        for(int i = 0; i < ymod; i++) {\n        \
    \    temp = x * xmod;\n            if(temp > result)\n                result =\
    \ temp;\n            xmod *= x;\n            xmod %= y;\n        }\n        return\
    \ result;", "        // Your code goes here\n        bool evenNum = false;\n \
    \       long biggest = 0;\n        long temp = 0;\n        int num = (int)Math.Sqrt((x\
    \ - y));\n        while(biggest < num) {\n            temp = x;\n            x\
    \ = y;\n            y = temp;\n            int num1 = (int)Math.Sqrt((x - y));\n\
    \            for(int i = 0; i <= num1; i++) {\n                if ( x % 2 == 0\
    \ && y % 2 == 0 ) {\n                    if ( x == y )\n                     \
    \   return -1;\n                    else {\n                        evenNum =\
    \ true;\n                        biggest = x;\n                        break;\n\
    \                    }\n                }\n                x = x + 1;\n      \
    \          y = y + 1;\n            }\n            if(biggest == num) {\n     \
    \           return -1;\n            }\n        }\n        if(evenNum == false)\n\
    \            return -1;\n        return biggest;", "        long min = (x < y\
    \ ? x : y);\n        long max = (x < y ? y : x);\n        long ans = -1;\n   \
    \     while(min < max) {\n            ans = min;\n            int i = min / 2;\n\
    \            while(i != 0) {\n                i = i / 2;\n                ans\
    \ = 2 * ans + 1;\n            }\n            min = max;\n            max = max\
    \ * 2;\n        }\n        return ans;", "        long max_num = 0;\n\n      \
    \  // x is less than y\n        if (x < y) {\n            long tmp = x;\n    \
    \        x = y;\n            y = tmp;\n        }\n\n        // x is greater than\
    \ or equal to y\n        if (x > y) {\n            max_num = y;\n            for\
    \ (long i = y; i <= x; i += 2) {\n                if (i > 0) {\n             \
    \       max_num = i;\n                    break;\n                }\n        \
    \    }\n        } else {\n            max_num = x;\n            for (long i =\
    \ x; i >= y; i -= 2) {\n                if (i < 0) {\n                    max_num\
    \ = i;\n                    break;\n                }\n            }\n       \
    \ }\n\n        return max_num;", "        long low = x;\n        long high = y;\n\
    \        while (low + 1 < high) {\n            long mid = (low + high) / 2;\n\
    \            if (mid % 2 == 0) {\n                low = mid;\n            } else\
    \ {\n                high = mid;\n            }\n        }\n        if (low ==\
    \ x)\n            return high;\n        if (high == y)\n            return low;\n\
    \        return -1;", "        long even = 0;\n        // Only even numbers can\
    \ be the biggest\n        long min = Math.Min(x, y);\n        long max = Math.Max(x,\
    \ y);\n        do {\n            even++;\n            min = Math.Min(min, max\
    \ - even);\n            max = Math.Max(max, min - even);\n        } while (Math.Abs(min\
    \ - max) > 1);\n        if (even == 0)\n            return -1;\n        return\
    \ even;", "        // This function should return the biggest even integer number\
    \ that is in\n        // the range [x, y] inclusive. If there's no such number,\
    \ then the function\n        // should return -1.\n\n        // Code here\n  \
    \      if (x >= y)\n            return -1;\n        long ans = 1;\n        long\
    \ d = y - x;\n        while (d > 1)\n        {\n            if (d % 2 == 0)\n\
    \            {\n                ans = ans * x + ((x / d) * d);\n            }\n\
    \            d /= 2;\n        }\n        return ans;", "        double xRange\
    \ = y - x;\n        if (Math.Abs(xRange) < double.Epsilon &&\n            (Math.Abs(y)\
    \ - Math.Abs(x)) < double.Epsilon) {\n            return x;\n        }\n     \
    \   // We will always return one even number because we don't want\n        //\
    \ to return the number itself as an even number.\n        // This also takes care\
    \ of situations such as x == y.\n        if (Math.Abs(xRange) == double.Epsilon)\
    \ {\n            return Math.Max(x, y);\n        }\n        if (xRange == 0) {\n\
    \            return Math.Max(x, y);\n        }\n        long large = x + 1;\n\
    \        long even = 1;\n        while (large <= y) {\n            // Find the\
    \ even numbers that are greater or equal than the \n            // first even\
    \ number we've found.\n            long evenSmall = even + 1;\n            while\
    \ (evenSmall < even) {\n                if (Math.Abs(large - evenSmall) == double.Epsilon)\
    \ {\n                    return large;\n                }\n                evenSmall\
    \ += evenSmall;\n            }\n            evenSmall = even + 1;\n          \
    \  // Now the evenSmall number is the number we'll use for the \n            //\
    \ range check.\n            double largeRange = (double)large - (double)evenSmall;\n\
    \            double evenRange = (double)even - (double)evenSmall;\n          \
    \  if (Math.Abs(largeRange) >= double.Epsilon) {\n                // The largest\
    \ even number >= evenSmall\n                long final = large;\n            \
    \    // Do this by seeing how much larger the even number \n                //\
    \ is than the next odd number.\n                while (Math.Abs(final * 2) <=\
    \ evenRange) {\n                    final *= 2;\n                }\n         \
    \       return final;\n            }\n            even = evenSmall;\n        \
    \    large++;\n        }\n        return -1;", "        if (x < y) {\n       \
    \     return -1;\n        }\n        long largest = x;\n        long smallest\
    \ = y;\n        long evenSmallest = 0;\n        long evenLargest = 0;\n      \
    \  while ((smallest % 2) == 0L) {\n            evenSmallest += 1;\n          \
    \  smallest = smallest / 2L;\n        }\n        while (largest % 2 == 0L) {\n\
    \            evenLargest += 1;\n            largest = largest / 2L;\n        }\n\
    \        if (evenSmallest < evenLargest) {\n            largest = evenLargest;\n\
    \            smallest = evenSmallest;\n        }\n        return largest;", " \
    \       int min = (int)Math.Min(Math.Min(x, y), long.MaxValue);\n        int max\
    \ = (int)Math.Max(Math.Max(x, y), long.MinValue);\n        if (min == max) {\n\
    \            if (min % 2 == 0) {\n                return min;\n            } else\
    \ {\n                return -1;\n            }\n        }\n        List<long>\
    \ evenRanges = new List<long>();\n        for (int i = min; i >= 0; i -= 2) {\n\
    \            if (min <= y && min + i <= y) {\n                evenRanges.Add(i);\n\
    \            }\n        }\n        if (evenRanges.Count == 0) {\n            return\
    \ -1;\n        }\n        long middle = evenRanges[evenRanges.Count / 2];\n  \
    \      if (x == middle) {\n            return y;\n        }\n        long biggest\
    \ = x;\n        foreach (long i in evenRanges.Skip(evenRanges.Count / 2)) {\n\
    \            if (i == middle) {\n                continue;\n            }\n  \
    \          if (Biggest(i, y) < biggest) {\n                biggest = Biggest(i,\
    \ y);\n            }\n        }\n        return biggest;", "        long num =\
    \ (long)Math.Max(x - y, 0);\n        long mult = num / 2L;\n        if (mult !=\
    \ 0) {\n            long add1 = mult * mult;\n            long add2 = mult * add1;\n\
    \            long add3 = mult * add2;\n            long add4 = mult * add3;\n\
    \            while (add4 != add1 && add4 != add2 && add4 != add3 && add4 != add4\
    \ && add4 != num) {\n                num -= add4;\n                add1 = add2;\n\
    \                add2 = add3;\n                add3 = add4;\n                add4\
    \ = mult * add1;\n            }\n        }\n        return num;", "        long\
    \ xRange = ((long)((x - 1) * (long)Math.Pow(2, 31)) + (long)1);\n        long\
    \ yRange = ((long)((y - 1) * (long)Math.Pow(2, 31)) + (long)1);\n\n        if\
    \ (Math.Abs(x - y) <= 1) return -1;\n\n        long max = x;\n\n        if (xRange\
    \ > yRange) {\n            max = y;\n        }\n\n        if (xRange == yRange)\
    \ {\n            while (max % 2 == 0) {\n                max = (long)Math.Ceiling(max/2);\n\
    \            }\n\n            if (max < x) {\n                max++;\n       \
    \     }\n        }\n\n        return max;", "        long minRange = x > y ? y\
    \ : x;\n        long maxRange = x > y ? x : y;\n        long result = 0;\n   \
    \     do {\n            long rangeMin = (minRange - 1L) / 2;\n            long\
    \ rangeMax = (maxRange + 1L) / 2;\n            if (rangeMin >= rangeMax) {\n \
    \               return -1;\n            }\n            long range = (rangeMin\
    \ + rangeMax) / 2;\n            if (range > rangeMin && range < rangeMax) {\n\
    \                range = (rangeMin + rangeMax) / 2;\n                if (range\
    \ >= minRange && range <= maxRange) {\n                    long num = (long) Math.Floor(Math.Sqrt(range)\
    \ * Math.Sqrt(2) - 1);\n                    if (num % 2 == 0) {\n            \
    \            result = num;\n                        break;\n                 \
    \   }\n                }\n            }\n            minRange = rangeMin;\n  \
    \          maxRange = range;\n        } while (true);\n        return result;",
  "        long res = 0;\n        if (x > y) {\n            while (x != y) {\n   \
    \             if (x % 2 == 0) {\n                    x /= 2;\n               \
    \ } else {\n                    x *= 2;\n                }\n                res\
    \ = Math.Max(res, x);\n            }\n        } else {\n            while (y !=\
    \ x) {\n                if (y % 2 == 0) {\n                    y /= 2;\n     \
    \           } else {\n                    y *= 2;\n                }\n       \
    \         res = Math.Max(res, y);\n            }\n        }\n        return res;",
  '        return x.CompareTo(y) > 0 ? x : (long)(-1);', "        BigInteger a = new\
    \ BigInteger(x);\n        BigInteger b = new BigInteger(y);\n        // If there's\
    \ no even number in the range [x, y], return -1.\n        if (a.ToBigInteger().DivideBy(a).ToInt64()\
    \ % 2 == 0 && b.ToBigInteger().DivideBy(b).ToInt64() % 2 == 0) {\n           \
    \ return a.ToString();\n        }\n        else {\n            return -1;\n  \
    \      }", "        return (x == y) ? x : Math.Max(\n            x,\n        \
    \    Math.Max((int)Math.Floor(x / 2), (long)Math.Floor((x + y) / 2))\n       \
    \ );", "        // Check to make sure both parameters are positive\n        if\
    \ (x <= 0 || y <= 0)\n            return -1;\n        // Compute the maximum of\
    \ x and y\n        long max = Math.Max(x, y);\n        // Compute the minimum\
    \ of x and y\n        long min = Math.Min(x, y);\n        // Compute the sum of\
    \ x and y\n        long sum = x + y;\n        // Check to make sure sum is even\n\
    \        if (sum % 2 == 0)\n            return sum / 2;\n        // If sum is\
    \ odd, then subtract 1 from sum and check again\n        else\n            return\
    \ ChooseNum(sum - 1, max);", "        if (x < y) return ChooseNum(y, x);\n\n \
    \       long min = (long) (Math.Min(x, y));\n        long max = (long) (Math.Max(x,\
    \ y));\n        long range = (long) (max - min) + 1;\n        long total = 0;\n\
    \n        bool even = true;\n        for (int i = min; i <= max; i+=2) {\n   \
    \         total += i;\n            even = even ? i % 2 != 0 : true;\n        }\n\
    \n        return even ? total : -1;", "        long m = Math.Max(x, y);\n    \
    \    long n = Math.Min(x, y);\n        long ans = 0;\n        while (m != n) {\n\
    \            int d = (int)Math.Abs(m % n);\n            if (d == 0)\n        \
    \        return -1;\n            else if (d == 1)\n                return m;\n\
    \            else\n                m -= d;\n            n += d;\n        }\n \
    \       return ans;", "        if (x < 0 || y < 0)\n            return -1;\n \
    \       long z = x + y;\n        long z2 = z / 2;\n        long z3 = z % 2;\n\
    \        if (z % 2 == 0)\n            return z;\n        return ChooseNum(z2,\
    \ z3);", "        long ans = 0;\n        while((x > 0 && x < y) && (ans == 0)){\n\
    \            long z = x + y;\n            long t = z;\n            ans = 1;\n\
    \            while(z < t){\n                if(t % 2 == 0){\n                \
    \    t = t + 2;\n                }\n                else {\n                 \
    \   t = t - 2;\n                }\n            }\n            x = z - 1;\n   \
    \         y = t;\n        }\n        if(ans == 0){\n            return -1;\n \
    \       }\n        else {\n            return ans;\n        }", "        long\
    \ max = x;\n        long min = y;\n        long sum = 0;\n        while (max <=\
    \ min) {\n            if (max % 2 == 0) {\n                sum += max;\n     \
    \           max += 1;\n            } else {\n                sum += max - 1;\n\
    \                max += 2;\n            }\n        }\n        return sum == 0\
    \ ? -1 : sum;", "        if (x < y) return -1;\n        if (x > y) return -1;\n\
    \        long even = 0;\n        long odd = 1;\n        while (odd < y) {\n  \
    \          if (x % 2 == 0 && y % 2 == 0) even = even * 2 + x;\n            else\
    \ if (x % 2 == 1) even = even * 2 + x;\n            else if (y % 2 == 1) even\
    \ = even * 2 + y;\n            else {\n                long temp = x * odd;\n\
    \                long temp2 = y * odd;\n                even = temp + temp2;\n\
    \                odd *= 2;\n            }\n            x /= 2;\n            y\
    \ /= 2;\n        }\n        long result;\n        if (even > x && even > y) {\n\
    \            result = even;\n        } else {\n            result = odd;\n   \
    \     }\n        if (result == x && result == y) return result;\n        return\
    \ -1;", '        return Math.Max(x, y);', "        long a = Math.Max(x, y);\n\
    \        if (a < x)\n            a += 2;\n        if (a < y)\n            a +=\
    \ 2;\n        if (a % 2 == 0) {\n            a /= 2;\n            a += 1;\n  \
    \      }\n        return a;", "        long i = x;\n        long j = y;\n    \
    \    long k = (long) Math.Sqrt(j);\n        long max = (i * i);\n        long\
    \ counter = 0;\n\n        while (i != 0) {\n            i = i / 2;\n         \
    \   counter++;\n        }\n        i = i;\n        while (k < i) {\n         \
    \   k = (k * 2L) + k;\n            counter++;\n        }\n        k = k;\n   \
    \     while (j < k) {\n            j = (j * 2L) + j;\n            counter++;\n\
    \        }\n        j = j;\n        while (i != j) {\n            if (max > i)\
    \ {\n                max = (i * i);\n            }\n            i = (i * 2L) +\
    \ i;\n            counter++;\n        }\n        i = i;\n        j = j;\n    \
    \    int counterInt = counter;\n        long maxInt = max;\n        long temp\
    \ = 0;\n        long result = 0;\n        while (counter > 0) {\n            temp\
    \ = maxInt;\n            while (maxInt != 0) {\n                if (maxInt % 2\
    \ == 0) {\n                    if (temp % 2 == 0) {\n                        temp\
    \ = temp * 2L;\n                    }\n                    else {\n          \
    \              temp = temp / 2L;\n                    }\n                }\n \
    \               else {\n                    if (temp % 2 != 0) {\n           \
    \             temp = temp / 2L;\n                    }\n                    else\
    \ {\n                        temp = temp * 2L;\n                    }\n      \
    \          }\n                maxInt = maxInt / 2L;\n            }\n         \
    \   if (temp == maxInt) {\n                result = temp;\n                break;\n\
    \            }\n            counter--;\n        }\n        if (result == 0) {\n\
    \            result = -1;\n        }\n        return result;", "        long n\
    \ = Convert.ToInt64(x);\n        long m = Convert.ToInt64(y);\n        long k\
    \ = 0;\n        while (m != 0) {\n            if (m % 2 == 1) {\n            \
    \    m = (m + n) / 2;\n                n = n;\n            }\n            else\
    \ {\n                m = (m + n) / 2;\n                k = k;\n            }\n\
    \        }\n        if (k != 0)\n            return k;\n        else\n       \
    \     return -1;", "        if (x >= y || x <= 0) {\n            return -1L;\n\
    \        }\n        long even = 0;\n        long odd = 1;\n        long biggest\
    \ = -1;\n        do {\n            if (x % 2 == 0) {\n                even +=\
    \ x;\n                x /= 2;\n            }\n            else {\n           \
    \     odd += x;\n                x /= 2;\n            }\n        } while (x !=\
    \ 0);\n        if (even > odd) {\n            biggest = even;\n        }\n   \
    \     else {\n            biggest = odd;\n        }\n        return biggest;",
  "        long z = (x ^ y) ^ 0x5555555555555555L;\n        if (z < x) {\n       \
    \     z = y;\n        }\n        if (z > y) {\n            z = x;\n        }\n\
    \        return z;", "        long result = x;\n        while (x <= y) {\n   \
    \         if ((x % 2) == 0 && (y % 2) == 0)\n                return result;\n\
    \            result *= 2;\n            x++;\n            y++;\n        }\n   \
    \     return -1;", "        if (y > x) {\n            long temp=y;\n         \
    \   y=x;\n            x=temp;\n        }\n\n        int even=0;\n        int odd=1;\n\
    \n        while (true) {\n            long num=x*y+odd;\n\n            if (num%2\
    \ == 0) {\n                even++;\n            } else if (num%2 != 0) {\n   \
    \             odd++;\n            }\n            if (even+odd>=2) {\n        \
    \        break;\n            }\n            x++;\n            y++;\n        }\n\
    \        return (even<odd?even:odd);", "        if (x < y) return ChooseNum(y,\
    \ x);\n        if ((x - y) % 2 == 0) return x;\n        else return ChooseNum(y\
    \ - 1, x - 1);", "        // Find a number in the range\n        long range =\
    \ (x - y).Max();\n        long even = 0;\n        long odd = 1;\n\n        //\
    \ Find even and odd parts\n        while (true) {\n            even = even * range\
    \ + y;\n            if (even > x) {\n                return even;\n          \
    \  }\n            odd = odd * range + x;\n            if (odd > y) {\n       \
    \         return odd;\n            }\n        }", "        if (x > y) {\n    \
    \        long temp = x;\n            x = y;\n            y = temp;\n        }\n\
    \n        long m = x;\n        long n = y;\n\n        while (m != 0) {\n     \
    \       long tmp = m % 2;\n            m = m / 2;\n            if (n != 0 && tmp\
    \ == 0) {\n                n = n - 1;\n            }\n        }\n        return\
    \ n;", "        if(x <= 0 || y <= 0)\n            return -1;\n        if(x ==\
    \ 0)\n            return y;\n        if(y == 0)\n            return x;\n\n   \
    \     // The following algorithm checks every possible divisor and sees if\n \
    \       // it divides evenly into [x, y].\n        long z = x;\n        long n\
    \ = y;\n        for(; z < n; z++) {\n            if((z & 1) == 0)\n          \
    \      continue;\n            if((z / n) % 2 == 0)\n                return z;\n\
    \            if((z / n) % 2 == 1)\n                return -1;\n        }\n\n \
    \       // This algorithm checks every possible divisor and sees if\n        //\
    \ it divides evenly into [x, y] but in a different direction.\n        long z\
    \ = x;\n        long n = y;\n        for(; z < n; z++) {\n            if((z &\
    \ 1) == 1)\n                continue;\n            if((z / n) % 2 == 1)\n    \
    \            return z;\n            if((z / n) % 2 == 0)\n                return\
    \ -1;\n        }\n\n        // The following algorithm checks every possible divisor\
    \ and sees if\n        // it divides evenly into [x, y] but in the same direction.\n\
    \        long z = x;\n        long n = y;\n        for(; z < n; z++) {\n     \
    \       if((z & 1) == 1)\n                continue;\n            if((z / n) %\
    \ 2 == 1)\n                return z;\n            if((z / n) % 2 == 0)\n     \
    \           return -1;\n        }\n\n        // This algorithm checks every possible\
    \ divisor and sees if\n        // it divides evenly into [x, y] or in a different\
    \ direction.\n        long z = x;\n        long n = y;\n        for(; z < n; z++)\
    \ {\n            if((z & 1) == 1)\n                continue;\n            if((z\
    \ / n) % 2 == 1)\n                return z;\n            if((z / n) % 2 == 0)\n\
    \                return -1;\n        }\n\n        // This algorithm checks every\
    \ possible divisor and sees if\n        // it divides evenly into [x, y] or in\
    \ the same direction.\n        long z = x;\n        long n = y;\n        for(;\
    \ z < n; z++) {\n            if((z & 1) == 1)\n                continue;\n   \
    \         if((z / n) % 2 == 1)\n                return z;\n            if((z /\
    \ n) % 2 == 0)\n                return -1;\n        }\n\n        // This algorithm\
    \ checks every possible divisor and sees if\n        // it divides evenly into\
    \ [x, y] or in a different direction.\n        long z = x;\n        long n = y;\n\
    \        for(; z < n; z++) {", "        var even = 0;\n        while (x <= y)\
    \ {\n            if (x % 2 == 0 && y % 2 == 0) {\n                even = x;\n\
    \                Console.WriteLine($\"Even: {even}\");\n            }\n      \
    \      else if (x % 2 == 0) {\n                Console.WriteLine(\"x is even\"\
    );\n                x = x + 1;\n                Console.WriteLine($\"x is now\
    \ {x}\");\n            }\n            else if (y % 2 == 0) {\n               \
    \ Console.WriteLine(\"y is even\");\n                y = y + 1;\n            \
    \    Console.WriteLine($\"y is now {y}\");\n            }\n            else {\n\
    \                Console.WriteLine(\"Both of them are even\");\n             \
    \   y = y + 1;\n                Console.WriteLine($\"y is now {y}\");\n      \
    \      }\n        }\n        return even;", "        if (x < y) {\n          \
    \  long tmp = x;\n            x = y;\n            y = tmp;\n        }\n      \
    \  long res = x - y;\n        x -= 1;\n        y -= 1;\n        for (long i =\
    \ 0; i < 32; i++) {\n            long pow = Pow(x, i);\n            if (pow >\
    \ y || pow < x)\n                return -1;\n            if (pow == y)\n     \
    \           break;\n            res = Math.Min(res, pow - y);\n            if\
    \ (res >= x) {\n                return -1;\n            }\n        }\n       \
    \ return res;", "        if(x >= y) {\n            if((x - y) % (y) == 0)\n  \
    \              return (x + y - 1) % (y);\n            else\n                return\
    \ -1;\n        }\n        else if(x == y) {\n            return -1L;\n       \
    \ }\n        else\n            return -1;", "        if (x < y) {\n          \
    \  long minx = x, yminx = y;\n            long miny = x, ymaxx = y;\n        \
    \    long minz = x, maxz = x;\n            while (minx <= xmax) {\n          \
    \      long mid = minx + miny;\n                miny = mid;\n                ymaxx\
    \ = mid;\n                if (mid*mid > maxz) {\n                    maxz = mid;\n\
    \                }\n                minx = mid;\n            }\n            while\
    \ (miny <= ymax) {\n                long mid = minx + miny;\n                minx\
    \ = mid;\n                yminx = mid;\n                if (mid*mid > minz) {\n\
    \                    minz = mid;\n                }\n                miny = mid;\n\
    \            }\n            return (minz + maxz);\n        } else {\n        \
    \    long maxx = x, ymaxx = y;\n            long maxy = x, yminx = y;\n      \
    \      long maxz = x, minz = x;\n            while (maxx >= xmax) {\n        \
    \        long mid = maxx + maxy;\n                maxy = mid;\n              \
    \  ymaxx = mid;\n                if (mid*mid > minz) {\n                    minz\
    \ = mid;\n                }\n                maxx = mid;\n            }\n    \
    \        while (maxy >= ymax) {\n                long mid = maxx + maxy;\n   \
    \             maxx = mid;\n                yminx = mid;\n                if (mid*mid\
    \ > minz) {\n                    minz = mid;\n                }\n            \
    \    maxy = mid;\n            }\n            return (minz + maxz);\n        }",
  "        // The algorithm relies on Euclid's algorithm. The idea is that we \n \
    \       // divide both x and y by 2 to obtain m+n (m and n are odd numbers). \n\
    \        // Then we calculate the GCD of m and n. Once we have found the GCD,\
    \ \n        // we calculate the GCD of m and m (i.e. m\xB2) and divide it by n\
    \ to get \n        // the GCD of m and m (i.e. n\xB2). This will yield the greatest\
    \ even \n        // number that is in the range [x, y] inclusive.\n        //\
    \ The main function uses the Euclid's algorithm, therefore the function \n   \
    \     // uses Euclid's algorithm.\n        long m = (x + y) >> 1;\n        long\
    \ n = (x + y) - (m * m) >> 1;\n        long gcd = EuclidGCD(n, m);\n        if\
    \ (gcd == 0)\n            return -1;\n        else\n            return gcd * (n\
    \ >> 1);", "        long z = x;\n        if (y < x) {\n            z = y;\n  \
    \      }\n        long max = z;\n        long current = z;\n        for (long\
    \ i = z + 1; i <= y; i++) {\n            while (current % i == 0) {\n        \
    \        current = current / i;\n                if (current > max) {\n      \
    \              max = current;\n                }\n            }\n        }\n \
    \       return max;", "        if (x > y) {\n            return -1;\n        }\n\
    \        long xEven = 0;\n        long yEven = 0;\n        while (xEven < x &&\
    \ yEven < y) {\n            if ((xEven % 2) == 0L) {\n                xEven++;\n\
    \            }\n            if ((yEven % 2) == 0L) {\n                yEven++;\n\
    \            }\n        }\n        if (xEven < x) {\n            return -1;\n\
    \        }\n        if (yEven < y) {\n            return -1;\n        }\n    \
    \    if (xEven == x) {\n            return yEven;\n        }\n        if (yEven\
    \ == y) {\n            return xEven;\n        }\n        return xEven * yEven;",
  "        if (x < y && x != -1L) throw new ArgumentOutOfRangeException(\"x\");\n\
    \        if (y < x && y != -1L) throw new ArgumentOutOfRangeException(\"y\");\n\
    \        // Check which number is in the range\n        long num = MathNet.Numerics.LinearAlgebra.ComplexMath.NextMultipleOf(x,\
    \ 2);\n        if (y == -1L) {\n            if (num != -1L) throw new ArgumentOutOfRangeException(\"\
    y\");\n            return num;\n        }\n        // Check the other number\n\
    \        long num2 = MathNet.Numerics.LinearAlgebra.ComplexMath.NextMultipleOf(y,\
    \ 2);\n        if (num2 == -1L) throw new ArgumentOutOfRangeException(\"y\");\n\
    \        // And finally return the biggest even number\n        return Math.Max(num,\
    \ num2);", "        long low = x;\n        long high = y;\n        long highLow\
    \ = high + low;\n        if (highLow % 2 == 0) {\n            low++;\n       \
    \ }\n        if (highLow > x) {\n            return -1;\n        }\n        while\
    \ (highLow > high) {\n            if (highLow % 2 != 0) {\n                return\
    \ highLow / 2;\n            }\n            low++;\n            highLow = high\
    \ + low;\n        }\n        return -1;", "        if (x < y && x >= 0 && y >=\
    \ 0 && y > 0) {\n            long xx = x;\n            long yy = y;\n        \
    \    while (true) {\n                long ans = (xx & yy);\n                if\
    \ (ans != 0)\n                    return ans;\n                if (xx == 0)\n\
    \                    return -1;\n                if (yy == 0)\n              \
    \      return -1;\n                xx /= 2;\n                yy /= 2;\n      \
    \      }\n        } else {\n            return -1;\n        }", "        // Use\
    \ bitwise AND with 0xfff to convert long values to \n        // 32-bit integers.\n\
    \        long xx = x & ffffffff;\n        long yy = y & ffffffff;\n        long\
    \ biggest = -1;\n        // We compare each number from [xx, yy] using bitwise\
    \ OR with \n        // 0xFFFF to convert them to 32-bit integers.\n        for\
    \ (int i = xx; i <= yy; i++) {\n            long num = i;\n            if (num\
    \ & 0xFFFF == num) {\n                num = num & 0xFFFF;\n                if\
    \ (num > biggest) {\n                    biggest = num;\n                }\n \
    \           }\n        }\n        return biggest;", "        long ev;\n      \
    \  if (x > y) { ev = ChooseNum(y, x); }\n        else { ev = ChooseNum(x, y);\
    \ }\n        return ev;", "        long z = (x ^ (y ^ 0xFFFFFFFF)) & Long.MaxValue;\n\
    \        if (z > y && !(z & z)) {\n            return -1;\n        }\n       \
    \ return z;", "        long result = 0;\n        for (long i = x; i <= y; ++i)\
    \ {\n            long remainder = 0;\n            while (i % 2 == 0) {\n     \
    \           remainder = remainder + 1;\n                i = i / 2;\n         \
    \   }\n            if (remainder == 2) {\n                result = i;\n      \
    \      }\n        }\n        if (result > y) {\n            result = -1;\n   \
    \     }\n        return result;", "        long z = (long)((x / 2) * (y / 2));\n\
    \        if ((z % 2) == 0)\n            return z / 2;\n        return -1;", " \
    \       long smallest = (long)Math.Max(Math.Min(x, y), 0);\n        long largest\
    \ = (long)Math.Min(Math.Max(x, y), 0);\n        long biggest = smallest;\n   \
    \     long ans = -1;\n        long even = smallest;\n        long odd = 0;\n \
    \       while (biggest <= largest) {\n            if (even % 2 == 0) {\n     \
    \           biggest = even + 1;\n                even = even + 2;\n          \
    \  } else {\n                even = even + 1;\n                odd = odd + 1;\n\
    \            }\n            if (even > largest) {\n                ans = even;\n\
    \                break;\n            }\n            if (odd > largest) {\n   \
    \             ans = odd;\n                break;\n            }\n        }\n \
    \       return ans;", "        long smallest = Math.Min(x, y);\n        long largest\
    \ = Math.Max(x, y);\n        while (smallest != largest) {\n            long mid\
    \ = (smallest + largest) / 2;\n            if (IsEven(mid)) {\n              \
    \  smallest = mid;\n            } else {\n                largest = mid;\n   \
    \         }\n        }\n        if (smallest == largest) return smallest;\n  \
    \      return -1L;", "        long xMinus1 = x - 1;\n        long yMinus1 = y\
    \ - 1;\n        long xMax = x + 1;\n        long yMax = y + 1;\n        long xRange\
    \ = xMax - xMinus1;\n        long yRange = yMax - yMinus1;\n        long maxNum\
    \ = xRange / yRange;\n        long result = x;\n        while(true) {\n      \
    \      if((long)result * xRange == xMax * yRange)\n                break;\n  \
    \          if((long)result * xRange == xRange * yRange)\n                result\
    \ = xMax - 1;\n            else\n                result = yMax - 1;\n        }\n\
    \        if((long)result * xRange == xMax * yMax)\n            while (result *\
    \ xRange < xMax * yMax) {\n                result = result + 1;\n            }\n\
    \        return result;", "        long biggest = -1;\n        if (x > y) biggest\
    \ = y;\n        if (x == 0) biggest = y;\n        while (x < y) {\n          \
    \  if (x % 2 == 0) x /= 2;\n            else x = x + 1;\n            if (y % 2\
    \ == 0) y /= 2;\n            else y = y + 1;\n        }\n        if (biggest ==\
    \ -1) return -1;\n        return biggest;", "        var evens = Enumerable.Range(0,\
    \ Math.Max((x - y) / 2, 1)).Select(x => (x + y) / 2).Where(x => (x % 2) == 0);\n\
    \        if (evens.Count() == 0) return -1;\n        evens.OrderByDescending(x\
    \ => x).First();\n        return evens.First();", "        // Initialize biggest\
    \ even integer number.\n        long num = 0;\n        // Initialize flag that\
    \ tells whether biggest even integer number \n        // is found.\n        bool\
    \ flag = false;\n        // Initialize a variable that counts how many iterations\
    \ the \n        // function has been run.\n        int numCount = 0;\n       \
    \ // Iterate through all numbers from x to y, and increment the \n        // variable\
    \ numCount each time a number is found.\n        for (long i = x; i <= y; i++)\
    \ {\n            // Check if the current number is an even number, and\n     \
    \       // if it is larger than the biggest even integer number.\n           \
    \ if (i % 2 == 0 && i != num) {\n                // If biggest even integer number\
    \ is smaller than current \n                // number, then set biggest even integer\
    \ number as the current\n                // number.\n                if (num <\
    \ i) {\n                    num = i;\n                }\n                // If\
    \ biggest even integer number is the same as current number,\n               \
    \ // then set the flag to true.\n                else if (i == num) {\n      \
    \              flag = true;\n                }\n                // If biggest\
    \ even integer number larger than current number,\n                // then increment\
    \ the variable numCount by 1.\n                else {\n                    numCount++;\n\
    \                }\n            }\n        }\n        // If the biggest even integer\
    \ number has been found, then return \n        // the biggest even integer number.\n\
    \        if (flag) {\n            return num;\n        }\n        // If the function\
    \ hasn't been able to find any even numbers in the\n        // range [x, y], then\
    \ return -1.\n        else {\n            return -1;\n        }", "        if\
    \ (x >= y) {\n            int diff = x - y;\n            long num = 0;\n     \
    \       for (long i = diff; i > 0; i--) {\n                num |= 1 << (i - 1);\n\
    \            }\n            return num;\n        }\n        int diff = y - x;\n\
    \        long num = 0;\n        for (long i = diff; i > 0; i--) {\n          \
    \  num |= 1 << (i - 1);\n        }\n        return num;", "        long xLow =\
    \ (x - 1)/2;\n        long xHigh = (x + 1)/2;\n        long yLow = (y - 1)/2;\n\
    \        long yHigh = (y + 1)/2;\n        if (x == y) return -1;\n        if (xLow\
    \ < yLow) \n            return (xLow + yHigh);\n        if (xHigh > yHigh) \n\
    \            return (xHigh + yLow);\n        if (x == xLow) return (yLow + yHigh);\n\
    \        if (xHigh == yLow) return (yHigh + xLow);\n        long xHigh2 = (xHigh\
    \ + 1)/2;\n        long yHigh2 = (yHigh + 1)/2;\n        if (x == xHigh2 && y\
    \ == yHigh2) return y;\n        if (xLow == xHigh2 && y == yLow2) return y;\n\
    \        if (xHigh == xLow2 && y == yHigh2) return x;\n        if (xLow2 == yLow2\
    \ && yHigh2 == yHigh2) return x;\n        if (xLow2 == yLow2 && yHigh2 == yLow2)\
    \ return y;\n        if (xLow2 == yLow2 && yHigh2 == yHigh2) return xHigh2;\n\
    \        if (xLow2 == yLow2 && yHigh2 == yLow2) return xLow2;\n        if (xLow2\
    \ == yLow2 && yHigh2 == yHigh2) return yHigh2;\n        if (xLow2 == yLow2 &&\
    \ yHigh2 == yLow2) return yLow2;\n        return -1;", "        long min = 1;\n\
    \        long max = x - 1;\n        long sum = 0;\n        while ((min <= max)\
    \ && (sum < min)) {\n            long mid = (min + max) / 2;\n            long\
    \ tmp = ChooseNum(y, mid);\n            if (tmp > 0) {\n                min =\
    \ mid;\n            }\n            else {\n                max = mid - 1;\n  \
    \          }\n            sum += mid;\n        }\n        if (sum == min) {\n\
    \            return x;\n        }\n        if (sum == max) {\n            return\
    \ -1;\n        }\n        return -1;", "        if (x == y)\n            return\
    \ x;\n        long even = 0L;\n        long odd = 0L;\n        for (x = x - 1;\
    \ x >= y; x -= 2)\n            even += x;\n        for (x = x - 1; x >= y; x -=\
    \ 2)\n            odd += x;\n        if (even > odd)\n            return even;\n\
    \        return odd;", "        long smallest = x;\n        long largest = y;\n\
    \        while (smallest < largest) {\n            long mid = (smallest + largest)\
    \ / 2;\n            long midval = mid;\n            long even = (midval * 2) %\
    \ 2 == 0;\n            long odd = (midval * 2) % 2 != 0;\n            if ((even)\
    \ && (odd)) {\n                smallest = mid;\n                largest = mid;\n\
    \            } else if (even) {\n                largest = mid;\n            }\
    \ else {\n                smallest = mid;\n            }\n        }\n        return\
    \ (largest - smallest + 1);", "        long a = Math.Max(x, y);\n        long\
    \ b = Math.Min(x, y);\n        while ((a % 2) == 0) {\n            a = a - 1;\n\
    \        }\n        while ((b % 2) == 0) {\n            b = b - 1;\n        }\n\
    \        while ((a - b >= 0) && (a - b < b)) {\n            a = a + 1;\n     \
    \       b = b + 1;\n        }\n        if (a - b < 0) {\n            return -1;\n\
    \        }\n        return a;", "        int z = 0;\n        long a = ((x << 1)\
    \ + y);\n        long b = ((x << 1) + y);\n\n        while (!((a & b) == 0))\n\
    \        {\n            if (z < z)\n            {\n                z = z;\n  \
    \              a = a;\n                b = b;\n            }\n            if (a\
    \ > b)\n            {\n                b = b;\n            }\n            a =\
    \ (a << 1) + y;\n            b = (b << 1) + y;\n        }\n        return z;",
  "        long z = (long)Math.Sqrt(x * x + y * y);\n        if (z >= x && z >= y)\
    \ \n            return z;\n        return -1;", "        // The idea is to take\
    \ two numbers from [-x, x] and [-y, y] inclusive\n        // and add those numbers\
    \ together and check which one is even. If\n        // we get an even number,\
    \ then we return it. Otherwise we return -1.\n        long result = x + y;\n \
    \       while (result < 0)\n        {\n            result = result + y;\n    \
    \    }\n        long even = result;\n        do {\n            result = result\
    \ + y;\n        } while (result < even);\n        if (even % 2 == 0)\n       \
    \ {\n            return even;\n        }\n        return -1;", "        long maxValue\
    \ = x, yMinusY = y, answer = 0;\n        long max = Math.Min(x, y);\n        do\
    \ {\n            if (maxValue > max) {\n                maxValue = x;\n      \
    \          yMinusY = y - maxValue;\n            } else {\n                maxValue\
    \ = y;\n                yMinusY = x - maxValue;\n            }\n            long\
    \ mid = maxValue + yMinusY;\n            if (mid % 2 == 0) {\n               \
    \ answer = mid;\n                break;\n            }\n            max = mid;\n\
    \            x++;\n        } while (x <= y);\n        return answer == 0 ? -1\
    \ : answer;", "        if (y > x) return -1;\n        var range = y - x;\n   \
    \     var evens = 0;\n        for (var i = x; i <= y; i++) {\n            if (i\
    \ % 2 == 0) {\n                evens++;\n            }\n        }\n        if\
    \ (evens == 0) {\n            return -1;\n        }\n        var res = -1;\n \
    \       for (var i = x; i <= y; i++) {\n            var diff = Math.Abs(i - y);\n\
    \            if (diff % 2 == 0) {\n                diff = (diff / 2) - 1;\n  \
    \          }\n            var mod = diff % 2;\n            if (mod > 0 && i !=\
    \ x) {\n                var a = x;\n                var b = y;\n             \
    \   var g = i;\n                var e = g;\n                while (1) {\n    \
    \                e = (e + 1) % g;\n                    if (e == b) {\n       \
    \                 break;\n                    }\n                    var f = a\
    \ % g;\n                    if (f == 0) {\n                        break;\n  \
    \                  }\n                    a = g;\n                    g = e;\n\
    \                }\n                var h = g;\n                while (1) {\n\
    \                    var j = h;\n                    h = ((h + g) / 2) % g;\n\
    \                    if (h == j) {\n                        break;\n         \
    \           }\n                    var k = h;\n                    h = k;\n  \
    \              }\n                var l = (b + h) % g;\n                var m\
    \ = 1;\n                while (1) {\n                    if (l == m) {\n     \
    \                   break;\n                    }\n                    var n =\
    \ l;\n                    l = (l + m) / 2\n                    m = n;\n      \
    \          }\n                var k = g;\n                var q = g;\n       \
    \         while (1) {\n                    if (k == q) {\n                   \
    \     break;\n                    }\n                    var r = k;\n        \
    \            k = (k + q) / 2\n                    q = r;\n                }\n\
    \                var m = k - 1;\n                var p = m;\n                while\
    \ (1) {\n                    if (p < m && p != i) {\n                        break;\n\
    \                    }\n                    var t = p;\n                    p\
    \ = (p + k) / 2;\n                    k = t;\n                }\n            \
    \    var q = (i + p) / 2;\n                if (g == q) {\n                   \
    \ res = i;\n                    break;\n                }\n            }\n   \
    \     }\n        return res;", "        if ((x > y && x > -1) || (x < y && x <\
    \ -1))\n            return -1;\n        long a = y;\n        long b = x;\n   \
    \     while (a % 2 == 0) {\n            a = a / 2;\n            b--;\n       \
    \ }\n        while (a % 2 == 1 && a >= b) {\n            a = a / 2;\n        }\n\
    \        return a;", "        long z = x + y;\n        z = z + (z % 2);\n    \
    \    return (long) z;", "        BigInteger nx = BigInteger.Pow(BigInteger.Parse(x.ToString()),\
    \ 2);\n        BigInteger ny = BigInteger.Pow(BigInteger.Parse(y.ToString()),\
    \ 2);\n        BigInteger mxny = BigInteger.Max(nx, ny);\n        BigInteger mxyn\
    \ = BigInteger.Min(nx, ny);\n        BigInteger mx = BigInteger.Max(mxny, mxyn);\n\
    \        BigInteger my = BigInteger.Min(mxny, mxyn);\n        BigInteger z = BigInteger.Parse(x.ToString());\n\
    \        if (z.ToString() <= y.ToString()) {\n            return -1;\n       \
    \ }\n        while (BigInteger.Remainder(mx, my) < 0) {\n            mx = BigInteger.Divide(mx,\
    \ my);\n            my--;\n        }\n        return BigInteger.Divide(mx, my);",
  "        if (x <= y && x >= y) {\n            if (x % 2 == 0) {\n              \
    \  return x;\n            }\n            else if (y % 2 == 0) {\n            \
    \    return y;\n            }\n            else {\n                long even =\
    \ x | y;\n                if (even > x) {\n                    return even;\n\
    \                }\n                else {\n                    return (even <\
    \ x) ? even : -1;\n                }\n            }\n        }\n        else {\n\
    \            return -1;\n        }", "        long a = x;\n        long b = y;\n\
    \        while (b > a) {\n            long mid = (a + b) / 2;\n            if\
    \ (mid % 2 == 0) {\n                a = mid;\n            } else {\n         \
    \       b = mid;\n            }\n        }\n        return b;", "        // x\
    \ must be smaller than y.\n        if (x < y) return ChooseNum(y, x);\n\n    \
    \    // x must be equal to or larger than y.\n        if (x == y) return x;\n\n\
    \        // x is positive.\n        if (x > y) {\n            // The difference\
    \ between x and y is odd. Then the\n            // biggest even integer will be\
    \ in range [x, y + 1).\n            if (x % 2 == 1) return x + 1;\n          \
    \  return x;\n        }\n\n        // x is negative.\n        if (x < 0) {\n \
    \           // The difference between x and y is even. Then the\n            //\
    \ biggest even integer will be in range [x + 1, y).\n            return x + 1;\n\
    \        }\n        \n        // The difference between x and y is even. The biggest\
    \ even integer\n        // will either be in range [x - 1, y], or [x + 1, y].\n\
    \        long evenDiff = x - y;\n        if (evenDiff % 2 == 0) return evenDiff\
    \ / 2 + 1;\n        return evenDiff / 2;", "        long result = y;\n       \
    \ while(result >= x) {\n            result -= x;\n        }\n        if(result\
    \ >= x && result < y) {\n            return result;\n        }\n        return\
    \ -1;", "        long result;\n        if (x >= y && x > 0) {\n            result\
    \ = x;\n            while (result <= y) {\n                if (result % 2 == 0)\
    \ return result;\n                result++;\n            }\n        } else {\n\
    \            result = y;\n            while (result >= x) {\n                if\
    \ (result % 2 == 0) return result;\n                result--;\n            }\n\
    \        }\n        return -1;", "        long even = 0;\n        long odd = 0;\n\
    \        long maxOdd = 0;\n        long maxEven = 0;\n        for (long i = y;\
    \ i >= x; i--) {\n            if (i % 2 == 0) {\n                even = i;\n \
    \           } else {\n                odd = i;\n                if (odd > maxOdd)\
    \ {\n                    maxEven = even;\n                    maxOdd = odd;\n\
    \                }\n            }\n        }\n        return maxEven < maxOdd\
    \ ? maxEven : -1;", "        BigInteger biX = new BigInteger(x.ToString());\n\
    \        BigInteger biY = new BigInteger(y.ToString());\n        BigInteger biZ\
    \ = new BigInteger(\"0\");\n        BigInteger biResult = new BigInteger(\"0\"\
    );\n\n        BigInteger biZero = new BigInteger(\"0\");\n\n        BigInteger\
    \ biMin = new BigInteger(\"1\");\n\n        biZ = biX;\n        biResult = biY;\n\
    \n        BigInteger biMax = biZ;\n\n        while (biZ != 0) {\n            if\
    \ (biZ.ToString().Contains(\"0\")) {\n                biResult = biZ;\n      \
    \      }\n            biZ = biZ.Multiply(biZ);\n            if (biZ.ToString().Contains(\"\
    0\")) {\n                biResult = biZ;\n            }\n            biMax = biMax.Add(biZ);\n\
    \            if (biMax.ToString().Contains(\"0\")) {\n                biResult\
    \ = biMax;\n            }\n            biMax = biMax.Subtract(biY);\n        \
    \    if (biMax.ToString().Contains(\"0\")) {\n                biResult = biMax;\n\
    \            }\n            biMax = biMax.Multiply(biY);\n            if (biMax.ToString().Contains(\"\
    0\")) {\n                biResult = biMax;\n            }\n            biMax =\
    \ biMax.Subtract(biX);\n            if (biMax.ToString().Contains(\"0\")) {\n\
    \                biResult = biMax;\n            }\n            biMax = biMax.Subtract(biX);\n\
    \            if (biMax.ToString().Contains(\"0\")) {\n                biResult\
    \ = biMax;\n            }\n            biMax = biMax.Multiply(biX);\n        \
    \    if (biMax.ToString().Contains(\"0\")) {\n                biResult = biMax;\n\
    \            }\n        }\n        long iResult = Convert.ToInt64(biResult.ToString());\n\
    \        return iResult;", "        long xx = ((long) x + 1L) % 2L;\n        long\
    \ yy = ((long) y + 1L) % 2L;\n        if (xx <= yy) {\n            if (x % 2 ==\
    \ 0) {\n                x /= 2;\n            } else {\n                y /= 2;\n\
    \            }\n        }\n        while ((x % 2) == 0 && y > 0) {\n         \
    \   x /= 2;\n            y /= 2;\n        }\n        if (x > y)\n            return\
    \ -1;\n        return x;", "        long even = x;\n        long odd  = y;\n \
    \       long max = odd;\n        while (even < odd) {\n            long mid =\
    \ even + (odd - even) / 2;\n            if (mid % 2 == 0) {\n                even\
    \ = mid + 1;\n            } else {\n                odd = mid;\n            }\n\
    \            if (even > max) {\n                max = even;\n            }\n \
    \       }\n        return max;", "        long m = y;\n        long n = x;\n \
    \       while (m / 2 > 0 && n % 2 == 0) {\n            m /= 2;\n            n\
    \ /= 2;\n        }\n        if (m > n) {\n            return -1;\n        }\n\
    \        if (m == n || m % 2 == 0 && n % 2 != 0) {\n            return m;\n  \
    \      }\n        return -1;", "        if (x == y)\n            return x;\n \
    \       if (x < y)\n            return ChooseNum(y, x);\n        if ((x - y) %\
    \ 2 == 0)\n            return (x - y) / 2;\n        return -1;", "        if (x\
    \ == y || y == 0)\n            return -1;\n        if (x == 0)\n            return\
    \ 0;\n        int max = x + y;\n        if (max % 2 == 1)\n            max--;\n\
    \        if (max % 2 == 0)\n            max = max / 2;\n        return max;",
  "        long result = -1;\n        if(x > y) {\n            long smallerNum = y;\n\
    \            long greaterNum = x;\n            while(smallerNum < greaterNum)\
    \ {\n                result = smallerNum;\n                smallerNum += smallerNum;\n\
    \                result += result + result + result + result + result + result\
    \ + result + result + result + result;\n                result += result + result\
    \ + result + result + result + result + result + result + result + result;\n \
    \               result += result + result + result + result + result + result\
    \ + result + result + result + result;\n                result += result + result\
    \ + result + result + result + result + result + result + result + result;\n \
    \               result += result + result + result + result + result + result\
    \ + result + result + result;\n                result += result + result + result\
    \ + result + result + result + result;\n                result += result + result\
    \ + result + result + result + result;\n            }\n        } else if(y > x)\
    \ {\n            long smallerNum = x;\n            long greaterNum = y;\n    \
    \        while(smallerNum < greaterNum) {\n                result = smallerNum;\n\
    \                smallerNum += smallerNum;\n                result += result +\
    \ result + result + result + result + result + result + result + result;\n   \
    \             result += result + result + result + result + result + result +\
    \ result + result + result;\n                result += result + result + result\
    \ + result + result + result + result + result + result;\n                result\
    \ += result + result + result + result + result + result + result + result + result;\n\
    \                result += result + result + result + result + result + result\
    \ + result + result;\n                result += result + result + result + result\
    \ + result + result;\n                result += result + result + result + result\
    \ + result;\n                result += result + result + result + result;\n  \
    \              result += result + result + result;\n            }\n        } else\
    \ {\n            result = x;\n        }\n        return result;", "        if\
    \ (x > y) {\n            return -1;\n        }\n        long evens = x;\n    \
    \    long odds = y;\n        bool even = true;\n        while (even || odd) {\n\
    \            if (evens) {\n                if (evens % 2 == 0) {\n           \
    \         evens = evens / 2;\n                    even = true;\n             \
    \   }\n                else {\n                    even = false;\n           \
    \     }\n            }\n            else {\n                if (odds % 2 == 0)\
    \ {\n                    odds = odds / 2;\n                    even = true;\n\
    \                }\n                else {\n                    odds = odds /\
    \ 2;\n                    even = false;\n                }\n            }\n  \
    \      }\n        return odds;", "        long even = 1;\n        long odd = 0;\n\
    \n        do {\n            if (x % 2 == 0) {\n                even += 1;\n  \
    \          }\n            else {\n                odd += 1;\n            }\n \
    \       } while (odd < y / 2);\n\n        if (even > y) {\n            return\
    \ -1;\n        }\n        return even;", "        if (x < y) {\n            if\
    \ (x % 2 == 0) {\n                long temp = x;\n                x -= temp;\n\
    \                y -= temp;\n            }\n            long result;\n       \
    \     do {\n                result = x;\n                x -= y;\n           \
    \     y -= result;\n            } while (x < y);\n            return result;\n\
    \        }\n        return -1;", "        long x0 = x, x1 = y;\n        long y0\
    \ = y, y1 = x;\n        bool evenx = ((x0%2) == 0);\n        bool eveny = ((y0%2)\
    \ == 0);\n        bool even = (evenx && eveny);\n        while (y1 < y0) {\n \
    \           y1 = y1 + 1;\n        }\n        double xdiff = Math.Abs(x1 - x0);\n\
    \        double ydiff = Math.Abs(y1 - y0);\n        double dist = Math.Sqrt(Math.Pow(xdiff,\
    \ 2) + Math.Pow(ydiff, 2));\n        int xdiffmod = (int)xdiff;\n        int ydiffmod\
    \ = (int)ydiff;\n        long result = -1;\n        if (xdiffmod <= ydiffmod)\
    \ {\n            int xdiffdiffmod2 = xdiffmod - ydiffmod;\n            long xdiffmod2\
    \ = xdiffmod2*xdiffmod;\n            int ydiffdiffmod2 = ydiffmod - xdiffmod;\n\
    \            long ydiffmod2 = ydiffmod2*ydiffmod;\n            long result = ((xdiffmod2\
    \ >= ydiffmod2 ? xdiffmod2 : ydiffmod2) + dist);\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
