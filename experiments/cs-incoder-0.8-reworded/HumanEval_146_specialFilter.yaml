name: HumanEval_146_specialFilter
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function that takes a list of numbers as input and returns\
  \ \n    // the number of elements in the list that are greater than 10 and both\
  \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For\
  \ example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
  \ (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new\
  \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n\
  \    // (2L)\n    public static long Specialfilter(List<long> nums) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
  \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
  \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
  \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
  \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==\
  \ (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,\
  \ (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new\
  \ List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,\
  \ (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
  \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\
  \n}\n"
completions: ["        long sum = 0;\n        foreach(var num in nums) {\n       \
    \     if(num > 10)\n                sum++;\n            if (num % 2 != 0 && num\
    \ % 2 != 1)\n                sum++;\n        }\n        return sum;", "      \
    \  long result = 0;\n        foreach (var num in nums) {\n            if (num\
    \ > 10L) {\n                if (num % 2L == 1L && num % 3L == 3L && num % 5L ==\
    \ 5L && num % 7L == 7L && num % 9L == 9L)\n                    result += num;\n\
    \            }\n        }\n        return result;", "        var count = new List<long>();\n\
    \n        var digits = nums.Select(x => x.ToString());\n\n        foreach(var\
    \ digit in digits)\n        {\n            var length = digit.Length;\n      \
    \      var isFirstOdd = ((digit[0]).ToString()) switch\n            {\n      \
    \          \"1\" => \"1\",\n                \"2\" => \"3\",\n                \"\
    3\" => \"5\",\n                \"4\" => \"7\",\n                \"5\" => \"9\"\
    ,\n                _ => null\n            };\n            var isLastOdd = ((digit[length\
    \ - 1]).ToString()) switch\n            {\n                \"1\" => \"1\",\n \
    \               \"2\" => \"3\",\n                \"3\" => \"5\",\n           \
    \     \"4\" => \"7\",\n                \"5\" => \"9\",\n                _ => null\n\
    \            };\n            if (isFirstOdd && isLastOdd)\n            {\n   \
    \             count.Add(1);\n            }\n        }\n        return count.First();",
  "        long num;\n        if (nums.Count == 0) return 0;\n        num = nums[0];\n\
    \        bool oddFirst = nums.First(m => m % 2 == 0).HasValue ? true : false;\n\
    \        bool oddLast = nums.Last(m => m % 2 == 0).HasValue ? true : false;\n\
    \        if (nums.Count != 1) {\n            List<long> newnums = new List<long>(nums);\n\
    \            newnums.RemoveAt(0);\n            num = Specialfilter(newnums);\n\
    \        }\n        else if (num % 2 == 0) {\n            return nums.Count;\n\
    \        }\n        else {\n            if (oddFirst && oddLast) {\n         \
    \       return nums.Count - 1;\n            }\n            else {\n          \
    \      return nums.Count - 2;\n            }\n        }", '        return nums.Count(x
    => x > 10 && x.First() % 2 == 1 && x.Last() % 2 == 1);', "        long count =\
    \ 0L;\n        foreach (long num in nums)\n        {\n            if (num > 10\
    \ && num % 2 == 1 && num % 3 == 0)\n            {\n                count++;\n\
    \            }\n        }\n        return count;", "        // Only valid if nums\
    \ contains at least one element.\n        if (nums == null || nums.Count == 0)\n\
    \            return 0;\n\n        // Count how many elements are greater than\
    \ 10.\n        var greaterThan10 = nums.Count(x => x > 10);\n\n        // Find\
    \ first and last digits of first number in the list.\n        var firstNum = nums.First();\n\
    \        var firstNumFirstDigit = firstNum % 10;\n        var firstNumLastDigit\
    \ = firstNum / 10;\n\n        // Count how many elements are greater than 10\n\
    \        // and first and last digits of first number are odd.\n        var odd\
    \ = nums.Count(x => x > 10 && x % 2 != 0);\n        \n        // Find first and\
    \ last digits of last number in the list.\n        var lastNum = nums.Last();\n\
    \        var lastNumFirstDigit = lastNum % 10;\n        var lastNumLastDigit =\
    \ lastNum / 10;\n\n        // Find out if first and last digits of first number\
    \ are odd or even.\n        var oddOrEven = (firstNumFirstDigit % 2 == 0 && firstNumLastDigit\
    \ % 2 == 0) ? \"even\" : \"odd\";\n        \n        // Find out if first and\
    \ last digits of last number are odd or even.\n        var oddOrEven = (lastNumFirstDigit\
    \ % 2 == 0 && lastNumLastDigit % 2 == 0) ? \"even\" : \"odd\";\n        \n   \
    \     // If first and last digits are odd, count how many elements \n        //\
    \ are greater than 10 and first and last digits of first number are odd\n    \
    \    // and first and last digits of last number are odd.\n        if (oddOrEven\
    \ == \"odd\" && oddOrEven == \"odd\")\n            return greaterThan10 + odd;\n\
    \        // If first and last digits are even, count how many elements \n    \
    \    // are greater than 10 and first and last digits of first number are even\n\
    \        // and first and last digits of last number are even.\n        else if\
    \ (oddOrEven == \"even\" && oddOrEven == \"even\")\n            return greaterThan10\
    \ + even;\n        // If first and last digits are odd, count how many elements\
    \ \n        // are greater than 10 and first and last digits of first number are\
    \ odd\n        // and first and last digits of last number are even.\n       \
    \ else if (oddOrEven == \"odd\" && oddOrEven == \"even\")\n            return\
    \ greaterThan10 + odd;\n        // If first and last digits are even, count how\
    \ many elements \n        // are greater than 10 and first and last digits of\
    \ first number are even\n        // and first and last digits of last number are\
    \ odd.\n        else if (oddOrEven == \"even\" && oddOrEven == \"odd\")\n    \
    \        return greaterThan10 + even;\n", "        long length = 0;\n        foreach\
    \ (var num in nums) {\n            length += num > 10 &&\n                num\
    \ % 2 == 1 &&\n                num % 3 == 1;\n        }\n        return length;",
  "        long count = 0;\n        long firstLastOdd = 0;\n        foreach (var number\
    \ in nums) {\n            var firstDigit = number / 10;\n            firstLastOdd\
    \ = firstDigit % 2 != 0 ? 1 : 0;\n            bool lastDigitOdd = number % 2 !=\
    \ 0 ? 1 : 0;\n            if (firstDigit > 10 && lastDigitOdd && firstLastOdd)\
    \ count++;\n        }\n        return count;", "        long num = 0;\n      \
    \  foreach (long i in nums)\n            num = num * 10 + i;\n        num = num\
    \ % 10;\n        if (num > 10) return num;\n        long n = num;\n        if\
    \ (num < -10000000) {\n            n = -num;\n            n = num % 10;\n    \
    \        num = -num;\n            num = num % 10;\n        }\n        num = n\
    \ * (n % 2 == 0 ? 1 : -1) * 2;\n        num = num % 10;\n        if (num > 10)\
    \ return num;\n        return num + 1;", "        long ret=0;\n        foreach\
    \ (var num in nums) {\n            ret = Math.Max(num, ret);\n        }\n    \
    \    return ret;", "        long numOddFirstLast=0;\n        foreach (long x in\
    \ nums) {\n            long nxt = x;\n            long first = nxt%10;\n     \
    \       long last = (nxt-first)/10;\n            long first = first%2;\n     \
    \       long last = last%2;\n            long odd = first+last;\n            if\
    \ (odd>9 && odd>numOddFirstLast) {\n                numOddFirstLast = odd;\n \
    \           }\n        }\n        return numOddFirstLast;", "        var biggerThan10\
    \ = nums.Count(num=>num>10);\n        var firstLastOddDigits = nums.Sum(num =>\
    \ (int)Math.Pow(10,(int)Math.Log10(num)%2));\n        return biggerThan10 && firstLastOddDigits%2==1;",
  '        return nums.Where(num => num > 10 && (num % 10) % 2 == 1).Count();', " \
    \       int count = 0;\n        for (long num : nums) {\n            if (num >\
    \ 10 && num % 2 == 1) {\n                count++;\n                while (num\
    \ > 10) {\n                    count++;\n                    num -= 10;\n    \
    \            }\n            }\n        }\n        return count;", "        long\
    \ count = 0;\n        foreach (long i in nums) {\n            if (i > 10 && i%2\
    \ == 1 && i%3 != 1) {\n                count++;\n            }\n        }\n  \
    \      return count;", "        long res = 0;\n        long sum = 0;\n       \
    \ foreach (long n in nums) {\n            sum += n;\n            if (sum > 10)\
    \ {\n                res = 1;\n                break;\n            }\n       \
    \     if (n % 2 == 0 && (sum % 2 == 1)) {\n                res = 2;\n        \
    \        break;\n            }\n        }\n        return res;", "        long\
    \ result = 0;\n        foreach(var item in nums) {\n            if (item > 10\
    \ && item % 2 == 1 && item % 2 == 1) result += 1;\n        }\n        return result;",
  '        return nums.Where(x => x > 10).Any(x => Math.Pow(x, 2) % 2 == 1).Any(x
    => Math.Pow(x, 3) % 2 == 1);', "        var list = nums.ToList();\n        var\
    \ count = list.Where(n => n > 10).Count();\n        var first = nums.Where(n =>\
    \ n % 2 == 1).First();\n        var last = nums.Where(n => n % 2 == 1).Last();\n\
    \        return list.Where(n => n > 10 && n % 2 == 1 && n % 1 == 1 && first %\
    \ 2 == 1 && last % 2 == 1).Count();", "        if (nums == null)\n           \
    \ throw new ArgumentNullException(\"nums\");\n        long result = 0;\n     \
    \   if (nums.Count == 0) {\n            return result;\n        }\n        long\
    \ first = nums.ElementAt(0);\n        long last = nums.ElementAt(nums.Count -\
    \ 1);\n        long digit0 = nums.ElementAt(nums.Count - 2);\n        long digit1\
    \ = nums.ElementAt(nums.Count - 3);\n        bool isFirstOdd = (digit0 % 2 ==\
    \ 1);\n        bool isLastOdd = (last % 2 == 1);\n        if (isFirstOdd && isLastOdd)\
    \ {\n            return result;\n        }\n        if (nums.Count == 1) {\n \
    \           return result;\n        }\n        if (nums.Count < 3) {\n       \
    \     return result;\n        }\n        bool isOdd = nums.ElementAt(nums.Count\
    \ - 3) % 2 == 1;\n        if (isOdd) {\n            return result;\n        }\n\
    \        if (last < 10) {\n            return result;\n        }\n        if (first\
    \ < 10) {\n            return result;\n        }\n        if (nums.Count > 9)\
    \ {\n            bool isFirstOddOne = (nums.ElementAt(nums.Count - 2) % 2 == 1);\n\
    \            bool isLastOddOne = (nums.ElementAt(nums.Count - 3) % 2 == 1);\n\
    \            if (isFirstOddOne && isLastOddOne) {\n                return result;\n\
    \            }\n        }\n        foreach (long n in nums) {\n            bool\
    \ isOddOne = (n % 2 == 1);\n            if (isOddOne) {\n                result\
    \ = result + 1;\n            }\n        }\n        return result;", "        bool\
    \ even = false;\n        bool firstOdd = false;\n        bool lastOdd = false;\n\
    \        foreach (long num in nums) {\n            even = (even && num % 2 ==\
    \ 0);\n            firstOdd = (num / 10) % 2 != 0;\n            lastOdd = (num\
    \ / 100) % 2 != 0;\n            if (even && (firstOdd && lastOdd)) \n        \
    \        break;\n        }\n        return (nums.Count(x => x > 10 && x.HasValue\
    \ && x.Value.HasValue && x.Value[0] % 2 == 0 && x.Value[1] % 2 == 1));", "   \
    \     long sum = 0;\n        foreach(long n in nums) {\n            bool allOdd\
    \ = true;\n            if(n > 9L)\n                allOdd = false;\n         \
    \   bool firstOdd = true;\n            if(n%10 == 1 && n%100 != 10)\n        \
    \        firstOdd = false;\n            bool lastOdd = true;\n            if(n%10\
    \ == 1 && n%100 != 100 && n%100 != 10)\n                lastOdd = false;\n   \
    \         sum += (allOdd && firstOdd && lastOdd);\n        }\n        return sum;",
  "        long[] sum = new long[] { };\n        List<long> numList = new List<long>();\n\
    \        List<long> odd = new List<long>();\n        List<long> odd_first = new\
    \ List<long>();\n        List<long> odd_last = new List<long>();\n        foreach(long\
    \ num in nums) {\n            odd_first.Add(num % 10);\n            odd_last.Add(num\
    \ % 10);\n            odd_first.Remove(odd_first.Count - 1);\n            odd_last.Remove(odd_last.Count\
    \ - 1);\n            odd.Add(num % 10);\n            numList.Add(num % 10);\n\
    \            sum[0] += num % 10;\n        }\n        numList.RemoveAt(0);\n  \
    \      numList.RemoveAt(0);\n        if(numList.Count > 0) {\n            sum[1]\
    \ = sum[0] + numList[0];\n        }\n        return sum[0];", "        long sum\
    \ = 0;\n        foreach (var item in nums) {\n            if (item > 10) {\n \
    \               if (item % 2 == 0 && item % 2 == 1) sum += item;\n           \
    \ }\n        }\n        return sum;", "        long result = 0;\n        // write\
    \ your code in here\n        return result;", "        var oddNumbers = nums.Where(n\
    \ => n%2==1).ToArray();\n        var evenNumbers = nums.Where(n => n%2==0).ToArray();\n\
    \        return nums.Where(n => n>10 && oddNumbers.Contains(n) && evenNumbers.Contains(n)).Count();",
  "        var oddNum = new List<long>();\n        var evenNum = new List<long>();\n\
    \        for (int i = 0; i < nums.Count; i++) {\n            var num = nums[i];\n\
    \            if (num > 10) {\n                if (num % 2 == 0) {\n          \
    \          evenNum.Add(num);\n                } else {\n                    oddNum.Add(num);\n\
    \                }\n            }\n        }\n        long totalEven = 0;\n  \
    \      long totalOdd = 0;\n        foreach (long num in evenNum) {\n         \
    \   if (num % 2 == 0) {\n                totalEven += num;\n            }\n  \
    \      }\n        foreach (long num in oddNum) {\n            if (num % 2 == 1)\
    \ {\n                totalOdd += num;\n            }\n        }\n        return\
    \ totalEven - totalOdd;", "        long result = 0;\n        foreach (var n in\
    \ nums)\n        {\n            if (n > 10 && n % 2 == 1 && n % 2 == 1)\n    \
    \        {\n                result++;\n            }\n        }\n        return\
    \ result;", "        long count = 0;\n        foreach (long n in nums) {\n   \
    \         if (n > 10) {\n                long first = n / 10; // first digit of\
    \ n\n                long last = n % 10; // last digit of n\n                if\
    \ (first % 2 == 1 && last % 2 == 1) {\n                    count++;\n        \
    \        }\n            }\n        }\n        return count;", "        // Your\
    \ code goes here\n        long count = 0;\n        double n = nums.FirstOrDefault();\n\
    \        double m = nums.LastOrDefault();\n        double d = Math.Sqrt((double)(n\
    \ * n - m * m));\n        double s = Math.Sqrt(d);\n        int n = Convert.ToInt32(Math.Round(s));\n\
    \        double d = Math.Sqrt(Math.Pow(n, 2) - Math.Pow(m, 2));\n        double\
    \ c = Math.Pow(d, 2);\n        double b = Math.Pow(d, 2);\n        double a =\
    \ Math.Pow(d, 2);\n        double c = Math.Pow(d, 2);\n        if (n > 10) {\n\
    \            int n = Convert.ToInt32(Math.Round(Math.Pow(d, 2)));\n          \
    \  int m = Convert.ToInt32(Math.Round(Math.Pow(d, 2)));\n            if (n % 2\
    \ != 0 && n % 2 != 1) {\n                count++;\n            }\n           \
    \ if (m % 2 != 0 && m % 2 != 1) {\n                count++;\n            }\n \
    \           if (n <= 10) {\n                if (n % 2 != 0) {\n              \
    \      count++;\n                }\n                if (m % 2 != 0) {\n      \
    \              count++;\n                }\n            }\n        }\n       \
    \ if (m > 10) {\n            int m = Convert.ToInt32(Math.Round(Math.Pow(d, 2)));\n\
    \            if (m % 2 != 0) {\n                count++;\n            }\n    \
    \    }\n        if (n <= 10) {\n            double d = Math.Sqrt(Math.Pow(n, 2)\
    \ - Math.Pow(m, 2));\n            double c = Math.Pow(d, 2);\n            double\
    \ b = Math.Pow(d, 2);\n            double a = Math.Pow(d, 2);\n            if\
    \ (c <= 10) {\n                if (b <= 10) {\n                    if (a <= 10)\
    \ {\n                        if (c <= 10) {\n                            if (b\
    \ <= 10) {\n                                count++;\n                       \
    \     }\n                        }\n                    }\n                }\n\
    \            }\n        }\n        return count;", "        if (nums == null)\
    \ return 0;\n        return nums.Where(num => num > 10 && num % 2 == 0 && num\
    \ % 3 != 0 && num % 7 == 0).Count();", "        long ret = 0;\n        foreach\
    \ (long num in nums)\n            if (num > 10) {\n                if (num % 2\
    \ == 0 && num.ToString().First().ToString().ToLower()[0] == 'o' && num.ToString().Last().ToString().ToLower()[0]\
    \ == 'd')\n                    ret += 1;\n            }\n        return ret;",
  "        var nr = nums.Count;\n        var odd = new List<long>();\n        var\
    \ even = new List<long>();\n        foreach(var n in nums) {\n            if (n\
    \ >= 10) {\n                if (n % 2 != 0) {\n                    if (n % 2 ==\
    \ 1) {\n                        odd.Add(n);\n                    }\n         \
    \       }\n            } else {\n                if (n % 2 == 0) {\n         \
    \           even.Add(n);\n                }\n            }\n        }\n      \
    \  int odd_count = odd.Count;\n        int even_count = even.Count;\n        var\
    \ r = nr / (odd);\n        return nr % r == 0 ? odd_count / even.Count : odd_count\
    \ / even_count;", '        return nums.Count(n => n > 10 && Math.Truncate(n) %
    2 != 0 && Math.Truncate(n) % 2 == 1);', "        long numsCount = nums.Count();\n\
    \        long first = 0;\n        long last = 0;\n        for (int i = 0; i <\
    \ numsCount; i++) {\n            long num = nums[i];\n            if (num > 10)\
    \ {\n                first = 1;\n                last = num % 10;\n          \
    \      if (last % 2 == 1) {\n                    first = 0;\n                }\n\
    \            }\n        }\n        return numsCount - first;", "        long sum\
    \ = 0;\n        foreach(var number in nums) {\n            if (number > 10 &&\
    \ IsOdd(number) && IsOdd(nums.Last())) sum++;\n        }\n        return sum;",
  "        var res = nums.Where(x => x > 10 && x % 2 != 0 && x % 10 % 2 != 0).Count();\n\
    \        return res;", '        return nums.Where(num => num > 10L && num.First()
    % 2 != 0 && num.Last() % 2 != 0).Count();', "        if (nums.Count == 0) return\
    \ 0;\n        if (nums.Count == 1) return nums.Single();\n        long sum = 0;\n\
    \        long last = 0;\n        long first = 0;\n        long evenSum = 0;\n\
    \        long oddSum = 0;\n        for (int i = 0; i < nums.Count - 1; i++) {\n\
    \            sum += nums[i];\n            if (i % 2 == 0) {\n                evenSum\
    \ += nums[i];\n            } else {\n                oddSum += nums[i];\n    \
    \        }\n        }\n        first = sum % 10;\n        last = sum / 10 % 10;\n\
    \        if (evenSum > 10 && first % 2 == 1) return evenSum;\n        if (oddSum\
    \ > 10 && first % 2 != 1) return oddSum;\n        return nums.Count(x => (x >=\
    \ 10 && x % 2 == 1 || x % 2 == 0) == (x >= 10 && x % 2 == 1));", "        // Solution:\n\
    \        // 1. Find the first number which is greater than 10\n        // 2. Count\
    \ how many times it appears in the list \n        // 3. Find the last number which\
    \ is greater than 10\n        // 4. Count how many times it appears in the list\
    \ \n        // 5. Find the first number which is odd and odd + 1 is greater than\
    \ 10\n        // 6. Count how many times it appears in the list \n        // 7.\
    \ Find the last number which is odd and odd + 1 is greater than 10\n        //\
    \ 8. Count how many times it appears in the list \n        // 9. return count\
    \ of numbers which have first and last digit odd and odd + 1\n        // 10. Return\
    \ the number which has the first and last digit odd \n        // 11. Return the\
    \ number which has the last digit odd \n        // 12. Return the first number\
    \ which is odd \n        // 13. Return the last number which is odd \n       \
    \ // 14. Return the sum of all numbers which have first and last digit odd and\
    \ odd+1\n        // 15. Return the sum of all numbers which have last digit odd\n\
    \        long numcount = (nums.FirstOrDefault(x => x > 10L) > 10L) ? (nums.First(x\
    \ => x > 10L) + 1) : nums.Count;\n        long oddCount = (nums.Where(x => x %\
    \ 2 == 1).Count());\n        long firstOdd = (nums.FirstOrDefault(x => x % 2 ==\
    \ 1) && (nums.FirstOrDefault(x => x % 2 == 1) + 1L) > 10L) ? (nums.First(x =>\
    \ x % 2 == 1) && (nums.FirstOrDefault(x => x % 2 == 1) + 1L) + 1) : nums.FirstOrDefault(x\
    \ => x % 2 == 1);\n        long lastOdd = (nums.LastOrDefault(x => x % 2 == 1)\
    \ && (nums.LastOrDefault(x => x % 2 == 1) + 1L) > 10L) ? (nums.Last(x => x % 2\
    \ == 1) && (nums.LastOrDefault(x => x % 2 == 1) + 1L) + 1) : nums.LastOrDefault(x\
    \ => x % 2 == 1);\n        long oddSum = nums.Sum(x => x % 2 == 1);\n        long\
    \ firstOddSum = nums.Sum(x => (x % 2 == 1) && (x % 2 == 1) + (1L));\n        long\
    \ lastOddSum = nums.Sum(x => (x % 2 == 1) && (x % 2 == 1) + (1L));\n        return\
    \ numcount + oddCount + firstOdd + lastOdd + oddSum + firstOddSum + lastOddSum;",
  '        return nums.Where(n => n > 10L).Count(n => n == 1L) && nums.Where(n =>
    n % 2 == 1).Count(n => n % 2 == 0);', "        int count = 0;\n        foreach(var\
    \ n in nums) {\n            if (n > 10L) {\n                count++;\n       \
    \     }\n        }\n        return count;", "        long odds = 0;\n        long\
    \ evens = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            long\
    \ n = nums[i];\n            odds += (n%10) == 1;\n            evens += (n%10)\
    \ == 0;\n        }\n        if (odds + evens > 10) {\n            return nums.Count;\n\
    \        }\n        else {\n            return 0;\n        }", "        int odds\
    \ = 0, evens = 0, firstOdds = 0, lastOdds = 0;\n        foreach(long num in nums)\
    \ {\n            int n = (int)Math.Round(num);\n            if (n == num) {\n\
    \                odds++;\n            }\n            if (n % 2 == 1) {\n     \
    \           evens++;\n            }\n            if (num > 10 && odds > 0 && evens\
    \ > 0) {\n                if ((n % 10 == 1) && (num % 10 != 0)) {\n          \
    \          firstOdds++;\n                }\n                if ((num % 10) ==\
    \ 9) {\n                    lastOdds++;\n                }\n            }\n  \
    \      }\n        return firstOdds + lastOdds;", "        var filtered = nums.Where(n\
    \ => n > 10).ToList();\n        var odd = filtered.Where(n => n % 2 != 0);\n \
    \       var first = odd.Where(n => n % 2 != 0 && n < 10);\n        var last =\
    \ odd.Reverse().Where(n => n % 2 != 0 && n < 10);\n        if (first.Count() >\
    \ 0 && last.Count() > 0)\n            return first.Count() + last.Count();\n \
    \       else\n            return filtered.Count();", "        long n = 0;\n  \
    \      foreach(var num in nums) {\n            var first = num / 10;\n       \
    \     var second = num % 10;\n            if( first % 2 != 0 && second % 2 ==\
    \ 1 ) {\n                n += 1;\n            }\n        }\n        return n;",
  "        if (nums == null || nums.Count < 1) return 0;\n        var oddFirst = new\
    \ List<long>();\n        var oddLast = new List<long>();\n        int count =\
    \ 0;\n        var temp = nums[0]; // the number that we are working on\n     \
    \   foreach (var n in nums) {\n            if (n > 10 && n % 2 == 1) {\n     \
    \           oddFirst.Add(temp);\n                oddLast.Add(n);\n           \
    \     temp = n;\n            } else\n                count++;\n        }\n   \
    \     oddFirst.Add(temp);\n        oddFirst.ForEach(x => { if (x > 10 && x % 2\
    \ == 1) { count += 1; } });\n        oddLast.ForEach(x => { if (x > 10 && x %\
    \ 2 == 1) { count += 1; } });\n        return count;", "        Debug.Assert(nums.Count\
    \ > 0);\n        long count = 1;\n        foreach(var n in nums) {\n         \
    \   if (n > 10 && n.ToString().First() == '1' && (n.ToString().Last() % 2) ==\
    \ 0)\n                count++;\n        }\n        return count;", "        long\
    \ count = 0;\n        foreach (long num in nums) {\n            if (num > 10 &&\
    \ num % 2 == 0 && num % 3 == 0 && num % 5 == 0 && num % 7 == 0 && num % 9 == 0)\
    \ {\n                count += 1;\n            }\n        }\n        return count;",
  "        if (nums.Count == 0) return 0;\n        long n = nums.Count - 1;\n    \
    \    long sum = 0;\n        long x = 0;\n        int count = 0;\n        for (int\
    \ i = 0; i < nums.Count; i++) {\n            x = sum + nums[i];\n            count++;\n\
    \            if (x > 10) {\n                sum = x;\n                count =\
    \ 0;\n            } else if (x <= 10) {\n                if (i % 2 == 0) {\n \
    \                   sum += x;\n                    count++;\n                }\n\
    \            }\n        }\n        if (count % 2 != 0) {\n            return sum;\n\
    \        }\n        return 0;", "        long[] arr= nums.ToArray();\n       \
    \ int odd_first= 0, odd_last= 0;\n        for(int i=arr.Length-1; i>0; i--) {\n\
    \            if(arr[i]%2==1) {\n                odd_first++;\n            }\n\
    \            if(arr[i-1]%2==1) {\n                odd_last++;\n            }\n\
    \        }\n        return (arr.Where(x=> x > 10).Count() >1) &&\n           \
    \     (odd_first%2 ==1) && (odd_last%2==1);", "        long count = 0, last =\
    \ 0;\n        foreach (long i in nums) {\n            if (i > 10) {\n        \
    \        if (last % 2 == 0) {\n                    if (i % 2 != 0) count++;\n\
    \                } else if (last % 2 != 1) {\n                    count++;\n \
    \               }\n            }\n            last = i;\n        }\n        return\
    \ count;", "        if (nums == null || nums.Count < 1)\n            return 0;\n\
    \        long total = 0;\n        long sum = 1;\n        for (int i = 0; i < nums.Count;\
    \ i++) {\n            sum += nums[i];\n        }\n        long firstOdd = 0;\n\
    \        long lastOdd = 0;\n        foreach (var num in nums) {\n            if\
    \ (num > 10 && num % 2 == 1) {\n                firstOdd += num;\n           \
    \ }\n            if (num < -10 && num % 2 == 1) {\n                lastOdd +=\
    \ num;\n            }\n        }\n        if ((firstOdd % 2) != 1) {\n       \
    \     firstOdd += 1;\n        }\n        if ((lastOdd % 2) != 1) {\n         \
    \   lastOdd += 1;\n        }\n        return (nums.Count - sum) - firstOdd - lastOdd;",
  "        long numsCount = nums.Count;\n        long odd = 0, even = 0, firstOdd\
    \ = 0;\n        long firstEven = 0;\n        long total = 0;\n        foreach\
    \ (long n in nums) {\n            if (n > 10) {\n                odd++;\n    \
    \            if (n % 2 == 0)\n                    even++;\n                if\
    \ (odd % 2 == 1)\n                    firstEven++;\n            }\n          \
    \  else {\n                total += n;\n            }\n        }\n        if (numsCount\
    \ < 1)\n            throw new ArgumentException(\"List cannot be empty.\");\n\
    \        if (numsCount > 1)\n            firstOdd = firstEven / 2;\n        if\
    \ (firstOdd % 2 == 1)\n            firstOdd += 2;\n        if (even % 2 == 1)\n\
    \            even += 2;\n        if (odd != 0) {\n            if (firstOdd % 2\
    \ == 1)\n                total += firstOdd;\n            if (even % 2 == 1)\n\
    \                total += even;\n        }\n        return total;", "        int\
    \ result = 0;\n        foreach (long num in nums) {\n            if (num > 10\
    \ && num % 2 == 1 && num % 2 != 0 && num % 10 == 1) {\n                result++;\n\
    \            }\n        }\n        return result;", "        long result = 0;\n\
    \        foreach (long i in nums) {\n            long first = i / 100;\n     \
    \       long last = i % 100;\n            long firstodd = first % 10;\n      \
    \      long lastodd = last % 10;\n            if (firstodd % 2 == 1 && lastodd\
    \ % 2 == 1) {\n                result ++;\n            }\n        }\n        return\
    \ result;", "        long total = 0;\n        long count = 0;\n        foreach\
    \ (long num in nums) {\n            if (num > 10 && num / 10 % 2 == 1 && (num\
    \ % 100 / 10) % 2 != 1) {\n                count++;\n                total +=\
    \ num;\n            }\n        }\n        return count;", "        long count\
    \ = 0;\n        foreach (long n in nums)\n        {\n            bool isGreater\
    \ = (n % 10) > 10;\n            bool isEven = n % 2 == 0;\n            bool isOddFirst\
    \ = n % 10 > 9;\n            bool isOddLast = n % 10 < 9;\n\n            if (isGreater\
    \ && isEven && isOddFirst && isOddLast)\n                count++;\n        }\n\
    \        return count;", "        long sum = 0;\n        foreach(long n in nums)\
    \ {\n            long n0 = n % 10; //first digit\n            long n1 = n / 10;\
    \ //last digit\n            if( (n0 % 2 == 1) && (n1 % 2 == 1) ) { //if both are\
    \ odd\n                sum += n; //add number\n            }\n        }\n    \
    \    return sum;", "        int oddfirst = 0;\n        int oddlast = 0;\n\n  \
    \      int evenfirst = 0;\n        int evenlast = 0;\n\n        int count = nums.Count();\n\
    \        long sum = 0;\n\n        foreach (long n in nums) {\n            if (n\
    \ < 0) {\n                continue;\n            }\n            int firstDigit\
    \ = n % 10;\n            int lastDigit = (n / 10) % 10;\n            if (firstDigit\
    \ % 2 == 0) {\n                evenfirst += lastDigit;\n            } else {\n\
    \                oddfirst += lastDigit;\n            }\n            if (lastDigit\
    \ % 2 == 0) {\n                evenlast += firstDigit;\n            } else {\n\
    \                oddlast += firstDigit;\n            }\n            sum += n;\n\
    \        }\n        if (oddfirst % 2 != 0) {\n            oddfirst = 1;\n    \
    \    }\n        if (oddlast % 2 != 0) {\n            oddlast = 1;\n        }\n\
    \        if (evenfirst % 2 != 0) {\n            evenfirst = 1;\n        }\n  \
    \      if (evenlast % 2 != 0) {\n            evenlast = 1;\n        }\n      \
    \  count = count - (oddfirst + oddlast + evenfirst + evenlast);\n        if (count\
    \ == 0) {\n            return 0;\n        }\n\n        long nSum = 0;\n      \
    \  int i = count;\n        while (i > 1) {\n            long n = (long)((double)sum\
    \ / i);\n            nSum += (n * i);\n            i--;\n        }\n        return\
    \ nSum;", "        if (nums.Count < 2) {\n            throw new Exception(\"At\
    \ least two numbers required\");\n        }\n\n        long sum = 0;\n       \
    \ long firstDivisor = nums[0].GetFirstDigitDivisor();\n        long lastDivisor\
    \ = nums[0].GetLastDigitDivisor();\n        foreach (var num in nums) {\n    \
    \        if (num > 10) {\n                if (firstDivisor % 2 == 1 && lastDivisor\
    \ % 2 == 1) {\n                    sum++;\n                }\n            }\n\n\
    \            firstDivisor = num.GetFirstDigitDivisor();\n            lastDivisor\
    \ = num.GetLastDigitDivisor();\n        }\n\n        return sum;", "        int\
    \ count = (int)nums.Count(num => (num > 10 && ((num % 2) == (num >> 1))));\n \
    \       return (count == 0 ? 0 : count);", '        // your code', "        long[]\
    \ arr = nums.ToArray();\n        int numOdd = arr[0].GetBitsLength(10).GetBit(1);\n\
    \        int numOdd1 = arr[0].GetBitsLength(10).GetBit(2);\n        int numOdd2\
    \ = arr[0].GetBitsLength(10).GetBit(3);\n        int numOdd3 = arr[0].GetBitsLength(10).GetBit(4);\n\
    \        int numOdd4 = arr[0].GetBitsLength(10).GetBit(5);\n        int numOdd5\
    \ = arr[0].GetBitsLength(10).GetBit(6);\n        int numOdd6 = arr[0].GetBitsLength(10).GetBit(7);\n\
    \        int numOdd7 = arr[0].GetBitsLength(10).GetBit(8);\n        int numOdd8\
    \ = arr[0].GetBitsLength(10).GetBit(9);\n        int count = 10;\n        for\
    \ (int i = 0; i < arr.Length; i++) {\n            int count = arr[i].GetBitsLength(10).GetBit(0);\n\
    \            if (count > 10 || (count > 0 && arr[i].GetBitsLength(10).GetBit(0)\
    \ & 1) == 1) {\n                numOdd += 1;\n                count += numOdd;\n\
    \            }\n            if (count > 10 || (count > 0 && arr[i].GetBitsLength(10).GetBit(0)\
    \ & 1) == 2) {\n                numOdd1 += 1;\n                count += numOdd1;\n\
    \            }\n            if (count > 10 || (count > 0 && arr[i].GetBitsLength(10).GetBit(0)\
    \ & 1) == 3) {\n                numOdd2 += 1;\n                count += numOdd2;\n\
    \            }\n            if (count > 10 || (count > 0 && arr[i].GetBitsLength(10).GetBit(0)\
    \ & 1) == 4) {\n                numOdd3 += 1;\n                count += numOdd3;\n\
    \            }\n            if (count > 10 || (count > 0 && arr[i].GetBitsLength(10).GetBit(0)\
    \ & 1) == 5) {\n                numOdd4 += 1;\n                count += numOdd4;\n\
    \            }\n            if (count > 10 || (count > 0 && arr[i].GetBitsLength(10).GetBit(0)\
    \ & 1) == 6) {\n                numOdd5 += 1;\n                count += numOdd5;\n\
    \            }\n            if (count > 10 || (count > 0 && arr[i].GetBitsLength(10).GetBit(0)\
    \ & 1) == 7) {\n                numOdd6 += 1;\n                count += numOdd6;\n\
    \            }\n            if (count > 10 || (count > 0 && arr[i].GetBitsLength(10).Get",
  "        long count = 0;\n        long[] temp = new long[nums.Count];\n        for\
    \ (int i = 0; i < nums.Count; i++) {\n            temp[i] = nums[i];\n       \
    \ }\n        for (int i = 0; i < temp.Length; i++) {\n            long x = temp[i];\n\
    \            count++;\n            while (x > 0) {\n                if (x % 2\
    \ == 1 && x % 2 != 0) {\n                    x += temp[i - 1];\n             \
    \       break;\n                }\n                x = x / 2;\n              \
    \  temp[i] = x;\n                count++;\n            }\n        }\n        return\
    \ count;", "        long num = 0;\n        foreach (long n in nums) {\n      \
    \      if ((n > 10L) && (n % 2L == 0L) && (n % 10L != 0L)) {\n               \
    \ num++;\n            }\n        }\n        return num;", "        long retVal\
    \ = 0;\n        foreach (long n in nums) {\n            if (n > 10) {\n      \
    \          if ((n & 1) == 1 && (n & 3) == 0) {\n                    if (n > 0\
    \ && n <= 9)\n                        retVal++;\n                }\n         \
    \       if ((n & 1) == 3 && (n & 3) == 1) {\n                    if (n >= 0 &&\
    \ n <= 9)\n                        retVal++;\n                }\n            }\n\
    \        }\n        return retVal;", "        long count = 0;\n        foreach\
    \ (long num in nums) {\n            if (num > 10 && num % 2 == 1 && num % 10 !=\
    \ 1 && num % 10 != 9) {\n                count++;\n            }\n        }\n\
    \        return count;", "        long odd1 = 0, odd2 = 0;\n        foreach (var\
    \ x in nums.Where(x => x > 10)) {\n            if (x % 2 == 1)\n             \
    \   odd1++;\n            else\n                odd2++;\n        }\n        return\
    \ (nums.Count() - odd1 - odd2);", "        long count = 0;\n        for(int i=0;\
    \ i<nums.Count; ++i) {\n            if (nums[i] > 10L) {\n                count++;\n\
    \                if(nums[i]%2 == 1 && nums[i]%2 == 0) {\n                    if(nums[i-1]%2\
    \ == 1 && nums[i-1]%2 == 0) {\n                        count++;\n            \
    \        }\n                }\n            }\n        }\n        return count;",
  "        int odd = nums.TakeWhile(x => x % 2 == 1).Count();\n        int oddfirst\
    \ = nums.TakeWhile(x => x % 2 == 1 && x != 0).Count();\n        int oddlast =\
    \ nums.TakeWhile(x => x % 2 == 1 && x == 0).Count();\n        if (odd != 1 &&\
    \ oddfirst % 2 == 1 && oddlast % 2 == 1) return oddfirst;\n        return odd;",
  "        bool firstOddFlag = false;\n        bool lastOddFlag = false;\n       \
    \ long count = 0;\n        foreach (long n in nums) {\n            count++;\n\
    \            bool firstOdd = ((n % 10) > 5);\n            if (firstOdd) {\n  \
    \              firstOddFlag = true;\n            }\n            if (firstOddFlag\
    \ && lastOddFlag) {\n                break;\n            }\n            bool lastOdd\
    \ = ((n % 10) < 9);\n            if (lastOdd) {\n                lastOddFlag =\
    \ true;\n            }\n        }\n        return count;", "        long l = 0;\n\
    \        foreach (long x in nums)\n            if (x > 10 && (x % 2 == 0 || x\
    \ % 5 == 0))\n                l++;\n        return l;", "        // TODO: implement\
    \ this function\n        return 0;", "        long count = 0;\n        double\
    \ sum = 0;\n        foreach(var a in nums) {\n            var f = Convert.ToDouble(a)\
    \ / 100;\n            sum += f;\n            int n = Convert.ToInt32(Math.Truncate(sum));\n\
    \            if (n % 2 != 0) {\n                count += 1;\n            }\n \
    \       }\n        return count;", "        long result = nums.Where(x => x >\
    \ 10 && x % 2 == 1 && x % 3 == 0).Count();\n        return result;", '        return
    nums.Where(num => num > 10).Where(num => (num & 1) == 1).Sum(num => num % 2) ==
    1;', '        return nums.Where(x => x > 10 && x.First % 2 == 1 && x.Last % 2
    == 1).Count();', "        long num = 0;\n        foreach (var i in nums) {\n \
    \           if (i > 10 && i % 2 != 0 && i % 2 != 1) {\n                num++;\n\
    \            }\n        }\n        return num;", "        long oddSum = 0, evenSum\
    \ = 0, firstOdd = 0, firstEven = 0, lastOdd = 0, lastEven = 0;\n        foreach\
    \ (var n in nums) {\n            if (n > 10) { oddSum += n; }\n            else\
    \ if (n <= 0) { evenSum += n; }\n            else {\n                if (n % 2\
    \ == 0) { evenSum += n; }\n                else { oddSum += n; }\n           \
    \ }\n            if (oddSum > 9) { firstOdd += 1; }\n            if (evenSum >\
    \ 9) { firstEven += 1; }\n            if (oddSum > 9) { lastOdd += 1; }\n    \
    \        if (evenSum > 9) { lastEven += 1; }\n        }\n        return oddSum\
    \ + evenSum;", "        var odd = false;\n        var firstOdd = false;\n    \
    \    var lastOdd = false;\n        var nums2 = nums.ToArray();\n        foreach\
    \ (var num in nums2) {\n            odd = !odd;\n            firstOdd = odd &\
    \ num % 2 == 1;\n            lastOdd = odd & num % 2 == 0;\n        }\n      \
    \  return nums.Where(num => num > 10L).Count();", "        long sum = 0;\n   \
    \     long i = 0;\n        bool flag = true;\n        while (i < nums.Count) {\n\
    \            if (nums[i] > 10 && (nums[i] % 2 == 0 && nums[i] % 3 != 0)) {\n \
    \               flag = true;\n            } else {\n                flag = false;\n\
    \            }\n            if (flag) {\n                sum += 1;\n         \
    \   }\n            i += 1;\n        }\n        return sum;", "        if (nums\
    \ == null) throw new ArgumentNullException(\"nums\");\n        Debug.Assert(nums.Count\
    \ > 0);\n        long odds = 0;\n        long evens = 0;\n        long totalEvens\
    \ = 0;\n        long totalOdds = 0;\n        long evenSum = 0;\n        long oddSum\
    \ = 0;\n        foreach (long num in nums) {\n            if (num % 2 == 0) {\n\
    \                evens++;\n                evenSum += num;\n            } else\
    \ {\n                odds++;\n                oddSum += num;\n            }\n\
    \        }\n        if (evens == 1) {\n            return evenSum;\n        }\n\
    \        if (odds == 1) {\n            return oddSum;\n        }\n        Debug.Assert(odds\
    \ > 0);\n        Debug.Assert(evens > 0);\n        Debug.Assert(evenSum > 0);\n\
    \        Debug.Assert(oddSum > 0);\n        long firstOdd = 0;\n        long lastOdd\
    \ = 0;\n        if (odds > 1) {\n            firstOdd = oddSum / odds;\n     \
    \       lastOdd = oddSum - (oddSum / odds) * odds;\n        }\n        if (evens\
    \ > 1) {\n            firstOdd = evenSum / evens;\n            lastOdd = evenSum\
    \ - (evenSum / evens) * evens;\n        }\n        if (odds == 1 || evens == 1)\
    \ {\n            return nums.First();\n        }\n        Debug.Assert(odds >\
    \ 0);\n        Debug.Assert(evens > 0);\n        Debug.Assert(odds > 0);\n   \
    \     Debug.Assert(evens > 0);\n        Debug.Assert(firstOdd >= 0 && lastOdd\
    \ >= 0);\n        Debug.Assert(firstOdd < lastOdd + 1);\n        Debug.Assert(lastOdd\
    \ < evenSum);\n        Debug.Assert(firstOdd + lastOdd < evenSum + oddSum);\n\
    \        Debug.Assert(firstOdd + lastOdd < evenSum + oddSum);\n        Debug.Assert(oddSum\
    \ == evenSum);\n        Debug.Assert(oddSum == evenSum);\n        Debug.Assert(oddSum\
    \ + evenSum == oddSum);\n        Debug.Assert(oddSum + evenSum == oddSum);\n \
    \       Debug.Assert(oddSum == evenSum);\n        Debug.Assert(oddSum + evenSum\
    \ == oddSum);\n        return oddSum > 10 && firstOdd % 2 == 1 && lastOdd % 2\
    \ == 1;", "        if (nums.Count < 1) return 0;\n        long[] digits = new\
    \ long[nums.Count];\n        for (int i = 0; i < nums.Count; i++) {\n        \
    \    digits[i] = nums[i];\n        }\n        bool firstOdd = false;\n       \
    \ bool lastOdd = false;\n        long sum = 0;\n        for (int i = 0; i < nums.Count;\
    \ i++) {\n            sum += digits[i];\n            if (digits[i] % 2 == 1) firstOdd\
    \ = true;\n            if (digits[i] % 2 == 0) lastOdd = true;\n        }\n  \
    \      \n        if (sum > 10) {\n            firstOdd = true;\n            lastOdd\
    \ = true;\n        }\n        \n        for (int i = 0; i < nums.Count; i++) {\n\
    \            if (firstOdd == lastOdd) {\n                firstOdd = false;\n \
    \           }\n            if (digits[i] % 2 == 1) {\n                lastOdd\
    \ = false;\n            }\n        }\n        return sum;", "        long count\
    \ = 0;\n        foreach (long x in nums)\n        {\n            if ((x % 2 !=\
    \ 0) || (x < 10))\n                continue;\n            if ((x % 10 == 1) ||\
    \ (x % 10 == 3) || (x % 10 == 5) || (x % 10 == 7) || (x % 10 == 9))\n        \
    \        continue;\n            if ((x % 100 == 1) || (x % 100 == 3) || (x % 100\
    \ == 5) || (x % 100 == 7) || (x % 100 == 9))\n                continue;\n    \
    \        if ((x % 1000 == 1) || (x % 1000 == 3) || (x % 1000 == 5) || (x % 1000\
    \ == 7) || (x % 1000 == 9))\n                continue;\n            if (x % 1000000000\
    \ > 10)\n                count++;\n        }\n        return count;", "      \
    \  List<long> newlist = new List<long>();\n        foreach (long i in nums) {\n\
    \            if (i>=10 && newlist.Count>0 && i%2==0 && i%2==1) {\n           \
    \     newlist.Add(i);\n            }\n        }\n        return newlist.Count;",
  "        long oddNum;\n        long evenNum;\n        long firstOddNum;\n      \
    \  long lastEvenNum;\n        if (nums.Count < 2) {\n            return nums.Count;\n\
    \        }\n        oddNum = nums.Where(x => x > 10).Count();\n        evenNum\
    \ = nums.Where(x => x % 2 == 0).Count();\n        firstOddNum = nums.Where(x =>\
    \ x % 2 != 0 && x % 10 == 0).Count();\n        lastEvenNum = nums.Where(x => x\
    \ % 2 != 0 && x % 10 != 0).Count();\n        return (oddNum + evenNum + firstOddNum\
    \ + lastEvenNum);", "        double total = 0;\n        for (int i = 0; i < nums.Count;\
    \ i++) {\n            total += nums[i];\n        }\n        if (total % 10 ==\
    \ 1) {\n            return nums.Count;\n        } else if (total % 10 == 2) {\n\
    \            if (nums.Count > 1) {\n                long first = nums[0];\n  \
    \              long last = nums[nums.Count - 1];\n                if (Math.Floor(first\
    \ / 10) % 2 != 0 && Math.Floor(last / 10) % 2 != 0) {\n                    return\
    \ nums.Count;\n                }\n            }\n        } else {\n          \
    \  long first = nums[0];\n            long last = nums[nums.Count - 1];\n    \
    \        if (Math.Floor(first / 10) % 2 == 0 && Math.Floor(last / 10) % 2 != 0)\
    \ {\n                return nums.Count;\n            }\n        }\n        return\
    \ 0;", "        var numsLong = nums.ToArray();\n        int maxIndex = 0;\n  \
    \      for (int i = 0; i < numsLong.Length; i++) {\n            int digits = Convert.ToInt32(numsLong[i].ToString());\n\
    \            if (digits > 10) {\n                maxIndex = i;\n             \
    \   break;\n            }\n        }\n        var startIndex = (int)((numsLong[maxIndex]\
    \ - numsLong[maxIndex - 1]) % 2);\n        var endIndex = (int)((numsLong[maxIndex]\
    \ - numsLong[maxIndex + 1]) % 2);\n        return nums.Count(x => (int)x > 10\
    \ && x % 2 == (startIndex + endIndex) % 2);", "        //get the length of the\
    \ list\n        int n = nums.Count;\n        //declare and initialize variables\n\
    \        bool firstOddDigitsOdd = false, lastOddDigitsOdd = false;\n        int\
    \ firstOddDigitsSum = 0, lastOddDigitsSum = 0;\n        int firstOddDigitsCount\
    \ = 0;\n        int lastOddDigitsCount = 0;\n        long sum = 0;\n        long\
    \ sumOfFirstOddDigits = 0;\n        long sumOfLastOddDigits = 0;\n        //iterate\
    \ over the list and check every element\n        for (int i = 0; i < n; i++)\n\
    \        {\n            //get the current element and check if it's greater than\
    \ 10\n            if (nums[i] > 10)\n            {\n                //add the\
    \ current element to sum and calculate the sum of first\n                //and\
    \ last odd digits, if any are odd\n                sum = (nums[i] + sum);\n  \
    \              sumOfFirstOddDigits = (nums[i] + sumOfFirstOddDigits);\n      \
    \          sumOfLastOddDigits = (nums[i] + sumOfLastOddDigits);\n            \
    \    if (sumOfFirstOddDigits % 2 == 1)\n                {\n                  \
    \  firstOddDigitsOdd = true;\n                    firstOddDigitsSum = (nums[i]\
    \ + firstOddDigitsSum);\n                }\n                if (sumOfLastOddDigits\
    \ % 2 == 1)\n                {\n                    lastOddDigitsOdd = true;\n\
    \                    lastOddDigitsSum = (nums[i] + lastOddDigitsSum);\n      \
    \          }\n            }\n            //check if current element is greater\
    \ than 10 and first and last \n            //odd digits are odd\n            if\
    \ (nums[i] > 10 && (firstOddDigitsOdd || lastOddDigitsOdd))\n            {\n \
    \               //add 1 to counters\n                firstOddDigitsCount++;\n\
    \                lastOddDigitsCount++;\n            }\n        }\n        //return\
    \ the count\n        return (n);", "        long sum = 0;\n        for (int i\
    \ = 0; i < nums.Count; i++) {\n            int digit = nums[i].ToString().Last().ToString().Last().ToString();\n\
    \            bool firstOdd = (digit % 2) == 1;\n            bool lastOdd = (digit\
    \ % 2) == 1;\n            bool bothOdd = (firstOdd && lastOdd);\n            if\
    \ ((nums[i] > 10) && (firstOdd && lastOdd)) {\n                sum += nums[i];\n\
    \            }\n        }\n        return sum;", "        // If nums is empty\
    \ or null, return 0\n        if (nums.Count == 0 || nums == null) \n         \
    \   return 0;\n        long sum = 0;\n        List<long> filter = new List<long>();\n\
    \        foreach (long item in nums) {\n            int firstDigit = item % 10;\n\
    \            int lastDigit = item / 10; \n            int sumFirstDigit = firstDigit\
    \ % 2;\n            int sumLastDigit = lastDigit % 2;\n            int sumOdd\
    \ = firstDigit % 2 == 0 && lastDigit % 2 != 0;\n            // if item is greater\
    \ than 10 and either first or last digits are odd, add it to filter\n        \
    \    if (sumOdd && (sumFirstDigit == 1 || sumLastDigit == 1)) {\n            \
    \    filter.Add(item);\n            }\n        }\n        // If there are no even\
    \ digits in filter then return 0\n        if (filter.Count == 0)\n           \
    \ return 0;\n        // return number of even digits in filter\n        return\
    \ filter.Count;", "        var num = nums[0];\n        if (nums.Count() > 1) {\n\
    \            var lastNum = nums.Last();\n            var firstNum = nums.First();\n\
    \            if (lastNum % 10 == 1 && firstNum % 10 == 1) return 1;\n        \
    \    if (lastNum % 10 == 1 && firstNum % 10 != 1) return 1;\n            if (lastNum\
    \ % 10 != 1 && firstNum % 10 == 1) return 1;\n            if (lastNum % 10 !=\
    \ 1 && firstNum % 10 != 1) return 1;\n        }\n        return 0;", "       \
    \ int odd = nums.Where(a => a % 2 == 1).Count();\n        int first = nums.First()\
    \ % 2;\n        int last = nums.Last() % 2;\n        if (odd > 0 && first % 2\
    \ != 0 && last % 2 != 0)\n            return odd + 1;\n        return odd;", " \
    \       if (nums.Count < 1 || nums.Count == 0) return 0;\n        long even =\
    \ 1;\n        long odd = 0;\n        long oddlast = 0;\n        long evenlast\
    \ = 0;\n        long evenodd = 1;\n        long oddeven = 1;\n        long evenoddlast\
    \ = 1;\n        long oddevenlast = 1;\n        for (int i = 0; i < nums.Count;\
    \ i++) {\n            long num = nums[i];\n            even = even + num % 2;\n\
    \            odd = odd + num / 2;\n            oddlast = oddlast + num / 10;\n\
    \            evenlast = evenlast + num % 10;\n            evenodd = evenodd +\
    \ num / 100;\n            oddeven = oddeven + num / 10000;\n            evenoddlast\
    \ = evenoddlast + num / 1000000;\n            oddevenlast = oddevenlast + num\
    \ / 10000000;\n        }\n        if (odd > 10 && oddlast % 2 == 1) { return oddeven;\
    \ }\n        if (even > 10 && evenlast % 2 == 1) { return evenodd; }\n       \
    \ return evenodd * nums.Count;", "        long count=0;\n        foreach (long\
    \ num in nums) {\n            if (num>10 && num % 2 == 1 && num % 2 != 0) {\n\
    \                count++;\n            }\n        }\n        return count;", " \
    \       int x = nums.Where(n => n > 10).Where(n => n % 2 != 0).Count();\n    \
    \    return x;", "        int count = 0;\n        long sum = 0;\n        for (int\
    \ i = 0; i < nums.Count; i++) {\n            sum = sum + nums[i];\n          \
    \  if (nums[i] % 2 == 0) {\n                count++;\n            }\n        \
    \    if (nums[i] > 10) {\n                if (nums[i - 1] % 2 == 0 && nums[i +\
    \ 1] % 2 == 1) {\n                    count++;\n                }\n          \
    \  }\n        }\n        return count;", "        long sum = 0;\n        foreach\
    \ (var num in nums) {\n            if (num > 10) {\n                sum += 1;\n\
    \                sum += (num % 2 == 0) * (num % 2 == 1);\n            }\n    \
    \    }\n        return sum;", "        long count = 0;\n        foreach (long\
    \ num in nums) {\n            if (num > 10) {\n                int firstDigit\
    \ = num / Math.Pow(10, num.ToString().Length - 1);\n                int lastDigit\
    \ = num % Math.Pow(10, num.ToString().Length - 1);\n                if (firstDigit\
    \ % 2 == 1 && lastDigit % 2 == 1)\n                    count++;\n            }\n\
    \        }\n        return count;", "        var odds = nums.Where(d => (d % 2)\
    \ == 1).ToList();\n        var firstOdds = odds.Where(d => (d % 10) == 1).ToList();\n\
    \        var lastOdds = odds.Where(d => (d % 10) == 9).ToList();\n\n        var\
    \ totalOdds = firstOdds.Count + lastOdds.Count;\n        if (totalOdds < 2) {\n\
    \            return 0;\n        }\n        var firstFirstOdds = firstOdds.Intersect(firstOdds);\n\
    \        var firstLastOdds = firstOdds.Intersect(lastOdds);\n        var lastFirstOdds\
    \ = lastOdds.Intersect(firstOdds);\n        var lastLastOdds = lastOdds.Intersect(lastOdds);\n\
    \        var firstLastAndFirstOdds = firstOdds.Intersect(lastOdds);\n        var\
    \ firstLastAndLastOdds = firstOdds.Intersect(lastOdds);\n        var lastAndFirstOdds\
    \ = lastOdds.Intersect(firstOdds);\n        var lastAndLastOdds = lastOdds.Intersect(lastOdds);\n\
    \        var firstAndLastAndFirstOdds = firstOdds.Intersect(lastOdds);\n     \
    \   var firstAndLastAndLastOdds = firstOdds.Intersect(lastOdds);\n        var\
    \ lastAndLastAndFirstOdds = lastOdds.Intersect(firstOdds);\n        var lastAndLastAndLastOdds\
    \ = lastOdds.Intersect(lastOdds);\n\n        var firstAndFirstOddsCount = firstOdds.Count\
    \ + (firstOdds.Count - firstAndFirstOdds.Count);\n        var firstAndLastOddsCount\
    \ = firstOdds.Count + (lastOdds.Count - firstAndLastOdds.Count);\n        var\
    \ lastAndFirstOddsCount = lastOdds.Count + (firstOdds.Count - lastAndFirstOdds.Count);\n\
    \        var lastAndLastOddsCount = lastOdds.Count + (lastOdds.Count - lastAndLastOdds.Count);\n\
    \n        var firstAndFirstOddsCountOdds = firstOdds.Count + (firstOdds.Count\
    \ - firstAndFirstOddsCount);\n        var firstAndLastOddsCountOdds = firstOdds.Count\
    \ + (lastOdds.Count - firstAndLastOddsCount);\n        var lastAndFirstOddsCountO",
  "        long counter = 0;\n        foreach (long num in nums) {\n            if\
    \ ((num > 10) && ((num % 2) == 1)) {\n                counter += 1;\n        \
    \    }\n            if ((num > 10) && ((num % 2) == 0)) {\n                if\
    \ ((num % 2) == 1) {\n                    counter += 1;\n                }\n \
    \               else {\n                    counter += 0;\n                }\n\
    \            }\n        }\n        return counter;", "        if (nums.Count <=\
    \ 0) return 0;\n        var first = (nums[0] % 10);\n        var last = nums[nums.Count\
    \ - 1] % 10;\n        var count = 0;\n        foreach (var num in nums) {\n  \
    \          var num2 = num % 10;\n            if (num2 > 10) {\n              \
    \  if (num2 % 2 == 1) continue;\n            }\n            if (num2 > 10) {\n\
    \                if (num2 % 2 == 1) continue;\n            }\n            if ((first\
    \ % 2 == 1 && num % 2 == 1) || (last % 2 == 1 && num % 2 == 0)) return count +\
    \ 1;\n            count++;\n        }\n        return count;", "        long sum\
    \ = 0;\n        List<long> odd = new List<long>(new long[] { 1, 3, 5, 7, 9 });\n\
    \        foreach (long n in nums)\n            if (n < 10)\n                sum\
    \ += n;\n            else\n            {\n                long d = n % 100;\n\
    \                long f = n / 100;\n                if (d % 2 == 0 && f % 2 ==\
    \ 0 && d < 10 && f < 10) // only first and last are odd\n                    sum\
    \ += n;\n            }\n        return sum;", "        long result = new long();\n\
    \        bool valid = true;\n        for (long num : nums) {\n            if ((num\
    \ > 10) && (num % 2 == 1) && num >= 10) {\n                if (num % 2 == 0) {\n\
    \                    valid = (num % 2 == 1);\n                }\n            }\n\
    \        }\n        if (!valid) {\n            return result;\n        }\n   \
    \     long temp = new long();\n        for (int i = 0; i < nums.Count; i++) {\n\
    \            long num = nums[i];\n            if ((num > 10) && (num % 2 == 1)\
    \ && num >= 10) {\n                if (num % 2 == 0) {\n                    temp\
    \ = (num / 10) * 10;\n                    num = (num % 10);\n                \
    \    if (num % 2 == 0) {\n                        temp += temp;\n            \
    \        }\n                }\n            }\n        }\n        if (nums.Count\
    \ == 0) {\n            long temp = temp;\n        }\n        return temp;", " \
    \       long numsWithSpecialFilter = 0;\n        long[] numsArr = nums.ToArray();\n\
    \        for (int i = 0; i < numsArr.Length; i++) {\n            if (numsArr[i]\
    \ > 10 && numsArr[i] % 2 == 1 && numsArr[i] % 2 != 0) {\n                numsWithSpecialFilter++;\n\
    \            }\n        }\n        return numsWithSpecialFilter;", '        return
    nums.Where(num => num > 10).Count(num => num % 2 != 0);', "        long num =\
    \ 0;\n        foreach (var i in nums) {\n            if (i > 10L) {\n        \
    \        num++;\n            }\n            if (i.ToString().ToCharArray()[1]\
    \ % 2L == 0) {\n                num++;\n            }\n        }\n        return\
    \ num;", "        List<long> nums2 = new List<long>();\n        if (nums.Count\
    \ > 1) {\n            double first = nums[0].ToString().First();\n           \
    \ double last = nums[0].ToString().Last();\n            long last2 = Convert.ToInt64(last);\n\
    \            foreach (var num in nums) {\n                double first1 = num.ToString().First();\n\
    \                double last1 = num.ToString().Last();\n                long last1a\
    \ = Convert.ToInt64(last1);\n                long last1b = Convert.ToInt64(last1a);\n\
    \                if (last == last && first == first1 && last2 == last1a) {\n \
    \                   nums2.Add(num);\n                }\n            }\n      \
    \  }\n        return nums2.Count;", "        if (nums.Count == 0)\n          \
    \  return 0;\n        long sum = 0;\n        var min10 = nums.Min();\n       \
    \ var max10 = nums.Max();\n        if (min10 < 10)\n            min10 = 10;\n\
    \        if (max10 > 99)\n            max10 = 99;\n        var numsInRange = nums.Where(x\
    \ => x >= min10 && x <= max10);\n        var odds = numsInRange.Where(x => x %\
    \ 2 != 0).ToArray();\n        var firstOdd = odds.First();\n        var lastOdd\
    \ = odds.Last();\n        foreach (var item in numsInRange)\n        {\n     \
    \       if ((item > 10) && (item % 2 == 0) && (item < 100) && (firstOdd != 1)\
    \ && (lastOdd != 1)) \n            {\n                sum += 1;\n            }\n\
    \        }\n        return sum;", "        var result = 0;\n        for (int i\
    \ = 0; i < nums.Count; i++) {\n            if (nums[i] >= 10 && nums[i] % 2 ==\
    \ 0 && nums[i]%10 == 1) result = result + 1;\n        }\n        return result;",
  "        long total = 0;\n        foreach(long n in nums){\n            if((n %\
    \ 10 > 10) && ((n % 100) % 2 != 0)){\n                total += 1;\n          \
    \  }\n        }\n        return total;", "        long count = 0; // initialize\
    \ counter\n        int counter = 0; // initialize counter variable\n        long\
    \ largest = 10L; // set largest value\n        foreach (long num in nums) { //\
    \ for each number in the list\n            if (num > largest) { // if number >\
    \ largest\n                largest = num; // change largest value\n          \
    \  }\n        }\n        List<long> odd = new List<long>(); // create list of\
    \ odd digits\n        foreach (long num in nums) { // for each number in the list\n\
    \            if (num % 2 == 0) { // if number is even\n                odd.Add(num);\
    \ // add number to list\n            }\n        }\n        foreach (long num in\
    \ odd) { // for each number in the list\n            if (num > 10L) {\n      \
    \          count++; // count number\n            }\n        }\n        List<long>\
    \ first = new List<long>(); // create list of first digits of numbers\n      \
    \  foreach (long num in nums) { // for each number in the list\n            long\
    \ firstDigit = num % 10; // get first digit\n            if (firstDigit > 0 &&\
    \ firstDigit % 2 == 0) {\n                first.Add(num); // add number to list\n\
    \            }\n        }\n        foreach (long num in first) { // for each number\
    \ in the list\n            if (num > 10L) {\n                count++; // count\
    \ number\n            }\n        }\n        List<long> last = new List<long>();\
    \ // create list of last digits of numbers\n        foreach (long num in nums)\
    \ { // for each number in the list\n            long lastDigit = num % 10; //\
    \ get last digit\n            if (lastDigit > 0 && lastDigit % 2 == 1) {\n   \
    \             last.Add(num); // add number to list\n            }\n        }\n\
    \        foreach (long num in last) { // for each number in the list\n       \
    \     if (num > 10L) {\n                count++; // count number\n           \
    \ }\n        }\n        return count;", "        long ans = 0;\n        bool firstOddNum\
    \ = false;\n        bool lastOddNum = false;\n        foreach (long num in nums)\
    \ {\n            ans += (num > 10);\n            firstOddNum = (num % 10) % 2\
    \ == 1;\n            lastOddNum = (num % 10) % 2 == 1;\n        }\n        if\
    \ (ans > 0 && firstOddNum && lastOddNum)\n            return ans;\n        else\
    \ return 0;", "        long cnt = 0;\n        long sum = 0;\n        for (int\
    \ i = 0; i < nums.Count - 1; i++) {\n            sum += nums[i];\n           \
    \ if (sum >= 10L) {\n                cnt++;\n                sum = sum - 10L;\n\
    \            }\n        }\n        long lastnum;\n        long firstnum;\n   \
    \     if (sum < 10L) {\n            lastnum = sum;\n            firstnum = 1L;\n\
    \        } else {\n            lastnum = sum - 10L;\n            firstnum = sum;\n\
    \        }\n        if ((firstnum % 2L) && (lastnum % 2L)) {\n            cnt++;\n\
    \        }\n        return cnt;", "        if (nums.Count == 0) return 0;\n  \
    \      long count = 0;\n        long sum = 0;\n        long lastDigit = 0;\n \
    \       long firstDigit = 0;\n        foreach(long num in nums) {\n          \
    \  sum = sum + num;\n            if (sum > 10) {\n                if (firstDigit\
    \ % 2 == 1 && lastDigit % 2 == 1) count++;\n                sum = 0;\n       \
    \     }\n            lastDigit = num % 10;\n            firstDigit = num / 10;\n\
    \        }\n        return count;", "        var odd = nums.Where(x => x % 2 ==\
    \ 0).Count();\n        var even = nums.Where(x => x % 2 == 1).Count();\n     \
    \   var firstEven = (nums.Take(nums.Length - 1).Sum(x => x % 2 == 0))/nums.Count();\n\
    \        var lastEven = (nums.Reverse().Take(nums.Length - 1).Sum(x => x % 2 ==\
    \ 0))/nums.Count();\n        var firstOdd = (nums.Take(nums.Length - 1).Sum(x\
    \ => x % 2 == 1))/nums.Count();\n        var lastOdd = (nums.Reverse().Take(nums.Length\
    \ - 1).Sum(x => x % 2 == 1))/nums.Count();\n\n        return ((odd*2)+even+firstEven*2)+lastEven+firstOdd*2+lastOdd;",
  "        // Your code goes here\n        long numsSum = 0;\n        int numsSumCount\
    \ = 0;\n        for (int i = 0; i < nums.Count; i++)\n        {\n            numsSum\
    \ += nums[i];\n            if (nums[i] > 10)\n            {\n                numsSumCount++;\n\
    \            }\n        }\n        if (numsSum < 10 || numsSum > 10 && (numsSum\
    \ % 2) == 1)\n        {\n            return numsSumCount;\n        }\n       \
    \ else\n        {\n            return 0;\n        }", "        var result = nums.Where(x\
    \ => x > 10).Where(x => x.First % 2 == 1 && x.Last % 2 == 1).Count();\n      \
    \  return result;", "        int a = 0, b = 0, i = 0, j = 0;\n        List<long>\
    \ newnums = new List<long>();\n\n        while (i < nums.Count) {\n          \
    \  a = nums[i].ToString(10).Length;\n            b = nums[j].ToString(10).Length;\n\
    \            if (a > 10 && b > 10) {\n                i = i + 1;\n           \
    \     j = j + 1;\n                if (a % 2 == 0 && b % 2 == 1) {\n          \
    \          newnums.Add(nums[i]);\n                    newnums.Add(nums[j]);\n\
    \                }\n            } else if (a > 10 && b > 10) {\n             \
    \   i = i + 1;\n                j = j + 1;\n            } else if (a > 10 && b\
    \ > 10) {\n                newnums.Add(nums[i]);\n                newnums.Add(nums[j]);\n\
    \                i = i + 1;\n                j = j + 1;\n            }\n     \
    \   }\n        return newnums.Count;", "        int n = nums.Count;\n        int\
    \ odds = 0;\n        int evens = 0;\n        bool firstOdd;\n        bool lastOdd;\n\
    \        bool firstEven;\n        bool lastEven;\n        long sum = 0;\n    \
    \    long oddSum = 0;\n        long evenSum = 0;\n        long sum = nums.Sum();\n\
    \        for (int i = 0; i < n; i++) {\n            if (nums[i] % 2 == 0) {\n\
    \                evens += nums[i];\n                evenSum = evenSum + nums[i];\n\
    \            } else {\n                odds += nums[i];\n                oddSum\
    \ = oddSum + nums[i];\n            }\n        }\n        oddSum = oddSum % 10;\n\
    \        if (oddSum > 0) {\n            odds = odds + 1;\n            firstOdd\
    \ = true;\n        } else {\n            odds = odds - 1;\n            firstOdd\
    \ = false;\n        }\n        evenSum = evenSum % 10;\n        if (evenSum >\
    \ 0) {\n            evens = evens + 1;\n            lastEven = true;\n       \
    \ } else {\n            evens = evens - 1;\n            lastEven = false;\n  \
    \      }\n        firstOdd = firstOdd && (odds > 0);\n        lastEven = lastEven\
    \ && (evens > 0);\n        if (firstOdd) {\n            sum += odds;\n       \
    \ }\n        if (firstEven) {\n            sum += evens;\n        }\n        if\
    \ (lastEven) {\n            sum += evens;\n        }\n        if (lastOdd) {\n\
    \            sum += odds;\n        }\n        return sum;", "        long num\
    \ = 0;\n        foreach (var num in nums) {\n            if (num >= 10 && num\
    \ % 2 == 1 && (num % 10 == 1)) {\n                num++;\n            }\n    \
    \    }\n        return num;", "        int oddFirst = 0;\n        int oddLast\
    \ = 0;\n        int evenFirst = 0;\n        int evenLast = 0;\n        foreach\
    \ (var num in nums) {\n            if ((num % 10) > 10 || (num % 10) == 0)\n \
    \               oddLast++;\n            else\n                oddFirst++;\n  \
    \          if ((num % 10) % 2 == 1)\n                evenLast++;\n           \
    \ else\n                evenFirst++;\n        }\n        if (oddFirst == 1 &&\
    \ evenLast == 1)\n            return nums.Count;\n        if (oddFirst > 1 &&\
    \ evenLast > 1)\n            return nums.Count / 2;\n        return -1;", "  \
    \      long count = nums.Count(x => x > 10 && nums.Where((y, i) => i > 0 && i\
    \ % 2 == 0).Select(z => z % 2).Distinct().Count() % 2 != 0);\n        return count;",
  "        long ans = nums.Where(x => x > 10).Count() - 1;\n        ans = nums.Where(x\
    \ => x > 10 && x % 2 != 0).Count() - 1;\n        return ans;", "        long count\
    \ = 0;\n        foreach (long i in nums) {\n            if (i > 10) {\n      \
    \          if (i % 2 == 0) {\n                    if (i >= 10 && i % 2 != 0)\n\
    \                        count++;\n                    if (i % 2 != 0 && i >=\
    \ 10 && i % 2 == 0)\n                        count++;\n                }\n   \
    \             else if (i % 2 != 0)\n                    count++;\n           \
    \ }\n        }\n        return count;", "        long count=0;\n        long firstDigit=nums.First().ToString().First().ToLong();\n\
    \        long lastDigit=nums.Last().ToString().Last().ToLong();\n        foreach(long\
    \ n in nums)\n        {\n            long x=n.ToString().First().ToLong();\n \
    \           long y=n.ToString().Last().ToLong();\n            if (x%2==0 && y%2==0)\n\
    \            {\n                count++;\n            }\n        }\n        return\
    \ (long)count;", "        if (nums.Count > 0 && nums.All(n => n > 10)) {\n   \
    \         long firstdigit = nums.First();\n            long lastdigit = nums.Last();\n\
    \            long sumfirstdigit = 0;\n            long sumlastdigit = 0;\n   \
    \         long sumfirstlastodd = 1;\n            bool isFirstdigitOdd = false;\n\
    \            bool isLastdigitOdd = false;\n            foreach (long n in nums)\
    \ {\n                sumfirstdigit += n;\n                sumlastdigit += n;\n\
    \                isFirstdigitOdd = n % 2 == 0;\n                isLastdigitOdd\
    \ = n % 2 == 1;\n                if (isFirstdigitOdd && isLastdigitOdd)\n    \
    \                sumfirstlastodd += n;\n            }\n            return sumfirstlastodd\
    \ - (sumfirstdigit + sumlastdigit);\n        }\n        return 0L;", "       \
    \ long count = 0L;\n        foreach (long n in nums) {\n            if (n > 10\
    \ && (n % 10 == 1 || n % 10 == 3)) {\n                if (n / 10 == (n + 1) /\
    \ 10) count++;\n            }\n        }\n        return count;", "        var\
    \ oddsOfFirstDigit = new List<long>();\n        var oddsOfLastDigit = new List<long>();\n\
    \        var numsAsLongs = new List<long>(nums);\n        foreach (var num in\
    \ numsAsLongs) {\n            var firstDigit = num % 10;\n            var lastDigit\
    \ = num.ToString().Last();\n            oddsOfFirstDigit.Add(firstDigit % 2 ==\
    \ 1 ? firstDigit : 0);\n            oddsOfLastDigit.Add(lastDigit % 2 == 1 ? lastDigit\
    \ : 0);\n        }\n        return numsAsLongs.Count(n => n > 10 && odsOfFirstDigit.Contains(n\
    \ % 10) && odsOfLastDigit.Contains(n.ToString().Last()));", "        // Write\
    \ your code here\n        List<long> result = new List<long>();\n        foreach\
    \ (long i in nums)\n        {\n            if (i > 10 && Math.Sqrt(i) % 2 == 1)\n\
    \            {\n                result.Add(i);\n            }\n        }\n   \
    \     return result.Count;", "        long res = 0;\n        foreach (long x in\
    \ nums)\n        {\n            int count = 0;\n            long temp = x;\n \
    \           while (temp > 0) {\n                count++;\n                temp\
    \ /= 10;\n            }\n            if (count > 0 && count % 2 == 1)\n      \
    \      {\n                res = count + 1;\n            }\n        }\n       \
    \ return res;", "        long sum = 0;\n        long x = nums.First();\n     \
    \   long y = nums.Last();\n        long n = nums.Count;\n        for (int i =\
    \ 0; i < n; i++) {\n            if (nums[i] > 10L) {\n                sum++;\n\
    \            }\n            if (nums[i] > 10L && (nums[i] % 2 == 0)) {\n     \
    \           sum++;\n            }\n            if (nums[i] > 10L && nums[i] %\
    \ 2 != 0) {\n                sum++;\n            }\n        }\n        return\
    \ sum;", "        long ret = 0;\n        long sum = 0;\n        int count = 0;\n\
    \        foreach(long n in nums) {\n            sum += n;\n            count +=\
    \ 1;\n            if(n<10) {\n                if(n%2 != 0)\n                 \
    \   ret += n;\n                if(n%2 != 1 && sum % 2 != 0 && sum % 2 != 1)\n\
    \                    ret += n;\n            }\n        }\n        return ret;",
  "        long retValue = 0;\n        if (nums.Count > 0) {\n            for (int\
    \ i = 0; i < nums.Count - 1; i++) {\n                if (nums[i] > 10 && nums[i]\
    \ % 2 == 0 && nums[i + 1] % 2 == 0) {\n                    retValue++;\n     \
    \           }\n            }\n        }\n        return retValue;", "        int\
    \ count = 0;\n        foreach (var num in nums) {\n            if (num > 10) {\n\
    \                if (num % 2 == 0 && num % 2 != num / 2) count++;\n          \
    \  }\n        }\n        return count;", "        if (nums == null || nums.Count\
    \ == 0) return 0L;\n        long count = 0;\n        bool even = true;\n     \
    \   foreach (long i in nums) {\n            if (i > 10) {\n                if\
    \ (even) {\n                    if (i % 2 == 0) {\n                        count++;\n\
    \                    }\n                }\n                else {\n          \
    \          if (i % 2 != 0) {\n                        count++;\n             \
    \       }\n                }\n            }\n            else {\n            \
    \    if (i % 2 != 0) {\n                    even = false;\n                }\n\
    \            }\n        }\n        return count;", "        var list = new List<long>();\n\
    \        foreach (var item in nums) {\n            if ((item > 10) && (Math.Ceiling(item\
    \ / 10) % 2 == 1) && (Math.Ceiling(item / 10) % 5 == 1))\n                list.Add(item);\n\
    \        }\n        return list.Count;", "        // Your code here\n        long\
    \ count = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            long\
    \ num = nums[i];\n            if (num > 10 && num % 2 == 1 && num % 3 != 0) {\n\
    \                count++;\n            }\n        }\n        return count;", " \
    \       int count = nums.Where(x => x > 10L).Count();\n        string str = \"\
    \";\n        foreach (long num in nums) {\n            if (num > 10L && num %\
    \ 10L != 1L && num % 10L != 3L && num % 10L != 5L && num % 10L != 7L && num %\
    \ 10L != 9L)\n                str += num.ToString();\n        }\n        return\
    \ long.Parse(str);", "        long count = 0;\n        for(int i =0; i < nums.Count\
    \ - 1; i++) {\n            if(nums[i] == 9) {\n                if(i == nums.Count\
    \ - 1) count = nums[i];\n                continue;\n            }\n          \
    \  if(nums[i] > 10 && nums[i - 1] % 2 == 1 && nums[i + 1] % 2 == 1) {\n      \
    \          count++;\n            }\n        }\n        return count;", "     \
    \   // Sort the numbers in ascending order.\n        nums.Sort();\n\n        long\
    \ result = 0;\n\n        for (int i = 0; i < nums.Count; i++)\n        {\n   \
    \         int firstDigit = nums[i] % 10;\n            int lastDigit = nums[nums.Count\
    \ - 1] % 10;\n\n            if (firstDigit % 2 == 0 && lastDigit % 2 == 0)\n \
    \           {\n                result += 1;\n            }\n        }\n\n    \
    \    return result;", "        long counter = 0;\n        foreach (long num in\
    \ nums) {\n            if ((num > 10) && ((num % 10) % 2 == 1)) {\n          \
    \      if ((num % 10) == ((nums.First() % 10) % 2)) counter++;\n            }\n\
    \        }\n        return counter;", "        long sum = 0;\n        bool first_odd\
    \ = true;\n        bool last_odd = true;\n        foreach (long i in nums) {\n\
    \            sum += i;\n            if (first_odd && last_odd) {\n           \
    \     first_odd = false;\n                last_odd = false;\n            }\n \
    \           else {\n                if (i % 2 == 0) first_odd = true;\n      \
    \          if (i % 2 == 1) last_odd = true;\n            }\n        }\n      \
    \  return sum;", "        // Your code here\n        var odd = nums.Where(x =>\
    \ x % 2 == 1);\n        var even = nums.Where(x => x % 2 == 0);\n        var firstOdd\
    \ = nums.TakeWhile(x => x % 2 == 1).Where(x => x > 10);\n        var lastOdd =\
    \ nums.Skip(even.Count() - 1).TakeWhile(x => x % 2 == 1).Where(x => x > 10);\n\
    \        var firstEven = nums.TakeWhile(x => x % 2 == 0).Where(x => x > 10);\n\
    \        var lastEven = nums.Skip(even.Count() - 1).TakeWhile(x => x % 2 == 0).Where(x\
    \ => x > 10);\n        var count = even.Count() + odd.Count() + firstOdd.Count()\
    \ + lastOdd.Count() + firstEven.Count() + lastEven.Count() + firstEven.Count()\
    \ - lastEven.Count() - firstOdd.Count() - lastOdd.Count() - odd.Count();\n   \
    \     return count;", "        var result = new List<long>();\n        foreach\
    \ (var item in nums) {\n            if (item > 10 & item % 2 != 0) {\n       \
    \         result.Add(item);\n            }\n        }\n        return result.Count;",
  "        if (nums.Count < 2) { return 0; }\n        long sum = 0;\n        foreach\
    \ (long num in nums)\n        {\n            if (num > 10 && num % 2 == 0 && num\
    \ % 2 == 1)\n            {\n                sum = sum + 1;\n            }\n  \
    \      }\n        return sum;", "        var numList = nums.ToList();\n      \
    \  double total = 0;\n        int i = 0;\n        foreach (var n in numList) {\n\
    \            total += n;\n        }\n        var count = 0;\n        long curr\
    \ = total;\n        long lastN = 0;\n        while (curr != 0) {\n           \
    \ curr--;\n            if (curr > 10) {\n                count++;\n          \
    \  }\n            var last = (int)((last + curr / 10) % 10);\n            var\
    \ first = (int)((first + curr) % 10);\n            if (last == 1 && first == 1)\
    \ {\n                count++;\n            }\n            lastN = last;\n    \
    \        first = first;\n        }\n        return count;", "        long[] arr\
    \ = nums.ToArray();\n        if (arr.Length == 0) return 0;\n\n        long ret\
    \ = 0;\n        for (int i = 0; i < arr.Length; i++) {\n            if (arr[i]\
    \ > 10) {\n                ret++;\n            }\n            if (arr[i] % 2 ==\
    \ 0) {\n                if (arr[i] > 10 && arr[i] % 2 == 1) {\n              \
    \      ret++;\n                }\n                if (arr[i] > 10 && arr[i] %\
    \ 2 == 0) {\n                    ret++;\n                }\n            }\n  \
    \      }\n        return ret;", "        List<long> numsfiltered = new List<long>();\n\
    \        foreach(var n in nums) {\n            if (n > 10 && numsfiltered.Count\
    \ == 0) {\n                if (n % 2 == 0) {\n                    numsfiltered.Add(n);\n\
    \                }\n            }\n            if (n > 10 && numsfiltered.Count\
    \ > 0) {\n                if (n % 2 != 0 && numsfiltered.Last % 2 == 0) {\n  \
    \                  numsfiltered.Add(n);\n                }\n            }\n  \
    \      }\n        return numsfiltered.Count;", "        long odd = 0;\n      \
    \  long even = 0;\n        long count = 0;\n        foreach(long item in nums)\
    \ {\n            if((item % 10) > 10) {\n                count++;\n          \
    \      if(item % 10 > 5) {\n                    odd += 1;\n                }\n\
    \                if(item % 10 > 4) {\n                    even += 1;\n       \
    \         }\n            }\n        }\n        return (count+odd+even);", "  \
    \      if (nums.Count < 2) return 0;\n        long num0 = nums[0];\n        long\
    \ num1 = nums[nums.Count - 1];\n        long sum0 = 0, sum1 = 0;\n        long\
    \ sum;\n        double dSum;\n        if (num0 >= 10) return 0;\n        if (num1\
    \ == 0) return nums.Count;\n        sum0 = num0;\n        sum1 = num1;\n     \
    \   dSum = Math.Abs(num0 - num1);\n        if (dSum % 2 == 0) {\n            sum\
    \ = (long) (Math.Round((double)(Math.Pow(10, (dSum / 2) - 1) * sum1 / (Math.Pow(10,\
    \ (dSum / 2) - 1))) / 10.0);\n        } else {\n            sum = (long) (Math.Round((double)(Math.Pow(10,\
    \ (dSum / 2) - 1) * sum0 / (Math.Pow(10, (dSum / 2) - 1))) / 10.0);\n        }\n\
    \        double x = Math.Pow(10, (dSum / 2));\n        int i;\n        for (i\
    \ = (int) (Math.Floor(sum / x)); i <= sum; i += x) {\n            if (i % 2 ==\
    \ 1) {\n                sum -= i;\n            }\n        }\n        return (long)i;",
  "        // Your code here.\n        return nums.Where(n => n > 10L).Where(n =>\
    \ n % 2 == 1).Where(n => n % 2 == 1).Sum();", "        Debug.Assert(nums.Count\
    \ > 0);\n        if (nums.Count == 0) return 0;\n        long sum = 0;\n     \
    \   foreach (long num in nums) {\n            if (num > 10) {\n              \
    \  sum += (num % 10 > 1);\n                sum += (num % 10 > 9);\n          \
    \  }\n        }\n        return sum;", "        long count = 0;\n        foreach\
    \ (var num in nums) {\n            if (num > 10L) {\n                if (num %\
    \ 2 == 1L) {\n                    if ((num % 2L) % 2 == 1L) {\n              \
    \          count += 1;\n                    }\n                }\n           \
    \ }\n        }\n        return count;", "        int a=0, b=0, c=0;\n        List<long>\
    \ b2=new List<long>();\n        foreach(long n in nums){\n            a+=n%10;\n\
    \            b+=(n/10)%10;\n            c+=(n/100)%10;\n        }\n        long\
    \ r=a+b+c;\n        long d=r%10;\n        long e=r/10;\n        long f=r/100;\n\
    \        long g=(a+b)/10;\n        long h=(a+b+c)/100;\n        if(d>=1 && d<9\
    \ && e%2==1 && f%2==1){\n            b2.Add(n);\n        }\n        return b2.Count;",
  "        var newList = nums.Where(x => x > 10 && x%2 == 1 && x%2 == 0).ToList();\n\
    \        if (newList.Count > 0) {\n            var firstNum = newList[0];\n  \
    \          var lastNum = newList[newList.Count - 1];\n            if (firstNum\
    \ % 2 == 1) {\n                var firstNumLast = firstNum % (lastNum + 1);\n\
    \                if (firstNumLast % 2 == 1) {\n                    return firstNum;\n\
    \                } else {\n                    return firstNum % (lastNum + 1);\n\
    \                }\n            } else {\n                return firstNum % (lastNum\
    \ + 1);\n            }\n        }\n        return -1;", "        var odd1 = nums.FirstOrDefault(n\
    \ => n % 2 == 1);\n        var odd2 = nums.FirstOrDefault(n => n % 2 == 1);\n\
    \        var odd3 = (nums.FirstOrDefault(n => n % 2 == 1) && nums.LastOrDefault()\
    \ % 2 == 1);\n        if (odd1 != null && odd3 != null) {\n            var odd1\
    \ = odd1 % 2 == 1;\n            var odd2 = odd3 % 2 == 1;\n            if (odd1\
    \ && odd2) return odd3 == false ? nums.Count : nums.Count() - 1;\n           \
    \ else return nums.Count() - 2;\n        }\n        if (odd1 != null || odd2 !=\
    \ null || odd3 != null) return nums.Count() - 1;\n        return nums.Count();",
  "        var res = 0;\n        long sum = 0;\n        long first = 0;\n        long\
    \ last = 0;\n        long last2nd = 0;\n        foreach (var num in nums)\n  \
    \      {\n            sum += num;\n            if (sum > 10 && (num % 10) == 1)\n\
    \            {\n                first = num;\n            }\n            if (sum\
    \ > 10 && (num % 10) == 2)\n            {\n                last = num;\n     \
    \       }\n            if (sum > 10 && (num % 10) == 3)\n            {\n     \
    \           last2nd = num;\n            }\n        }\n        if (first % 2 !=\
    \ 0 && last % 2 != 0)\n        {\n            res += 1;\n        }\n        if\
    \ (first2nd % 2 != 0)\n        {\n            res += 2;\n        }\n        return\
    \ res;", "        long sum=0;\n        long count1=0; // count digits in first\
    \ number\n        long count2=0; // count digits in second number\n        long\
    \ lastdig=nums.Last().Value; // last digit\n        bool firstdig;\n        for\
    \ (long i = 0; i < nums.Count; i++) {\n            firstdig=nums.ElementAt(i).Value%2==0;\
    \ // get first digit\n            lastdig=nums.ElementAt(i).Value%10; // get last\
    \ digit\n            if (firstdig && lastdig==1) count1++; // add digits in first\
    \ number to count1\n            else if (lastdig==1) count2++; // add digits in\
    \ last number to count2\n            else sum+=nums.ElementAt(i).Value; // add\
    \ digit to sum\n        }\n        if (count1>1 && count2>1) return sum; //if\
    \ count1 is greater than 1 and count2 is greater than 1 then there is an odd number\
    \ and sum of all digits in list is greater than 10\n        else if (count1>1)\
    \ return sum+(nums.Count-count1)*10+count1; // if first digit is odd then count\
    \ digits in first number is greater than 1 and sum of all digits in list is greater\
    \ than 10\n        else if (count2>1) return sum+(nums.Count-count2)*10+count2;\
    \ // if last digit is odd then count digits in last number is greater than 1 and\
    \ sum of all digits in list is greater than 10\n        else return sum; //if\
    \ count1, count2 are both even then there is an even number and sum of all digits\
    \ in list is greater than 10", "        int firstOdd = nums.FirstOrDefault(x =>\
    \ x % 2 == 1);\n        int lastOdd = nums.LastOrDefault(x => x % 2 == 1);\n \
    \       return nums.Where(x => x > 10 && firstOdd % 2 == 1 && lastOdd % 2 == 1).Count();",
  "        long result = 0;\n        foreach (var num in nums) {\n            double\
    \ d = num.ToString().ToDouble();\n            if (d > 10) {\n                d\
    \ = Math.Round(d, 2);\n                while (d % 2 != 0) {\n                \
    \    d = Math.Round(d, 2);\n                }\n                if (d == ((int)d)\
    \ && d % 2 != 0) {\n                    result += 1;\n                }\n    \
    \        }\n        }\n        return result;", "        long count = 0;\n   \
    \     foreach (long num in nums) {\n            bool firstOddDigit = (num % 10)\
    \ % 2 == 0;\n            bool lastOddDigit = (num % 100) % 2 == 0;\n         \
    \   count += ((firstOddDigit & lastOddDigit) ? 1 : 0);\n        }\n        return\
    \ count;", "        long result = 0;\n        for (int i = 0; i < nums.Count;\
    \ i++) {\n            int firstdigit = nums[i] / 1000;\n            int lastdigit\
    \ = nums[i] % 1000;\n            bool firstOdd = (firstdigit % 2 == 1);\n    \
    \        bool lastOdd = (lastdigit % 2 == 1);\n            if ((nums[i] > 10 &&\
    \ !firstOdd && !lastOdd) || (nums[i] < 10 && firstOdd && lastOdd))\n         \
    \       result++;\n        }\n        return result;", "        // Initialize\
    \ your variables here\n        List<long> results = new List<long>();\n      \
    \  long total = 0;\n        bool oddFirst = false;\n        bool oddLast = false;\n\
    \        long first = 0;\n        long last = 0;\n        long totalEvenFirst\
    \ = 0;\n        long totalEvenLast = 0;\n        long totalOddFirst = 0;\n   \
    \     long totalOddLast = 0;\n        long totalEven = 0;\n        long totalOdd\
    \ = 0;\n        long even = 1;\n        long odd = 1;\n        long evenFirst\
    \ = 1;\n        long evenLast = 1;\n        long oddFirst = 1;\n        long oddLast\
    \ = 1;\n        long evenTotal = 1;\n        long oddTotal = 1;\n        long\
    \ evenTotalEven = 1;\n        long evenTotalOdd = 1;\n        long oddTotalEven\
    \ = 1;\n        long oddTotalOdd = 1;\n        long countEven = 0;\n        long\
    \ countOdd = 0;\n        long evenTotalEven = 0;\n        long evenTotalOdd =\
    \ 0;\n        long oddTotalEven = 0;\n        long oddTotalOdd = 0;\n        foreach\
    \ (long num in nums) {\n            // Check if first and last digits are odd\
    \ or even\n            if (num % 2 == 0) {\n                evenFirst = evenFirst\
    \ * num;\n            } else {\n                oddFirst = oddFirst * num;\n \
    \           }\n            if (num % 2 == 0) {\n                evenLast = evenLast\
    \ * num;\n            } else {\n                oddLast = oddLast * num;\n   \
    \         }\n            \n            if (num % 2 != 0) {\n                if\
    \ (num % 2 == 1) {\n                    even = even * num;\n                }\
    \ else {\n                    odd = odd * num;\n                }\n          \
    \  }\n            countEven++;\n            countOdd++;\n            totalEvenFirst\
    \ = totalEvenFirst * num;\n            totalEvenLast = totalEvenLast * num;\n\
    \            totalOddFirst = totalOddFirst * num;\n            totalOddLast =\
    \ totalOddLast * num;\n            totalEven = totalEven * num;\n            totalOdd\
    \ = totalOdd * num;\n            totalEven = totalEven * num;\n            totalOdd\
    \ = totalOdd * num;\n            evenTotal = evenTotal * num;\n            oddTotal\
    \ = oddTotal * num;\n            evenTotalEven = evenTotalEven * num;\n      \
    \      evenTotalOdd = evenTotalOdd * num;\n            oddTotalEven = oddTotalEven\
    \ * num;\n            oddTotalOdd = oddTotalOdd * num;\n        }\n        if\
    \ (countEven == 0 && countO", "        var numsArray = nums.ToArray();\n     \
    \   var n = nums.Count;\n        if (n < 1)\n            return 0;\n\n       \
    \ long oddSum = 0;\n        long oddCount = 0;\n        foreach (var i in numsArray)\
    \ {\n            var a = i;\n            oddSum = (oddSum * n) + i;\n        \
    \    oddCount++;\n            while (a > 0) {\n                var b = a % 10;\n\
    \                a = a / 10;\n                if (b < 9)\n                   \
    \ return oddCount;\n                else if (b == 9)\n                    oddCount\
    \ ++;\n            }\n        }\n\n        return oddCount;", "        var filter\
    \ = new List<long>();\n        var hash = new HashSet<long>();\n        foreach\
    \ (var num in nums) {\n            if (num > 10) {\n                if (hash.Contains(num))\
    \ {\n                    filter.Add(num);\n                }\n               \
    \ else if (hash == new HashSet<long>() { num })\n                    filter.Add(num);\n\
    \                else\n                    hash.Add(num);\n            }\n   \
    \     }\n        return filter.Count;", "        var evens = nums.Where(x => x\
    \ % 2 == 0);\n        var odd = nums.Where(x => x % 2 == 1);\n        var firstOdd\
    \ = odd.FirstOrDefault();\n        var lastOdd = odd.LastOrDefault();\n      \
    \  var firstEven = evens.FirstOrDefault();\n        var lastEven = evens.LastOrDefault();\n\
    \        if (firstOdd != null && (firstOdd.FirstOrDefault() % 2 == 1)) \n    \
    \        return firstOdd.Count;\n        if (lastOdd != null && (lastOdd.LastOrDefault()\
    \ % 2 == 1))\n            return lastOdd.Count;\n        if (firstEven != null\
    \ && (firstEven.FirstOrDefault() % 2 == 0))\n            return firstEven.Count;\n\
    \        if (lastEven != null && (lastEven.LastOrDefault() % 2 == 0))\n      \
    \      return lastEven.Count;\n        return 0;", "        long count = 0L;\n\
    \        for (int i = 0; i < nums.Count; i++) {\n            bool f1 = nums[i]\
    \ % 10 > 5 && nums[i] % 10 < 9;\n            bool f2 = nums[i] > 10 && nums[i]\
    \ % 10 > 5 && nums[i] % 10 < 9;\n            if (f1 && f2) {\n               \
    \ count++;\n            }\n        }\n        return count;", "        if (nums\
    \ == null || nums.Count < 1)\n            return 0;\n        if (nums.Count ==\
    \ 1)\n            return nums[0];\n        int odd = 0;\n        long lastDigit\
    \ = nums[nums.Count - 1];\n        foreach (long n in nums)\n        {\n     \
    \       if (n > 10 && lastDigit % 2 != 0)\n            {\n                odd++;\n\
    \            }\n            lastDigit = n;\n        }\n        return odd;", " \
    \       if (nums == null || nums.Count <= 0) {\n            return 0L;\n     \
    \   }\n        long count = 0L;\n        bool even = false;\n        bool firstOdd;\n\
    \        long first = 0;\n        long last = 0;\n        foreach (long num in\
    \ nums) {\n            even = !even;\n            firstOdd = ((num % 10) % 2)\
    \ == 1;\n            if (even) {\n                first = ((num % 10) % 2) ==\
    \ 0 ? num : num - 10;\n            } else {\n                first = num - 10;\n\
    \            }\n            last = (num % 10);\n            if (last == 0) {\n\
    \                last = last;\n            }\n            if (first == last) {\n\
    \                count += 1;\n            }\n        }\n        if (count > 0)\
    \ {\n            return count;\n        }\n        return 0;", "        var count\
    \ = nums.Where(n => n > 10).Count();\n        if (nums.Any(n => n % 2 != 0))\n\
    \            count++;\n        return count;", "        bool a = false;\n    \
    \    bool b = false;\n        bool c = false;\n        bool d = false;\n     \
    \   bool e = false;\n        bool f = false;\n        bool g = false;\n      \
    \  bool h = false;\n        bool i = false;\n        bool j = false;\n       \
    \ bool k = false;\n        long temp = 0;\n        long first = 0;\n        long\
    \ last = 0;\n        long sum = 0;\n        long finalsum = 0;\n        foreach\
    \ (var item in nums) {\n            first = Math.Truncate(item);\n           \
    \ last = Math.Floor(item);\n            if (first == last) continue;\n       \
    \     if (first > 10 && last > 10 && first % 2 == 0 && last % 2 == 0)\n      \
    \      {\n                sum = 0;\n                foreach (var x in nums) {\n\
    \                    sum += x;\n                }\n                finalsum =\
    \ Math.Truncate(sum);\n                if (finalsum % 2 == 0)\n              \
    \  {\n                    if (finalsum > 10 && first > 10 && last > 10)\n    \
    \                {\n                        a = true;\n                    }\n\
    \                    if (finalsum > 10 && first < 10 && last > 10)\n         \
    \           {\n                        b = true;\n                    }\n    \
    \                if (finalsum > 10 && first > 10 && last < 10)\n             \
    \       {\n                        c = true;\n                    }\n        \
    \            if (finalsum < 10 && first < 10 && last > 10)\n                 \
    \   {\n                        d = true;\n                    }\n            \
    \        if (finalsum < 10 && first < 10 && last < 10)\n                    {\n\
    \                        e = true;\n                    }\n                  \
    \  if (finalsum < 10 && first > 10 && last < 10)\n                    {\n    \
    \                    f = true;\n                    }\n                    if\
    \ (finalsum < 10 && first < 10 && last > 10)\n                    {\n        \
    \                g = true;\n                    }\n                    if (finalsum\
    \ < 10 && first > 10 && last < 10)\n                    {\n                  \
    \      h = true;\n                    }\n                    if (finalsum > 10\
    \ && first < 10 && last > 10)\n                    {\n                       \
    \ i = true;\n                    }\n                    if (finalsum > 10 && first\
    \ < 10 && last < 10)\n                    {\n                        j = true;\n\
    \                    }\n                    if (finalsum > 10 && first > 10 &&\
    \ last > 10)\n                    {\n                        k = true;\n     \
    \               }\n                }\n            }\n        }\n        if (a)\
    \ {\n            temp = 1;\n        }\n        if (b) {\n            temp = 2;\n\
    \        }\n        if (c) {\n            temp = 3;\n        }\n        if (d)\
    \ {\n            temp = 4;\n        }\n        if (e) {\n            temp = 5;\n\
    \        }\n        if (f) {\n            temp = 6;\n        }\n        if (g)\
    \ {\n            temp = 7;\n        }\n        if (h) {\n            temp = 8;\n\
    \        }\n        if (i) {\n            temp = 9;\n        }\n        if (j)\
    \ {\n            temp = 10;\n        }\n        if (k) {\n            temp = 11;\n\
    \        }\n        if (temp < 11)\n        {\n            return ", "       \
    \ if (nums == null || nums.Count == 0)\n            return 0L;\n        long result\
    \ = 0L;\n        for (int i = 0; i < nums.Count; i++) {\n            if (nums[i]\
    \ > 10L && nums[i] % 2 != 0 && nums[i] % 3 != 0)\n                result++;\n\
    \        }\n        return result;", "        var result = nums.Where(x => x >\
    \ 10L).Count();\n        var first = nums.Where(x => (x % 10) % 2 == 1).Count();\n\
    \        var last = nums.Where(x => (x % 10) % 2 == 0).Count();\n        return\
    \ result + first * 2 + last;", "        if (nums.Count == 0) {\n            return\
    \ 0;\n        }\n        List<int> odd = new List<int>();\n        long sum =\
    \ 0;\n        long count = 0;\n        foreach (long n in nums) {\n          \
    \  odd.Add(n % 10);\n            count += n % 10;\n            sum += n % 10;\n\
    \        }\n        // check both first and last digit\n        if (odd.Sum()\
    \ % 2 == 0) {\n            sum -= sum % 10;\n        }\n        long sum2 = sum;\n\
    \        foreach (int d in odd) {\n            if (d % 2 == 1) {\n           \
    \     sum2 -= sum % 10;\n            }\n        }\n        return sum;", "   \
    \     var nums10 = nums.Where(n => n > 10).ToList();\n        var firstOdd = nums10.Where(n\
    \ => (n % 10) % 2 == 1).ToList();\n        var lastOdd = nums10.Where(n => (n\
    \ % 10) % 2 != 1).ToList();\n        return nums10.Count(n => n > 10 && firstOdd.Any(a\
    \ => (n % 10) % 2 == a) && lastOdd.Any(a => (n % 10) % 2 != a));", "        long\
    \ evenevenCount = 0;\n        long evenoddCount = 0;\n        long oddoddCount\
    \ = 0;\n        foreach (long num in nums) {\n            if (num > 10) {\n  \
    \              if (num % 2 == 0) {\n                    if (num % 2 == 0 && num\
    \ % 10 % 2 != 0) {\n                        evenevenCount++;\n               \
    \     }\n                    if (num % 2 == 0 && num % 10 % 2 == 0) {\n      \
    \                  evenoddCount++;\n                    }\n                  \
    \  if (num % 2 != 0 && num % 10 % 2 != 0) {\n                        oddoddCount++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ (evenevenCount + evenoddCount + oddoddCount);", '        return nums.Where(a
    => a > 10L).Where(a => a % 2 == 1).Count(a => a > 10L);', "        if (nums.Count\
    \ <= 0) {\n            return 0L;\n        }\n        long result = 0;\n     \
    \   int first = 0;\n        int last = 0;\n        long temp;\n        long sum\
    \ = 0;\n        foreach (long n in nums) {\n            if (n <= 10) {\n     \
    \           result += n;\n            }\n            int tmp = n % 10;\n     \
    \       sum += tmp;\n            if (tmp > 0) {\n                last = tmp;\n\
    \            }\n            if (tmp < 0)\n                first = tmp;\n     \
    \   }\n        temp = sum;\n        temp = sum / 10;\n        temp = temp * 2;\n\
    \        temp = (temp * first) + ((temp - 1) * last);\n        result = result\
    \ - temp;\n        return result;", "        if (nums == null || nums.Count <\
    \ 1) return 0;\n        var count = nums.Where(n => n > 10).Count();\n       \
    \ var isOdd = nums.Where(n => n % 2 != 0).Where(n => n < 10).Count();\n      \
    \  var firstOdd = nums.First(n => n % 2 != 0).Where(n => n < 10).Count();\n  \
    \      var lastOdd = nums.Last(n => n % 2 != 0).Where(n => n < 10).Count();\n\
    \        var firstFirstOdd = nums.First(n => n % 2 == 0).Where(n => n < 10).Count();\n\
    \        var lastLastOdd = nums.Last(n => n % 2 == 0).Where(n => n < 10).Count();\n\
    \        return (count >= 1 ? count : 0) +\n            (isOdd >= 1 ? isOdd :\
    \ 0) +\n            (firstOdd >= 1 ? firstOdd : 0) +\n            (lastOdd >=\
    \ 1 ? lastOdd : 0) +\n            (firstFirstOdd >= 1 ? firstFirstOdd : 0) +\n\
    \            (lastLastOdd >= 1 ? lastLastOdd : 0);", "        long count = 0;\n\
    \        foreach (long n in nums) {\n            if (n > 10 && n % 2 == 1 && n\
    \ % 10 == 1) {\n                count++;\n            }\n        }\n        return\
    \ count;", "        // Your code goes here\n        return nums.Where(x => x >\
    \ 10).Where(x => (x % 2) == 1).Count(x => x % 2 == 1);", "        long count =\
    \ 0;\n        for (int i = 0; i < nums.Count; i++) {\n            bool firstOdd\
    \ = (nums[i] % 2L) % 2L == 1L;\n            bool lastOdd = (nums[nums.Count -\
    \ 1] % 2L) % 2L == 1L;\n            if (nums[i] > 10L) {\n                if (firstOdd\
    \ && lastOdd) {\n                    count++;\n                }\n           \
    \ }\n        }\n        return count;", "        // Your code here\n        var\
    \ list = new List<long>(nums.Select(x => Math.Abs(x)).ToList());\n        list.RemoveAll(x\
    \ => x == 0);\n        return list.Count(x => x > 10 && x.First(y => (y & 1) ==\
    \ 1) == 1);", "        long count = 0;\n        foreach (long n in nums) {\n \
    \           if (n > 10L) {\n                if (n %2 == 1L && nums[nums.Count\
    \ - 1] % 2 == 1L)\n                    count++;\n            }\n        }\n  \
    \      return count;", "        long numCount = 0;\n        foreach(var n in nums)\
    \ {\n            if (n > 10L) {\n                if (n.ToString().Substring(0,\
    \ 1) == \"-\") {\n                    numCount += n.ToString().Substring(1, 1).Equals(BigInteger.Parse(\"\
    1\").ToString());\n                }\n                else {\n               \
    \     numCount += n.ToString().Substring(1, 1).Equals(BigInteger.Parse(\"3\").ToString());\n\
    \                }\n                numCount += n.ToString().Substring(0, 1).Equals(BigInteger.Parse(\"\
    5\").ToString());\n                numCount += n.ToString().Substring(0, 1).Equals(BigInteger.Parse(\"\
    7\").ToString());\n                numCount += n.ToString().Substring(0, 1).Equals(BigInteger.Parse(\"\
    9\").ToString());\n            }\n        }\n        return numCount;", "    \
    \    long odd = nums.Where(x => (x % 2) == 1).Count();\n        long even = nums.Where(x\
    \ => (x % 2) == 0).Count();\n        return odd + even;", "        long total\
    \ = 0;\n        foreach(long num in nums)\n        {\n            total = total\
    \ + num;\n            if(num > 10L && num % 2L != 0L && num % 2 != 0L)\n     \
    \       {\n                return num;\n            }\n        }\n        return\
    \ 0;", "        if (nums == null || nums.Count == 0) \n            return 0;\n\
    \        long odds = 0;\n        long evens = 0;\n        bool lastEven = false;\n\
    \        long first = 0;\n        long last = 0;\n        foreach (long num in\
    \ nums) {\n            last = num;\n            lastEven = Convert.ToBoolean(Convert.ToString(num).Last());\n\
    \            first = Convert.ToBoolean(Convert.ToString(num).First());\n     \
    \       if (last % 2 == 0 && lastEven && first % 2 != 0) {\n                evens++;\n\
    \            }\n            else if (last % 2 != 0 && lastEven && !first % 2)\
    \ {\n                odds++;\n            }\n        }\n        return evens +\
    \ odds;", "        long retVal = 0;\n        foreach (var n in nums) {\n     \
    \       if (n >= 10) {\n                if (n % 2 != 0)\n                    retVal++;\n\
    \                if (n % 2 != 1 && n % 2 != 3)\n                    retVal++;\n\
    \            } else {\n                if (n % 2 != 0)\n                    retVal++;\n\
    \            }\n        }\n        return retVal;", "        long count = 0;\n\
    \        foreach(long n in nums) {\n            if(n > 10) {\n               \
    \ if(n % 2 != 0) {\n                    if(nums[nums.IndexOf(n)-1] % 2 == 0) {\n\
    \                        count++;\n                    }\n                }\n\
    \            }\n        }\n        return count;", "        long number = 0;\n\
    \        foreach (var item in nums) {\n            number += item;\n         \
    \   if (item > 10 && item % 2 == 1 && item % 10 == 1) {\n                return\
    \ (number / 10);\n            }\n        }\n        return -1;", "        int\
    \ countEven = 1;\n        long count = 0;\n        foreach (long i in nums) {\n\
    \            if (i > 10L) {\n                if (nums.First() % 2 == 1L && nums.Last()\
    \ % 2 == 1L) {\n                    countEven++;\n                }\n        \
    \    }\n            if (count < i) {\n                count = i;\n           \
    \ }\n        }\n        return countEven;", "        // Your code here\n     \
    \   long sum = 0;\n        int counter = 0;\n        int first = 0, last = nums.Count\
    \ - 1;\n        foreach (var item in nums)\n        {\n            counter +=\
    \ 1;\n            if (item % 2 == 1)\n            {\n                if (counter\
    \ > 1)\n                {\n                    sum += counter;\n             \
    \   }\n                counter = 1;\n                first = last - counter;\n\
    \                last = item;\n            }\n        }\n        if (counter >\
    \ 1)\n        {\n            sum += counter;\n        }\n        return sum;",
  "        long counter = 0;\n        foreach(long num in nums) {\n            if\
    \ (num > 10 && num.ToString().First() % 2 == 1 && num.ToString().Last() % 2 ==\
    \ 1) counter++;\n        }\n        return counter;", "        int count = 0;\n\
    \        foreach (long num in nums)\n        {\n            if (num > 10)\n  \
    \          {\n                if (num % 2 != 0)\n                {\n         \
    \           if (num % 3 == 0)\n                    {\n                       \
    \ if (num % 5 != 0)\n                        {\n                            if\
    \ (num % 7 == 0)\n                            {\n                            \
    \    if (num % 9 != 0)\n                                {\n                  \
    \                  if (num % 11 == 0)\n                                    {\n\
    \                                        if (num % 13 == 0)\n                \
    \                        {\n                                            if (num\
    \ % 17 == 0)\n                                            {\n                \
    \                                if (num % 19 != 0)\n                        \
    \                        {\n                                                 \
    \   count++;\n                                                }\n            \
    \                                }\n                                        }\n\
    \                                    }\n                                }\n  \
    \                          }\n                        }\n                    }\n\
    \                }\n            }\n        }\n        return count;", "      \
    \  long[] a = nums.ToArray();\n        int n = a.Length;\n        long ans = 0,\
    \ x = 0, y = 0, z = 0, sum = 0, sum2 = 0, last = 0;\n        long last = nums[0]\
    \ % 10;\n        long last2 = nums[n - 1] % 10;\n        long last3 = nums[n -\
    \ 2] % 10;\n        if (n == 1) {\n            if (a[0] > 10)\n              \
    \  ans = 1;\n            return ans;\n        }\n        if (nums[0] > 10)\n \
    \           ans = 1;\n        else {\n            x = nums[0] % 10;\n        \
    \    y = nums[0] / 10 % 10;\n            z = nums[0] / 100 % 10;\n           \
    \ sum = a[0];\n            sum2 = sum * x;\n            for (int i = 1; i < n;\
    \ i++) {\n                if (a[i] % 10 != 0)\n                    sum += a[i];\n\
    \                else {\n                    sum2 += a[i];\n                 \
    \   if (a[i] < sum) {\n                        ans = 1;\n                    \
    \    break;\n                    }\n                }\n            }\n       \
    \     if (sum < 10) {\n                ans = 1;\n            } else {\n      \
    \          if (sum > sum2) {\n                    ans = 1;\n                }\
    \ else {\n                    ans = sum % 2 == 0 && !(x + y == z && !(last ==\
    \ last3 || last2 == last3 || last == last2 && last3 == last2\n               \
    \         || last2 == last3 && last == last) || (x + y == z && last == last2 &&\
    \ !(last == last3 || last == last3\n                        && last2 == last)\
    \ || (x + y == z && last == last2 && last == last3 && !(last2 == last3 || last3\
    \ == last2\n                        && last == last))) || (x + y == z && last\
    \ == last2 && !(last == last3 || last == last3 && last2 == last\n            \
    \            && last3 == last))) || (x + y == z && last == last2 && !(last ==\
    \ last3 || last == last3 && last2 == last\n                        && last3 ==\
    \ last)) || last == last2 || last == last3 || last2 == last || last3 == last ||\
    \ (x + y == z\n                        && last == last2 && !(last == last3 ||\
    \ last == last3 && last2 == last)))) {\n                        ans = 1;\n   \
    \                 } else {\n                        ans = 2;\n               \
    \     }\n                }\n            }\n        }\n        return ans;", '        return
    nums.Count( i => i > 10 && nums.Any( j=>(i % 2 == 0) && ( nums[nums.Count -1]
    % 2 == 1 )) == 0 );']
stop_tokens:
- "\n    }\n"
