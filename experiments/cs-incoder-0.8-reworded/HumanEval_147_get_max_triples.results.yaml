language: cs
name: HumanEval_147_get_max_triples
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long result = 1;\n        for (int i = 1;
    i <= n; i++) {\n            for (int j = i + 1; j <= n; j++) {\n                for
    (int k = j + 1; k <= n; k++) {\n                    long sum = i * i * i + j *
    j + k * k;\n                    if (sum % 3 == 0) {\n                        result
    += (sum - 3) % 3;\n                    }\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b7f76d934a240398765f0506691cbf1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b7f76d934a240398765f0506691cbf1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        List<long> arr = new List<long>() { 1 };\n
    \       long max = 1;\n        long maxVal = 1;\n        for (int i = 1; i < n;
    i++) {\n            long add = i * i - i + 1;\n            if (add > maxVal) {\n
    \               max = add;\n                maxVal = add;\n            }\n            arr.Add(add);\n
    \       }\n        long res = 0;\n        long[] t = new long[arr.Count];\n        Array.Copy(arr.ToArray(),
    t, arr.Count);\n        int x = 0;\n        foreach (long i in t) //counting number
    of triples\n        {\n            x++;\n        }\n        for (x = 0; x < arr.Count;
    x++) {\n            for (x = 0; x < arr.Count; x++) {\n                for (int
    x = 0; x < arr.Count; x++) {\n                    long sum = arr[x] * arr[x] *
    arr[x];\n                    if (sum == maxVal) {\n                        res
    = 1;\n                        break;\n                    }\n                }\n
    \           }\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe8vypnxx.cs(41,26): error CS0136: A local or parameter named ''x'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659976375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        if (n == 0)\n            return 0;\n        var
    a = Enumerable.Range(0, n).Select(i => i * i - i + 1).ToArray();\n        int
    n = a.Length;\n        long triples = 0;\n        for (int i = 0; i < n; ++i)
    {\n            for (int j = i + 1; j < n; ++j) {\n                for (int k =
    j + 1; k < n; ++k) {\n                    long sum = a[i] + a[j] + a[k];\n                    if
    (sum % 3 == 0)\n                        ++triples;\n                }\n            }\n
    \       }\n        return triples;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmply_e7h80.cs(20,13): error CS0841: Cannot use local variable ''n'' before
    it is declared

    /tmp/tmply_e7h80.cs(22,37): error CS0841: Cannot use local variable ''n'' before
    it is declared

    /tmp/tmply_e7h80.cs(23,13): error CS0136: A local or parameter named ''n'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659976375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        var a = new List<long>();\n        for (int
    i = 1; i < n; i++) {\n            a.Add(i * i - i + 1);\n        }\n        var
    result = new long[a.Count];\n        for (int i = 0; i < a.Count - 1; i++) {\n
    \           var j = i + 1;\n            var k = i + 2;\n            while (j <
    a.Count && k < a[j]) {\n                result[i] = Math.Min(result[i], result[j]);\n
    \               result[j] = Math.Min(result[j], result[k]);\n                result[k]
    = Math.Min(result[k], result[i]);\n                j++;\n                k++;\n
    \           }\n        }\n        return result.Max();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.GetMaxTriples (System.Int64 n) [0x0005b]
    in <5d01d708091a43cea81fab09dd61abd1>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <5d01d708091a43cea81fab09dd61abd1>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.GetMaxTriples (System.Int64 n) [0x0005b] in <5d01d708091a43cea81fab09dd61abd1>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <5d01d708091a43cea81fab09dd61abd1>:0
    \n"
  stdout: ''
  timestamp: 1659976375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        var result = new List<int>();\n        var
    i = 0;\n        while(i != n) {\n            if(i++ == 0)\n                result.Add(1);\n
    \           else\n                result.Add(a[i] = (i * i) - i + 1);\n        }\n
    \       return result.FindIndex(a => ((int)a) % 3 == 0) < 0 ? 0 : result.FindIndex(a
    => ((int)a) % 3 == 0).ToString().ToLong();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuatqr93u.cs(26,28): error CS0103: The name ''a'' does not exist in the
    current context

    /tmp/tmpuatqr93u.cs(28,119): error CS1061: ''string'' does not contain a definition
    for ''ToLong'' and no accessible extension method ''ToLong'' accepting a first
    argument of type ''string'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659976375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        // Create a list to store each possible
    value of each index\n        int[] a = new int[n];\n\n        // Initialize every
    value of a to 0\n        Array.Sort(a, (x, y) => x < y? -1 : 1);\n\n        //
    Iterate from 1 to n\n        for (int i = 1; i < n; i++) {\n            // For
    each index, take a[i], and add that value to every possible combination of a[0..i-1]\n
    \           for (int j = 0; j < i; j++) {\n                for (int k = 0; k <
    i; k++) {\n                    a[i] += a[j] * a[k];\n                }\n            }\n
    \       }\n\n        // Count the number of triples that equal 0\n        return
    a.Where((v, i, a) => v == 0L).Count();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcmq822gx.cs(37,24): error CS1593: Delegate ''Func<int, bool>'' does not
    take 3 arguments

    '
  timestamp: 1659976375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        // Write your code here\n        List<long>
    a = new List<long>(n);\n        for (int i = 1; i <= n; i++) {\n            for
    (int j = i; j <= n; j++) {\n                for (int k = i; k <= n; k++) {\n                    if
    (i != j && j != k) {\n                        if((i+1)*(j+1)+(k+1)*(k)==n*3) {\n
    \                           a.Add(i*i-i+1);\n                        }\n                    }\n
    \               }\n            }\n        }\n        long count = a.Count(item
    => (item*item-item+item)==n);\n        return count;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpttri1pbk.cs(21,39): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long a = new long[n];\n        for (int
    i = 0; i<n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        var
    q = Enumerable.Range(0, n).Where(i => i<=n).SelectMany(i=> Enumerable.Range(0,
    n).Where(j => j<=n).SelectMany(j=> Enumerable.Range(0, n).Where(k=>k<=n).Select(k=>a[i]+a[j]+a[k]==3
    && i<j<k).Where(t => t)).Where(t => t)).Count();\n        return q;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n
    \   Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgusfb1cu.cs(20,18): error CS0029: Cannot implicitly convert type ''long[]''
    to ''long''

    /tmp/tmpgusfb1cu.cs(22,13): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpgusfb1cu.cs(24,37): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpgusfb1cu.cs(24,92): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpgusfb1cu.cs(24,147): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpgusfb1cu.cs(24,175): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpgusfb1cu.cs(24,180): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpgusfb1cu.cs(24,185): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpgusfb1cu.cs(24,196): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''bool'' and ''int''

    '
  timestamp: 1659976375
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        int[] a = new int[n];\n        // Initialize
    a[i] using formula\n        for (int i = 1; i < a.Length; i++) {\n            a[i]
    = i * i - i + 1;\n        }\n        int nT = 3; // Max number of triples\n        long
    sum = 0;\n        // Compute all triples\n        for (int i = 0; i < a.Length
    - 1; i++) {\n            for (int j = i + 1; j < a.Length; j++) {\n                for
    (int k = j + 1; k < a.Length; k++) {\n                    long aT = a[i] + a[j]
    + a[k];\n                    // Verify that aT is a multiple of 3\n                    if
    (aT % 3 == 0) {\n                        nT--;\n                        sum +=
    aT;\n                    }\n                }\n            }\n        }\n        //
    Return number of triples <= nT\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4effd9526e3f4411ae76c10f7f2845a2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4effd9526e3f4411ae76c10f7f2845a2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] a = { 1, 2, 3, 7, 13 };\n        long
    max = a[0];\n        long max = a[0];\n        for (int i = 1; i < n; i++) {\n
    \           for (int j = 0; j < n; j++) {\n                for (int k = 0; k <
    n; k++) {\n                    if (i == j && i == k && j == k) {\n                        continue;\n
    \                   }\n                    long? sum = (long)(a[i] * a[j] * a[k])
    + (long)a[i] * a[j] + a[k];\n                    if (sum == max) {\n                        max
    = sum;\n                        continue;\n                    }\n                    if
    (sum > max) {\n                        max = sum;\n                    }\n                }\n
    \           }\n        }\n        return max;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_h42w_eq.cs(22,14): error CS0128: A local variable or function named ''max''
    is already defined in this scope

    /tmp/tmp_h42w_eq.cs(31,31): error CS0266: Cannot implicitly convert type ''long?''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp_h42w_eq.cs(35,31): error CS0266: Cannot implicitly convert type ''long?''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] a = new long[n];\n        for (long
    i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        long
    max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j
    < n; j++) {\n                for (int k = j; k < n; k++) {\n                    if
    (i + j + k > 2 && a[i + j] + a[j + k] + a[k + (n - i - 1)] == 3 && a[i + j] +
    a[j + k] + a[k + i] == 3)\n                    {\n                        max++;\n
    \                   }\n                }\n            }\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.GetMaxTriples (System.Int64 n) [0x0004e]
    in <c24612b6aebc4db3bcedc96a26a1050a>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <c24612b6aebc4db3bcedc96a26a1050a>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.GetMaxTriples (System.Int64 n) [0x0004e] in <c24612b6aebc4db3bcedc96a26a1050a>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <c24612b6aebc4db3bcedc96a26a1050a>:0
    \n"
  stdout: ''
  timestamp: 1659976375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long a = new long[n]; \n        a[0] = n;
    \n        for (int i = 1; i < n; ++i) {\n            a[i] = a[i] + a[i] - i;\n
    \       }\n        long count = 0;\n        for (int i = 0; i < a.Length - 1;
    ++i) {\n            for (int j = i + 1; j < a.Length; ++j) {\n                for
    (int k = j + 1; k < a.Length; ++k) {\n                    if (a[k] + a[j] + a[i]
    == 3) {\n                        count += 1;\n                    }\n                }\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvcuhwu2x.cs(20,18): error CS0029: Cannot implicitly convert type ''long[]''
    to ''long''

    /tmp/tmpvcuhwu2x.cs(21,9): error CS0021: Cannot apply indexing with [] to an expression
    of type ''long''

    /tmp/tmpvcuhwu2x.cs(23,13): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpvcuhwu2x.cs(23,20): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpvcuhwu2x.cs(23,27): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpvcuhwu2x.cs(26,31): error CS1061: ''long'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpvcuhwu2x.cs(27,39): error CS1061: ''long'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpvcuhwu2x.cs(28,43): error CS1061: ''long'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpvcuhwu2x.cs(29,25): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpvcuhwu2x.cs(29,32): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpvcuhwu2x.cs(29,39): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659976375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long a = new long[n];\n        long b =
    new long[n];\n\n        for (int i = 0; i < n; i++) {\n            a[i] = i *
    i - i + 1;\n        }\n\n        for (int i = 0; i < n - 1; i++) {\n            for
    (int j = i + 1; j < n; j++) {\n                b[i] = a[j];\n                b[j]
    = a[i];\n                b[j] = a[j];\n            }\n\n            for (int j
    = 0; j < n; j++) {\n                b[i] = a[j];\n                b[j] = a[i];\n
    \               b[j] = a[j];\n                for (int k = 0; k < n; k++) {\n
    \                   b[i] = a[j];\n                    b[j] = a[i];\n                    b[j]
    = a[j];\n                }\n            }\n\n        }\n\n        return b.Sum();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmko003g8.cs(20,18): error CS0029: Cannot implicitly convert type ''long[]''
    to ''long''

    /tmp/tmpmko003g8.cs(21,18): error CS0029: Cannot implicitly convert type ''long[]''
    to ''long''

    /tmp/tmpmko003g8.cs(24,13): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpmko003g8.cs(29,17): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpmko003g8.cs(29,24): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpmko003g8.cs(30,17): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpmko003g8.cs(30,24): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpmko003g8.cs(31,17): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpmko003g8.cs(31,24): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpmko003g8.cs(35,17): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpmko003g8.cs(35,24): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpmko003g8.cs(36,17): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpmko003g8.cs(36,24): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpmko003g8.cs(37,17): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpmko003g8.cs(37,24): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpmko003g8.cs(39,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpmko003g8.cs(39,28): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpmko003g8.cs(40,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpmko003g8.cs(40,28): error CS0021: Cannot apply indexing with [] t'
  timestamp: 1659976375
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        var res = new List<long>();\n        for
    (int i = 1; i <= n; i++) {\n            for (int j = i + 1; j <= n; j++) {\n                for
    (int k = j + 1; k <= n; k++) {\n                    if (Math.Abs(i * i - j * j
    - k) % 3 == 0) {\n                        res.Add(i * i + j * j + k);\n                    }\n
    \               }\n            }\n        }\n        return res.Count;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <65481f9977bd48c6b6d4568c07365050>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <65481f9977bd48c6b6d4568c07365050>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long totalTriples = 0;\n        int k =
    0;\n        for (int i = 1; i <= n; i++) {\n            int j = 1;\n            while
    (j < i) {\n                j++;\n                if (i == j) continue;\n                int
    k = j;\n                while ((k + j) < i && (k + j) != j) {\n                    k++;\n
    \                   if (k == i) continue;\n                    int m = i + k +
    1;\n                    if (m == 3 * j) totalTriples++;\n                }\n            }\n
    \       }\n        return totalTriples;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp81hxx8h8.cs(27,21): error CS0136: A local or parameter named ''k'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp81hxx8h8.cs(21,13): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    '
  timestamp: 1659976375
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        HashSet<long> hs = new HashSet<long>();\n
    \       for (long i = 2; i <= n; i++) {\n            if (hs.Add(i * i - i + 1))
    {\n                long count = 0;\n                for (int j = 1; j <= i; j++)
    {\n                    if (hs.Add(i * j + i + 1)) {\n                        long
    k = 0;\n                        while (k != j && k != i) {\n                            k++;\n
    \                       }\n                        if (k == j) {\n                            count++;\n
    \                       }\n                    }\n                }\n                if
    (count == 1) {\n                    return 1;\n                }\n            }\n
    \       }\n        return 0;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eebbf84c09474f51b93ed6db90bba21e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eebbf84c09474f51b93ed6db90bba21e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976375
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long sum = 0;\n        for (int i = 1; i
    <= n; i++) {\n            long a = i * i - i + 1;\n            long tripleSum
    = 0;\n            for (int j = 1; j <= i; j++) {\n                long b = j *
    j - j + 1;\n                long c = i * i + j;\n                tripleSum = tripleSum
    + (a * b + c) % 3;\n            }\n            if (tripleSum == 0)\n                sum++;\n
    \       }\n        return sum;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2cc09b2ab5874eb5bb742611ea030b58>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2cc09b2ab5874eb5bb742611ea030b58>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976375
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long sum = 0;\n        var a = new List<long>();\n
    \       // add first triple from index 0 to length-1\n        for (int i = 0;
    i < n; i++) {\n            a.Add(i);\n            sum += a[i];\n        }\n        //
    add rest of triple from index 0 to length-2\n        for (int i = 0; i < n - 1;
    i++) {\n            a.Add(i * i - i + 1);\n            sum += a[i];\n        }\n
    \       return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db72a5e778534ae1a677d48b8c8281ad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db72a5e778534ae1a677d48b8c8281ad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976375
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long max = 0;\n        int count = 0;\n
    \       long[] a = new long[n];\n\n        for (int i = 0; i < n; i++) {\n            a[i]
    = i * i - i + 1;\n        }\n\n        for (int i = 1; i < n; i++) {\n            for
    (int j = 0; j < i; j++) {\n                for (int k = 0; k < j; k++) {\n                    //Console.WriteLine(\"a[{0}],
    a[{1}], a[{2}] = \", i, j, k);\n                    //Console.WriteLine(\"a[{0}]
    + a[{1}] + a[{2}] = \", a[i], a[j], a[k]);\n                    //Console.WriteLine(\"a[{0}]
    + a[{1}] + a[{2}] = \", a[i], a[j], a[k]);\n                    if (a[j] + a[k]
    < a[i]) {\n                        //Console.WriteLine(\"a[{0}] + a[{1}] + a[{2}]
    < a[{3}] = \", a[j], a[k], a[i], a[j], a[k]);\n                        count++;\n
    \                       //Console.WriteLine(\"Count {0}\", count);\n                    }\n
    \                   if (a[j] + a[k] > a[i]) {\n                        //Console.WriteLine(\"a[{0}]
    + a[{1}] + a[{2}] > a[{3}] = \", a[j], a[k], a[i], a[j], a[k]);\n                        count++;\n
    \                       //Console.WriteLine(\"Count {0}\", count);\n                    }\n
    \                   if (a[j] + a[k] == a[i]) {\n                        count++;\n
    \                       //Console.WriteLine(\"Count {0}\", count);\n                    }\n
    \                   if (a[j] + a[k] != a[i]) {\n                        count++;\n
    \                       //Console.WriteLine(\"Count {0}\", count);\n                    }\n
    \               }\n            }\n        }\n\n        return count;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a847648eb41747a694bd7d96b9cbd680>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a847648eb41747a694bd7d96b9cbd680>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        var a = new List<long>();\n        for (int
    i = 1; i <= n; i++)\n            a.Add(i * i - i + 1);\n        return GetMaxTriples(n,
    a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvo2_07uh.cs(23,16): error CS1501: No overload for method ''GetMaxTriples''
    takes 2 arguments

    '
  timestamp: 1659976375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long a = new long[(int)n];\n        for
    (int i = 1; i <= n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        Array.Sort(a);\n
    \       long result = 0;\n        for (int i = 1; i < n; i++) {\n            for
    (int j = 1; j < n; j++) {\n                if (a[i] > a[j]) {\n                    result
    = Math.Min(result, a[i] - a[j] + 1);\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl59ql00n.cs(20,18): error CS0029: Cannot implicitly convert type ''long[]''
    to ''long''

    /tmp/tmpl59ql00n.cs(22,13): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpl59ql00n.cs(24,20): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Array''

    /tmp/tmpl59ql00n.cs(28,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpl59ql00n.cs(28,28): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpl59ql00n.cs(29,47): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpl59ql00n.cs(29,54): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659976375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long sum = 0;\n        List<long> a = new
    List<long>();\n        for(int i = 1; i <= n; i++){\n            sum += i;\n            a.Add(i*i
    - i + 1);\n        }\n        // sort the list by ascending order\n        Array.Sort(a);\n
    \       \n        // traverse the sorted list\n        for(int i = 0; i < a.Count;
    i++){\n            if(a[i] >= 3) // if the current value is greater than or equal
    to 3, then add it to the sum\n                sum += a[i];\n        }\n        //
    return the sum\n        return sum;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp28ajp0ar.cs(27,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    '
  timestamp: 1659976375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] a = new long[n];\n        long m
    = 1;\n        long l = 0;\n        long s = 0;\n        for(int i = 1; i <= n;
    i++) {\n            a[i] = i * i - i + 1;\n            if(i % 2 == 0) {\n                m
    += 1;\n                if(a[i] % 3 == 0)\n                    s += 1;\n            }
    else {\n                l += 1;\n                if(l % 3 == 0)\n                    s
    += 1;\n            }\n        }\n        return (l+m+s);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.GetMaxTriples (System.Int64 n) [0x00018]
    in <eae40643d0d24eb79221e022385efee8>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <eae40643d0d24eb79221e022385efee8>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.GetMaxTriples (System.Int64 n) [0x00018] in <eae40643d0d24eb79221e022385efee8>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <eae40643d0d24eb79221e022385efee8>:0
    \n"
  stdout: ''
  timestamp: 1659976375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        if (n == 0) {\n            return 0;\n        }\n
    \       long max = 1L;\n        long cur = n;\n        long sum = 0L;\n        long[]
    a = new long[n];\n        for (int i = 1; i < n; i++) {\n            a[i - 1]
    = cur;\n            sum += cur;\n            cur = sum;\n        }\n        int
    maxIndex = 0;\n        long maxSum = a[maxIndex];\n        int minIndex = 0;\n
    \       long minSum = a[minIndex];\n        for (int i = 0; i < n - 1; i++) {\n
    \           long nextSum = sum + a[i];\n            if (nextSum > maxSum) {\n
    \               maxSum = nextSum;\n                maxIndex = i;\n            }\n
    \           if (nextSum < minSum) {\n                minSum = nextSum;\n                minIndex
    = i;\n            }\n        }\n        if (maxSum == 1) {\n            return
    0;\n        }\n        long nextSum = sum + a[n - 1];\n        if (nextSum > maxSum)
    {\n            maxSum = nextSum;\n            maxIndex = n - 1;\n        }\n        if
    (nextSum < minSum) {\n            minSum = nextSum;\n            minIndex = n
    - 1;\n        }\n        long curSum = a[n - 1];\n        for (int i = 1; i <
    n; i++) {\n            if (a[i - 1] > maxSum) {\n                maxSum = curSum;\n
    \               maxIndex = i;\n            }\n            if (a[i - 1] < minSum)
    {\n                minSum = curSum;\n                minIndex = i;\n            }\n
    \           curSum = a[i];\n        }\n        return maxIndex + 1;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n
    \   Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpodj5qd56.cs(37,18): error CS0136: A local or parameter named ''nextSum''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpodj5qd56.cs(53,24): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpodj5qd56.cs(57,24): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpodj5qd56.cs(23,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    '
  timestamp: 1659976375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        List<long> a = new List<long>();\n        List<long>
    result = new List<long>();\n        for(int i = 1; i <= n; i++){\n            a.Add(i
    * i - i + 1);\n        }\n        for(int i = 1; i <= n; i++){\n            for(int
    j = i + 1; j <= n; j++){\n                long sum = 0;\n                for(int
    k = 0; k <= i - j; k++){\n                    sum += a[k];\n                }\n
    \               if(sum % 3 == 0){\n                    result.Add(a[i]);\n                    result.Add(a[j]);\n
    \                   result.Add(a[k]);\n                }\n            }\n        }\n
    \       return (result.Count == 0)? -1 : result.Count;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwoajnh5h.cs(34,34): error CS0103: The name ''k'' does not exist in the
    current context

    '
  timestamp: 1659976375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        var a = new List<long>();\n        var temp1
    = new List<long>();\n        var temp2 = new List<long>();\n        // add all
    positve integers to temp1\n        for (int i = 0; i < n; i++) {\n            temp1.Add(i);\n
    \       }\n        // find maximum of temp1\n        temp1.Sort();\n        var
    maximum = temp1.Last();\n        // add 1 to the maximum positve integer in temp1\n
    \       temp1.Remove(maximum);\n        temp1.Add(maximum + 1);\n        // add
    all positve integers to temp2\n        for (int i = 0; i < n; i++) {\n            temp2.Add(i);\n
    \       }\n        // find minimum of temp2\n        temp2.Sort();\n        var
    minimum = temp2.First();\n        // add 1 to the minimum positve integer in temp2\n
    \       temp2.Remove(minimum);\n        temp2.Add(minimum - 1);\n        for (int
    i = 0; i < n; i++) {\n            if (temp1.Contains(i) && temp2.Contains(i))
    {\n                a.Add(i);\n            }\n        }\n        if (n < a.Count
    && n > a.Count / 2) {\n            long result = 0;\n            foreach (var
    i in a) {\n                if (temp1.Contains(i)) {\n                    result
    += temp1.Contains(i) ? temp1.Contains(i) : temp2.Contains(i) ? temp2.Contains(i)
    : 1;\n                }\n                if (temp2.Contains(i)) {\n                    result
    += temp2.Contains(i) ? temp2.Contains(i) : temp1.Contains(i) ? temp1.Contains(i)
    : 1;\n                }\n            }\n            return result;\n        }\n
    \       return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe5p1uumr.cs(52,71): error CS0173: Type of conditional expression cannot
    be determined because there is no implicit conversion between ''bool'' and ''int''

    /tmp/tmpe5p1uumr.cs(55,71): error CS0173: Type of conditional expression cannot
    be determined because there is no implicit conversion between ''bool'' and ''int''

    '
  timestamp: 1659976375
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        List<long> a = new List<long>();\n        long
    x = 0;\n        long y = 0;\n        long z = 0;\n        long max = 0;\n        for
    (int i = 0; i < n; i++) {\n            x = x * i - i + 1;\n            y = y *
    i - i + 1;\n            z = z * i - i + 1;\n            if (x % 3 == 0 && y %
    3 == 0 && z % 3 == 0) {\n                a.Add(i);\n                if (x > max)
    {\n                    max = x;\n                }\n                if (y > max)
    {\n                    max = y;\n                }\n                if (z > max)
    {\n                    max = z;\n                }\n            }\n        }\n
    \       return a.Count;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d1c0ec254654cd7ae8382f9e43ab6c6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d1c0ec254654cd7ae8382f9e43ab6c6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] a = { 1, 1, 1 };\n        long c
    = 1;\n        long result = 0;\n        for (long i = 0; i < n; i++) {\n            long
    t = a[i] + a[j] + a[k];\n            if (t % 3 == 0) {\n                result
    += 1;\n            }\n            if (t < 3) {\n                a = c;\n                c
    += a[i];\n                a[i] = 1;\n                c += a[j];\n                a[j]
    = 1;\n                c += a[k];\n                a[k] = 1;\n            } else
    {\n                c += 1;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplujncvco.cs(24,31): error CS0103: The name ''j'' does not exist in the
    current context

    /tmp/tmplujncvco.cs(24,38): error CS0103: The name ''k'' does not exist in the
    current context

    /tmp/tmplujncvco.cs(29,21): error CS0029: Cannot implicitly convert type ''long''
    to ''long[]''

    /tmp/tmplujncvco.cs(32,24): error CS0103: The name ''j'' does not exist in the
    current context

    /tmp/tmplujncvco.cs(33,19): error CS0103: The name ''j'' does not exist in the
    current context

    /tmp/tmplujncvco.cs(34,24): error CS0103: The name ''k'' does not exist in the
    current context

    /tmp/tmplujncvco.cs(35,19): error CS0103: The name ''k'' does not exist in the
    current context

    '
  timestamp: 1659976375
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] a = new long[n];\n        long sum
    = 0;\n        for (int i = 1; i < n; i++) {\n            sum += a[i] + a[i] -
    i;\n            a[i] = a[i] * a[i] - i;\n        }\n        long k = 0;\n        for
    (int i = 0; i < n; i++) {\n            if (k == 0 || a[k] != a[i] + a[k]) {\n
    \               k++;\n                a[k] = a[i];\n            }\n        }\n
    \       return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <794d478922d84264836361c7963dd4e0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <794d478922d84264836361c7963dd4e0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976375
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long maxTriplets = (n * n * n) / 3;\n        long
    count = 0;\n        for (int i = 1; i <= n; i++) {\n            for (int j = i;
    j <= n; j++) {\n                for (int k = i; k <= n; k++) {\n                    if
    (i == j && j == k && k > i) {\n                        continue;\n                    }\n
    \                   if (i * i * i + j * j * j + k * k * k == maxTriplets) {\n
    \                       count++;\n                    }\n                }\n            }\n
    \       }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1005e8935dbd4825bf69461617b180e6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1005e8935dbd4825bf69461617b180e6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long n = Math.Abs(n);\n        List<long>
    a = new List<long>();\n        long s = 0;\n        long t = 0;\n        int d
    = n;\n        while (d-- > 0)\n            s = s + 1;\n        a.Add((long)s);\n
    \       d = n;\n        while (d-- > 0)\n            t = t + 1;\n        a.Add((long)t);\n
    \       long k = 0;\n        long sum = 0;\n        long tSum = 0;\n        long
    eSum = 0;\n        long sumA = 0;\n        foreach (long i in a) {\n            sum
    = sum + i;\n        }\n        sumA = sum;\n        k = 0;\n        for (int i
    = 0; i < a.Count; i++) {\n            k = k + 1;\n            tSum = 0;\n            for
    (int j = i + 1; j < a.Count; j++) {\n                tSum = tSum + a[j];\n            }\n
    \           sum = sum - a[i];\n            eSum = eSum + tSum;\n            sumA
    = sumA + a[i];\n        }\n        int m = (int)Math.Floor(sumA / 3);\n        long
    minA = 0;\n        for (int i = 1; i < a.Count; i++) {\n            long s = a[i];\n
    \           minA = minA + (int)Math.Floor(s);\n        }\n        long maxA =
    0;\n        for (int i = 1; i < a.Count; i++) {\n            long s = a[i];\n
    \           maxA = maxA + (int)Math.Floor(s * 3);\n        }\n        long minTriples
    = 0;\n        for (int i = 0; i < a.Count; i++) {\n            if (a[i] < 3)\n
    \               continue;\n            if (a[i] <= (sumA - minA * 3 - k * 3))
    {\n                continue;\n            }\n            long s = a[i];\n            long
    sSum = sum - a[i];\n            long t = sumA + a[i];\n            long tSum =
    sumA + a[i];\n            long minA = sumA + a[i];\n            for (int j = i
    + 1; j < a.Count; j++) {\n                long e = a[j];\n                long
    sumA = sumA + a[j];\n                long sumB = sumA + e;\n                long
    minB = sumA - e;\n                if (t >= sumB) {\n                    t = sumB;\n
    \                   k = j;\n                }\n                else {\n                    sumA
    = sumB;\n                }\n            }\n            long t = sumA + a[i];\n
    \           if (t > minTriples) {\n                minTriples = t;\n            }\n
    \       }\n        long maxTriples = 0;\n        for (int i = 0; i < a.Count;
    i++) {\n            if (a[i] <= minA)\n                continue;\n            if
    (a[i] <= maxA) {\n                continue;\n            }\n            long s
    = a[i];\n            long sSum = sum - a[i];\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf_dalzai.cs(103,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpf_dalzai.cs(110,2): error CS1513: } expected

    '
  timestamp: 1659976375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        List<long> a = new List<long>();\n        long
    max = 0;\n        for(long i = 1L; i <= n; i++) {\n            for(long j = i;
    j < n; j += i) {\n                for(long k = j; k < n; k += j) {\n                    if(IsMod3(a[i]
    + a[j] + a[k])) {\n                        long sum = i + j + k;\n                        if(sum
    > max) {\n                            max = sum;\n                        }\n
    \                   }\n                }\n            }\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzcffk48h.cs(25,24): error CS0103: The name ''IsMod3'' does not exist in
    the current context

    /tmp/tmpzcffk48h.cs(25,33): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpzcffk48h.cs(25,40): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpzcffk48h.cs(25,47): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976375
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long result = 0;\n        List<long> a =
    new List<long>();\n        long temp = 0;\n        for(int i = 0; i <= n; i++){\n
    \           temp = i * i - i + 1;\n            a.Add(temp);\n        }\n        for(int
    i = 0; i < a.Count; i++){\n            for(int j = 0; j < a.Count; j++){\n                if(j
    > i){\n                    for(int k = 0; k < a.Count; k++){\n                        if(((a[i]
    + a[j] + a[k]) % 3) == 0){\n                            result++;\n                        }\n
    \                   }\n                }\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <171d397bc8474ce5b22b1c4e182ebee1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <171d397bc8474ce5b22b1c4e182ebee1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long result = 0;\n        long[] a = new
    long[n];\n        a[0] = 1;\n        for (int i = 1; i < n; ++i) {\n            a[i]
    = a[i-1] * 2 - 1 + 1;\n        }\n        for (int i = 1; i < n; ++i) {\n            int
    j = i;\n            while (j < n) {\n                j += i;\n            }\n
    \           int k = i;\n            while (k > 0) {\n                k--;\n            }\n
    \           if (a[i] < 3 && a[j] < 3 && a[k] < 3) {\n                result++;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.GetMaxTriples (System.Int64 n) [0x00077]
    in <6d376206f6004e45baade55e74773c39>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <6d376206f6004e45baade55e74773c39>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.GetMaxTriples (System.Int64 n) [0x00077] in <6d376206f6004e45baade55e74773c39>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <6d376206f6004e45baade55e74773c39>:0
    \n"
  stdout: ''
  timestamp: 1659976375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long a[] = new long[n];\n        long sum
    = 0;\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n
    \           sum += a[i];\n        }\n        Array.Sort(a);\n        long temp
    = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j
    < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    temp
    = ((a[i] * a[j] * a[k]) % 3) - sum;\n                    if (temp == 0) temp++;\n
    \                   if (temp == 0) temp++;\n                    if (temp == 0)
    temp++;\n                    Debug.WriteLine(\"({0}, {1}, {2})\", a[i], a[j],
    a[k]);\n                    sum += temp;\n                }\n            }\n        }\n
    \       return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptek2bq_l.cs(20,15): error CS0650: Bad array declarator: To declare a managed
    array the rank specifier precedes the variable''s identifier. To declare a fixed
    size buffer field, use the fixed keyword before the field type.

    '
  timestamp: 1659976375
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long sum = (n*(n+1))/2;\n        List<long>
    a = new List<long>();\n        for (int i = 1; i < n; i++)\n        {\n            for
    (int j = 1; j < n; j++)\n            {\n                for (int k = 1; k < n;
    k++)\n                {\n                    if ((i*i + j*j + k*k) == sum)\n                    {\n
    \                       a.Add(i*j + i*k + k*j);\n                    }\n                }\n
    \           }\n        }\n        if (Math.Sqrt(a.Count()) < 1)\n        {\n            return
    1L;\n        }\n        else\n        {\n            long max = 0;\n            int
    index = 0;\n            for (int i = 1; i < a.Count(); i++)\n            {\n                for
    (int j = 1; j < a.Count(); j++)\n                {\n                    for (int
    k = 1; k < a.Count(); k++)\n                    {\n                        if
    (a[i] < a[j] && a[j] < a[k])\n                        {\n                            max
    = Math.Max(max, a[index]);\n                        }\n                    }\n
    \               }\n            }\n            return max;\n        }\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <94c422eaa5994801942933066a9c4f8e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <94c422eaa5994801942933066a9c4f8e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] a = new long[n];\n        long triple
    = 0;\n        long tripleMax = 0;\n        long maxVal = 0;\n\n        for (int
    i = 1; i <= n; i++) {\n            a[i] = i * i - i + 1;\n            triple +=
    a[i];\n\n            if (triple > tripleMax) {\n                tripleMax = triple;\n
    \               maxVal = i;\n            }\n        }\n\n        return maxVal;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.GetMaxTriples (System.Int64 n) [0x00018]
    in <2c297b4b627543a3b0e031a8d13b6ff8>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <2c297b4b627543a3b0e031a8d13b6ff8>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.GetMaxTriples (System.Int64 n) [0x00018] in <2c297b4b627543a3b0e031a8d13b6ff8>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <2c297b4b627543a3b0e031a8d13b6ff8>:0
    \n"
  stdout: ''
  timestamp: 1659976375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long maxVal = n;\n        int[] a = new
    int[n];\n        Array.Sort(a);\n        long cnt = 0;\n        for (int i = 0;
    i < n; ++i) {\n            int j = (i + 1) % n;\n            int k = (i + 2) %
    n;\n            if ((i * i * i) + a[j] + a[k] == 0) {\n                cnt++;\n
    \           }\n        }\n        return maxVal * maxVal * maxVal - cnt * cnt
    * cnt;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptug7dd4v.cs(25,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmptug7dd4v.cs(26,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        var a = new List<long>();\n        var c
    = 0;\n        long a1 = 1;\n        long a2 = 1;\n        long a3 = 1;\n        long
    a21 = 1;\n        long a31 = 1;\n        long a23 = 1;\n        long a32 = 1;\n
    \       long a31 = 1;\n        long a32 = 1;\n        long a33 = 1;\n        long
    a32 = 1;\n        long a33 = 1;\n        while (n > 0) {\n            c += 2;\n
    \           a += a1;\n            a1 = a2 + a3;\n            a2 = a2 + a3;\n            a3
    = a3 + a3;\n            n -= 2;\n        }\n        while (a.Count > 0) {\n            var
    last = a.Last();\n            if (last % 3 == 0) {\n                c += 1;\n
    \           }\n            a -= last;\n            while (a % 3 == 0) {\n                c
    += 1;\n                a /= 3;\n            }\n        }\n        return c;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpefs21g02.cs(29,14): error CS0128: A local variable or function named ''a31''
    is already defined in this scope

    /tmp/tmpefs21g02.cs(30,14): error CS0128: A local variable or function named ''a32''
    is already defined in this scope

    /tmp/tmpefs21g02.cs(32,14): error CS0128: A local variable or function named ''a32''
    is already defined in this scope

    /tmp/tmpefs21g02.cs(33,14): error CS0128: A local variable or function named ''a33''
    is already defined in this scope

    /tmp/tmpefs21g02.cs(36,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''List<long>'' and ''long''

    /tmp/tmpefs21g02.cs(47,13): error CS0019: Operator ''-='' cannot be applied to
    operands of type ''List<long>'' and ''long''

    /tmp/tmpefs21g02.cs(48,20): error CS0019: Operator ''%'' cannot be applied to
    operands of type ''List<long>'' and ''int''

    /tmp/tmpefs21g02.cs(50,17): error CS0019: Operator ''/='' cannot be applied to
    operands of type ''List<long>'' and ''int''

    /tmp/tmpefs21g02.cs(25,14): warning CS0219: The variable ''a21'' is assigned but
    its value is never used

    /tmp/tmpefs21g02.cs(26,14): warning CS0219: The variable ''a31'' is assigned but
    its value is never used

    /tmp/tmpefs21g02.cs(27,14): warning CS0219: The variable ''a23'' is assigned but
    its value is never used

    /tmp/tmpefs21g02.cs(28,14): warning CS0219: The variable ''a32'' is assigned but
    its value is never used

    /tmp/tmpefs21g02.cs(29,14): warning CS0219: The variable ''a31'' is assigned but
    its value is never used

    /tmp/tmpefs21g02.cs(30,14): warning CS0219: The variable ''a32'' is assigned but
    its value is never used

    /tmp/tmpefs21g02.cs(31,14): warning CS0219: The variable ''a33'' is assigned but
    its value is never used

    /tmp/tmpefs21g02.cs(32,14): warning CS0219: The variable ''a32'' is assigned but
    its value is never used

    /tmp/tmpefs21g02.cs(33,14): warning CS0219: The variable ''a33'' is assigned but
    its value is never used

    '
  timestamp: 1659976375
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long a = Enumerable.Range(1, n).Select(i
    => (i * i - i + 1)).ToArray();\n        Debug.Assert(a.Length == n);\n        Debug.Assert(a[0]
    % 3 == 0);\n        Debug.Assert(a[n-1] % 3 == 0);\n        int max = a[0];\n
    \       for (int i = 1; i < n-1; i++) {\n            long sum = 0;\n            for
    (int j = i; j < n; j++)\n                sum += a[j];\n            if (sum < max)\n
    \               max = sum;\n        }\n        return max;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n
    \   Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx7sbn2ej.cs(20,38): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpx7sbn2ej.cs(21,24): error CS1061: ''long'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpx7sbn2ej.cs(22,22): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpx7sbn2ej.cs(23,22): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpx7sbn2ej.cs(24,19): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpx7sbn2ej.cs(28,24): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpx7sbn2ej.cs(30,23): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976375
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long maxTriples = 0;\n        long[] a =
    new long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i
    - i + 1;\n        }\n        int j = 0;\n        for (int i = 1; i < n; i++) {\n
    \           long sum = a[j] + a[i];\n            if (sum == 3) {\n                maxTriples++;\n
    \           }\n            j++;\n        }\n        return maxTriples;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7e4a73befe9144f7bbd8c41be02766a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7e4a73befe9144f7bbd8c41be02766a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long a[] = new long[n];\n\n        ulong
    p = 0;\n\n        for (int i = 1; i <= n; i++) {\n            a[i] = i * i - i
    + 1;\n        }\n\n        var list = new List<long>();\n        var maxIndex
    = 0;\n        ulong maxValue = 0;\n\n        for (int i = 0; i < n; i++) {\n            var
    currentIndex = 0;\n\n            while (currentIndex < list.Count && a[currentIndex]
    < a[i]) {\n                currentIndex++;\n            }\n\n            if (currentIndex
    >= list.Count) {\n                var value = a[i];\n                if (value
    > maxValue) {\n                    maxValue = value;\n                    maxIndex
    = i;\n                }\n            }\n\n            list.Add(a[i]);\n        }\n\n
    \       var count = 0;\n        var max = 0;\n        var currentIndex = 0;\n
    \       while (currentIndex < list.Count) {\n            var value = list[currentIndex];\n
    \           if (value > max) {\n                max = value;\n                maxIndex
    = currentIndex;\n            }\n\n            currentIndex++;\n        }\n\n        ulong
    maxValue2 = maxValue - 1;\n        var list2 = new List<long>();\n        var
    currentIndex2 = 0;\n        while (currentIndex2 < list.Count) {\n            if
    (list[currentIndex2] >= maxValue2) {\n                var value2 = list[currentIndex2];\n
    \               if (value2 <= maxValue2) {\n                    list2.Add(value2);\n
    \               }\n            }\n\n            currentIndex2++;\n        }\n\n
    \       long ans = 0;\n        int index = 0;\n        while (index < list2.Count)
    {\n            if (list2[index] % 3 == 0) {\n                ans += list2[index]
    / 3;\n            }\n            index++;\n        }\n\n        return ans;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn72ix1pe.cs(20,15): error CS0650: Bad array declarator: To declare a managed
    array the rank specifier precedes the variable''s identifier. To declare a fixed
    size buffer field, use the fixed keyword before the field type.

    '
  timestamp: 1659976375
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        HashSet<long> set = new HashSet<long>();\n
    \       List<long> list = new List<long>();\n        for (int i = 1; i <= n; i++)
    {\n            list.Add(i);\n            long sum = 0;\n            for (int j
    = 0; j < list.Count; j++) {\n                sum += list[j];\n                if
    (sum % 3 != 0) {\n                    set.Add(sum);\n                }\n            }\n
    \       }\n        return set.Count > 0 ? set.Count - 1 : 0;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n
    \   Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fa9001dee9544991b01084b342afce27>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fa9001dee9544991b01084b342afce27>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        ulong a = new ulong[n];\n        ulong cnt
    = 0;\n        ulong x = 0;\n\n        for (int i = 1; i <= n; i++) {\n            a[i]
    = i * i - i + 1;\n            x = x + a[i] * a[i];\n            if (x % 3 == 0)
    {\n                cnt++;\n            }\n        }\n        return cnt;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu6zxu9yj.cs(20,19): error CS0029: Cannot implicitly convert type ''ulong[]''
    to ''ulong''

    /tmp/tmpu6zxu9yj.cs(25,13): error CS0021: Cannot apply indexing with [] to an
    expression of type ''ulong''

    /tmp/tmpu6zxu9yj.cs(26,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''ulong''

    /tmp/tmpu6zxu9yj.cs(26,28): error CS0021: Cannot apply indexing with [] to an
    expression of type ''ulong''

    /tmp/tmpu6zxu9yj.cs(31,16): error CS0266: Cannot implicitly convert type ''ulong''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976375
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] a = new long[n];\n        int counter
    = 0;\n        bool isDivisible = false;\n        for (int i = 0; i < n; i++) {\n
    \           isDivisible = false;\n            for (int j = i + 1; j < n; j++)
    {\n                isDivisible = true;\n                for (int k = j + 1; k
    < n; k++) {\n                    if (a[i] < a[j] && a[j] < a[k]) {\n                        isDivisible
    = false;\n                        break;\n                    }\n                }\n
    \               if (isDivisible) {\n                    counter++;\n                }\n
    \           }\n            a[i] = a[i] - i + 1;\n        }\n        return counter;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2a15ac8bde8d4bc4861345caa13d0a1f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2a15ac8bde8d4bc4861345caa13d0a1f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        int[] a = new int[n];\n        long sum
    = 0;\n        long tripleSum = 0;\n        int triplesCount = 0;\n\n        foreach
    (int i in a) {\n            sum = (i * i - i + 1) * 3;\n            if (sum >
    triplesCount) {\n                triplesCount = sum;\n            }\n            a.Add(i
    * i - i + 1);\n        }\n        return triplesCount;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5ryq2qx4.cs(28,32): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp5ryq2qx4.cs(30,15): error CS1061: ''int[]'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''int[]'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmp5ryq2qx4.cs(22,14): warning CS0219: The variable ''tripleSum'' is assigned
    but its value is never used

    '
  timestamp: 1659976375
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long max = 1;\n        for (int i = 1; i
    < n; i++) {\n            long a1 = i * i - i + 1;\n            long a2 = a1 +
    1;\n            long a3 = a2 + 1;\n            if (Math.Pow(a1, 3) + Math.Pow(a2,
    3) + Math.Pow(a3, 3) == (3 * Math.Pow(i, 3))) \n                max = Math.Max(max,
    a1 + a2 + a3);\n        }\n        return max;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6fae894a8abf4646b1c9683a5671fefa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6fae894a8abf4646b1c9683a5671fefa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        // your code goes here\n        var list
    = new List<long>();\n        var result = new long[n - 1];\n        long k = 3;\n
    \       for (int i = 1; i < n; i++) {\n            list[i] = i * i - i + 1;\n
    \           long sum = 0;\n            for (int j = i; j < n; j++) {\n                sum
    += list[j];\n            }\n            if (sum % 3 == 0) {\n                result[i
    - 1] = list[i];\n            }\n            if (sum > k) {\n                k
    = sum;\n            }\n        }\n        return result.Where(x => x > 0).Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].set_Item (System.Int32
    index, T value) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.GetMaxTriples
    (System.Int64 n) [0x0001a] in <a9f838fb1f2c4a3a946732ff36a8d6c5>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <a9f838fb1f2c4a3a946732ff36a8d6c5>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].set_Item (System.Int32
    index, T value) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.GetMaxTriples
    (System.Int64 n) [0x0001a] in <a9f838fb1f2c4a3a946732ff36a8d6c5>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <a9f838fb1f2c4a3a946732ff36a8d6c5>:0 \n"
  stdout: ''
  timestamp: 1659976376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] a = Enumerable.Range(1, n).ToArray();\n
    \       Array.Sort(a);\n        int n = a.Length;\n        for (int i = 0; i <
    n; i++) {\n            long cur = a[i];\n            for (int j = i + 1; j < n;
    j++) {\n                long next = a[j];\n                for (int k = j + 1;
    k < n; k++) {\n                    long next2 = a[k];\n                    while
    (cur + next + next2 >= 3) {\n                        next++;\n                        next2++;\n
    \                   }\n                    if (next2 == next) continue;\n                    if
    (next2 > next) swap(next2, next);\n                    if (cur + next + next2
    == 3) return 1 + i;\n                }\n            }\n        }\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8wikqwvc.cs(20,40): error CS0841: Cannot use local variable ''n'' before
    it is declared

    /tmp/tmp8wikqwvc.cs(22,13): error CS0136: A local or parameter named ''n'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp8wikqwvc.cs(34,39): error CS0103: The name ''swap'' does not exist in
    the current context

    '
  timestamp: 1659976376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        HashSet<long> set = new HashSet<long>();\n
    \       long total = 0;\n        long max = 0;\n        long[] a = new long[n];\n
    \       for (int i = 0; i < a.Length; i++) {\n            a[i] = i * i - i + 1;\n
    \           total += a[i];\n        }\n        max = total;\n        for (int
    i = 0; i < a.Length; i++) {\n            for (int j = 0; j < a.Length; j++) {\n
    \               if (i != j) {\n                    if (a[i] < a[j]) {\n                        set.add(a[i]
    + a[j]);\n                    }\n                }\n            }\n        }\n
    \       if (set.Count > 0) {\n            long sum = 0;\n            foreach (long
    n in set) {\n                sum += n;\n            }\n            if (sum ==
    max) {\n                return set.Count;\n            }\n        }\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq_od44z8.cs(33,29): error CS1061: ''HashSet<long>'' does not contain a
    definition for ''add'' and no accessible extension method ''add'' accepting a
    first argument of type ''HashSet<long>'' could be found (are you missing a using
    directive or an assembly reference?)

    /tmp/tmpq_od44z8.cs(40,27): error CS0136: A local or parameter named ''n'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659976376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long a = n * (n + 1) / 2;\n        long[]
    b = new long[n];\n        for (int i = 0; i < n; i++) {\n            b[i] = i
    * i - i + 1;\n        }\n        // the only valid triplet is  (a[i], a[j], a[k])\n
    \       return GetTriples(a, b, a, b, 0, a.Length - 1);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzofhcz59.cs(26,16): error CS0103: The name ''GetTriples'' does not exist
    in the current context

    /tmp/tmpzofhcz59.cs(26,44): error CS1061: ''long'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659976376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] a = Enumerable.Range(1, n).Select(x
    => (x * x) + (x + 1)).ToArray();\n        Array.Sort(a);\n        int count =
    1;\n        for (int i = 0; i < a.Length; i++) {\n            for (int j = i +
    1; j < a.Length; j++) {\n                for (int k = j + 1; k < a.Length; k++)
    {\n                    int result = (a[i] + a[j] + a[k]) % 3;\n                    if
    (result == 0) count++;\n                }\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp652jte98.cs(20,40): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp652jte98.cs(26,34): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        var a = new long[(int)n];\n\n        for
    (int i = 0; i < (int)n; i++)\n            a[i] = (i * i - i + 1);\n\n        return
    GetMaxTriples(a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvs8r1aem.cs(25,30): error CS1503: Argument 1: cannot convert from ''long[]''
    to ''long''

    '
  timestamp: 1659976376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long a = new long[(int) n];\n        for
    (int i = 0; i < a.Length; i++) {\n            a[i] = i * i - i + 1;\n        }\n
    \       var q = new Queue<Tuple<long, long, long>>();\n        q.Enqueue(new Tuple<long,
    long, long>(0, 1, n));\n        while (q.Count > 0) {\n            var a = q.Dequeue();\n
    \           int n = a.Item2;\n            for (int i = 1, j = n + 1; i <= n; i++)
    {\n                for (int k = 1, m = a[i] - a[j] + 1; k <= m; k++) {\n                    if
    (a[i] > a[j]) {\n                        q.Enqueue(new Tuple<long, long, long>(a[i],
    a[j], k));\n                    }\n                    if (a[i] < a[j]) {\n                        q.Enqueue(new
    Tuple<long, long, long>(a[i], a[j], k));\n                    }\n                    if
    (a[i] < a[j]) {\n                        q.Enqueue(new Tuple<long, long, long>(a[i],
    a[j], k));\n                    }\n                }\n            }\n        }\n
    \       return q.Count;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbzgqfes6.cs(20,18): error CS0029: Cannot implicitly convert type ''long[]''
    to ''long''

    /tmp/tmpbzgqfes6.cs(21,31): error CS1061: ''long'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpbzgqfes6.cs(22,13): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpbzgqfes6.cs(27,17): error CS0136: A local or parameter named ''a'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpbzgqfes6.cs(28,17): error CS0136: A local or parameter named ''n'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpbzgqfes6.cs(28,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpbzgqfes6.cs(30,37): error CS0021: Cannot apply indexing with [] to an
    expression of type ''Tuple<long, long, long>''

    /tmp/tmpbzgqfes6.cs(30,44): error CS0021: Cannot apply indexing with [] to an
    expression of type ''Tuple<long, long, long>''

    /tmp/tmpbzgqfes6.cs(31,25): error CS0021: Cannot apply indexing with [] to an
    expression of type ''Tuple<long, long, long>''

    /tmp/tmpbzgqfes6.cs(31,32): error CS0021: Cannot apply indexing with [] to an
    expression of type ''Tuple<long, long, long>''

    /tmp/tmpbzgqfes6.cs(32,63): error CS0021: Cannot apply indexing with [] to an
    expression of type ''Tuple<long, long, long>''

    /tmp/tmpbzgqfes6.cs(32,69): error CS0021: Cannot apply indexing with [] to an
    expression of type ''Tuple<long, long, long>''

    /tmp/tmpbzgqfes6.cs(34,25): error CS0021: Cannot apply indexing with [] to an
    expression of type ''Tuple<long, long, long>''

    /tmp/tmpbzgqfes6.cs(34,32): error CS0021: Cannot apply indexing with [] to an
    exp'
  timestamp: 1659976376
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long m = 1;\n        for (int i = 1; i <=
    n; i++) {\n            for (int j = i; j <= n; j++) {\n                long sum
    = 0;\n                for (int k = 0; k <= i; k++) {\n                    sum
    += k;\n                }\n                if (sum == m) {\n                    return
    1;\n                }\n                else {\n                    m = (sum +
    m) % 3;\n                }\n            }\n        }\n        return 0;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f610a2edcf914c56a368e44430fdd8f8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f610a2edcf914c56a368e44430fdd8f8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long a = Enumerable.Range(1, n).ToList();\n
    \       bool isInt = true;\n        for (long i = 0; i < a.Count; i++) {\n            int
    iInt = (int)a[i];\n            for (int j = iInt; j < a.Count; j++) {\n                int
    jInt = (int)a[j];\n                for (int k = jInt; k < a.Count; k++) {\n                    int
    kInt = (int)a[k];\n                    if (((iInt + jInt) + kInt) % 3 == 0) {\n
    \                       isInt = false;\n                        break;\n                    }\n
    \               }\n                if (isInt) {\n                    break;\n
    \               }\n            }\n            if (isInt) {\n                break;\n
    \           }\n        }\n        return a.Count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps9lpzafs.cs(20,38): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmps9lpzafs.cs(22,26): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''long'' and ''method group''

    /tmp/tmps9lpzafs.cs(23,29): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmps9lpzafs.cs(24,32): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''int'' and ''method group''

    /tmp/tmps9lpzafs.cs(25,33): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmps9lpzafs.cs(26,36): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''int'' and ''method group''

    /tmp/tmps9lpzafs.cs(27,37): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmps9lpzafs.cs(41,18): error CS0428: Cannot convert method group ''Count''
    to non-delegate type ''long''. Did you intend to invoke the method?

    '
  timestamp: 1659976376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        if (n == 0) return 0;\n        if (n ==
    1) return 1;\n        if (n == 2) return 2;\n        long a = new long[n];\n        Array.Sort(a);\n
    \       long max1 = a.Take(n - 1).Max();\n        long max2 = a.Take(n - 2).Max();\n
    \       if (max1 == 0) max1 = 1;\n        if (max2 == 0) max2 = 1;\n        long
    k = 0;\n        long count1 = 0;\n        long count2 = 0;\n        long c = 1;\n
    \       for (int i = 1; i < n; i++) {\n            if (c == 3) {\n                k
    = i;\n                break;\n            }\n            count1++;\n            c
    *= i;\n        }\n        for (int i = 1; i < n; i++) {\n            if (c ==
    3) {\n                k = i;\n                break;\n            }\n            count2++;\n
    \           c *= i;\n        }\n        return count1 + count2 + ((count1 + count2)
    + k) / 3;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5iaiz08u.cs(23,18): error CS0029: Cannot implicitly convert type ''long[]''
    to ''long''

    /tmp/tmp5iaiz08u.cs(24,20): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Array''

    /tmp/tmp5iaiz08u.cs(25,23): error CS1061: ''long'' does not contain a definition
    for ''Take'' and no accessible extension method ''Take'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmp5iaiz08u.cs(26,23): error CS1061: ''long'' does not contain a definition
    for ''Take'' and no accessible extension method ''Take'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659976376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        if (n == 0) {\n            return 0;\n        }\n\n
    \       long[] a = new long[n];\n        int j = 0;\n        Array.Sort(a);\n
    \       for (int i = 1; i <= n; i++) {\n            a[i] = i * i - i + 1;\n        }\n\n
    \       int k = n - 1;\n        long result = 0;\n\n        while (k > 0) {\n
    \           if (a[k] < 0 && a[k - 1] < 0) {\n                k--;\n            }\n
    \           else if (a[k] > 0 && a[k - 1] >= 0) {\n                k--;\n            }\n
    \           else {\n                long temp = a[k];\n                a[k] =
    a[k - 1];\n                a[k - 1] = temp;\n            }\n\n            foreach
    (long k in a) {\n                if (k > 0) {\n                    long temp =
    a[k];\n                    a[k] = a[k - 1];\n                    a[k - 1] = temp;\n
    \               }\n            }\n\n            foreach (long k in a) {\n                result
    += Math.Abs(k);\n            }\n        }\n\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n
    \   Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp59ib3ij4.cs(31,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp59ib3ij4.cs(47,27): error CS0136: A local or parameter named ''k'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp59ib3ij4.cs(55,27): error CS0136: A local or parameter named ''k'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp59ib3ij4.cs(25,13): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    '
  timestamp: 1659976376
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long max = 0;\n        long[] a = new long[n];\n
    \       for(long i=0;i<n;i++){\n            a[i] = i*i - i+1;\n        }\n        for(int
    i=0;i<n-1;i++){\n            for(int j=i+1;j<n;j++){\n                for(int
    k=0;k<n;k++){\n                    if(a[i] + a[j] + a[k] == 3 && i< j && j< k){\n
    \                       max++;\n                    }\n                }\n            }\n
    \       }\n        return max;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a60219d8da144fa899d9b1b26be51d7a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a60219d8da144fa899d9b1b26be51d7a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976376
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        List<long> a = new List<long>();\n        for
    (int i = 0; i < n; i++) {\n            a.Add(i * i - i + 1);\n        }\n        //
    Find the smallest a that is divisible by 3.\n        long remainder = a.Aggregate((x,
    y) => x % 3 == 0 ? x : y);\n        long result = 0;\n        foreach (var value
    in a) {\n            for (int i = 2; i <= value / 2; i++) {\n                if
    (value % i == 0 && value % i == 0) {\n                    result += 1;\n                    break;\n
    \               }\n            }\n        }\n        return result * (long) Math.Pow(3,
    a.Count - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <211d3aed7be545d8adbc48fa7a814efa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <211d3aed7be545d8adbc48fa7a814efa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] a = new long[n];\n        for (int
    i = 1; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for
    (int k = j + 1; k < n; k++) {\n                    if (IsMultipleOf3(a[i], a[j],
    a[k])) {\n                        yield return i + j + k;\n                    }\n
    \               }\n            }\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx1fbx7tu.cs(19,24): error CS1624: The body of ''Problem.GetMaxTriples(long)''
    cannot be an iterator block because ''long'' is not an iterator interface type

    /tmp/tmpx1fbx7tu.cs(24,25): error CS0103: The name ''IsMultipleOf3'' does not
    exist in the current context

    '
  timestamp: 1659976376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        List<long> a = new List<long>();\n        for(int
    i = 1; i < n; i++)\n            a.Add(i * i - i + 1);\n        Array.Sort(a);\n
    \       long sum = 0;\n        for(int i = 0; i < a.Count - 1; i++) {\n            int
    j = (int)a[i];\n            sum += j;\n            for(int k = i + 1; k < a.Count;
    k++)\n                sum += a[k];\n            if(sum == 3)\n                return
    1;\n            sum = 0;\n        }\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpenhg5ujl.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    '
  timestamp: 1659976376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] arr = new long[n];\n        arr[0]
    = 1;\n        arr[1] = 2;\n        for (int i = 2; i <= n; i++) {\n            arr[i]
    = arr[i - 1] * i - i + 1;\n        }\n\n        long[] min = new long[n];\n        int
    minIndex = 0;\n        Array.Sort(arr);\n\n        int last = 0;\n        long
    total = 0;\n        for (int i = 2; i < arr.Length; i++) {\n            if (arr[i]
    == arr[last] - 1) {\n                last++;\n                arr[last] = arr[last]
    * last - last;\n            } else {\n                total += arr[last] - arr[last];\n
    \               last = i;\n            }\n\n            min[minIndex++] = arr[last]
    - 1;\n        }\n\n        return total;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.GetMaxTriples (System.Int64 n) [0x00019]
    in <8f907e672f3044beabc621c511ab9afd>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8f907e672f3044beabc621c511ab9afd>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.GetMaxTriples (System.Int64 n) [0x00019] in <8f907e672f3044beabc621c511ab9afd>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <8f907e672f3044beabc621c511ab9afd>:0
    \n"
  stdout: ''
  timestamp: 1659976376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] a = new long[n];\n        for (int
    i = 1; i <= n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int
    k = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1;
    j < n; j++) {\n                for (int z = j + 1; z < n; z++) {\n                    if
    ((int)a[i] - (int)a[j] - (int)a[z] % 3 == 0) {\n                        k++;\n
    \                   }\n                }\n            }\n        }\n        return
    k;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.GetMaxTriples (System.Int64 n) [0x0000e]
    in <fb26ff917903411a94f5ced49d04963b>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <fb26ff917903411a94f5ced49d04963b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.GetMaxTriples (System.Int64 n) [0x0000e] in <fb26ff917903411a94f5ced49d04963b>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <fb26ff917903411a94f5ced49d04963b>:0
    \n"
  stdout: ''
  timestamp: 1659976376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        if (n == 0L)\n            return 0L;\n        long[]
    result = new long[(int)Math.Ceiling(n/2)];\n        long[] a = new long[(int)Math.Ceiling(n/2)];\n
    \       for (int i = 1L; i <= n; i++) {\n            for (int j = 0; j < (int)Math.Floor(i/2);
    j++) {\n                for (int k = 0; k < (int)Math.Ceiling(i/2); k++) {\n                    a[j]
    = a[j] - i;\n                    a[k] = (long)Math.Ceiling((double)a[k] / (double)(i*i));\n
    \                   result[j+k] = Math.Max(a[j], Math.Max(a[k], a[j+k]));\n                }\n
    \           }\n        }\n        long sum = 0L;\n        bool isSum = false,
    isMultipleOfThree = false;\n        foreach (long x in result)\n        {\n            if
    (x==3)\n            {\n                isSum = true;\n                sum += x;\n
    \           }\n            else if ((x & 3) == 3)\n            {\n                isMultipleOfThree
    = true;\n            }\n        }\n        if (isSum)\n        {\n            return
    sum;\n        }\n        if (isMultipleOfThree)\n        {\n            return
    1L;\n        }\n        return 0L;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw7ldy8vh.cs(22,44): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Ceiling(decimal)'' and ''Math.Ceiling(double)''

    /tmp/tmpw7ldy8vh.cs(23,39): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Ceiling(decimal)'' and ''Math.Ceiling(double)''

    /tmp/tmpw7ldy8vh.cs(24,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpw7ldy8vh.cs(25,43): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Floor(decimal)'' and ''Math.Floor(double)''

    /tmp/tmpw7ldy8vh.cs(26,47): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Ceiling(decimal)'' and ''Math.Ceiling(double)''

    '
  timestamp: 1659976376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        ArrayList a = new ArrayList(n);\n        for
    (int i = 1; i < n; i++) {\n            a.Add(i * i - i + 1);\n        }\n        var
    result = a.Select(item => (long)Math.Pow(item, 3) - item).Sum();\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5mkzzgly.cs(20,9): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmp5mkzzgly.cs(20,27): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659976376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] a = new long[n];\n        for (int
    i = 1; i <= n; i++) {\n            for (int j = 1; j <= i; j++) {\n                for
    (int k = 1; k <= j; k++) {\n                    if (k == i || k == j || k == i)\n
    \                       continue;\n                    if (a[k - 1] == a[j - 1]
    + a[i])\n                        return a[k - 1] == a[j - 1] + a[i];\n                }\n
    \           }\n        }\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8euzuv73.cs(27,32): error CS0029: Cannot implicitly convert type ''bool''
    to ''long''

    '
  timestamp: 1659976376
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] a = new long[n];\n        int[] count
    = new int[n];\n        // Initialize the array a with values 1, 3, 7, 13, 21\n
    \       for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n
    \       // Count the number of triples (a[i], a[j], a[k]) of a where i < j < k\n
    \       // and a[i] + a[j] + a[k] is a multiple of 3.\n        for (int i = 0;
    i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for
    (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3
    == 0) {\n                        count[i]++;\n                        count[j]++;\n
    \                       count[k]++;\n                        break;\n                    }\n
    \               }\n            }\n        }\n        return count.Max();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b2bb0fa4ff59480b877149bc2347b37c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b2bb0fa4ff59480b877149bc2347b37c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long a = new long[n];\n        Array.Sort(a);\n
    \       long sum = 0;\n        long count = 0;\n        long sum2;\n        for
    (int i = 0; i < n; i++) {\n            sum = a[i];\n            sum2 = a[i] +
    a[i + 1] + a[i << 1];\n            if (sum % 3 == 0 && sum2 % 3 == 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplfadgl18.cs(20,18): error CS0029: Cannot implicitly convert type ''long[]''
    to ''long''

    /tmp/tmplfadgl18.cs(21,20): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Array''

    /tmp/tmplfadgl18.cs(26,19): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmplfadgl18.cs(27,20): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmplfadgl18.cs(27,27): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmplfadgl18.cs(27,38): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659976376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long a = new long[n];\n        for (int
    i = 0; i < n; i++)\n            a[i] = i * i - i + 1;\n        int count = 0;\n
    \       for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++)
    {\n                if (j < i) continue;\n                for (int k = 0; k < n;
    k++) {\n                    if (k < j) continue;\n                    long triple
    = 0;\n                    for (int i1 = 0; i1 < n; i1++)\n                        for
    (int j1 = 0; j1 < n; j1++)\n                            for (int k1 = 0; k1 <
    n; k1++)\n                                if (i1 < j1 && j1 < k1) \n                                    triple
    += a[i1] * a[j1] * a[k1];\n                    if (triple == 3 * a[i])\n                        count++;\n
    \               }\n            }\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n
    \   Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5p5kir0c.cs(20,18): error CS0029: Cannot implicitly convert type ''long[]''
    to ''long''

    /tmp/tmp5p5kir0c.cs(22,13): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmp5p5kir0c.cs(34,47): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmp5p5kir0c.cs(34,55): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmp5p5kir0c.cs(34,63): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmp5p5kir0c.cs(35,39): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659976376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] a = new long[n + 1];\n        a[0]
    = 1;\n        a[1] = 1;\n        long sum = 0;\n        for (int i = 1; i <= n;
    i++) {\n            a[i] = a[i-1] * a[i-1] - a[i-1] + i;\n            sum += a[i];\n
    \       }\n        return (sum % 3L == 0);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3rxb6yto.cs(28,17): error CS0029: Cannot implicitly convert type ''bool''
    to ''long''

    '
  timestamp: 1659976376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long count = 1;\n        long max = 1;\n
    \       for (int i = 1; i < n; i++) {\n            for (int j = i + 1; j < n;
    j++) {\n                for (int k = j + 1; k < n; k++) {\n                    long
    triple = i * i * i + j * j + k * k;\n                    long test = Math.Pow(triple,
    3);\n                    if (test == max) {\n                        max++;\n
    \                   }\n                }\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm7_zmzwt.cs(26,33): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        // The answer is positive.\n        long
    maxTriplets = (long)0;\n        long[] a = new long[n];\n        \n        for
    (int i = 0; i < a.Length; i++) {\n            // The a[i] = i * i - i + 1.\n            a[i]
    = i * i - i + 1;\n        }\n        \n        foreach (var triple in GetTriples(n))
    {\n            long sum = 0;\n            for (int i = 0; i < triple; i++) {\n
    \               sum += a[i];\n            }\n            if (sum % 3 == 0) {\n
    \               maxTriplets++;\n            }\n        }\n        \n        return
    maxTriplets;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp426g67ul.cs(29,32): error CS0103: The name ''GetTriples'' does not exist
    in the current context

    '
  timestamp: 1659976376
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        var a = new List<long>();\n        var total
    = 0;\n        var first = 1;\n        for(long i = 1; i < n; i++) {\n            a.Add(first
    * first - first + 1);\n            total += a.Last();\n            first = i;\n
    \       }\n        foreach(var item in a) {\n            if(item % 3 == 0) {\n
    \               a.Remove(item);\n                total -= item;\n            }\n
    \       }\n        return total;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmwh1040m.cs(25,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpmwh1040m.cs(26,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpmwh1040m.cs(31,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976376
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        var result = new List<long>();\n        long
    max = 0;\n        long num = 0;\n        for(int i=1; i<=n; i++){\n            if(i%3==0){\n
    \               num+=i;\n                num*=2;\n            }\n            if(num>=3
    && num%3==0){\n                result.Add(num);\n                num = 0;\n            }\n
    \       }\n        if (result.Count > 0){\n            result.Sort();\n            max
    = result[0];\n            foreach (var r in result.Skip(1)){\n                if(r>=max)\n
    \                   max = r;\n            }\n        }\n        return max;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f61d5e5e339a48879321b37894762400>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f61d5e5e339a48879321b37894762400>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976377
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] a = new long[n];\n\n        // fill
    the array a\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i -
    i + 1;\n        }\n        long max = 0;\n        for (int i = 0; i < n - 1; i++)
    {\n            for (int j = i + 1; j < n; j++) {\n                for (int k =
    j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] == 3 && a !=
    null)\n                    {\n                        if (max < i)\n                        {\n
    \                           max = i;\n                        }\n                        if
    (max < j)\n                        {\n                            max = j;\n                        }\n
    \                       if (max < k)\n                        {\n                            max
    = k;\n                        }\n                    }\n                }\n            }\n
    \       }\n        if (max == 0)\n        {\n            return 0;\n        }\n
    \       return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5d376c8be3d84ba794a5a6ef0113026c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5d376c8be3d84ba794a5a6ef0113026c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long max = 0;\n        long a = new long[n];\n
    \       for (int i = 1; i <= n; i++) {\n            a[i - 1] = (i * i - i + 1);\n
    \           max = Math.Max(max, a[i]);\n        }\n        long res = 0;\n        for
    (int i = 1; i < n; i++) {\n            for (int j = 1; j < i; j++) {\n                for
    (int k = i + 1; k <= n; k++) {\n                    res = Math.Min(res, a[i] +
    (a[j] + a[k]) % 3);\n                }\n            }\n        }\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprnbaztw2.cs(21,18): error CS0029: Cannot implicitly convert type ''long[]''
    to ''long''

    /tmp/tmprnbaztw2.cs(23,13): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmprnbaztw2.cs(24,33): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmprnbaztw2.cs(30,41): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmprnbaztw2.cs(30,49): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmprnbaztw2.cs(30,56): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659976377
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        var a = new int[n];\n        for (int i
    = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        Array.Sort(a);\n\n
    \       // Count the triples (a[i], a[j], a[k]) of a where i < j < k and a[i]
    + a[j] + a[k] is \n        // a multiple of 3\n        var triples = 0;\n        for
    (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for
    (int k = j + 1; k < n; k++) {\n                    var temp = a[i] + a[j] + a[k];\n
    \                   if (temp % 3 == 0)\n                        triples++;\n                }\n
    \           }\n        }\n        return triples;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a2735d4a989a40b7bd684029bfb7a7e8>:0
    \n"
  stdout: ''
  timestamp: 1659976377
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        if (n < 2)\n            return 0;\n        long[]
    arr = new long[n];\n        Array.Sort(arr);\n        long max = 0;\n        long
    sum = 0;\n        long tripleSum = 0;\n        foreach (long i in arr) {\n            if
    (i < 0 || i > n - 1) {\n                return 0;\n            }\n            sum
    += i;\n            if (i % 3 == 0) {\n                tripleSum = i;\n            }\n
    \           else if (i % 3 == 1) {\n                max = Math.Max(max, tripleSum);\n
    \               tripleSum = 0;\n            }\n        }\n        return max +
    1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ec6b7d312036449594fe13f752f7339a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ec6b7d312036449594fe13f752f7339a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long a[n];\n        Array.Sort(a);\n        int
    max = 0;\n        long ans = 0;\n        for (int i = 1; i < n; i++) {\n            for
    (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++)
    {\n                    if (a[i] < a[j] || a[i] < a[k] || a[j] < a[k]) {\n                        ans
    += 1;\n                    }\n                }\n            }\n            if
    (a[i] % 3 == 0) {\n                ans += 1;\n            }\n        }\n        if
    (ans < max)\n            max = ans;\n        return max;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfpqxnczz.cs(20,15): error CS0650: Bad array declarator: To declare a managed
    array the rank specifier precedes the variable''s identifier. To declare a fixed
    size buffer field, use the fixed keyword before the field type.

    /tmp/tmpfpqxnczz.cs(20,16): error CS0270: Array size cannot be specified in a
    variable declaration (try initializing with a ''new'' expression)

    '
  timestamp: 1659976376
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        var a = new int[n];\n        for (var i
    = 1; i < n; i++) {\n            for (var j = 0; j < i; j++) {\n                for
    (var k = 0; k < j; k++) {\n                    if (a[i] == a[j] + a[k]) {\n                        return
    i + 1 + j + k + 1;\n                    }\n                }\n            }\n
    \       }\n        return 0;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c27d3c845b8b4eb2afc002fc9a40a98e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c27d3c845b8b4eb2afc002fc9a40a98e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        var r = new List<long> { 1, 1, 1 };\n        while
    (true) {\n            bool valid = true;\n            foreach (var i in r.Select(x
    => x * x - x + 1).Take(n)) {\n                if (!i.Satisfy(x => x <= 0)) {\n
    \                   valid = false;\n                    break;\n                }\n
    \           }\n            if (!valid) return r.Count;\n            r.Add(r.Sum());\n
    \       }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpid2424mp.cs(23,65): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976377
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] a = new long[n + 1];\n        long
    cnt = 0;\n        for (int i = 1; i < n + 1; i++) {\n            for (int j =
    i; j < n + 1; j++) {\n                for (int k = j; k < n + 1; k++) {\n                    a[i]
    = i * i - i + 1;\n                    a[j] = i * i - j + 1;\n                    a[k]
    = i * i - k + 1;\n                    cnt++;\n                    if (Math.Abs(a[i]
    - a[j] - a[k]) % 3 == 0)\n                        return cnt;\n                }\n
    \           }\n        }\n        return -1;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d87d3153ee1f422581446707c25c1a55>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d87d3153ee1f422581446707c25c1a55>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976377
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        List<long> a = new List<long>();\n        for
    (int i = 0; i < n; i++)\n            a.Add(i * i * i + 1);\n        long m = 0;\n
    \       int count = 0;\n        for (int i = 0; i < n - 1; i++) {\n            long
    s = a[i];\n            for (int j = i + 1; j < n; j++) {\n                long
    t = a[j];\n                for (int k = j + 1; k < n; k++) {\n                    if
    (s + t + k == m) {\n                        count++;\n                        break;\n
    \                   }\n                }\n            }\n            m += s;\n
    \       }\n        return (long)count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8a59b3b209e448c886f987660addefed>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8a59b3b209e448c886f987660addefed>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976377
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] a = new long[n];\n        // fill
    up the list by filling the array a\n        // each index corresponds to a valid
    triple\n        // if the number is divisible by 3 then its a triple\n        for
    (int i = 0; i < a.Length; i++)\n        {\n            a[i] = i * i - i + 1;\n
    \       }\n        long count = 0;\n        // go through each valid triple\n
    \       for (int i = 0; i < a.Length; i++)\n        {\n            for (int j
    = 0; j < a.Length; j++)\n            {\n                if (j > i)\n                {\n
    \                   // see if we can find a valid triple\n                    for
    (int k = 0; k < a.Length; k++)\n                    {\n                        //
    if we can, then we need to check if a[i], a[j], a[k] is a multiple of 3\n                        if
    (a[i] + a[j] + a[k] == 3 && a[i] != a[j] && a[j] != a[k] && a[i] != a[k] && i
    != j && i != k && j != k)\n                        {\n                            //
    increment the count of valid triples by 1\n                            count++;\n
    \                       }\n                    }\n                }\n            }\n
    \       }\n        // return the total count\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n
    \   Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <17c13faee4e44d0385c6e83a8ad95437>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <17c13faee4e44d0385c6e83a8ad95437>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long a = new long[n]; \n        long count
    = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i+1; j <
    n; j++) {\n                for (int k = j+1; k < n; k++) {\n                    long
    res = a[i] + a[j] + a[k];\n                    if (res >= 3 && res != -3)\n                        count++;\n
    \               }\n            }\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n
    \   Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpedj2z0qr.cs(20,18): error CS0029: Cannot implicitly convert type ''long[]''
    to ''long''

    /tmp/tmpedj2z0qr.cs(25,32): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpedj2z0qr.cs(25,39): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpedj2z0qr.cs(25,46): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659976377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        Debug.Assert(n > 0);\n        long a = Enumerable.Range(1,
    n).ToList();\n        Debug.Assert(a.Count >= n);\n        int maxSum = 0;\n        for
    (int i = 1; i < n; i++) {\n            int max = FindMax(a, i);\n            if
    (max > maxSum) {\n                maxSum = max;\n            }\n            int
    j = i + 1;\n            while (j < n && FindMax(a, j) == max) {\n                j++;\n
    \           }\n            int k = n - 1;\n            while (k > i && FindMax(a,
    k) == max) {\n                k--;\n            }\n            if (j < k) {\n
    \               maxSum++;\n                for (int m = j; m < k; m++) {\n                    maxSum
    = Add(maxSum, a[m]);\n                }\n            }\n        }\n        return
    maxSum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy6w2pm9j.cs(21,38): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpy6w2pm9j.cs(22,22): error CS0019: Operator ''>='' cannot be applied to
    operands of type ''method group'' and ''long''

    /tmp/tmpy6w2pm9j.cs(25,23): error CS0103: The name ''FindMax'' does not exist
    in the current context

    /tmp/tmpy6w2pm9j.cs(30,29): error CS0103: The name ''FindMax'' does not exist
    in the current context

    /tmp/tmpy6w2pm9j.cs(33,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpy6w2pm9j.cs(34,29): error CS0103: The name ''FindMax'' does not exist
    in the current context

    /tmp/tmpy6w2pm9j.cs(40,30): error CS0103: The name ''Add'' does not exist in the
    current context

    /tmp/tmpy6w2pm9j.cs(40,42): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659976377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        List<long> a = new List<long>();\n        for
    (int i = 1; i <= n; i++) a.Add(i * i - i + 1);\n\n        long max = 0;\n        long
    triples = 0;\n        int n = a.Count;\n        long[] aArr = a.ToArray();\n        for
    (int i = 0; i < n; i++) {\n            int j = i;\n            for (int k = i;
    k < n; k++) j++;\n            long[] subarr = new long[] { aArr[i], aArr[j], aArr[k]
    };\n            long subMax = Math.Max(subarr[0], Math.Max(subarr[1], subarr[2]));\n
    \           if (subMax > max) max = subMax;\n        }\n        \n        \n        return
    triples;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjkxvkcgn.cs(21,30): error CS0841: Cannot use local variable ''n'' before
    it is declared

    /tmp/tmpjkxvkcgn.cs(25,13): error CS0136: A local or parameter named ''n'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpjkxvkcgn.cs(30,65): error CS0103: The name ''k'' does not exist in the
    current context

    '
  timestamp: 1659976377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        List<long> a = new List<long>(n);\n        for
    (int i = 0; i < n; i++) a.Add(i * i - i + 1);\n        int count = 0;\n        for(int
    i = 0; i< a.Count; i++)\n            for (int j = i+1; j< a.Count; j++)\n                for
    (int k = j+1; k< a.Count; k++)\n                    if (a[i] < a[j] && a[i] <
    a[k])\n                        count++;\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n
    \   Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpooe3nqxj.cs(20,39): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976377
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        List<long> result = new List<long>();\n
    \       for (int i = 0; i <= n; i++) {\n            for (int j = 0; j <= n; j++)
    {\n                for (int k = 0; k <= n; k++) {\n                    result.Add(i
    * i * i - j * j * j + k * k * k);\n                }\n            }\n        }\n
    \       return result.Sum(x => x % 3 == 0L ? 1L : 0L);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <48878ac928f44991a57939236e8bf514>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <48878ac928f44991a57939236e8bf514>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        // use linq\n        long count = n.Where(x
    => x < 0).Count();\n        long num = 0;\n        long sum = 0;\n        foreach
    (int i in n.Where(x => x < 0).Take(count)) {\n            sum += i * i - i + 1;\n
    \           if (sum % 3 == 0) {\n                num++;\n            }\n        }\n
    \       return num;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6oilkg7f.cs(21,24): error CS1061: ''long'' does not contain a definition
    for ''Where'' and no accessible extension method ''Where'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmp6oilkg7f.cs(24,29): error CS1061: ''long'' does not contain a definition
    for ''Where'' and no accessible extension method ''Where'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659976377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        List<long> a = GetTriples(n);\n        long
    aSum = GetSum(a);\n        return GetMax(aSum);\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnexab_nh.cs(20,24): error CS0103: The name ''GetTriples'' does not exist
    in the current context

    /tmp/tmpnexab_nh.cs(21,21): error CS0103: The name ''GetSum'' does not exist in
    the current context

    /tmp/tmpnexab_nh.cs(22,16): error CS0103: The name ''GetMax'' does not exist in
    the current context

    '
  timestamp: 1659976377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long a[] = new long[n];\n        Array.Sort(a);\n
    \       long max = 0;\n        long t = 0;\n        long x = 0;\n        long
    y = n;\n        long i = 0;\n        long j = 0;\n        long k = 0;\n        for
    (; x != n; x = y) {\n            i = x;\n            if (a[i] < 0)\n                i
    = -i;\n            k = y;\n            while (y != 0) {\n                j = y;\n
    \               while (k != 0) {\n                    t = a[i];\n                    a[i]
    = a[j];\n                    a[j] = t;\n                    k--;\n                }\n
    \               j++;\n                k++;\n                y = j;\n            }\n
    \           max++;\n        }\n        return max;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpke4lrep6.cs(20,15): error CS0650: Bad array declarator: To declare a managed
    array the rank specifier precedes the variable''s identifier. To declare a fixed
    size buffer field, use the fixed keyword before the field type.

    '
  timestamp: 1659976377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long sum = 0;\n        long sum1 = 0L;\n
    \       long sum2 = 0L;\n        long sum3 = 0L;\n\n        List<long> a = new
    List<long>(n);\n\n        long total = 0;\n        for (long i = 1; i < n; i++)
    {\n            if (i % 2 != 0) {\n                a.Add(i * i - i + 1);\n                sum
    += a[i] * a[i];\n                total += a[i] * a[i];\n                sum1 +=
    a[i];\n            }\n        }\n\n        sum2 = sum1;\n        sum3 = sum2;\n
    \       total *= 2;\n\n        if (sum == total) {\n            sum3 += sum3;\n
    \           sum3 += sum3;\n            sum3 += sum3;\n        }\n\n        a.Sort();\n
    \       foreach (long b in a)\n            sum += b;\n        sum *= 2;\n        if
    (sum3 == total)\n            sum += sum3;\n        return sum;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n
    \   Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuhbtejg3.cs(25,39): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpuhbtejg3.cs(31,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpuhbtejg3.cs(31,33): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpuhbtejg3.cs(32,28): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpuhbtejg3.cs(32,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpuhbtejg3.cs(33,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long a[] = new long[n];\n        long total
    = 0;\n        long n = n;\n        long k = n;\n\n        for(int i = 1; i <=
    n; i++) {\n            a[i] = i * i - i + 1;\n            total = total + a[i]
    * a[i] + a[i] * a[i] * 3;\n        }\n\n        return total;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n
    \   Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr8kxckr_.cs(20,15): error CS0650: Bad array declarator: To declare a managed
    array the rank specifier precedes the variable''s identifier. To declare a fixed
    size buffer field, use the fixed keyword before the field type.

    '
  timestamp: 1659976377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        List<long> a = new List<long>(n);\n        a.Sort();\n
    \       var max = 0;\n        long c = 0, d = 1, e = 1;\n        for (int i =
    2; i <= n; i++) {\n            c += a[i];\n            d = Math.Max(d, a[i + a.Count
    - 1]);\n            e++;\n            for (int j = (i + a.Count - 1); j <= n;
    j++) {\n                c -= a[j];\n                d = Math.Max(d, a[i + j]);\n
    \               e++;\n                if (c != 0) {\n                    break;\n
    \               }\n            }\n            if (c != 0) {\n                max
    = Math.Max(max, e);\n            }\n        }\n        return max;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n
    \   Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplvbn11yx.cs(20,39): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmplvbn11yx.cs(37,23): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976377
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        int[] a = new int[n];\n        for (int
    i = 0; i < n; i++)\n            a[i] = i * i - i + 1;\n        long tripleCount
    = 0;\n        bool isTriple = false;\n        long maxValue = 0;\n        for
    (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for
    (int k = j + 1; k < n; k++) {\n                    if (a[i] > a[j] && a[j] > a[k])
    {\n                        isTriple = true;\n                        int temp
    = 0;\n                        if (isTriple) {\n                            temp
    = i;\n                            i = j;\n                            j = k;\n
    \                           k = temp;\n                        }\n                        if
    (maxValue < a[i + k + j]) {\n                            tripleCount += 1;\n                            maxValue
    += a[i + k + j];\n                        }\n                    }\n                }\n
    \           }\n        }\n        return tripleCount;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <138f51015e59425a8518cdff7eaf1321>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <138f51015e59425a8518cdff7eaf1321>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        ArrayList a = new ArrayList(n);\n        a.AddRange(new
    ArrayList(n));\n        a.Add(1);\n\n        long[] x = new long[n];\n\n        int
    count = 0;\n        for (int i = 0; i < a.Count - 1; i++) {\n            x[i]
    = a[i + 1] - a[i] + 1;\n            for (int j = i + 1; j < a.Count; j++) {\n
    \               if (x[j] - x[i] >= 2) {\n                    for (int k = j +
    1; k < a.Count; k++) {\n                        if (x[k] - x[j] - x[i] >= 2) {\n
    \                           count++;\n                        }\n                    }\n
    \               }\n            }\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n
    \   Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2prkjkmz.cs(20,9): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmp2prkjkmz.cs(20,27): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmp2prkjkmz.cs(21,24): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmp2prkjkmz.cs(27,29): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''method group'' and ''int''

    /tmp/tmp2prkjkmz.cs(29,33): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''int'' and ''method group''

    /tmp/tmp2prkjkmz.cs(31,41): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''int'' and ''method group''

    '
  timestamp: 1659976377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        // O(n^2) time solution\n        if (n <
    3) {\n            return n;\n        }\n        int[] a = new int[n];\n        long
    ret = 0;\n        long curSum = 0;\n        for (int i = 1; i < n; i++) {\n            int
    cur = a[i];\n            for (int j = 1; j < i; j++) {\n                cur +=
    a[j];\n            }\n            if (cur > 3) {\n                curSum = cur;\n
    \           } else {\n                for (int k = 1; k < j; k++) {\n                    curSum
    += a[k];\n                }\n                if (curSum > 3) {\n                    curSum
    = cur;\n                } else {\n                    ret += cur;\n                }\n
    \           }\n        }\n        return ret;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptn8b730p.cs(35,37): error CS0103: The name ''j'' does not exist in the
    current context

    '
  timestamp: 1659976377
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] a = new long[n];\n        // fill
    array a \n        for (int i = 0; i < n; i++)\n            a[i] = i * i - i +
    1;\n        // count triples\n        int count = 0;\n        for (int i = 0;
    i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for
    (int k = j + 1; k < n; k++) {\n                    if (a[i] == a[j] + a[k])\n
    \                       count++;\n                }\n            }\n        }\n
    \       // return count\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47b66551d6b24816801b77d85842e23e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47b66551d6b24816801b77d85842e23e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        var list = new long[n];\n        for (int
    i = 0; i < n; i++) {\n            list[i] = i * i - i + 1;\n        }\n\n        var
    triples = new long[n];\n        for (int i = 1; i < n; i++) {\n            for
    (int j = 1; j < i; j++) {\n                for (int k = 1; k < j; k++) {\n                    var
    count = Math.Min(Math.Max(list[i] - list[j] + list[k], 0), 3);\n                    triples[i
    * j + k] = count;\n                }\n            }\n        }\n\n        var
    result = 0;\n        foreach (var item in triples) {\n            result += item;\n
    \       }\n\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkle2dvgb.cs(37,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        List<long> a = GetTriples(n);\n        long
    totalTriples = 0;\n        bool foundNonTriple = false;\n        for (int i =
    0; i < a.Count; i++) {\n            long num = a[i];\n            if (num >= 3
    && (num - 1) % 3 == 0) {\n                totalTriples++;\n                for
    (int j = i + 1; j < a.Count; j++) {\n                    long num2 = a[j];\n                    if
    (num2 >= 3 && (num2 - 1) % 3 == 0) {\n                        totalTriples++;\n
    \                       for (int k = j + 1; k < a.Count; k++) {\n                            long
    num3 = a[k];\n                            if (num3 >= 3 && (num3 - 1) % 3 == 0)
    {\n                                totalTriples++;\n                            }\n
    \                       }\n                    }\n                }\n            }\n
    \       }\n        return totalTriples;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmc1466mi.cs(20,24): error CS0103: The name ''GetTriples'' does not exist
    in the current context

    /tmp/tmpmc1466mi.cs(22,14): warning CS0219: The variable ''foundNonTriple'' is
    assigned but its value is never used

    '
  timestamp: 1659976377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        Debug.Assert(n >= 0);\n        long a =
    new long[n];\n        for (int i = 1; i <= n; i++) {\n            a[i - 1] = a[i
    - 2] * i - i + 1;\n        }\n        long triples = 0;\n        long triple =
    0;\n        for (int i = 1; i < n; i++) {\n            triple = 0;\n            for
    (int j = 1; j <= i; j++) {\n                for (int k = 1; k <= j; k++) {\n                    if
    (a[i + j] == (a[j] + a[k]) * 3) {\n                        triple++;\n                    }\n
    \               }\n            }\n            if (triple > triples) {\n                triples
    = triple;\n                triple = i;\n            }\n        }\n        return
    triples;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf074gy69.cs(21,18): error CS0029: Cannot implicitly convert type ''long[]''
    to ''long''

    /tmp/tmpf074gy69.cs(23,13): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpf074gy69.cs(23,24): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpf074gy69.cs(31,25): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpf074gy69.cs(31,38): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpf074gy69.cs(31,45): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659976377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long a[] = new long[n];\n        long sum
    = 1;\n        long triple;\n        for (long i = 1; i < n; i++) {\n            sum
    += a[i] = a[i] - a[i] + sum;\n        }\n        sum -= 1;\n        for (long
    i = 2; i < n; i++) {\n            triple = a[i];\n            for (long j = 1;
    j < i; j++) {\n                triple -= a[j];\n                if (triple ==
    0) {\n                    return i + 1;\n                }\n                triple
    += a[i];\n            }\n        }\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf9cp5wdm.cs(20,15): error CS0650: Bad array declarator: To declare a managed
    array the rank specifier precedes the variable''s identifier. To declare a fixed
    size buffer field, use the fixed keyword before the field type.

    '
  timestamp: 1659976377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long a[] = new long[n];\n        for (int
    i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        long
    sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += a[i] + a[j]
    + a[k];\n        }\n        return sum % 3 == 0 ? 1 : 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkf9s6v26.cs(20,15): error CS0650: Bad array declarator: To declare a managed
    array the rank specifier precedes the variable''s identifier. To declare a fixed
    size buffer field, use the fixed keyword before the field type.

    '
  timestamp: 1659976377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        var a = new long[n];\n        for (int i
    = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n\n        //
    Sort the array in ascending order \n        Array.Sort(a);\n\n        // Find
    triples in the array \n        var count = 0;\n        for (int i = 0; i < n;
    i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (IsPrime(a[i])
    && a[j] % 3 == 0) {\n                    for (int k = j + 1; k < n; k++) {\n                        if
    (IsPrime(a[j]) && a[k] % 3 == 0) {\n                            if (a[i] == a[j]
    + a[k]) {\n                                count++;\n                            }\n
    \                       }\n                    }\n                }\n            }\n
    \       }\n\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf154_hd2.cs(32,21): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    /tmp/tmpf154_hd2.cs(34,29): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659976377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] arr = new long[n];\n        for(int
    i=0;i<n;i++){\n            arr[i] = i*i-1;\n        }\n        return GetMaxTriples(arr);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt6v_ml_z.cs(24,30): error CS1503: Argument 1: cannot convert from ''long[]''
    to ''long''

    '
  timestamp: 1659976377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] result = new long[n];\n        long
    triple = 0;\n        long tripleCount = 0;\n        long[] a = new long[n];\n
    \       for (int i = 1; i < n; i++) {\n            result[i] = i * i - i + 1;\n
    \           a[i] = i * i - i + 1;\n        }\n        for (int j = 1; j < n; j++)
    {\n            for (int k = 1; k < n; k++) {\n                if (j > k) {\n                    triple
    = a[i] + a[j] + a[k];\n                    if (triple == 3 || (triple == 2 &&
    a[j] > a[k])) {\n                        tripleCount++;\n                    }\n
    \               }\n            }\n        }\n        return tripleCount;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp53lh5k2n.cs(31,32): error CS0103: The name ''i'' does not exist in the
    current context

    '
  timestamp: 1659976377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long a = new long[n];\n        a[0] = 1;\n
    \       for (int i = 1; i < n; i++) {\n            a[i] = a[i] + a[i - 1];\n        }\n
    \       long result = 0;\n        for (int i = 0; i <= n; i++) {\n            for
    (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= n; k++) {\n                    if
    (i + j + k == a[i + j] && i + j + k == a[i + j + k]) {\n                        result
    += Math.Max(Math.Max(a[i], a[j]), a[k]);\n                    }\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6agvq255.cs(20,18): error CS0029: Cannot implicitly convert type ''long[]''
    to ''long''

    /tmp/tmp6agvq255.cs(21,9): error CS0021: Cannot apply indexing with [] to an expression
    of type ''long''

    /tmp/tmp6agvq255.cs(23,13): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmp6agvq255.cs(23,20): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmp6agvq255.cs(23,27): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmp6agvq255.cs(29,38): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmp6agvq255.cs(29,63): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmp6agvq255.cs(30,53): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmp6agvq255.cs(30,59): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmp6agvq255.cs(30,66): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659976377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        var a = new List<long>();\n        a.AddRange(Enumerable.Range(0,
    n).Select(x => (x * x - x + 1)));\n        var retVal = 0;\n        for (int i
    = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                for
    (int k = 0; k < n; k++) {\n                    if (i != j && i != k && j != k)
    {\n                        if (a[i] + a[j] + a[k] == 3)\n                            retVal++;\n
    \                   }\n                }\n            }\n        }\n        return
    retVal;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpztqgw7dt.cs(21,40): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        ulong a = GetRandom(n, GetRandom(n, GetRandom(n)));\n
    \       return (long)GetMaxTriple(a);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjqroc781.cs(20,19): error CS0103: The name ''GetRandom'' does not exist
    in the current context

    /tmp/tmpjqroc781.cs(20,32): error CS0103: The name ''GetRandom'' does not exist
    in the current context

    /tmp/tmpjqroc781.cs(20,45): error CS0103: The name ''GetRandom'' does not exist
    in the current context

    /tmp/tmpjqroc781.cs(21,22): error CS0103: The name ''GetMaxTriple'' does not exist
    in the current context

    '
  timestamp: 1659976377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] a = new long[n];\n        for (int
    i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        return
    GetMaxTriples(a, n);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps48xmj_a.cs(24,16): error CS1501: No overload for method ''GetMaxTriples''
    takes 2 arguments

    '
  timestamp: 1659976377
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long min = 0;\n        long max = n-1;\n
    \       long x = 0;\n        List<long> a = new List<long>();\n\n        while
    (min <= max) {\n            x = (long)((long)Math.Sqrt(2*min));\n            x.ToString();\n
    \           a.Add(x);\n            min = min+1;\n        }\n\n        return a.FindAll(x=>x==3).Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a6b2fc090db94ebab832d0dbe14264c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a6b2fc090db94ebab832d0dbe14264c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        int[] a = new int[n];\n        \n        ulong
    total = 1;\n        for (int i = 0; i < n; i++) {\n            long tmp = i *
    i - i + 1;\n            a[i] = (int)(tmp);\n            total += tmp;\n        }\n
    \       \n        // Sort the list \n        Array.Sort(a);\n        \n        int
    max = 0;\n        long triples = 0;\n        \n        for (int i = 0; i < n;
    i++) {\n            for (int j = i; j < n; j++) {\n                for (int k
    = j; k < n; k++) {\n                    if (a[i] < a[j]) {\n                        if
    (a[i] < a[k]) {\n                            if (a[j] < a[k]) {\n                                if
    (a[i] - a[j] + a[k] == total) {\n                                    max++;\n
    \                                   triples += a[i] - a[j] + a[k];\n                                }\n
    \                           }\n                        }\n                    }\n
    \               }\n            }\n        }\n        return max;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n
    \   Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq0jn5kth.cs(26,13): error CS0034: Operator ''+='' is ambiguous on operands
    of type ''ulong'' and ''long''

    /tmp/tmpq0jn5kth.cs(41,37): error CS0034: Operator ''=='' is ambiguous on operands
    of type ''int'' and ''ulong''

    '
  timestamp: 1659976378
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] a = new long[n];\n        long res
    = 0;\n        for (int i = 0; i < n; i++) {\n            res++;\n            a[i]
    = i * i - i + 1;\n        }\n        for (int i = 0; i < n; i++) {\n            for
    (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++)
    {\n                    long sum = 0;\n                    for (int x = 0; x <
    n; x++)\n                        sum += a[x];\n                    if (sum % 3
    == 0)\n                        res ++;\n                }\n            }\n        }\n
    \       return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <709a7f0dd0ce47bbb3a506f6fb071437>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <709a7f0dd0ce47bbb3a506f6fb071437>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976378
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        int[] a = new int[n];\n        Array.Sort(a);\n
    \       int sum = 0;\n        for (int i = 0; i < a.Length; i++) {\n            if
    (i < a.Length - 1) {\n                sum += a[i] + a[i + 1];\n            } else
    {\n                sum += a[i];\n            }\n        }\n        while (sum
    % 3 != 0) {\n            sum = sum / 3;\n        }\n        return a.Length;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f0a463f9cd0407dad53c7751ac1da2b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f0a463f9cd0407dad53c7751ac1da2b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] a = new long[n];\n        long count
    = 0;\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n
    \       }\n        // for (int i = 0; i < n; i++) {\n        //     for (int j
    = i + 1; j < n; j++) {\n        //         for (int k = j + 1; k < n; k++) {\n
    \       //             long sum = i * a[i] + a[j] * a[j] + a[k] * a[k];\n        //
    \            if (sum == 0) continue; // No triple\n        //             if (sum
    % 3 == 0) {\n        //                 count += 1;\n        //                 //
    Console.WriteLine(\"{0}\\t{1}\\t{2}\", a[i], a[j], a[k]);\n        //             }\n
    \       //         }\n        //     }\n        // }\n        Array.Sort(a);\n
    \       foreach (long k in a) {\n            long sum = k * a[k];\n            if
    (sum == 0) continue; // No triple\n            if (sum % 3 == 0) {\n                count
    += 1;\n                // Console.WriteLine(\"{0}\", k);\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.GetMaxTriples (System.Int64 n) [0x00042]
    in <ba312afb100040d6930996e5835b1dd6>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <ba312afb100040d6930996e5835b1dd6>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.GetMaxTriples (System.Int64 n) [0x00042] in <ba312afb100040d6930996e5835b1dd6>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <ba312afb100040d6930996e5835b1dd6>:0
    \n"
  stdout: ''
  timestamp: 1659976378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        var ans = 0;\n        var a = new List<long>();\n
    \       for (var i = 1; i <= n; i++) {\n            a.Add(i * i - i + 1);\n        }\n\n
    \       for (int i = 0; i < a.Count - 1; i++) {\n            int j = (i + 1) %
    a.Count;\n            int k = ((i + j) % a.Count);\n            ans = Math.Max(ans,
    a[i] - a[j] - a[k]);\n        }\n        return ans;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmi833o1j.cs(29,19): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long a[] = new long[n];\n        long sum
    = 0;\n        long max = 0;\n        long i = 0;\n        long j = 0;\n        long
    k = 0;\n        for(int i = 0; i < a.Length; i++) {\n            a[i] = i*i -
    i + 1;\n            sum += a[i];\n        }\n        for(; i < n; i++) {\n            max
    = Math.Max(max, a[i]);\n        }\n        long counter = 0;\n        i = 1;\n
    \       j = 1;\n        k = 1;\n        while(i < n && j < n && k<n) {\n            if(max
    % 3 == 0) {\n                counter++;\n            }\n            max = max
    / 3;\n            i++;\n            j++;\n            k++;\n        }\n        return
    counter;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt6adq654.cs(20,15): error CS0650: Bad array declarator: To declare a managed
    array the rank specifier precedes the variable''s identifier. To declare a fixed
    size buffer field, use the fixed keyword before the field type.

    '
  timestamp: 1659976377
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        var a = new List<long>();\n        foreach
    (var i in Enumerable.Range(1, n)) {\n            var j = (int)Math.Sqrt(2 * i
    - 1);\n            var k = i - (j / 2);\n            if (j % 2 != 0) k++;\n            a.Add(i
    * i - i + 1);\n            a.Add(j * j - j + 1);\n            a.Add(k * k - k
    + 1);\n        }\n        int triples = 0;\n        foreach (var pair in a) {\n
    \           triples++;\n            foreach (var pair2 in a) {\n                if
    (pair != pair2 && (pair + pair2) % 3 == 0) {\n                    triples++;\n
    \               }\n            }\n        }\n        return triples;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_eqw98kh.cs(21,47): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976378
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long ret = 0;\n        long[] a = new long[n];\n
    \       for (int i = 0; i < n; i++)\n            a[i] = i * i - i + 1;\n        for
    (int i = 0; i < n - 1; i++) {\n            for (int j = i + 1; j < n; j++) {\n
    \               for (int k = j + 1; k < n; k++) {\n                    if (a[i]
    + a[j] + a[k] == 3 * 3 * 3) {\n                        ret += 1;\n                    }\n
    \               }\n            }\n        }\n        return ret;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n
    \   Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7c911889e39a42c4b506dd5e3a58bda4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7c911889e39a42c4b506dd5e3a58bda4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long a = Enumerable.Range(0, n).SelectMany(i
    => new[] {i, -i, i+1}).ToArray();\n        long b = Enumerable.Range(0, n).Sum(i
    => i * i - i + 1);\n        long s = Enumerable.Range(0, n).Sum(i => i * i * i);\n
    \       return b.Equals(s) ? Enumerable.Range(0, n).Count(i => a[i] % 3 == 0)
    : 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzm_u95p6.cs(20,38): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpzm_u95p6.cs(21,38): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpzm_u95p6.cs(22,38): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpzm_u95p6.cs(23,50): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpzm_u95p6.cs(23,64): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659976378
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] a = new long[n];\n        long sum
    = 0;\n        bool flag = false;\n        for(long i = 1; i < a.Length; i++) {\n
    \           long num = i * i - i + 1;\n            if (i % 2 == 0) {\n                flag
    = true;\n            }\n            if(num % 3 != 0) {\n                if(sum
    == 0) {\n                    sum = i;\n                } else {\n                    flag
    = false;\n                }\n            } else {\n                if(sum > 0)
    {\n                    flag = false;\n                } else {\n                    sum
    = i;\n                }\n            }\n            if(flag) {\n                if(i
    * i > sum) {\n                    a[sum - i] = num;\n                }\n                sum
    += i;\n            }\n        }\n        return a.Count(l => l % 3 == 0);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8ffccf38512d4a28afaa1b11cca1fb31>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8ffccf38512d4a28afaa1b11cca1fb31>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976378
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long max = n * n - 3 * n + 1;\n        long
    sum = 0;\n        for(int i = 1; i <= n; i++) {\n            sum += i * i - i
    + 1;\n            sum *= i;\n        }\n        return sum > max ? max : sum;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <411338f0ed464489948509dc8bfb57e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <411338f0ed464489948509dc8bfb57e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        var arr= new List<long> { 1, 1, 1 };\n        for
    (int i = 0; i < n; i++) {\n            arr[i]= i * i - i + 1;\n        }\n        long
    x = 0;\n        foreach (var item in arr) {\n            x= Math.Max(x, item);\n
    \       }\n        return x;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].set_Item (System.Int32
    index, T value) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.GetMaxTriples
    (System.Int64 n) [0x00027] in <f717ba2d612645ecb139cf693ebe219a>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <f717ba2d612645ecb139cf693ebe219a>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].set_Item (System.Int32
    index, T value) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.GetMaxTriples
    (System.Int64 n) [0x00027] in <f717ba2d612645ecb139cf693ebe219a>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <f717ba2d612645ecb139cf693ebe219a>:0 \n"
  stdout: ''
  timestamp: 1659976378
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] a = new long[n];\n        long result
    = 0;\n        long max = 0;\n        long min = 0;\n\n        Console.WriteLine(\"{0}\",
    n); \n\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i +
    1;\n            max = Math.Max(max, a[i]);\n            min = Math.Min(min, a[i]);\n
    \           Console.WriteLine(\"{0}\", a[i]);\n        }\n\n        for (int i
    = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if
    (i < j) {\n                    for (int k = 0; k < n; k++) {\n                        if
    (i != k) {\n                            if (a[i] < a[j]) {\n                                if
    (a[i] > a[k]) {\n                                    result ++;\n                                }\n
    \                               if (a[j] > a[k]) {\n                                    result
    ++;\n                                }\n                                if (a[i]
    > a[k]) {\n                                    result ++;\n                                }\n
    \                           }\n                        }\n                    }\n
    \               }\n            }\n        }\n        Console.WriteLine(\"{0}\",
    result);\n\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <03d306ede7e94f9e974437f3fa458c94>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <03d306ede7e94f9e974437f3fa458c94>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: '5

    1

    1

    3

    7

    13

    34

    6

    1

    1

    3

    7

    13

    21

    72

    10

    1

    1

    3

    7

    13

    21

    31

    43

    57

    73

    464

    100

    1

    1

    3

    7

    13

    21

    31

    43

    57

    73

    91

    111

    133

    157

    183

    211

    241

    273

    307

    343

    381

    421

    463

    507

    553

    601

    651

    703

    757

    813

    871

    931

    993

    1057

    1123

    1191

    1261

    1333

    1407

    1483

    1561

    1641

    1723

    1807

    1893

    1981

    2071

    2163

    2257

    2353

    2451

    2551

    2653

    2757

    2863

    2971

    3081

    3193

    3307

    3423

    3541

    3661

    3783

    3907

    4033

    4161

    4291

    4423

    4557

    4693

    4831

    4971

    5113

    5257

    5403

    5551

    5701

    5853

    6007

    6163

    6321

    6481

    6643

    6807

    6973

    7141

    7311

    7483

    7657

    7833

    8011

    8191

    8373

    8557

    8743

    8931

    9121

    9313

    9507

    9703

    646604

    '
  timestamp: 1659976378
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] arr = new long[n];\n        Array.Sort(arr);\n
    \       long max = arr[0];\n        long ans = 0;\n        for (int i = 1; i <
    n; i++) {\n            long left = max;\n            long right = max;\n            for
    (int j = 0; j < i; j++) {\n                left += arr[j];\n            }\n            right
    = arr[i];\n            for (int j = i + 1; j < n; j++) {\n                right
    += arr[j];\n            }\n            if (left > right) {\n                max
    = left;\n                ans = i;\n            } else {\n                max =
    right;\n                ans = n;\n            }\n        }\n        return ans;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7023fd055ec146b0b48a022d1f2b984c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7023fd055ec146b0b48a022d1f2b984c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976378
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        int[] a = new int[n];\n        long ret
    = 0;\n        for (int i = 0; i < n; ++i) {\n            a[i] = i * i - i + 1;\n
    \       }\n        List<int> ans = new List<int>();\n        for (int i = 0; i
    < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                for
    (int k = j + 1; k < n; ++k) {\n                    int sum = 0;\n                    for
    (int l = 0; l < n; ++l) {\n                        sum = sum + a[l];\n                    }\n
    \                   if (sum % 3 == 0) {\n                        ans.Add(sum);\n
    \                   }\n                }\n            }\n        }\n        foreach
    (int sum in ans) {\n            if (sum > ret) {\n                ret = sum;\n
    \           }\n        }\n        return ret;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9500f89406b84bb8b58d4e646d0c6d4b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9500f89406b84bb8b58d4e646d0c6d4b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        List<long> a = new List<long>();\n        for
    (int i = 0; i <= n; i++)\n        {\n            a.Add(i * i - i + 1);\n        }\n
    \       var result = GetMax(a);\n        return result.Count();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n
    \   Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf_iaj9m8.cs(25,22): error CS0103: The name ''GetMax'' does not exist in
    the current context

    '
  timestamp: 1659976378
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long result = 0;\n        int[] arr = new
    int[n];\n        for(int i = 0; i < n; i++) {\n            arr[i] = i * i - i
    + 1;\n        }\n        for (int i = 0; i < arr.Length; i++) {\n            for
    (int j = i+1; j < arr.Length; j++) {\n                for (int k = j+1; k < arr.Length;
    k++) {\n                    if(arr[i] + arr[j] + arr[k] % 3 == 0) {\n                        result++;\n
    \                   }\n                }\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fe8100dd13a84a6dabc6c061e1852f6a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fe8100dd13a84a6dabc6c061e1852f6a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976378
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        int[] a = new int[n];\n        bool flag
    = false;\n        long temp = 0;\n        long res = 0;\n        for (int i =
    1; i <= n; i++) {\n            for (int j = i; j <= n; j++) {\n                for
    (int k = j; k <= n; k++) {\n                    if (i == j && j == k) {\n                        flag
    = true;\n                        continue;\n                    }\n                    temp
    = i * i * i + j * j + k * k;\n                    if (temp % 3 == 0) {\n                        flag
    = true;\n                    }\n                }\n            }\n            if
    (flag) {\n                res++;\n                flag = false;\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7376c77cd6a2418097220b6e314279ab>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7376c77cd6a2418097220b6e314279ab>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976378
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long a = 1;\n        for (int i = 1; i <
    n; i++) {\n            a = a * i - i + 1;\n        }\n        List<long> triples
    = new List<long>();\n        for (int i = 1; i <= n; i++) {\n            long
    j = (i * i - i + 1);\n            long k = (j * j - j + 1);\n            if ((i
    % 3 == 0 && j % 3 == 0 && k % 3 == 0)\n                    || (i % 3 == 0 && j
    % 3 == 0 && k / 3 != 0)\n                    || (i % 3 == 1 && j % 3 == 1 && k
    % 3 == 1)) {\n                triples.Add(i);\n                triples.Add(j);\n
    \               triples.Add(k);\n            }\n        }\n        long count
    = 0;\n        if (triples.Count > 0) {\n            count = triples.Count;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6c237fc475cd43978b93da94d7d6b262>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6c237fc475cd43978b93da94d7d6b262>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] a = new long[n];\n        ulong max
    = 0;\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            a[i]
    = i * i - i + 1;\n            if (a[i] % 3 == 0) {\n                max = a[i];
    // found a triple\n                count = 1;\n            }\n            if (a[i]
    % 3 == 0) {\n                for (int j = i + 1; j < n; j++) {\n                    if
    (j >= count && a[j] % 3 == 0) {\n                        int k = j - count + 1;\n
    \                       max = Math.Max(max, a[j] + a[k]); // found a triple\n
    \                       count = count + 1;\n                    }\n                }\n
    \           }\n        }\n        Console.WriteLine(\"max {0}\", max);\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5k5f88v8.cs(26,23): error CS0266: Cannot implicitly convert type ''long''
    to ''ulong''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp5k5f88v8.cs(33,36): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Max(decimal, decimal)'' and ''Math.Max(float, float)''

    '
  timestamp: 1659976378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long numTriples   = 0;\n        long[] a
    = new long[n];\n\n        for (int i = 1; i <= n; i++)\n        {\n            a[i]
    = i * i - i + 1;\n        }\n\n        for (int i = 1; i <= n; i++)\n        {\n
    \           for (int j = 1; j <= n; j++)\n            {\n                for (int
    k = 1; k <= n; k++)\n                {\n                    if (a[i] + a[j] +
    a[k] == 3)\n                    {\n                        numTriples += 1;\n
    \                   }\n                }\n            }\n        }\n\n        return
    numTriples;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.GetMaxTriples (System.Int64 n) [0x00011]
    in <0ed85c33d25c4d77b77634befa3362c1>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <0ed85c33d25c4d77b77634befa3362c1>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.GetMaxTriples (System.Int64 n) [0x00011] in <0ed85c33d25c4d77b77634befa3362c1>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <0ed85c33d25c4d77b77634befa3362c1>:0
    \n"
  stdout: ''
  timestamp: 1659976378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long a[] = new long[n];\n\n        for (long
    i = 0; i < n; i++) a[i] = i * i - i + 1;\n\n        long result = 0;\n        long
    sum = 0;\n\n        for (long i = 0; i < n; i++) {\n            for (long j =
    i + 1; j < n; j++) {\n                for (long k = j + 1; k < n; k++) {\n                    long
    x = 0;\n\n                    x = a[i] + a[j] + a[k];\n                    if
    (x * x % 3 == 0) result++;\n                    sum = sum + x;\n                }\n
    \           }\n        }\n\n        return result + sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjxy3joiw.cs(20,15): error CS0650: Bad array declarator: To declare a managed
    array the rank specifier precedes the variable''s identifier. To declare a fixed
    size buffer field, use the fixed keyword before the field type.

    '
  timestamp: 1659976378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long a[] = new long[n];\n        Array.Sort(a);\n
    \       int count = 0;\n        long sum = 0;\n        for (int i = 0; i < n;
    i++) {\n            sum += a[i];\n            if (sum % 3 == 0) {\n                count++;\n
    \               sum = 0;\n            }\n        }\n        return (long)count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxg4oa4tq.cs(20,15): error CS0650: Bad array declarator: To declare a managed
    array the rank specifier precedes the variable''s identifier. To declare a fixed
    size buffer field, use the fixed keyword before the field type.

    '
  timestamp: 1659976378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        ulong sum = 0;\n        long max = n;\n
    \       int count = 0;\n        ulong divisor = 1;\n        long result = 0;\n
    \       for (int i = 1; i <= n; i++)\n        {\n            divisor = (ulong)
    Math.Pow(i, 2);\n            sum = sum + divisor;\n            if (sum > max)\n
    \           {\n                max = sum;\n                result = i;\n            }\n
    \           sum -= divisor;\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n
    \   Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6fvzruju.cs(29,17): error CS0034: Operator ''>'' is ambiguous on operands
    of type ''ulong'' and ''long''

    /tmp/tmp6fvzruju.cs(31,23): error CS0266: Cannot implicitly convert type ''ulong''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp6fvzruju.cs(22,13): warning CS0219: The variable ''count'' is assigned
    but its value is never used

    '
  timestamp: 1659976378
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long sum = 0;\n        for (long i = 1;
    i < n; i++) {\n            for (long j = i; j < n; j++) {\n                for
    (long k = 0; k < i; k++) {\n                    sum += i + j + k;\n                    if
    (sum > n * 3L) {\n                        break;\n                    }\n                }\n
    \           }\n        }\n        return sum;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <45ee0ee8d9bb4274ab1f54102eb970c8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <45ee0ee8d9bb4274ab1f54102eb970c8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        // Complete the function\n        long a
    = Enumerable.Range(1, n).Select(x => x * x - x + 1).ToArray();\n        var max
    = 0;\n        for (int i = 0; i < a.Length; i++)\n            for (int j = i +
    1; j < a.Length; j++)\n                for (int k = j + 1; k < a.Length; k++)
    {\n                    if (a[i] + a[j] + a[k] == 3*a[i]) {\n                        if
    (max < a[i] + a[j] + a[k])\n                            max = a[i] + a[j] + a[k];\n
    \                   }\n                }\n        return max;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n
    \   Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvfsg52zb.cs(21,38): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpvfsg52zb.cs(23,31): error CS1061: ''long'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpvfsg52zb.cs(24,39): error CS1061: ''long'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpvfsg52zb.cs(25,43): error CS1061: ''long'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpvfsg52zb.cs(26,25): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpvfsg52zb.cs(26,32): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpvfsg52zb.cs(26,39): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpvfsg52zb.cs(26,49): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpvfsg52zb.cs(27,35): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpvfsg52zb.cs(27,42): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpvfsg52zb.cs(27,49): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpvfsg52zb.cs(28,35): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpvfsg52zb.cs(28,42): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpvfsg52zb.cs(28,49): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659976378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        int[] a = new int[n];\n        int[] c =
    new int[n];\n        Array.Sort(a);\n        Array.Sort(c);\n        long ret
    = 0;\n        long max = 0;\n        long min = 0;\n        long max2 = -1;\n
    \       long min2 = -1;\n        foreach (int i in a) {\n            if (max <
    i) max = i;\n            if (min2 > i) min2 = i;\n        }\n        foreach (int
    i in c) {\n            if (max2 < i) max2 = i;\n            if (min2 > i) min2
    = i;\n        }\n        for (int i = 0; i < n; i++) {\n            int j = (int)(i
    % 2 == 0 ? i / 2 : (i * i - i + 1) / 3);\n            if (a[i] != a[j]) {\n                ret
    = ret + 1;\n                if (a[i] > a[j]) {\n                    if (a[i] >
    max) {\n                        max = a[i];\n                        max2 = i;\n
    \                   }\n                    if (a[i] < min) {\n                        min
    = a[i];\n                        min2 = i;\n                    }\n                    if
    (a[j] > max2) {\n                        max2 = a[j];\n                        max2
    = j;\n                    }\n                    if (a[j] < min2) {\n                        min2
    = a[j];\n                        min2 = j;\n                    }\n                }\n
    \               else if (a[i] < a[j]) {\n                    if (a[j] > max) {\n
    \                       max = a[j];\n                        max2 = j;\n                    }\n
    \                   if (a[j] < min) {\n                        min = a[j];\n                        min2
    = j;\n                    }\n                    if (a[i] > max2) {\n                        max2
    = a[i];\n                        max2 = i;\n                    }\n                    if
    (a[i] < min2) {\n                        min2 = a[i];\n                        min2
    = i;\n                    }\n                }\n            }\n        }\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b2f57111e6a84ccdbd50ec08b67ca911>:0
    \n\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside the
    bounds of the array.\n  at Problem.GetMaxTriples (System.Int64 n) [0x000da] in
    <b2f57111e6a84ccdbd50ec08b67ca911>:0 \n  at Problem.Main (System.String[] args)
    [0x00012] in <b2f57111e6a84ccdbd50ec08b67ca911>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.GetMaxTriples (System.Int64 n) [0x000da] in <b2f57111e6a84ccdbd50ec08b67ca911>:0
    \n  at Problem.Main (System.String[] args) [0x00012] in <b2f57111e6a84ccdbd50ec08b67ca911>:0
    \n"
  stdout: ''
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] a = Enumerable.Range(1, n).ToArray();\n
    \       long[] b = new long[n];\n        for (int i = 0; i < n; i++) {\n            b[i]
    = a[i] - a[i] - a[i] + 1;\n        }\n        Array.Sort(b);\n        long max
    = 0;\n        long max1 = 0;\n        for (int i = 0; i < n; i++) {\n            for
    (int j = 0; j < n; j++) {\n                if (i == j) continue;\n                if
    (b[i] == a[j]) {\n                    for (int k = 0; k < n; k++) {\n                        if
    (k == i || k == j || k == k) continue;\n                        if ((b[i] == a[k])
    && (b[j] == a[k]) && (b[k] == a[k])) {\n                            max = Math.Max(max,
    a[i]);\n                            max1 = Math.Max(max1, a[i]);\n                            max1
    = Math.Max(max1, a[j]);\n                            max1 = Math.Max(max1, a[k]);\n
    \                           max1 = Math.Max(max1, a[k]);\n                            max1
    = Math.Max(max1, a[k]);\n                            max1 = Math.Max(max1, a[k]);\n
    \                       }\n                    }\n                }\n            }\n
    \       }\n        return max;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsjmlyvb7.cs(20,40): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpsjmlyvb7.cs(33,49): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    '
  timestamp: 1659976378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] arr = new long[n];\n        for (int
    i = 1; i <= n; i++) {\n            arr[i] = i * i - i + 1;\n        }\n        List<long>
    res = new List<long>();\n        long ans = 0;\n        for (int i = 1; i <= n;
    i++) {\n            bool found = false;\n            for (int j = i + 1; j <=
    n; j++) {\n                if (Math.Abs(arr[i] - arr[j]) < Math.Pow(10, 7)) {\n
    \                   ans = Math.Max(ans, arr[i] + arr[j] + arr[j] - 3);\n                    found
    = true;\n                    break;\n                }\n            }\n            if
    (found)\n                break;\n        }\n        return ans;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n
    \   Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.GetMaxTriples (System.Int64 n) [0x0000e]
    in <0697b013c1bd4076972eaff46e3fdc92>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <0697b013c1bd4076972eaff46e3fdc92>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.GetMaxTriples (System.Int64 n) [0x0000e] in <0697b013c1bd4076972eaff46e3fdc92>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <0697b013c1bd4076972eaff46e3fdc92>:0
    \n"
  stdout: ''
  timestamp: 1659976379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long ans = 0;\n        long[] a = new long[n];\n
    \       for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n            if
    (a[i] % 3 == 0) {\n                ans++;\n            }\n        }\n        return
    ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b55e3bcfd4db40738bc97c120e369c69>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b55e3bcfd4db40738bc97c120e369c69>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] a = new long[n];\n        long sum
    = 0;\n        long x = 0;\n        for (int i = 0; i < a.Length; i++)\n            a[i]
    = i;\n\n        for (int i = 0; i < a.Length; i++)\n            sum += a[i];\n
    \       x = sum % 3;\n\n        for (int i = 0; i < a.Length; i++) {\n            for
    (int j = i+1; j < a.Length; j++) {\n                for (int k = j+1; k < a.Length;
    k++) {\n                    if (a[i] < x && a[j] < x && a[k] < x)\n                        sum
    = sum + a[i] + a[j] + a[k];\n                }\n            }\n        }\n\n        return
    sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d7aa41627f8410ab72ad52e5d706ce4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d7aa41627f8410ab72ad52e5d706ce4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        int[] arr = new int[n];\n        for (int
    i = 0; i < n; ++i) {\n            arr[i] = i * i - i + 1;\n        }\n        var
    tripples = arr\n            .GroupBy(i => i)\n            .Where(g => g.Count()
    == 3)\n            .Select(g => g.Select(i => new { i, k = g.Key}).ToArray())\n
    \           .ToArray();\n        return tripples\n            .Where(g => g.Sum(x
    => x.i) < 3)\n            .Select(g => g.Sum(x => x.i))\n            .Aggregate((x,
    y) => x + y) * 3;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.GetMaxTriples (System.Int64 n) [0x000e2] in <6ab38818a716471687baa78e22c282e1>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <6ab38818a716471687baa78e22c282e1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.GetMaxTriples (System.Int64 n) [0x000e2] in <6ab38818a716471687baa78e22c282e1>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <6ab38818a716471687baa78e22c282e1>:0
    \n"
  stdout: ''
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        ArrayList a = new ArrayList(n);\n        for
    (int i = 0; i < n; i++){\n            a[i] = i * i - i + 1;\n        }\n        ArrayList
    b = a.ConvertAll<long>(delegate (long x) {\n            return x * x - x + 1;\n
    \       });\n        ArrayList c = new ArrayList();\n        ArrayList d = new
    ArrayList();\n        ArrayList e = new ArrayList();\n        for (int i = 0;
    i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                for
    (int k = 0; k < n; k++) {\n                    if (i < j < k) {\n                        c.Add(a[i]
    + a[j] + a[k]);\n                    }\n                    else if (i < k &&
    j < k) {\n                        d.Add(a[i] + a[k] + a[j]);\n                    }\n
    \                   else if (i < j && k < j){\n                        e.Add(a[i]
    + a[j] + a[k]);\n                    }\n                }\n            }\n        }\n
    \       long ans = 0;\n        foreach (var item in c) {\n            ans += item;\n
    \       }\n        return ans;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj76purbm.cs(20,9): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpj76purbm.cs(20,27): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpj76purbm.cs(24,9): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpj76purbm.cs(27,9): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpj76purbm.cs(27,27): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpj76purbm.cs(28,9): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpj76purbm.cs(28,27): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpj76purbm.cs(29,9): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpj76purbm.cs(29,27): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpj76purbm.cs(33,25): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''bool'' and ''int''

    '
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        // Initializing the list of triples using
    the formula described above\n        long res = 0;\n        List<long> a = new
    List<long>();\n        for (long i = 1; i <= n; i++)\n            a.Add(i * i
    - i + 1);\n        long curr = 1;\n        for (long i = 0; i < a.Count; i++)\n
    \       {\n            long j = i + 1;\n            long k = i + 2;\n            long
    aSum = a[i] + a[j] + a[k];\n            if (aSum == curr)\n            {\n                if
    (curr < 3)\n                    res++;\n                curr = aSum;\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpza_p3ei_.cs(30,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpza_p3ei_.cs(30,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpza_p3ei_.cs(30,41): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        List<long> arr = new List<long>();\n        for
    (int i = 1; i < n; i++) {\n            arr.Add(i * i - i + 1);\n        }\n        return
    GetMaxTriples(arr);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq542fin9.cs(24,30): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        List<long> a = new List<long>();\n        long
    aSum = 0;\n        long last = 0;\n        for (int i = 1; i <= n; i++) {\n            aSum
    += a[i];\n            if (aSum > 0) {\n                if (last == 0) {\n                    last
    = aSum;\n                }\n                else {\n                    long temp
    = aSum - last;\n                    if (temp % 3 == 0) {\n                        a.Add(temp);\n
    \                   }\n                }\n            }\n        }\n        return
    a.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.GetMaxTriples
    (System.Int64 n) [0x00012] in <0fc96b37f04c44349e68a2b2a57c3111>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <0fc96b37f04c44349e68a2b2a57c3111>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.GetMaxTriples
    (System.Int64 n) [0x00012] in <0fc96b37f04c44349e68a2b2a57c3111>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <0fc96b37f04c44349e68a2b2a57c3111>:0 \n"
  stdout: ''
  timestamp: 1659976379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long res = 0;\n        long[] a = new long[n];\n
    \       for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n
    \       for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++)
    {\n                if (j != i) {\n                    if (a[j] == a[i] && a[j]
    + a[i] == 3 * a[i]) {\n                        res++;\n                    }\n
    \               }\n            }\n        }\n        return res;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n
    \   Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <696e81a08bb545b69c79fd193501820f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <696e81a08bb545b69c79fd193501820f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        int[] a = new int[n];\n        long ret
    = 0;\n\n        Array.Sort(a);\n        foreach(var x in a) {\n            if(x
    == 0)\n                continue;\n            for(var i = 1; i < n; i++) {\n                if(x
    == i)\n                    continue;\n                for(var j = i; j < n; j++)
    {\n                    if(x == j)\n                        continue;\n                    var
    k = (j - i + 1);\n                    if(x * x + k == i * i - j + 1) {\n                        ret
    = ret + 3;\n                        break;\n                    }\n                }\n
    \           }\n        }\n\n        return ret;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f6fb74050c0f4ba6a7dfa62763b86c72>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f6fb74050c0f4ba6a7dfa62763b86c72>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] array = new long[n + 1];\n        for
    (int i = 0; i <= n; i++) {\n            array[i] = i * i - i + 1;\n        }\n
    \       var count = new Dictionary<long, long>();\n        for (int i = 1; i <=
    n; i++) {\n            int j = i;\n            while (j > 0) {\n                if
    (j % 3 == 0) {\n                    count.Add((i * i + j), 1);\n                    j--;\n
    \               } else if (j % 3 == 1) {\n                    count.Add((i * i
    - j + i), 1);\n                    j--;\n                } else if (j % 3 == 2)
    {\n                    count.Add((i * i + j - i), 1);\n                    j--;\n
    \               }\n            }\n        }\n        List<long> result = new List<long>();\n
    \       foreach (long key in count.Keys) {\n            if (count.ContainsKey(key))
    {\n                result.Add(key);\n            }\n        }\n        var sum
    = 0;\n        foreach (long key in result) {\n            sum += count;\n        }\n
    \       return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbl7g73qx.cs(48,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''int'' and ''Dictionary<long, long>''

    '
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long result = 0;\n        long a[] = new
    long[n];\n        for (long i = 0; i < n; i++) {\n            a[i] = i * i - i
    + 1;\n            result += a.Where(item => item < 3 * Math.Sqrt(item)).Count();\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp527bc80d.cs(21,15): error CS0650: Bad array declarator: To declare a managed
    array the rank specifier precedes the variable''s identifier. To declare a fixed
    size buffer field, use the fixed keyword before the field type.

    '
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long a = new long[n];\n        for (int
    i = 0; i < n; i++) {\n            long s = i * i - i + 1;\n            long l
    = i + 1;\n            long r = n - 1;\n            a[l] = s;\n            a[r]
    = s - 1;\n        }\n        long k = 0;\n        int max = 0;\n        for (int
    i = 0; i < n; i++) {\n            long s = a[i];\n            for (int j = i +
    1; j < n; j++) {\n                long l = a[j];\n                long r = a[k];\n
    \               long s = s + l + r;\n                if (s > max) {\n                    max
    = s;\n                }\n                long ss = (s * s) - 2 * s;\n                if
    (ss == 0) continue;\n                bool isTriple = false;\n                for
    (int k = 0; k < n && !isTriple; k++) {\n                    long t = a[k];\n                    if
    (ss == t) {\n                        isTriple = true;\n                    }\n
    \               }\n                if (isTriple) {\n                    k++;\n
    \               }\n            }\n        }\n        return max;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n
    \   Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpno2p89xm.cs(20,18): error CS0029: Cannot implicitly convert type ''long[]''
    to ''long''

    /tmp/tmpno2p89xm.cs(25,13): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpno2p89xm.cs(26,13): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpno2p89xm.cs(31,22): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpno2p89xm.cs(33,26): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpno2p89xm.cs(34,26): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpno2p89xm.cs(35,22): error CS0136: A local or parameter named ''s'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpno2p89xm.cs(37,27): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpno2p89xm.cs(42,26): error CS0136: A local or parameter named ''k'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpno2p89xm.cs(43,30): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpno2p89xm.cs(35,26): error CS0165: Use of unassigned local variable ''s''

    '
  timestamp: 1659976379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] a = new long[n];\n        Array.Sort(a);\n
    \       int nTriples = 0;\n        for (int i = 0; i < a.Length; i++) {\n            for
    (int j = i + 1; j < a.Length; j++) {\n                if (a[i] == a[j]) {\n                    nTriples++;\n
    \               }\n            }\n        }\n        return nTriples;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bbfe3b2784184f2884c3bce219c16ce3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bbfe3b2784184f2884c3bce219c16ce3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        int[] a = new int[n];\n        for (int
    i = 1; i < n; i++)\n            a[i] = i * i - i + 1;\n        int[] b = new int[n];\n
    \       int max = a[0];\n        for (int i = 1; i < n; i++) {\n            for
    (int j = 1; j < n; j++) {\n                int k = i - j;\n                if
    (b[i - 1] == 0 && b[j - 1] == 0 && b[k - 1] == 0)\n                    max = Math.Max(max,
    a[i]);\n                else {\n                    for (int k = 0; k < n; k++)\n
    \                       b[k] = (b[k] > 0) ? b[k] : (a[i] - a[j] - a[k]) % 3;\n
    \                   max = Math.Max(max, b[i]);\n                }\n            }\n
    \       }\n        return max;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqc7ifwx2.cs(31,30): error CS0136: A local or parameter named ''k'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        List<long> arr = new List<long>(n);\n        for
    (int i = 0; i < n; i++) {\n            arr.Add(i * i - i + 1);\n        }\n        long
    ans = GetMaxSum(arr);\n        return ans;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp45s12qnc.cs(20,41): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp45s12qnc.cs(24,20): error CS0103: The name ''GetMaxSum'' does not exist
    in the current context

    '
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long maxTriplet = 0;\n        long[] a =
    new long[n];\n        long triple = 0;\n        ulong prime = Convert.ToUInt64(\"3\");\n
    \       ulong bigger = prime > n ? prime : n;\n        ulong lastBigger = 0;\n
    \       bool isPrime = true;\n        for(ulong i = 1; i < n; i++) {\n            isPrime
    = true;\n            for(ulong j = 1; j <= Math.Sqrt(n); j++) {\n                if(a[j]
    < bigger) {\n                    a[j] = bigger;\n                }\n                if(Math.Abs(a[j]
    - bigger) <= 1) {\n                    if(a[j] > lastBigger) {\n                        lastBigger
    = a[j];\n                    }\n                    for(ulong k = j; k < n; k++)
    {\n                        if((i * i + a[k] == a[j] * a[k])) {\n                            isPrime
    = false;\n                            break;\n                        }\n                    }\n
    \               }\n                else {\n                    isPrime = true;\n
    \               }\n            }\n            if(isPrime) {\n                for(ulong
    j = 1; j <= n; j++) {\n                    if(a[j] < bigger) {\n                        a[j]
    = bigger;\n                    }\n                    if(Math.Abs(a[j] - bigger)
    <= 1) {\n                        if(a[j] > lastBigger) {\n                            lastBigger
    = a[j];\n                        }\n                        for(ulong k = j; k
    < n; k++) {\n                            if((i * i + a[k] == a[j] * a[k])) {\n
    \                               triple++;\n                            }\n                        }\n
    \                   }\n                }\n                if(triple > maxTriplet)
    {\n                    maxTriplet = triple;\n                }\n            }\n
    \           triple = 0;\n        }\n        return maxTriplet;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n
    \   Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5uq4blx3.cs(24,24): error CS0034: Operator ''>'' is ambiguous on operands
    of type ''ulong'' and ''long''

    /tmp/tmp5uq4blx3.cs(24,24): error CS0173: Type of conditional expression cannot
    be determined because there is no implicit conversion between ''ulong'' and ''long''

    /tmp/tmp5uq4blx3.cs(27,26): error CS0034: Operator ''<'' is ambiguous on operands
    of type ''ulong'' and ''long''

    /tmp/tmp5uq4blx3.cs(30,20): error CS0034: Operator ''<'' is ambiguous on operands
    of type ''long'' and ''ulong''

    /tmp/tmp5uq4blx3.cs(31,28): error CS0266: Cannot implicitly convert type ''ulong''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp5uq4blx3.cs(33,29): error CS0034: Operator ''-'' is ambiguous on operands
    of type ''long'' and ''ulong''

    /tmp/tmp5uq4blx3.cs(34,24): error CS0034: Operator ''>'' is ambiguous on operands
    of type ''long'' and ''ulong''

    /tmp/tmp5uq4blx3.cs(35,38): error CS0266: Cannot implicitly convert type ''long''
    to ''ulong''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp5uq4blx3.cs(37,38): error CS0034: Operator ''<'' is ambiguous on operands
    of type ''ulong'' and ''long''

    /tmp/tmp5uq4blx3.cs(38,29): error CS0034: Operator ''+'' is ambiguous on operands
    of type ''ulong'' and ''long''

    /tmp/tmp5uq4blx3.cs(49,34): error CS0034: Operator ''<='' is ambiguous on operands
    of type ''ulong'' and ''long''

    /tmp/tmp5uq4blx3.cs(50,24): error CS0034: Operator ''<'' is ambiguous on operands
    of type ''long'' and ''ulong''

    /tmp/tmp5uq4blx3.cs(51,32): error CS0266: Cannot implicitly convert type ''ulong''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp5uq4blx3.cs(53,33): error CS0034: Operator ''-'' is ambiguous on operands
    of type ''long'' and ''ulong''

    /tmp/tmp5uq4blx3.cs(54,28): error CS0034: Operator ''>'' is ambiguous on operands
    of type ''long'' and ''ulong''

    /tmp/tmp5uq4blx3.cs(55,42): error CS0266: Cannot implicitly convert type ''long''
    to ''ulong''. An explicit conversion exists (are you missing'
  timestamp: 1659976379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        int[] a = new int[n];\n        long res
    = 0;\n\n        for(int i = 1; i < n; i++)\n            a[i] = i * i - i + 1;\n\n
    \       for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n
    \               for(int k = 1; k < n; k++) {\n                    if(a[i] + a[j]
    + a[k] == 3 * i) {\n                        res += 1;\n                        break;\n
    \                   }\n                }\n            }\n        }\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3bb346dc0d654089b330305642ed2d2c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3bb346dc0d654089b330305642ed2d2c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long sumOfAllTriples = 0;\n        int[]
    nums = Enumerable.Range(1, n).ToArray();\n        long[] a = new long[nums.Length];\n
    \       int index = 1;\n        for (int i = 1; i <= n; i++) {\n            while
    (index <= nums.Length) {\n                a[index] = i * i - i + 1;\n                index++;\n
    \           }\n        }\n        for (int i = 1; i <= nums.Length; i++) {\n            sumOfAllTriples
    += a[i - 1];\n        }\n        return sumOfAllTriples;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp61g5hg_w.cs(21,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long a[n + 1] = new long[n + 1];\n\n        for
    (int i = 1; i <= n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int
    result = 0;\n        for (int i = 1; i < n + 1; i++) {\n            long sum =
    0;\n            long temp = a[i];\n            for (int j = 0; j < n; j++) {\n
    \               long temp2 = a[j];\n                sum += temp;\n                sum
    += temp2;\n            }\n            int res = (sum & 3) == 0;\n            if
    (res)\n                result++;\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n
    \   Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpckyjv97q.cs(20,15): error CS0650: Bad array declarator: To declare a managed
    array the rank specifier precedes the variable''s identifier. To declare a fixed
    size buffer field, use the fixed keyword before the field type.

    /tmp/tmpckyjv97q.cs(20,16): error CS0270: Array size cannot be specified in a
    variable declaration (try initializing with a ''new'' expression)

    '
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        List<long> a = new List<long>();\n        for
    (long i = 1; i <= n; i++)\n            a.Add(i * i - i + 1);\n        long max
    = (long) Math.Sqrt(n);\n        long ans = 0, i = 0, j = 0, k = 0;\n        while
    ((i < a.Count) && (j < a.Count) && (k < a.Count)) {\n            if (a[i] < a[j]
    && a[i] < a[k] && a[j] < a[k]) {\n                if (a[i] % 3 == 0 && a[j] %
    3 == 0 && a[k] % 3 == 0)\n                    ans += 1;\n            }\n            i++;\n
    \           j++;\n            k++;\n        }\n        return ans;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n
    \   Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp__708w3z.cs(21,19): error CS0136: A local or parameter named ''i'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp__708w3z.cs(26,19): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp__708w3z.cs(26,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp__708w3z.cs(26,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp__708w3z.cs(26,41): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp__708w3z.cs(26,49): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp__708w3z.cs(26,56): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp__708w3z.cs(27,23): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp__708w3z.cs(27,40): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp__708w3z.cs(27,57): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        var a = Enumerable.Range(1, n).Select(x
    => (x * x - x + 1)).ToArray();\n        long tripleCount = 0;\n        long s
    = a[0] + a[1] + a[2]; // since a[0]+a[1]+a[2] can be any positive integer s\n
    \       for (int i = 1; i < a.Length; i++) {\n            tripleCount += 1;\n
    \           for (int j = i + 1; j < a.Length; j++) {\n                if (i %
    2 == 0) {\n                    s += a[j];\n                }\n                else
    {\n                    s += a[i] - (a[j] * j / 2);\n                }\n            }\n
    \           if (s % 3 == 0) {\n                return tripleCount;\n            }\n
    \           s = a[0] + a[1] + a[2];\n        }\n        return -1;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n
    \   Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfk_v04jy.cs(20,37): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long counter = 0;\n        long temp = 0;\n
    \       long start = 0;\n        long end = 0;\n        while (start <= n) {\n
    \           end = start + 3;\n            counter = 0;\n            while (start
    <= end && end <= n) {\n                temp = start*start-end*end+end*end-start*start+start*start;\n
    \               if (temp%3 == 0) {\n                    counter++;\n                }\n
    \               start++;\n                end++;\n            }\n            if
    (counter > 0 && counter < 3) {\n                return counter;\n            }\n
    \           start++;\n        }\n        return 0;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a64163e10e6d4566a25553db1af8a4df>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a64163e10e6d4566a25553db1af8a4df>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long a[n];\n        long sum = 0;\n\n        for
    (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n            sum
    += a[i];\n        }\n\n        long maxSum = -(long.MaxValue);\n\n        for
    (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if
    (i != j) {\n                    for (int k = 0; k < n; k++) {\n                        long
    tmp = a[i] + a[j] + a[k];\n\n                        if (tmp > maxSum) {\n                            maxSum
    = tmp;\n                        }\n                    }\n                }\n
    \           }\n        }\n\n        return sum;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_plcskxa.cs(20,15): error CS0650: Bad array declarator: To declare a managed
    array the rank specifier precedes the variable''s identifier. To declare a fixed
    size buffer field, use the fixed keyword before the field type.

    /tmp/tmp_plcskxa.cs(20,16): error CS0270: Array size cannot be specified in a
    variable declaration (try initializing with a ''new'' expression)

    '
  timestamp: 1659976379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        var res = new List<long>();\n        for
    (int i = 1; i <= n; i++) {\n            var cur = i * i - i + 1;\n            var
    cur2 = cur * cur - cur + 1;\n            if (cur2 % 3 == 0) {\n                res.Add(cur);\n
    \           }\n        }\n        return res.Count;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a7d5bfa677d490897c9396de1d028f5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a7d5bfa677d490897c9396de1d028f5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] a = new long[n];\n        long sum
    = 0;\n        for (int i = 0; i < a.Length; i++) {\n            a[i] = i * i -
    i + 1;\n            sum = sum + a[i];\n        }\n        long max = 1;\n        for
    (int i = 0; i < a.Length; i++) {\n            for (int j = 0; j < a.Length; j++)
    {\n                for (int k = 0; k < a.Length; k++) {\n                    if
    (a[i] < a[j] && a[j] < a[k] && a[i] + a[j] + a[k] == sum)\n                        return
    max;\n                    else\n                        max++;\n                }\n
    \           }\n        }\n        return max;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <05f9c856d7e84f61890e4a05f68a633c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <05f9c856d7e84f61890e4a05f68a633c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] arr = new long[n];\n        long
    sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += i;\n            arr[i]
    = sum;\n        }\n        int counter = 0;\n        foreach (var item in arr)
    {\n            for (int j = 0; j < item.GetHashCode(); j++) {\n                for
    (int k = 0; k < item.GetHashCode(); k++) {\n                    counter++;\n                }\n
    \           }\n        }\n        return counter;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9d5eb420478042cabe3cf6388b4fa114>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9d5eb420478042cabe3cf6388b4fa114>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976381
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long a[] = new long[n];\n        Array.Sort(a);\n
    \       var max = (long)Math.Pow(3,(int)Math.Sqrt(3));\n        var max3 = new
    List<long>();\n        long n3;\n        for (var i = 1; i < n; i++) {\n            for
    (var j = 0; j < i; j++) {\n                for (var k = 0; k < j; k++) {\n                    if
    (Math.Abs(a[i] - a[j] - a[k]) > max) {\n                        n3 = a[i] - a[j]
    - a[k];\n                        if (n3 > max3[0]) {\n                            max3.Clear();\n
    \                           max3.Add(n3);\n                        } else {\n
    \                           if (n3 > max3[0]) {\n                                max3.Clear();\n
    \                               max3.Add(n3);\n                                break;\n
    \                           }\n                        }\n                    }\n
    \               }\n            }\n        }\n        return max3.Count;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpevlxkwrc.cs(20,15): error CS0650: Bad array declarator: To declare a managed
    array the rank specifier precedes the variable''s identifier. To declare a fixed
    size buffer field, use the fixed keyword before the field type.

    '
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long a[] = new long[n + 1];\n        long
    m = 0;\n        for (int i = 1; i < a.Length; i++) {\n            a[i] = a[i-1]
    * a[i-1] - i + 1;\n            if (a[i] > m) {\n                m = a[i];\n            }\n
    \       }\n        long c = 0;\n        for (int i = 1; i < a.Length; i++) {\n
    \           c += a[i] > m;\n        }\n        return c;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppxihfm9x.cs(20,15): error CS0650: Bad array declarator: To declare a managed
    array the rank specifier precedes the variable''s identifier. To declare a fixed
    size buffer field, use the fixed keyword before the field type.

    '
  timestamp: 1659976379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] a = new long[n];\n        long tripleSum
    = 0;\n        long i = 0;\n        // Fill the array with values from 1 to n and
    each element multiplied by itself\n        for (int j = 0; j < n; j++) {\n            a[j]
    = j * j + i + 1;\n            tripleSum = tripleSum + a[j];\n        }\n        //
    Iterate through all a[i] where i < n\n        for (i = 1; i <= n; i++) {\n            long
    tripleSum2 = 0;\n            long j = 1;\n            while (j < i) {\n                tripleSum2
    = tripleSum + a[j] * a[j];\n                j++;\n            }\n            long
    k = i - 1;\n            while (k >= 1) {\n                tripleSum2 = tripleSum2
    + a[k] * a[k];\n                k--;\n            }\n            if (tripleSum2
    % 3 == 0) {\n                return i;\n            }\n        }\n        long
    result = 0;\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b36fabe576a843ada6a6c199066275a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b36fabe576a843ada6a6c199066275a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976380
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        var result = new List<long>();\n        var
    a = new long[n];\n        for (int i = 1; i < n; ++i) {\n            a[i - 1]
    = (i * i - i + 1);\n        }\n        var counter = 0;\n        for (int i =
    0; i < n; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if
    (i > j && i < j) {\n                    for (int k = i; k < j; ++k) {\n                        if
    (a[k] * a[k] - a[k] - a[i] == a[k] * a[k] * 3 && a[k] > i) {\n                            counter++;\n
    \                       }\n                    }\n                }\n            }\n
    \       }\n        result.Add(counter);\n        GC.Collect(GC.MaxGeneration,
    GCCollectionMode.Forced);\n        GC.WaitForPendingFinalizers();\n        GC.Collect(GC.MaxGeneration,
    GCCollectionMode.Forced);\n        return result.Max();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3021b0aaf04f40f7a2481605efe27255>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3021b0aaf04f40f7a2481605efe27255>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        // initialize an array of size n\n        long[]
    a = Enumerable.Range(1, n).ToArray();\n\n        // create an array to hold the
    results\n        long[] result = new long[n];\n\n        // loop through all possible
    combinations, \n        // but only consider valid ones (0 < i, i < n)\n        for
    (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for
    (int k = j + 1; k < n; k++) {\n                    // check if the i-th and j-th
    elements are valid\n                    if (!(a[i] < i || j < k || k < i || a[j]
    < j || k < j)) {\n                        // if it is not valid, break the loop\n
    \                       break;\n                    }\n                    //
    add up the triple \n                    result[i] += a[i];\n                    result[j]
    += a[j];\n                    result[k] += a[k];\n                }\n            }\n
    \       }\n\n        // return the result\n        return result.Where(r => r
    == 3 * r.Max()).Count();\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8bgrli_7.cs(21,40): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp8bgrli_7.cs(45,43): error CS1929: ''long'' does not contain a definition
    for ''Max'' and the best extension method overload ''ParallelEnumerable.Max(ParallelQuery<int>)''
    requires a receiver of type ''ParallelQuery<int>''

    '
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        Debug.Assert(n > 1);\n        long tripleCount
    = 0;\n        for (int i = 1; i <= n; i++) {\n            long currentValue =
    i * i - i + 1;\n            long currentSum = currentValue + 1;\n            for
    (int j = i + 1; j <= n; j++) {\n                long currentSum += j;\n                if
    (currentSum > 9 && currentSum > currentValue) {\n                    tripleCount++;\n
    \               }\n            }\n        }\n        return tripleCount;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpta6tp9f8.cs(26,33): error CS1002: ; expected

    /tmp/tmpta6tp9f8.cs(26,33): error CS1525: Invalid expression term ''+=''

    '
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long a = n * (n * n - n) + 1;\n        long
    a1 = (long)Math.Ceiling(a);\n        long a2 = a - a1;\n        long count = 0;\n
    \       List<long> L = new List<long>();\n        for (int i = 1; i <= n1; i++)
    {\n            long temp = a1 / i;\n            for (int j = 1; j <= n2; j++)
    {\n                long temp1 = a2 / j;\n                for (int k = 1; k <=
    n3; k++) {\n                    long temp2 = a2 / k;\n                    int
    result = temp1 * temp1 + temp2 * temp2 + temp1;\n                    result =
    result % 3;\n                    if (result == 0) {\n                        L.Add(i);\n
    \                       L.Add(j);\n                        L.Add(k);\n                    }\n
    \                   count++;\n                }\n            }\n        }\n        long
    res = Math.Max(L.Count);\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn_2t03fy.cs(21,30): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Ceiling(decimal)'' and ''Math.Ceiling(double)''

    /tmp/tmpn_2t03fy.cs(25,30): error CS0103: The name ''n1'' does not exist in the
    current context

    /tmp/tmpn_2t03fy.cs(27,34): error CS0103: The name ''n2'' does not exist in the
    current context

    /tmp/tmpn_2t03fy.cs(29,38): error CS0103: The name ''n3'' does not exist in the
    current context

    /tmp/tmpn_2t03fy.cs(31,34): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpn_2t03fy.cs(42,25): error CS1501: No overload for method ''Max'' takes
    1 arguments

    '
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        List<long> a = Enumerable.Range(1, n).ToList();\n
    \       Stopwatch sw = new Stopwatch();\n        sw.Start();\n        long count
    = 0;\n        long result = 0;\n        for (int i = 0; i < a.Count - 1; i++)
    {\n            for (int j = i + 1; j < a.Count; j++) {\n                for (int
    k = j + 1; k < a.Count; k++) {\n                    long tripleSum = a[i] + a[j]
    + a[k];\n                    if (tripleSum % 3 == 0) {\n                        count++;\n
    \                   }\n                }\n            }\n        }\n        result
    = count;\n        sw.Stop();\n        Console.WriteLine(count);\n        Console.WriteLine(\"Elapsed:
    {0}ms\", sw.ElapsedMilliseconds);\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp56vzu6ni.cs(20,44): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        var arr = new List<long>(n);\n        long
    max = 0;\n        for (int i = 0; i < n; i++) {\n            arr[i] = i * i -
    i + 1;\n            max = Math.Max(max, arr[i]);\n        }\n        var max =
    arr.Max();\n        return Enumerable.Range(0, n).Count(n => arr[n] == max);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp10i0zi15.cs(20,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp10i0zi15.cs(26,13): error CS0128: A local variable or function named ''max''
    is already defined in this scope

    /tmp/tmp10i0zi15.cs(27,36): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long a = new long[n];\n        Array.Sort(a);\n
    \       int index = 1;\n        long triple;\n        do {\n            long sum
    = 0;\n            triple = a[index];\n            for (int i = index; i < a.Length;
    i++) {\n                long tmp = a[i];\n                sum += tmp + tmp + tmp;\n
    \           }\n            sum *= 3;\n            if (sum >= triple)\n                return
    1;\n            index++;\n        } while (index != a.Length);\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm5o382x0.cs(20,18): error CS0029: Cannot implicitly convert type ''long[]''
    to ''long''

    /tmp/tmpm5o382x0.cs(21,20): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Array''

    /tmp/tmpm5o382x0.cs(35,29): error CS1061: ''long'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpm5o382x0.cs(26,22): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpm5o382x0.cs(27,39): error CS1061: ''long'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpm5o382x0.cs(28,28): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long a[] = new long[n];\n        int[] used
    = new int[n];\n        long[] count = new long[n];\n        long ans = 0;\n        BitArray
    mask = new BitArray(128);\n\n        long start = System.DateTime.Now.Ticks;\n
    \       int cnt = 1;\n        for (long i = 0; i < n; i++) {\n            a[i]
    = i * i - i + 1;\n            if (used[i] == 0) {\n                if (a[i] %
    3 == 0) {\n                    count[i] += 1;\n                }\n                else
    {\n                    cnt++;\n                    if (!mask.Set(i / 32)) {\n
    \                       count[i] = 1;\n                    }\n                    else
    {\n                        count[i] = 0;\n                    }\n                }\n
    \               used[i] = 1;\n            }\n        }\n        for (int i = 0;
    i < n; i++) {\n            if (used[i]) {\n                long tmp = a[i];\n
    \               for (int j = i; j < n; j++) {\n                    tmp -= (3 *
    a[j]);\n                    if (tmp % 3 == 0) {\n                        count[j]
    += 1;\n                        break;\n                    }\n                }\n
    \           }\n        }\n        long end = System.DateTime.Now.Ticks;\n        long
    time = end - start;\n        Console.WriteLine(time + \":\" + \"GetMaxTriples:\"
    + cnt);\n        return cnt / 3;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr7cf9mgq.cs(20,15): error CS0650: Bad array declarator: To declare a managed
    array the rank specifier precedes the variable''s identifier. To declare a fixed
    size buffer field, use the fixed keyword before the field type.

    '
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long a = new long[n];\n        \n        List<long>
    validTriples = new List<long>();\n        int count = 0;\n\n        for (int i
    = 0; i < n; i++) {\n            long x = i * i - i + 1;\n            if (x < 0)
    {\n                return 0;\n            }\n\n            for (int j = 0; j <
    n; j++) {\n                long y = j * j - j + 1;\n                if (y < 0)
    {\n                    continue;\n                }\n\n                for (int
    k = 0; k < n; k++) {\n                    long z = k * k - z + 1;\n                    if
    (z < 0) {\n                        continue;\n                    }\n\n                    long
    sum = x + y + z;\n                    if (sum % 3 == 0) {\n                        count++;\n
    \                       if (sum > 0) {\n                            validTriples.Add(sum);\n
    \                       }\n                    }\n                }\n            }\n
    \       }\n\n        if (count > 0) {\n            return validTriples.Max();\n
    \       }\n        else {\n            return 0;\n        }\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n
    \   Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpesprp2ut.cs(20,18): error CS0029: Cannot implicitly convert type ''long[]''
    to ''long''

    /tmp/tmpesprp2ut.cs(38,38): error CS0165: Use of unassigned local variable ''z''

    '
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        // Your code here\n        long a[] = new
    long[n];\n        long sum = 0;\n        long max = 0;\n        for (int i = 0;
    i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (j
    < i && sum == a[j] + a[i] && (sum % 3) == 0) {\n                    for (int k
    = 0; k < n; k++) {\n                        a[k] = a[k] - a[j];\n                        if
    (a[k] > max)\n                            max = a[k];\n                    }\n
    \               }\n                a[j] = a[j] - a[i];\n                sum++;\n
    \           }\n        }\n        return max;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yt3otvo.cs(21,15): error CS0650: Bad array declarator: To declare a managed
    array the rank specifier precedes the variable''s identifier. To declare a fixed
    size buffer field, use the fixed keyword before the field type.

    '
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] a = new long[n + 1];\n        for
    (int i = 1; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int
    max = 0;\n        int k = 0;\n        for (int i = 0; i < n; i++) {\n            for
    (int j = i + 1; j < n; j++) {\n                for (int k = 0; k < n; k++) {\n
    \                   int sum = a[i] + a[j] + a[k];\n                    if (sum
    % 3 == 0) {\n                        max++;\n                    }\n                }\n
    \           }\n        }\n        return max;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo37gsnan.cs(28,26): error CS0136: A local or parameter named ''k'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpo37gsnan.cs(29,31): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpo37gsnan.cs(25,13): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    '
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        if (n == 0)\n            return 0;\n        var
    list = new List<long>();\n        var max = 0;\n        for (int i = 1; i <= n;
    i++) {\n            list.Add(i);\n            max += i;\n        }\n        var
    a = new long[max];\n        for (int i = 1; i <= max; i++) {\n            a[i
    - 1] = (i * i - 1 + 1);\n        }\n        var count = 0;\n        var result
    = Enumerable.Range(1, n).Where((i) => list[i] < list[i + 1] && list[i] < list[i
    + 2]).Count();\n        for (int i = 1; i <= max; i++) {\n            if (a[i
    - 1] == a[i] + a[i + 1] + a[i + 2]) {\n                count++;\n            }\n
    \       }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1l33ihs_.cs(33,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976380
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long triple = 0;\n        long triples =
    0;\n        long j = 0;\n        long k = 0;\n        for (int i = 0; i < n; i++)
    {\n            k = i * (i * (i + 1));\n            if (i != j) {\n                for
    (; j <= k; j++) {\n                    for (; k <= j; k++) {\n                        if
    (j != k) {\n                            for (; k <= j; k++) {\n                                if
    (k > j) {\n                                    triple += 1;\n                                }\n
    \                               if (k == j) {\n                                    if
    (i != k) {\n                                        triple += 2;\n                                    }\n
    \                               }\n                            }\n                        }\n
    \                   }\n                }\n            }\n            if (triple
    > triples) {\n                triples = triple;\n            }\n            if
    (i > j) {\n                triple = 0;\n                j++;\n            }\n
    \       }\n        return triples;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659976385
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] a = new long[n];\n        long max
    = 0;\n        \n        //initialize array\n        for (int i = 1; i <= n; i++)
    {\n            a[i] = i * i - i + 1;\n        }\n\n        //search\n        for
    (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                for
    (int k = 0; k < n; k++) {\n                    if (a[i] < a[j] && a[i] < a[k])
    {\n                        max++;\n                    }\n                }\n
    \           }\n        }\n\n        return max;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.GetMaxTriples (System.Int64 n) [0x00011]
    in <442142aa07074f449fc583e1cc9554b8>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <442142aa07074f449fc583e1cc9554b8>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.GetMaxTriples (System.Int64 n) [0x00011] in <442142aa07074f449fc583e1cc9554b8>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <442142aa07074f449fc583e1cc9554b8>:0
    \n"
  stdout: ''
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        var result = new List<long>();\n        var
    primes = new List<long>();\n        for(int i = 2; i <= n; i++)\n        {\n            primes.Add(i);\n
    \       }\n        long a = new long[n];\n        long count = 0;\n        foreach
    (var p in primes)\n        {\n            int start = (int)(p / 3);\n            int
    end = (int)(p / 3 + (p % 3 == 0));\n            int index = (int)(a[start] - a[end]);\n
    \           if(a[start] + a[end] + index > 0)\n            {\n                result.Add(index);\n
    \           }\n        }\n        return result.Count;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvj4azfoz.cs(26,18): error CS0029: Cannot implicitly convert type ''long[]''
    to ''long''

    /tmp/tmpvj4azfoz.cs(31,29): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''long'' and ''bool''

    /tmp/tmpvj4azfoz.cs(32,31): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpvj4azfoz.cs(32,42): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpvj4azfoz.cs(33,16): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpvj4azfoz.cs(33,27): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpvj4azfoz.cs(27,14): warning CS0219: The variable ''count'' is assigned
    but its value is never used

    '
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        if (n < 0) throw new ArgumentOutOfRangeException(\"n\",
    \"n is not a positive number.\");\n        long a[] = new long[n];\n        long
    total = 0;\n        for (int i = 1; i <= n; i++) {\n            long m = i * i
    - i + 1;\n            if (m % 3 == 0) total += 3;\n            a[i - 1] = i;\n
    \       }\n        if (total < 2) return 1;\n        return total;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n
    \   Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp18o6s3zj.cs(21,15): error CS0650: Bad array declarator: To declare a managed
    array the rank specifier precedes the variable''s identifier. To declare a fixed
    size buffer field, use the fixed keyword before the field type.

    '
  timestamp: 1659976379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] a = new long[n];\n        long count
    = 0;\n        for (int i = 0; i < n; i++)\n            a[i] = i * i - i + 1;\n
    \       for (int i = 1; i < n; i++) {\n            for (int j = i + 1; j < n;
    j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if
    (a[i] + a[j] + a[k] == (3 * i) * (3 * j) * (3 * k)) {\n                        count++;\n
    \                   }\n                }\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cb61e8c54370444f8a87aac2bdd846ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cb61e8c54370444f8a87aac2bdd846ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] a = new long[n];\n        a[0] =
    1;\n        long res = 0;\n        for (int i = 1; i < a.Length; i++) {\n            long
    temp = 0;\n            for (int j = i-1; j >= 0; j--) {\n                temp
    += a[j];\n            }\n            a[temp] = temp + i;\n            if (temp
    % 3 == 0) res++;\n        }\n        return res;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.GetMaxTriples (System.Int64 n) [0x0003d]
    in <f3dc58aa16d448d9af92b7c3bd258bb7>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <f3dc58aa16d448d9af92b7c3bd258bb7>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.GetMaxTriples (System.Int64 n) [0x0003d] in <f3dc58aa16d448d9af92b7c3bd258bb7>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <f3dc58aa16d448d9af92b7c3bd258bb7>:0
    \n"
  stdout: ''
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long a = new long[(int)n];\n        a[0]
    = 0;\n        a[1] = 1;\n        long sum = 0;\n        for(int i = 2; i <= n;
    i++){\n            sum += a[i] * a[i - 1];\n            a[(int)i / 2]++;\n        }\n
    \       long count = 0;\n        for(int i = 1; i < n; i++){\n            sum
    += a[i] * a[i - 1];\n            if((int)sum % 3 == 0)\n                count++;\n
    \       }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkrgimdmy.cs(20,18): error CS0029: Cannot implicitly convert type ''long[]''
    to ''long''

    /tmp/tmpkrgimdmy.cs(21,9): error CS0021: Cannot apply indexing with [] to an expression
    of type ''long''

    /tmp/tmpkrgimdmy.cs(22,9): error CS0021: Cannot apply indexing with [] to an expression
    of type ''long''

    /tmp/tmpkrgimdmy.cs(25,20): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpkrgimdmy.cs(25,27): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpkrgimdmy.cs(26,13): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpkrgimdmy.cs(30,20): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpkrgimdmy.cs(30,27): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long sum = 0;\n        long[] arr = new
    long[n];\n        long a = 3, count = 0;\n        for (int i = 1; i <= n; i++)
    {\n            arr[i-1] = i*i-i+1;\n        }\n        for (int i = 1; i <= n;
    i++) {\n            for (int j = 1; j <= n; j++) {\n                for (int k
    = 1; k <= n; k++) {\n                    if (arr[i-1]+arr[j-1]+arr[k] == a) {\n
    \                       count++;\n                        sum+=2;\n                    }\n
    \               }\n            }\n        }\n        return sum;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n
    \   Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.GetMaxTriples (System.Int64 n) [0x00051]
    in <bbedff829b164ac7b8b82a16e4058001>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bbedff829b164ac7b8b82a16e4058001>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.GetMaxTriples (System.Int64 n) [0x00051] in <bbedff829b164ac7b8b82a16e4058001>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <bbedff829b164ac7b8b82a16e4058001>:0
    \n"
  stdout: ''
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long a = new long[n + 1];\n        long
    sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i * i - i
    + 1;\n            a[i - 1] = sum;\n        }\n        long max = 0;\n        for
    (int i = 1; i <= n; i++) {\n            long sum = 0;\n            for (int j
    = i + 1; j <= n; j++) {\n                sum += a[j - i];\n            }\n            if
    (sum % 3 == 0) {\n                max = i;\n                break;\n            }\n
    \       }\n        return max;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6lhvf2nz.cs(20,18): error CS0029: Cannot implicitly convert type ''long[]''
    to ''long''

    /tmp/tmp6lhvf2nz.cs(24,13): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmp6lhvf2nz.cs(28,18): error CS0136: A local or parameter named ''sum'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp6lhvf2nz.cs(30,24): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long a = new long[n];\n\n        var result
    = new long[a.Length];\n\n        for (int i = 0; i < a.Length; i++) {\n            long
    temp = a[i];\n\n            a[i] = temp * temp - temp + 1;\n        }\n\n        for
    (int i = 0; i < a.Length; i++) {\n            for (int j = 0; j < a.Length; j++)
    {\n                for (int k = 0; k < a.Length; k++) {\n                    if
    (i < j < k) {\n                        if ((i != j) && (i != k) && (j != k)) {\n
    \                           if (a[i] >= a[j] && a[i] >= a[k]) {\n                                result[i
    * a.Length + j * a.Length + k] += 1;\n                                a[i] = a[j]
    = a[k] = 0;\n                            }\n                        }\n                    }\n
    \               }\n            }\n        }\n\n        return result.Sum();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplx91vo0w.cs(20,18): error CS0029: Cannot implicitly convert type ''long[]''
    to ''long''

    /tmp/tmplx91vo0w.cs(22,33): error CS1061: ''long'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmplx91vo0w.cs(24,31): error CS1061: ''long'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmplx91vo0w.cs(25,25): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmplx91vo0w.cs(27,13): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmplx91vo0w.cs(30,31): error CS1061: ''long'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmplx91vo0w.cs(31,35): error CS1061: ''long'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmplx91vo0w.cs(32,39): error CS1061: ''long'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmplx91vo0w.cs(33,25): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''bool'' and ''int''

    /tmp/tmplx91vo0w.cs(35,33): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmplx91vo0w.cs(35,41): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmplx91vo0w.cs(35,49): '
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long sum = 0;\n        long[] a = Enumerable.Range(1,
    n).Select(i => i * i - i + 1).ToArray();\n        foreach (var triple in a) {\n
    \           sum += triple;\n        }\n        return sum;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n
    \   Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8klvl3fl.cs(21,40): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long count = 0, max = 1;\n        List<long>
    a = new List<long>();\n        for(int i = 1; i < n; i++) {\n            int n1
    = i * i - i + 1;\n            int n2 = i;\n            int n3 = i + 1;\n            a.Add(n1);\n
    \           a.Add(n2);\n            a.Add(n3);\n        }\n        long sum =
    0;\n        for(int i = 0; i < a.Count - 1; i++) {\n            long n1 = a[i],
    n2 = a[i + 1];\n            long n3 = a[i + 2];\n            long res = n1 * n1
    - n2 + n3;\n            if((res % 3) != 0) {\n                count++;\n            }\n
    \           sum += res;\n        }\n        if(count == 0)\n            return
    max;\n        return sum;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.GetMaxTriples
    (System.Int64 n) [0x00079] in <0f4b7136d48743a6b71b0e4ef1c48cd8>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <0f4b7136d48743a6b71b0e4ef1c48cd8>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.GetMaxTriples
    (System.Int64 n) [0x00079] in <0f4b7136d48743a6b71b0e4ef1c48cd8>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <0f4b7136d48743a6b71b0e4ef1c48cd8>:0 \n"
  stdout: ''
  timestamp: 1659976380
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        List<long> list = new List<long>() { 1 };\n
    \       if (n < 3) return 0;\n        if (n % 3 == 0) return 3;\n        int counter
    = 1;\n        for (int i = 1; i < n; i++) {\n            long temp1 = list.Last();\n
    \           long temp2 = temp1 * temp1 - temp1 + 1;\n            list.Add(temp2);\n
    \           if (temp2 * temp2 - temp1 + 1 == 3) counter++;\n        }\n        return
    counter;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd8750ef2a2f41e685509062db3b7028>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd8750ef2a2f41e685509062db3b7028>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long a[] = new long[n];\n        long sum
    = 0;\n        bool isCheck = false;\n        for (int i = 1; i <= n; i++) {\n
    \           sum += i;\n            isCheck = true;\n            for (int j = 1;
    j <= i; j++) {\n                for (int k = 1; k <= j; k++) {\n                    long
    product = a[i] * a[j] * a[k];\n                    if (product % 3 == 0) {\n                        isCheck
    = false;\n                        break;\n                    }\n                }\n
    \               if (isCheck)\n                    break;\n            }\n            if
    (isCheck)\n                a[i - 1] = sum;\n        }\n        return a[n - 1];\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpypf76ddo.cs(20,15): error CS0650: Bad array declarator: To declare a managed
    array the rank specifier precedes the variable''s identifier. To declare a fixed
    size buffer field, use the fixed keyword before the field type.

    '
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long[] a = new long[n];\n        long max
    = (long)0;\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i -
    i + 1;\n            if (max == a[i]) {\n                max = a[i];\n            }\n
    \       }\n        return GetMax(a, n);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpknodx8f7.cs(28,16): error CS0103: The name ''GetMax'' does not exist in
    the current context

    '
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long a[n];\n        int count = 0;\n        long
    n3 = n*3;\n        long n2 = n*2;\n        long n1 = n*1;\n        for(int i =
    1; i < n; i++) {\n            a[i] = i*i - i + 1;\n        }\n        for(int
    i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                for(int
    k = 1; k < n; k++) {\n                    if(i+j+k == 3 && a[i] > a[j] && a[j]
    > a[k]) {\n                        count++;\n                    }\n                }\n
    \           }\n        }\n        return (long)((double)count / n3);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))
    == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))
    == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnuvb_t6b.cs(20,15): error CS0650: Bad array declarator: To declare a managed
    array the rank specifier precedes the variable''s identifier. To declare a fixed
    size buffer field, use the fixed keyword before the field type.

    /tmp/tmpnuvb_t6b.cs(20,16): error CS0270: Array size cannot be specified in a
    variable declaration (try initializing with a ''new'' expression)

    '
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a positive integer n. You have to create an integer
    list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]
    = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a
    where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example
    :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a
    = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static
    long GetMaxTriples(long n) {\n        long sum = 0;\n        var a = new long[n];\n
    \       for(int i = 1; i <= n; i++) {\n            a[i] = i * i - i + 1;\n            if(i
    + 1 < n) {\n                if(a[i] % 3 == 0 && a[i+1] % 3 == 0 && a[i+2] % 3
    == 0) {\n                    sum += i;\n                    i += 1;\n                }\n
    \           }\n        }\n        return sum;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L))
    == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L))
    == (53361L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.GetMaxTriples (System.Int64 n) [0x00011]
    in <b39b2d417202458b9328762e530de869>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <b39b2d417202458b9328762e530de869>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.GetMaxTriples (System.Int64 n) [0x00011] in <b39b2d417202458b9328762e530de869>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <b39b2d417202458b9328762e530de869>:0
    \n"
  stdout: ''
  timestamp: 1659976380
