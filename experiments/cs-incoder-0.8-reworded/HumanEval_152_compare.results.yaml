language: cs
name: HumanEval_152_compare
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        if (game.Count\
    \ != guess.Count) {\n            return new List<long>() { 0 };\n        }\n \
    \       long score = new long();\n        bool correct = true;\n        foreach\
    \ (var g in guess) {\n            score = new long();\n            foreach (var\
    \ s in game) {\n                score = new long();\n                if (s ==\
    \ g) {\n                    score = new long();\n                }\n         \
    \       if (s.Equals(g)) {\n                    score = 0;\n                }\n\
    \                if (score.Equals(0)) {\n                    score = new long();\n\
    \                }\n                if (score.Equals(0)) {\n                 \
    \   score = new long();\n                }\n                if (score.Equals(0))\
    \ {\n                    score = new long();\n                }\n            \
    \    if (score == 0) {\n                    correct = false;\n               \
    \     break;\n                }\n            }\n            if (correct) {\n \
    \               break;\n            }\n        }\n        return new List<long>()\
    \ { Math.Abs(score - g) };\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwovkz1sd.cs(55,52): error CS0103: The name ''g'' does not exist in the
    current context

    '
  timestamp: 1659976405
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ results = new List<long>();\n\n        for (int i = 0; i < game.Count; ++i)\
    \ {\n            results.Add(new long());\n        }\n\n        if (guess.Count\
    \ != game.Count) {\n            return results;\n        }\n\n        for (int\
    \ i = 0; i < game.Count; ++i) {\n            for (int j = 0; j < guess.Count;\
    \ ++j) {\n                long distance = Math.Abs(game[i] - guess[j]);\n    \
    \            results[i].Add(distance);\n            }\n        }\n\n        return\
    \ results.Distinct().ToList();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz_58vhw7.cs(35,28): error CS1061: ''long'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659976405
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ results = new List<long>(game.Count);\n        if (guess.Count != game.Count)\
    \ {\n            results.AddRange(new List<long>());\n            return results;\n\
    \        }\n        for (int i = 0; i < game.Count; i++) {\n            results.Add(Math.Abs(game[i]\
    \ - guess[i]));\n        }\n        return results;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <03108efc198546769f3e3d48bcc3bf69>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <03108efc198546769f3e3d48bcc3bf69>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976406
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        if (game.Count\
    \ != guess.Count)\n            throw new ArgumentOutOfRangeException(\"Number\
    \ of elements must match\");\n\n        var result = new List<long>(game.Count);\n\
    \        for (int i = 0; i < game.Count; i++) {\n            result[i] = new Random().Next(0,\
    \ 100L - game.ElementAt(i) + 1);\n        }\n        for (int i = 0; i < guess.Count;\
    \ i++) {\n            int j = 0;\n            bool foundMatch = false;\n     \
    \       long guess = guess.ElementAt(i);\n            while (j < result.Count\
    \ && !foundMatch && guess != result.ElementAt(j)) {\n                if (guess\
    \ < result.ElementAt(j))\n                    j++;\n                else if (guess\
    \ > result.ElementAt(j))\n                    j++;\n                else\n   \
    \                 foundMatch = true;\n            }\n            if (foundMatch)\n\
    \                result[i] = (100L - guess) - 1;\n            else\n         \
    \       result[i] = 100L - Math.Abs(guess - result.ElementAt(j));\n        }\n\
    \n        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp2eiz4ri.cs(27,46): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpp2eiz4ri.cs(32,18): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpp2eiz4ri.cs(32,32): error CS1061: ''long'' does not contain a definition
    for ''ElementAt'' and no accessible extension method ''ElementAt'' accepting a
    first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpp2eiz4ri.cs(32,26): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976405
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ r = game.Zip(guess.Reverse(), (g, g) => g - g).Where(x => x == 0).Select((x,\
    \ i) => new {\n            i = i,\n            delta = x,\n            guess =\
    \ g,\n            score = g - x,\n        }).Where(x => x.delta != 0).OrderBy(x\
    \ => x.score).Select(x => x.delta).ToList();\n\n        var wrong = new List<long>();\n\
    \n        foreach (var item in r) {\n            if (item.delta < 0) {\n     \
    \           wrong.Add(item.guess - item.score);\n            }\n        }\n\n\
    \        return wrong;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps9jk_y2c.cs(22,47): error CS0100: The parameter name ''g'' is a duplicate

    /tmp/tmps9jk_y2c.cs(22,22): error CS0411: The type arguments for method ''Enumerable.Zip<TFirst,
    TSecond, TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond,
    TResult>)'' cannot be inferred from the usage. Try specifying the type arguments
    explicitly.

    /tmp/tmps9jk_y2c.cs(25,21): error CS0103: The name ''g'' does not exist in the
    current context

    /tmp/tmps9jk_y2c.cs(26,21): error CS0103: The name ''g'' does not exist in the
    current context

    '
  timestamp: 1659976405
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // The\
    \ only non-obvious thing here is how to efficiently compare every possible combination\
    \ of scores and guesses.\n        // We could try a brute force approach with\
    \ a nested for loop but that would be inefficient and would take too long.\n \
    \       // We want to avoid that and instead write an efficient algorithm that\
    \ compares every combination\n        // of scores and guesses and returns the\
    \ correct one.\n        // First let's write a helper method that compares two\
    \ scores:\n        static long Compare(long x, long y) {\n            if (x !=\
    \ y)\n                return Math.Abs(x - y);\n            return 0;\n       \
    \ }\n        // Now we want to compare every possible combination of scores and\
    \ guesses, and return only the correct one:\n        List<long> res = game.Select(g\
    \ => new List<long>()).ToList();\n        for (int i = 0; i < game.Count; i++)\
    \ {\n            for (int j = 0; j < guess.Count; j++) {\n                long\
    \ score = game[i];\n                long guess = guess[j];\n                if\
    \ (Compare(score, guess) == 0) {\n                    // The score and guess are\
    \ equal so we need to move on.\n                    continue;\n              \
    \  }\n                long diff = Math.Abs(score - guess);\n                res[i]\
    \ += diff;\n            }\n        }\n        return res;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgcx3d3i5.cs(33,26): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<System.Collections.Generic.List<long>>''
    to ''System.Collections.Generic.List<long>''

    /tmp/tmpgcx3d3i5.cs(37,22): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpgcx3d3i5.cs(37,30): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpgcx3d3i5.cs(37,30): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976405
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        bool\
    \ gameAssigned = !game.Any() || game[0] != 0L;\n        bool guessAssigned = !guess.Any()\
    \ || guess[0] != 0L;\n        if (!gameAssigned && !guessAssigned) return new\
    \ List<long>(game);\n        \n        List<long> guessedCorrectly = new List<long>(guess.Count);\n\
    \        List<long> scores = new List<long>(game.Count);\n        for (int i =\
    \ 0; i < guess.Count; i++)\n            scores[i] = game[i] - guess[i];\n    \
    \    for (int i = 0; i < game.Count; i++)\n            if (game[i] == guess[i])\
    \ guessedCorrectly[i++] = 0;\n            else if (game[i] != guess[i]) guessedCorrectly[i++]\
    \ = game[i] - guess[i];\n            else\n                guessedCorrectly[i++]\
    \ = game[i] - guess[i];\n        \n        return new List<long>(guessedCorrectly);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].set_Item (System.Int32\
    \ index, T value) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x0007c] in <6be77cc68a4c46deb17319bc164b8154>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <6be77cc68a4c46deb17319bc164b8154>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].set_Item (System.Int32\
    \ index, T value) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x0007c] in <6be77cc68a4c46deb17319bc164b8154>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <6be77cc68a4c46deb17319bc164b8154>:0 \n"
  stdout: ''
  timestamp: 1659976406
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ result = new List<long>(game.Count);\n        int j = 0;\n        for (int i\
    \ = 0; i < game.Count; i++) {\n            if (game[i] == guess[j]) {\n      \
    \          result.Add(0L);\n                j++;\n            }\n            else\
    \ {\n                int k = 0;\n                while (k < game.Count && game[i]\
    \ != guess[k]) {\n                    k++;\n                }\n              \
    \  if (k == game.Count) {\n                    result.Add(game[i] - guess[j]);\n\
    \                    j++;\n                }\n                else {\n       \
    \             result.Add(-Math.Abs(guess[j] - game[i]));\n                   \
    \ j++;\n                    result.Add(0);\n                }\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe8b07329b2b431994c1be78b2cbbbfb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe8b07329b2b431994c1be78b2cbbbfb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976406
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ result = new List<long>(game.Count);\n        if (game.Count == guess.Count\
    \ && game.Count == guess.Min(x => x).Count) {\n            long difference = 0;\n\
    \            for (int i = 0; i < game.Count; i++) {\n                difference\
    \ += Math.Abs(guess[i] - game[i]);\n            }\n            for (int i = 0;\
    \ i < guess.Count; i++) {\n                difference += Math.Abs(guess[i] - game[guess.IndexOf(guess[i])]);\n\
    \            }\n            if (difference == 0) {\n                for (int i\
    \ = 0; i < guess.Count; i++) {\n                    result.Add(0);\n         \
    \       }\n            } else {\n                for (int i = 0; i < guess.Count;\
    \ i++) {\n                    result.Add(difference - Math.Abs(guess[i]));\n \
    \               }\n            }\n        } else {\n            throw new ArgumentException(\"\
    The lists must have the same length\");\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd1gwt_ql.cs(23,42): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''int'' and ''method group''

    '
  timestamp: 1659976405
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ result = new List<long>(game.Count);\n        game.ForEach(i => {\n        \
    \    result.Add(0);\n            if (i != guess[i]) {\n                result[i]\
    \ = MathNet.Numerics.Statistics.Statistics.Abs(guess[i] - game[i]);\n        \
    \    }\n        });\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6pv6rtz2.cs(25,28): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp6pv6rtz2.cs(26,24): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp6pv6rtz2.cs(26,29): error CS0103: The name ''MathNet'' does not exist
    in the current context

    /tmp/tmp6pv6rtz2.cs(26,78): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp6pv6rtz2.cs(26,88): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976405
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        Debug.Assert(game.Count\
    \ > 0 && guess.Count > 0);\n        List<long> diff = new List<long>();\n    \
    \    Debug.Assert(game.Count == guess.Count);\n        for (long i = 0; i < game.Count;\
    \ i++) {\n            long score = game[i];\n            long guess = guess[i];\n\
    \            Debug.Assert(guess == 0 || guess == score);\n            if (guess\
    \ == score) {\n                diff.Add(0);\n            } else {\n          \
    \      diff.Add(Math.Abs(guess - score));\n            }\n        }\n        return\
    \ diff;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf8jpi9a8.cs(26,31): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpf8jpi9a8.cs(27,18): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpf8jpi9a8.cs(27,26): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpf8jpi9a8.cs(27,26): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976405
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ result = game.ToList();\n        if (game.Count != guess.Count) throw new Exception();\n\
    \        bool gameResult = game.All(g => guess[game.IndexOf(g)] != g);\n     \
    \   bool guessResult = guess.All(g => game[game.IndexOf(g)] != g);\n        if\
    \ (gameResult) result.Add(0);\n        if (!gameResult) result.Add(game.Max()\
    \ - guess.Min());\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e5e69a65558d46e0b14c40bc641ff168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e5e69a65558d46e0b14c40bc641ff168>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative\
    \ and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item\
    \ (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ Problem+<>c__DisplayClass0_0.<Compare>b__1 (Syste"
  stdout: ''
  timestamp: 1659976406
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ result = new List<long>();\n        if (game.Count != guess.Count) {\n     \
    \       throw new ArgumentException(\"The two lists must have the same length.\"\
    );\n        }\n\n        long[] diff = game.Zip(guess, (game, guess)=>Math.Abs(game-guess));\n\
    \n        for (int i = 0; i < diff.Length; i++) {\n            result.Add(diff[i]);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5f0ky0wt.cs(27,23): error CS0266: Cannot implicitly convert type ''System.Collections.Generic.IEnumerable<long>''
    to ''long[]''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976405
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ correct = game.Count * guess;\n        var total = game.Count * guess.Count;\n\
    \        var results = new List<long>();\n        foreach (var game in game) {\n\
    \            foreach (var guess in guess) {\n                var diff = game.CompareTo(guess);\n\
    \                var correctDifference = correct - diff;\n                if (correctDifference\
    \ > 0) \n                    correctDifference = -correctDifference;\n       \
    \         results.Add(correctDifference);\n            }\n        }\n        return\
    \ results;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3rkiw8vh.cs(22,23): error CS0019: Operator ''*'' cannot be applied to
    operands of type ''int'' and ''List<long>''

    /tmp/tmp3rkiw8vh.cs(25,22): error CS0136: A local or parameter named ''game''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp3rkiw8vh.cs(26,26): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659976405
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        long\
    \ numScores = game.Count;\n        long numGuesses = guess.Count;\n        List<long>\
    \ differences = new List<long>(numGuesses);\n        long score;\n        long\
    \ guess;\n        long difference;\n        Console.WriteLine($\"There are {numScores}\
    \ scores and {numGuesses} guesses.\");\n        for (int i = 0; i < numGuesses;\
    \ i++) {\n            guess = guess[i];\n            difference = guess - game[i];\n\
    \            if (difference < 0) {\n                difference = difference *\
    \ -1;\n            }\n            differences[i] = difference;\n            Console.WriteLine($\"\
    Guess: {guess}, Score: {game[i]}, Difference: {difference}\");\n        }\n  \
    \      return differences;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbvuriddf.cs(23,27): error CS0841: Cannot use local variable ''guess''
    before it is declared

    /tmp/tmpbvuriddf.cs(23,33): error CS0428: Cannot convert method group ''Count''
    to non-delegate type ''long''. Did you intend to invoke the method?

    /tmp/tmpbvuriddf.cs(24,49): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpbvuriddf.cs(26,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpbvuriddf.cs(30,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpbvuriddf.cs(25,14): warning CS0168: The variable ''score'' is declared
    but never used

    '
  timestamp: 1659976405
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        if (game.Count\
    \ != guess.Count) {\n            throw new ArgumentException(\"The number of games\
    \ must equal the number of guesses\");\n        }\n        var results = new List<long>(game.Count);\n\
    \        long score = 0;\n        int i;\n        // I love for loops. You need\
    \ them.\n        for (i = 0; i != game.Count; ++i) {\n            int j;\n   \
    \         for (j = 0; j != guess.Count; ++j) {\n                if (game[i] ==\
    \ guess[j]) {\n                    // this line is tricky. Because the index is\
    \ i, not 0, we want\n                    // to add score and i to get results[i].\
    \ Using Linq's Take()\n                    // method we can take \"game[score]\
    \ + i\" as the value to\n                    // get from the game.\n         \
    \           score += game[score] + i;\n                    results.Add(0);\n \
    \                   break;\n                }\n            }\n        }\n    \
    \    return results;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfrcr67gj.cs(37,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976405
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // Your\
    \ code here.\n        List<long> ret = new List<long>(guess.Count);\n        List<long>\
    \ total = new List<long>(game.Count);\n        total[game.Count - 1] = 0;\n  \
    \      for(int i = 0; i < game.Count; i++ ) {\n            total[i] = total[game.Count\
    \ - 1] + game[i];\n        }\n        for(int i = 0; i < guess.Count; i++ ) {\n\
    \            int j = 0;\n            for(j = 0; j < game.Count; j++) {\n     \
    \           if((total[j] == total[j+i])) {\n                    ret[i] = Math.Abs((guess[i]\
    \ - game[j]));\n                    break;\n                }\n            }\n\
    \        }\n        return ret;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].set_Item (System.Int32\
    \ index, T value) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x00020] in <ee3574b6ce5f4c4aa752214363c4af23>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <ee3574b6ce5f4c4aa752214363c4af23>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].set_Item (System.Int32\
    \ index, T value) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x00020] in <ee3574b6ce5f4c4aa752214363c4af23>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <ee3574b6ce5f4c4aa752214363c4af23>:0 \n"
  stdout: ''
  timestamp: 1659976405
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        int\
    \ leng = guess.Count;\n        List<long> score = new List<long>(game.Count);\n\
    \n        for (int i = 0; i < leng; i++) {\n            long g = guess[i];\n \
    \           long score = game[i];\n            if (score > g)\n              \
    \  score.Subtract(g);\n            else\n                score.Add(Math.Abs(g\
    \ - score));\n        }\n        return score;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppmf0dwux.cs(27,18): error CS0136: A local or parameter named ''score''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmppmf0dwux.cs(29,23): error CS1061: ''long'' does not contain a definition
    for ''Subtract'' and no accessible extension method ''Subtract'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmppmf0dwux.cs(31,23): error CS1061: ''long'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659976405
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        \n \
    \       // Your code here!\n        var gameArray = game.ToArray();\n        var\
    \ guessArray = guess.ToArray();\n        long difference = 0;\n        foreach(var\
    \ guess in guessArray) {\n            difference = Math.Abs(guess - game[guess.ToArray().IndexOf(guess)]);\n\
    \        }\n        return guess.Select(x => difference + x).ToList();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsiit7cjl.cs(27,21): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpsiit7cjl.cs(28,54): error CS1061: ''long'' does not contain a definition
    for ''ToArray'' and no accessible extension method ''ToArray'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659976405
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        if (guess.Count\
    \ != game.Count) {\n            throw new Exception(\"Guessing list contains elements\
    \ with different lengths\");\n        }\n        int[] count = new int[guess.Count];\n\
    \        for (int i = 0; i < guess.Count; ++i) {\n            count[i] = 0;\n\
    \        }\n        // the inner loop is a O(n) operation\n        for (int i\
    \ = 0; i < game.Count; ++i) {\n            for (int j = 0; j < guess.Count; ++j)\
    \ {\n                if (game[i] == guess[j]) {\n                    count[j]++;\n\
    \                    for (int k = 0; k < game.Count; ++k) {\n                \
    \        if (k == i) continue;\n                        if (count[k] > 0) {\n\
    \                            count[k] = 0;\n                            break;\n\
    \                        }\n                    }\n                    if (j !=\
    \ guess.Count - 1) {\n                        break;\n                    }\n\
    \                }\n            }\n        }\n        List<long> result = new\
    \ List<long>(guess.Count);\n        for (int i = 0; i < guess.Count; ++i) {\n\
    \            result.Add(count[i] * guess[i]);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <319cf93c655c4e18b390c234e4f8b618>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <319cf93c655c4e18b390c234e4f8b618>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976406
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // write\
    \ your code here\n        var diffs = new List<long>();\n        int j = 0;\n\
    \        for (int i = 0; i < game.Count; i++) {\n            if (guess[j] == game[i])\
    \ {\n                diffs.Add(0);\n                j++;\n            }\n    \
    \        else {\n                diffs.Add((game[i] - guess[j]));\n          \
    \      j++;\n            }\n        }\n        return diffs;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ccb16b6842943e09716c39bfb5ad20e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ccb16b6842943e09716c39bfb5ad20e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976406
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ result = new List<long>();\n        for (int i = 0; i < game.Count; i++) {\n\
    \            if (game[i] == guess[i]) {\n                result.Add(0);\n    \
    \        } else {\n                result.Add(game[i] - guess[i]);\n         \
    \   }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d4155ca9a0a4bb38d582b4bf6da292d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d4155ca9a0a4bb38d582b4bf6da292d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976406
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ result = new List<long>(game.Count);\n        foreach (var guess in guess) {\n\
    \            foreach (var score in game) {\n                if (Math.Abs(guess\
    \ - score) < result[i])\n                    result.Add(Math.Abs(guess - score));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1a8zj8pv.cs(23,22): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp1a8zj8pv.cs(25,54): error CS0103: The name ''i'' does not exist in the
    current context

    '
  timestamp: 1659976405
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        if (game.Count\
    \ != guess.Count) {\n            throw new InvalidOperationException(\"Lists must\
    \ contain the same number of elements to compare.\");\n        }\n        // YOUR\
    \ CODE HERE\n        List<long> result = new List<long>(game.Count);\n       \
    \ for (int i = 0; i < game.Count; i++) {\n            result[i] = game[i] - guess[i];\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].set_Item (System.Int32\
    \ index, T value) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x00043] in <adb8a305405542a4becb8579095e8e80>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <adb8a305405542a4becb8579095e8e80>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].set_Item (System.Int32\
    \ index, T value) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x00043] in <adb8a305405542a4becb8579095e8e80>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <adb8a305405542a4becb8579095e8e80>:0 \n"
  stdout: ''
  timestamp: 1659976406
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ result = new List<long>(game.Count);\n        for (int i = 0; i < game.Count;\
    \ i++) {\n            long diff = Math.Abs(game.ElementAt(i) - guess.ElementAt(i));\n\
    \            result.Add(diff);\n        }\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a06cb885b61b4761b007db9efdc5a071>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a06cb885b61b4761b007db9efdc5a071>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976406
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // TODO\n\
    \        if (game.Count != guess.Count) {\n            throw new ArgumentException(\"\
    The game and guess lists must have the same length\");\n        }\n\n        List<long>\
    \ differences = new List<long>();\n        int[] scores = new int[game.Count];\n\
    \n        int offset = 0;\n        int index = 0;\n\n        while ((index + offset)\
    \ < game.Count) {\n            scores[index] = (int) game[index + offset] - guess[index\
    \ + offset];\n            offset++;\n\n            if (scores[index] < 0) {\n\
    \                scores[index] = 0;\n                offset++;\n            }\n\
    \n            offset++;\n\n            if (offset > game.Count) {\n          \
    \      throw new ArgumentException(\"Too many difference values found\");\n  \
    \          }\n\n            differences.Add(scores[index]);\n\n            index++;\n\
    \        }\n\n        return differences;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ohvey8p.cs(34,29): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976406
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ scores = new List<long>(game.Count);\n        var correct = new List<long>(game.Count);\n\
    \        foreach (var item in game.Select((x, i) => new { item, i })) {\n    \
    \        scores.Add(item.item);\n            correct.Add(item.item);\n       \
    \ }\n        foreach (var item in guess.Select((x, i) => new { item, i })) {\n\
    \            scores.Add(item.item);\n            correct.Add(item.item);\n   \
    \     }\n        var differences = guess.Select(item => Math.Abs(item.item - scores[item.i]));\n\
    \        return correct.Select(item => Math.Min(differences.Min(), Math.Abs(item.item\
    \ - scores[item.i])))\n            .ToList();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr_ep4xi7.cs(24,58): error CS0103: The name ''item'' does not exist in
    the current context

    /tmp/tmpr_ep4xi7.cs(28,59): error CS0103: The name ''item'' does not exist in
    the current context

    /tmp/tmpr_ep4xi7.cs(32,62): error CS1061: ''long'' does not contain a definition
    for ''item'' and no accessible extension method ''item'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpr_ep4xi7.cs(32,81): error CS1061: ''long'' does not contain a definition
    for ''i'' and no accessible extension method ''i'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpr_ep4xi7.cs(33,81): error CS1061: ''long'' does not contain a definition
    for ''item'' and no accessible extension method ''item'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpr_ep4xi7.cs(33,100): error CS1061: ''long'' does not contain a definition
    for ''i'' and no accessible extension method ''i'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659976406
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        return\
    \ game.Zip(guess, (a, b) => a == b ? 0 : (a - b)).SelectMany(n => Enumerable.Repeat(0,\
    \ n)).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcs5lvblr.cs(22,101): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976406
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // Your\
    \ code goes here\n        var result = new List<long>(game.Count);\n        var\
    \ correctGuesses = game.Where(x => guess.Contains(x));\n\n        var correctScores\
    \ = game.Where(x => guess.Contains(x)).Select(x => (int)Math.Abs(x - guess.FirstOrDefault(x)));\n\
    \n        foreach (var guess in correctGuesses) {\n            result.Add(0);\n\
    \        }\n\n        foreach (var correctScore in correctScores) {\n        \
    \    result.Add(Math.Abs(correctScore - game.FirstOrDefault(x => x == correctScore)));\n\
    \        }\n\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvbx4sjht.cs(26,115): error CS1503: Argument 2: cannot convert from ''long''
    to ''System.Func<long, bool>''

    /tmp/tmpvbx4sjht.cs(28,22): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659976406
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        long\
    \ numMatches = 0;\n        for (int i = 0; i < game.Count; i++) {\n          \
    \  if (game[i] == guess[i]) {\n                numMatches++;\n            }\n\
    \        }\n        List<long> results = new List<long>();\n        for (int i\
    \ = 0; i < guess.Count; i++) {\n            if (game[i] == guess[i]) {\n     \
    \           results.Add(0);\n            } else {\n                results.Add(game[i]\
    \ - guess[i]);\n            }\n        }\n        double avg = results.Average();\n\
    \        double diff = Math.Abs(avg - game[guess.Count]);\n        for (int i\
    \ = 0; i < guess.Count; i++) {\n            if (game[i] == guess[i]) {\n     \
    \           results.Add(0);\n            } else {\n                results.Add(diff);\n\
    \            }\n        }\n        return results;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt1unago0.cs(42,29): error CS1503: Argument 1: cannot convert from ''double''
    to ''long''

    '
  timestamp: 1659976406
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // The\
    \ 'results' array will be used to store the differences of each guess from the\
    \ score\n        // The 'count' array will show how many times the guess was used\n\
    \        long[] results = new long[guess.Count];\n        long[] count = new long[guess.Count];\n\
    \n        // Go through each guess and increment its 'count' by 1\n        for\
    \ (int i = 0; i < guess.Count; i++) {\n            count[i] += 1;\n        }\n\
    \n        // Go through the game, if the game score matches any guess add the\
    \ guess score to the 'results' array\n        // otherwise subtract the difference\
    \ between the guess and the game score\n        for (int i = 0; i < game.Count;\
    \ i++) {\n            long gameScore = game[i];\n            for (int j = 0; j\
    \ < guess.Count; j++) {\n                long guessScore = guess[j];\n       \
    \         long diff = guessScore - gameScore;\n                long absolute =\
    \ Mathf.Abs(diff);\n\n                // When 'count' is 0, add the diff to the\
    \ 'results' array\n                if (count[j] == 0) {\n                    results[j]\
    \ = diff;\n                    // When 'count' is not 0, subtract it from the\
    \ 'results' array\n                } else {\n                    results[j] -=\
    \ diff;\n                }\n            }\n        }\n\n        // The 'results'\
    \ array will now contain the difference of each guess from the score\n       \
    \ // Now the tricky part - how do you know how much you need to add or subtract\
    \ from each guess?\n        // The trick is to use a 'for' loop to go through\
    \ the 'count' array and subtract or add each element depending on the count value\n\
    \        // The code below will do that.\n        List<long> newGuess = new List<long>();\n\
    \        for (int i = 0; i < results.Count; i++) {\n            int countNum =\
    \ count[i];\n            if (countNum > 0) {\n                newGuess.Add(results[i]);\n\
    \            } else {\n                long diff = -results[i];\n            \
    \    newGuess.Add(diff);\n            }\n        }\n\n        return newGuess;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp095qntx9.cs(39,33): error CS0103: The name ''Mathf'' does not exist in
    the current context

    /tmp/tmp095qntx9.cs(56,25): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''int'' and ''method group''

    /tmp/tmp095qntx9.cs(57,28): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976406
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // This\
    \ line is the only important one. It is the line that defines how much your guess\
    \ is off from what you believe the correct answer is.\n        var diff = game.Zip(guess,\
    \ (g, gs) => gs - g).Where(d => d != 0).ToList();\n\n        // The line below\
    \ is an example of the Linq syntax. LINQ was introduced in .NET 3.5, and requires\
    \ .NET 3.5 SP1 for it to work. If you want to use LINQ to query something other\
    \ than LINQ to Objects, you need to use one of the other LINQ methods available\
    \ through NuGet, or implement your own query syntax.\n        return game.Zip(guess,\
    \ (g, gs) => gs - g).Where(d => d != 0).ToList();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b213d82cb1c248b48bcc42ff99b965b7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b213d82cb1c248b48bcc42ff99b965b7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976407
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        long[]\
    \ scores = new long[game.Count];\n        for (int i = 0; i < game.Count; i++)\
    \ {\n            scores[i] = game[i] - guess[i];\n        }\n\n        // Sort\
    \ by score\n        Array.Sort(scores);\n\n        // Add 0 for incorrect guesses\n\
    \        int count = 0;\n        List<long> result = new List<long>(guess);\n\
    \        for (int i = 0; i < guess.Count; i++) {\n            if (scores[i] !=\
    \ 0) {\n                count++;\n                result.Insert(i, 0);\n     \
    \       } else {\n                result.RemoveAt(i);\n            }\n       \
    \ }\n\n        // Return the result list\n        return count;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe_kobdhz.cs(43,16): error CS0029: Cannot implicitly convert type ''int''
    to ''System.Collections.Generic.List<long>''

    '
  timestamp: 1659976406
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ result = new List<long>(game.Count);\n        foreach (var index in game.Keys.Except(guess.Keys))\
    \ {\n            result.Add(0);\n        }\n        foreach (var index in guess.Keys)\
    \ {\n            result.Add(Math.Abs(game[index] - guess[index]));\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpke8uvwsn.cs(23,36): error CS1061: ''List<long>'' does not contain a definition
    for ''Keys'' and no accessible extension method ''Keys'' accepting a first argument
    of type ''List<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpke8uvwsn.cs(23,54): error CS1061: ''List<long>'' does not contain a definition
    for ''Keys'' and no accessible extension method ''Keys'' accepting a first argument
    of type ''List<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpke8uvwsn.cs(26,37): error CS1061: ''List<long>'' does not contain a definition
    for ''Keys'' and no accessible extension method ''Keys'' accepting a first argument
    of type ''List<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659976406
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ result = new List<long>(game.Count);\n        var delta = Enumerable.Range(0,\
    \ game.Count).Select(i => guess[i] - game[i]).Where(d => d != 0).ToList();\n \
    \       if (delta.Count != game.Count) {\n            return new List<long>(delta);\n\
    \        }\n\n        foreach (var i in delta) {\n            if (i < 0) result[i]\
    \ += (long)Math.Abs(i);\n            else result[i] += (long)Math.Abs(i);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0lfml527.cs(29,31): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp0lfml527.cs(30,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976406
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // Your\
    \ code here...\n        Dictionary<long, int> scores = new Dictionary<long, int>();\n\
    \        List<long> results = new List<long>(game.Count);\n\n        foreach(long\
    \ g in game)\n            scores.Add(g, 0);\n        foreach(long g in guess)\n\
    \            scores.Add(g, 0);\n\n        for(int i = 0; i < game.Count; i++)\n\
    \            if(scores.ContainsKey(game[i]))\n            {\n                scores[i]\
    \ = scores[i] + 1;\n            }\n\n        foreach(KeyValuePair<long, int> entry\
    \ in scores)\n            if(entry.Value == 0)\n            {\n              \
    \  results.Add(0);\n            }\n            else\n            {\n         \
    \       results.Add(entry.Key - (int)Math.Abs(entry.Value));\n            }\n\n\
    \        return results.ToArray();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2txu6_10.cs(47,16): error CS0029: Cannot implicitly convert type ''long[]''
    to ''System.Collections.Generic.List<long>''

    '
  timestamp: 1659976406
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ result = new List<long>();\n        var guesses = new HashSet<long>(guess);\n\
    \        foreach (var x in guess) {\n            var diff = Math.Abs(x - game.Single(a\
    \ => a == x));\n            if (!guesses.Contains(x)) {\n                result.Add(diff);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ more than one matching element\n  at System.Linq.Enumerable.Single[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source, System.Func`2[T,TResult]\
    \ predicate) [0x0004a] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x0002c] in <f9d0b1c654cc49b58beb441676b814c1>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <f9d0b1c654cc49b58beb441676b814c1>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains more than one matching element\n  at System.Linq.Enumerable.Single[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source, System.Func`2[T,TResult]\
    \ predicate) [0x0004a] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x0002c] in <f9d0b1c654cc49b58beb441676b814c1>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <f9d0b1c654cc49b58beb441676b814c1>:0 \n"
  stdout: ''
  timestamp: 1659976407
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ result = new List<long>();\n        var correctCount = 0;\n        for (var\
    \ i = 0; i < game.Count; i++) {\n            var diff = game.ElementAt(i) - guess.ElementAt(i);\n\
    \            if (Math.Abs(diff) != 0) {\n                result.Add(Math.Abs(diff));\n\
    \                if (Math.Abs(diff) == 0)\n                    correctCount++;\n\
    \            }\n        }\n\n        if (correctCount == game.Count)\n       \
    \     return new List<long> { 0 };\n        else\n            return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8b8b859a31114a8192aeb2f6d4dd1251>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8b8b859a31114a8192aeb2f6d4dd1251>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976407
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ wrongGuesses = guess.Where(g => !game.Contains(g)).Select(g => (long)Math.Abs(g\
    \ - game.FirstOrDefault(a => a == g)));\n        var correctGuesses = guess.Where(g\
    \ => game.Contains(g)).Select(g => (long)Math.Abs(g - game.FirstOrDefault(a =>\
    \ a == g)));\n        return wrongGuesses.Concat(correctGuesses).ToList();\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ebbea5dca5534d91a832a6e54aee4334>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ebbea5dca5534d91a832a6e54aee4334>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976407
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        int\
    \ j = 0;\n        var answers = new List<long>();\n        for (int i = 0; i <\
    \ game.Count; i++) {\n            answers[j] = MathHelper.Abs(game[i] - guess[j]);\n\
    \            j++;\n        }\n        return answers;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5daf_zpo.cs(25,26): error CS0103: The name ''MathHelper'' does not exist
    in the current context

    '
  timestamp: 1659976406
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        if (game.Count\
    \ != guess.Count) return new List<long>(game.Count);\n        int diff = -1;\n\
    \        int guessIndex;\n        for (int i = 0, n = game.Count; i < n; i++)\
    \ {\n            guessIndex = game.IndexOf(guess[i]);\n            if (guessIndex\
    \ >= 0) {\n                diff = game.GetValue(guessIndex) - guess[i];\n    \
    \            break;\n            }\n        }\n        List<long> guessesAway\
    \ = new List<long>(game.Count);\n        for (int i = 0, n = game.Count; i < n;\
    \ i++) {\n            if (game.IndexOf(game[i]) >= 0) {\n                guessesAway.Add(game[i]);\n\
    \            }\n        }\n        return new List<long>(guessesAway);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjoos9s7y.cs(28,29): error CS1061: ''List<long>'' does not contain a definition
    for ''GetValue'' and no accessible extension method ''GetValue'' accepting a first
    argument of type ''List<long>'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659976406
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        if (game.Count\
    \ != guess.Count) {\n            throw new Exception(\"List sizes dont match\"\
    );\n        }\n        List<long> diffs = new List<long>();\n        long[] gameArray\
    \ = game.ToArray();\n        long[] guessArray = guess.ToArray();\n        long[]\
    \ diffArray = new long[gameArray.Length];\n        for (int i = 0; i < gameArray.Length;\
    \ i++) {\n            int bestMatch = -1;\n            long bestMatchScore = 0;\n\
    \            for (int j = 0; j < guessArray.Length; j++) {\n                if\
    \ (gameArray[i] == guessArray[j]) {\n                    if (bestMatchScore <\
    \ gameArray[i]) {\n                        bestMatch = j;\n                  \
    \      bestMatchScore = gameArray[i];\n                    }\n               \
    \ }\n            }\n            if (bestMatchScore == gameArray[i]) {\n      \
    \          diffs.Add(0);\n            }\n            else {\n                diffs.Add(gameArray[i]\
    \ - bestMatchScore);\n            }\n        }\n        return diffs;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <27aa5a4da5ff44768813e1b9861777e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <27aa5a4da5ff44768813e1b9861777e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976407
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // This\
    \ will be the return value.\n        List<long> result = new List<long>();\n \
    \       if (game.Count != guess.Count) {\n            throw new Exception(\"The\
    \ game and guess lists are not the same length.\");\n        }\n        // The\
    \ difference between each item in the lists is the absolute difference\n     \
    \   // between the guess and the score.\n        foreach (long score in game)\
    \ {\n            long difference = Math.Abs(guess - score);\n            if (difference\
    \ != 0) {\n                result.Add(difference);\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaizh_x0l.cs(30,40): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''List<long>'' and ''long''

    '
  timestamp: 1659976407
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        return\
    \ game.Zip(guess, (a,b) => Math.Abs(a-b)).Where(x => x >= 0).ToList();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <893f121a24e446f3a2b269c98e36ce95>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <893f121a24e446f3a2b269c98e36ce95>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976407
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ result = new List<long>(game.Count);\n\n        for (int i = 0; i < game.Count;\
    \ i++) {\n            bool correct = i == guess.FindIndex(x => x == game[i]);\n\
    \            long diff = correct? game[i] - guess[i]: 0;\n            result.Add(diff);\n\
    \        }\n\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ddbc90d697de48108e488eca3556b4f7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ddbc90d697de48108e488eca3556b4f7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976407
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // return\
    \ guess;\n        var list = new List<long>();\n        if (game.Count != guess.Count)\
    \ {\n            list.AddRange(guess.Take(game.Count - guess.Count));\n      \
    \      list.AddRange(game.Take(game.Count - guess.Count));\n            return\
    \ list;\n        }\n\n        var a = game.Distinct().ToList();\n        var b\
    \ = guess.Distinct().ToList();\n\n        var result = new List<long>();\n   \
    \     var c = a.Zip(b, (a, b) => a != b).Where(x => x).ToList();\n        if (c.Count\
    \ != 0) {\n            int i = 0;\n            while (i < c.Count) {\n       \
    \         var diff = c[i] - b[i];\n                result.Add(diff);\n       \
    \         i += 1;\n            }\n        }\n        return result;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprvftrsr0.cs(38,28): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''bool'' and ''long''

    '
  timestamp: 1659976407
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        if (game.Count\
    \ != guess.Count) {\n            throw new Exception(\"The lists must be the same\
    \ length\");\n        }\n        var match = new List<long>(game.Count);\n   \
    \     int correct = 0;\n        long score;\n        for (int i = 0; i < game.Count;\
    \ i++) {\n            score = game[i];\n            guess = guess;\n         \
    \   while (guess.Count > 0) {\n                guess = guess.RemoveAt(0);\n  \
    \              long guess = guess.First();\n                if (guess < score)\
    \ {\n                    score -= guess;\n                    match[i] = 0L;\n\
    \                } else if (guess > score) {\n                    score += guess;\n\
    \                    match[i] = 0L;\n                } else {\n              \
    \      match[i] = score;\n                    correct++;\n                   \
    \ break;\n                }\n            }\n        }\n        if (correct > 0)\
    \ {\n            List<long> total = new List<long>(match.Count);\n           \
    \ for (int i = 0; i < match.Count; i++) {\n                total[i] = match[i];\n\
    \            }\n            return total;\n        }\n        return new List<long>(match.Count);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx8b09ug5.cs(32,17): error CS0841: Cannot use local variable ''guess''
    before it is declared

    /tmp/tmpx8b09ug5.cs(32,25): error CS0841: Cannot use local variable ''guess''
    before it is declared

    /tmp/tmpx8b09ug5.cs(33,22): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpx8b09ug5.cs(33,36): error CS1061: ''long'' does not contain a definition
    for ''First'' and no accessible extension method ''First'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpx8b09ug5.cs(30,13): warning CS1717: Assignment made to same variable;
    did you mean to assign something else?

    '
  timestamp: 1659976407
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // Ok,\
    \ here we go. We'll need two lists, one holding the guesses, one holding the scores.\
    \ \n        // In our example above, the first list contains the guesses, the\
    \ second list \n        // the scores:\n        List<long> scores = new List<long>();\n\
    \        List<long> guesses = new List<long>();\n        // Now we take those\
    \ lists and loop over them and add the correct guesses and scores:\n        foreach\
    \ (var g in guess) {\n            var g = game.Single(a => a == g);\n        \
    \    guesses.Add(g);\n            scores.Add(game.Single(a => a == g).CompareTo(g));\n\
    \        }\n        // And finally we return the results list with the correct\
    \ values:\n        return scores.Zip(guesses, (g, a) => g.CompareTo(a)).ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_iw1njuo.cs(29,17): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp_iw1njuo.cs(29,43): error CS0841: Cannot use local variable ''g'' before
    it is declared

    /tmp/tmp_iw1njuo.cs(34,16): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<int>''
    to ''System.Collections.Generic.List<long>''

    '
  timestamp: 1659976407
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ result = new List<long>(game.Count);\n        long[] scores = new long[game.Count];\n\
    \        for (int i = 0; i < game.Count; i++) {\n            scores[i] = game[i];\n\
    \        }\n        for (int i = 0; i < guess.Count; i++) {\n            scores[i+game.Count]\
    \ = guess[i];\n        }\n        int correctCount = 0;\n        for (int i =\
    \ 0; i < game.Count; i++) {\n            if (scores[i] == guess[i]) {\n      \
    \          correctCount++;\n            }\n        }\n        for (int i = 0;\
    \ i < game.Count; i++) {\n            if (scores[i] == guess[i]) {\n         \
    \       result.Add(0);\n            }\n            else {\n                long\
    \ diff = Math.Abs(scores[i] - guess[i]);\n                if (diff != 0) {\n \
    \                   result.Add(diff);\n                }\n                else\
    \ {\n                    result.Add(0);\n                }\n            }\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.Compare (System.Collections.Generic.List`1[T]\
    \ game, System.Collections.Generic.List`1[T] guess) [0x00054] in <fc521b5c2b644b7ebef4401af130f1b8>:0\
    \ \n  at Problem.Main (System.String[] args) [0x0002d] in <fc521b5c2b644b7ebef4401af130f1b8>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index\
    \ was outside the bounds of the array.\n  at Problem.Compare (System.Collections.Generic.List`1[T]\
    \ game, System.Collections.Generic.List`1[T] guess) [0x00054] in <fc521b5c2b644b7ebef4401af130f1b8>:0\
    \ \n  at Problem.Main (System.String[] args) [0x0002d] in <fc521b5c2b644b7ebef4401af130f1b8>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976407
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ result = new List<long>(game.Count);\n        long currentDifference = 0;\n\
    \        int gameCount = 0;\n        for (int i = 0; i < game.Count; i++) {\n\
    \            // If the guess is correct then we are done here\n            if\
    \ (game[i] == guess[i]) {\n                gameCount++;\n            }\n     \
    \       else {\n                // Otherwise we need to compare the difference\
    \ between the guess and the score\n                currentDifference = game[i]\
    \ - guess[i];\n                if (currentDifference < 0) {\n                \
    \    currentDifference = currentDifference * (-1);\n                }\n      \
    \          // If the difference is 0 then we are done, if not then subtract it\
    \ and add the difference to the total\n                if (currentDifference ==\
    \ 0) {\n                    currentDifference = 0;\n                }\n      \
    \          else {\n                    result.Add(currentDifference);\n      \
    \          }\n            }\n        }\n        if (gameCount == 0) {\n      \
    \      result.Add(0);\n        }\n        if (gameCount > 1) {\n            while\
    \ (gameCount > 1) {\n                result.Add(currentDifference);\n        \
    \        gameCount = gameCount - 1;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa32241b99894c4b8692b6497c1e12e9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa32241b99894c4b8692b6497c1e12e9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976407
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // TODO:\
    \ Don't forget to catch exceptions :)\n        // TODO: Validate input parameters\n\
    \        long difference = 0;\n        List<long> result = new List<long>(game.Count);\n\
    \        foreach (long guess in guess) {\n            if (game.Contains(guess))\
    \ {\n                result.Add((long)0);\n            } else {\n            \
    \    difference = Math.Abs(guess - game[game.IndexOf(guess)]);\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsjx25w7r.cs(26,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659976407
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ result = new List<long>(game.Count);\n        using (Stopwatch sw = Stopwatch.StartNew())\
    \ {\n            foreach (long score in game) {\n                bool guessed\
    \ = guess.Exists(g => g == score);\n                long dif = 0;\n          \
    \      if (guessed) {\n                    dif = 0;\n                } else {\n\
    \                    dif = Math.Abs(score - guess.Single(g => g == score));\n\
    \                }\n                result.Add(dif);\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb1wb6zwx.cs(23,16): error CS1674: ''Stopwatch'': type used in a using
    statement must be implicitly convertible to ''System.IDisposable''.

    '
  timestamp: 1659976407
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ list = new List<long>();\n        var correctCount = game.Count * guess.Count;\n\
    \        var scores = new long[guess.Count];\n        for (var j = 0; j < guess.Count;\
    \ ++j) {\n            var score = -MathF.Abs(game.[j] - guess.[j]);\n        \
    \    scores[j] = score;\n            list.Add(score);\n        }\n        var\
    \ sum = 0;\n        for (var j = 0; j < list.Count; ++j) {\n            var diff\
    \ = list[j] - sum;\n            sum += diff < 0 ? -diff : diff;\n            if\
    \ (sum > correctCount) {\n                return new List<long>();\n         \
    \   }\n        }\n        return list;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzosrbez1.cs(26,41): error CS1001: Identifier expected

    /tmp/tmpzosrbez1.cs(26,53): error CS1001: Identifier expected

    '
  timestamp: 1659976407
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ answers = new List<long>(guess);\n        long difference;\n        for(long\
    \ i = 0; i < game.Count; i++) {\n            difference = Math.Abs(game[i] - guess[i]);\n\
    \            if(!answers.Contains(difference)) {\n                answers.Add(difference);\n\
    \            }\n        }\n        return answers;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5n6rhk9z.cs(25,40): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp5n6rhk9z.cs(25,51): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976407
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        long\
    \ score = 0;\n        int numGuesses = guess.Count;\n        int numScores = game.Count;\n\
    \        List<long> result = new List<long>();\n        // the tricky part: each\
    \ possible comparison is performed by each possible guessed score\n        //\
    \ so as soon as any guess is wrong, we can stop the rest of the comparison loops\n\
    \        for (int scoreIndex = 0; scoreIndex < numScores; scoreIndex++) {\n  \
    \          for (int guessIndex = 0; guessIndex < numGuesses; guessIndex++) {\n\
    \                long guessedScore = game[scoreIndex];\n                long guessedGuess\
    \ = guess[guessIndex];\n                if (guessedScore == guessedGuess) {\n\
    \                    // the two scores are equal, this is easy, just add 0 to\
    \ result\n                    result.Add(0);\n                } else {\n     \
    \               // if they are not equal, find the minimum absolute difference\
    \ between them\n                    // and add that to the result\n          \
    \          long absoluteDifference = MathAbs(guessedScore - guessedGuess);\n \
    \                   result.Add(absoluteDifference);\n                }\n     \
    \       }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmbasuru9.cs(38,47): error CS0103: The name ''MathAbs'' does not exist
    in the current context

    /tmp/tmpmbasuru9.cs(22,14): warning CS0219: The variable ''score'' is assigned
    but its value is never used

    '
  timestamp: 1659976407
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ diff = new List<long>();\n        long difference;\n        for (int i = 0;\
    \ i < guess.Count; i++) {\n            difference = Math.Abs(guess.ElementAt(i)\
    \ - game.ElementAt(i));\n            diff.Add(difference);\n        }\n      \
    \  return diff;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9759677f36b44aaba032749e8a99c0a8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9759677f36b44aaba032749e8a99c0a8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        if (guess.Count\
    \ != game.Count) throw new ArgumentOutOfRangeException(\"Guess list does not contain\
    \ all game scores from game\");\n        if (game.Count > guess.Count) throw new\
    \ ArgumentOutOfRangeException(\"Guess list does not contain all game scores from\
    \ game\");\n        var correct = game.Select(x => x == guess[game.IndexOf(x))];\n\
    \        return correct.Zip(game, (g, gs) => gs != g ? g - gs : (long)0);\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8r_yibfh.cs(24,66): error CS1003: Syntax error, '']'' expected

    /tmp/tmp8r_yibfh.cs(24,67): error CS1026: ) expected

    '
  timestamp: 1659976407
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ diff = new List<long>();\n        foreach (var guess in guess) {\n         \
    \   diff.Add(Math.Abs(guess - game.ElementAtOrDefault(game)));\n        }\n  \
    \      return diff;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbcaxu6g7.cs(23,22): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpbcaxu6g7.cs(24,63): error CS1503: Argument 2: cannot convert from ''System.Collections.Generic.List<long>''
    to ''int''

    '
  timestamp: 1659976407
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // Your\
    \ code goes here\n        int score = game.Sum(x => x);\n        int diff = guess.Sum(x\
    \ => x - score);\n        List<long> result = new List<long>(guess.Count);\n \
    \       result.ForEach(x => { if (diff > 0) result.Add(-diff); else result.Add(diff);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9gltwust.cs(23,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp9gltwust.cs(24,20): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976407
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ result = new List<long>(game.Count);\n        for (int i = 0; i < game.Count;\
    \ i++) {\n            long diff = Math.Abs(game[i] - guess[i]);\n            if\
    \ (!result.Contains(diff)) {\n                result.Add(diff);\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cc1cbff4d55e4535a1a1337fd4448ea8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cc1cbff4d55e4535a1a1337fd4448ea8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        int\
    \ numOfGuesses = guess.Count;\n\n        // If there are no guesses then just\
    \ return a list of zeros (to match the length)\n        if (numOfGuesses == 0)\
    \ { return new List<long>(new long[]{0}); }\n\n        // Get all the matching\
    \ indexes from both lists\n        var matchIndices = game.FindAll(x => guess.Exists(y\
    \ => x == y));\n\n        // Get all the scores corresponding to those indexes\n\
    \        var scores = new List<long>(matchIndices.Count);\n        foreach (int\
    \ matchIndex in matchIndices) {\n            scores.Add(game[matchIndex]);\n \
    \       }\n\n        // If there are no scores then return a list of zeros to\
    \ match the length\n        if (scores.Count == 0) { return new List<long>(new\
    \ long[]{0}); }\n\n        // Otherwise calculate the differences for each of\
    \ the guesses\n        var diffs = new List<long>(numOfGuesses);\n        for\
    \ (int i = 0; i < numOfGuesses; ++i) {\n            diffs.Add(Math.Abs(guess[i]\
    \ - scores[i]));\n        }\n\n        // Return the list of differences\n   \
    \     return diffs;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x000d2] in <5240fae20a094c68ad15542b52dd949b>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <5240fae20a094c68ad15542b52dd949b>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x000d2] in <5240fae20a094c68ad15542b52dd949b>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <5240fae20a094c68ad15542b52dd949b>:0 \n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // The\
    \ length of the guess list is the number of guesses.\n        // We could have\
    \ easily returned the index to tell how off\n        // each guess was, but this\
    \ was quicker to just do it.\n        // The key here is that the list of guesses\
    \ matches the list of scores\n        // exactly in the same order.\n\n      \
    \  var gameLen = game.Count;\n        if (game.Count != guess.Count) {\n     \
    \       throw new ArgumentException(\"The two lists need to be the same length.\"\
    );\n        }\n\n        // Sort the lists\n        game.Sort();\n        guess.Sort();\n\
    \n        // Now the lists are in the same order.\n        var result = new List<long>(guess);\n\
    \n        bool guessedCorrectly = true;\n        int lastGuess = 0;\n        for\
    \ (int i = 0; i < game.Count; i++) {\n            int thisGuess = i;\n       \
    \     if (i < gameLen && game[i] == game[thisGuess]) {\n                // If\
    \ this is a match on the first index and it's the same\n                // as\
    \ the guess then the difference is zero.\n                if (lastGuess == thisGuess)\
    \ {\n                    guessedCorrectly = false;\n                }\n      \
    \          lastGuess = thisGuess;\n            } else {\n                // We\
    \ need to look at a lower number in the list, so make sure\n                //\
    \ to look one more than the current index.\n                for (int j = i + 1;\
    \ j < gameLen; j++) {\n                    if (game[j] != game[j]) {\n       \
    \                 lastGuess = thisGuess;\n                        guessedCorrectly\
    \ = false;\n                        break;\n                    }\n          \
    \      }\n            }\n        }\n        if (guessedCorrectly) {\n        \
    \    result.Add((long)0);\n        } else {\n            // The guesses did not\
    \ match on the first index\n            // so the last index was the best one.\n\
    \            result.Add((long)gameLen - lastGuess + 1);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4171da1eacf403bae34416aad693917>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4171da1eacf403bae34416aad693917>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976408
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // YOUR\
    \ CODE HERE\n        List<long> result = new List<long>(guess.Count);\n      \
    \  for (int i = 0; i < guess.Count; i++) {\n            long difference = Math.Abs(game[i]\
    \ - guess[i]);\n            if (difference > 0) {\n                result.Add(difference);\n\
    \            } else {\n                result.Add(0);\n            }\n       \
    \ }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <156982951c2141c08a25f3bf9ae61043>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <156982951c2141c08a25f3bf9ae61043>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976408
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // Your\
    \ code here\n        var result = game.Zip(guess, (x, y) => x - y).Where(x =>\
    \ x < 0).Select(x => x + game.Sum() - guess.Sum()).ToList();\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <652fa036992e42728c14bfa986732139>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <652fa036992e42728c14bfa986732139>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ guesses = new List<long>();\n        foreach(long g in guess) {\n          \
    \  guesses.Add(Math.Abs(g - game[guess.IndexOf(g)].Value);\n        }\n      \
    \  return guesses;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp43o_ghqs.cs(24,67): error CS1026: ) expected

    '
  timestamp: 1659976407
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ diff = new List<long>();\n\n        // I see a lot of people are confused about\
    \ the difference between comparing \n        // the numbers with == and Equals.\
    \ I strongly suggest you read this article first:\n        // http://stackoverflow.com/questions/53107/whats-the-difference-between-equals-and\n\
    \        bool are_equal = (game.Count == guess.Count);\n\n        // The reason\
    \ I do this is to allow for the possibility that one list is longer than the other.\
    \ \n        // This would happen if a user decided to keep guessing until they\
    \ got it right. \n        // If this happens, I want the guesses to be appended\
    \ onto the end of the list.\n        if (game.Count > guess.Count) {\n       \
    \     diff = game.Take(game.Count - guess.Count).ToList();\n        }\n\n    \
    \    // If the first list is the same length as the second list, then I know the\
    \ results\n        // were the same. The reason I check this is that if the first\
    \ list is the same size as the second list,\n        // then we know that the\
    \ results are the same.\n        // This allows me to keep guessing until the\
    \ user gets it right.\n        // If we didn't do this, we could potentially have\
    \ a situation where we started with \n        // 2 guesses, but it took us 2 guesses\
    \ to get an answer. \n        // If this happens, I want to start guessing at\
    \ the last index of one list \n        // and append on the first index of the\
    \ other.\n        if (game.Count == guess.Count) {\n            for (int i = 0;\
    \ i < game.Count; i++) {\n                if (game[i] != guess[i]) {\n       \
    \             are_equal = false;\n                    diff = diff.Concat(guess.Skip(i)).ToList();\n\
    \                    break;\n                }\n            }\n        }\n\n \
    \       // If the first list isn't the same length as the second list, I know\
    \ the user made a mistake.\n        // The reason I check this is that if the\
    \ user made a mistake, then it means that the numbers were \n        // not equal,\
    \ and I therefore want to append both lists.\n        if (!are_equal) {\n    \
    \        diff = diff.Concat(game).Concat(guess).ToList();\n        }\n\n     \
    \   return diff;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6671e0f91285434ca5cf797a541e0739>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6671e0f91285434ca5cf797a541e0739>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        Dictionary<long,\
    \ bool> scores = new Dictionary<long, bool>();\n        int index = 0;\n     \
    \   foreach (var score in guess) {\n            if (!scores.ContainsKey(score))\
    \ {\n                scores.Add(score, false);\n            }\n            scores[index++]\
    \ = scores[index - 1];\n        }\n        List<long> result = new List<long>();\n\
    \        bool wrong = false;\n        foreach (var score in game) {\n        \
    \    if (!scores.ContainsKey(score)) {\n                wrong = true;\n      \
    \          break;\n            }\n            scores[index--] = wrong;\n     \
    \   }\n        result.AddRange(new List<long>() { 0 });\n        foreach (var\
    \ pair in scores) {\n            if (pair.Value == wrong) {\n                result.Add(pair.Key);\n\
    \            }\n            else {\n                result.Add(Math.Abs(pair.Key\
    \ - pair.Value));\n            }\n        }\n        return result;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphsr1m09a.cs(45,37): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''long'' and ''bool''

    '
  timestamp: 1659976408
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        return\
    \ game.Select(x => Math.Abs(x - guess[x])).ToList();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfnwcf_2c.cs(22,52): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976408
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ results = new List<long>();\n        foreach(var match in game.Zip(guess, (x,\
    \ y) => new { x, y }))\n        {\n            if(match.x == match.y) {\n    \
    \            results.Add(0);\n            } else {\n                results.Add(match.x\
    \ - match.y);\n            }\n        }\n        return results;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cf9ac74994994523a6361a1214e15cd9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cf9ac74994994523a6361a1214e15cd9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        Debug.Assert(game.Count\
    \ > 0 && guess.Count > 0);\n        long guessMax = guess.Max();\n        long\
    \ scoreMax = game.Max();\n        var result = new List<long>(game.Count);\n \
    \       foreach (var index in range(0, game.Count)) {\n            var newScore\
    \ = game[index];\n            var newGuess = guess[index];\n            var scoreDiff\
    \ = newScore - newGuess;\n            var scoreDiffAbs = scoreDiff;\n        \
    \    if (newScore != scoreMax) scoreDiffAbs = Math.Abs(scoreDiff);\n         \
    \   var guessDiff = newGuess - guessMax;\n            var guessDiffAbs = guessDiff;\n\
    \            if (newGuess != guessMax) guessDiffAbs = Math.Abs(guessDiff);\n \
    \           var scoreDiffPercent = (scoreDiff / scoreMax) * 100;\n           \
    \ var guessDiffPercent = (guessDiff / guessMax) * 100;\n            result.Add(Math.Max(scoreDiffPercent,\
    \ guessDiffPercent));\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdsd7qsrx.cs(26,31): error CS0103: The name ''range'' does not exist in
    the current context

    '
  timestamp: 1659976408
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        if (game.Count\
    \ != guess.Count)\n            throw new ArgumentException(\"Game and guess must\
    \ have the same length\");\n        return game.Zip(guess, (a, b) => a - b)\n\
    \            .Select(a => (a < 0) ? a : Math.Abs(a))\n            .ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e1eb9aa9aacc423b8b29c9bd3695a992>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e1eb9aa9aacc423b8b29c9bd3695a992>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // If\
    \ both lists are empty, return an empty list.\n        if (game.Count == 0 &&\
    \ guess.Count == 0) return new List<long>();\n        // If either list has length\
    \ 1, the other is of length 1, \n        // and the one list is greater than the\
    \ other, the result is zero.\n        if (game.Count == 1 || guess.Count == 1\
    \ || game.Count > guess.Count) \n            return new List<long>();\n      \
    \  // If there are multiple items in one list, and in the other, compare them\
    \ in order of length.\n        var common = game.Take(game.Count - guess.Count).Intersect(guess.Take(guess.Count\
    \ - game.Count)).ToList();\n        // Iterate through each common item, and compare\
    \ it to the other list.\n        List<long> result = new List<long>();\n     \
    \   foreach (var c in common) {\n            long diff = Math.Abs(c - game[game.Count\
    \ - guess.Count]);\n            int idx = result.Count;\n            result.Add(diff);\n\
    \            while (true) {\n                // If we've already compared all\
    \ common items and have nothing left to compare,\n                // the result\
    \ is now complete.\n                if (result.Count == game.Count) return result;\n\
    \                // Iterate through each guess, comparing the current common item\
    \ with each one. \n                // When a guess is compared to, the difference\
    \ is added to the list at the right index.\n                int gIdx = guess.Count\
    \ - result.Count;\n                foreach (var g in guess) {\n              \
    \      if (g == c) continue;\n                    long guessedDiff = Math.Abs(g\
    \ - game[gIdx]);\n                    int idx = result.Count - gIdx;\n       \
    \             result.Add(guessedDiff);\n                }\n                gIdx++;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf9j32jtu.cs(46,25): error CS0136: A local or parameter named ''idx'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659976408
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        long\
    \ matchCount = game.Count;\n        long playersScore = 0;\n        List<long>\
    \ result = new List<long>(game);\n        List<long> guessesPlayed = new List<long>(guess);\n\
    \        for (int i = 0; i < matchCount; i++) {\n            long guessPlayed\
    \ = guessesPlayed[i];\n            long playersScore = game[i];\n            if\
    \ (playersScore == guessPlayed) {\n                result.RemoveAt(i);\n     \
    \           i--;\n            }\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppf_0h5dq.cs(28,18): error CS0136: A local or parameter named ''playersScore''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmppf_0h5dq.cs(23,14): warning CS0219: The variable ''playersScore'' is assigned
    but its value is never used

    '
  timestamp: 1659976408
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        int\
    \ count = 0;\n        List<long> errors = new List<long>();\n        foreach (var\
    \ g in guess) {\n            try {\n                double gVal = Math.Abs(g -\
    \ game.ElementAt(count));\n                if (count != 0) {\n               \
    \     double sgVal = Math.Abs(guess - game.ElementAt(count));\n              \
    \      if (sgVal < gVal) {\n                        errors.Add(g);\n         \
    \           }\n                }\n                else {\n                   \
    \ errors.Add(g);\n                }\n                count++;\n            }\n\
    \            catch (Exception ex) {\n                errors.Add(g);\n        \
    \        count++;\n            }\n        }\n        return errors;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuvgj5txq.cs(28,45): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''List<long>'' and ''long''

    /tmp/tmpuvgj5txq.cs(38,30): warning CS0168: The variable ''ex'' is declared but
    never used

    '
  timestamp: 1659976408
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        long[]\
    \ diff = game.Zip(guess.Zip(\n            (g, gs) => Math.Abs(g - gs))\n     \
    \       (g1, g2) => new { g1, g2 })\n            .OrderBy(x => x.g1)\n       \
    \     .ThenBy(x => x.g2)\n            .Select(x => x.g1)\n            .ToArray()\n\
    \        ).ToArray();\n        List<long> result = new List<long>(game.Length);\n\
    \        for (int i = 0; i < game.Length; i++) {\n            result.Add(diff[i]\
    \ < 0 ? diff[i] : 0);\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpybkoy4g3.cs(24,22): error CS1003: Syntax error, '','' expected

    /tmp/tmpybkoy4g3.cs(24,25): error CS1003: Syntax error, '','' expected

    /tmp/tmpybkoy4g3.cs(28,23): error CS1002: ; expected

    /tmp/tmpybkoy4g3.cs(28,23): error CS1513: } expected

    '
  timestamp: 1659976408
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ result = game.Zip(guess, (a, b) => new {a, b })\n            .Where(x => x.a\
    \ == x.b).ToList();\n        return result.Select(x => x.a == x.b ? 0 : Math.Abs(x.a\
    \ - x.b)).ToList();\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1ad807019206445f8b4d1d1bf85e3e39>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1ad807019206445f8b4d1d1bf85e3e39>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        if (game.Count\
    \ != guess.Count) {\n            throw new Exception(\"The lists are of different\
    \ lengths\");\n        }\n        int len = game.Count;\n        List<long> diff\
    \ = new List<long>(len);\n        for (int i = 0; i < len; ++i) {\n          \
    \  diff[i] = MathNet.Numerics.LinearAlgebra.Vectors.Abs(guess[i] - game[i]);\n\
    \        }\n        return diff;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5oytveea.cs(28,23): error CS0103: The name ''MathNet'' does not exist
    in the current context

    '
  timestamp: 1659976408
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ guessesByScore = guess.GroupBy(a => a).ToList();\n        List<long> scoresByGuess\
    \ = game.GroupBy(a => a).ToList();\n        List<long> diffs = new List<long>();\n\
    \        foreach (var guess in guessesByScore) {\n            long score = scoresByGuess[guess.Key];\n\
    \            long diff = Math.Abs(guess - score);\n            diffs.Add(diff);\n\
    \        }\n        return diffs;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd3k45tjc.cs(22,37): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<System.Linq.IGrouping<long,
    long>>'' to ''System.Collections.Generic.List<long>''

    /tmp/tmpd3k45tjc.cs(23,36): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<System.Linq.IGrouping<long,
    long>>'' to ''System.Collections.Generic.List<long>''

    /tmp/tmpd3k45tjc.cs(25,22): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpd3k45tjc.cs(26,46): error CS1061: ''long'' does not contain a definition
    for ''Key'' and no accessible extension method ''Key'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659976408
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        int\
    \ matchLength = game.Count;\n        List<long> result = new List<long>(matchLength);\n\
    \        for (int i = 0; i < matchLength; ++i) {\n            // If any scores\
    \ match, return their relative difference\n            if (game[i] == guess[i])\
    \ {\n                result[i] = 0;\n            } else {\n                result[i]\
    \ = Math.Abs(game[i] - guess[i]);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].set_Item (System.Int32\
    \ index, T value) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x00029] in <79640321dab141e1ae9605a64a58253b>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <79640321dab141e1ae9605a64a58253b>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].set_Item (System.Int32\
    \ index, T value) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x00029] in <79640321dab141e1ae9605a64a58253b>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <79640321dab141e1ae9605a64a58253b>:0 \n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ result = new List<long>(game.Count);\n        for (int i = 0; i < game.Count;\
    \ ++i) {\n            // if the guessed number is in the list of scores, add the\
    \ relative difference to the result\n            if (guess.Contains(game[i]))\
    \ {\n                result[i] = game.Count - guess.IndexOf(game[i]) - 1;\n  \
    \          }\n            else {\n                // if there is no score in the\
    \ list of guesses, use the absolute difference\n                result[i] = Math.Abs(game[i]\
    \ - guess[i]);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].set_Item (System.Int32\
    \ index, T value) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x00039] in <3cc55b5f35334176866076bbfa2eada9>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <3cc55b5f35334176866076bbfa2eada9>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].set_Item (System.Int32\
    \ index, T value) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x00039] in <3cc55b5f35334176866076bbfa2eada9>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <3cc55b5f35334176866076bbfa2eada9>:0 \n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ result = game.ToList();\n        List<long> diffs = new List<long>();\n\n  \
    \      foreach(long i in guess) {\n            diffs.Add((long) Math.Abs(i - game[guess.IndexOf(i)]));\n\
    \        }\n\n        return diffs;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a798afab252b48879c1514cce3be2f08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a798afab252b48879c1514cce3be2f08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // TODO:\
    \ Write your code here\n        // If the games lists have a different number\
    \ of elements then the guesses lists need to have\n        // the same number\
    \ of elements, but the guesses lists may have fewer elements if one list is shorter\n\
    \        if (game.Count != guess.Count) {\n            if (game.Count > guess.Count)\
    \ {\n                // if the game list is longer, then we fill the guess list\
    \ with the appropriate number of elements\n                guess = new List<long>(guess.Count);\n\
    \                for (int i = 0; i < game.Count; i++) {\n                    guess.Add(game[i]);\n\
    \                }\n            }\n            else {\n                // if the\
    \ guesses list is longer, then we fill the game list with the appropriate number\
    \ of elements\n                game = new List<long>(game.Count);\n          \
    \      for (int i = 0; i < guess.Count; i++) {\n                    game.Add(guess[i]);\n\
    \                }\n            }\n        }\n        // A simple and quick way\
    \ to compare the guesses list to their corresponding game list is to convert the\
    \ games list to an array and \n        // then use a for loop to compare the guesses\
    \ list to the corresponding game list in the array\n        // The only problem\
    \ with this approach is that the guess lists are very long, and they may be\n\
    \        // fairly sparse. So there may be a faster way to compare the game lists\
    \ against their corresponding guesses list \n        // by converting them to\
    \ some kind of binary number or something.\n        // This is where your algorithm\
    \ will come in.\n        List<long> compareList = new List<long>();\n        List<long>\
    \ gameArray = game.ToArray();\n        for (int i = 0; i < guess.Count; i++) {\n\
    \            compareList.Add(gameArray[i] - guess[i]);\n        }\n        return\
    \ compareList;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzhrvkfzi.cs(48,32): error CS0029: Cannot implicitly convert type ''long[]''
    to ''System.Collections.Generic.List<long>''

    '
  timestamp: 1659976408
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ result = game.Select(a => new {\n            Game = a, \n            Guess =\
    \ guess.Single(b => b == a)\n        }).ToList();\n        return result.Select(a\
    \ => a.Guess - a.Game).ToList();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ more than one matching element\n  at System.Linq.Enumerable.Single[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source, System.Func`2[T,TResult]\
    \ predicate) [0x0004a] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem+<>c__DisplayClass0_0.<Compare>b__0\
    \ (System.Int64 a) [0x0000d] in <9720455e8ea54cb48905b724dea86abc>:0 \n  at System.Linq.Enumerable+SelectListIterator`2[TSource,TResult].ToList\
    \ () [0x0002a] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToList[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Compare (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x00020] in <9720455e8ea54cb48905b724dea86abc>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <9720455e8ea54cb48905b724dea86abc>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains more than one matching element\n  at System.Linq.Enumerable.Single[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source, System.Func`2[T,TResult]\
    \ predicate) [0x0004a] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem+<>c__DisplayClass0_0.<Compare>b__0\
    \ (System.Int64 a) [0x0000d] in <9720455e8ea54cb48905b724dea86abc>:0 \n  at System.Linq.Enumerable+SelectListIterator`2[TSource,TResult].ToList\
    \ () [0x0002a] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToList[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Compare (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x00020] in <9720455e8ea54cb48905b724dea86abc>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <9720455e8ea54cb48905b724dea86abc>:0 \n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ differences = new List<long>();\n        int guesses = guess.Count;\n      \
    \  int scoreCount = game.Count;\n        int correct = 0;\n        int difference\
    \ = 0;\n        bool first = true;\n        bool incorrect = false;\n        long\
    \ previousScore = game[0];\n        foreach (long guess in guess) {\n        \
    \    difference = guess - game[0];\n            if (difference != 0 && difference\
    \ < 0L && !incorrect) {\n                if (first) {\n                    incorrect\
    \ = true;\n                } else {\n                    differences.Add(difference);\n\
    \                }\n            } else if (difference == 0 && difference > 0L\
    \ && !incorrect) {\n                if (first) {\n                    incorrect\
    \ = true;\n                } else {\n                    differences.Add(difference);\n\
    \                }\n            } else if (difference < 0 && difference > 0L &&\
    \ !incorrect) {\n                if (first) {\n                    incorrect =\
    \ true;\n                } else {\n                    differences.Add(difference);\n\
    \                }\n            } else if (difference == 0L && difference < 0L\
    \ && !incorrect) {\n                if (first) {\n                    incorrect\
    \ = true;\n                } else {\n                    differences.Add(difference);\n\
    \                }\n            } else if (difference > 0 && difference < 0L &&\
    \ !incorrect) {\n                if (first) {\n                    incorrect =\
    \ true;\n                } else {\n                    differences.Add(difference);\n\
    \                }\n            } else {\n                incorrect = false;\n\
    \            }\n            first = false;\n            guesses--;\n        }\n\
    \        if (incorrect) {\n            return differences;\n        }\n      \
    \  if (guesses == 0) {\n            differences.Add(0);\n        }\n        var\
    \ guesse = guess.First();\n        var correctScore = previousScore;\n       \
    \ var correctGuess = game[0];\n        var correctDifference = difference - correctGuess;\n\
    \        for (int i = 0; i < guesses; i++) {\n            var newDifference =\
    \ correctDifference + differences[i];\n            if (newDifference > scoreCount\
    \ * 3L || newDifference < 0L || newDifference != difference) {\n             \
    \   differences.Add(0);\n            } else if (newDifference != difference) {\n\
    \                differences.Add(newDifference);\n            }\n            previousScore\
    \ = game[i];\n            correctScore = correctScore + game[i];\n           \
    \ correctGuess = game[0];\n            correctDifference = difference - correctGuess;\n\
    \        }\n        return differences;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqicre8h8.cs(30,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpqicre8h8.cs(31,26): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpqicre8h8.cs(25,13): warning CS0219: The variable ''correct'' is assigned
    but its value is never used

    '
  timestamp: 1659976409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        int\
    \ guessesDone = 0;\n        int maxGuesses = game.Count * guess.Count;\n     \
    \   List<long> correctGuess = new List<long>(guess);\n        List<long> wrongGuess\
    \ = new List<long>(guess);\n        foreach (int i = 0; i < game.Count; i++) {\n\
    \            int guessesRemaining = maxGuesses;\n            int correctGuessesRemaining\
    \ = maxGuesses;\n            int correctGuessesLeft = 0;\n            int wrongGuessesLeft\
    \ = 0;\n            while (guessesRemaining > 0) {\n                guessesRemaining\
    \ -= 1;\n                int guessIndex = i * guess.Count + guessesRemaining;\n\
    \                long guessScore = game[guessIndex];\n                long guessGuess\
    \ = guess[guessIndex];\n                int guessIndex = i * guess.Count + guessesRemaining;\n\
    \                if (guessScore == guessGuess) {\n                    correctGuesses\
    \ += 1;\n                    correctGuessesLeft += 1;\n                } else\
    \ {\n                    wrongGuesses += 1;\n                    wrongGuessesLeft\
    \ += 1;\n                }\n            }\n            if (correctGuessesLeft\
    \ == 0) {\n                correctGuesses.Add(0L);\n            }\n          \
    \  if (wrongGuessesLeft == 0) {\n                wrongGuesses.Add(0L);\n     \
    \       }\n        }\n        return wrongGuesses;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn_vjlbj3.cs(26,24): error CS1515: ''in'' expected

    /tmp/tmpn_vjlbj3.cs(26,24): error CS1525: Invalid expression term ''=''

    /tmp/tmpn_vjlbj3.cs(26,27): error CS1026: ) expected

    /tmp/tmpn_vjlbj3.cs(26,48): error CS1002: ; expected

    /tmp/tmpn_vjlbj3.cs(26,48): error CS1513: } expected

    '
  timestamp: 1659976408
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // your\
    \ code\n        var results = new List<long>(game.Count);\n        for (int i\
    \ = 0; i < game.Count; i++) {\n            results.Add(Math.Abs(game[i] - guess[i]));\n\
    \        }\n        return results;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eee8fe7224b84f12938989a3374892b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eee8fe7224b84f12938989a3374892b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        return\
    \ game.Zip(guess, (a, b) => new {Score = a, Guess = b}).\n            Where(z\
    \ => z.Score == z.Guess).\n            Select(z => (z.Score != z.Guess) ? Math.Abs(z.Score\
    \ - z.Guess) : 0).ToList();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e3411b682784451a8725e9a8dc680365>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e3411b682784451a8725e9a8dc680365>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        if (game.Count\
    \ != guess.Count) {\n            throw new ArgumentException(\"game/guess is not\
    \ of equal length.\");\n        }\n        if (game.Count == 0) {\n          \
    \  return new List<long>(guess);\n        }\n        Dictionary<long, List<long>>\
    \ dictionary = new Dictionary<long, List<long>>();\n        // The goal of this\
    \ inner loop was to compare the guess with the scores\n        // as fast as possible.\
    \ Since the dictionary doesn't contain a key\n        // for the first element,\
    \ we'll add the guess to it first before we \n        // start the loop. The dictionary\
    \ key for each score will be the \n        // index in the scores array.\n   \
    \     dictionary.Add(0, guess);\n        long scoreCount = game.Count;\n     \
    \   int maxCount = scoreCount;\n        long guessIndex = game.Count - 1;\n  \
    \      bool foundMatch = false;\n        // This loop finds the next guess that\
    \ is wrong\n        // and then compares it against the score to see how far off\n\
    \        // the guess and the score are.\n        while (true) {\n           \
    \ if (foundMatch) {\n                break;\n            }\n            List<long>\
    \ guessList;\n            if (!dictionary.TryGetValue(guessIndex, out guessList))\
    \ {\n                // The guess is out of bounds, i.e. there is no guess\n \
    \               // for this game. \n                throw new ArgumentException(\"\
    guess is out of bounds.\");\n            }\n            if (guessIndex == 0) {\n\
    \                foundMatch = true;\n                break;\n            }\n \
    \           long score = game[guessIndex];\n            int count = 0;\n     \
    \       // This loop compares the current guess with the score and \n        \
    \    // finds the next guess that is wrong compared to the score.\n          \
    \  for (long guessValue in guessList) {\n                if (score == guessValue)\
    \ {\n                    continue;\n                }\n                count++;\n\
    \                long guessGuessed = game[guessIndex - count];\n             \
    \   if (score > guessValue) {\n                    count++;\n                \
    \    long guessGuessed2 = game[guessIndex - count];\n                    long\
    \ diff = -(guessGuessed - guessValue);\n                    if (diff == 0) {\n\
    \                        diff = (guessGuessed2 - guessValue);\n              \
    \          count++;\n                    }\n                    diff = -diff;\n\
    \                }\n                else {\n                    diff = -(guessValue\
    \ - guessGuessed);\n                }\n                if (diff < 0) {\n     \
    \               diff = -diff;\n                }\n                dictionary[guessIndex\
    \ - count].Add(guessGuessed);\n                dictionary[guessIndex - count].Add(guessValue);\n\
    \                maxCount = Math.Max(maxCount, count);\n            }\n      \
    \      guessIndex--;\n        }\n        List<long> outList = new List<long>();\n\
    \        for (int i = 0; i < maxCount; i++) {\n            List<long> temp = new\
    \ List<long>();\n            int count = 0;\n            for (long \n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpic2_00nk.cs(60,13): error CS1003: Syntax error, ''foreach'' expected

    /tmp/tmpic2_00nk.cs(92,18): error CS1525: Invalid expression term ''long''

    /tmp/tmpic2_00nk.cs(92,22): error CS1002: ; expected

    /tmp/tmpic2_00nk.cs(92,22): error CS1525: Invalid expression term ''}''

    /tmp/tmpic2_00nk.cs(92,22): error CS1026: ) expected

    /tmp/tmpic2_00nk.cs(94,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpic2_00nk.cs(101,2): error CS1513: } expected

    '
  timestamp: 1659976408
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        if (game.Count\
    \ == guess.Count) {\n            var correct = new List<long>(game.Count);\n \
    \           int index = 0;\n            foreach (var item in game) {\n       \
    \         for (int i = 0; i < guess.Count; i++) {\n                    if (item\
    \ == guess[i]) {\n                        correct[index++] = item;\n         \
    \               break;\n                    }\n                }\n           \
    \ }\n            return correct;\n        }\n        int guesses = 0;\n      \
    \  var result = new List<long>(game.Count);\n        var index = 0;\n        foreach\
    \ (var item in game) {\n            if (item == guess[index]) {\n            \
    \    result[index++] = item;\n                guesses++;\n            }\n    \
    \    }\n        if (guesses == game.Count) {\n            return result;\n   \
    \     }\n        var differences = new List<long>(result.Count);\n        for\
    \ (int i = 0; i < guess.Count; i++) {\n            differences[index++] = result[i]\
    \ - guess[i];\n        }\n        return differences;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz7xrjoxi.cs(24,17): error CS0136: A local or parameter named ''index''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659976409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // Sort\
    \ them.\n        game.Sort();\n        guess.Sort();\n        // Check that the\
    \ lengths are the same (this would be an exercise to the reader).\n        if\
    \ (game.Count != guess.Count) {\n            return new List<long>();\n      \
    \  }\n\n        List<long> comp = new List<long>();\n        for (int i = 0; i\
    \ < game.Count; ++i) {\n            long diff = Math.Abs(guess[i] - game[i]);\n\
    \            if (diff < 0)\n                diff = -diff;\n            if (diff\
    \ == 0)\n                comp.Add(0);\n            else\n                comp.Add(diff);\n\
    \        }\n        return comp;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <93b09ddac9b349819a8859ab1f9aeae3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <93b09ddac9b349819a8859ab1f9aeae3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        if (game.Count\
    \ != guess.Count) {\n            throw new InvalidOperationException(\"The guess\
    \ list and the game list have different lengths.\");\n        }\n        var results\
    \ = new List<long>();\n        for (var index = 0; index < game.Count; index++)\
    \ {\n            var score = game[index];\n            var guess = guess[index];\n\
    \            // TODO: Your implementation is up to you\n            // The next\
    \ line is just an example (it's not intended as a full solution).\n          \
    \  // It should be enough to show how to solve the problem yourself.\n       \
    \     results.Add(0);\n        }\n        return results;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdetutyy1.cs(28,17): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpdetutyy1.cs(28,25): error CS0841: Cannot use local variable ''guess''
    before it is declared

    '
  timestamp: 1659976409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ diff = game.Zip(guess, (a, b) => new { a, b })\n            .Select(c => new\
    \ { \n                guess = c.b, \n                score = c.a \n          \
    \  })\n            .GroupBy(c => c.guess, c => new { scoreDiff = abs(c.score -\
    \ c.scoreDiff) })\n            .ToDictionary(c => c.guess, c => c.scoreDiff.Count())\n\
    \            .Select(c => c.key - c.value)\n            .ToList();\n\n       \
    \ if (game.Count != guess.Count) {\n            throw new ArgumentOutOfRangeException(string.Format(\"\
    The games ({0}) and guesses ({1}) must contain the same number of matches.\",\
    \ game.Count, guess.Count));\n        }\n        return diff;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqwtfu40g.cs(27,59): error CS0103: The name ''abs'' does not exist in the
    current context

    /tmp/tmpqwtfu40g.cs(27,75): error CS1061: ''<anonymous type: long guess, long
    score>'' does not contain a definition for ''scoreDiff'' and no accessible extension
    method ''scoreDiff'' accepting a first argument of type ''<anonymous type: long
    guess, long score>'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659976409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ diff = new List<long>();\n        if (game.Count != guess.Count) return diff;\n\
    \        for (int i = 0; i < game.Count; i++) {\n            if (game[i] == guess[i])\
    \ {\n                diff.Add(0);\n            } else {\n                diff.Add(game[i]\
    \ - guess[i]);\n            }\n        }\n        return diff;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dc100f0019d941feba845eff98622a13>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dc100f0019d941feba845eff98622a13>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        return\
    \ game.Zip(guess, (a, b) => new { a, b }).Select(c => c.b - c.a).ToList();\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6bd2ad62156b434d86e41e5268b5782b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6bd2ad62156b434d86e41e5268b5782b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        return\
    \ game.Zip(guess, (score,guess) =>\n            new {\n                score,\n\
    \                guess\n            })\n            .SelectMany(x => Enumerable.Repeat(0,\
    \ x.guess.Length)).ToList().\n            Zip(x.score.Zip(x.guess, (s, g) => s\
    \ - g), (a, diff) => diff).Where(diff => diff != 0).ToList();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3f3gz60.cs(27,59): error CS1061: ''long'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpu3f3gz60.cs(28,17): error CS0103: The name ''x'' does not exist in the
    current context

    /tmp/tmpu3f3gz60.cs(28,29): error CS0103: The name ''x'' does not exist in the
    current context

    '
  timestamp: 1659976409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        if (game.Count\
    \ != guess.Count) {\n            throw new Exception(\"Game and Guess lengths\
    \ do not match\");\n        }\n        var result = game.Zip(guess, (a,b) => new\
    \ { a = a, b = b }).ToList();\n        var diff = result.Where(r => r.a == r.b).Select(a\
    \ => a.a - r.b).ToList();\n        var diffResult = new List<long>();\n      \
    \  foreach (var d in diff) {\n            var absDiff = System.Math.Abs(d);\n\
    \            if (!diffResult.Any(d => d == absDiff)) {\n                diffResult.Add(absDiff);\n\
    \            }\n        }\n        return diffResult;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuhuhdtsl.cs(26,68): error CS0103: The name ''r'' does not exist in the
    current context

    '
  timestamp: 1659976409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // Write\
    \ your code here\n        if (game.Count == guess.Count) return new List<long>();\n\
    \        int mismatched = 0;\n        foreach (var g in game)\n        {\n   \
    \         var x = g.Equals(guess[mismatched]);\n            if (!x) { mismatched++;\
    \ mismatched = (mismatched + 1) % (guess.Count); }\n        }\n        List<long>\
    \ diff = new List<long>();\n        for (int i = 0; i < mismatched; i++)\n   \
    \     {\n            diff.Add(Math.Abs(game[i] - guess[i]));\n        }\n    \
    \    return diff;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c29d2f191fee435daf9fb2f557bf306c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c29d2f191fee435daf9fb2f557bf306c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ result = game.ToList();\n        result.AddRange(guess.ToList());\n        var\
    \ maxLength = Math.Max(game.Count, guess.Count);\n        var maxDifference =\
    \ maxLength;\n        var maxGuess = game.Count > guess.Count ? game.Count : guess.Count;\n\
    \        for (var g = 0; g < maxGuess; g++)\n        {\n            var guessNumber\
    \ = g;\n            for (var d = 0; d < maxDifference; d++)\n            {\n \
    \               var difference = d;\n                var guess = guessNumber;\n\
    \                var score = result.ElementAt(guessNumber);\n                var\
    \ index = guess;\n                var found = false;\n                var bestGuess\
    \ = maxGuess - 1;\n                while (!found && bestGuess >= 0)\n        \
    \        {\n                    var newIndex = index;\n                    found\
    \ = (maxGuess - 1 - (newIndex >= 0 ? newIndex : newIndex + newIndex) == bestGuess)\
    \ ? index >= 0 : index >= newIndex;\n                    if (!found)\n       \
    \             {\n                        newIndex = newIndex + newIndex;\n   \
    \                 }\n                    newIndex = newIndex >= maxGuess/2 ? (newIndex\
    \ <= maxGuess/2 ? newIndex : maxGuess/2) : newIndex;\n                    var\
    \ newIndex = newIndex <= maxGuess/2 ? newIndex : newIndex - newIndex;\n      \
    \              index = newIndex;\n                    guessNumber = newIndex;\n\
    \                }\n                if (bestGuess < 0)\n                {\n  \
    \                  bestGuess = maxGuess/2;\n                }\n              \
    \  else\n                {\n                    bestGuess /= 2;\n            \
    \    }\n                maxDifference = maxDifference > bestGuess ? maxDifference\
    \ - bestGuess : bestGuess;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9cuazff3.cs(33,21): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp9cuazff3.cs(47,25): error CS0128: A local variable or function named ''newIndex''
    is already defined in this scope

    '
  timestamp: 1659976409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        Console.WriteLine(game.Count);\n\
    \        Console.WriteLine(guess.Count);\n        long result = 0;\n        bool\
    \ correct = true;\n        if (game.Count == guess.Count) {\n            for (int\
    \ i = 0; i < game.Count; i++) {\n                long guess = guess[i];\n    \
    \            long score = game[i];\n                if (guess != score)\n    \
    \            {\n                    result = Math.Abs(guess - score);\n      \
    \              correct = false;\n                }\n            }\n        }\n\
    \        else\n        {\n            for (int i = 0; i < game.Count; i++)\n \
    \           {\n                long guess = guess[i];\n                long score\
    \ = game[i];\n                if (guess != score)\n                {\n       \
    \             result = Math.Abs(guess - score);\n                    correct =\
    \ false;\n                }\n            }\n            guess = guess.Where(p\
    \ => p != 0).ToList();\n        }\n        List<long> result = new List<long>(guess.Count);\n\
    \        if (correct)\n        {\n            for (int i = 0; i < guess.Count;\
    \ i++)\n            {\n                result.Add(0);\n            }\n       \
    \ }\n        else\n        {\n            for (int i = 0; i < guess.Count; i++)\n\
    \            {\n                result.Add(result);\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyuuiiwap.cs(28,22): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpyuuiiwap.cs(28,30): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpyuuiiwap.cs(41,22): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpyuuiiwap.cs(41,30): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpyuuiiwap.cs(51,20): error CS0128: A local variable or function named ''result''
    is already defined in this scope

    /tmp/tmpyuuiiwap.cs(56,24): error CS1061: ''long'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpyuuiiwap.cs(63,24): error CS1061: ''long'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpyuuiiwap.cs(66,16): error CS0029: Cannot implicitly convert type ''long''
    to ''System.Collections.Generic.List<long>''

    /tmp/tmpyuuiiwap.cs(28,30): error CS0165: Use of unassigned local variable ''guess''

    /tmp/tmpyuuiiwap.cs(41,30): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        if (game.Count\
    \ == guess.Count) {\n            return game.Zip(guess, (g, g) => Math.Abs(g -\
    \ g)).ToList();\n        }\n\n        long[] diff = new long[game.Count];\n  \
    \      int i = 0;\n        foreach (long g in guess) {\n            if (game[i]\
    \ == g) {\n                diff[i] = 0;\n            } else {\n              \
    \  diff[i] = Math.Abs(g - game[i]);\n            }\n\n            i++;\n     \
    \   }\n\n        return diff;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpakd6zmku.cs(23,40): error CS0100: The parameter name ''g'' is a duplicate

    /tmp/tmpakd6zmku.cs(23,55): error CS0229: Ambiguity between ''long'' and ''long''

    /tmp/tmpakd6zmku.cs(23,59): error CS0229: Ambiguity between ''long'' and ''long''

    /tmp/tmpakd6zmku.cs(38,16): error CS0029: Cannot implicitly convert type ''long[]''
    to ''System.Collections.Generic.List<long>''

    '
  timestamp: 1659976409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        int\
    \ length = game.Count;\n        List<long> difference = new List<long>(length);\n\
    \        for (int i = 0; i < length; i += 2) {\n            difference.Add(difference.ElementAtOrDefault(i)\
    \ - difference.ElementAtOrDefault(i + 1));\n        }\n        if (difference.Count\
    \ != guess.Count) {\n            return null;\n        }\n        long[] guess\
    \ = new long[difference.Count];\n        for (int i = 0; i < difference.Count;\
    \ i++) {\n            guess[i] = difference.ElementAtOrDefault(i);\n        }\n\
    \        Array.Sort(guess);\n        for (int i = 0; i < difference.Count; i++)\
    \ {\n            if (game[i] == guess[i]) {\n                difference[i] = 0;\n\
    \            } else {\n                difference[i] = Math.Abs(difference.ElementAtOrDefault(i)\
    \ - difference.ElementAtOrDefault(i + 1));\n            }\n        }\n       \
    \ return difference;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzdx292gu.cs(27,33): error CS0841: Cannot use local variable ''guess''
    before it is declared

    /tmp/tmpzdx292gu.cs(27,13): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''int'' and ''method group''

    /tmp/tmpzdx292gu.cs(30,16): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659976409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        long[]\
    \ scores = game.ToArray();\n        long[] guesses = guess.ToArray();\n      \
    \  List<long> results = new List<long>();\n        // TODO Complete this function\n\
    \        long result = new long();\n        for(int i = 0; i < scores.Length;\
    \ i++) {\n            if((scores - guesses)[i] != 0) {\n                result\
    \ += Math.Abs((scores - guesses)[i]);\n            }\n        }\n        foreach(var\
    \ g in guesses) {\n            results.Add(result);\n        }\n        return\
    \ results;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwkrsj2wo.cs(28,17): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''long[]'' and ''long[]''

    /tmp/tmpwkrsj2wo.cs(29,37): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''long[]'' and ''long[]''

    '
  timestamp: 1659976409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ result = new List<long>();\n        int guessIndex = 0;\n        int gameIndex\
    \ = 0;\n        while (guessIndex < guess.Count && gameIndex < game.Count) {\n\
    \            int diff = game[gameIndex] - guess[guessIndex];\n            result.Add(diff);\n\
    \            ++guessIndex;\n            ++gameIndex;\n        }\n        if (guessIndex\
    \ < guess.Count) {\n            throw new ArgumentException(\"There are more guesses\
    \ than games.\", \"guess\");\n        }\n        if (gameIndex < game.Count) {\n\
    \            throw new ArgumentException(\"There are more games than guesses.\"\
    , \"game\");\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppk5exw56.cs(26,24): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // Your\
    \ code here\n        // It can be done in one line\n        List<long> list =\
    \ new List<long>(guess);\n        foreach (var item in game)\n        {\n    \
    \        int a = list.IndexOf(item);\n            int b = guess.IndexOf(item);\n\
    \            if (a < b) // in game, there is a match\n            {\n        \
    \        list.Remove(item);\n                guess.Remove(item);\n           \
    \ }\n        }\n\n        return list;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <408a02c093af4e67aaf8f72b61703a32>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <408a02c093af4e67aaf8f72b61703a32>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ result = new List<long>(game.Count);\n        int count = 0;\n        int min\
    \ = game.Min();\n        int max = game.Max();\n        while (count < guess.Count)\
    \ {\n            int diff = game.ElementAt(count) - guess.ElementAt(count);\n\
    \            result.Add(diff);\n            ++count;\n            if (diff > 0)\
    \ break;\n            else if (diff < 0 && count > 0) --count;\n            if\
    \ (min < max) min = game.Min();\n            else if (max > min) max = game.Max();\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8sko3dmd.cs(24,19): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8sko3dmd.cs(25,19): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8sko3dmd.cs(27,24): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8sko3dmd.cs(32,34): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8sko3dmd.cs(33,39): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        if (game.Count\
    \ != guess.Count)\n            throw new ArgumentException(\"game\", \"The game\
    \ list has \" + game.Count + \" values but the number of guesses is \" + guess.Count);\n\
    \        if (game.Count > 0)\n            for (int i = 0; i < game.Count; i++)\
    \ {\n                if (game[i] != guess[i])\n                    throw new ArgumentException(\"\
    game\", \"The guesses do not match up to the game \" + game.Count + \" times.\"\
    );\n            }\n        List<long> result = new List<long>(game.Count);\n \
    \       for (int i = 0; i < game.Count; i++)\n            result.Add(Math.Abs(game[i]\
    \ - guess[i]));\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: game\nParameter name:\
    \ The guesses do not match up to the game 6 times.\n  at Problem.Compare (System.Collections.Generic.List`1[T]\
    \ game, System.Collections.Generic.List`1[T] guess) [0x0009c] in <3716473220b34a90a5d33afe874c43cd>:0\
    \ \n  at Problem.Main (System.String[] args) [0x0002d] in <3716473220b34a90a5d33afe874c43cd>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: game\nParameter\
    \ name: The guesses do not match up to the game 6 times.\n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x0009c] in <3716473220b34a90a5d33afe874c43cd>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <3716473220b34a90a5d33afe874c43cd>:0 \n"
  stdout: ''
  timestamp: 1659976410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        if (guess.Count\
    \ != game.Count) return null;\n\n        var result = new List<long>(guess.Count);\n\
    \n        for (int i = 0; i < guess.Count; i++) {\n            var score = game[i];\n\
    \            var guess = guess[i];\n            var difference = guess.CompareTo(score);\n\
    \            result[i] = difference < 0 ? difference : difference * -1;\n    \
    \    }\n\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9ytz5rm_.cs(28,17): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp9ytz5rm_.cs(28,25): error CS0841: Cannot use local variable ''guess''
    before it is declared

    '
  timestamp: 1659976409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        if (game.Count\
    \ != guess.Count) return new List<long>(game.Count);\n        long[] score = game.ToArray();\n\
    \        long[] guess = guess.ToArray();\n        var results = new List<long>();\n\
    \        for (int i = 0; i < game.Count; i++) {\n            long guess = guess[i];\n\
    \            long score = score[i];\n            long diff = guess - score;\n\
    \            if (diff < 0) {\n                diff = -diff;\n            }\n \
    \           if (diff == 0) continue;\n            results.Add(diff);\n       \
    \ }\n        return results.ToList();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4p_mntcu.cs(22,27): error CS0841: Cannot use local variable ''guess''
    before it is declared

    /tmp/tmp4p_mntcu.cs(22,13): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''int'' and ''method group''

    /tmp/tmp4p_mntcu.cs(24,16): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp4p_mntcu.cs(27,18): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp4p_mntcu.cs(27,26): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmp4p_mntcu.cs(28,18): error CS0136: A local or parameter named ''score''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp4p_mntcu.cs(28,26): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmp4p_mntcu.cs(27,26): error CS0165: Use of unassigned local variable ''guess''

    /tmp/tmp4p_mntcu.cs(28,26): error CS0165: Use of unassigned local variable ''score''

    '
  timestamp: 1659976410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ correct = new List<long>();\n        // TODO: Replace the following two lines\
    \ with code from your solution\n        //var correct = new List<long>();\n  \
    \      //correct.AddRange(game.Zip(guess, (g, gs) => g - gs));\n        //return\
    \ correct;\n\n        game.Reverse();\n        guess.Reverse();\n        var scores\
    \ = new List<long>();\n        var guessesTaken = 0;\n        for (int i = game.Count\
    \ - 1; i >= 0; i--) {\n            if (game[i] == guess) {\n                scores.Add(0);\n\
    \                guessesTaken++;\n            } else if (guessesTaken >= 2) {\n\
    \                return new List<long>();\n            } else {\n            \
    \    scores.Add(game[i] - guess);\n            }\n        }\n\n        return\
    \ scores;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzv5grnv6.cs(33,17): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''long'' and ''List<long>''

    /tmp/tmpzv5grnv6.cs(39,28): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''long'' and ''List<long>''

    '
  timestamp: 1659976410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ result = new List<long>();\n\n        // The idea here is to iterate through\
    \ every possible pair of guesses, and\n        // then compare them.\n       \
    \ IEnumerable<IEnumerable<long>> allGuesses = Enumerable.Range(0, guess.Count).Select(x\
    \ => guess.Select((y, yi) => new {x, y}).Where(x => x.x == x));\n        foreach\
    \ (IEnumerable<IEnumerable<long>> possible in allGuesses) {\n            long\
    \ difference = 0;\n            foreach (var combination in possible) {\n     \
    \           long a = game[combination.x], b = guess[combination.y];\n        \
    \        difference = Math.Abs(b - a);\n                result.Add(difference);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_xtyqx0f.cs(26,145): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''int'' and ''<anonymous type: int x, long y>''

    /tmp/tmp_xtyqx0f.cs(30,43): error CS1061: ''IEnumerable<long>'' does not contain
    a definition for ''x'' and no accessible extension method ''x'' accepting a first
    argument of type ''IEnumerable<long>'' could be found (are you missing a using
    directive or an assembly reference?)

    /tmp/tmp_xtyqx0f.cs(30,69): error CS1061: ''IEnumerable<long>'' does not contain
    a definition for ''y'' and no accessible extension method ''y'' accepting a first
    argument of type ''IEnumerable<long>'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1659976410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ result = new List<long>(game.Count);\n        var correct = new List<long>(game.Count);\n\
    \        for (var i = 0; i < game.Count; i++) {\n            result[i] = Math.Abs(game[i]\
    \ - guess[i]);\n            if (game[i] == guess[i]) {\n                correct[i]\
    \ = 0L;\n            }\n            else if (game[i] > guess[i]) {\n         \
    \       correct[i] = (long)Math.Abs(game[i] - guess[i]);\n            }\n    \
    \        else {\n                correct[i] = game[i] - guess[i];\n          \
    \  }\n        }\n        // if they are correct, result is 0 for each index, otherwise\
    \ they beat every other index\n        // the absolute value is the sum of all\
    \ those differences.\n        for (var i = 0; i < game.Count; i++) {\n       \
    \     result[i] = correct[i] + result[i];\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].set_Item (System.Int32\
    \ index, T value) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x00037] in <c0e94739b75f4a9a8d3758bcd8a6e862>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <c0e94739b75f4a9a8d3758bcd8a6e862>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].set_Item (System.Int32\
    \ index, T value) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x00037] in <c0e94739b75f4a9a8d3758bcd8a6e862>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <c0e94739b75f4a9a8d3758bcd8a6e862>:0 \n"
  stdout: ''
  timestamp: 1659976410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // We\
    \ will store the difference of each guess and the game in here.\n        List<long>\
    \ diff = new List<long>(game.Count);\n        \n        // If we fail to match\
    \ a guess, diff is still full of zeros.\n        if (guess.Count != game.Count)\
    \ {\n            return diff;\n        }\n        // If every guess is correct,\
    \ diff will be a full of zeros.\n        foreach (long guess in guess) {\n   \
    \         if (guess == game[i]) {\n                diff[i] = 0;\n            }\n\
    \            else {\n                diff[i] = Math.Abs(guess - game[i]);\n  \
    \          }\n        }\n        return diff;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzpp05b6q.cs(30,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpzpp05b6q.cs(31,31): error CS0103: The name ''i'' does not exist in the
    current context

    /tmp/tmpzpp05b6q.cs(32,22): error CS0103: The name ''i'' does not exist in the
    current context

    /tmp/tmpzpp05b6q.cs(35,22): error CS0103: The name ''i'' does not exist in the
    current context

    /tmp/tmpzpp05b6q.cs(35,49): error CS0103: The name ''i'' does not exist in the
    current context

    '
  timestamp: 1659976410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ result = new List<long>(guess.Count);\n        for (int i = 0; i < guess.Count;\
    \ i++) {\n            result[i] = MathNet.Numerics.LinearAlgebra.Vectors.Abs(game[i]\
    \ - guess[i]);\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpykq_l_0x.cs(24,25): error CS0103: The name ''MathNet'' does not exist
    in the current context

    '
  timestamp: 1659976410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        return\
    \ game.Zip(guess, (a, b) => new { a, b }).Where(x => x.a == x.b).ToList();\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp078v69ko.cs(22,16): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<<anonymous
    type: long a, long b>>'' to ''System.Collections.Generic.List<long>''

    '
  timestamp: 1659976410
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ result = new List<long>();\n        var scores = new List<long>(game.Count);\n\
    \        scores.AddRange(game.Where(c => c != 0));\n        scores.AddRange(guess.Where(c\
    \ => c != 0));\n        foreach (var item in scores) {\n            result.Add(item\
    \ - Math.Abs(game.IndexOf(item) - guess.IndexOf(item)));\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <19bf52d14ec14530bad1676fd6316971>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <19bf52d14ec14530bad1676fd6316971>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976410
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        Debug.Assert(game.Count\
    \ > 0 && guess.Count > 0);\n        var result = new List<long>(game.Count);\n\
    \        for (int i = 0; i < game.Count; i++) {\n            var diff = guess[i]\
    \ - game[i];\n            result.Add(diff < 0 ? diff * -1 : diff);\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a50caf70744b4e5abaed65eeaf53747f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a50caf70744b4e5abaed65eeaf53747f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        Debug.Assert(game.Count\
    \ == guess.Count);\n        Debug.Assert(game.Count > 0 && guess.Count > 0);\n\
    \        var result = new List<long>();\n        for (var match = 0; match < game.Count;\
    \ match++) {\n            result.Add(match);\n        }\n        foreach (var\
    \ gameItem in game) {\n            var matchScore = -1;\n            var matchGuessIndex\
    \ = -1;\n            foreach (var guessItem in guess) {\n                if (gameItem\
    \ == guessItem) {\n                    matchScore = 0;\n                    matchGuessIndex\
    \ = guess.IndexOf(guessItem);\n                    break;\n                } else\
    \ {\n                    var diff = Math.Abs(guessItem - gameItem);\n        \
    \            if (diff <= matchScore) {\n                        matchScore = diff;\n\
    \                        matchGuessIndex = guess.IndexOf(guessItem);\n       \
    \             }\n                }\n            }\n            if (matchScore\
    \ != -1) {\n                result.RemoveAt(matchGuessIndex);\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoa6zore8.cs(39,38): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        long\
    \ difference = 0;\n        \n        foreach(long i in guess) {\n            difference\
    \ += Math.Abs(i - game.ElementAtOrDefault(i));\n        }\n        \n        for(int\
    \ i = 0; i < guess.Count; i++) {\n            difference += Math.Abs(guess[i]\
    \ - game.ElementAtOrDefault(guess[i]));\n        }\n        \n        List<long>\
    \ result = new List<long>(guess.Count);\n        for(int i = 0; i < guess.Count;\
    \ i++) {\n            if(!game[i].Equals(guess[i])) {\n                result.Add(difference);\n\
    \            } else {\n                result.Add(0);\n            }\n       \
    \ }\n        \n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeenek846.cs(25,64): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpeenek846.cs(29,71): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // Use\
    \ a HashMap to store our guesses.\n        var guesses = new HashMap<long, long>();\n\
    \        foreach (var pair in guess) {\n            if (guesses.ContainsKey(pair))\
    \ {\n                guesses[pair] = guesses[pair] + 1;\n            }\n     \
    \       else {\n                guesses.Add(pair, 1);\n            }\n       \
    \ }\n\n        // Use a HashMap to store our scores.\n        var scores = new\
    \ HashMap<long, long>();\n        foreach (var pair in game) {\n            if\
    \ (scores.ContainsKey(pair)) {\n                scores.Add(pair, scores[pair]\
    \ + 1);\n            }\n            else {\n                scores.Add(pair, 1);\n\
    \            }\n        }\n\n        var newGuesses = new List<long>();\n    \
    \    foreach (var pair in guesses) {\n            if (pair.Value == 1) {\n   \
    \             newGuesses.Add(pair.Key);\n            }\n        }\n\n        foreach\
    \ (var pair in scores) {\n            if (pair.Value == 1) {\n               \
    \ newGuesses.Add(pair.Key);\n            }\n        }\n\n        return newGuesses;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2n6iu0mn.cs(23,27): error CS0246: The type or namespace name ''HashMap<,>''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmp2n6iu0mn.cs(34,26): error CS0246: The type or namespace name ''HashMap<,>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659976410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ results = new List<long>(game.Count);\n\n        // We will assume that the\
    \ first guess is correct. \n        // Let's walk through both lists in pairs.\n\
    \        long guessCount = 0;\n        bool first = true;\n        foreach (var\
    \ pair in game.Zip(guess, (g, g2) => new { g, g2 })) {\n            if (first)\
    \ {\n                if (pair.g2 == pair.g) {\n                    guessCount\
    \ += 1;\n                    results.Add(0);\n                }\n            \
    \    else {\n                    guessCount += Math.Abs(pair.g2 - pair.g);\n \
    \                   results.Add(0);\n                }\n            }\n      \
    \      else {\n                guessCount += 1;\n                results.Add(0);\n\
    \            }\n\n            first = false;\n        }\n\n        // Now walk\
    \ through all remaining guesses\n        int remainingGuesses = guess.Count -\
    \ guessCount;\n        for (int i = 0; i < remainingGuesses; i++) {\n        \
    \    int j = i + guessCount;\n            results.Add(Math.Abs(guess[j] - game[j]));\n\
    \        }\n\n        return results;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6v_zjlvb.cs(48,32): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp6v_zjlvb.cs(50,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ difference = new List<long>();\n        var correctGuesses = new List<long>();\n\
    \        var correctScores = new List<long>();\n        foreach(var g in guess)\
    \ {\n            if(game.Contains(g)) {\n                if(game.IndexOf(g) ==\
    \ guess.IndexOf(g)) {\n                    correctGuesses.Add(g);\n          \
    \          correctScores.Add(0L);\n                } else {\n                \
    \    correctScores.Add(g.CompareTo(game[game.IndexOf(g)]));\n                }\n\
    \            } else {\n                correctScores.Add(g.CompareTo(game[game.IndexOf(g)]));\n\
    \            }\n        }\n        foreach(var g in correctGuesses) {\n      \
    \      difference.Add(g.CompareTo(game[game.IndexOf(g)]));\n        }\n      \
    \  return difference;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x00096] in <b22a4494db23491e844879e63d5cf214>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <b22a4494db23491e844879e63d5cf214>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x00096] in <b22a4494db23491e844879e63d5cf214>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <b22a4494db23491e844879e63d5cf214>:0 \n"
  stdout: ''
  timestamp: 1659976410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ comp = new List<long>(game.Count);\n        foreach (long g in game) {\n   \
    \         for (int i = 0; i < guess.Count; i++) {\n                long g = guess.ElementAt(i);\n\
    \                double score = Math.Abs(g - g);\n                double guessscore\
    \ = Math.Abs(g - g);\n                if (g.Equals(guess[i]) && score == 0) {\n\
    \                    comp.Add(0);\n                } else if (g.Equals(guess[i]))\
    \ {\n                    comp.Add(0);\n                } else if (score > 0 &&\
    \ guessscore > 0)\n                    comp.Add(score - guessscore);\n       \
    \         else comp.Add(score + guessscore);\n            }\n        }\n     \
    \   return comp;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmaln_jdz.cs(25,22): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpmaln_jdz.cs(33,30): error CS1503: Argument 1: cannot convert from ''double''
    to ''long''

    /tmp/tmpmaln_jdz.cs(34,31): error CS1503: Argument 1: cannot convert from ''double''
    to ''long''

    '
  timestamp: 1659976410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        if (game.Count\
    \ != guess.Count) {\n            throw new ArgumentException(\"The two lists must\
    \ have the same number of elements.\");\n        }\n\n        int n = game.Count;\n\
    \        int diff = n; // count of guesses which are incorrect\n        int diffSum\
    \ = 0; // sum of guesses so far\n        int sum = 0;\n        List<long> guessesOfDiff\
    \ = new List<long>(n);\n        List<long> differences = new List<long>(n);\n\
    \        double avgScore = game.Average();\n        double scoreDiff = avgScore\
    \ - guess.Average();\n\n        for (int i = 0; i < n; i++) {\n            if\
    \ (guess[i] != game[i]) {\n                guessesOfDiff.Add(guess[i]);\n    \
    \            diff++;\n                sum++;\n            }\n            else\
    \ {\n                guessesOfDiff.Add(0); // guess was correct\n            \
    \    diff++;\n            }\n            diffSum += guess[i];\n            differences.Add(scoreDiff\
    \ * Math.Abs(guess[i] - game[i]));\n        }\n\n        // we now need to determine\
    \ the average difference from the guess to the score\n        differences.Remove(avgScore);\
    \ // remove average score\n        differences.Remove(avgScore); // remove average\
    \ score\n        diffSum -= avgScore;\n        if (diff == 0) {\n            guessesOfDiff\
    \ = new List<long>(guessesOfDiff);\n            differences = new List<long>(differences);\n\
    \            return guessesOfDiff;\n        }\n\n        // calculate the average\
    \ difference per difference\n        double avgDiff = diffSum / diff;\n      \
    \  int guessCount = 0;\n        for (int i = 0; i < guessesOfDiff.Count; i++)\
    \ {\n            if (guessesOfDiff[i] != 0) {\n                guessesOfDiff[i]\
    \ = Math.Abs(guessesOfDiff[i] - avgDiff);\n                diff--;\n         \
    \   }\n            else {\n                guessesOfDiff[i] = 0;\n           \
    \ }\n        }\n\n        // find the first difference that is too big\n     \
    \   int diffMax = differences.Count;\n        for (int i = 0; i < diffMax; i++)\
    \ {\n            if (guessesOfDiff[diffMax-i] > differences[i]) {\n          \
    \      diffMax = diffMax-i;\n            }\n        }\n\n        // remove the\
    \ largest difference from the guesses\n        for (int i = 0; i < diffMax; i++)\
    \ {\n            guessesOfDiff.RemoveAt(guessesOfDiff.Count-i-1);\n          \
    \  differences.RemoveAt(differences.Count-i-1);\n        }\n\n        return guessesOfDiff;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnazmezxd.cs(45,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpnazmezxd.cs(46,29): error CS1503: Argument 1: cannot convert from ''double''
    to ''long''

    /tmp/tmpnazmezxd.cs(50,28): error CS1503: Argument 1: cannot convert from ''double''
    to ''long''

    /tmp/tmpnazmezxd.cs(51,28): error CS1503: Argument 1: cannot convert from ''double''
    to ''long''

    /tmp/tmpnazmezxd.cs(52,9): error CS0266: Cannot implicitly convert type ''double''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpnazmezxd.cs(64,36): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpnazmezxd.cs(61,13): warning CS0219: The variable ''guessCount'' is assigned
    but its value is never used

    '
  timestamp: 1659976410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ result = new List<long>(guess.Count);\n        for (var i = 0; i < guess.Count;\
    \ i++) {\n            var delta = GuessDifference(game[i], guess[i]);\n      \
    \      if (delta > 0)\n                result.Add(delta);\n            else\n\
    \                result.Add(0);\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpemlkiohc.cs(24,25): error CS0103: The name ''GuessDifference'' does not
    exist in the current context

    '
  timestamp: 1659976410
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // Step\
    \ 1: Compare each element of game to each element of guess\n        int gameLength\
    \ = game.Count;\n        int guessLength = guess.Count;\n        List<long> result\
    \ = new List<long>();\n        for (int i = 0; i < gameLength; i++) {\n      \
    \      for (int j = 0; j < guessLength; j++) {\n                // Step 2: Compare\
    \ each element of guess to each element of game\n                long difference\
    \ = Math.Abs(game[i] - guess[j]);\n                if (difference == 0) {\n  \
    \                  result.Add(0);\n                } else {\n                \
    \    result.Add(difference);\n                }\n            }\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <56d5bb7d1d13432984677a959fb98d46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <56d5bb7d1d13432984677a959fb98d46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976411
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // Your\
    \ code goes here!\n        List<long> result = new List<long>(guess.Count);\n\
    \        long sum = 0;\n        foreach(long game in game)\n        {\n      \
    \      sum += game;\n        }\n        foreach(long guess in guess)\n       \
    \ {\n            sum += guess;\n        }\n        double result = sum / game.Count;\n\
    \        foreach(long guess in guess)\n        {\n            long difference\
    \ = guess - result;\n            result.Add(difference);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu_2efgcf.cs(25,22): error CS0136: A local or parameter named ''game''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpu_2efgcf.cs(29,22): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpu_2efgcf.cs(33,16): error CS0128: A local variable or function named ''result''
    is already defined in this scope

    /tmp/tmpu_2efgcf.cs(34,22): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpu_2efgcf.cs(36,31): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''long'' and ''List<long>''

    '
  timestamp: 1659976410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        Debug.Assert(game.Count\
    \ != guess.Count, \"Game and guess lists must have the same length\");\n     \
    \   var result = new List<long>(game.Count);\n        long currentGuess = 0;\n\
    \        long score = 0;\n        var i = 0;\n        while (i < game.Count) {\n\
    \            Debug.Assert(game[i] == 0, \"Each list must have only zeros and positive\
    \ values\");\n            Debug.Assert(currentGuess != 0, \"Each list must have\
    \ at least one entry\");\n            Debug.Assert(currentGuess < guess[i].Length,\
    \ \"Each list must have at least as many guesses as scores\");\n            Debug.Assert(guess[i].Length\
    \ > 0, \"Each list must have at least one guess for every score\");\n        \
    \    if (currentGuess == 0) {\n                score = 0;\n            } else\
    \ if (currentGuess == guess[i].Length) {\n                score = 0;\n       \
    \     } else {\n                score = (game[i] - currentGuess);\n          \
    \  }\n            if (currentGuess < guess[i].Length) {\n                score\
    \ += guess[i][currentGuess];\n            }\n            currentGuess += guess[i].Length;\n\
    \            result.Add(score);\n            i += 1;\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn9r0zua2.cs(30,50): error CS1061: ''long'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpn9r0zua2.cs(31,35): error CS1061: ''long'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpn9r0zua2.cs(34,49): error CS1061: ''long'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpn9r0zua2.cs(39,41): error CS1061: ''long'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpn9r0zua2.cs(40,26): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpn9r0zua2.cs(42,38): error CS1061: ''long'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659976410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ errors = new List<long>();\n        var gameResults = new List<long>(game.Count);\n\
    \        var results = new List<long>(guess.Count);\n        var i = game.Count\
    \ - 1;\n        var j = guess.Count - 1;\n        var gameIndex = -1;\n      \
    \  var guessIndex = -1;\n        bool gameIsCorrect = true;\n        while (gameIsCorrect)\
    \ {\n            if (gameIndex != i && gameIndex != j) {\n                results.Add(0);\n\
    \            }\n            if (gameIndex == i && guessIndex != j) {\n       \
    \         results.Add(0);\n            }\n            if (gameIndex == i && guessIndex\
    \ == j) {\n                gameResults.Add(game[i]);\n                gameIndex--;\n\
    \            }\n            if (gameIndex == j && guessIndex == i) {\n       \
    \         gameResults.Add(game[j]);\n                gameIndex--;\n          \
    \  }\n            if (gameIndex == i && guessIndex == j) {\n                results.Add(game[j]\
    \ - game[i]);\n                gameIndex--;\n                guessIndex--;\n \
    \           }\n            if (gameIndex == j && guessIndex == i) {\n        \
    \        results.Add(game[j] - game[i]);\n                gameIndex--;\n     \
    \           guessIndex--;\n            }\n            if (gameIndex == i && guessIndex\
    \ == j) {\n                gameResults.Add(game[j]);\n                gameIndex--;\n\
    \            }\n            if (gameIndex == j && guessIndex == i) {\n       \
    \         gameResults.Add(game[i]);\n                gameIndex--;\n          \
    \  }\n            if (gameIndex != i && gameIndex != j && gameIndex != guessIndex)\
    \ {\n                errors.Add(game[j] - game[i]);\n                gameIndex--;\n\
    \            }\n            if (gameIndex == i && guessIndex != j && gameIndex\
    \ != guessIndex) {\n                errors.Add(game[j] - game[i]);\n         \
    \       gameIndex--;\n            }\n            if (gameIndex == i && guessIndex\
    \ == j && gameIndex != guessIndex) {\n                errors.Add(game[j] - game[i]);\n\
    \                gameIndex--;\n                guessIndex--;\n            }\n\
    \            if (gameIndex == j && guessIndex == i && gameIndex != guessIndex)\
    \ {\n                errors.Add(game[j] - game[i]);\n                gameIndex--;\n\
    \                guessIndex--;\n            }\n            if (gameIndex == i\
    \ && guessIndex == j && gameIndex == guessIndex) {\n                gameResults.Add(game[j]);\n\
    \                gameIndex--;\n            }\n            if (gameIndex == j &&\
    \ guessIndex == i && gameIndex == guessIndex) {\n                gameResults.Add(game[i]);\n\
    \                gameIndex--;\n            }\n            if (gameIndex == i &&\
    \ guessIndex != j && gameIndex == guessIndex) {\n                gameResults.Add(game[j]);\n\
    \                gameIndex--;\n            }\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgekz5hr4.cs(94,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpgekz5hr4.cs(101,2): error CS1513: } expected

    '
  timestamp: 1659976410
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        return\
    \ game.Zip(guess, (score1, score2) => new Tuple<long,long>(score1,score2)).ToList().Select(a=>a.Item1\
    \ - a.Item2).ToList();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d3f07ab36db0458d874b1f88e21c3fac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d3f07ab36db0458d874b1f88e21c3fac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976411
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ result = game.Select((val, index) => index > guess.Count ? val : 0).Where(x\
    \ => x == 0).Sum();\n        return game.Select((val, index) => index > guess.Count\
    \ ? val : 0).Where(x => x != 0).Sum();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp33seiixs.cs(23,16): error CS0029: Cannot implicitly convert type ''long''
    to ''System.Collections.Generic.List<long>''

    '
  timestamp: 1659976411
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ result = new List<long>(game.Count);\n        // The absolute value of the differences\
    \ is the final score.\n        // You will need to implement this yourself and\
    \ come up with a formula for it.\n        long score = 0;\n        for (int i\
    \ = 0; i < guess.Count; i++) {\n            long guess = guess[i];\n         \
    \   long score = game[i];\n            result.Add(Math.Abs(score - guess));\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6cbslsvg.cs(27,18): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp6cbslsvg.cs(27,26): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmp6cbslsvg.cs(28,18): error CS0136: A local or parameter named ''score''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp6cbslsvg.cs(27,26): error CS0165: Use of unassigned local variable ''guess''

    /tmp/tmp6cbslsvg.cs(25,14): warning CS0219: The variable ''score'' is assigned
    but its value is never used

    '
  timestamp: 1659976411
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ result = new List<long>(game.Count);\n\n        for(int i = 0; i < game.Count;\
    \ i++) {\n            result[i] = Math.Abs(guess[i] - game[i]);\n        }\n\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].set_Item (System.Int32\
    \ index, T value) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x00028] in <d420acbc3ef44314be3745f4eeda6669>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <d420acbc3ef44314be3745f4eeda6669>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].set_Item (System.Int32\
    \ index, T value) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x00028] in <d420acbc3ef44314be3745f4eeda6669>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <d420acbc3ef44314be3745f4eeda6669>:0 \n"
  stdout: ''
  timestamp: 1659976411
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        bool\
    \ gameIsCorrect = true;\n        List<long> scores = new List<long>(game.Count);\n\
    \        \n        foreach (long g in game) {\n            scores.Add(Math.Abs(g-guess[game.IndexOf(g)]));\n\
    \        }\n\n        gameIsCorrect = game.All(x => x == 0L);\n        return\
    \ gameIsCorrect ? scores : scores.Select((x,i) => new {score = x, index = i}).OrderBy(x\
    \ => x.score).Select(x => x.index);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpizms_6u0.cs(30,16): error CS0173: Type of conditional expression cannot
    be determined because there is no implicit conversion between ''System.Collections.Generic.List<long>''
    and ''System.Collections.Generic.IEnumerable<int>''

    '
  timestamp: 1659976411
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // Calculate\
    \ the difference between the guess\n        // and the score.\n        long guessed\
    \ = 0;\n        long score = 0;\n        for (int i = 0; i < guess.Count; i++)\
    \ {\n            guessed = guessed + guess[i];\n            score = score + game[i];\n\
    \        }\n        List<long> difference = new List<long>();\n        foreach\
    \ (long g in guess) {\n            if (g == 0) difference.Add((long)0);\n    \
    \        else\n                difference.Add((long)Math.Abs(g - score));\n  \
    \      }\n        return difference;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6dab5dcda314406f9aaa4dce55ed5e5a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6dab5dcda314406f9aaa4dce55ed5e5a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976411
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        long\
    \ total = 0; \n        long[] sums = new long[game.Count];\n        for (int i\
    \ = 0; i < game.Count; i++) {\n            int count = 0;\n            long bestMatch\
    \ = -1;\n            foreach (long g in guess) {\n                long diff =\
    \ g - game[i];\n                if (diff > bestMatch) {\n                    bestMatch\
    \ = diff;\n                    count = 1;\n                }\n            }\n\
    \            sums[i] = count;\n            total += count;\n        }\n\n    \
    \    long[] out = new long[sums.Length];\n        for (int i = 0; i < sums.Length;\
    \ i++) {\n            if (sums[i] == 0) {\n                out[i] = 0;\n     \
    \       } else {\n                out[i] = Math.abs(sums[i] - total);\n      \
    \      }\n        }\n\n        return new List<long>(out);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6dlt4tnz.cs(38,16): error CS1001: Identifier expected

    /tmp/tmp6dlt4tnz.cs(38,16): error CS1003: Syntax error, '','' expected

    /tmp/tmp6dlt4tnz.cs(38,20): error CS1002: ; expected

    /tmp/tmp6dlt4tnz.cs(38,20): error CS1525: Invalid expression term ''=''

    /tmp/tmp6dlt4tnz.cs(40,32): error CS1513: } expected

    /tmp/tmp6dlt4tnz.cs(41,24): error CS1525: Invalid expression term ''=''

    /tmp/tmp6dlt4tnz.cs(42,21): error CS1513: } expected

    /tmp/tmp6dlt4tnz.cs(43,24): error CS1525: Invalid expression term ''=''

    /tmp/tmp6dlt4tnz.cs(47,34): error CS1525: Invalid expression term '')''

    '
  timestamp: 1659976410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ result = new List<long>();\n        for (int i = 0; i < guess.Count; i++) {\n\
    \            result.Add(new long());\n        }\n\n        for (int i = 0; i <\
    \ game.Count; i++) {\n            result[guess.IndexOf(game[i])] = Math.Abs(game[i]\
    \ - guess[i]);\n        }\n\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].set_Item (System.Int32\
    \ index, T value) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x0004e] in <4222786749cb4b4691991602092c5e68>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <4222786749cb4b4691991602092c5e68>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].set_Item (System.Int32\
    \ index, T value) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x0004e] in <4222786749cb4b4691991602092c5e68>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <4222786749cb4b4691991602092c5e68>:0 \n"
  stdout: ''
  timestamp: 1659976411
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        int\
    \ n = game.Count;\n        if (guess.Count != n) return new List<long>(n);\n \
    \       int[] offset = new int[n];\n        for (int i = 0; i < n; i++)\n    \
    \        offset[i] = -1;\n        long[] scores = new long[n];\n        long[]\
    \ guesses = new long[n];\n        long[] guesses2 = new long[n];\n        long[]\
    \ guesses3 = new long[n];\n        for (int i = 0; i < n; i++)\n            guesses[i]\
    \ = guess[i];\n        for (int i = 0; i < n; i++)\n            scores[i] = game[i];\n\
    \        for (int i = 0; i < n; i++) {\n            guesses2[i] = guesses[i];\n\
    \            guesses3[i] = guesses[i];\n            offset[i] = i;\n        }\n\
    \        long bestdiff = 0;\n        int bestguesses = -1;\n        List<long>\
    \ result = new List<long>(n);\n        // For each guess we do as follows: try\
    \ each guess in turn.\n        bool done = false;\n        do {\n            done\
    \ = true;\n            for (int i = 0; i < n; i++) {\n                if (offset[i]\
    \ == -1) {\n                    // This is the first guess, we try it\n      \
    \              offset[i] = i;\n                    guesses2[i] = guesses[i];\n\
    \                    guesses3[i] = guesses[i];\n                    scores[i]\
    \ = game[i];\n                    done = false;\n                    break;\n\
    \                }\n                int offset = offset[i];\n                int\
    \ guesses2 = guesses2[i];\n                int guesses3 = guesses3[i];\n     \
    \           long score2 = scores[i];\n                long guesses2 = guesses2[i];\n\
    \                long guesses3 = guesses3[i];\n                guesses3[offset]\
    \ = guesses[i];\n                guesses2[offset] = guesses[i];\n            \
    \    scores[offset] = game[i];\n                long diff = guess3 - score2;\n\
    \                if (diff < bestdiff) {\n                    bestdiff = diff;\n\
    \                    bestguesses = offset;\n                }\n              \
    \  guesses3[offset] = score2;\n                guesses2[offset] = score2;\n  \
    \              scores[offset] = score2;\n            }\n        } while (!done);\n\
    \        for (int i = 0; i < n; i++)\n            guesses2[bestguesses] = guess[i];\n\
    \        for (int i = 0; i < n; i++)\n            guesses3[bestguesses] = guess[i];\n\
    \        for (int i = 0; i < n; i++)\n            guesses[i] = guesses2[i];\n\
    \        for (int i = 0; i < n; i++)\n            guesses[i] = guesses3[i];\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpiayjpur0.cs(48,21): error CS0841: Cannot use local variable ''offset''
    before it is declared

    /tmp/tmpiayjpur0.cs(50,21): error CS0841: Cannot use local variable ''offset''
    before it is declared

    /tmp/tmpiayjpur0.cs(51,21): error CS0841: Cannot use local variable ''guesses2''
    before it is declared

    /tmp/tmpiayjpur0.cs(52,21): error CS0841: Cannot use local variable ''guesses3''
    before it is declared

    /tmp/tmpiayjpur0.cs(57,21): error CS0136: A local or parameter named ''offset''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpiayjpur0.cs(57,30): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    /tmp/tmpiayjpur0.cs(58,21): error CS0136: A local or parameter named ''guesses2''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpiayjpur0.cs(58,32): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    /tmp/tmpiayjpur0.cs(59,21): error CS0136: A local or parameter named ''guesses3''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpiayjpur0.cs(59,32): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    /tmp/tmpiayjpur0.cs(61,22): error CS0128: A local variable or function named ''guesses2''
    is already defined in this scope

    /tmp/tmpiayjpur0.cs(61,33): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    /tmp/tmpiayjpur0.cs(62,22): error CS0128: A local variable or function named ''guesses3''
    is already defined in this scope

    /tmp/tmpiayjpur0.cs(62,33): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    /tmp/tmpiayjpur0.cs(63,17): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    /tmp/tmpiayjpur0.cs(64,17): error CS0021: Cannot apply indexing with '
  timestamp: 1659976411
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // Use\
    \ a hash table to store each guess in a way that we can quickly lookup each value.\n\
    \        // This makes it easy to compare the guesses against the scores to find\
    \ out how far off\n        // they were. \n        Dictionary<long, int> guessHash\
    \ = new Dictionary<long, int>();\n        foreach (long gval in guess) {\n   \
    \         // Since we need to use both the guess and the score to find the difference,\n\
    \            // we'll need to use the score to look up the guess in the hash table.\n\
    \            if (guessHash.ContainsKey(gval)) {\n                int sc = guessHash[gval];\n\
    \                int diff = Math.Abs(gval - sc);\n                guessHash[gval]\
    \ = diff + 1;\n            } else {\n                int diff = Math.Abs(gval\
    \ - game.FirstOrDefault());\n                guessHash.Add(gval, diff + 1);\n\
    \            }\n        }\n        List<long> ret = new List<long>(game.Count);\n\
    \        foreach (KeyValuePair<long, int> gval in guessHash) {\n            ret.Add(gval.Key);\n\
    \        }\n        return ret;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3ju_nxst.cs(31,28): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp3ju_nxst.cs(34,28): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976411
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // Write\
    \ your code here\n        if (game.Count == guess.Count) {\n            var result\
    \ = game.Zip(guess, (a, b) => new {a = a, b= b}).Where(p => p.a == p.b).Select(p\
    \ => p.a - p.b).ToList();\n            return result;\n        }\n        throw\
    \ new Exception(\"Invalid number of guesses\");\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3b4216a547cb4589b7f3117f04a6db4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3b4216a547cb4589b7f3117f04a6db4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976411
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ scores = new List<long>(game.Count);\n        var guesses = new List<long>(guess.Count);\n\
    \        for (var i = 0; i < game.Count; i++) {\n            scores.Add(game[i]);\n\
    \            guesses.Add(guess[i]);\n        }\n        scores.Sort();\n     \
    \   guesses.Sort();\n\n        var scoreDifference = new List<long>(game.Count);\n\
    \        for (var i = 0; i < scores.Count; i++) {\n            scoreDifference.Add((guesses[i]\
    \ - scores[i]));\n        }\n        return scoreDifference;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7036489920d7403c868e122140abe217>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7036489920d7403c868e122140abe217>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976411
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        int\
    \ gcount = game.Count;\n        int glength = game.Max();\n        int grange\
    \ = glength + glength - 1;\n        int guess = guess.Count;\n        int gcount\
    \ = guess.Count;\n        int glength = guess.Max();\n        int grange = glength\
    \ + glength - 1;\n        List<long> comp = new List<long>(glength);\n       \
    \ long score = 0;\n        int i = 0;\n        long maxdiff = 0;\n        bool\
    \ compare = false;\n        while (i < gcount && compare = false) {\n        \
    \    compare = game.ElementAt(i) == guess.ElementAt(i);\n            if (compare)\
    \ {\n                score = 0;\n            }\n            else {\n         \
    \       score = game.ElementAt(i) - guess.ElementAt(i);\n            }\n     \
    \       if (score > maxdiff) {\n                maxdiff = score;\n           \
    \ }\n            if (compare) {\n                comp.Add(i);\n            }\n\
    \            i++;\n        }\n        while (i < gcount) {\n            comp.Add(i);\n\
    \            i++;\n        }\n        while (i < guess) {\n            comp.Add(i);\n\
    \            i++;\n        }\n        comp = comp.Take(comp).ToList();\n     \
    \   return comp;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcm1fvyud.cs(23,23): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpcm1fvyud.cs(25,13): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpcm1fvyud.cs(25,27): error CS0428: Cannot convert method group ''Count''
    to non-delegate type ''int''. Did you intend to invoke the method?

    /tmp/tmpcm1fvyud.cs(26,13): error CS0128: A local variable or function named ''gcount''
    is already defined in this scope

    /tmp/tmpcm1fvyud.cs(26,28): error CS0428: Cannot convert method group ''Count''
    to non-delegate type ''int''. Did you intend to invoke the method?

    /tmp/tmpcm1fvyud.cs(27,13): error CS0128: A local variable or function named ''glength''
    is already defined in this scope

    /tmp/tmpcm1fvyud.cs(27,23): error CS1929: ''int'' does not contain a definition
    for ''Max'' and the best extension method overload ''ParallelEnumerable.Max(ParallelQuery<int>)''
    requires a receiver of type ''ParallelQuery<int>''

    /tmp/tmpcm1fvyud.cs(28,13): error CS0128: A local variable or function named ''grange''
    is already defined in this scope

    /tmp/tmpcm1fvyud.cs(34,16): error CS0131: The left-hand side of an assignment
    must be a variable, property or indexer

    /tmp/tmpcm1fvyud.cs(35,50): error CS1061: ''int'' does not contain a definition
    for ''ElementAt'' and no accessible extension method ''ElementAt'' accepting a
    first argument of type ''int'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpcm1fvyud.cs(40,51): error CS1061: ''int'' does not contain a definition
    for ''ElementAt'' and no accessible extension method ''ElementAt'' accepting a
    first argument of type ''int'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpcm1fvyud.cs(58,26): error CS1503: Argument 2: cannot convert from ''Syst'
  timestamp: 1659976411
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ results = new List<long>(guess.Count);\n        var maxScore = game.Max();\n\
    \        if (game.Count != guess.Count) {\n            throw new Exception(\"\
    Game and guess lists must have the same length\");\n        }\n        for (var\
    \ i = 0; i < game.Count; i++) {\n            var difference = guess\n        \
    \        .Skip(i)\n                .Take(1)\n                .Select(x => Math.Abs(x\
    \ - game[i]))\n                .DefaultIfEmpty(maxScore - game[i])\n         \
    \       .First();\n            results.Add(difference);\n        }\n        return\
    \ results;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d6c00611aca4e79b86d2841c88c2f88>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d6c00611aca4e79b86d2841c88c2f88>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976412
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        bool\
    \ guessesAreSameLength = game.Count == guess.Count;\n        int mismatches =\
    \ 0;\n        List<long> differences = new List<long>(game.Count);\n\n       \
    \ if (guessesAreSameLength) {\n            for (int i = 0; i < game.Count; i++)\
    \ {\n                if (!guess.Contains(game[i])) {\n                    mismatches++;\n\
    \                    differences.Add(game[i] - guess[i]);\n                }\n\
    \            }\n            \n            List<long> differences = Compare(game,\
    \ guess);\n            return differences;\n        }\n        else {\n      \
    \      List<long> guessesInCorrectOrder = guess.Take(game.Count);\n          \
    \  List<long> guesses = Compare(game.Take(game.Count), guess);\n\n           \
    \ if (guessesInCorrectOrder.SequenceEqual(guesses)) {\n                return\
    \ guessesInCorrectOrder;\n            }\n            else {\n                List<long>\
    \ correctDifferences = Compare(game, guessesInCorrectOrder);\n               \
    \ List<long> inCorrectDifferences = Compare(game.Take(game.Count), guess);\n \
    \               List<long> allDifferences = new List<long>(correctDifferences.Count\
    \ + inCorrectDifferences.Count);\n                allDifferences.AddRange(correctDifferences);\n\
    \                allDifferences.AddRange(inCorrectDifferences);\n            \
    \    return allDifferences;\n            }\n        }\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxiof8g_h.cs(30,21): error CS0841: Cannot use local variable ''differences''
    before it is declared

    /tmp/tmpxiof8g_h.cs(34,24): error CS0136: A local or parameter named ''differences''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpxiof8g_h.cs(38,48): error CS0266: Cannot implicitly convert type ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''. An explicit conversion exists (are
    you missing a cast?)

    /tmp/tmpxiof8g_h.cs(39,42): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''

    /tmp/tmpxiof8g_h.cs(46,59): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''

    '
  timestamp: 1659976411
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ result = new List<long>(game.Count);\n        int score = 0;\n        long guess\
    \ = game.First();\n        int i = 0;\n        int max = game.Count;\n       \
    \ double scoreDiff = Math.Abs(guess - game.First());\n        Console.WriteLine(\"\
    score: \" + score);\n        for (int x = 0; x < game.Count; x++) {\n        \
    \    if (guess.Equals(game[x])) {\n                score++;\n            }\n \
    \           else\n            {\n                if (score > 0) {\n          \
    \          scoreDiff = Math.Abs(guess - game[x]);\n                    result.Add(scoreDiff);\n\
    \                    score = 0;\n                }\n                else\n   \
    \             {\n                    scoreDiff = Math.Abs(guess - game[x]);\n\
    \                    result.Add(scoreDiff);\n                    score = 0;\n\
    \                }\n            }\n            Console.WriteLine(\"score: \" +\
    \ score);\n        }\n        Console.WriteLine(\"score: \" + score);\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt854iexd.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpt854iexd.cs(37,32): error CS1503: Argument 1: cannot convert from ''double''
    to ''long''

    /tmp/tmpt854iexd.cs(43,32): error CS1503: Argument 1: cannot convert from ''double''
    to ''long''

    /tmp/tmpt854iexd.cs(25,13): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    '
  timestamp: 1659976411
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // TODO:\
    \ Implement this function\n        var result = new List<long>();\n        Debug.Assert(game.Count\
    \ == guess.Count);\n        for (var i = 0; i < game.Count; ++i) {\n         \
    \   result.Add(Math.Abs(game[i] - guess[i]));\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <254fe0c83e5d4fe380616d9f25b73afe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <254fe0c83e5d4fe380616d9f25b73afe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976412
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ guessesTaken = new List<long>();\n        long total = 0;\n        foreach (long\
    \ a in game) {\n            guessesTaken.Add(a);\n            total += a;\n  \
    \      }\n\n        long maxScore = total.Max();\n        long maxGuess = guess.Max();\n\
    \        long minScore = total.Min();\n        long minGuess = guess.Min();\n\
    \        long diff = 0;\n\n        for (int i = 0; i < guess.Count; i++) {\n \
    \           if (guess[i] == guessesTaken[i]) {\n                diff = 0;\n  \
    \          } else {\n                diff = MathNet.Numerics.Statistics.Hypot(guess[i],\
    \ guessesTaken[i]);\n            }\n\n            if (diff == 0) {\n         \
    \       guessesTaken[i] = 0;\n            } else if (diff > 0) {\n           \
    \     guessesTaken[i] = diff;\n            } else {\n                guessesTaken[i]\
    \ = -diff;\n            }\n        }\n\n        for (int i = 0; i < guess.Count;\
    \ i++) {\n            total += guessesTaken[i];\n            if (total >= maxScore)\
    \ {\n                for (int j = i + 1; j < guess.Count; j++) {\n           \
    \         if (guess[j] == guessesTaken[j]) {\n                        guessesTaken[j]\
    \ = guess[j];\n                    } else {\n                        guessesTaken[j]\
    \ = MathNet.Numerics.Statistics.Hypot(guess[j], guessesTaken[j]);\n          \
    \          }\n                }\n                break;\n            }\n     \
    \   }\n\n        List<long> result = new List<long>();\n        for (int i = 0;\
    \ i < guess.Count; i++) {\n            if (guessesTaken[i] == 0) {\n         \
    \       result.Add(guess[i]);\n            }\n        }\n\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_38hl2n5.cs(29,25): error CS1929: ''long'' does not contain a definition
    for ''Max'' and the best extension method overload ''ParallelEnumerable.Max(ParallelQuery<int>)''
    requires a receiver of type ''ParallelQuery<int>''

    /tmp/tmp_38hl2n5.cs(31,25): error CS1929: ''long'' does not contain a definition
    for ''Min'' and the best extension method overload ''ParallelEnumerable.Min(ParallelQuery<int>)''
    requires a receiver of type ''ParallelQuery<int>''

    /tmp/tmp_38hl2n5.cs(39,24): error CS0103: The name ''MathNet'' does not exist
    in the current context

    /tmp/tmp_38hl2n5.cs(58,43): error CS0103: The name ''MathNet'' does not exist
    in the current context

    '
  timestamp: 1659976411
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ list = new List<long>();\n        var scores = new List<long>(game.Count);\n\
    \        var guesses = new List<long>(guess.Count);\n        var wins = game.Count(x\
    \ => x == guess[0]);\n        var guessesRemaining = guess.Count;\n        while\
    \ (guesesRemaining > 0) {\n            var minScore = game[0];\n            var\
    \ minGuess = guess[0];\n            for (int i = 0; i < game.Count; i++) {\n \
    \               if (game[i] < minScore) {\n                    minScore = game[i];\n\
    \                    minGuess = guess[i];\n                }\n            }\n\
    \            scores.Add(minScore);\n            guesses.Add(minGuess);\n     \
    \       int score = minGuess - minScore;\n            if (score < 0) {\n     \
    \           score = -score;\n            }\n            if (score == 0) {\n  \
    \              list.Add(0);\n            } else {\n                list.Add(score);\n\
    \            }\n            guessesRemaining--;\n        }\n        return list;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_rqkrf3t.cs(27,16): error CS0103: The name ''guesesRemaining'' does not
    exist in the current context

    /tmp/tmp_rqkrf3t.cs(38,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976411
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        int\
    \ counter = 0;\n        foreach (long g in game)\n            if (guess != null\
    \ && guess.Contains(g))\n                counter++;\n        List<long> results\
    \ = new List<long>();\n        foreach (long g in game)\n            if (guess\
    \ != null && guess.Contains(g))\n                results.Add(g - game[guess.IndexOf(g)]);\n\
    \        return results.OrderByDescending(x => x).ToList();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d60fc59c37940489682ebd1426e37a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d60fc59c37940489682ebd1426e37a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976412
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ result = new List<long>(guess.Count);\n        foreach (var g in guess)\n  \
    \          result.Add(Compare(g, game));\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpevacx1i0.cs(24,32): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.List<long>''

    '
  timestamp: 1659976411
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ result = new List<long>(game.Count);\n        foreach (long g in guess) {\n\
    \            long difference = Math.Abs(g - game.ElementAt(game.IndexOf(g)));\n\
    \            result.Add(difference);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Linq.Enumerable.ElementAt[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source, System.Int32 index) [0x00031]\
    \ in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Compare (System.Collections.Generic.List`1[T]\
    \ game, System.Collections.Generic.List`1[T] guess) [0x00029] in <605615164483495ebd0c2637bc8a6662>:0\
    \ \n  at Problem.Main (System.String[] args) [0x0002d] in <605615164483495ebd0c2637bc8a6662>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Linq.Enumerable.ElementAt[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source, System.Int32 index) [0x00031]\
    \ in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Compare (System.Collections.Generic.List`1[T]\
    \ game, System.Collections.Generic.List`1[T] guess) [0x00029] in <605615164483495ebd0c2637bc8a6662>:0\
    \ \n  at Problem.Main (System.String[] args) [0x0002d] in <605615164483495ebd0c2637bc8a6662>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976411
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        long\
    \ result = 0;\n        for (int i = 0; i < guess.Count; i++) {\n            long\
    \ curr = game.ElementAtOrDefault(i);\n            long guess = guess.ElementAtOrDefault(i);\n\
    \            long diff = guess - curr;\n            if (guess == curr) {\n   \
    \             result = 0;\n                break;\n            }\n           \
    \ if (diff > 0) result += diff;\n            if (diff < 0) result -= diff;\n \
    \       }\n        return new List<long>(game.Count).Take(game.Count).ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp45ytdps7.cs(25,18): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp45ytdps7.cs(25,32): error CS1061: ''long'' does not contain a definition
    for ''ElementAtOrDefault'' and no accessible extension method ''ElementAtOrDefault''
    accepting a first argument of type ''long'' could be found (are you missing a
    using directive or an assembly reference?)

    /tmp/tmp45ytdps7.cs(25,26): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976411
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // Calculate\
    \ the absolute differences\n        var diff = new List<long>();\n        foreach\
    \ (var g in guess) {\n            var gDiff = Math.Abs(g - game[game.IndexOf(g)]);\n\
    \            if (gDiff < 0) {\n                diff.Add(gDiff);\n            }\
    \ else {\n                diff.Add(0);\n            }\n        }\n        return\
    \ diff;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x00023] in <cfee1fd4e06e47eb8803138664383351>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <cfee1fd4e06e47eb8803138664383351>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x00023] in <cfee1fd4e06e47eb8803138664383351>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <cfee1fd4e06e47eb8803138664383351>:0 \n"
  stdout: ''
  timestamp: 1659976412
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ result = new List<long>(game.Count);\n        bool gameWon = false;\n      \
    \  bool guessWon = false;\n        var gameResults = game.Zip(guess, (i, j) =>\
    \ new { gameValue = i, guessValue = j });\n        foreach (var item in gameResults)\
    \ {\n            // This if is for the fact that a game can end early if it reaches\
    \ the end of the guess list\n            if (item.gameValue == item.guessValue)\
    \ {\n                gameWon = true;\n            }\n            // This if is\
    \ for the fact that a guess can end early if it reaches the end of the game list\n\
    \            if (item.guessValue == item.gameValue) {\n                guessWon\
    \ = true;\n            }\n            // This if is for the fact that a game and\
    \ guess have reached the end of their lists respectively\n            if (item.gameValue\
    \ == -1) {\n                gameWon = false;\n            }\n            if (item.guessValue\
    \ == -1) {\n                guessWon = false;\n            }\n        }\n    \
    \    if (gameWon) {\n            result.Add(0);\n        }\n        if (guessWon)\
    \ {\n            result.Add(game.Sum() - guess.Sum());\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1097f55942fd4a59baf542a0c7eb6208>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1097f55942fd4a59baf542a0c7eb6208>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976412
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        int\
    \ n = game.Count;\n        List<long> correct = new List<long>(n);\n        List<long>\
    \ wrong = new List<long>(n);\n        List<long> total = new List<long>(n);\n\n\
    \        long sum = 0;\n        long match = 0;\n\n        for (int i = 0; i <\
    \ game.Count; i++) {\n            long score1 = game[i];\n            long guess\
    \ = guess[i];\n            long score2 = 0;\n            int j = -1;\n       \
    \     while (j < 0 && j < guess.Count) {\n                score2 = guess[j];\n\
    \                if (guess > score2) {\n                    guess = score2;\n\
    \                } else if (guess < score2) {\n                    guess = score1;\n\
    \                } else {\n                    guess = score2;\n             \
    \       j++;\n                }\n            }\n            total += guess - score1;\n\
    \            match += guess == score1;\n            if (match > 0) {\n       \
    \         correct.Add(guess);\n            } else {\n                wrong.Add(guess);\n\
    \            }\n        }\n\n        int correctTotal = 0;\n        int wrongTotal\
    \ = 0;\n        for (int i = 0; i < n; i++) {\n            if (correct[i] > 0)\n\
    \                correctTotal++;\n            if (wrong[i] > 0)\n            \
    \    wrongTotal++;\n        }\n\n        List<long> errors = new List<long>();\n\
    \        if (correctTotal != n) {\n            long diff = correctTotal - n;\n\
    \            errors.Add(diff);\n            double totalError = (double)diff /\
    \ n;\n            totalError = (long)Math.Round(totalError);\n            Console.WriteLine(\"\
    There are {0} differences. Average is {1} errors\", diff, totalError);\n     \
    \   }\n        if (wrongTotal != n) {\n            long diff = n - wrongTotal;\n\
    \            errors.Add(diff);\n            double totalError = (double)diff /\
    \ n;\n            totalError = (long)Math.Round(totalError);\n            Console.WriteLine(\"\
    There are {0} differences. Average is {1} errors\", diff, totalError);\n     \
    \   }\n        if (errors.Count != 0)\n            return errors;\n        return\
    \ total;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa2w83cg2.cs(32,18): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpa2w83cg2.cs(32,26): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpa2w83cg2.cs(35,29): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''int'' and ''method group''

    /tmp/tmpa2w83cg2.cs(36,26): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpa2w83cg2.cs(46,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''List<long>'' and ''long''

    /tmp/tmpa2w83cg2.cs(47,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''long'' and ''bool''

    /tmp/tmpa2w83cg2.cs(32,26): error CS0165: Use of unassigned local variable ''guess''

    /tmp/tmpa2w83cg2.cs(27,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    '
  timestamp: 1659976412
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ ret = new List<long>(game.Count);\n        var scoreDiff = game.Count - guess.Count;\n\
    \        var diffs = game.Zip(guess, (a, b) => a - b);\n        foreach (var diff\
    \ in diffs) {\n            ret[guess.IndexOf(diff)] = scoreDiff - diff;\n    \
    \    }\n        return ret;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].set_Item (System.Int32\
    \ index, T value) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x0005e] in <129acdacc15a453d8e65ef5e35c7629b>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <129acdacc15a453d8e65ef5e35c7629b>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].set_Item (System.Int32\
    \ index, T value) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x0005e] in <129acdacc15a453d8e65ef5e35c7629b>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <129acdacc15a453d8e65ef5e35c7629b>:0 \n"
  stdout: ''
  timestamp: 1659976412
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ result = new List<long>(game.Count);\n        int matches = 0;\n        for(int\
    \ i = 0; i < game.Count && matches < guess.Count; i++) {\n            long score\
    \ = game[i];\n            long guess = guess[i];\n            if(guess == score)\
    \ {\n                matches++;\n                continue;\n            }\n  \
    \          long diff = guess - score;\n            if(diff == 0) result.Add(0);\n\
    \            else result.Add(diff);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy5t417bq.cs(26,18): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpy5t417bq.cs(26,26): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpy5t417bq.cs(26,26): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976412
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        int\
    \ length = game.Count;\n        List<long> result = new List<long>(length);\n\
    \        if (game.Count != guess.Count) {\n            throw new ArgumentException(\"\
    The length of the two lists must be the same!\");\n        }\n        for (int\
    \ i = 0; i < game.Count; ++i) {\n            if (game[i] != guess[i]) {\n    \
    \            result.Add(Math.Abs(game[i] - guess[i]));\n            } else {\n\
    \                result.Add(0L);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bb75415946ac4368b0d10986bae6d06b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bb75415946ac4368b0d10986bae6d06b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976412
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ results = game.Select(c => (c - guess).Abs()).ToList();\n\n        List<long>\
    \ finalResults = new List<long>(game.Count);\n\n        for (int i = 0; i < game.Count;\
    \ ++i) {\n            int result = 0;\n\n            if (i < guess.Count) {\n\
    \                long guess = guess.ElementAt(i);\n                result = game.ElementAt(i)\
    \ - guess;\n            } else {\n                // We have a guess in the list\
    \ of guesses, but no match, so we must compare\n                // the full list\
    \ of game scores to the guess.\n                for (int j = 0; j < game.Count;\
    \ ++j) {\n                    if (j == i) continue;\n\n                    long\
    \ guess = game.ElementAt(j);\n                    result = game.ElementAt(j) -\
    \ guess;\n                    break;\n                }\n            }\n\n   \
    \         finalResults.Add(result < 0 ? -result : result);\n        }\n\n    \
    \    return finalResults;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprgr3b8v_.cs(22,41): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''long'' and ''List<long>''

    /tmp/tmprgr3b8v_.cs(30,22): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmprgr3b8v_.cs(30,36): error CS1061: ''long'' does not contain a definition
    for ''ElementAt'' and no accessible extension method ''ElementAt'' accepting a
    first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmprgr3b8v_.cs(31,26): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmprgr3b8v_.cs(38,26): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmprgr3b8v_.cs(39,30): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmprgr3b8v_.cs(30,30): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976412
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        int\
    \ a = 0; int b = 0; int c = 0; int d = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (var item in game) {\n            if (item == game[a] && game[a]\
    \ != 0) {\n                result.Add(game[a]);\n                a++;\n      \
    \      } else if (item == game[b] && game[b] != 0) {\n                result.Add(game[b]);\n\
    \                b++;\n            } else if (item == game[c] && game[c] != 0)\
    \ {\n                result.Add(game[c]);\n                c++;\n            }\
    \ else if (item == game[d] && game[d] != 0) {\n                result.Add(game[d]);\n\
    \                d++;\n            }\n        }\n\n        int x = 0; int y =\
    \ 0;\n        foreach (var item in result) {\n            if (item == guess[x])\
    \ {\n                x++;\n            } else if (item == guess[y]) {\n      \
    \          y++;\n            }\n        }\n        if (a == result.Count && b\
    \ == result.Count && c == result.Count && d == result.Count) {\n            for\
    \ (int i = 0; i < result.Count; i++) {\n                result[i] = 0;\n     \
    \       }\n        } else if (a == result.Count || b == result.Count || c == result.Count\
    \ || d == result.Count) {\n            for (int i = 0; i < result.Count; i++)\
    \ {\n                result[i] = (item[i] - guess[i]).Abs();\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppvtgu74b.cs(54,30): error CS0103: The name ''item'' does not exist in
    the current context

    '
  timestamp: 1659976412
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ gameScores = game.Zip(guess, (x, y) => x - y).ToList();\n        gameScores.ForEach(x\
    \ => {\n            if (x < 0) x += ~x;\n            if (x < 0) x += ~x;\n   \
    \         if (x < 0) x += ~x;\n        });\n        return gameScores;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ccd8b7805afc4c6eb07bf80bc2bfe15c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ccd8b7805afc4c6eb07bf80bc2bfe15c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976412
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ results = new List<long>(game.Count);\n        long diff;\n        for (long\
    \ i = 0; i < game.Count; i++) {\n            diff = game.ElementAt(i) - guess.ElementAt(i);\n\
    \            if (diff < 0) {\n                diff *= -1;\n            }\n   \
    \         if (diff != 0) {\n                results.Add(diff);\n            }\n\
    \        }\n        return results;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu_9tooau.cs(25,35): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpu_9tooau.cs(25,56): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976412
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // Your\
    \ code goes here\n        // We will need some helper methods for comparing two\
    \ numbers\n        CompareLong c1 = new CompareLong();\n        CompareLong c2\
    \ = new CompareLong();\n        CompareLong c3 = new CompareLong();\n        CompareLong\
    \ c4 = new CompareLong();\n        CompareLong c5 = new CompareLong();\n     \
    \   CompareLong c6 = new CompareLong();\n        List<long> result = new List<long>(game.Count);\n\
    \        // Iterate through the two lists simultaneously and compare the values\n\
    \        for(int i = 0; i < game.Count; i++) {\n            c1.A = game[i];\n\
    \            c1.B = guess[i];\n            if(c1.Compare(c2)==0) {\n         \
    \       result[i] = 0;\n            }\n            else {\n                result[i]\
    \ = c1.Compare(c2);\n            }\n            c2.A = game[i];\n            c2.B\
    \ = guess[i];\n            if(c2.Compare(c3)==0) {\n                result[i]\
    \ += c1.Compare(c3);\n            }\n            else {\n                result[i]\
    \ += c2.Compare(c3);\n            }\n            c3.A = game[i];\n           \
    \ c3.B = guess[i];\n            if(c3.Compare(c4)==0) {\n                result[i]\
    \ += c2.Compare(c4);\n            }\n            else {\n                result[i]\
    \ += c3.Compare(c4);\n            }\n            c4.A = game[i];\n           \
    \ c4.B = guess[i];\n            if(c4.Compare(c5)==0) {\n                result[i]\
    \ += c3.Compare(c5);\n            }\n            else {\n                result[i]\
    \ += c4.Compare(c5);\n            }\n            c5.A = game[i];\n           \
    \ c5.B = guess[i];\n            if(c5.Compare(c6)==0) {\n                result[i]\
    \ += c4.Compare(c6);\n            }\n            else {\n                result[i]\
    \ += c5.Compare(c6);\n            }\n            c6.A = game[i];\n           \
    \ c6.B = guess[i];\n            if(c6.Compare(c1)==0) {\n                result[i]\
    \ += c5.Compare(c1);\n            }\n            else {\n                result[i]\
    \ += c6.Compare(c1);\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmput2xycv8.cs(24,9): error CS0246: The type or namespace name ''CompareLong''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmput2xycv8.cs(24,30): error CS0246: The type or namespace name ''CompareLong''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmput2xycv8.cs(25,9): error CS0246: The type or namespace name ''CompareLong''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmput2xycv8.cs(25,30): error CS0246: The type or namespace name ''CompareLong''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmput2xycv8.cs(26,9): error CS0246: The type or namespace name ''CompareLong''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmput2xycv8.cs(26,30): error CS0246: The type or namespace name ''CompareLong''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmput2xycv8.cs(27,9): error CS0246: The type or namespace name ''CompareLong''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmput2xycv8.cs(27,30): error CS0246: The type or namespace name ''CompareLong''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmput2xycv8.cs(28,9): error CS0246: The type or namespace name ''CompareLong''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmput2xycv8.cs(28,30): error CS0246: The type or namespace name ''CompareLong''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmput2xycv8.cs(29,9): error CS0246: The type or namespace name ''CompareLong''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmput2xycv8.cs(29,30): error CS0246: The type or namespace name ''CompareLong''
    could not be found (are you missing a us'
  timestamp: 1659976412
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ result = new List<long>();\n        // I won't use var and I'll use foreach\
    \ loops because it's more clear\n        // for someone reading the code.\n  \
    \      foreach (var guess in guess) {\n            // For each guess, I check\
    \ if it is in the game or not\n            if (game.Contains(guess)) {\n     \
    \           result.Add(0);\n            } else {\n                // If it's not\
    \ in the game I calculate the difference between the guess and the score\n   \
    \             long diff = guess - game[game.FindIndex(x => x == guess)];\n   \
    \             result.Add(diff);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp26qnamya.cs(25,22): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659976412
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // Your\
    \ code here\n        bool isMatch = true;\n        for (int i = 0; i < game.Count\
    \ && i < guess.Count; i++) {\n            if (game[i] != guess[i]) {\n       \
    \         isMatch = false;\n            }\n        }\n        if (isMatch) {\n\
    \            return new List<long> { 0, 0, 0, 0, game[game.Count - 1] - guess[guess.Count\
    \ - 1] };\n        } else {\n            return game.Zip(guess.Skip(1).Take(game.Count\
    \ - 1).Zip(game.Take(game.Count - 1).Concat(guess), (n, g) => g - n)).ToList();\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdrtl9mvi.cs(32,25): error CS1501: No overload for method ''Zip'' takes
    1 arguments

    '
  timestamp: 1659976412
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        int\
    \ guessedCorrectly = game.Zip(guess, (x, y) => x == y).Count(x => x == true);\n\
    \        int totalGuesses = game.Count;\n        int differences = guessedCorrectly;\n\
    \        for (int index = 0; index < game.Count; index++) {\n            long\
    \ guessScore = game.ElementAtOrDefault(index);\n            long guessGuessed\
    \ = guess.ElementAtOrDefault(index);\n            long guessed = guessGuessed\
    \ != -1L && game.ElementAtOrDefault(index) == guessGuessed;\n            int scoreDifference\
    \ = guessScore - guessGuessed;\n            if (guessedCorrectly == totalGuesses)\
    \ \n                return new List<long>() { scoreDifference };\n           \
    \ if (guessed)\n                totalGuesses--;\n            else\n          \
    \      differences--;\n        }\n        return new List<long>() { (differences\
    \ < 0) ? differences * -1L : differences };\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdh91khiy.cs(28,28): error CS0029: Cannot implicitly convert type ''bool''
    to ''long''

    /tmp/tmpdh91khiy.cs(29,35): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpdh91khiy.cs(32,17): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    '
  timestamp: 1659976412
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        if (game.Count\
    \ != guess.Count) {\n            throw new ArgumentException(\"Please supply two\
    \ lists of equal length\");\n        }\n        if (game.Count > 0) {\n      \
    \      Debug.WriteLine(\"game: {0}\", game);\n        }\n        if (guess.Count\
    \ > 0) {\n            Debug.WriteLine(\"guess: {0}\", guess);\n        }\n   \
    \     var results = new List<long>(game.Count);\n        for (var i = 0; i < game.Count;\
    \ i++) {\n            // Do the math and compare the two values\n            if\
    \ (game.ElementAt(i) == guess.ElementAt(i)) {\n                results.Add(0);\n\
    \            } else {\n                results.Add(game.ElementAt(i) - guess.ElementAt(i));\n\
    \            }\n        }\n        return results;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "game: System.Collections.Generic.List`1[System.Int64]\nguess: System.Collections.Generic.List`1[System.Int64]\n\
    Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,\
    \ System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <152c3c53ac4549e585137f303bb3d3e1>:0 \ngame: System.Collections.Generic.List`1[System.Int64]\n\
    guess: System.Collections.Generic.List`1[System.Int64]\nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <152c3c53ac4549e585137f303bb3d3e1>:0 \ngame: System.Collections.Generic.List`1[System.Int64]\n\
    guess: System.Collections.Generic.List`1[System.Int64]\nFail: \n  at Syste"
  stdout: ''
  timestamp: 1659976413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ guesses = guess.ToList();\n\n        Console.WriteLine(\"Compare(game, guess)\"\
    );\n\n        // First, make a copy of the game that we can work with\n      \
    \  var gameCopy = new List<long>(game);\n\n        // Now sort the game by score\
    \ (higher score gets sorted before lower score\n        gameCopy.Sort((a, b) =>\
    \ b.CompareTo(a));\n\n        // We need to know what score the person has. We\
    \ can do this with some \n        // simple magic. Since we can have a list with\
    \ an unlimited number of \n        // elements, we know that the list will never\
    \ have more than 10 scores. \n        // We can get the first ten and compare\
    \ them to the first ten in the \n        // second list. If the first ten are\
    \ equal, we can compare the second ten\n        // and so on, until the end of\
    \ gameCopy has been reached.\n        // This technique will break if the second\
    \ list has less than 10 elements.\n        var lastScore = gameCopy.First();\n\
    \        var lastScoreIndex = guess.IndexOf(lastScore);\n        var gameCopyIndex\
    \ = 0;\n\n        // Now we compare the scores against each other, and add the\
    \ difference to the\n        // guesses that they have already seen. While we're\
    \ at it, we can also \n        // increment our gameCopyIndex to reflect where\
    \ we are in the \n        // gameCopy list. Again, we can do this by iterating\
    \ through the list.\n        while (gameCopyIndex < gameCopy.Count && gameCopyIndex\
    \ < guess.Count) {\n            var guessIndex = guess.IndexOf(gameCopy[gameCopyIndex]);\n\
    \            if (guessIndex > lastScoreIndex) {\n                guesses[guessIndex]\
    \ = guesses[guessIndex] - gameCopy[gameCopyIndex];\n                lastScore\
    \ = gameCopy[gameCopyIndex];\n                gameCopyIndex++;\n            }\
    \ else {\n                guesses[guessIndex] = gameCopy[gameCopyIndex] - lastScore;\n\
    \                lastScore = gameCopy[gameCopyIndex];\n                gameCopyIndex++;\n\
    \            }\n        }\n        // Since we've gone through all elements, the\
    \ length of the guesses should match\n        if (gameCopyIndex < gameCopy.Count)\
    \ {\n            guesses.RemoveAt(lastScoreIndex);\n        }\n        return\
    \ guesses;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].set_Item (System.Int32\
    \ index, T value) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x000a9] in <cee9a80ca85a4eaf979e1787cbcf0d81>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <cee9a80ca85a4eaf979e1787cbcf0d81>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].set_Item (System.Int32\
    \ index, T value) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x000a9] in <cee9a80ca85a4eaf979e1787cbcf0d81>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <cee9a80ca85a4eaf979e1787cbcf0d81>:0 \n"
  stdout: 'Compare(game, guess)

    '
  timestamp: 1659976413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ result = new List<long>();\n        var scores = new List<long>(game.Count);\n\
    \        foreach (var g in guess) {\n            scores.Add(g);\n        }\n \
    \       scores.Sort();\n        foreach (var s in scores) {\n            result.Add(s\
    \ - game[scores.IndexOf(s - 1)]);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x00074] in <89608de2802e447ca55df529867e1387>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <89608de2802e447ca55df529867e1387>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x00074] in <89608de2802e447ca55df529867e1387>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <89608de2802e447ca55df529867e1387>:0 \n"
  stdout: ''
  timestamp: 1659976412
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ result = game.Select((v, i) => (v - guess[i]).Abs()).ToList();\n        return\
    \ result.Where(x => x == 0).ToList();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9d7xtjpf.cs(22,59): error CS1061: ''long'' does not contain a definition
    for ''Abs'' and no accessible extension method ''Abs'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659976412
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ correctGuesses = new List<long>(game.Count);\n        foreach (var i in game.Zip(guess,\
    \ (game, guess) => new { game, guess })) {\n            var score = new List<long>(i.game.Count);\n\
    \            foreach (var j in i.game) {\n                score.Add(j == i.guess\
    \ ? 0 : Math.Abs(j - i.guess));\n            }\n            correctGuesses.AddRange(score);\n\
    \        }\n        return correctGuesses;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5uj3gm48.cs(24,40): error CS1503: Argument 1: cannot convert from ''method
    group'' to ''int''

    /tmp/tmp5uj3gm48.cs(25,31): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659976412
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // Your\
    \ code goes here\n        long gameScore = game.Sum();\n        long guessScore\
    \ = guess.Sum();\n        List<long> result = new List<long>();\n        if (game.Count\
    \ == guess.Count) {\n            List<long> gameScoreDiff = new List<long>();\n\
    \            List<long> guessScoreDiff = new List<long>();\n            for (int\
    \ i = 0; i < game.Count; i++) {\n                gameScoreDiff.Add(gameScore -\
    \ game[i]);\n                guessScoreDiff.Add(guessScore - guess[i]);\n    \
    \        }\n            gameScoreDiff.Sort();\n            guessScoreDiff.Sort();\n\
    \            result.AddRange(gameScoreDiff);\n            result.AddRange(guessScoreDiff);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1ceb2db8a9d04e39ac5166c03890080b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1ceb2db8a9d04e39ac5166c03890080b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976413
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ result = new List<long>(game.Count);\n        // Your code goes here...\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9cc4880c92c44673ab1dd510f5a2b2f3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9cc4880c92c44673ab1dd510f5a2b2f3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        double\
    \ diff = Math.Abs(guess[0] - game[0]);\n        for(int i = 1; i < guess.Count;\
    \ i++) {\n            diff += Math.Abs(guess[i] - game[i]);\n        }\n     \
    \   return new List<long>() { diff };\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjf7c85m5.cs(26,35): error CS1950: The best overloaded Add method ''List<long>.Add(long)''
    for the collection initializer has some invalid arguments

    /tmp/tmpjf7c85m5.cs(26,35): error CS1503: Argument 1: cannot convert from ''double''
    to ''long''

    '
  timestamp: 1659976412
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ guessedCorrectly = new List<bool>(guess.Count);\n        foreach (var match\
    \ in game.Zip(guess, (x, y) => new {x, y}))\n        {\n            if (Math.Abs(match.y\
    \ - match.x) == 0)\n            {\n                guessedCorrectly[match.y] =\
    \ true;\n                continue;\n            }\n            guessedCorrectly[match.y]\
    \ = false;\n        }\n        return new List<long>(guess.Count).Select(x =>\
    \ guessedCorrectly[x] ? 0 : Math.Abs(x - game[x])).ToList();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd_qj0xyr.cs(27,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpd_qj0xyr.cs(30,30): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpd_qj0xyr.cs(32,73): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpd_qj0xyr.cs(32,100): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976413
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ gameScore = new List<long>(game.Count);\n        var guessScore = new List<long>(guess.Count);\n\
    \n        foreach (var i in game)\n            gameScore.Add(i);\n        foreach\
    \ (var i in guess)\n            guessScore.Add(i);\n\n        for (int i = 0;\
    \ i < guessScore.Count; i++)\n            if (guessScore[i] != gameScore[i])\n\
    \                guessScore[i] = guessScore[i] - gameScore[i];\n\n        return\
    \ guessScore;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <33ec9e1aad614c488eaa5c32288809a6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <33ec9e1aad614c488eaa5c32288809a6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        Debug.Assert(game.Count\
    \ != guess.Count, \"The two lists must be of equal length\");\n        List<long>\
    \ difference = new List<long>(game.Count);\n        int index = 0;\n        while\
    \ (index < game.Count && index < guess.Count) {\n            Debug.Assert(game[index]\
    \ != 0, \"Index must be positive\");\n            Debug.Assert(guess[index] !=\
    \ 0, \"Index must be positive\");\n            Debug.Assert(game[index] == guess[index],\
    \ \"Guess and Score must be equal\");\n            difference[index] = (game[index]\
    \ - guess[index]);\n            index++;\n        }\n        return difference;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: The two lists must be of equal length\n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition, System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition, System.String\
    \ message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x00000] in <74cbc2f679d540079249535ba0e7b2f9>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00000] in <74cbc2f679d540079249535ba0e7b2f9>:0 \n\n\
    Unhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range.\
    \ Must be non-negative and less than the size of the collection.\nParameter name:\
    \ index\n  at System.Collections.Generic.List`1[T].set_Item (System.Int32 index,\
    \ T value) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x00085] in <74cbc2f679d540079249535ba0e7b2f9>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <74cbc2f679d540079249535ba0e7b2f9>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].set_Item (System.Int32\
    \ index, T value) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generi"
  stdout: ''
  timestamp: 1659976413
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        return\
    \ game.Zip(guess, (a, b) => new { a, b }).Where(x => x.a == x.b).Select(x => x.b).ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <89f042baefac4939a4bfccb330666fa3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <89f042baefac4939a4bfccb330666fa3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // First,\
    \ figure out how many matches are needed to achieve the scores. \n        // I\
    \ did it by comparing the length of the game, with the length of the guesses,\
    \ \n        // then subtracting one from each of them, adding them all together,\
    \ and seeing if that gives\n        // a non-zero result. If it does, then that\
    \ value is how many matches are needed.\n        // The first guess is always\
    \ needed to meet the condition. \n        // \n        // The next guess is needed\
    \ if any two of the game's index positions match a guess from the \n        //\
    \ same position in the guesses list, and there are no other matches, \n      \
    \  // OR if there are no guesses at all, \n        // OR if any two game's index\
    \ positions are matching guesses from the same position in the \n        // guesses\
    \ list, and there are no other matches, \n        // OR if any two game's index\
    \ positions are not matching guesses from the same position in the \n        //\
    \ guesses list, and the two game's index positions are not matching guesses from\
    \ the same position in the guesses list, and the game's index positions are not\
    \ matching guesses from the same position in the guesses list\n        int neededMatches\
    \ = 0;\n        if (game.Count > guess.Count || guess.Count == 0) {\n        \
    \    // No guess\n            neededMatches = game.Count - 1;\n        } else\
    \ if (game.Count == guess.Count && game.Count != 0) {\n            // Match\n\
    \            neededMatches = game.Count - 1;\n        } else {\n            //\
    \ Not the same number of matches. \n            int gameIndex = -1;\n        \
    \    int guessIndex = -1;\n            int index = 0;\n            for (int i\
    \ = 0; i < game.Count; i++) {\n                if (gameIndex == -1 && game[i]\
    \ == guess[i]) {\n                    gameIndex = i;\n                } else if\
    \ (guessIndex == -1 && gameIndex != -1 && game[gameIndex] == guess[i]) {\n   \
    \                 guessIndex = i;\n                } else if (guessIndex != -1\
    \ && gameIndex != -1 && game[gameIndex] == guess[i] && gameIndex != guessIndex)\
    \ {\n                    if (gameIndex == guessIndex) {\n                    \
    \    neededMatches++;\n                    } else if (gameIndex == guessIndex\
    \ + 1) {\n                        neededMatches++;\n                    } else\
    \ if (gameIndex == guessIndex - 1) {\n                        neededMatches++;\n\
    \                    } else if (guessIndex == guessIndex + 1) {\n            \
    \            neededMatches++;\n                    } else if (guessIndex == guessIndex\
    \ - 1) {\n                        neededMatches++;\n                    }\n  \
    \                  if (gameIndex != guessIndex) {\n                        if\
    \ (gameIndex == guessIndex - 1) {\n                            neededMatches++;\n\
    \                        } else if (gameIndex == guessIndex + 1) {\n         \
    \                   neededMatches++;\n                        }\n            \
    \        }\n                } else if (guessIndex != -1) {\n                 \
    \   if (gameIndex == guessIndex) {\n                        neededMatches++;\n\
    \                    }\n                }\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzdnkg095.cs(77,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpzdnkg095.cs(84,2): error CS1513: } expected

    '
  timestamp: 1659976412
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // We\
    \ want to compare the elements with an absolute difference \n        // and return\
    \ the result in a new list with absolute differences.\n        List<long> result\
    \ = new List<long>(game.Count);\n\n        // This will be the counter for each\
    \ element in the game.\n        int g = 0;\n\n        // Iterate over the game\
    \ and guesses simultaneously.\n        for(int i = 0; i < game.Count && i < guess.Count;\
    \ i++) {\n            // Iterate until the counter doesn't equal the game length.\n\
    \            while (g < game.Count && g < guess.Count) {\n                // If\
    \ they are equal, add an absolute difference to our result list.\n           \
    \     if (game[g] == guess[g]) {\n                    result.Add(guess[g] - game[g]);\n\
    \                    break;\n                }\n                // Increment the\
    \ counter.\n                g++;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8edb7d16c16c4482a97de155f27dea3a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8edb7d16c16c4482a97de155f27dea3a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976413
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        if (game.Count\
    \ != guess.Count) {\n            return new List<long>(game.Count);\n        }\n\
    \        var diffs = new List<long>();\n        for (int i = 0; i < game.Count;\
    \ i++) {\n            diffs.Add(Math.Abs(guess[i] - game[i]));\n        }\n  \
    \      return diffs;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05f02faee31c490c9db639db544c96b5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05f02faee31c490c9db639db544c96b5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976413
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        if (game.Count\
    \ != guess.Count) {\n            throw new ArgumentOutOfRangeException(\"Game\
    \ and guess lists must have the same length.\");\n        }\n\n        var differences\
    \ = new List<long>();\n        for (int i = 0; i < game.Count; i++) {\n      \
    \      var difference = game[i] - guess[i];\n            if (difference < 0) {\n\
    \                difference = difference + game.Count;\n            }\n      \
    \      differences.Add(difference);\n        }\n\n        return differences;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9bd4b2c219541ff9bbf83d1bb4cae3d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9bd4b2c219541ff9bbf83d1bb4cae3d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ results = new List<long>(game.Count);\n        // The difference in each list\
    \ is the absolute difference between the score\n        // and the guess \n  \
    \      int count = 0;\n        foreach (long score in game) {\n            long\
    \ guess = guess.ElementAt(count);\n            long difference = guess - score;\n\
    \            if (difference < 0)\n                difference = -difference;\n\
    \            if (difference == 0 && results.Contains(difference)) {\n        \
    \        // We are getting this result because we weren't able to guess correctly\n\
    \                results.Remove(difference);\n            } else {\n         \
    \       results.Add(difference);\n            }\n            count++;\n      \
    \  }\n        return results;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7_hozut0.cs(27,18): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp7_hozut0.cs(27,32): error CS1061: ''long'' does not contain a definition
    for ''ElementAt'' and no accessible extension method ''ElementAt'' accepting a
    first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmp7_hozut0.cs(27,26): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // Write\
    \ the code here\n        var result = game.Zip(guess, (a, b) => new {a, b, diff\
    \ = a - b}).ToList();\n        var correct = game.Zip(guess, (a, b) => new {a,\
    \ b}).ToList();\n        \n        if (game.Count != guess.Count) {\n        \
    \    throw new ArgumentException(\"Input lists are not of the same length\");\n\
    \        }\n        \n        var diffs = new List<long>();\n        for (int\
    \ i = 0; i < game.Count; i++) {\n            diffs.Add(correct.Where(g => g.a\
    \ == game.ElementAtOrDefault(i)).Sum(x => x.diff));\n        }\n        return\
    \ diffs;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwsf8zb_x.cs(32,88): error CS1061: ''<anonymous type: long a, long b>''
    does not contain a definition for ''diff'' and no accessible extension method
    ''diff'' accepting a first argument of type ''<anonymous type: long a, long b>''
    could be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659976413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // the\
    \ code below uses a list for \"wrong guesses\"\n        // a list for \"correct\
    \ guesses\"\n        // a list for \"difference\"\n        // a list for \"score\"\
    \n        // a list for \"number of wrong guesses\"\n        // a list for \"\
    number of correct guesses\"\n        // a list for \"number of difference\"\n\
    \        // a list for \"number of score\"\n        // a list for \"number of\
    \ wrong guesses\"\n        // a list for \"number of correct guesses\"\n     \
    \   // a list for \"number of difference\"\n        // a list for \"number of\
    \ score\"\n\n        // the code below also creates a list\n        // where if\
    \ an incorrect guess is made, it adds up the number of incorrect guesses\n   \
    \     // the code below also creates a list\n        // where if an incorrect\
    \ guess is made, it adds up the number of incorrect guesses\n        // the code\
    \ below also creates a list\n        // where if an incorrect guess is made, it\
    \ adds up the number of incorrect guesses\n        // the code below also creates\
    \ a list\n        // where if an incorrect guess is made, it adds up the number\
    \ of incorrect guesses\n        // the code below also creates a list\n      \
    \  // where if an incorrect guess is made, it adds up the number of incorrect\
    \ guesses\n        // the code below also creates a list\n        // where if\
    \ an incorrect guess is made, it adds up the number of incorrect guesses\n   \
    \     // the code below also creates a list\n        // where if an incorrect\
    \ guess is made, it adds up the number of incorrect guesses\n        // the code\
    \ below also creates a list\n        // where if an incorrect guess is made, it\
    \ adds up the number of incorrect guesses\n        // the code below also creates\
    \ a list\n        // where if an incorrect guess is made, it adds up the number\
    \ of incorrect guesses\n        // the code below also creates a list\n      \
    \  // where if an incorrect guess is made, it adds up the number of incorrect\
    \ guesses\n        // the code below also creates a list\n        // where if\
    \ an incorrect guess is made, it adds up the number of incorrect guesses\n   \
    \     // the code below also creates a list\n        // where if an incorrect\
    \ guess is made, it adds up the number of incorrect guesses\n        // the code\
    \ below also creates a list\n        // where if an incorrect guess is made, it\
    \ adds up the number of incorrect guesses\n        // the code below also creates\
    \ a list\n        // where if an incorrect guess is made, it adds up the number\
    \ of incorrect guesses\n        // the code below also creates a list\n      \
    \  // where if an incorrect guess is made, it adds up the number of incorrect\
    \ guesses\n        // the code below also creates a list\n        // where if\
    \ an incorrect guess is made, it adds up the number of incorrect guesses\n   \
    \     // the code below also creates a list\n        // \n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmm3qmb82.cs(21,30): error CS0161: ''Problem.Compare(List<long>, List<long>)'':
    not all code paths return a value

    '
  timestamp: 1659976413
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ result = new List<long>(game.Count);\n        bool gameResult = false;\n   \
    \     bool guessResult = false;\n        foreach (long score in game) {\n    \
    \        int index = score.CompareTo(guess[0]);\n            if (index != 0) {\n\
    \                if (index > 0) {\n                    result.Add(0);\n      \
    \              gameResult = false;\n                    guessResult = true;\n\
    \                } else {\n                    result.Add(score.CompareTo(guess[index]));\n\
    \                    guessResult = true;\n                }\n            } else\
    \ {\n                result.Add(0);\n                gameResult = true;\n    \
    \            guessResult = true;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0f951d3a78464109a1afe41f481399a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0f951d3a78464109a1afe41f481399a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        if (game.Count\
    \ != guess.Count) return null;\n        // You need something here that can deal\
    \ with duplicates.\n        var r = new List<long>(game.Count);\n        for (int\
    \ i = 0; i < game.Count; i++) {\n            var g = game[i];\n            var\
    \ g = guess.FirstOrDefault(x => x == g);\n            if (g == null) throw new\
    \ Exception(\"Invalid guess\");\n            var delta = g - game[i];\n      \
    \      if (delta < 0) delta = -delta;\n            if (r[i] == 0) r[i] = delta;\n\
    \            else\n                r[i] = Abs(r[i] - delta);\n        }\n    \
    \    return r;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2z9u2fh2.cs(27,17): error CS0128: A local variable or function named ''g''
    is already defined in this scope

    /tmp/tmp2z9u2fh2.cs(33,24): error CS0103: The name ''Abs'' does not exist in the
    current context

    /tmp/tmp2z9u2fh2.cs(28,17): warning CS0472: The result of the expression is always
    ''false'' since a value of type ''long'' is never equal to ''null'' of type ''long?''

    '
  timestamp: 1659976413
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        if (game.Count\
    \ != guess.Count) throw new Exception(\"Lists must have the same length.\");\n\
    \        var result = new List<long>();\n        var correct = new List<long>();\n\
    \        // I started with the code above and changed it a bit.\n        for (int\
    \ i = 0; i < game.Count; ++i) {\n            var currentScore = game[i];\n   \
    \         var currentGuess = guess[i];\n            if (currentScore == currentGuess)\
    \ {\n                // I added this if statement.\n                result.Add(0L);\n\
    \                correct.Add(0L);\n            } else if (currentScore == currentGuess\
    \ + 1) {\n                result.Add(0L);\n                correct.Add(1L);\n\
    \            } else {\n                result.Add(Math.Abs(currentGuess - currentScore));\n\
    \                correct.Add(0);\n            }\n        }\n        // I changed\
    \ this if statement to return all correct guesses in the\n        // first list.\n\
    \        if (game.Count == guess.Count) {\n            foreach (var item in correct)\
    \ result.Add(item);\n            return result;\n        } else {\n          \
    \  // This is the additional return statement that compares all\n            //\
    \ guesses.\n            return correct.Zip(result, (i, item) => new {guess = item,\
    \ difference = i - item}).Where(item => item.difference != 0L).Select(item =>\
    \ item.guess).ToList();\n        }\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b04971c2d90f469ca3ea509e82fc1fd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b04971c2d90f469ca3ea509e82fc1fd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976414
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        if (game.Count\
    \ != guess.Count) {\n            return new List<long>(game.Count);\n        }\n\
    \        var result = new List<long>(game.Count);\n        for (int i = 0; i <\
    \ game.Count; i++) {\n            if (game[i] == guess[i]) {\n               \
    \ result[i] = 0L;\n            } else {\n                result[i] = Math.Abs(game[i]\
    \ - guess[i]);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].set_Item (System.Int32\
    \ index, T value) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x0004d] in <59f027698cc146eaa68b8abf8e96ed06>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <59f027698cc146eaa68b8abf8e96ed06>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].set_Item (System.Int32\
    \ index, T value) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x0004d] in <59f027698cc146eaa68b8abf8e96ed06>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <59f027698cc146eaa68b8abf8e96ed06>:0 \n"
  stdout: ''
  timestamp: 1659976413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        Console.WriteLine(\"\
    Game is {0} and guesses are {1}.\", game.Count, guess.Count);\n\n        // Use\
    \ a temporary list to store the results to return at the end\n        var results\
    \ = new List<long>(game.Count);\n        foreach (var i in Enumerable.Range(0,\
    \ guess.Count)) {\n            // The difference between the guess and the score\n\
    \            var score = Math.Abs(guess[i] - game[i]);\n            Console.WriteLine(\"\
    Guess {0} is {1} away from game score {2}.\", i, score, game[i]);\n          \
    \  // Store the result for each guess\n            results[i] = score;\n     \
    \   }\n        // Return our results\n        return results;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].set_Item (System.Int32\
    \ index, T value) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x00083] in <49e59fd4f0e645348068124da3df89b7>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <49e59fd4f0e645348068124da3df89b7>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].set_Item (System.Int32\
    \ index, T value) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x00083] in <49e59fd4f0e645348068124da3df89b7>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <49e59fd4f0e645348068124da3df89b7>:0 \n"
  stdout: 'Game is 6 and guesses are 6.

    Guess 0 is 0 away from game score 1.

    '
  timestamp: 1659976413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        int\
    \ guessesLeft = guess.Count;\n\n        var diffs = new List<long>() { };\n  \
    \      long minDiff = game.Min();\n        long maxDiff = game.Max();\n      \
    \  foreach (long score in game) {\n            if (guessesLeft < 1) break;\n \
    \           long guess = guesses.First();\n            guessesLeft--;\n      \
    \      long diff = guess - score;\n            if (diff < minDiff) minDiff = diff;\n\
    \            if (diff > maxDiff) maxDiff = diff;\n            diffs.Add(diff);\n\
    \        }\n\n        if (guessesLeft <= 0) {\n            var diffsDiffed = diffs.Zip(game.Select(score\
    \ => score - minDiff), Tuple.Create)\n            .Where(pair => pair.Item1 <\
    \ pair.Item2)\n            .Select(pair => pair.Item2)\n            .ToList();\n\
    \            return new List<long> {\n                game.Min() - minDiff,\n\
    \                game.Max() - maxDiff,\n                diffsDiffed\n        \
    \    };\n        }\n\n        var diffsDiffed = diffs.Zip(game.Select(score =>\
    \ score - minDiff), Tuple.Create)\n        .Where(pair => pair.Item1 > pair.Item2)\n\
    \        .Select(pair => pair.Item2)\n        .ToList();\n        return new List<long>\
    \ {\n            game.Min() - minDiff,\n            game.Max() - maxDiff,\n  \
    \          diffsDiffed\n        };\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpstmw0a1g.cs(29,18): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpstmw0a1g.cs(29,26): error CS0103: The name ''guesses'' does not exist
    in the current context

    /tmp/tmpstmw0a1g.cs(38,17): error CS0136: A local or parameter named ''diffsDiffed''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpstmw0a1g.cs(45,17): error CS1950: The best overloaded Add method ''List<long>.Add(long)''
    for the collection initializer has some invalid arguments

    /tmp/tmpstmw0a1g.cs(45,17): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpstmw0a1g.cs(56,13): error CS1950: The best overloaded Add method ''List<long>.Add(long)''
    for the collection initializer has some invalid arguments

    /tmp/tmpstmw0a1g.cs(56,13): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659976413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // Your\
    \ code goes here!\n        var results = new List<long>();\n        long diff\
    \ = 0;\n        foreach(var game in game) {\n            foreach(var guess in\
    \ guess) {\n                diff = Math.Abs(guess - game);\n                if\
    \ (diff > 0)\n                    results.Add(diff);\n            }\n        }\n\
    \        return results;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc6_ydy_y.cs(25,21): error CS0136: A local or parameter named ''game''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpc6_ydy_y.cs(26,25): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659976413
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ result = new List<long>();\n        if (game.Count != guess.Count) {\n     \
    \       result.Add(Math.Abs(game.Sum() - guess.Sum()));\n            return result;\n\
    \        }\n        if (game.Count == 0) {\n            return result;\n     \
    \   }\n        \n        var gameSorted = game.OrderByDescending(x => x).ToList();\n\
    \        var guessSorted = guess.OrderByDescending(x => x).ToList();\n       \
    \ \n        int startIndex = 0;\n        while (startIndex < gameSorted.Count\
    \ && startIndex < guessSorted.Count) {\n            var diff = gameSorted[startIndex]\
    \ - guessSorted[startIndex];\n            result.Add(diff);\n            \n  \
    \          if (diff > 0) {\n                // We don't need to worry about increasing\
    \ index because we know that they have already compared those elements.\n    \
    \            break;\n            }\n            startIndex++;\n        }\n   \
    \     \n        if (startIndex < gameSorted.Count) {\n            // The game\
    \ is longer than the guess. So compare them in reverse order.\n            var\
    \ gameSortedReverse = game.OrderByDescending(x => x).ToList();\n            var\
    \ guessSortedReverse = guess.OrderByDescending(x => x).ToList();\n           \
    \ \n            while (startIndex < gameSortedReverse.Count && startIndex < guessSortedReverse.Count)\
    \ {\n                var diff = gameSortedReverse[startIndex] - guessSortedReverse[startIndex];\n\
    \                result.Add(diff);\n                \n                if (diff\
    \ > 0) {\n                    // We don't need to worry about increasing index\
    \ because we know that they have already compared those elements.\n          \
    \          break;\n                }\n                startIndex++;\n        \
    \    }\n        }\n        \n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5494f5259eb54e1788cfcaa96cbd0b2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5494f5259eb54e1788cfcaa96cbd0b2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976414
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        Console.WriteLine(game.Count);\n\
    \        Console.WriteLine(guess.Count);\n        bool gameAssigned = game.Count\
    \ > 0;\n        bool guessAssigned = guess.Count > 0;\n        int length = Math.Min(game.Count,\
    \ guess.Count);\n        int i = 0;\n        List<long> result = new List<long>(length);\n\
    \        for (int x = 0; x < game.Count; x++) {\n            if (!gameAssigned\
    \ && guess.Count > i) {\n                result.Add(0);\n            }\n     \
    \       else {\n                if (gameAssigned && guess.Count > i) {\n     \
    \               result.Add(0);\n                }\n                else if (gameAssigned\
    \ && guess.Count > i && guess[x] != game[x]) {\n                    result.Add(1);\n\
    \                }\n                else if (gameAssigned && !guessAssigned &&\
    \ guess.Count > i) {\n                    result.Add(0);\n                }\n\
    \                else if (gameAssigned && !guessAssigned && guess.Count > i &&\
    \ guess[x] == game[x]) {\n                    result.Add(0);\n               \
    \ }\n                else if (gameAssigned && !guessAssigned && guess.Count >\
    \ i && guess[x] > game[x]) {\n                    result.Add(1);\n           \
    \     }\n                else if (gameAssigned && !guessAssigned && guess.Count\
    \ > i && guess[x] < game[x]) {\n                    result.Add(-1);\n        \
    \        }\n                else if (gameAssigned && !guessAssigned && guess[x]\
    \ > game[x]) {\n                    result.Add(1);\n                }\n      \
    \          else if (gameAssigned && !guessAssigned && guess[x] < game[x]) {\n\
    \                    result.Add(-1);\n                }\n                else\
    \ if (gameAssigned && !guessAssigned && guess[x] == game[x]) {\n             \
    \       result.Add(0);\n                }\n                else if (gameAssigned\
    \ && guess[x] > game[x]) {\n                    result.Add(1);\n             \
    \   }\n                else if (gameAssigned && guess[x] < game[x]) {\n      \
    \              result.Add(-1);\n                }\n                else {\n  \
    \                  result.Add(0);\n                }\n            }\n        \
    \    i++;\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a244f4cee4614998a03aa68ad10df2fc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a244f4cee4614998a03aa68ad10df2fc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: '6

    6

    6

    6

    3

    3

    4

    4

    '
  timestamp: 1659976414
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ result = new List<long>();\n        var differences = new List<long>();\n  \
    \      var minDifference = int.MaxValue;\n        var bestIndex = -1;\n      \
    \  for (int i = 0; i < guess.Count; i++) {\n            var difference = game[i]\
    \ - guess[i];\n            differences.Add(difference);\n            var currentMinDifference\
    \ = difference < 0 ? difference : Math.Abs(difference);\n            if (currentMinDifference\
    \ < minDifference) {\n                minDifference = currentMinDifference;\n\
    \                bestIndex = i;\n            }\n        }\n        if (bestIndex\
    \ >= 0) {\n            int startIndex = bestIndex;\n            var count = bestIndex\
    \ - startIndex + 1;\n            if (count > differences.Count) {\n          \
    \      count = differences.Count;\n            }\n            for (int i = bestIndex;\
    \ i < bestIndex + count; i++) {\n                result.Add(differences[i] - differences[bestIndex]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzklvspyl.cs(31,33): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ result = new List<long>(game.Count);\n        for (int i = 0; i < game.Count;\
    \ i++) {\n            result.Add(0);\n        }\n        int gameCount = 0;\n\
    \        int guessCount = 0;\n        while (guessCount < guess.Count) {\n   \
    \         if (game[gameCount] == guess[guessCount]) {\n                result.Add(0);\n\
    \                gameCount++;\n                guessCount++;\n            } else\
    \ if (game[gameCount] == guess[guessCount] - 1) {\n                result.Add(game[gameCount]);\n\
    \                gameCount++;\n                guessCount++;\n            } else\
    \ {\n                result.Add(Abs(game[gameCount] - guess[guessCount]));\n \
    \               gameCount++;\n                guessCount++;\n            }\n \
    \       }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9l01241w.cs(38,28): error CS0103: The name ''Abs'' does not exist in the
    current context

    '
  timestamp: 1659976413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        int\
    \ count = game.Count;\n        int guessesLeft = guess.Count;\n        int maxIndex\
    \ = 0;\n\n        // Calculate the length of the longest possible score to compare\
    \ the guesses with.\n        for (int i = 0; i != count; i++) {\n            if\
    \ (game[i] > game[maxIndex]) {\n                maxIndex = i;\n            }\n\
    \        }\n\n        List<long> distances = new List<long>();\n        for (int\
    \ i = 0; i != count; i++) {\n            if (game[i] == guess[guessesLeft]) {\n\
    \                distances.Add(0L);\n            } else {\n                distances.Add(Math.Abs(game[i]\
    \ - guess[guessesLeft]));\n            }\n            guessesLeft--;\n       \
    \ }\n        return distances;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x0005c] in <05f94477e04d4b6f8092e6adcd310a0e>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <05f94477e04d4b6f8092e6adcd310a0e>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x0005c] in <05f94477e04d4b6f8092e6adcd310a0e>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <05f94477e04d4b6f8092e6adcd310a0e>:0 \n"
  stdout: ''
  timestamp: 1659976414
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ result = new List<long>(guess);\n        if (game.Count == guess.Count) {\n\
    \            for (int i = 0; i < game.Count; i++) {\n                if (game[i]\
    \ == guess[i]) {\n                    result.RemoveAt(i);\n                }\n\
    \            }\n            return result;\n        }\n        List<long> wrong\
    \ = new List<long>();\n        for (int i = 0; i < game.Count; i++) {\n      \
    \      if (game[i] != guess[i]) {\n                wrong.Add(guess[i]);\n    \
    \        }\n        }\n        if (wrong.Count > 0) {\n            return new\
    \ List<long>();\n        }\n        int diffs = 0;\n        long resultingScore\
    \ = 0;\n        for (int i = 0; i < game.Count; i++) {\n            if (game[i]\
    \ == guess[i]) {\n                resultingScore += game[i];\n            }\n\
    \            if (resultingScore != 0) {\n                diffs += (resultingScore\
    \ - game[i]) / resultingScore;\n            }\n        }\n        if (diffs >\
    \ 0) {\n            for (int i = 0; i < wrong.Count; i++) {\n                diffs\
    \ -= (wrong[i] - game[i]) / wrong[i];\n            }\n        }\n        return\
    \ result.Take(result.Count - diffs).ToList();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe_r7v5sc.cs(47,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpe_r7v5sc.cs(52,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976414
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ differences = new List<long>(game.Count);\n        for (int i = 0; i < game.Count;\
    \ i++) {\n            differences.Add(Math.Abs(game[i] - guess[i]));\n       \
    \ }\n        return differences;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f34d5bdc26de4e8f875d57cfc559c09a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f34d5bdc26de4e8f875d57cfc559c09a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976414
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        if (game.Count\
    \ != guess.Count) {\n            throw new ArgumentException(\"Both lists must\
    \ have the same length\");\n        }\n        long[] scores = new long[game.Count];\n\
    \        long[] guesses = new long[game.Count];\n        for (int i = 0; i < game.Count;\
    \ i++) {\n            if (game[i] != guess[i]) {\n                scores[i] =\
    \ Math.Abs(game[i] - guess[i]);\n            } else {\n                scores[i]\
    \ = 0;\n            }\n            guesses[i] = guess[i];\n        }\n       \
    \ List<long> result = new List<long>(game.Count);\n        for (int i = 0; i <\
    \ game.Count; i++) {\n            long score = Math.Min(scores[i], guesses[i]);\n\
    \            result.Add(score);\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ccab6541c0994c24b7d166189c547f9a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ccab6541c0994c24b7d166189c547f9a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976414
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two lists of scores and guesses of\
    \ equal length, where each index shows a match. \n    // Return a list of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // Your\
    \ code goes here\n        List<long> ans = new List<long>();\n        for (int\
    \ i = 0; i < game.Count - 1; i++) {\n            ans.Add(Convert.ToInt64(guess[i])\
    \ - game[i]);\n        }\n        return ans;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a0f3191224ff4260892e28535bd62df3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a0f3191224ff4260892e28535bd62df3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976414
