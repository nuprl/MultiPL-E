name: HumanEval_91_is_bored
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You'll be given a string of words, and your task is to count\
  \ the number\n    // of boredoms. A boredom is a sentence that starts with the word\
  \ \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n\
  \    // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The sky\
  \ is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public\
  \ static long IsBored(string S) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"\
  Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n\
  \    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"\
  bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.\
  \ will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for\
  \ a walk\")) == (0L));\n    }\n\n}\n"
completions: ["        long count = 0L;\n        foreach (string word in S.Split('.'))\
    \ {\n            if (word.ToLower()[0].Equals(\"i\")) {\n                count++;\n\
    \            }\n        }\n        return count;", "        return S.Length >=\
    \ 3 && \n            (S[0] == 'I' || S[0] == 'i') &&\n            S.Substring(1,\
    \ 3).All(x => x == '.' || x == '?' || x == '!');", "        long count = 0;\n\
    \        foreach (string s in SplitString(S)) {\n            if (s.StartsWith(\"\
    I\"))\n                count++;\n        }\n        return count;", "        int\
    \ count = 0;\n        bool isFirst = true;\n        foreach(string word in S.Split('.',\
    \ '?', '!')){\n            if(isFirst){\n                isFirst = false;\n  \
    \              continue;\n            }\n            if (word == \"I\"){\n   \
    \             count++;\n            }\n        }\n        return count;", "  \
    \      // Your code here\n        long count = 0L;\n        int pos = 0;\n   \
    \     string str = S;\n        while (pos < str.Length) {\n            if (str[pos]\
    \ == '?') {\n                pos = pos + 1;\n                if (pos == str.Length)\
    \ break;\n            } else if (str[pos] == '!') {\n                pos = pos\
    \ + 1;\n                if (pos == str.Length) break;\n            } else if (str[pos]\
    \ == '.') {\n                pos = pos + 1;\n                if (pos == str.Length)\
    \ break;\n            }\n            else\n                pos++;\n        }\n\
    \        if (pos == str.Length)\n            return 0;\n        if (str[0] ==\
    \ 'I')\n            return 1;\n        if (pos > 0 && str.Substring(pos - 1, 1)\
    \ == \"a\") {\n            return 1 + IsBored(str.Substring(0, pos - 1));\n  \
    \      }\n        return 1 + IsBored(str.Substring(0, pos));", "        IList<string>\
    \ Words = S.Split('.').ToList();\n        IList<string> WordsToCount = new List<string>();\n\
    \        bool First = true;\n        bool Last = true;\n        foreach(string\
    \ Word in Words) {\n            if(First && Last) {\n                WordsToCount.Add(Word);\n\
    \            }\n            else if(First && Word == \"I\") {\n              \
    \  First = false;\n            }\n            else if(Last && Word == \"I\") {\n\
    \                Last = false;\n            }\n            else if(Word == \"\
    ?\") {\n                First = true;\n            }\n            else if(Word\
    \ == \"!\") {\n                Last = true;\n            }\n            else {\n\
    \                WordsToCount.Add(Word);\n            }\n        }\n        long\
    \ Count = 0;\n        foreach(string WordToCount in WordsToCount) {\n        \
    \    foreach(string WordToCheck in WordsToCount) {\n                if(WordToCheck.Equals(WordToCount,\
    \ StringComparison.OrdinalIgnoreCase)) {\n                    Count++;\n     \
    \           }\n            }\n        }\n        return Count;", "        string\
    \ t = S;\n        bool flag = false;\n        int boredoms = 0;\n        for (int\
    \ i = 0; i < t.Length; i++) {\n            if (t[i] == 'I') {\n              \
    \  flag = true;\n            }\n            else if (t[i] == t[0].ToUpper()) {\n\
    \                flag = true;\n            }\n            if (flag == true) {\n\
    \                boredoms++;\n                flag = false;\n            }\n \
    \       }\n        return (boredoms);", "        Regex r = new Regex(@\"^I\");\n\
    \        foreach (string s in S) {\n            if (r.IsMatch(s))\n          \
    \      return 1;\n        }\n        return 0;", "        long boredomCount =\
    \ 0;\n        S = S.ToLower();\n        string sArr1 = S.Split('.');\n       \
    \ string sArr2 = S.Split('!');\n        string sArr3 = S.Split('?');\n       \
    \ if (sArr1.Length > 0) {\n            bool firstI = sArr1[0] == \"i\";\n    \
    \        boredomCount += firstI ? 1 : 0;\n            sArr1 = sArr1.Skip(1).ToArray();\n\
    \            for (int i = 0; i < sArr1.Length; i++) {\n                string\
    \ sArr = sArr1[i].Split(' ');\n                string sArr2 = sArr.FirstOrDefault(s\
    \ => s.Equals(\"i\", StringComparison.CurrentCultureIgnoreCase));\n          \
    \      if (sArr2 != null)\n                    boredomCount += sArr2.Length >\
    \ 0 ? 1 : 0;\n            }\n        }\n        if (sArr2.Length > 0) {\n    \
    \        boredomCount += sArr2.Length;\n            sArr2 = sArr2.Skip(1).ToArray();\n\
    \            for (int i = 0; i < sArr2.Length; i++) {\n                string\
    \ sArr = sArr2[i].Split(' ');\n                string sArr3 = sArr.FirstOrDefault(s\
    \ => s.Equals(\"i\", StringComparison.CurrentCultureIgnoreCase));\n          \
    \      if (sArr3 != null)\n                    boredomCount += sArr3.Length >\
    \ 0 ? 1 : 0;\n            }\n        }\n        if (sArr3.Length > 0) {\n    \
    \        boredomCount += sArr3.Length;\n            sArr3 = sArr3.Skip(1).ToArray();\n\
    \            for (int i = 0; i < sArr3.Length; i++) {\n                string\
    \ sArr = sArr3[i].Split(' ');\n                string sArr1 = sArr.FirstOrDefault(s\
    \ => s.Equals(\"i\", StringComparison.CurrentCultureIgnoreCase));\n          \
    \      if (sArr1 != null)\n                    boredomCount += sArr1.Length >\
    \ 0 ? 1 : 0;\n            }\n        }\n        return boredomCount;", "     \
    \   // Declare a variable that holds the number of boredoms\n        long BoredomCount;\n\
    \        // Declare a variable to hold the index of a boredom sentence\n     \
    \   long index = 0;\n        // Declare a variable to hold a character to be checked\
    \ for a boredom\n        char boredom = '?';\n        // Declare a variable to\
    \ hold a character to be checked for a boredom\n        char charToCheck = '?';\n\
    \        // Declare a variable to hold a character to be checked for a boredom\n\
    \        char charToCheck2 = '?';\n        // Declare a variable to hold a character\
    \ to be checked for a boredom\n        char charToCheck3 = '?';\n        // Declare\
    \ a variable to hold the index of a boredom sentence\n        long index2 = 0;\n\
    \        // Declare a variable to hold the index of a boredom sentence\n     \
    \   long index3 = 0;\n        // Declare a variable to hold the index of a boredom\
    \ sentence\n        long index4 = 0;\n        // Declare a variable to hold a\
    \ character to be checked for a boredom\n        char boredom2 = '?';\n      \
    \  // Declare a variable to hold a character to be checked for a boredom\n   \
    \     char charToCheck2 = '?';\n        // Declare a variable to hold a character\
    \ to be checked for a boredom\n        char charToCheck3 = '?';\n        // Declare\
    \ a variable to hold a character to be checked for a boredom\n        char charToCheck4\
    \ = '?';\n        // Declare a variable to hold a character to be checked for\
    \ a boredom\n        char charToCheck5 = '?';\n        // Declare a variable to\
    \ hold a character to be checked for a boredom\n        char charToCheck6 = '?';\n\
    \        // Declare a variable to hold a character to be checked for a boredom\n\
    \        char charToCheck7 = '?';\n        // Declare a variable to hold a character\
    \ to be checked for a boredom\n        char charToCheck8 = '?';\n        // Declare\
    \ a variable to hold a character to be checked for a boredom\n        char charToCheck9\
    \ = '?';\n        // Declare a variable to hold a character to be checked for\
    \ a boredom\n        char charToCheck10 = '?';\n        // Declare a variable\
    \ to hold a character to be checked for a boredom\n        char charToCheck11\
    \ = '?';\n        // Declare a variable to hold a character to be checked for\
    \ a boredom\n        char charToCheck12", "        string str = S;\n        string[]\
    \ strArray = str.Split('.', '?', '!');\n        return strArray.Count(x => x.StartsWith(\"\
    I\"));", "        string boredom = \"I\";\n        string pattern = boredom +\
    \ @\"\\s[^.?!]+\\.\";\n        long count = 0;\n        foreach (string word in\
    \ S.Split('.')) {\n            if (Regex.IsMatch(word, pattern)) {\n         \
    \       count++;\n            }\n        }\n        return count;", "        long\
    \ count = 0L;\n        List<string> words = new List<string>();\n        string\
    \ s = S;\n        string word;\n        string delimiter = \" .?!\";\n       \
    \ string[] wordArray;\n        int j = 0;\n\n        while ((j = s.IndexOf(delimiter,\
    \ j)) != -1)\n        {\n            word = s.Substring(j, (s.Length - j));\n\
    \            words.Add(word);\n            j++;\n        }\n        wordArray\
    \ = words.ToArray();\n\n        foreach (string word in wordArray)\n        {\n\
    \            if (word.ToUpper() == \"I\")\n            {\n                count\
    \ = count + 1;\n            }\n        }\n        return (count);", "        var\
    \ bored = new List<char>();\n        foreach (var c in S)\n            if (c ==\
    \ '.' || c == '?' || c == '!') {\n                if (!bored.Contains('.'))\n\
    \                    bored.Add('.');\n                if (c != '!') bored.Add(c);\n\
    \            }\n        else\n            bored.Add(c);\n        var boredoms\
    \ = bored.Count(c => c == 'I');\n        return (long)boredoms;", "        //\
    \ Your code here.\n        var boredom = 0;\n        foreach (var s in S.Split('.'))\n\
    \        {\n            if (s.StartsWith(\"I\"))\n            {\n            \
    \    boredom++;\n            }\n        }\n        return boredom;", "       \
    \ long count = 0;\n        var words = S.Split('.', '?', '!');\n        for (int\
    \ i = 0; i < words.Length; i++) {\n            if (words[i] == \"I\") {\n    \
    \            count++;\n            }\n        }\n        return count;", "   \
    \     long boredoms = 0;\n        // Create a string that holds the whole sentence.\n\
    \        string sentence = string.Join(\" \", S.Split(new char[] {'.', '?', '!'}));\n\
    \n        // Create a hash set that holds the number of times each word appears.\n\
    \        // If it appears once, then the value is set to 1. \n        // If it\
    \ appears more than once, the value is set to 2. \n        HashSet<string> hash\
    \ = new HashSet<string>(sentence.Split(' ').Select(x => x.ToLower()));\n     \
    \   // Now go through each letter and see if it is the same as \"i\". If it is\n\
    \        // the letter, then increment the number of boredoms.\n        foreach(char\
    \ letter in sentence) {\n            if(letter == 'i') boredoms += 1;\n      \
    \  }\n        return boredoms;", "        var boredomCount = 0;\n        foreach\
    \ (var word in S.Split('.', '?', '!')) {\n            var startsWithI = word.ToLowerInvariant().StartsWith(\"\
    i\");\n            if (startsWithI) boredomCount++;\n        }\n        return\
    \ boredomCount;", "        string Boredom = new string(\".?!\");\n        long\
    \ count = 0;\n        foreach (string word in S.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries))\
    \ {\n            if (Boredom.Contains(word[0])) {\n                count++;\n\
    \            }\n        }\n        return count;", "        var count = 0;\n \
    \       for (int i = 0; i < S.Length; i++) {\n            if (S[i] == '.' || S[i]\
    \ == '!' || S[i] == '?') {\n                count++;\n            }\n        }\n\
    \        return count;", "        // TODO: Write your code here\n        var counts\
    \ = new Dictionary<string, long>();\n        var delimiters = new char[] { '.',\
    \ '?', '!' };\n        foreach(var word in S.Split(' '))\n        {\n        \
    \    counts[word] = counts.ContainsKey(word) ? counts[word] + 1 : 1;\n       \
    \ }\n        var boredom = counts.ContainsKey(\"I\") ? counts[\"I\"] : 0;\n  \
    \      return boredom;", "        long ret = 0;\n        bool first = true;\n\
    \        foreach (string sentence in S.Split(new char[] {'.', '?', '!'},\n   \
    \                                     StringSplitOptions.RemoveEmptyEntries))\
    \ {\n            if (first) {\n                first = false;\n              \
    \  ret += s.IndexOf(\"I\", 0L);\n                continue;\n            }\n  \
    \          bool Is = s.StartsWith(\"I\", 0L);\n            bool lastIs = s.EndsWith(\"\
    I\", 0L);\n            if (Is == lastIs) {\n                ret += s.Length -\
    \ s.IndexOf(\"I\", 0);\n            }\n        }\n        return ret;", "    \
    \    List<string> words = S.Split('.').ToList();\n        List<string> boredoms\
    \ = new List<string>();\n        foreach(string word in words) {\n           \
    \ if(word.StartsWith(\"I\")) {\n                boredoms.Add(word);\n        \
    \    }\n        }\n        return boredoms.Count;", "        string pattern =\
    \ @\"\\b(I\\b.+?[.?!])\";\n        Match m = Regex.Match(S, pattern);\n      \
    \  if (m.Success)\n            return ((long)m.Groups[1].Length);\n        else\n\
    \            return 0;", "        var result = S.Split('.').Where(a => a.StartsWith(\"\
    I\")).Count();\n        return (long) result;", "        List<string> boredoms\
    \ = new List<string>();\n        foreach (string word in S.Split('.', '?', '!').ToList())\
    \ {\n            if (word == \"I\") {\n                boredoms.Add(word);\n \
    \           }\n        }\n        if (boredoms.Count == 0) {\n            return\
    \ 0;\n        } else {\n            double boredoms_sum = 0;\n            foreach\
    \ (string boredom in boredoms) {\n                boredoms_sum += boredoms.Count(b\
    \ => b == boredom);\n            }\n            return boredoms_sum;\n       \
    \ }", "        long result = 0;\n\n        foreach (var s in S) {\n          \
    \  if (s.Equals(\"I\", StringComparison.InvariantCultureIgnoreCase)) {\n     \
    \           ++result;\n            }\n        }\n        return result;", "  \
    \      var Slow = S;\n        string Sentence = Slow;\n        var Boring = new\
    \ List<string> { \"I\" };\n        var Count = 0;\n        while (Slow != \"\"\
    ) {\n            Boring.Clear();\n            Boring.AddRange(Slow.Split(\".?!\"\
    ));\n            Boring.RemoveAll(x => x == \"\");\n            if (Boring.Contains(\"\
    I\") && !Boring.Contains(\"I.\")) {\n                Count = Count + 1;\n    \
    \        }\n            Slow = Slow.Substring(0, Slow.IndexOf(\".\"));\n     \
    \       Sentence = Sentence.Substring(0, Sentence.IndexOf(\".\"));\n        }\n\
    \        return Count;", "        // Implement the boredoms counter here\n   \
    \     // You start by counting the number of periods. When you see a period (.),\n\
    \        // you increment the counter. When you see an exclamation (!), you decrement\n\
    \        // the counter. After you've seen the three letter words, you subtract\
    \ the\n        // counter.\n        var periods = 0;\n        // You start by\
    \ counting the number of exclamations. When you see an exclamation\n        //\
    \ (!), you decrement the counter. When you see an exclamation (!), you decrement\n\
    \        // the counter.\n        var exclamations = 0;\n        // You start\
    \ by counting the number of question marks. When you see a question\n        //\
    \ mark (?), you increment the counter. When you see a question mark (?),\n   \
    \     // you decrement the counter.\n        var questionMarks = 0;\n        //\
    \ You start by counting the number of periods. When you see a period (.),\n  \
    \      // you increment the counter. When you see an exclamation (!), you decrement\n\
    \        // the counter. After you've seen the three letter words, you subtract\
    \ the\n        // counter.\n        var periods = 0;\n        var firstWord =\
    \ S.Split(' ')[0];\n        var firstWords = firstWord.Split('.', '?', '!');\n\
    \        foreach (var word in firstWords) {\n            if (word == \".\") {\n\
    \                periods++;\n            } else if (word == \"!\") {\n       \
    \         exclamations--;\n            } else if (word == \"?\") {\n         \
    \       questionMarks++;\n            }\n        }\n        var boredoms = periods\
    \ - exclamations - questionMarks - firstWords.Length;\n        return boredoms;",
  "        int count = 0;\n        string sentence = S.ToLower();\n        char[]\
    \ boredom = sentence.ToCharArray();\n        ArrayList words = new ArrayList();\n\
    \        int index = 0;\n        while (index < boredom.Length) {\n          \
    \  if (boredom[index] == 'i') {\n                words.Add(sentence.Substring(0,\
    \ index));\n                index++;\n            }\n            index++;\n  \
    \      }\n        for (int i = 0; i < words.Count; i++) {\n            bool flag\
    \ = false;\n            foreach (string word in words) {\n                if (word.Contains(sentence))\
    \ {\n                    flag = true;\n                    break;\n          \
    \      }\n            }\n            if (flag) {\n                count++;\n \
    \           }\n        }\n        return (long)count;", "        ArrayList list\
    \ = new ArrayList();\n        foreach (string item in S.Split('.')) {\n      \
    \      string sentence = item;\n            string sentenceSplit = sentence.Split('?');\n\
    \            string sentenceSplit2 = sentence.Split('!');\n            foreach\
    \ (string sentenceSplit In sentenceSplit) {\n                if (item == \"I\"\
    ) {\n                    list.Add(sentenceSplit);\n                }\n       \
    \     }\n            foreach (string sentenceSplit2 In sentenceSplit2) {\n   \
    \             if (item == \"I\") {\n                    list.Add(sentenceSplit2);\n\
    \                }\n            }\n        }\n        ArrayList arraylist = new\
    \ ArrayList();\n        foreach (string item in list) {\n            string[]\
    \ arrays = item.Split(' ');\n            arraylist.Add(arrays);\n        }\n \
    \       long count = 0;\n        foreach (string[] array in arraylist) {\n   \
    \         if (array[0] == \"I\") {\n                count++;\n            }\n\
    \        }\n        return count;", "        HashSet<string> words = new HashSet<string>();\n\
    \        HashSet<string> sentences = new HashSet<string>();\n        foreach (string\
    \ s in S.Split('.', '?', '!'))\n            sentences.Add(s);\n        foreach\
    \ (string s in sentences) {\n            int index = -1;\n            while (index\
    \ != -1) {\n                index = s.IndexOf('I', index + 1);\n             \
    \   if (index != -1)\n                    words.Add(s.Substring(0, index));\n\
    \            }\n        }\n        return words.Count;", "        // Create a\
    \ string array of all sentences.\n        char[] splitter = { ' ', '.', '?', '!'\
    \ };\n        string[] S = S.Split(splitter);\n\n        long boredoms = 0;\n\
    \        // Create a string array of words in each sentence.\n        char[] wordArray\
    \ = S.Select(c => c).ToArray();\n\n        // Use LINQ to find the first word.\n\
    \        string firstWord = S.First();\n        boredoms += wordArray.Count(s\
    \ => s.StartsWith(firstWord)) ?? 0;\n        return boredoms;", "        var words\
    \ = S.Split(new char[] { '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries).ToList();\n\
    \        return words.Count(w => w.StartsWith(\"I\", StringComparison.InvariantCultureIgnoreCase));",
  "        long ans = 0L;\n        foreach (string word in S.Split(new char[] {'.',\
    \ '?', '!'}, StringSplitOptions.RemoveEmptyEntries)) {\n            string w =\
    \ word.ToLower();\n            if (w == \"i\") {\n                ans += 1;\n\
    \            }\n        }\n        return ans;", "        long count = 0;\n  \
    \      foreach (string line in S.Split('.', '?', '!')) {\n            foreach\
    \ (string word in line.Split(',')) {\n                long l = 0;\n          \
    \      if (word == \"I\") l++;\n                if (word == \"the\") l++;\n  \
    \              count += l;\n            }\n        }\n        return count;",
  "        int i;\n        long count = 0;\n        for (i = 0; i < S.Length; i++)\
    \ {\n            if ((S[i] == '.') || (S[i] == '?') || (S[i] == '!')) {\n    \
    \            count = count + 1;\n            }\n        }\n        return count;",
  "        string result = \"\";\n        for (int i = 0; i <= S.Length; i++) {\n\
    \            if (S[i] == '.') {\n                result = result + \"0\";\n  \
    \          } else if (S[i] == '?') {\n                result = result + \"1\"\
    ;\n            } else if (S[i] == '!') {\n                result = result + \"\
    1\";\n            } else if (S[i] != ' ' && S[i] != '?' && S[i] != '.') {\n  \
    \              result = result + \"1\";\n            }\n        }\n        return\
    \ (long.Parse(result));", "        string [] strList = S.Split('.','?','!');\n\
    \        long boredoms = 0;\n        foreach (string str in strList) {\n     \
    \       if (str.Contains(\"I\")) {\n                boredoms += 1;\n         \
    \   }\n        }\n        return boredoms;", "        StringBuilder buf = new\
    \ StringBuilder();\n        foreach (char c in S) {\n            if (c == '.'\
    \ || c == '?' || c == '!') buf.Append(c);\n        }\n        string bufStr =\
    \ buf.ToString();\n        bool boredom = false;\n        for (int i = 0; i <\
    \ bufStr.Length; i++) {\n            if (bufStr[i] == 'I') boredom = true;\n \
    \       }\n        if (boredom) return 1L;\n        else return 0L;", "      \
    \  int n = S.Length;\n        long[] res = new long[n];\n        string boredom\
    \ = \"\";\n        int boredomCount = 0;\n        int i = 0;\n        int count\
    \ = 0;\n        bool first = true;\n        while (i < n) {\n            char\
    \ c = S[i];\n            boredom += c;\n            if (first) {\n           \
    \     if (c == '.' || c == '?' || c == '!')\n                    first = false;\n\
    \                else\n                    boredomCount++;\n            } else\
    \ {\n                if (c == '.' || c == '?' || c == '!')\n                 \
    \   boredomCount++;\n                else\n                    break;\n      \
    \      }\n            i++;\n        }\n        for (int j = 0; j < n; j++)\n \
    \       {\n            if (boredom[j] == boredom[0])\n            {\n        \
    \        res[j] = 0;\n            }\n            else\n            {\n       \
    \         res[j] = 1;\n            }\n        }\n        return boredomCount;",
  "        S = S.Trim().Replace(\". \", \" . \");\n        S = S.Trim().Replace(\"\
    ? \", \" ?\");\n        S = S.Trim().Replace(\"! \", \" !\");\n        int i =\
    \ 0;\n        long result = 0;\n        foreach (string w in S.Split(' ')){\n\
    \            if (w.StartsWith(\"I\")){\n                i++;\n            }\n\
    \        }\n        result = i;\n        return result;", "        long l = 0;\n\
    \        foreach (string s in S.Split('.', '?','!')) {\n            if (s.StartsWith(\"\
    I\")) {\n                l++;\n            }\n        }\n        return l;", " \
    \       bool isBored = false;\n        string word = \" \";\n        string boredomSentence\
    \ = \"\";\n        int index = 0;\n        char[] arr = S.ToCharArray();\n   \
    \     while (index < S.Length) {\n            // Ignore '.', '?' and '!'\n   \
    \         if ((arr[index] == '.') || (arr[index] == '?') || (arr[index] == '!'))\
    \ {\n                if (index == 0) {\n                    isBored = true;\n\
    \                }\n                index++;\n                continue;\n    \
    \        }\n            word = arr[index];\n            // Ignore empty words\n\
    \            if (word == \"\") {\n                isBored = false;\n         \
    \       index++;\n                continue;\n            }\n            // Find\
    \ beginning of boredom sentence\n            if (word == \"I\") {\n          \
    \      boredomSentence = arr.Substring(index + 1, (arr.Length - 1) - index);\n\
    \                index++;\n                continue;\n            }\n        \
    \    index++;\n        }\n        // Find beginning of boredom sentence\n    \
    \    if (index == 0)\n            isBored = true;\n        return (isBored ? (Convert.ToInt64(boredomSentence)\
    \ - 1) : 0L);", "        var boredoms = new Dictionary<string, long>();\n    \
    \    var boredomCount = 0;\n\n        foreach (var sentence in S.Split('.')) {\n\
    \            if (sentence.StartsWith(\"I\")) {\n                boredoms.Add(sentence,\
    \ 1L);\n                boredomCount++;\n            }\n        }\n\n        return\
    \ boredomCount;", "        // YOUR CODE HERE\n        long boredoms = 0;\n   \
    \     for (int i = 0; i < S.Length; i++)\n        {\n            if (S[i] == 'I')\n\
    \            {\n                boredoms++;\n            }\n        }\n      \
    \  return boredoms;", "        var boredomCount = 0;\n        var splits = S.Split('.',\
    \ '?', '!');\n        foreach (var word in splits)\n        {\n            var\
    \ firstWord = word[0];\n            if (firstWord == \"I\")\n            {\n \
    \               boredomCount++;\n            }\n        }\n        return (long)boredomCount;",
  "        string words = \"I\";\n        string boredom = String.Empty;\n       \
    \ List<char> chars = new List<char>();\n        for (int i = 0; i < S.Length;\
    \ i++) {\n            if (S.Substring(0, i).Equals(words)) { \n              \
    \  boredom = S.Substring(i);\n            }\n            chars.Add(S[i]);\n  \
    \      }\n        chars.Add(boredom.First());\n        return CalculateBoredom(chars);",
  "        string w = \"I\";\n        if (S == null || S.Length == 0)\n          \
    \  throw new ArgumentNullException();\n        if (S.StartsWith(w))\n        \
    \    return 1L;\n        return 0;", "        long x = 0;\n        foreach(string\
    \ str in S.Split(new string[] { \".\", \"?\", \"!\" }, StringSplitOptions.None))\
    \ {\n            if(str.StartsWith(\"I\")) x++;\n        }\n        return x;",
  "        var result = new Dictionary<string, long>();\n        S.Split('.', '?',\
    \ '!').ToList().ForEach(word =>\n        {\n            if (!result.ContainsKey(word))\n\
    \            {\n                result.Add(word, 0);\n            }\n        \
    \    result[word]++;\n        });\n        return result.ContainsKey(\"I\") ?\
    \ result[\"I\"] : 0L;", "        // Return 0 if no sentence is found.\n      \
    \  if (S == null) return 0L;\n        String[] S = S.Split('.', '?', '!');\n \
    \       long count = 0L;\n        foreach (String s in S) {\n            if (s.StartsWith(\"\
    I\"))\n                count += 1;\n        }\n        return count;", "     \
    \   long boredoms = 0;\n        string sLower = S.ToLower();\n        string[]\
    \ words = sLower.Split(' ');\n        foreach (string word in words) {\n     \
    \       if (word.StartsWith(\"i\")) {\n                boredoms += 1;\n      \
    \      }\n        }\n        return boredoms;", "        long total = 0;\n   \
    \     foreach (string line in S) {\n            if (line == \".\") total++;\n\
    \            else if (line == \"?\") total++;\n            else if (line == \"\
    !\") total++;\n            else total = 0;\n        }\n        return total;",
  "        HashSet<string> words = new HashSet<string>();\n        StringBuilder sb\
    \ = new StringBuilder();\n        foreach(string line in S.Split(new char[] {\
    \ '.', '?', '!' })) {\n            words.UnionWith(line.Split());\n        }\n\
    \        long count = 0;\n        foreach(string word in words) {\n          \
    \  if (word.StartsWith(\"I\")) {\n                count++;\n            }\n  \
    \      }\n        return count;", "        var list = new List<string>();\n  \
    \      foreach (var item in S) {\n            if (list.Contains(\".\")) {\n  \
    \              if (list.Contains(\"?\")) {\n                    if (list.Contains(\"\
    !\")) {\n                        if (list.Contains(\"I\")) return list.Count;\n\
    \                    }\n                }\n            }\n            list.Add(item);\n\
    \        }\n        return 0;", "        // your code goes here\n        int count\
    \ = S.Count(s => s == '.' || s == '?' || s == '!') -2;\n        return count;",
  "        // We'll start by creating a collection of \"sentences\" delimited by dots,\
    \ question marks and exclamation marks.\n        // Each sentence will be a List<string>\
    \ where each string is a word in the sentence.\n        List<List<string>> sentences\
    \ = StringToWords(S).ToList().Select(s => new List<string> { s }).ToList();\n\n\
    \        // We'll start by creating a counter for the number of boredoms.\n  \
    \      long boredoms = 0;\n\n        // We'll then iterate over the sentences,\
    \ counting the number of boredoms for each one.\n        foreach (List<string>\
    \ sentence in sentences) {\n            boredoms += sentence.FirstOrDefault(w\
    \ => w.StartsWith(\"I\")).Count;\n        }\n\n        // We'll return this value\
    \ to the caller.\n        return boredoms;", "        if (S == null) throw new\
    \ ArgumentNullException(\"S\");\n        long boredoms = 0;\n        bool boredomWord\
    \ = false;\n        foreach (char c in S) {\n            if ((c == '.') || (c\
    \ == '?') || (c == '!')) {\n                if (boredomWord) {\n             \
    \       boredomWord = false;\n                } else {\n                    boredoms++;\n\
    \                    boredomWord = true;\n                }\n            } else\
    \ {\n                boredomWord = false;\n            }\n        }\n        return\
    \ boredoms;", "        int boredom = 0;\n        foreach (var c in S) {\n    \
    \        if (c == 'I') {\n                boredom++;\n            }\n        }\n\
    \        return (boredom);", "        // Convert the string to an array of characters\n\
    \        char[] Cs = s.ToCharArray();\n        // Use a hash map to keep track\
    \ of what has been seen before\n        HashSet<char> seen = new HashSet<char>();\n\
    \        // Return 0 if there are no boredoms or the length of the string is 0\n\
    \        if (Cs.Length == 0 || Cs.FirstOrDefault() == '.')\n            return\
    \ 0;\n        // If the first character is 'I', increment the number of boredoms\n\
    \        if (Cs.FirstOrDefault() == 'I')\n            return (long)seen.Count;\n\
    \        // If the first character is neither 'I' nor '!', then there are either\
    \ no\n        // boredoms or there are some boredoms \n        foreach (char c\
    \ in Cs)\n            // If the current character has not been seen before, then\
    \ add it to the\n            // seen hash set \n            if (!seen.Contains(c))\n\
    \                seen.Add(c);\n            // If the current character has been\
    \ seen before, then decrement the \n            // number of boredoms \n     \
    \       return seen.Count - (long)seen.Count;", "        long b=0;\n        foreach\
    \ (string s in S.Split('.','?','!'))\n        {\n            if (s[0]==\"I\")\n\
    \            {\n                b++;\n            }\n        }\n        return\
    \ b;", "        long count = 0;\n        foreach (var word in S.Split('.')) {\n\
    \            if (word.StartsWith(\"I\")) count++;\n        }\n        return count;",
  "        string words = S.Split(new char[] { '.', '?' }, StringSplitOptions.RemoveEmptyEntries)\n\
    \                          .ToLower()\n                          .Aggregate((a,\
    \ b) => a + \". \" + b).Split(new char[] { '!' }, StringSplitOptions.RemoveEmptyEntries)\n\
    \                          .ToLower();\n        long count = 0;\n        foreach\
    \ (string word in words) {\n            if (word.StartsWith(\"i\"))\n        \
    \        count++;\n        }\n        return count;", "        var boredomCount\
    \ = 0;\n        foreach (char c in S) {\n            if (c == 'I')\n         \
    \       boredomCount++;\n        }\n        return boredomCount;", "        var\
    \ boredoms = (from c in S\n                       where c == '.' || c == '?' ||\
    \ c == '!'\n                       select c).Count();\n        return (long)boredoms;",
  "        // The hash value has three bits, each of which is set if either the 'I'\
    \ or '!' character appears.\n        // Thus, to check if an input starts with\
    \ 'I', we need to check if the third bit is set.\n        ulong hash = long.Parse(S,\
    \ System.Globalization.NumberStyles.AllowHexSpecifier);\n        return (hash\
    \ >> 63) & 31;", "        // You can change the code below to solve this problem.\n\
    \        long[] counters = new long[4] { 0, 0, 0, 0, 0 };\n        S.ToCharArray().ToList().ForEach(c\
    \ => {\n            if (c == '?' || c == '.' || c == '!') counters[c]++;\n   \
    \     });\n\n        // Your code goes here!\n        return counters[0];", " \
    \       long boredomCount = 0;\n        foreach (string sentence in SplitSentences(S))\
    \ {\n            if (sentence.StartsWith(\"I\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                boredomCount++;\n            }\n        }\n        return\
    \ boredomCount;", "        List<string> words = S.Split(new[] { ' ', '.', '?',\
    \ '!' }, StringSplitOptions.RemoveEmptyEntries).ToList();\n        var matches\
    \ = words.Select(w =>\n        {\n            if (w.StartsWith(\"I\"))\n     \
    \           return w.Length;\n            return null;\n        }).Where(n =>\
    \ n != null).ToList();\n\n        return matches.Sum();", "        long boredom\
    \ = 0;\n        foreach (string sentence in S.Split('.')) {\n            boredom\
    \ += sentence.Count(p => p == 'I') + sentence.Count(p => p == '!') + sentence.Count(p\
    \ => p == '?');\n        }\n        return boredom;", "        // Your code here\n\
    \        string boredoms = \"I love this weather !\";\n        string boredom1\
    \ = \"I\";\n        string boredom2 = \".\";\n        string boredom3 = \"!\"\
    ;\n        string boredom4 = \"?\";\n        int lenboredom = boredoms.Length;\n\
    \        int boredomcount = 0;\n        char[] charboredom = boredoms.ToCharArray();\n\
    \        string boredom1 = \"I\";\n        int boredom1index = -1;\n        int\
    \ boredom2index = -1;\n        int boredom3index = -1;\n        int boredom4index\
    \ = -1;\n        string boredom5 = boredoms + boredoms + boredoms + boredoms;\n\
    \        foreach (char boredom in boredoms)\n        {\n            if (boredom.ToUpper()\
    \ == boredom1)\n            {\n                boredom1index = charboredom.ToList().IndexOf(boredom);\n\
    \            }\n            if (boredom.ToUpper() == boredom2)\n            {\n\
    \                boredom2index = charboredom.ToList().IndexOf(boredom);\n    \
    \        }\n            if (boredom.ToUpper() == boredom3)\n            {\n  \
    \              boredom3index = charboredom.ToList().IndexOf(boredom);\n      \
    \      }\n            if (boredom.ToUpper() == boredom4)\n            {\n    \
    \            boredom4index = charboredom.ToList().IndexOf(boredom);\n        \
    \    }\n            if (boredom.ToUpper() == boredom5)\n            {\n      \
    \          boredom4index = charboredom.ToList().IndexOf(boredom);\n          \
    \  }\n            if (boredom.ToUpper() == boredom1)\n            {\n        \
    \        boredom1index = charboredom.ToList().IndexOf(boredom);\n            }\n\
    \            if (boredom.ToUpper() == boredom1)\n            {\n             \
    \   boredom1index = charboredom.ToList().IndexOf(boredom);\n            }\n  \
    \          if (boredom.ToUpper() == boredom4)\n            {\n               \
    \ boredom4index = charboredom.ToList().IndexOf(boredom);\n            }\n    \
    \        if (boredom.ToUpper() == boredom2)\n            {\n                boredom2index\
    \ = charboredom.ToList().IndexOf(boredom);\n            }\n            if (boredom.ToUpper()\
    \ == boredom3)\n            {", "        long boredoms = 0;\n        foreach (string\
    \ str in S) {\n            if (str.StartsWith(\"I\")) boredoms += 1;\n       \
    \ }\n        return boredoms;", "        var boredoms = (from s in S.Split(new\
    \ char[] {'.', '?', '!'})\n                      where s.StartsWith(\"I\")\n \
    \                     select s);\n        var boredomCount = boredoms.Count();\n\
    \        return (long)boredomCount;", "        bool first = true;\n        string\
    \ currentToken = null;\n        long boredomCount = 0;\n\n        foreach (string\
    \ token in S.Split('.', '?', '!')) {\n            if (token.StartsWith(\"I\"))\
    \ {\n                if (!first) {\n                    boredomCount += 1;\n \
    \               }\n                first = false;\n            }\n           \
    \ else {\n                currentToken = token;\n            }\n        }\n  \
    \      return boredomCount;", "        long count = 0;\n        foreach (var word\
    \ in S.Split('.')) {\n            count += Count(word);\n        }\n        return\
    \ count;", "        HashSet<string> Set = new HashSet<string>();\n        HashSet<string>\
    \ Set2 = new HashSet<string>();\n        long Count = 0;\n        foreach (var\
    \ item in S) {\n            if (Set.Contains(item)) {\n                Count++;\n\
    \            }\n            else if (Set2.Contains(item)) {\n                Count++;\n\
    \            }\n            Set.Add(item);\n        }\n\n        Set2.Add(\"\"\
    );\n        foreach (var item in S) {\n            if (Set2.Contains(item)) {\n\
    \                Count++;\n            }\n            Set2.Add(item);\n      \
    \  }\n        return Count;", "        return ((S[0] == 'I') ? 1L : 0L);", " \
    \       S = S.Replace(\".\", \"\");\n        S = S.Replace(\"?\", \"\");\n   \
    \     S = S.Replace(\"!\", \"\");\n        S = S.Replace(\"I\", \"\");\n     \
    \   S = S.Replace(\"A\", \"\");\n        S = S.Replace(\"U\", \"\");\n       \
    \ S = S.Replace(\"R\", \"\");\n        S = S.Replace(\"S\", \"\");\n        S\
    \ = S.Replace(\"O\", \"\");\n        S = S.Replace(\"N\", \"\");\n        S =\
    \ S.Replace(\"G\", \"\");\n        S = S.Replace(\"H\", \"\");\n        S = S.Replace(\"\
    C\", \"\");\n        S = S.Replace(\"D\", \"\");\n        S = S.Replace(\"F\"\
    , \"\");\n        S = S.Replace(\"J\", \"\");\n        S = S.Replace(\"K\", \"\
    \");\n        S = S.Replace(\"L\", \"\");\n        S = S.Replace(\"M\", \"\");\n\
    \        S = S.Replace(\"P\", \"\");\n        S = S.Replace(\"Q\", \"\");\n  \
    \      S = S.Replace(\"V\", \"\");\n        S = S.Replace(\"W\", \"\");\n    \
    \    S = S.Replace(\"Z\", \"\");\n        S = S.Replace(\"X\", \"\");\n      \
    \  S = S.Replace(\"Y\", \"\");\n        S = S.Replace(\"E\", \"\");\n        S\
    \ = S.Replace(\"Z\", \"\");\n        S = S.Replace(\"B\", \"\");\n        S =\
    \ S.Replace(\"G\", \"\");\n        S = S.Replace(\"D\", \"\");\n        S = S.Replace(\"\
    E\", \"\");\n        S = S.Replace(\"E\", \"\");\n        S = S.Replace(\"F\"\
    , \"\");\n        S = S.Replace(\"I\", \"\");\n        S = S.Replace(\"L\", \"\
    \");\n        S = S.Replace(\"M\", \"\");\n        S = S.Replace(\"P\", \"\");\n\
    \        S = S.Replace(\"R\", \"\");\n        S = S.Replace(\"S\", \"\");\n  \
    \      S = S.Replace(\"T\", \"\");\n        S = S.Replace(\"U\", \"\");\n    \
    \    S = S.Replace(\"V\", \"\");\n        S = S.Replace(\"W\", \"\");\n      \
    \  S = S.Replace(\"X\", \"\");\n        S = S.Replace(\"Y\", \"\");\n        S\
    \ = S.Replace(\"Z\", \"\");\n        S = S.Replace(\"Z\", \"\");\n        S =\
    \ S.Replace(\"B\", \"\");\n        S = S.Replace(\"A\", \"\");\n        S = S.Replace(\"\
    Z\", \"\");\n        S = S.Replace(\"V\", \"\");\n        S = S.Replace(\"B\"\
    , \"\");\n        S = S.Replace(\"B\", \"\");\n        S = S.Replace(\"G\", \"\
    \");\n        S = S.Replace(\"C\", \"\");\n        S = S.Replace(\"L\", \"\");\n",
  "        // Your code here\n        string result = \"\";\n        for (int i =\
    \ 0; i < S.Length; i++)\n        {\n            if (S[i] == '.')\n           \
    \ {\n                result = result + \"(\" + Convert.ToInt32(i) + \")\" + \"\
    \\n\";\n            }\n        }\n        return Convert.ToInt32(result);", " \
    \       // Your code here\n        var boredoms = S.Split('.')\n            .Where(s\
    \ => s == \"I\" || s == \"i\")\n            .Select(s => s.Split('?')\n      \
    \      .Count() ?? (s.Split('!')\n            .Count() ?? 1))).Sum();\n\n    \
    \    Debug.Assert(boredoms != 0);\n        return boredoms;", "        // Your\
    \ code here.\n        \n        var count = 0;\n        \n        // Loop through\
    \ all chars in string\n        foreach(var c in S) {\n            // Check if\
    \ char is 'I', '!', '?' or '.'\n            // If it is, increase counter by 1\n\
    \            if (c == '!' || c == '?' || c == '.') {\n                count++;\n\
    \            }\n        }\n        \n        return count;", "        long count\
    \ = 0L;\n        for (int i = 0; i < S.Length; i++) {\n            char c = S[i];\n\
    \            if ((c != '.') && (c != '?') && (c != '!')) {\n                if\
    \ (c == 'I')\n                    count++;\n            }\n        }\n       \
    \ return count;", "        long boredoms = 0;\n        string words = \"I!?!?.!\"\
    ;\n        string[] sentence = S.Split('.', '?', '!');\n        foreach (string\
    \ s in sentence) {\n            if (s.StartsWith(\"I\")) {\n                boredoms\
    \ += 1;\n            }\n        }\n        return boredoms;", "        var result\
    \ = new List<int>();\n        foreach (var word in S.Split('.')) {\n         \
    \   if (word.StartsWith(\"I\", StringComparison.InvariantCultureIgnoreCase)) {\n\
    \                result.Add(1);\n            }\n        }\n        return result.Count();",
  "        long boredoms = 0;\n        foreach (string sentence in S.Split(new char[]\
    \ {'.', '?', '!'}, StringSplitOptions.RemoveEmptyEntries)) {\n            if (sentence.StartsWith(\"\
    I\")) {\n                boredoms++;\n            }\n        }\n        return\
    \ boredoms;", "        int L = 0;\n        char[] Char = S.ToCharArray();\n  \
    \      foreach(char C in Char)\n            if(C == '.' || C == '?' || C == '!')\
    \ L++;\n        return L;", "        Debug.Assert(S != null);\n        Debug.Assert(S\
    \ != \"\");\n        var dict = new Dictionary<char, long>();\n        foreach\
    \ (var s in S.Split(new char[] { '.', '?', '!' })) {\n            if (s.StartsWith(\"\
    I\"))\n                dict[s[0]] = (long)1;\n        }\n        return dict.Values.Max();",
  "        long boredoms = 0L;\n        foreach (var sentence in S.Split('.', '?',\
    \ '!')) {\n            if (sentence.StartsWith(\"I\")) {\n                boredoms++;\n\
    \            }\n        }\n        return boredoms;", "        foreach (string\
    \ s in S.Split(new char[] { '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries))\
    \ {\n            if (s.StartsWith(\"I\")) {\n                return (long)1;\n\
    \            }\n        }\n        return (long)0;", "        long totalBoredoms\
    \ = 0;\n        S = S.Replace(\"?\", \"\").Replace(\".\", \"\").Replace(\"!\"\
    , \"\");\n        char[] splitChar = new char[] { '.', '!', '?' };\n        foreach\
    \ (var word in S.Split(' '))\n            if (word.StartsWith(\"I\"))\n      \
    \          totalBoredoms += 1;\n        return totalBoredoms;", "        long\
    \ boredoms = 0;\n        foreach (string sentence in S.Split('.')) {\n       \
    \     if (sentence.ToLower().StartsWith(\"i\")) { boredoms++; }\n        }\n \
    \       return boredoms;", "        S = S.Replace(\".\", \"\").Replace(\"?\",\
    \ \"\").Replace(\"!\", \"\");\n        var words = S.Split(' ');\n        int\
    \ count = 0;\n        for (int i = 0; i < words.Length; i++) {\n            bool\
    \ bOk = words[i].StartsWith(\"I\");\n            count += bOk;\n        }\n  \
    \      return count;", "        var regex = new Regex(@\"\\b(?:I|i|We|Were)\\\
    b\");\n        return regex.Matches(S).Count;", "        // TODO: Implement the\
    \ IsBored method here\n        return 0;", "        if (S == null) throw new ArgumentNullException(\"\
    S\");\n        long N = 0L;\n        foreach (char c in S.ToLower())\n       \
    \ {\n            if (c == 'i' || c == 'e' || c == 'e' || c == 'e' || c == 's')\n\
    \            {\n                if (c == 'i')\n                    N++;\n    \
    \            else\n                    N--;\n            }\n        }\n      \
    \  return N;", "        var regex = new Regex(@\"^I\");\n        return regex.Matches(S).Count;",
  "        List<string> splitText = S.Split('.', '?', '!').ToList();\n        foreach\
    \ (string s in splitText) {\n            if (s.StartsWith(\"I\")) {\n        \
    \        return 1L;\n            }\n        }\n        return 0L;", "        if\
    \ (S.StartsWith(\"I\"))\n            return 0L;\n        int N = S.IndexOf(\"\
    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ", " \
    \       long boredoms = 0;\n        string word = string.Empty;\n        for(int\
    \ i = 0; i < S.Length; i++)\n        {\n            if(!char.IsWhiteSpace(S[i]))\
    \ {\n                if(i == 0) {\n                    word = S[i];\n        \
    \        }\n                else if(S[i] == ' ') {\n                    if(!word.StartsWith(\"\
    I\")) {\n                        boredoms++;\n                    }\n        \
    \            word = string.Empty;\n                }\n                else\n \
    \               {\n                    if(!word.StartsWith(\"I\")) {\n       \
    \                 word += S[i];\n                    }\n                }\n  \
    \          }\n        }\n        return boredoms;", "        int count = 0;\n\
    \        string sentence = S;\n        foreach (char c in sentence)\n        {\n\
    \            if (c == '.')\n            {\n                if (sentence.StartsWith(\"\
    I\"))\n                {\n                    count++;\n                }\n  \
    \              else\n                {\n                    count = 0;\n     \
    \           }\n            }\n            else if (c == '?')\n            {\n\
    \                if (sentence.StartsWith(\"I\"))\n                {\n        \
    \            count++;\n                }\n                else\n             \
    \   {\n                    count = 0;\n                }\n            }\n    \
    \        else if (c == '!')\n            {\n                if (sentence.StartsWith(\"\
    I\"))\n                {\n                    count++;\n                }\n  \
    \              else\n                {\n                    count = 0;\n     \
    \           }\n            }\n        }\n        return count;", "        var\
    \ regex = new Regex(@\"^[I].+[.?!]$\");\n        var boredoms = new List<string>();\n\
    \        var boredomCount = new int[25];\n        foreach (var match in regex.Matches(S))\
    \ {\n            var word = match.Value;\n            boredoms.Add(word);\n  \
    \          var count = (from s in boredoms where s.Equals(word) select s).Count();\n\
    \            boredomCount[count]++;\n        }\n        return boredomCount.Sum();",
  "        string boredoms = \"I\";\n        long boredom_counter = 0;\n        //\
    \ Get boredom string from string.\n        foreach (string s in boredoms.Split(','))\
    \ {\n            boredom_counter++;\n        }\n        // Find index of first\
    \ char of string in boredom string.\n        long pos = S.IndexOf(boredoms);\n\
    \        // Check if index found is greater than 0.\n        if (pos > 0) {\n\
    \            // Loop through string to find count of boredoms.\n            string\
    \ s = S;\n            long count = 0;\n            for (pos = s.IndexOf(boredoms);\
    \ ; pos++) {\n                if (pos == 0) break;\n                if (pos ==\
    \ S.Length) break;\n                s++;\n                count++;\n         \
    \   }\n            return count;\n        }\n        return 0;", "        if (S.Length\
    \ < 2) return 0;\n        string p = S.Substring(0, 1).ToLower();\n        bool\
    \ b = (S[0] == p || S[0] == p.ToUpper());\n        int pcnt = 1;\n        foreach\
    \ (char c in S.Substring(1).ToLower()) {\n            bool b1 = (S[0] == c ||\
    \ S[0] == c.ToUpper());\n            if (b1 != b) pcnt = 0;\n            else\
    \ pcnt++;\n            b = b1;\n        }\n        return pcnt;", "        return\
    \ S.Split('.', '?', '!').Count(x => x.StartsWith(\"I\"));", "        Debug.Assert(S\
    \ != null);\n        List<string> SList = S.Split('.', '?', '!').ToList();\n \
    \       long result = SList.Count(l => l == \"I\");\n        return result;",
  "        List<string> words = new List<string>();\n        int count = 0, i;\n \
    \       foreach (char c in S) {\n            if (char.IsLetter(c)) {\n       \
    \         words.Add(c);\n            }\n        }\n        List<string> boredWords\
    \ = new List<string>();\n        for (i = 0; words.Count - i < 5; i++) {\n   \
    \         if (words[i] == 'I') {\n                boredWords.Add(words[words.Count\
    \ - 1]);\n            }\n        }\n        return boredWords.Count(w => S ==\
    \ w);", "        StringBuilder sentence = new StringBuilder(S);\n        sentence\
    \ = sentence.Remove(0, 1).Remove(sentence.Length - 2, 2);\n        long boredomCount\
    \ = 0;\n        long index = 0;\n        while ((index = sentence.IndexOf(\"I\"\
    , index, StringComparison.Ordinal)) != -1) {\n            boredomCount++;\n  \
    \          index = index + 1;\n        }\n        return boredomCount;", "   \
    \     List<string> words = new List<string>(S.Split(' ').Distinct());\n      \
    \  var count = words.Where(w => w.StartsWith(\"I\")).Count();\n        return\
    \ count;", "        long count = 0L;\n        char[] chars = S.ToCharArray();\n\
    \        for (int i = 1; i < S.Length; i++) {\n            char c = chars[i -\
    \ 1];\n            if (c == '.' || c == '?' || c == '!') {\n                for\
    \ (int j = 1; j < S.Length; j++) {\n                    if (chars[i] == '.' ||\
    \ chars[i] == '?' || chars[i] == '!') {\n                        if (chars[j]\
    \ == '.' || chars[j] == '?' || chars[j] == '!') {\n                          \
    \  if (chars[i - 1] != '.' || chars[i - 1] != '?' || chars[i - 1] != '!') {\n\
    \                                count += 1;\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        return count;", "        var boredoms = new List<string>();\n\
    \        foreach (var sentence in S.Split('.')) {\n            if (sentence.Contains(\"\
    I\") && boredoms.Count <= 0) {\n                boredoms.Add(\"I\");\n       \
    \     }\n            else if (sentence.Contains(\"I\") && !boredoms.Contains(\"\
    I\")) {\n                boredoms.Add(\"I\");\n            }\n            else\
    \ if (sentence.Contains(\"!\") && boredoms.Count <= 0) {\n                boredoms.Add(\"\
    !\");\n            }\n            else if (sentence.Contains(\"!\") && !boredoms.Contains(\"\
    !\")) {\n                boredoms.Add(\"!\");\n            }\n            else\
    \ if (sentence.Contains(\"?\") && boredoms.Count <= 0) {\n                boredoms.Add(\"\
    ?\");\n            }\n            else if (sentence.Contains(\"?\") && !boredoms.Contains(\"\
    ?\")) {\n                boredoms.Add(\"?\");\n            }\n            else\
    \ if (sentence.StartsWith(\"I\") && boredoms.Count <= 0) {\n                boredoms.Add(\"\
    I\");\n            }\n            else if (sentence.StartsWith(\"I\") && !boredoms.Contains(\"\
    I\")) {\n                boredoms.Add(\"I\");\n            }\n            else\
    \ if (sentence.StartsWith(\"!\") && boredoms.Count <= 0) {\n                boredoms.Add(\"\
    !\");\n            }\n            else if (sentence.StartsWith(\"!\") && !boredoms.Contains(\"\
    !\")) {\n                boredoms.Add(\"!\");\n            }\n            else\
    \ if (sentence.StartsWith(\"?\") && boredoms.Count <= 0) {\n                boredoms.Add(\"\
    ?\");\n            }\n            else if (sentence.StartsWith(\"?\") && !boredoms.Contains(\"\
    ?\")) {\n                boredoms.Add(\"?\");\n            }\n            else\
    \ if (boredoms.Count <= 0) {\n                boredoms.Add(\"I\");\n         \
    \   }\n        }\n        return boredoms.Count;", "        long Boredoms = 0L;\n\
    \        foreach (string word in S.Split('.')) {\n            if (word == \"I\"\
    ) {\n                Boredoms ++;\n            }\n        }\n        return Boredoms;",
  "        if (S != null && S.Length > 0) {\n            long.TryParse(Regex.Match(S,\
    \ @\"^I\").Value, out long boredom);\n            return boredom;\n        }\n\
    \        else\n            return (long)0;", "        var N = S.Length;\n    \
    \    var BoredomCount = 0;\n        var start = S.IndexOf(\"I\");\n        if\
    \ (start >= 0) {\n            for (int i = 0; i < N; i++) {\n                if\
    \ (S[i] == '.') {\n                    // The word 'I' must be followed immediately\
    \ by a period.\n                    // If not, then we can't boredom (this is\
    \ okay).\n                    if (i + 1 == N) {\n                        BoredomCount++;\n\
    \                    }\n                } else if (S[i] == '?' || S[i] == '!')\
    \ {\n                    // The word 'I' must be followed immediately by one of\
    \ the\n                    // delimiters.\n                    // If not, then\
    \ we can't boredom (this is okay).\n                    if (i + 1 == N) {\n  \
    \                      BoredomCount++;\n                    }\n              \
    \  } else {\n                    // The word 'I' must not follow any delimiter\
    \ immediately\n                    // after it but must be followed by another\
    \ word (this is not\n                    // okay).\n                    if (i\
    \ == start) {\n                        BoredomCount++;\n                    }\n\
    \                }\n            }\n        }\n        return BoredomCount;", " \
    \       string S = S.ToLower();\n        string words[] = S.Split('.', '?', '!').Where(x\
    \ => x.StartsWith(\"i\")).ToArray();\n        long count = 0;\n        foreach\
    \ (string w in words)\n            if (w.Equals(\"i\"))\n                count++;\n\
    \        return count;", "        // Step 1: split the string into its component\
    \ parts\n        char[] separators = { '.', '?', '!' };\n        IEnumerable<string>\
    \ components = S.Split(separators);\n        long count = 0; // number of boredoms\n\
    \        string lastComponent = null; // last component (either an I, or a .)\n\
    \        foreach (string component in components) {\n            // Step 2: remove\
    \ spaces from components\n            component = component.Replace(\" \", \"\"\
    );\n            // Step 3: check if last component is a \"I\", and count it (count\
    \ + 1)\n            if (component == \"I\")\n                count = count + 1;\n\
    \            // Step 4: check if the last component is a \".\", and count it (count\
    \ + 1)\n            else if (lastComponent == \".\")\n                count =\
    \ count + 1;\n            lastComponent = component;\n        }\n        // Step\
    \ 5: Return count\n        return count;", "        List<char> boredom = new List<char>\
    \ { '.', '?' , '!' };\n        string str = \"\";\n        foreach (string word\
    \ in S.Split('.')) {\n            if (boredom.Contains(word[0])) {\n         \
    \       str += word[0] + \".\";\n            }\n        }\n        long b = 1;\n\
    \        int c = 0;\n        while (str.IndexOf('.') != -1) {\n            str\
    \ = str.Remove(str.IndexOf('.'), 1);\n            b++;\n        }\n        while\
    \ (str.IndexOf('?') != -1) {\n            str = str.Remove(str.IndexOf('?'), 1);\n\
    \            b++;\n        }\n        while (str.IndexOf('!') != -1) {\n     \
    \       str = str.Remove(str.IndexOf('!'), 1);\n            b++;\n        }\n\
    \        c = str.Length;\n        return (b * c);", "        if (S == null) return\
    \ 0L;\n        long Boredoms = 0L;\n        foreach (string sentence in S.Split('.'))\
    \ {\n            long Boremed = IsBored(sentence);\n            if (Boremed >\
    \ 0) Boredoms++;\n        }\n        return Boredoms;", "        List<string>\
    \ boredoms = new List<string>();\n        foreach(char c in S) {\n           \
    \ if(c == '.') {\n                boredoms.Add(\". \");\n            } else if(c\
    \ == '?') {\n                boredoms.Add(\"? \");\n            } else if(c ==\
    \ '!') {\n                boredoms.Add(\"! \");\n            }\n        }\n  \
    \      return boredoms.Count(w => w.StartsWith(\"I\"));", "        string [] words\
    \ = S.Split(' ');\n        bool startsWithI = false;\n        foreach (string\
    \ w in words) {\n            if ((w[0] == 'I') && !startsWithI) {\n          \
    \      startsWithI = true;\n            }\n        }\n        long count = 0;\n\
    \        foreach (string w in words) {\n            if (w[0] == 'I') {\n     \
    \           count += 1;\n            }\n        }\n        return count;", " \
    \       var boredom = S.Select((x,i) => new { x, i })\n            .Where(x =>\
    \ x.x.ToLowerInvariant().StartsWith(\"i\", StringComparison.OrdinalIgnoreCase))\n\
    \            .Select(x => x.i)\n            .Distinct()\n            .Count(i\
    \ => i%2==1);\n        return boredom;", "        string[] S = S.Split('.', '?',\
    \ '!');\n        long boredoms = 0;\n        foreach (string str in S) {\n   \
    \         boredoms += ((str[0] == 'I') ? 1L: 0L);\n        }\n        return boredoms;",
  "        // Initialize count\n        long result = 0;\n        // Loop through\
    \ every character in string\n        foreach (char c in S) {\n            // Determine\
    \ if character is the delimiter\n            if (c == ',' || c == '.' || c ==\
    \ '!' || c == '?') {\n                // If character is delimiter, increment\
    \ count\n                result += 1;\n            }\n        }\n        // Return\
    \ the result\n        return result;", "        long cnt = 0;\n        Regex regex\
    \ = new Regex(\"[?!.]\");\n        List<string> words = regex.Split(S).ToList();\n\
    \        foreach (string word in words) {\n            if (word.ToLower() == \"\
    i\") {\n                cnt++;\n            }\n        }\n        return cnt;",
  "        long C = 0;\n        char L;\n        for (int i = 1; i < S.Length; i++)\
    \ {\n            L = S[i];\n            C += 1;\n            if (L == 'i' || L\
    \ == 'i!' || L == 'i?' || L == 'i..') {\n                C -= 1;\n           \
    \ }\n        }\n        return C;", "        // Find \"I\" in the sentence and\
    \ store in temp\n        string temp = S;\n        int count = 0;\n        while\
    \ (temp.IndexOf(\"I\") != -1 && temp.IndexOf('.') != -1 && temp.IndexOf('?') !=\
    \ -1 && temp.IndexOf('!') != -1) {\n            temp = temp.Substring(temp.IndexOf(\"\
    I\") + 1);\n            count++;\n        }\n\n        // Return count as long\n\
    \        return count;", "        long count = 0;\n        foreach (string part\
    \ in S.Split('.', '?', '!'))\n        {\n            if (part.StartsWith(\"I\"\
    ))\n            {\n                count++;\n            }\n        }\n      \
    \  return count;", "        long count = 0;\n        foreach (string sentence\
    \ in S.Split('.')) {\n            if (IsBored(sentence, out count)) {\n      \
    \          break;\n            }\n        }\n        return count;", "       \
    \ foreach (string W in S.Split('.')) {\n            if (W.StartsWith(\"I\")) {\n\
    \                return 1L;\n            }\n        }\n        return 0L;", " \
    \       // Write your answer here.\n        return 0;", "        var words = S.Split('.',\
    \ '?', '!');\n        var bored = 0;\n        foreach (var word in words) {\n\
    \            if (word.StartsWith(\"I\")) bored += 1;\n        }\n        return\
    \ bored;", "        string [] S = S.Split('.');\n        char[] C = new char[]\
    \ {'.', '?' , '!' };\n        long Boredoms = 0;\n        foreach (string x in\
    \ S) {\n            Boredoms += x.StartsWith(\"I\", StringComparison.OrdinalIgnoreCase)\
    \ ? 1 : 0;\n        }\n        return Boredoms;", "        long boredoms = 0;\n\
    \        int sentences = S.Split('.').Count();\n        for (int i = 0; i < sentences;\
    \ i++) {\n            string sentence = S.Split('.')[i].Trim();\n            if\
    \ (sentence.StartsWith(\"I\")) {\n                boredoms += 1;\n           \
    \ }\n        }\n        return boredoms;", "        var dictionary = new Dictionary<string,\
    \ string>();\n        foreach (var line in S.Split(new[] { '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries))\
    \ {\n            dictionary.Add(line.ToLower(), \"\");\n        }\n        var\
    \ boredoms = dictionary.Values.Sum(s => s.Count(i => i == 'i'));\n        return\
    \ boredoms;", "        long boredomCount = 0;\n        foreach (char c in S)\n\
    \        {\n            if (c == '.' || c == '?' || c == '!')\n            {\n\
    \                boredomCount++;\n            }\n        }\n        return boredomCount;",
  "        long count = 0;\n        foreach (var item in S.Split('.', '?', '!')) {\n\
    \            if (item.StartsWith(\"I\")) {\n                count = count + 1;\n\
    \            }\n        }\n        return count;", "        // Your code here\n\
    \        long ans = 0;\n        foreach (string item in S.Split('.'))\n      \
    \  {\n            ans += S.Split('?').Length + S.Split('!').Length;\n        }\n\
    \        return ans;", "        long boredoms = 0;\n        foreach (string word\
    \ in S.Split('.')) {\n            string lower = word.ToLower();\n           \
    \ bool isI = lower == \"i\" || lower == \"i\\'\" || lower == \"im\" || lower ==\
    \ \"ive\";\n            if (isI) {\n                boredoms++;\n            }\n\
    \        }\n        return boredoms;", "        string t = S;\n        Regex r\
    \ = new Regex(\"[.!?]\");\n        long n = 0;\n        foreach (Match m in r.Matches(t))\
    \ {\n            t =\n                m.Value.Replace(\".\", \"[.]\")\n      \
    \              .Replace(\"?\", \"[?]\")\n                    .Replace(\"!\", \"\
    [!]\");\n            if (t.StartsWith(\"I\")) {\n                n = n + 1;\n\
    \            }\n        }\n        return n;", "        long B = 0;\n        foreach\
    \ (string word in S.Split('.', '?', '!')) {\n            if (word.StartsWith(\"\
    I\"))\n                B++;\n        }\n        return B;", "        // TODO:\
    \ Your code here.\n        return 0;", "        // Your code here\n        var\
    \ boredoms = new List<string>();\n        foreach(var s in S.Split('.','?','!').Where(s=>s.StartsWith(\"\
    I\")))\n        {\n            if(boredoms.Contains(s))\n            {\n     \
    \           boredoms.Remove(s);\n            }\n            else\n           \
    \ {\n                boredoms.Add(s);\n            }\n        }\n        return\
    \ boredoms.Count;", "        var boredoms = (from word in S.Split('.')\n     \
    \                  where word.StartsWith(\"I\")\n                       select\
    \ word)\n                       .Count();\n        return boredoms;", "      \
    \  Debug.Assert(S != null);\n        long count = new long();\n        string\
    \ [] tokens = S.Split(' ');\n        foreach (string token in tokens) {\n    \
    \        if (token.StartsWith(\"I\"))\n                count++;\n        }\n \
    \       return count;", "        long answer = 0;\n        foreach (string word\
    \ in S.Split('.', '?', '!')) {\n            bool boredom = true;\n           \
    \ foreach (char character in word.ToCharArray()) {\n                if (character\
    \ != 'I') {\n                    boredom = false;\n                }\n       \
    \     }\n            if (boredom) {\n                answer++;\n            }\n\
    \        }\n        return answer;", "        long boredoms = 0;\n        foreach\
    \ (var word in S.Split('.')) {\n            if (word == \"I\") {\n           \
    \     boredoms++;\n            }\n        }\n        return boredoms;", "    \
    \    ArrayList words = S.Split('.', '?', '!').ToArrayList();\n        long boredoms\
    \ = 0;\n        foreach (string word in words) {\n            if (word.StartsWith(\"\
    I\"))\n                boredoms += 1;\n        }\n        return boredoms;", " \
    \       string boredom = \"\";\n        int count = 0;\n        foreach (char\
    \ c in S) {\n            if (c == ' ') continue;\n            if (c == '.') boredom\
    \ = boredom + c;\n            if (c == '?') boredom = boredom + c;\n         \
    \   if (c == '!') boredom = boredom + c;\n            if (boredom == \"I \") {\n\
    \                count++;\n                boredom = \"\";\n            }\n  \
    \      }\n        return (long)count;", "        long count = 0;\n        StringBuilder\
    \ sb = new StringBuilder();\n        foreach (var item in S) {\n            if\
    \ (!item.Equals('.')) sb.Append(item);\n            if (item.Equals('.')) break;\n\
    \        }\n        string s = sb.ToString();\n        string pattern = \"I \"\
    ;\n        List<string> words = new List<string>();\n        foreach (string s\
    \ in s.Split('.', '?', '!'))\n            words.Add(s);\n        foreach (string\
    \ word in words)\n            if (word.StartsWith(pattern)) count++;\n       \
    \ return count;", "        return S.Count(w => w.Equals(\"I\", StringComparison.OrdinalIgnoreCase)\n\
    \            && !w.Equals(\"!\", StringComparison.OrdinalIgnoreCase)\n       \
    \     && !w.Equals(\".\", StringComparison.OrdinalIgnoreCase)\n            &&\
    \ !w.Equals(\"?\", StringComparison.OrdinalIgnoreCase)\n            && !w.Equals(\"\
    /\", StringComparison.OrdinalIgnoreCase)\n            && w.Length > 1) // just\
    \ to be extra sure\n            / S.Count(w => w.Equals(\".\", StringComparison.OrdinalIgnoreCase)\n\
    \            || w.Equals(\"?\", StringComparison.OrdinalIgnoreCase)\n        \
    \    || w.Equals(\"!\", StringComparison.OrdinalIgnoreCase)\n            || w.Equals(\"\
    /\", StringComparison.OrdinalIgnoreCase)\n            || w.Equals(\"I\", StringComparison.OrdinalIgnoreCase));",
  "        long n = S.Length;\n        long b = 0;\n        foreach (var s in S.Trim().Split('.',\
    \ '?', '!')) {\n            b += s.StartsWith(\"I\");\n        }\n        return\
    \ b;", "        long result = 0;\n        foreach (string str in S.Split('.',\
    \ '?', '!').ToList())\n            if (str == \"I\")\n                result++;\n\
    \        return result;", "        string S = S.ToLower();\n        var words\
    \ = S.Split('.', '?', '!').Where(w => w.Length > 0).ToList();\n        bool bored\
    \ = words.Contains(\"i\");\n        long boredCount = 0;\n        if (bored) {\n\
    \            boredCount = words.ToList().Count(w => w.StartsWith(\"i\"));\n  \
    \      }\n        return boredCount;", "        long boredoms = 0;\n        foreach\
    \ (string word in S.Split(new[] {\".\", \"?\", \"!\"}, StringSplitOptions.None))\
    \ {\n            if (word.ToLowerInvariant().StartsWith(\"i\")) {\n          \
    \      boredoms++;\n            }\n        }\n        return boredoms;", "   \
    \     int i;\n        long ans = 0, len = 0;\n        foreach (string x in S.Split('.',\
    \ '?', '!'))\n            if (x != \"I\" && x.StartsWith(\"I\"))\n           \
    \     ans += 1;\n            else\n                len += 1;\n        ans = ans\
    \ / len;\n        return ans;", "        long count = 0;\n        foreach (string\
    \ part in S.Split('.', '?', '!').Select(x => x.Trim())) {\n            if (part.StartsWith(\"\
    I\"))\n                count++;\n        }\n        return count;", "        List<string>\
    \ words = S.Split('.', '?', '!').ToList();\n        int count = 0;\n        foreach\
    \ (string word in words) {\n            if (word == \"I\") {\n               \
    \ count = count + 1;\n            }\n        }\n        return (long) count;",
  "        long l = 0;\n        List<String> v = new List<String>();\n        foreach\
    \ (var i in S.Split('.', '?', '!').ToList()) {\n            v.Add(i);\n      \
    \  }\n        for (int i = 0; i < (v.Count - 1); i++) {\n            if (v[i].StartsWith(\"\
    I\")) {\n                l++;\n            }\n        }\n        return l;", " \
    \       // Use a dictionary to store a mapping of letters to their frequency\n\
    \        Dictionary<char, long> D = new Dictionary<char, long>();\n        foreach\
    \ (char c in S) {\n            if (D[c] == null) {\n                D[c] = 1;\n\
    \            } else {\n                D[c] += 1;\n            }\n        }\n\n\
    \        // Now iterate through each letter in the dictionary and count boredom\n\
    \        foreach (KeyValuePair<char, long> entry in D) {\n            if (entry.Key.ToString()\
    \ == \"I\") {\n                return entry.Value;\n            }\n        }\n\
    \        return (long)0;", "        int N;\n        var d = new string[S.Length];\n\
    \        var t = new string[S.Length];\n        char boredoms[] = new char[3];\n\
    \        bool b1 = false;\n        bool b2 = false;\n        bool b3 = false;\n\
    \        bool b4 = false;\n        bool bx = false;\n        for (int i = 0; i\
    \ < S.Length; i++) {\n            if (boredoms[i] == '.') { d.SetLength(1); }\n\
    \            else if (boredoms[i] == '?') { d.SetLength(1); }\n            else\
    \ if (boredoms[i] == '!') { d.SetLength(1); }\n            else if (S[i] == 'I')\
    \ {\n                if (i == 0) { b1 = true; break; }\n                if (i\
    \ == 1) { b2 = true; break; }\n                if (i == 2) { b3 = true; break;\
    \ }\n                if (i == 3) { b4 = true; break; }\n            }\n      \
    \      else {\n                if (i == 0) { bx = true; break; }\n           \
    \     if (i == 1) { bx = true; break; }\n                if (i == 2) { bx = true;\
    \ break; }\n                if (i == 3) { bx = true; break; }\n            }\n\
    \            d[d.Length - 1] = S[i];\n        }\n        if (bx) { return 0; }\n\
    \        if (b1 && b2 && b3 && b4) { N = (d.Length - 1); return 1; }\n       \
    \ if (b1) {\n            if (d.Length == 1) { N = (d.Length - 1); return 1; }\n\
    \            if (d[1] == '.' && d[2] == '.' && d[3] == '.') {\n              \
    \  N = d.Length - 1;\n                return 1; }\n            if (d[1] == '.'\
    \ && d[2] == '.' && d[3] == '.') { N = (d.Length - 3); return 1; }\n         \
    \   if (d[1] == '.' && d[2] == '.' && d[3] == '.') { N = (d.Length - 3); return\
    \ 1; }\n            if (d[1] == '.' && d[2] == '.' && d[3] == '.') { N = (d.Length\
    \ - 3); return 1; }\n            if (d[1] == '.' && d[2] == '.' && d[3] == '.')\
    \ { N = (d.Length - 3); return 1; }\n            if (d[1] == '.' && d[2] == '.'\
    \ && d[3] == '.') { N = (d.Length - 3); return 1; }\n            if (d[1] == '.'\
    \ && d[2] == '.' && d[3] == '.') { N = (d.Length - 3); return 1; }\n         \
    \   if (d[1] == '.' && d[2] == '.' && d[3] == '.') { N = (d.Length - 3); return\
    \ 1; }\n            if (d[1] == '.' && d[2] == '.' && d[3] == '.') { N = (d.Length\
    \ - 3", "        char[] punctuation = new[] { '.', '?', '!' };\n        List<String>\
    \ words = S.Split(' ').Where(x => x != null).ToList();\n        List<String> boredom\
    \ = words.Where(x => x != \"I\").ToList();\n        long boredomCount = 0;\n \
    \       for (int i = 0; i < words.Count; i++) {\n            boredomCount = boredomCount\
    \ + boredom.Count(x => x.StartsWith(words[i]));\n        }\n        return boredomCount;",
  "        long count = 0;\n        char[] delimiters = { '.', '?', '!' };\n     \
    \   foreach (string sentence in S.Split(delimiters)) {\n            if (sentence.StartsWith(\"\
    I\")) {\n                count += 1;\n            }\n        }\n        return\
    \ count;", "        string boredom = @\"(?i)\\bI\\b\";\n        var boredoms =\
    \ new List<long>();\n        var splits = S.Split('.')\n            .Select(s\
    \ => s.Split('?').Select(c => c.Split('!').Select(b => b.Trim()).ToList()).ToList())\n\
    \            .Select(b => b.Aggregate((a, b) => a + b));\n        var boredCount\
    \ = 0;\n        foreach (var boredoms in splits) {\n            foreach (var boredoms\
    \ in boredoms) {\n                if (boredoms.Any(x => boredom.StartsWith(x,\
    \ StringComparison.OrdinalIgnoreCase))) {\n                    boredCount++;\n\
    \                }\n            }\n        }\n        return (long) boredCount;",
  "        var r = new Regex(@\"(I\\b)\");\n        var boredoms = s.Split(new[] {'.',\
    \ '?', '!'}, StringSplitOptions.RemoveEmptyEntries);\n        return boredoms.Count(x\
    \ => r.IsMatch(x.ToLower())) + 1;", "        long n = 0;\n        if (S == \"\
    I\".ToCharArray().Take(1).ToList().Contains(S.First().ToString())) {\n       \
    \     n++;\n        }\n        return n;", "        // Declare an array to hold\
    \ the counts of letter 'I'.\n        var boredomCounts = new int[26];\n\n    \
    \    // Iterate through every word in the sentence and increment the\n       \
    \ // count of the letter I in the word.\n        foreach (string word in S.Split('\
    \ '))\n            for (int i = 0; i < word.Length; i++)\n                if (word[0]\
    \ = 'I')\n                    boredomCounts[word.ToLower().ToUpper()[i] - 'A']++;\n\
    \n        // If there are no words, return 0.\n        if (boredomCounts.All(w\
    \ => w == 0))\n            return 0L;\n\n        // Else return the highest boredom\
    \ count possible.\n        return boredomCounts.Max();", "        bool IsBored\
    \ = false;\n        if (S.StartsWith(\"I\", StringComparison.OrdinalIgnoreCase))\
    \ {\n            IsBored = true;\n        }\n        return IsBored ? 1 : 0;",
  "        int n = 0;\n        bool bored = false;\n        foreach (var s in S) {\n\
    \            if (s.StartsWith(\"I\")) {\n                bored = true;\n     \
    \       }\n            if (s.Equals(\".\")) {\n                bored = true;\n\
    \            }\n            if (s.Equals(\"?\")) {\n                bored = true;\n\
    \            }\n            if (s.Equals(\"!\")) {\n                bored = true;\n\
    \            }\n        }\n        return bored ? n : -1;", "        // The algorithm\
    \ works by counting how many times each character appears\n        // in a sentence\
    \ and comparing that to the total number of characters. \n        // The algorithm\
    \ also looks for the first occurrence of a character which\n        // is listed\
    \ in the \"BoredomChars\" array (which has all 'I' in the\n        // English\
    \ alphabet). So the algorithm does a little bit of work to find \n        // how\
    \ many boredoms a given sentence has. \n        \n        long boredomCount =\
    \ 0;\n        char[] BoredomChars = new char[] { 'I', '.', '!', '?' };\n     \
    \   bool foundChar = false;\n        \n        // The code below looks for the\
    \ first occurrence of a char in the BoredomChars array \n        // for each char\
    \ in the input sentence. It then adds the number of times that\n        // char\
    \ appears to the total boredomCount and moves on to the next char.\n        foreach\
    \ (char c in S.ToCharArray())\n        {\n            if (BoredomChars.Contains(c))\n\
    \            {\n                boredomCount++;\n            }\n        }\n  \
    \      \n        // If there is a char in S, then the first occurring char will\
    \ be in BoredomChars \n        // because that is what we searched for. \n   \
    \     // If not, then all chars in S which are not found in BoredomChars \n  \
    \      // will also be in BoredomChars, so we don't have to check for that\n \
    \       // here. The code below handles the case where a sentence does not start\n\
    \        // with a boredom. \n        if (boredomCount > 0)\n        {\n     \
    \       return boredomCount;\n        }\n        else\n        {\n           \
    \ return 0;\n        }", "        foreach (string word in S.Split('.')) {\n  \
    \          if (word.StartsWith(\"I\")) {\n                return 1L;\n       \
    \     }\n        }\n        return 0L;", "        if (String.IsNullOrEmpty(S))\n\
    \            return 0L;\n        long count = 0;\n        foreach (var s in S)\
    \ {\n            bool isBoredom = ((s == \".\") || (s == \"?\") || (s == \"!\"\
    )) && (s.StartsWith(\"I\"));\n            if (isBoredom) count++;\n        }\n\
    \        return count;", "        long res = 0;\n        foreach (string line\
    \ in S.Split('.')) {\n            foreach (string word in line.Split('?!')) {\n\
    \                if (word.Equals(\"I\")) {\n                    res++;\n     \
    \           }\n            }\n        }\n        return res;", "        char[]\
    \ delimiters = { ' ', '.', '?', '!' };\n        char[] chars = S.ToCharArray();\n\
    \        bool bored = false;\n        long count = 0;\n        foreach (char c\
    \ in chars) {\n            bored = false;\n            foreach (char d in delimiters)\
    \ {\n                if (c == d)\n                    bored = true;\n        \
    \    }\n            if (!bored)\n                count++;\n        }\n       \
    \ return count;", "        S = S.ToLower();\n        long ret = 0;\n        bool\
    \ isIn = false;\n        bool isInMiddle = false;\n        bool isInEnd = false;\n\
    \        int count = 0;\n        foreach (var c in S) {\n            if (isIn\
    \ && c == ' ') isInMiddle = true;\n            else if (isIn && isInMiddle &&\
    \ c == ' ') isInMiddle = false;\n            else if (isIn && !isInMiddle && c\
    \ == ' ') isIn = false;\n            else if (isInMiddle && c == ' ') isInMiddle\
    \ = false;\n            else if (isInEnd && c == ' ') isInEnd = false;\n     \
    \       else if (isInEnd && !isInMiddle && c == ' ') isInEnd = false;\n      \
    \      else if (c == '.') isInMiddle = false;\n            else if (c == '?')\
    \ isInMiddle = false;\n            else if (c == '!') isInMiddle = false;\n  \
    \          else if (isIn && c == '.') isIn = true;\n            else if (isIn\
    \ && c == '?') isIn = true;\n            else if (isIn && c == '!') isIn = true;\n\
    \            else if (isInMiddle && c == '.') isInMiddle = true;\n           \
    \ else if (isInMiddle && c == '?') isInMiddle = true;\n            else if (isInMiddle\
    \ && c == '!') isInMiddle = true;\n            else if (isInEnd && c == '.') isInEnd\
    \ = true;\n            else if (isInEnd && c == '?') isInEnd = true;\n       \
    \     else if (isInEnd && c == '!') isInEnd = true;\n            else if (c ==\
    \ 'I') isIn = true;\n            else if (c == 'i') isIn = true;\n           \
    \ else if (c == '!') isIn = true;\n            else if (c == '.') isIn = true;\n\
    \            else if (c == '?') isIn = true;\n            else if (c == 'i') isIn\
    \ = true;\n            else if (c == '!') isIn = true;\n            else if (c\
    \ == '!') isIn = true;\n            else if (c == '.') isIn = true;\n        \
    \    else if (c == '?') isIn = true;\n            else if (c == '!') isIn = true;\n\
    \            else ret++;\n            count++;\n        }\n        return count;",
  "        string sArr = S.Split('.', '?', '!');\n        List<string> sArrArr = new\
    \ List<string>(sArr);\n        bool bTrue = true;\n        long l = 0;\n     \
    \   long i = 0;\n        for (int i1 = 0; i1 < sArrArr.Count; i1++) {\n      \
    \      if (sArrArr[i1].StartsWith(\"I\", StringComparison.InvariantCultureIgnoreCase))\
    \ {\n                bTrue = true;\n            }\n            else if (sArrArr[i1].StartsWith(\"\
    is\", StringComparison.InvariantCultureIgnoreCase)) {\n                bTrue =\
    \ false;\n            }\n            else if (sArrArr[i1].StartsWith(\"was\",\
    \ StringComparison.InvariantCultureIgnoreCase)) {\n                bTrue = false;\n\
    \            }\n            else {\n                bTrue = true;\n          \
    \  }\n            l++;\n            i += 1;\n        }\n        return l;", " \
    \       long[] array = new long[S.Length];\n        int count = 0;\n        bool\
    \ start = false;\n        foreach (char c in S) {\n            if (c == ' ')\n\
    \                start = true;\n            if (start) {\n                array[count]\
    \ = Convert.ToInt64(c);\n                count++;\n            }\n        }\n\n\
    \        for (int i = count - 1; i >= 0; i--) {\n            if (array[i] % 3\
    \ == 0) {\n                count = i;\n            }\n        }\n\n        return\
    \ count;", "        long ret = 0;\n        foreach (var word in S) {\n       \
    \     switch (word) {\n                case \"I\":\n                    ret++;\n\
    \                    break;\n                case \"?\":\n                   \
    \ ret++;\n                    break;\n                case \"!\":\n          \
    \          ret++;\n                    break;\n                case \".\":\n \
    \                   ret++;\n                    break;\n            }\n      \
    \  }\n        return ret;", "        // YOUR CODE HERE\n        var boredoms =\
    \ string.Join(\" \", S.Where(s => s == \".\" || s == \"?\" || s == \"!\").ToArray()).ToList();\n\
    \        return boredoms.Count(s => s == \"I\");", "        if (S == null) return\
    \ 0L;\n        string delimiters = \".?!\";\n        StringBuilder sb = new StringBuilder(S);\n\
    \        char ch;\n        long boredoms = 0;\n        int pos = 0;\n        bool\
    \ nextDelim = false;\n        for (; pos < sb.Length; pos++) {\n            ch\
    \ = sb[pos];\n            if (delimiters.IndexOf(ch) >= 0)\n            {\n  \
    \              if (nextDelim)\n                {\n                    nextDelim\
    \ = false;\n                }\n                else\n                {\n     \
    \               nextDelim = true;\n                    boredoms += 1;\n      \
    \          }\n            }\n            else\n            {\n               \
    \ nextDelim = false;\n            }\n        }\n        return boredoms;", " \
    \       long count = 0;\n        char[] chars = s.ToCharArray();\n        for\
    \ (int i = 0; i < chars.Length; i++) {\n            if (chars[i] == 'I')\n   \
    \             count++;\n        }\n        return count;", "        List<string>\
    \ lst = S.Split(',').ToList();\n        Dictionary<string, long> Dic = new Dictionary<string,\
    \ long>();\n        string boredoms = \"\";\n        foreach (string word in lst)\
    \ {\n            if (word.Length > 0 && word[0] == 'I') {\n                if\
    \ (!Dic.ContainsKey(word)) {\n                    boredoms = boredoms + word +\
    \ \",\";\n                    Dic.Add(word, 1);\n                } else {\n  \
    \                  Dic[word] = Dic[word] + 1;\n                }\n           \
    \ }\n        }\n        return Dic.Count();", "        List<string> Words = new\
    \ List<string>(S.Split('.').ToList());\n        List<string> IsBored = new List<string>();\n\
    \        foreach(string word in Words) {\n            if( word == \"I\" ) IsBored.Add(word);\n\
    \        }\n        return (long)IsBored.Count;", "        if (string.IsNullOrEmpty(S))\
    \ return 0L;\n\n        char boredom = '.';\n        bool hasBoredom = false;\n\
    \n        foreach(var word in S.Split(new char[] { '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries))\
    \ {\n            boredom = boredom == '.' ? hasBoredom ? '!' : boredom : boredom;\n\
    \            hasBoredom = hasBoredom || boredom == word[0];\n        }\n\n   \
    \     return hasBoredom ? 1 : 0;", "        // The idea here is to count the number\
    \ of times each sentence starts with \"I\"\n        // and return the sum of these\
    \ counts.\n        long sum = 0;\n        foreach (var s in S.Split(new char[]\
    \ { '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries)) {\n            if\
    \ (s.StartsWith(\"I\"))\n                sum++;\n        }\n        return sum;",
  "        string P = S;\n        Dictionary<string, int> D = new Dictionary<string,\
    \ int>();\n        int Count = 0;\n        string Word = null;\n        foreach\
    \ (char Ch in P) {\n            if (Ch == '.' || Ch == '?' || Ch == '!') {\n \
    \               D.Add(Word, Count);\n                Count = 0;\n            \
    \    Word = null;\n            }\n            else {\n                if (Word\
    \ == null) {\n                    Word = Ch;\n                }\n            \
    \    else {\n                    if (Ch == 'I') {\n                        Count++;\n\
    \                    }\n                    else {\n                        Word\
    \ = Ch;\n                    }\n                }\n            }\n        }\n\
    \        return D.Sum(t => t.Value);", "        bool startsWithI = false;\n  \
    \      long count = -1;\n        for (int i = 0; i < S.Length; i++) {\n      \
    \      char c = S[i];\n            switch (c) {\n            case '?':\n     \
    \       case '!':\n                if (!startsWithI)\n                    startsWithI\
    \ = true;\n                else\n                    return count;\n         \
    \   case '.':\n                if (startsWithI)\n                    startsWithI\
    \ = false;\n                else\n                    count++;\n             \
    \   break;\n            case 'I':\n                startsWithI = true;\n     \
    \           break;\n            }\n        }\n        return count;", "      \
    \  long count = 0;\n        S = S.Trim();\n        foreach (char c in S) {\n \
    \           if (c == '.' || c == '?' || c == '!') {\n                count +=\
    \ 1;\n            }\n        }\n        return count;", "        int i = 0;\n\
    \        foreach (string words in S.Split('.')) {\n            if (words[0] ==\
    \ \"I\") {\n                return ++i;\n            }\n        }\n        return\
    \ 0;", "        // Return the number of boredoms in the sentence S.\n        long\
    \ boredoms = 0;\n        var words = S.Split('.', '?', '!');\n        foreach\
    \ (var word in words) {\n            if (word == \"I\") {\n                boredoms++;\n\
    \            }\n        }\n        return boredoms;", "        bool isBored =\
    \ false;\n        string sentence = S;\n        string word = string.Empty;\n\
    \        long count = 0;\n        foreach (char c in sentence) {\n           \
    \ if(c == '.' || c == '?' || c == '!') {\n                isBored = true;\n  \
    \              count++;\n            }\n            if(c == 'I') {\n         \
    \       isBored = true;\n                count++;\n            }\n        }\n\
    \        return count;", "        // The first word is the boredom word.\n   \
    \     string boredom = S.Split(new char[] { '.', '?' }).First().Trim();\n\n  \
    \      // The boredom word counts as 1, but is ignored,\n        // so the boredom\
    \ word is ignored for boredom count purposes.\n        long boredomCount = 0;\n\
    \n        // The boredom word counts as 1, but is ignored,\n        // so the\
    \ boredom word is ignored for boredom count purposes.\n        foreach (var item\
    \ in S.Split(new char[] { '.', '?' })) {\n            if (item.Trim().StartsWith(boredom))\n\
    \                boredomCount++;\n        }\n\n        // Return boredom word\
    \ count.\n        return boredomCount;", "        // YOUR CODE HERE\n        StringBuilder\
    \ sb = new StringBuilder();\n        List<String> boredoms = new List<string>();\n\
    \        foreach(string s in S.Split('.', '?', '!'))\n        {\n            if\
    \ (s.StartsWith(\"I\"))\n            {\n                sb.Append(\"I\");\n  \
    \              boredoms.Add(s);\n            }\n        }\n        return sb.ToString().Count(f\
    \ => f == \"I\");", "        List<string> words = S.Split('.', '?', '!').ToList();\n\
    \        return words.Count(x => x.StartsWith(\"I\") == 1);", "        long count\
    \ = 0, startIndex = 0;\n        foreach (var s in S.Split(new char[] { '.', '?',\
    \ '!' }, StringSplitOptions.RemoveEmptyEntries)) {\n            startIndex = 0;\n\
    \            foreach (char c in s) {\n                if (c == 'I') {\n      \
    \              count++;\n                }\n                startIndex++;\n  \
    \          }\n        }\n        return count;", "        Debug.Assert(S != null);\n\
    \        long ans = 0;\n        foreach (char c in S) {\n            if (c ==\
    \ '.' || c == '?' || c == '!') {\n                ans += 1;\n            }\n \
    \       }\n        return ans;", "        long boredoms = 0;\n        foreach\
    \ (string sentence in S) {\n            int pos = 0;\n            bool firstWord\
    \ = true;\n            bool endOfSentence = false;\n            while (!endOfSentence)\
    \ {\n                if (firstWord) {\n                    while (pos < sentence.Length\
    \ && sentence[pos] != '?' && sentence[pos] != '!') {\n                       \
    \ pos++;\n                    }\n                    firstWord = false;\n    \
    \            } else {\n                    while (pos < sentence.Length && sentence[pos]\
    \ != '?' && sentence[pos] != '!') {\n                        pos++;\n        \
    \            }\n                    if (pos < sentence.Length) {\n           \
    \             endOfSentence = true;\n                    }\n                }\n\
    \            }\n            if (endOfSentence) {\n                boredoms +=\
    \ 1;\n            }\n        }\n        return boredoms;", "        return S.Length\
    \ > 0 ? S.Select((c) => (c == ' ' || c == '.' || c == '?' || c == '!') ? 0 : 1).Sum()\
    \ : 0L;", '        return S.Length > 0 ? BoredomsCount(S, new HashSet<string>())
    : 0L;', "        var words = S.Split('.', '?', '!');\n        var count = 0;\n\
    \        foreach (var word in words) {\n            var firstLetter = word[0];\n\
    \            if (firstLetter == \"I\") {\n                count++;\n         \
    \   }\n        }\n        return count;", "        var boredoms = new List<string>();\n\
    \        foreach (string word in S.Split('.')) {\n            if (word[0] != 'I')\n\
    \                boredoms.Add(word);\n        }\n        bool boredom = false;\n\
    \        var count = boredoms.Count;\n        for (var x = 0; x < count; x++)\
    \ {\n            boredom = false;\n            for (var y = 0; y < count; y++)\
    \ {\n                if (boredoms.ElementAt(y) == boredoms.ElementAt(x)) {\n \
    \                   boredom = true;\n                }\n            }\n      \
    \      if (boredom == false) count--;\n        }\n        return count;"]
stop_tokens:
- "\n    }\n"
