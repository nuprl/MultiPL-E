name: HumanEval_111_histogram
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a string representing a space separated lowercase letters,\
  \ return a dictionary\n    // of the letter with the most repetition and containing\
  \ the corresponding count.\n    // If several letters have the same occurrence,\
  \ return all of them.\n    // Example:\n    // >>> Histogram((\"a b c\"))\n    //\
  \ (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}})\n    //\
  \ >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"a\", 2L},\
  \ {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
  a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
  b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
  \    public static Dictionary<string,long> Histogram(string test) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
  a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
  \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
  a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
  \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
  \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
  r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\"\
  )).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
  r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"g\"\
  , 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
  \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"a\"\
  , 1L}})));\n    }\n\n}\n"
completions: ["        if (string.IsNullOrEmpty(test)) {\n            return new Dictionary<string,long>();\n\
    \        }\n\n        var dictionary = new Dictionary<string,long>();\n      \
    \  var letters = test.ToCharArray().Where(c => Char.IsLetter(c)).ToList();\n \
    \       var letterCount = letters.Count();\n\n        for (int i = 0; i < letterCount;\
    \ i++) {\n            var char = letters[i];\n            if (dictionary.ContainsKey(char))\
    \ {\n                var count = dictionary[char];\n                dictionary[char]\
    \ = count + 1;\n            } else {\n                dictionary.Add(char, 1L);\n\
    \            }\n        }\n\n        return dictionary;", "        if (test ==\
    \ \"\") return new Dictionary<string,long>();\n        var result = new Dictionary<string,long>();\n\
    \        var letters = test.ToCharArray();\n        foreach (char c in letters)\
    \ {\n            if (result.ContainsKey(c)) result[c] += 1;\n            else\
    \ result.Add(c, 1);\n        }\n        return result;", "        var dict = test.ToUpperInvariant().GroupBy(s\
    \ => s).ToDictionary(g => g.Key, g => g.Count());\n        var maxValue = dict.Max(x\
    \ => x.Value);\n        var maxKeys = dict.Where(x => x.Value == maxValue).Select(x\
    \ => x.Key).ToList();\n        var maxValues = dict.Where(x => x.Value == maxValue).Select(x\
    \ => x.Key).ToList();\n        var maxKeysWithValues = dict.GroupBy(x => x.Value).OrderByDescending(x\
    \ => x.Key).ToList();\n\n        Dictionary<string, long> dict2 = new Dictionary<string,\
    \ long>();\n        foreach (var key in maxKeysWithValues)\n            dict2.Add(key,\
    \ maxKeysWithValues[key].Count());\n\n        foreach (var key in maxKeys)\n \
    \           dict2.Add(key, 0L);\n\n        return dict2;", "        // Initialize\
    \ histogram\n        var histogram = new Dictionary<string, long>();\n       \
    \ // Find out how many letters are in the string\n        long letterCount = test.ToCharArray().Where(c\
    \ => c != ' ').Distinct().Count();\n        string testString = test.ToCharArray().Where(c\
    \ => c != ' ').Distinct().ToArray().ToUpper();\n        // Compute histograms\n\
    \        foreach (var c in testString) {\n            if (histogram.ContainsKey(c))\
    \ {\n                histogram[c] = histogram[c] + 1L;\n            } else {\n\
    \                histogram[c] = 1L;\n            }\n        }\n        // Return\
    \ histogram with all repetitions of the same letter\n        return histogram.GroupBy(c\
    \ => c).OrderByDescending(c => c.Count()).ToDictionary(c => c.Key, c => c.Count());",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   StringReader stringReader = new StringReader(test);\n        string currentChar;\n\
    \        long currentCount;\n        while ((currentChar = stringReader.Read())\
    \ != null)\n        {\n            currentCount = 1;\n            foreach (char\
    \ c in currentChar)\n            {\n                if (!result.ContainsKey(c))\n\
    \                {\n                    result.Add(c, new long());\n         \
    \       }\n                long currentCount = result[c];\n                currentCount++;\n\
    \                result[c] = currentCount;\n            }\n        }\n       \
    \ return result;", "        // Declare variables to store the frequency of letters\
    \ \n        var letters = new Dictionary<string,long>();\n        foreach (var\
    \ letter in test.Split(\" \")) {\n            if (letters.ContainsKey(letter))\
    \ letters[letter]++;\n            else letters.Add(letter, 1L);\n        }\n \
    \       // Return the result\n        return letters.GroupBy(x => x.Key).OrderByDescending(x\
    \ => x.Count()).FirstOrDefault();", "        if (test.IsNullOrEmpty())\n     \
    \       throw new ArgumentException(\"histogram input string cannot be null or\
    \ empty.\");\n        var histogram = new Dictionary<string,long>();\n       \
    \ var tokens = test.Split(' ');\n        foreach (var token in tokens) {\n   \
    \         if (histogram.ContainsKey(token))\n                histogram[token]\
    \ += 1;\n            else\n                histogram[token] = 1;\n        }\n\
    \        return histogram;", "        if(test.Length < 1)\n            return\
    \ new Dictionary<string,long>();\n        string longest = test.Substring(0, 1).ToLowerInvariant();\n\
    \        if(test.Length > 1) {\n            string rest = test.Substring(1);\n\
    \            foreach(var c in rest)\n                longest = longest + \" \"\
    \ + c.ToLowerInvariant();\n        }\n        return test.GroupBy(c => c.ToLowerInvariant())\n\
    \            .ToDictionary(g => g.Key, g => g.Count());", "        // Split the\
    \ string into a string array and convert the string array into a dictionary\n\
    \        var charDict = new Dictionary<string,long>();\n        foreach(var c\
    \ in test.ToCharArray()) {\n            charDict[c] = charDict.ContainsKey(c)\
    \ ? charDict[c] + 1 : 1;\n        }\n        // Return the dictionary with the\
    \ highest number of occurences\n        return charDict.OrderByDescending(kvp\
    \ => kvp.Value).FirstOrDefault();", "        char[] chars = test.ToCharArray();\n\
    \        var letters = new Dictionary<string, long>();\n\n        foreach (char\
    \ c in chars)\n        {\n            if (letters.Keys.Contains(c))\n        \
    \    {\n                letters[c]++;\n            }\n            else\n     \
    \       {\n                letters.Add(c, 1);\n            }\n        }\n\n  \
    \      return letters;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (char c in test.ToCharArray()) {\n            long occurences\
    \ = test.Count(c) - 1;\n            result.Add(c,occurences);\n        }\n   \
    \     return result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach(string s in test.Split(' ')) result[s] = 1;\n        return result;",
  "        Dictionary<string,long> histogram = new Dictionary<string,long>();\n  \
    \      string s = test.ToLower();\n        foreach(char c in s) {\n          \
    \  long count = histogram.Count(k => k.Value == c).DefaultIfEmpty(0L);\n     \
    \       histogram[c] = count;\n        }\n        return histogram;", "      \
    \  Dictionary<string, long> result = new Dictionary<string, long>();\n       \
    \ foreach (string word in test.Split(\" \".ToCharArray()))\n        {\n      \
    \      int cnt = 1;\n            foreach (char c in word.ToCharArray())\n    \
    \        {\n                if (result.ContainsKey(c))\n                {\n  \
    \                  result[c]++;\n                }\n                else\n   \
    \             {\n                    result.Add(c, 1);\n                }\n  \
    \          }\n            if (result.Values.Sum() > cnt)\n            {\n    \
    \            result = new Dictionary<string, long>();\n            }\n       \
    \ }\n        return result;", "        Dictionary<string,long> count = new Dictionary<string,long>();\n\
    \        string[] words = test.Split(' ');\n        for(int i = 0; i < words.Length;\
    \ i++) {\n            string word = words[i];\n            if(!count.ContainsKey(word))\
    \ {\n                count.Add(word, 1);\n            } else {\n             \
    \   count[word]++;\n            }\n        }\n        return count;", "      \
    \  // Your code goes here\n        Dictionary<string,long> count = new Dictionary<string,long>();\n\
    \        if (test.Contains(\" \")) test = test.Replace(\" \", \"\");\n       \
    \ char[] letters = test.ToCharArray();\n        int counter = 0;\n        foreach\
    \ (char letter in letters) {\n            if (count.ContainsKey(letter)) {\n \
    \               count[letter]++;\n            } else {\n                count.Add(letter,\
    \ 1);\n            }\n            if (counter == letters.Length-1) {\n       \
    \         return count;\n            }\n        }\n        return count;", " \
    \       // Find the most common letter in the test\n        string mostCommon\
    \ = test.GroupBy(c => c).OrderByDescending(g => g.Count()).First().Key;\n\n  \
    \      // Count and add to dictionary if needed\n        return test.GroupBy(c\
    \ => c)\n            .OrderByDescending(g => g.Count(c => c == mostCommon))\n\
    \            .Select(g => new {\n                Letter =  g.Key,\n          \
    \      Count = g.Count(c => c == mostCommon)\n            })\n            .ToDictionary(x\
    \ => x.Letter, x => x.Count);", "        // Write your code here\n        var\
    \ chars = test.ToCharArray().ToList();\n        var charCounter = new Dictionary<string,long>();\n\
    \        for (int i = 0; i < chars.Count; i++) {\n            if (charCounter.ContainsKey(chars[i]))\
    \ {\n                charCounter[chars[i]]++;\n            } else {\n        \
    \        charCounter.Add(chars[i],1);\n            }\n        }\n        return\
    \ new Dictionary<string,long>(charCounter);", "        if (test == null || test.Length\
    \ <= 0)\n            return new Dictionary<string,long>();\n\n        // Create\
    \ an array of chars to hold the letters in the string.\n        char[] letters\
    \ = test.ToCharArray();\n\n        // Create a dictionary to hold the letter with\
    \ the highest count and count.\n        Dictionary<string, long> histogram = new\
    \ Dictionary<string,long>();\n\n        // Create an array to hold the letters\
    \ in the histogram.\n        char[] histogramLetters = new char[128];\n\n    \
    \    // Keep track of which letters are in the histogram.\n        bool[] histogramIn\
    \ = new bool[128];\n\n        // Keep track of which letters have already been\
    \ seen before.\n        bool[] histogramIn2 = new bool[128];\n\n        // Keep\
    \ track of the current letter with the highest count.\n        char highestLetter\
    \ = 'A';\n\n        // Keep track of the current letter that has the most repetitions.\n\
    \        char highestCountLetter = 'A';\n\n        // Keep track of how many letters\
    \ have already been seen.\n        long totalLetters = 1;\n\n        // Initialize\
    \ the histogram.\n        foreach (char letter in letters) {\n            if (histogram.ContainsKey(letter))\
    \ {\n                histogram[letter]++;\n            } else {\n            \
    \    histogram.Add(letter, 1);\n                histogramLetters[(int)letter]\
    \ = letter;\n            }\n\n            // Check if the letter has been seen\
    \ before.\n            bool found = false;\n            for (int i = 0; i < histogramIn.Length;\
    \ i++) {\n                if (letters[i] == histogramLetters[i]) {\n         \
    \           found = true;\n                    histogramIn[i] = true;\n      \
    \              break;\n                }\n            }\n\n            // If the\
    \ letter has not been seen before, add it to the histogram.\n            if (!found)\
    \ {\n                histogram.Add(letter, 1);\n                histogramLetters[(int)letter]\
    \ = letter;\n                totalLetters++;\n                histogramIn[(int)letter]\
    \ = true;\n            }\n\n            // Keep track of the current letter that\
    \ has the most repetitions.\n            if (histogram.Values.ElementAt(0).Value\
    \ > highestCountLetter) {\n                highestCountLetter = letter;\n    \
    \        }\n\n            // Keep track of the current letter with the highest\
    \ count.\n            if (histogram.Values.ElementAt(0).Value > highestLetter)\
    \ {\n                highestLetter = letter;\n            }\n        }\n\n   \
    \     // Return the histogram.\n        return histogram;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        List<string> listOfLetters\
    \ = new List<string>();\n        char[] array1 = test.ToCharArray();\n       \
    \ foreach (char letter1 in array1) {\n            foreach (char letter2 in array1)\
    \ {\n                if (letter1 != letter2) {\n                    listOfLetters.Add(letter1\
    \ + \" \" + letter2);\n                }\n            }\n        }\n        long\
    \ count = 0;\n        foreach (string letters in listOfLetters) {\n          \
    \  if (result.ContainsKey(letters)) {\n                result[letters]++;\n  \
    \              count++;\n            } else {\n                result.Add(letters,\
    \ 1);\n            }\n        }\n        if (count > 0) {\n            return\
    \ result;\n        } else {\n            return null;\n        }", "        List<string>\
    \ letters = new List<string>();\n        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        foreach (string letter in test.Split(' ')){\n\
    \            long count;\n            if (!result.TryGetValue(letter, out count)){\n\
    \                count = 1;\n            }\n            else{\n              \
    \  count++;\n            }\n            result.Add(letter, count);\n         \
    \   letters.Add(letter);\n        }\n        foreach (string letter in letters){\n\
    \            long maxCount = 0;\n            string maxLetter = null;\n      \
    \      foreach (KeyValuePair<string,long> val in result){\n                long\
    \ count = val.Value;\n                if (count == maxCount){\n              \
    \      maxLetter = val.Key;\n                }\n                else{\n      \
    \              if (count > maxCount){\n                        maxCount = count;\n\
    \                        maxLetter = val.Key;\n                    }\n       \
    \         }\n            }\n            result.Remove(maxLetter);\n          \
    \  result.Add(maxLetter, maxCount);\n        }\n        return result;", "   \
    \     Dictionary<string,long> dict = new Dictionary<string,long>();\n\n      \
    \  foreach (char c in test.ToLower()) {\n            if (!dict.ContainsKey(c))\
    \ {\n                dict.Add(c, 1L);\n            }\n            else {\n   \
    \             long count = dict[c];\n                dict[c] = count + 1L;\n \
    \           }\n        }\n        return dict;", "        Dictionary<string,long>\
    \ ret = new Dictionary<string,long>();\n        foreach(string s in test.Split(\"\
    \ \".ToCharArray(), StringSplitOptions.RemoveEmptyEntries)) {\n            if(ret.ContainsKey(s))\n\
    \                ret[s] += 1;\n            else\n                ret.Add(s, 1L);\n\
    \        }\n        return ret;", "        Dictionary<string,long> answer = new\
    \ Dictionary<string,long>();\n        foreach (string letter in test.Trim().ToCharArray())\
    \ {\n            if (answer.ContainsKey(letter)) {\n                answer[letter]++;\n\
    \            }\n            else {\n                answer.Add(letter, 1L);\n\
    \            }\n        }\n        return answer;", "        // Your code here\n\
    \        StringBuilder result = new StringBuilder();\n        test.ToLower().Split().GroupBy(x\
    \ => x).ToList().ForEach(x => result.Append(string.Format(\"{0} {1}\", x.Key,\
    \ x.Count())));\n        return new Dictionary<string,long>() { {result.ToString(),1L}\
    \ };", "        Dictionary<string,long> histogram = new Dictionary<string,long>();\n\
    \        foreach (char c in test.ToLower()) {\n            long count;\n     \
    \       if (histogram.TryGetValue(c, out count)) {\n                histogram[c]\
    \ = histogram[c] + 1;\n            } else {\n                histogram[c] = 1;\n\
    \            }\n        }\n        return histogram;", "        // Initialize\
    \ dictionaries\n        Dictionary<string,long> letters = new Dictionary<string,long>();\n\
    \        Dictionary<string,long> lettersWithSameCount = new Dictionary<string,long>();\n\
    \n        // Split string into letters\n        char[] chars = test.ToCharArray();\n\
    \        foreach(char c in chars) {\n            if (!letters.ContainsKey(c))\
    \ {\n                letters.Add(c, 1L);\n            } else {\n             \
    \   letters[c]++;\n            }\n        }\n\n        // Iterate over letters\
    \ and add occurences to dictionary\n        foreach(var letter in letters) {\n\
    \            long count = letters[letter];\n            if(!lettersWithSameCount.ContainsKey(letter))\
    \ {\n                lettersWithSameCount.Add(letter, count);\n            } else\
    \ {\n                lettersWithSameCount[letter] += count;\n            }\n \
    \       }\n\n        // Sort dictionary by values\n        lettersWithSameCount\
    \ = lettersWithSameCount.OrderByDescending(x => x.Value).ToDictionary(x => x.Key,\
    \ x => x.Value);\n\n        // Return the dictionary containing all letters with\
    \ the highest count\n        return lettersWithSameCount.FirstOrDefault();", " \
    \       string [] arr = test.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n\
    \        Dictionary<string,long> result = new Dictionary<string,long>();\n   \
    \     foreach (string s in arr) {\n            if (result.ContainsKey(s)) {\n\
    \                result[s] += 1;\n            } else {\n                long i\
    \ = 0;\n                if (result.TryGetValue(s, out i)) {\n                \
    \    result[s] = i;\n                }\n            }\n        }\n        return\
    \ result;", "        var letters = new List<string>();\n        var counter =\
    \ new Dictionary<string, long>();\n        var splitted = test.Split();\n    \
    \    foreach (var letter in splitted) {\n            letters.Add(letter);\n  \
    \          long count;\n            if (!counter.TryGetValue(letter, out count))\
    \ {\n                counter.Add(letter, 1L);\n            } else {\n        \
    \        counter[letter]++;\n            }\n        }\n        var results = new\
    \ Dictionary<string, long>();\n        foreach (var letter in letters) {\n   \
    \         var count = counter[letter];\n            if (!results.TryGetValue(letter,\
    \ out count)) {\n                results.Add(letter, count);\n            } else\
    \ {\n                results[letter] = Math.Max(results[letter], count);\n   \
    \         }\n        }\n        return results;", "        if (string.IsNullOrEmpty(test))\
    \ {\n            return new Dictionary<string,long>();\n        }\n\n        long\
    \ max = 0L;\n        Dictionary<string, long> result = new Dictionary<string,\
    \ long>();\n        foreach (string s in test.Split(' ')) \n            if (s.Length\
    \ > 0) {\n                if (result.ContainsKey(s)) \n                    result[s]\
    \ = result[s] + 1;\n                else\n                    result.Add(s, 1L);\n\
    \n                if (result[s] > max) \n                    max = result[s];\n\
    \            }\n        return result;", "        if (test.Trim().Length == 0)\n\
    \            return new Dictionary<string,long>();\n        \n        var result\
    \ = new Dictionary<string,long>();\n        var alphabet = new char[26];\n   \
    \     alphabet[0] = 'a';\n        alphabet[1] = 'b';\n        alphabet[2] = 'c';\n\
    \        alphabet[3] = 'd';\n        alphabet[4] = 'e';\n        alphabet[5] =\
    \ 'f';\n        alphabet[6] = 'g';\n        alphabet[7] = 'h';\n        alphabet[8]\
    \ = 'i';\n        alphabet[9] = 'j';\n        alphabet[10] = 'k';\n        alphabet[11]\
    \ = 'l';\n        alphabet[12] = 'm';\n        alphabet[13] = 'n';\n        alphabet[14]\
    \ = 'o';\n        alphabet[15] = 'p';\n        alphabet[16] = 'q';\n        alphabet[17]\
    \ = 'r';\n        alphabet[18] = 's';\n        alphabet[19] = 't';\n        alphabet[20]\
    \ = 'u';\n        alphabet[21] = 'v';\n        alphabet[22] = 'w';\n        alphabet[23]\
    \ = 'x';\n        alphabet[24] = 'y';\n        alphabet[25] = 'z';\n        \n\
    \        // initialize our counts\n        for (int i = 0; i <= 25; i++) {\n \
    \           long count = 0;\n            if (test.Length > 0) {\n            \
    \    for (int j = 0; j < test.Length; j++) {\n                    if (alphabet[j]\
    \ == test[j]) {\n                        count++;\n                    }\n   \
    \             }\n            }\n            result.Add(alphabet.GetValue(i).ToString(),\
    \ count);\n        }\n        \n        // return the most frequent letter\n \
    \       var mostFrequent = result;\n        foreach (KeyValuePair<string, long>\
    \ kvp in result)\n            if (kvp.Value > mostFrequent.Value) \n         \
    \       mostFrequent = kvp;\n        return mostFrequent;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        char[] c = test.ToCharArray();\n\
    \        foreach (char x in c) {\n            long count;\n            if (result.TryGetValue(x,\
    \ out count)) {\n                result[x] += 1;\n            } else {\n     \
    \           result[x] = 1;\n            }\n        }\n        return result;",
  "        return test.ToLower().Trim().Split(' ')\n            .GroupBy(c => c)\n\
    \            .OrderByDescending(g => g.Count())\n            .ToDictionary(g =>\
    \ g.Key, g => g.Count());", "        var letters = test.Split(' ');\n        var\
    \ histogram = new Dictionary<string, long>();\n        foreach (var letter in\
    \ letters) {\n            if (histogram.ContainsKey(letter)) {\n             \
    \   histogram[letter]++;\n            }\n            else {\n                histogram.Add(letter,\
    \ 1L);\n            }\n        }\n        return histogram;", "        string\
    \ histogram = string.Join(\" \", test.Split().Select(x => x));\n        string\
    \ pattern = string.Join(\"\", test.Split().Select(x => x.ToLower()));\n      \
    \  Dictionary<string,long> result = new Dictionary<string,long>();\n        long\
    \ letters = histogram.Length;\n        string charsGroup = string.Join(\"\", histogram.GroupBy(x\
    \ => x).Select(x => x.Key));\n        foreach(char c in charsGroup) {\n      \
    \      if (result.ContainsKey(c)) {\n                result[c] += letters;\n \
    \           } else {\n                result[c] = letters;\n            }\n  \
    \          letters /= 2;\n        }\n        return result;", "        // Step\
    \ 1: Split string on spaces.\n        char[] letters = test.ToCharArray();\n \
    \       var letterCount = new Dictionary<string,long>();\n\n        // Step 2:\
    \ Count each letter.\n        foreach (char letter in letters) {\n           \
    \ string key = letter.ToString();\n\n            if (letterCount.ContainsKey(key))\
    \ {\n                letterCount[key]++;\n            } else {\n             \
    \   letterCount[key] = 1;\n            }\n        }\n\n        // Step 3: Find\
    \ letters with same occurrence.\n        var keyValues = letterCount.ToArray();\n\
    \        Array.Sort(keyValues, (x, y) => String.CompareOrdinal(x.Key, y.Key));\n\
    \        Dictionary<string,long> result = new Dictionary<string,long>();\n\n \
    \       // Step 4: Add letters with same occurrence with their counts\n      \
    \  foreach (var keyValuePair in keyValues) {\n            result.Add(keyValuePair.Key,\
    \ keyValuePair.Value);\n        }\n\n        return result;", "        Dictionary<string,\
    \ long> dictionary = new Dictionary<string, long>();\n        if (test.Length\
    \ == 0) {\n            return dictionary;\n        }\n\n        char[] chars =\
    \ test.ToCharArray();\n\n        for (int i = 0; i < chars.Length; i++) {\n  \
    \          char c = chars[i];\n\n            if (dictionary.ContainsKey(c)) {\n\
    \                dictionary[c] += 1;\n            } else {\n                dictionary.Add(c,\
    \ 1L);\n            }\n        }\n\n        return dictionary;", "        var\
    \ result = new Dictionary<string,long>();\n        foreach(var c in test.Trim().ToLower())\
    \ {\n            if (result.ContainsKey(c)) {\n                result[c] += 1;\n\
    \            }\n            else {\n                result[c] = 1;\n         \
    \   }\n        }\n        return result;", "        // Write your code here.\n\
    \        return test.Split(' ').GroupBy(x => x).OrderByDescending(x => x.Count()).FirstOrDefault().ToDictionary(x\
    \ => x.Key, x => x.Count());", "        char[] chars = test.ToCharArray();\n \
    \       Dictionary<string, long> result = new Dictionary<string, long>();\n  \
    \      foreach (char c in chars) {\n            string currentString = Convert.ToString(c.ToString());\n\
    \            if (result.Keys.Contains(currentString)) {\n                result[currentString]\
    \ += 1;\n            } else {\n                result.Add(currentString, 1);\n\
    \            }\n        }\n        return result;", "        List<string> words\
    \ = test.Split(\" \".ToCharArray()).ToList();\n        Dictionary<string,long>\
    \ results = new Dictionary<string,long>();\n        long maxRepeat = 1;\n    \
    \    foreach(string word in words) {\n            if (results.ContainsKey(word))\n\
    \                maxRepeat = Math.Max(maxRepeat, results.ContainsKey(word) ? results[word]\
    \ : 1L);\n            else\n                results.Add(word, 1L);\n        }\n\
    \        foreach(string word in results) {\n            if (results[word] > maxRepeat)\
    \ {\n                results[word] = maxRepeat;\n            }\n        }\n  \
    \      return results;", "        var letters = test.ToCharArray();\n        var\
    \ histogram = new Dictionary<string,long>();\n        foreach (var letter in letters)\
    \ {\n            if (histogram.ContainsKey(letter)) {\n                histogram[letter]++;\n\
    \            } else {\n                histogram.Add(letter, 1L);\n          \
    \  }\n        }\n        return histogram;", '        return Histogram(test.ToLowerInvariant());',
  "        var letters = test.Trim().ToLowerInvariant().Split(new[] {' '}).ToArray();\n\
    \        var counts = new Dictionary<string, long>();\n\n        var letter =\
    \ letters[0];\n        foreach (string s in letters.Skip(1))\n        {\n    \
    \        counts[letter] += s.Count(c => c == letter);\n            letter = s;\n\
    \        }\n\n        return counts;", "        var dict = new Dictionary<string,long>();\n\
    \        foreach (var c in test.Trim().Split(' ')) {\n            if (dict.ContainsKey(c))\
    \ {\n                dict[c]++;\n            } else {\n                dict.Add(c,\
    \ 1);\n            }\n        }\n        var result = new List<Tuple<string,long>>();\n\
    \        foreach (var c in dict) {\n            result.Add(new Tuple<string,long>(c.Key,\
    \ c.Value));\n        }\n        return result.GroupBy(x => x.Item1)\n       \
    \     .OrderByDescending(x => x.Count())\n            .ToDictionary(x => x.Key);",
  "        // Initialize dictionary to store letter and count of occurrence\n    \
    \    Dictionary<string, long> letters = new Dictionary<string, long>();\n\n  \
    \      // Loop over each letter in the string\n        foreach (string letter\
    \ in test.Split(' ').OrderBy(c => c)) {\n            long count;\n\n         \
    \   // Try to add letter to dictionary if it doesn't exist\n            if (!letters.TryGetValue(letter,\
    \ out count)) {\n                letters.Add(letter, 1);\n            } else {\n\
    \                // Increment count of letter if present\n                letters[letter]\
    \ = letters[letter] + 1;\n            }\n        }\n\n        // Return dictionary\
    \ as described above\n        return letters;", "        var result = new Dictionary<string,\
    \ long>();\n        string[] words = test.Split(\" \");\n        foreach (string\
    \ s in words)\n        {\n            string letter = s;\n            long num;\n\
    \            if (result.TryGetValue(letter, out num))\n            {\n       \
    \         result[letter] = num + 1;\n            }\n            else\n       \
    \     {\n                result[letter] = 1;\n            }\n        }\n     \
    \   return result;", "        var dict = new Dictionary<string,long>();\n    \
    \    var letters = test.Split(' ').ToList();\n        var freq = new Dictionary<char,\
    \ int>();\n        foreach (var letter in letters) {\n            if (letter.Length\
    \ > 0) {\n                if (freq.ContainsKey(letter)) {\n                  \
    \  freq[letter]++;\n                } else {\n                    freq[letter]\
    \ = 1;\n                }\n            }\n        }\n        foreach (var freq\
    \ in freq) {\n            dict.Add(freq.Key, freq.Value);\n        }\n       \
    \ return dict;", "        char[] chars = test.ToCharArray();\n        Array.Sort(chars);\n\
    \        Dictionary<string,long> frequency = new Dictionary<string,long>();\n\
    \        foreach (char c in chars) {\n            if (frequency.ContainsKey(c))\
    \ {\n                frequency[c] += 1;\n            } else {\n              \
    \  frequency.Add(c, 1L);\n            }\n        }\n        return frequency;",
  "        Dictionary<string,long> dict = new Dictionary<string,long>();\n       \
    \ HashSet<string> strs = new HashSet<string>();\n        char[] chars = s.ToCharArray();\n\
    \        foreach (char c in chars) {\n            if (chars.Count(a => a == c)\
    \ > 1)\n                strs.Add(c);\n        }\n        foreach (string s in\
    \ strs) {\n            long occurrence = test.Count(a => a == s);\n          \
    \  if (dict.ContainsKey(s))\n                dict[s] += occurrence;\n        \
    \    else\n                dict[s] = occurrence;\n        }\n        return dict;",
  "        string s = test.Trim();\n        var dict = new Dictionary<string,long>();\n\
    \        foreach (string letter in s.Split(' ')) {\n            long count = 1;\n\
    \            if (dict.TryGetValue(letter, out count))\n                dict[letter]\
    \ += count;\n            else\n                dict[letter] = count;\n       \
    \ }\n        return dict;", "        return test.Split(' ').GroupBy(x => x).OrderByDescending(x\
    \ => x.Count()).ToDictionary(x => x.Key, x => x.Count());", "        return test.Split('\
    \ ').GroupBy(x => x).OrderByDescending(x => x.Count()).FirstOrDefault().ToDictionary(x\
    \ => x.Key, x => x.Count());", "        var dict = new Dictionary<string,long>();\n\
    \        var str = test.Split(' ');\n        var count = str.Count(x => dict.ContainsKey(x));\n\
    \        var dict2 = str.GroupBy(x => x).Where(x => x.Count() > 1).Select(y =>\
    \ new { Key = y.Key, Count = y.Count() }).OrderByDescending(x => x.Count).First();\n\
    \        dict.AddRange(dict2);\n        return dict;", "        if (test.Length\
    \ == 0) return new Dictionary<string,long>();\n\n        var hashSet = new HashSet<string>(test);\n\
    \        var dict = new Dictionary<string,long>();\n        var i = 0;\n     \
    \   while (i < test.Length) {\n            var key = test.Substring(i, 1);\n \
    \           if (hashSet.Contains(key)) {\n                if (!dict.ContainsKey(key))\
    \ {\n                    i++;\n                    if (!test.Contains(key, i))\n\
    \                        i++;\n                } else {\n                    dict[key\
    \ ] += 1;\n                }\n            } else {\n                i++;\n   \
    \         }\n        }\n        return dict;", "        HashSet<string> s = new\
    \ HashSet<string>();\n        Dictionary<string, long> result = new Dictionary<string,\
    \ long>();\n        StringBuilder buf = new StringBuilder();\n        foreach\
    \ (char c in test) {\n            if (s.Contains(c)) {\n                s.Add(c);\n\
    \                result.Add(c, s.Count(c));\n            } else {\n          \
    \      s.Add(c);\n                buf.Append(c);\n            }\n        }\n \
    \       return result;", "        string input = test.ToLower();\n        char[]\
    \ letters = input.ToCharArray();\n        Array.Sort(letters);\n        var result\
    \ = new Dictionary<string,long>();\n        string curLetter = null;\n       \
    \ var letterCounts = new List<string>();\n        long curCount = 0;\n       \
    \ foreach (char c in letters) {\n            if (c != curLetter) {\n         \
    \       if (curCount > 0) {\n                    result.Add(curLetter, curCount);\n\
    \                }\n                curLetter = c;\n                curCount =\
    \ 0;\n            } else {\n                curCount++;\n            }\n     \
    \   }\n        if (curCount > 0) {\n            result.Add(curLetter, curCount);\n\
    \        }\n        return result;", "        var result = new Dictionary<string,long>();\n\
    \n        var list = test.Trim().Split(' ');\n\n        foreach (var item in list)\n\
    \        {\n            if (item.Length > 1)\n            {\n                if\
    \ (result.ContainsKey(item))\n                    result[item]++;\n          \
    \      else\n                    result[item] = 1;\n            }\n          \
    \  else\n            {\n                if (result.ContainsKey(item))\n      \
    \              result[item]++;\n                else\n                    result.Add(item,\
    \ 1);\n            }\n        }\n\n        var maxValue = 0;\n        foreach\
    \ (var value in result.Values)\n            if (value > maxValue)\n          \
    \      maxValue = value;\n\n        foreach (var value in result.Values)\n   \
    \     {\n            if (value == maxValue)\n            {\n                result.Remove(value);\n\
    \                break;\n            }\n        }\n        return result;", " \
    \       // Get the letter counts so it's easier to sort them by the value later\n\
    \        Dictionary<string, long> result = new Dictionary<string, long>();\n \
    \       foreach (char c in test.ToCharArray()) {\n            string letter =\
    \ Char.ToString(c);\n            if (result.ContainsKey(letter)) {\n         \
    \       result[letter]++;\n            } else {\n                result.Add(letter,\
    \ 1L);\n            }\n        }\n\n        // Sort the letters so it's easier\
    \ to return the most frequent one\n        result = result.OrderByDescending(x\
    \ => x.Value).ToDictionary(x => x.Key, x => x.Value);\n\n        // Return the\
    \ result if it's at least one letter\n        if (result.Count > 0) {\n      \
    \      return result;\n        } else {\n            return null;\n        }",
  "        List<string> letters = new List<string>();\n        foreach (char c in\
    \ test.ToLower()) {\n            letters.Add(c.ToString());\n        }\n     \
    \   char[] letterChars = letters.ToArray();\n        Array.Sort(letterChars);\n\
    \        Dictionary<string, long> histogram = new Dictionary<string, long>();\n\
    \        for (int i = 0; i < letterChars.Length; i++) {\n            histogram.Add(letterChars[i].ToString(),\
    \ 0);\n        }\n        foreach (char c in letterChars) {\n            string\
    \ charString = c.ToString();\n            long currCount = 0;\n            foreach\
    \ (string k in histogram.Keys) {\n                if (charString.Contains(k))\
    \ {\n                    currCount++;\n                }\n            }\n    \
    \        histogram[charString] = currCount;\n        }\n        return histogram;",
  "        // We need to keep track of the number of times that each letter appears\n\
    \        // The first key is the letter, the second is the number of times it\
    \ occurs\n        var result = new Dictionary<string,long>();\n        foreach(string\
    \ word in test.Split()) {\n            foreach(char letter in word) {\n      \
    \          if(!result.ContainsKey(letter)) {\n                    result[letter]\
    \ = 1;\n                } else {\n                    result[letter]++;\n    \
    \            }\n            }\n        }\n        return result;", '        return
    test.ToCharArray().GroupBy(c => c).OrderByDescending(x => x.Count()).FirstOrDefault().OrderBy(x
    => x.Key);', "        // TODO: Make this more efficient\n        var dict = test.Split(\"\
    \ \").ToList().GroupBy(i => i).ToDictionary(i => i.Key, i => i.Count());\n   \
    \     var maxCount = dict.Max(i => i.Value);\n        var maxLetter = dict.OrderByDescending(i\
    \ => i.Value).First().Key;\n        return dict.Where(i => i.Value == maxCount).ToDictionary(i\
    \ => i.Key, i => i.Value);", "        Regex r = new Regex(@\"[a-z]+\", RegexOptions.Compiled);\n\
    \        return test.Split(new char[] { ' ' })\n                    .Select(x\
    \ => new { x.ToLowerInvariant(), count = r.Matches(x).Count })\n             \
    \       .GroupBy(x => x.ToLowerInvariant())\n                    .OrderByDescending(g\
    \ => g.Count())\n                    .First()\n                    .ToDictionary(x\
    \ => x.Key, x => x.Count());", "        Dictionary<string,long> histogram = new\
    \ Dictionary<string,long>();\n\n        foreach (string item in test.Split())\
    \ {\n            int count = 1;\n            if (!histogram.ContainsKey(item))\
    \ {\n                histogram[item] = count;\n            } else {\n        \
    \        histogram[item] += count;\n            }\n        }\n        return histogram;",
  "        var dict = new Dictionary<string,long>();\n        var result = new Dictionary<string,long>();\n\
    \        var letters = new char[26];\n        foreach (var letter in test) {\n\
    \            dict.Add(letter, 0);\n        }\n        foreach (var letter in test)\
    \ {\n            dict[letter]++;\n        }\n        var max = -1;\n        foreach\
    \ (var item in dict) {\n            if (max < item.Value) {\n                max\
    \ = item.Value;\n                result.Add(item.Key, item.Value);\n         \
    \   }\n        }\n        return result;", "        HashSet<string> Letters =\
    \ new HashSet<string>();\n        Dictionary<string,long> Result = new Dictionary<string,long>();\n\
    \        foreach(char Letter in test.ToCharArray()) {\n            Letters.Add(Letter.ToString());\n\
    \        }\n        foreach(var Letter in Letters) {\n            Result.Add(Letter,\
    \ Letters.Count(Letter));\n        }\n        return Result;", "        Dictionary<string,\
    \ long> histo = new Dictionary<string, long>();\n        long maxCount = 0;\n\
    \        char[] arr = test.ToCharArray();\n        foreach (char c in arr) {\n\
    \            long count = histo[c];\n            if (count == 0L) {\n        \
    \        count = 1L;\n            }\n            if (count > maxCount) {\n   \
    \             maxCount = count;\n            }\n            histo[c] = count;\n\
    \        }\n        return histo;", "        Dictionary<string,long> histogram\
    \ = new Dictionary<string,long>();\n        if (test.Length > 0) {\n         \
    \   string[] letters = test.Split(' ');\n            foreach (string letter in\
    \ letters) {\n                if (!histogram.ContainsKey(letter)) {\n        \
    \            histogram[letter] = 1;\n                }\n                else {\n\
    \                    histogram[letter]++;\n                }\n            }\n\
    \        }\n        return histogram;", "        List<string> list = test.Split('\
    \ ').ToList();\n        Dictionary<string, long> result = new Dictionary<string,\
    \ long>();\n        int maxCount = 0;\n        string letter = \"\";\n       \
    \ foreach (string item in list) {\n            foreach (string key in result.Keys)\
    \ {\n                if (item.Contains(key)) {\n                    long count\
    \ = result[key];\n                    if (count > maxCount) {\n              \
    \          maxCount = count;\n                        letter = key;\n        \
    \            }\n                }\n            }\n            if (!result.ContainsKey(letter))\
    \ {\n                long count = result.Count;\n                if (count > maxCount)\
    \ {\n                    maxCount = count;\n                    letter = result.Keys[0];\n\
    \                }\n                result.Add(letter, 1);\n            }\n  \
    \          else {\n                result[letter]++;\n            }\n        }\n\
    \        return new Dictionary<string,long>() { { \"max\", maxCount }, { \"letter\"\
    , letter } };", "        Dictionary<string, long> result = new Dictionary<string,\
    \ long>();\n        if (test == null) return result;\n        var words = test.Split('\
    \ ');\n        foreach (var word in words) {\n            if (!result.ContainsKey(word))\n\
    \                result.Add(word, 1L);\n            else\n                result[word]++;\n\
    \        }\n        return result;", "        if (string.IsNullOrEmpty(test))\n\
    \            return new Dictionary<string,long>();\n\n        // Use a sorted\
    \ dictionary for speed and memory usage.\n        SortedDictionary<string, long>\
    \ freq = new SortedDictionary<string, long>();\n\n        foreach (string letter\
    \ in test.Split(' ').OrderBy(a => a)) {\n            if (freq.ContainsKey(letter))\
    \ {\n                freq[letter]++;\n            } else {\n                freq.Add(letter,\
    \ 1L);\n            }\n        }\n\n        // Return the dictionary with the\
    \ highest count.\n        // If several letters have the same occurrence,\n  \
    \      // return them all.\n        foreach (KeyValuePair<string, long> kvp in\
    \ freq) {\n            if (kvp.Value > 1) {\n                return freq;\n  \
    \          }\n        }\n        return freq;", "        return test.Split(' ').ToLookup(x\
    \ => x).OrderByDescending(x => x.Count()).FirstOrDefault();", "        string[]\
    \ letters = test.Split(\" \");\n        Dictionary<string,long> frequency = new\
    \ Dictionary<string,long>();\n        foreach (string letter in letters) {\n \
    \           if (frequency.ContainsKey(letter)) {\n                frequency[letter]\
    \ = frequency[letter] + 1L;\n            } else {\n                frequency.Add(letter,\
    \ 1L);\n            }\n        }\n        return frequency;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (char c in test.ToCharArray())\
    \ {\n            if (result.ContainsKey(c)) {\n                result[c] += 1;\n\
    \            } else {\n                result[c] = 1;\n            }\n       \
    \ }\n        return result;", "        var counter = new Dictionary<string,long>();\n\
    \        foreach(var c in test.Split(\" \".ToCharArray())) {\n            if (!counter.ContainsKey(c))\
    \ {\n                counter[c] = 1;\n            } else {\n                counter[c]\
    \ += 1;\n            }\n        }\n        return counter;", "        char[] input\
    \ = test.ToCharArray();\n        HashSet<string> counts = new HashSet<string>();\n\
    \        Dictionary<string,long> result = new Dictionary<string,long>();\n   \
    \     foreach (char c in input) {\n            if (counts.Contains(c)) {\n   \
    \             long count = counts[c];\n                counts[c]++;\n        \
    \        foreach (string k in counts) {\n                    if (counts.ContainsKey(k))\
    \ {\n                        counts[k]++;\n                    }\n           \
    \     }\n            }\n            else {\n                counts.Add(c);\n \
    \               counts.TryGetValue(c, out long count);\n            }\n      \
    \  }\n        return result;", "        return test.Split(' ').GroupBy(x => x).OrderByDescending(x\
    \ => x.Count()).ToDictionary(x => x.Key, x => x.Count());", "        var result\
    \ = new Dictionary<string,long>();\n        var tokens = test.Split(new char[]\
    \ { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n        foreach (var token\
    \ in tokens) {\n            if (result.ContainsKey(token)) {\n               \
    \ result[token]++;\n            } else {\n                result.Add(token, 1L);\n\
    \            }\n        }\n        return result;", "        // Split string into\
    \ array, trim whitespace from each element\n        char[] chars = test.ToCharArray().Select(c\
    \ => c.ToLower()).Where(c => c != ' ').ToArray();\n        // Sort the array alphabetically\
    \ and put into dictionary where letter as key, and count as value\n        Dictionary<string,long>\
    \ letters = new SortedDictionary<string,long>(chars.Length, (s,i) => chars[i]);\n\
    \        string word = \"\";\n        for (int i = 0; i < chars.Length; i++) {\n\
    \            word = word + chars[i];\n            if (letters.ContainsKey(word))\
    \ {\n                letters[word]++;\n            } else {\n                letters.Add(word,\
    \ 1L);\n            }\n        }\n        return letters;", "        if (test.Trim().Length\
    \ == 0) {\n            return new Dictionary<string,long>();\n        }\n\n  \
    \      char[] chars = test.ToLower().ToCharArray();\n        Dictionary<string,long>\
    \ results = new Dictionary<string,long>();\n        for(int i=0;i<chars.Length;i++)\
    \ {\n            string letter = chars[i].ToString();\n            if (!results.ContainsKey(letter))\
    \ {\n                results.Add(letter, 1);\n            }\n            else\
    \ {\n                results[letter]++;\n            }\n        }\n\n        return\
    \ results.OrderByDescending(x => x.Value).ToDictionary(x => x.Key, x => x.Value);",
  "        Dictionary<string,long> hist = new Dictionary<string,long>();\n       \
    \ if (test.Length == 0) {\n            return hist;\n        }\n        var letters\
    \ = test.ToCharArray().Distinct();\n        foreach(var letter in letters) {\n\
    \            int count = 0;\n            foreach (char c in test.ToCharArray())\
    \ {\n                if (c == letter) {\n                    count++;\n      \
    \          }\n            }\n            hist.Add(letter, count);\n        }\n\
    \        return hist;", "        Dictionary<string, long> letters = new Dictionary<string,\
    \ long>();\n        char[] letterArray = test.ToCharArray();\n        for (int\
    \ i = 0; i < letterArray.Length; i++)\n            letters.Add(letterArray[i],\
    \ 1);\n        return letters;", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        foreach (char letter in test.ToCharArray())\
    \ {\n            if (!result.ContainsKey(letter)) {\n                result.Add(letter,\
    \ 1);\n            } else {\n                result[letter]++;\n            }\n\
    \        }\n        return result;", "        Dictionary<string,long> result =\
    \ new Dictionary<string,long>();\n        foreach (string s in test.Split(' '))\
    \ {\n            if (!s.IsLetterOrDigit()) {\n                return result;\n\
    \            }\n            long count = 0;\n            if (result.ContainsKey(s))\
    \ {\n                count = result[s];\n            }\n            else {\n \
    \               count = 1;\n            }\n            result[s] += 1;\n     \
    \   }\n        return result;", "        if(test.Length > 0) {\n            var\
    \ dictionary = new Dictionary<string,long>();\n            var strings = test.Split(\"\
    \ \".ToCharArray());\n            foreach(string str in strings) {\n         \
    \       if(!dictionary.ContainsKey(str)) {\n                    dictionary.Add(str,\
    \ 1L);\n                } else {\n                    dictionary[str] = dictionary[str]\
    \ + 1L;\n                }\n            }\n            return dictionary;\n  \
    \      } else {\n            return new Dictionary<string,long>();\n        }",
  "        string test2 = test.Trim().ToLower();\n        char[] charArray = test2.ToCharArray();\n\
    \        Dictionary<string, long> histo = new Dictionary<string,long>();\n   \
    \     Dictionary<string, long> maxi = new Dictionary<string,long>();\n\n     \
    \   for (int i = 0; i < charArray.Length; i++) {\n            if (maxi.ContainsKey(charArray[i]))\n\
    \                maxi[charArray[i]] += 1;\n            else\n                maxi.Add(charArray[i],\
    \ 1);\n        }\n\n        for (int i = 0; i < charArray.Length; i++) {\n   \
    \         if (histo.ContainsKey(charArray[i]))\n                histo[charArray[i]]\
    \ += maxi[charArray[i]];\n            else\n                histo.Add(charArray[i],\
    \ maxi[charArray[i]]);\n        }\n\n        return histo;", "        List<string>\
    \ list = test.Split(' ').ToList();\n        var dict = new Dictionary<string,long>();\n\
    \        var result = new Dictionary<string,long>();\n        for (int i = 0;\
    \ i < list.Count; i++) {\n            if (dict.ContainsKey(list[i])) {\n     \
    \           dict[list[i]] += 1;\n            } else {\n                dict[list[i]]\
    \ = 1;\n            }\n        }\n        var maxCount = dict.Values.Max();\n\
    \        foreach (var kvp in dict) {\n            var temp = kvp.Value;\n    \
    \        if (temp == maxCount) {\n                result.Add(kvp.Key, temp);\n\
    \            }\n        }\n        return result;", "        if (string.IsNullOrEmpty(test))\
    \ {\n            return new Dictionary<string,long>();\n        }\n        var\
    \ freq = new Dictionary<string,long>();\n        foreach (var c in test.ToLowerInvariant())\
    \ {\n            if (freq.ContainsKey(c)) {\n                freq[c]++;\n    \
    \        } else {\n                freq.Add(c, 1L);\n            }\n        }\n\
    \        return freq.GroupBy(x => x.Key).OrderByDescending(x => x.Count()).First();",
  "        if (test.Length == 0) return new Dictionary<string, long>();\n        char[]\
    \ charArray = test.ToCharArray();\n        var maxCount = new Dictionary<string,\
    \ long>();\n        foreach (char c in charArray) {\n            long count;\n\
    \            if (maxCount.TryGetValue(c, out count)) {\n                maxCount[c]\
    \ = maxCount[c] + 1;\n            }\n            else {\n                maxCount.Add(c,\
    \ 1);\n            }\n        }\n        return maxCount;", "        if (string.IsNullOrEmpty(test))\
    \ {\n            return new Dictionary<string,long>();\n        }\n        Dictionary<string,\
    \ long> result = new Dictionary<string, long>();\n        var words = test.Split(new[]\
    \ {' '});\n        int max = words.Sum(x => char.IsLetter(x) ? x.Length : 0);\n\
    \        for (int i = 0; i < words.Length; i++) {\n            string word = words[i];\n\
    \            if (char.IsLetter(word)) {\n                if (result.ContainsKey(word))\
    \ {\n                    long currCount = result[word];\n                    long\
    \ newCount = currCount + 1;\n                    result[word] = newCount;\n  \
    \                  if (newCount > max) {\n                        max = newCount;\n\
    \                    }\n                } else {\n                    long newCount\
    \ = 1;\n                    result[word] = newCount;\n                    if (newCount\
    \ > max) {\n                        max = newCount;\n                    }\n \
    \               }\n            }\n        }\n        return result;", "      \
    \  Dictionary<string,long> freq = new Dictionary<string,long>();\n        int\
    \ letterCount;\n\n        foreach (string letter in test.Split(' ').OrderBy(c\
    \ => c.ToString()).ToList()) {\n            letterCount = 0;\n            if (freq.ContainsKey(letter))\
    \ {\n                freq[letter] = freq[letter] + 1;\n            } else {\n\
    \                freq.Add(letter, 1L);\n            }\n        }\n\n        return\
    \ freq.OrderByDescending(k => k.Value).ToDictionary(c => c.Key, c => c.Value);",
  "        var dict = test.ToLower().Split(new[]{' '}, StringSplitOptions.RemoveEmptyEntries).ToDictionary(\
    \ c => c, c => 1L);\n        var max = dict.Keys.Max();\n        foreach(var v\
    \ in dict)\n            if (v != max) dict[v]++;\n        return dict.Where( c\
    \ => c.Value > 1).ToDictionary( c => c.Key, c => c.Value);", "        Dictionary<string,long>\
    \ dict = new Dictionary<string,long>();\n        int count = 1;\n        foreach\
    \ (string item in test.Split(' ')){\n            if (dict.ContainsKey(item)) {\n\
    \                dict[item] += count;\n            } else {\n                dict[item]\
    \ = count;\n            }\n            count += 1;\n        }\n        return\
    \ dict;", "        var dict = new Dictionary<string, long>();\n        var letters\
    \ = test.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries).ToList();\n\
    \        foreach (var letter in letters) {\n            if (letters.ContainsKey(letter))\
    \ {\n                dict[letter] += 1;\n            } else {\n              \
    \  dict[letter] = 1;\n            }\n        }\n        return dict;", "     \
    \   Dictionary<string,long> result = new Dictionary<string,long>();\n        var\
    \ words = test.Split(new char[]{' '}, StringSplitOptions.RemoveEmptyEntries);\n\
    \        foreach (var item in words) {\n            if (!result.ContainsKey(item))\
    \ result[item] = 1;\n            else result[item]++;\n        }\n        return\
    \ result;", "        // TODO: Write your function here\n        return new Dictionary<string,long>();",
  "        if (test == null) return new Dictionary<string,long>();\n        if (test.Length\
    \ == 0) return new Dictionary<string,long>();\n\n        Dictionary<string,long>\
    \ res = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')) {\n            if (s.Length > 0) {\n                if (res.ContainsKey(s))\
    \ {\n                    res[s] += 1;\n                } else {\n            \
    \        res[s] = 1L;\n                }\n            }\n        }\n        return\
    \ res;", "        Debug.Assert(!string.IsNullOrWhiteSpace(test));\n        Debug.Assert(test.Length\
    \ > 0);\n        Dictionary<string,long> letterCounts = new Dictionary<string,\
    \ long>();\n        char[] charArray = test.ToCharArray();\n        foreach (char\
    \ c in charArray) {\n            if(!letterCounts.ContainsKey(c)){\n         \
    \       letterCounts.Add(c, 0L);\n            }\n            long currCount =\
    \ letterCounts[c];\n            letterCounts[c] = currCount + 1;\n        }\n\
    \        return letterCounts;", "        Dictionary<string,long> dict = new Dictionary<string,long>();\n\
    \        foreach(string s in test.Split(' ').OrderByDescending(c=>c.Length).ThenBy(c=>c))\
    \ {\n            long num = dict.TryGetValue(s, out long n) ? n : 0L;\n      \
    \      dict[s] = num + 1;\n        }\n        return dict;", "        if(string.IsNullOrEmpty(test))\
    \ return new Dictionary<string,long>();\n        var result = new Dictionary<string,long>();\n\
    \        foreach (string item in test.Trim().Split(' '))\n        {\n        \
    \    if (!result.ContainsKey(item))\n            {\n                result[item]\
    \ = 1;\n            }\n            else\n            {\n                result[item]++;\n\
    \            }\n        }\n        return result;", "        HashSet<string> counts\
    \ = new HashSet<string>();\n        foreach(string letter in test.Split(' ')){\n\
    \            counts.Add(letter);\n        }\n        HashMap<string,long> d =\
    \ new HashMap<string,long>();\n        foreach(string letter in counts){\n   \
    \         if (d.ContainsKey(letter)){\n                d[letter]++;\n        \
    \    }\n            else{\n                d[letter] = 1;\n            }\n   \
    \     }\n        Dictionary<string,long> ret = new Dictionary<string,long>();\n\
    \        foreach(string key in d.Keys){\n            if(d.Values.Contains(d[key])){\n\
    \                ret.Add(key,d[key]);\n            }\n        }\n        return\
    \ ret;", "        if (test == null) return new Dictionary<string,long>();\n  \
    \      var letters = test.Split(' ');\n        var histo = new Dictionary<string,long>();\n\
    \        foreach (var l in letters) {\n            if (histo.ContainsKey(l))\n\
    \                histo[l]++;\n            else\n                histo[l] = 1;\n\
    \        }\n        return histo;", "        Dictionary<string,long> result =\
    \ new Dictionary<string,long>();\n        foreach (var letter in test.Split('\
    \ ')){\n            if(!result.ContainsKey(letter)){\n                result.Add(letter,\
    \ 1L);\n            }\n            else{\n                result[letter]++;\n\
    \            }\n        }\n        return result;", "        var dict = test.GroupBy(c\
    \ => c).ToDictionary(c => c.Key, c => c.Count());\n        var maxValue = dict.Max(c\
    \ => c.Value);\n        dict = dict.Where(c => c.Value == maxValue).ToDictionary(c\
    \ => c.Key, c => c.Value);\n        return dict;", "        if (string.IsNullOrWhiteSpace(test))\
    \ return new Dictionary<string,long>();\n        var histo = new Dictionary<string,long>();\n\
    \        // Count occurrence of each letters\n        foreach (var item in test.Split('\
    \ '))\n        {\n            if (!histo.ContainsKey(item))\n            {\n \
    \               histo[item] = 1L;\n            }\n            else histo[item]++;\n\
    \        }\n        // Return most frequent letters\n        var res = new Dictionary<string,long>();\n\
    \        foreach (var item in histo)\n        {\n            if (res.Keys.Contains(item.Key))\n\
    \            {\n                // If count is higher, keep the new item\n   \
    \             if (item.Value > res[item.Key])\n                {\n           \
    \         res.Add(item.Key, item.Value);\n                }\n            }\n \
    \           else\n            {\n                // If count is lower, keep only\
    \ the new item\n                if (item.Value == 1L)\n                {\n   \
    \                 res.Add(item.Key, item.Value);\n                }\n        \
    \    }\n        }\n        return res;", "        var dict = new Dictionary<string,long>();\n\
    \        var parts = test.Split(' ');\n        foreach(var part in parts) {\n\
    \            if (!dict.ContainsKey(part)) dict.Add(part, 0L);\n            dict[part]\
    \ += 1;\n        }\n        return dict;", "        Dictionary<string,long> result\
    \ = new Dictionary<string,long>();\n        foreach (char c in test)\n       \
    \     result.Add(c, test.Count(c));\n        return result;", "        char[]\
    \ letters = test.ToCharArray();\n        Dictionary<string,long> histogram = new\
    \ Dictionary<string,long>();\n\n        foreach(char letter in letters) {\n  \
    \          string key = String.Concat(letter.ToString());\n            if (histogram.ContainsKey(key))\
    \ {\n                long oldValue = histogram[key];\n                histogram[key]\
    \ = oldValue + 1;\n            } else {\n                histogram.Add(key, 1L);\n\
    \            }\n        }\n\n        return histogram;", "        if (string.IsNullOrEmpty(test))\
    \ {\n            return new Dictionary<string,long>();\n        }\n        char\
    \ firstChar = test[0];\n        string sortedLetters = test.ToLower();\n     \
    \   Dictionary<string,long> letterCounter = new Dictionary<string,long>();\n \
    \       foreach (char letter in sortedLetters) {\n            if (!letterCounter.ContainsKey(letter))\
    \ {\n                letterCounter.Add(letter, 1L);\n                continue;\n\
    \            }\n            long letterCount = letterCounter[letter];\n      \
    \      letterCounter[letter] = letterCount + 1;\n        }\n        IEnumerable<KeyValuePair<string,\
    \ long>> keyValuePairs = letterCounter.OrderByDescending(kvp => kvp.Value);\n\
    \        if (keyValuePairs.Count() == 1) {\n            return keyValuePairs.First();\n\
    \        }\n        else {\n            return letterCounter.Take(1).First();\n\
    \        }", "        if (String.IsNullOrEmpty(test))\n            return new\
    \ Dictionary<string,long>();\n\n        List<char> chars = test.ToLower().ToCharArray();\n\
    \        var result = new Dictionary<string,long>();\n        var temp = new int[26];\n\
    \n        for (int i = 0; i < chars.Length; i++) {\n            var ch = chars[i];\n\
    \            temp[ch] += 1;\n        }\n\n        foreach (var pair in temp.GroupBy(x\
    \ => x))\n        {\n            if (pair.Count() > 1)\n            {\n      \
    \          result.Add(pair.Key, pair.Count());\n            }\n        }\n   \
    \     return result;", "        // First split the string into an array of lower\
    \ case letters.\n        var letters = test.ToLower().Split(' ');\n\n        //\
    \ Sort the letters so that the count of repetition is in ascending order.\n  \
    \      var lettersWithCount = letters.OrderBy(i => i).GroupBy(i => i).ToDictionary(i\
    \ => i.Key, i => i.Count());\n\n        // Now calculate the letter with the most\
    \ repetition, return it, and the number of repetitions.\n        return lettersWithCount.First().Value\
    \ >= lettersWithCount.Max() ? lettersWithCount : lettersWithCount.First();", " \
    \       return test.Split(' ').GroupBy(c => c).OrderByDescending(c => c.Count()).Take(1).ToDictionary(c\
    \ => c.Key, c => c.Count());", "        // Your code goes here\n        Dictionary<string,long>\
    \ histogram = new Dictionary<string, long>();\n        foreach (char c in test.ToCharArray())\
    \ {\n            string key = c.ToString();\n            if (!histogram.ContainsKey(key))\
    \ {\n                histogram.Add(key, 1L);\n            } else {\n         \
    \       histogram[key]++;\n            }\n        }\n        return histogram;",
  "        var result = new Dictionary<string,long>();\n        foreach (var item\
    \ in test.Split(' '))\n            if (!result.ContainsKey(item)) result[item]\
    \ = 1;\n            else\n                result.TryGetValue(item, out long count);\n\
    \        return result;", "        // Split string into array\n        string[]\
    \ chars = test.Split();\n        // Initialize dictionary with the empty string\n\
    \        Dictionary<string,long> result = new Dictionary<string,long>();\n   \
    \     // Initialize counter\n        long counter = 0;\n        // Scan array\n\
    \        foreach (string c in chars) {\n            // Increment counter if char\
    \ found\n            if (result.ContainsKey(c)) {\n                result[c]++;\n\
    \                // If it is the most repeated letter, store it\n            \
    \    if (result[c] > counter) {\n                    counter = result[c];\n  \
    \              }\n            } else {\n                // If no occurences, create\
    \ new pair\n                result[c] = 1;\n            }\n        }\n       \
    \ // Return result\n        return result;", "        var letters = test.Split();\n\
    \        var histogram = new Dictionary<string, long>();\n        foreach(var\
    \ letter in letters) {\n            if(!histogram.ContainsKey(letter))\n     \
    \           histogram[letter] = 1;\n            else {\n                histogram[letter]\
    \ = histogram[letter] + 1;\n            }\n        }\n\n        return histogram;",
  "        if (test.Length == 0) {\n            return new Dictionary<string, long>();\n\
    \        }\n\n        Dictionary<string, long> histo = new Dictionary<string,long>();\n\
    \n        string s = string.Empty;\n        string[] sa = test.Split(' ');\n\n\
    \        foreach (string str in sa) {\n            if (!string.IsNullOrEmpty(str))\
    \ {\n                s += \" \" + str;\n            }\n        }\n\n        s\
    \ = s.Trim().TrimStart(' ');\n\n        foreach (string str in s.Split(' '))\n\
    \        {\n            string letter = str.Substring(0, 1);\n            long\
    \ num = long.Parse(str.Substring(1).Replace(',', ''));\n\n            if (num\
    \ > 0)\n            {\n                if (histo.ContainsKey(letter)) {\n    \
    \                histo[letter] += num;\n                }\n                else\n\
    \                {\n                    histo.Add(letter, num);\n            \
    \    }\n            }\n        }\n\n        return histo;", "        char[] histogram\
    \ = test.ToCharArray();\n        int n = histogram.Length;\n        int nCount\
    \ = 0;\n        Dictionary<string, long> letterCounts = new Dictionary<string,\
    \ long>();\n        for(int i = 0; i < n; ++i) {\n            if (histogram[i]\
    \ == '.') {\n                continue;\n            }\n            string letter\
    \ = histogram[i].ToString();\n            if (!letterCounts.ContainsKey(letter))\
    \ {\n                letterCounts[letter] = 1;\n            }\n            else\
    \ {\n                letterCounts[letter]++;\n            }\n        }\n     \
    \   letterCounts = letterCounts.OrderByDescending(x => x.Value).ToDictionary(x\
    \ => x.Key, x => x.Value);\n        for(int i = 0; i < n; ++i) {\n           \
    \ if (histogram[i] == '.') {\n                continue;\n            }\n     \
    \       string letter = histogram[i].ToString();\n            if (letterCounts.ContainsKey(letter))\
    \ {\n                letterCounts[letter]--;\n            }\n        }\n     \
    \   return letterCounts;", "        var histogram = new Dictionary<string, long>();\n\
    \        var chars = test.ToLower().ToCharArray().Select(c => (char) c).ToArray();\n\
    \        var count = new long[26];\n        for (var i = 0; i < chars.Length;\
    \ i++)\n            count[chars[i] - 'a']++;\n        for (var i = 0; i < count.Length;\
    \ i++) {\n            if (histogram[chars[i] - 'a'] == null)\n               \
    \ histogram[chars[i] - 'a'] = 1;\n            else {\n                var temp\
    \ = histogram[chars[i] - 'a'];\n                histogram[chars[i] - 'a'] = Math.Max(temp\
    \ + 1, histogram[chars[i] - 'a']);\n            }\n        }\n        return histogram;",
  "        test = test.ToLower();\n        var freq = test.Split(\" \").Select(x =>\
    \ x.Trim()).ToDictionary(x => x, x => 1);\n        return freq.GroupBy(x => x).OrderByDescending(x\
    \ => x.Count()).First().ToDictionary(x => x.Key, x => x.Count());", "        long\
    \ maxCount = 0;\n        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        // Split the test string into separate words\n        string[] words\
    \ = test.Split(' ');\n        foreach (string word in words) {\n            char[]\
    \ letters = word.ToCharArray();\n            long count = 1;\n            foreach\
    \ (char letter in letters) {\n                if (result.ContainsKey(letter))\
    \ {\n                    count += result[letter];\n                }\n       \
    \         else {\n                    result.Add(letter, count);\n           \
    \         count += 1;\n                }\n            }\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                result = new\
    \ Dictionary<string,long>();\n            }\n        }\n        return result;",
  "        string letters = string.Join(\" \", test.Split(' '));\n        var groups\
    \ = letters.GroupBy(l => l).ToDictionary(g => g.Key, g => g.Count());\n      \
    \  return groups.Keys.GroupBy(l => l).ToDictionary(g => g.Key, g => g.Count());",
  "        var charList = new List<char>();\n        foreach(var i in test) {\n  \
    \          charList.Add(i);\n        }\n        return Histogram(charList);",
  "        if (string.IsNullOrWhiteSpace(test)) {\n            return new Dictionary<string,long>();\n\
    \        }\n        var letters = new HashSet<string>(test.ToCharArray());\n \
    \       Dictionary<string, long> letterOccurrences = new Dictionary<string, long>();\n\
    \n        foreach (char letter in letters) {\n            long count = letterOccurrences.ContainsKey(letter)\
    \ ? letterOccurrences[letter] : 0;\n            letterOccurrences.Add(letter,\
    \ ++count);\n        }\n\n        return letterOccurrences;", "        // Split\
    \ the string up into individual characters\n        char[] chars = test.ToCharArray();\n\
    \n        // Initialize a dictionary to hold each letter and how many times it\
    \ occurs\n        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \n        // Add each letter into the dictionary and increment the count\n   \
    \     foreach(var c in chars) {\n            if(!result.ContainsKey(c)) {\n  \
    \              result.Add(c, 1L);\n            } else {\n                long\
    \ prev = result[c];\n                result[c]++;\n                if(!result.ContainsKey(c)\
    \ || prev < result[c]) {\n                    result.Add(c, prev);\n         \
    \       }\n            }\n        }\n        return result;", "        var result\
    \ = new Dictionary<string,long>();\n        foreach (var character in test.Split('\
    \ ')) {\n            if (result.ContainsKey(character)) {\n                result[character]++;\n\
    \            } else {\n                result.Add(character, 1L);\n          \
    \  }\n        }\n        return result;", "        Dictionary<string,long> histogram\
    \ = new Dictionary<string,long>();\n        char[] chars = test.ToCharArray();\n\
    \        for (int i = 0; i < chars.Length; i++)\n        {\n            if (histogram.ContainsKey(chars[i]))\n\
    \            {\n                histogram[chars[i]]++;\n            }\n      \
    \      else\n            {\n                histogram.Add(chars[i], 1L);\n   \
    \         }\n        }\n        return histogram;", "        Dictionary<string,\
    \ long> histogram = new Dictionary<string, long>();\n\n        if (String.IsNullOrEmpty(test))\
    \ return histogram;\n\n        // split input string on space and iterate over\
    \ each letter\n        foreach (var item in test.Split(' '))\n        {\n    \
    \        // get all letters in the string and increment counter\n            var\
    \ count = test.Where(x => x == item).Count();\n            histogram.Add(item,\
    \ count);\n        }\n\n        // return letter with the highest count\n    \
    \    return histogram.Max();", "        if (test == null)\n            return\
    \ new Dictionary<string,long>();\n        var letters = test.ToLower();\n    \
    \    var lettersWithRepetition = letters.Split(' ').GroupBy(n => n).ToDictionary(g\
    \ => g.Key, g => g.Count());\n        return lettersWithRepetition;", "      \
    \  Dictionary<string,long> histogram = new Dictionary<string,long>();\n      \
    \  if(test == null || test.Length == 0) return histogram;\n        foreach(string\
    \ letter in test.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries))\
    \ {\n            long count;\n            if(histogram.TryGetValue(letter, out\
    \ count)) {\n                histogram[letter] += 1;\n            } else {\n \
    \               histogram[letter] = 1;\n            }\n        }\n        return\
    \ histogram;", "        if (string.IsNullOrWhiteSpace(test)) {\n            return\
    \ new Dictionary<string,long>();\n        }\n        string [] letters = test.Split(\"\
    \ \".ToCharArray());\n        Dictionary<string,long> letterCounts = new Dictionary<string,long>();\n\
    \        for (int i = 0; i < letters.Length; i++) {\n            string currentLetter\
    \ = letters[i];\n            if (!letterCounts.ContainsKey(currentLetter)) {\n\
    \                letterCounts.Add(currentLetter, 0);\n            }\n        \
    \    letterCounts[currentLetter]++;\n        }\n\n        Dictionary<string,long>\
    \ ret = new Dictionary<string,long>();\n        foreach (string k in letterCounts.Keys)\
    \ {\n            if (letterCounts[k] == letters.Length) {\n                ret.Add(k,\
    \ letterCounts[k]);\n            }\n        }\n        return ret;", "       \
    \ if (test.Count() == 0) return (new Dictionary<string,long>());\n        long\
    \ max = 1;\n        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        string letters = test.ToLower();\n        foreach (char letter in letters)\
    \ {\n            if (result[letter] == null || result[letter] <= max) {\n    \
    \            result[letter] = 1;\n                max = Math.Max(max, 1);\n  \
    \          }\n            else {\n                result[letter] += 1;\n     \
    \           max = Math.Max(max, result[letter]);\n            }\n        }\n \
    \       return result;", "        char[] arr = test.ToLower().ToCharArray();\n\
    \        int len = arr.Length;\n        Dictionary<string,long> dict = new Dictionary<string,long>();\n\
    \        long count = 1;\n        for (int i = 0; i < len; i++) {\n          \
    \  string key = string.Empty;\n            char c = arr[i];\n            while\
    \ (c.Equals(arr[i])) {\n                key = key + c;\n                c++;\n\
    \            }\n            if (dict.TryGetValue(key, out long val)) {\n     \
    \           dict[key] = val;\n                count++;\n            } else {\n\
    \                dict.Add(key, count);\n                count = 1;\n         \
    \   }\n        }\n        return dict;", "        // Initialize dictionary to\
    \ zero values\n        var histogram = new Dictionary<string,long>();\n      \
    \  // Initialize the counters\n        long aCount = 0, bCount = 0, cCount = 0;\n\
    \        // Split the string into an array of single characters\n        string[]\
    \ characters = test.Split(' ');\n        // Iterate over the characters and add\
    \ the counts\n        foreach (string character in characters) {\n           \
    \ if (histogram.ContainsKey(character)) {\n                histogram[character]++;\n\
    \            } else {\n                histogram.Add(character, 1L);\n       \
    \     }\n            // Keep track of counts for later use\n            if (character\
    \ == \"a\") {\n                aCount++;\n            } else if (character ==\
    \ \"b\") {\n                bCount++;\n            } else if (character == \"\
    c\") {\n                cCount++;\n            }\n        }\n        // Return\
    \ all counts if there are multiple with the same count\n        if (aCount > bCount\
    \ && aCount > cCount) {\n            return histogram;\n        } else {\n   \
    \         return new Dictionary<string,long>();\n        }", "        Dictionary<string,long>\
    \ histogram = new Dictionary<string,long>();\n        foreach (var letter in test.Split('\
    \ ')) histogram[letter] = (long) histogram.ContainsKey(letter) ? (long) histogram[letter]\
    \ + 1 : (long) 1;\n        return histogram;", "        var result = new Dictionary<string,long>();\n\
    \        long freq;\n        foreach(var c in test.ToCharArray()) {\n        \
    \    freq = result.ContainsKey(c) ? result[c] : 0L;\n            result[c] = freq\
    \ + 1;\n        }\n        return result;", "        Dictionary<string,long> result\
    \ = new Dictionary<string,long>();\n        foreach(string s in test.Split(' '))\
    \ result[s] = 1;\n        foreach(string s in result)\n        {\n           \
    \ if(result.Values.Any(v => v > 1)) continue;\n            if(result.Keys.Any(k\
    \ => k.Equals(s))) continue;\n            result.Add(s, 1);\n        }\n     \
    \   return result;", "        bool flag = true;\n        List<string> chars =\
    \ new List<string>();\n        List<long> count = new List<long>();\n        if\
    \ (test.Trim() == \"\") {\n            return new Dictionary<string,long>();\n\
    \        }\n        foreach (string c in test.Trim().ToLower()) {\n          \
    \  chars.Add(c);\n            count.Add(1);\n        }\n        for (int i = 1;\
    \ i < chars.Count; i++) {\n            for (int j = i; j < chars.Count; j++) {\n\
    \                if (chars[i].ToLower() == chars[j].ToLower()) {\n           \
    \         count[i] += count[j];\n                    chars.RemoveAt(j);\n    \
    \                flag = false;\n                    break;\n                }\n\
    \            }\n        }\n        if (chars.Count > 0) {\n            for (int\
    \ j = 0; j < chars.Count; j++) {\n                count[i] += count[j];\n    \
    \            chars.RemoveAt(j);\n            }\n        }\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        for (int i = 0; i < chars.Count;\
    \ i++) {\n            result.Add(chars[i], count[i]);\n        }\n        return\
    \ result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach(string s in test.Split(' ')){\n            if (s.Length > 0)\
    \ {\n                if (result.ContainsKey(s)){\n                    result[s]\
    \ = Convert.ToInt64(result[s]) + 1;\n                }\n                else {\n\
    \                    result[s] = 1;\n                }\n            }\n      \
    \  }\n        return result;", "        Dictionary<string,long> histogram = new\
    \ Dictionary<string,long>();\n        Dictionary<string,long> previous = new Dictionary<string,long>();\n\
    \        foreach (string c in test.Split(' ')){\n            if (previous.ContainsKey(c)){\n\
    \                previous[c] += 1;\n            } else {\n                previous.Add(c,\
    \ 1L);\n            }\n        }\n        foreach (string key in previous.Keys){\n\
    \            if (histogram.ContainsKey(key)){\n                histogram[key]\
    \ += previous[key];\n            } else {\n                histogram.Add(key,\
    \ previous[key]);\n            }\n        }\n        return histogram;", "   \
    \     string letters = test;\n        string letter = \"\";\n        Dictionary<string,long>\
    \ counts = new Dictionary<string,long>();\n        foreach (char c in letters)\
    \ {\n            letter = c.ToString();\n            if (counts.ContainsKey(letter))\
    \ {\n                counts[letter] += 1;\n            } else {\n            \
    \    counts.Add(letter, 1L);\n            }\n        }\n        return counts;",
  "        // Split on space and split each string into its letters.\n        var\
    \ letters = test.Split().Select(c => c.ToLower()).ToList();\n        var letterCount\
    \ = letters.ToLookup(l => l);\n        // Return most frequent letter\n      \
    \  return letterCount.OrderByDescending(c => c.Count()).FirstOrDefault();", " \
    \       var result = new Dictionary<string, long>();\n        foreach (var letter\
    \ in test)\n        {\n            if (!result.ContainsKey(letter))\n        \
    \    {\n                result.Add(letter, new long());\n            }\n     \
    \       result[letter]++;\n        }\n        return result;", "        var dictionary\
    \ = new Dictionary<string, long>();\n        if (test.Length == 0) {\n       \
    \     return new Dictionary<string, long>();\n        }\n        foreach (char\
    \ letter in test.ToCharArray()) {\n            dictionary.AddOrUpdate(letter,\
    \ () => 0L, (a,b) => Math.Max(a,b));\n        }\n        return dictionary;",
  "        if(string.IsNullOrWhiteSpace(test))\n            return new Dictionary<string,long>();\n\
    \        \n        string letters = test;\n        char[] chars = letters.ToCharArray();\n\
    \        \n        Dictionary<string, long> letters = new Dictionary<string,long>();\n\
    \        int currentCount = 1;\n        string letter = null;\n        foreach\
    \ (char c in chars) {\n            if(!letters.ContainsKey(c)) {\n           \
    \     letters.Add(c, currentCount);\n            } else {\n                if(letters[c]\
    \ > currentCount) {\n                    letter = c;\n                    currentCount\
    \ = letters[c];\n                }\n            }\n        }\n        return letters;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   int maxOccur = 0;\n        int maxLetter = -1;\n        foreach(string s in\
    \ test.Split(new char[]{' '}, StringSplitOptions.RemoveEmptyEntries)) {\n    \
    \        if (result.ContainsKey(s)) {\n                result[s] = ((long)result[s]\
    \ + 1);\n            } else {\n                result.Add(s, 1L);\n          \
    \  }\n            int occur = result[s];\n            if (occur > maxOccur) {\n\
    \                maxOccur = occur;\n                maxLetter = s;\n         \
    \   }\n        }\n        result.Add(maxLetter, maxOccur);\n        return result;",
  "        var letterCounts = new Dictionary<string,long>();\n        foreach (string\
    \ s in test.Split(' ')) {\n            if (letterCounts.ContainsKey(s))\n    \
    \            letterCounts[s] += 1;\n            else\n                letterCounts.Add(s,\
    \ 1L);\n        }\n        return letterCounts;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        for(int i=0; i < test.Length;\
    \ i++) {\n            string value = test.Substring(i, 1);\n            result.Add(value,\
    \ result.ContainsKey(value) ? result[value]++ : 1);\n        }\n        return\
    \ result;", "        List<string> list = test.Split(new char[] { ' ' }).ToList();\n\
    \        Dictionary<string,long> result = new Dictionary<string,long>();\n   \
    \     foreach (string key in list.Distinct().OrderByDescending(x => list.Count).ThenBy(x\
    \ => x).ToList()) {\n            long occurences = list.Where(x => x == key).Count();\n\
    \            if (occurences > 0) {\n                result.Add(key, occurences);\n\
    \            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        if (test == null || test.Length\
    \ == 0) {\n            return result;\n        }\n        string letters = test.Split(\"\
    \ \").ToList().ConvertAll(x => x.ToLower()).Distinct().ToArray();\n        int\
    \ max = 0;\n        long maxCount = 0;\n        foreach (string s in letters)\
    \ {\n            int count = 0;\n            foreach (char c in s) {\n       \
    \         if (result.ContainsKey(c)) {\n                    count += result[c];\n\
    \                }\n            }\n            if (count > max) {\n          \
    \      max = count;\n                maxCount = count;\n            }\n      \
    \      if (count == maxCount) {\n                result.Add(s, count);\n     \
    \       }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        if (String.IsNullOrEmpty(test))\
    \ return result;\n\n        char[] input = test.ToCharArray();\n        Array.Sort(input);\n\
    \n        for(int i = 0; i < input.Length; i++) {\n            string key = String.Join(\"\
    \", input.Take(i).ToArray());\n            if (result.ContainsKey(key)) {\n  \
    \              result[key] += 1;\n            } else {\n                long count\
    \ = 1L;\n                foreach(char c in input) {\n                    if (c\
    \ == input[i]) {\n                        count += 1;\n                    }\n\
    \                }\n                result.Add(key, count);\n            }\n \
    \       }\n\n        return result;", "        if (test.Length == 0) return new\
    \ Dictionary<string,long>();\n        var result = new Dictionary<string,long>();\n\
    \        foreach (var c in test.ToUpper().Split(' '))\n            if (result.ContainsKey(c))\n\
    \                result[c] = result[c] + 1;\n            else\n              \
    \  result.Add(c, 1L);\n        return result;", "        char[] words = test.ToCharArray();\n\
    \        Dictionary<string,long> histogram = new Dictionary<string,long>();\n\
    \        foreach (char letter in words) {\n            long count = 1;\n     \
    \       bool flag = false;\n            foreach (string temp in histogram.Keys)\
    \ {\n                if (temp == letter) {\n                    flag = true;\n\
    \                    break;\n                }\n            }\n            if\
    \ (!flag) {\n                histogram.Add(letter, count);\n            }\n  \
    \      }\n        return histogram;", "        HashSet<string> str = new HashSet<string>(test.Split(\"\
    \ \").Select(s => s.ToLower()));\n        Dictionary<string,long> dict = new Dictionary<string,long>();\n\
    \        foreach (string s in str) {\n            if (!dict.ContainsKey(s)) dict.Add(s,\
    \ 0L);\n            dict[s]++;\n        }\n        return dict.OrderByDescending(x\
    \ => x.Value).FirstOrDefault();", "        string input = new string(test.ToCharArray(),\
    \ 0, test.Length);\n        int size = input.Length;\n        if (size == 0) {\n\
    \            return new Dictionary<string,long>();\n        }\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        long[] occurrences = HashCounter.GetOccurrences(input);\n\
    \        foreach (string letter in occurrences.Select(e => e.Key)) {\n       \
    \     long count = occurrences.FirstOrDefault(e => e.Value == e.Value).Value;\n\
    \            result.Add(letter, count);\n        }\n        return result;", " \
    \       Dictionary<string,long> histogram = new Dictionary<string,long>();\n \
    \       // split test string into a list of letters\n        var letters = test.ToCharArray().Select(c\
    \ => c.ToString()).ToList();\n        foreach (var letter in letters) {\n    \
    \        // get count of current letter\n            long currentCount;\n    \
    \        if (!histogram.TryGetValue(letter, out currentCount)) {\n           \
    \     currentCount = 1;\n            } else {\n                currentCount++;\n\
    \            }\n            // update histogram with current letter and count\n\
    \            histogram[letter] = currentCount;\n        }\n        return histogram;",
  "        Dictionary<string,long> letterCounts = new Dictionary<string,long>();\n\
    \        foreach(string word in test.Split(' ')){\n            foreach(char c\
    \ in word){\n                long count;\n                if(letterCounts.TryGetValue(c,\
    \ out count))\n                    letterCounts[c] += 1;\n                else\n\
    \                    letterCounts[c] = 1;\n            }\n        }\n        return\
    \ letterCounts;", "        if (string.IsNullOrEmpty(test))\n            return\
    \ new Dictionary<string,long>();\n        var freq = new Dictionary<string,long>();\n\
    \        var words = test.Split(' ').Distinct();\n        foreach(var s in words)\
    \ {\n            freq[s] = freq.ContainsKey(s) ? freq[s] + 1 : 1;\n        }\n\
    \        return freq;", "        if (test == null) return null;\n        if (test.Length\
    \ == 0) return null;\n        var letters = new List<string>();\n        var chars\
    \ = test.ToCharArray();\n        foreach (var c in chars) {\n            if (!chars.Contains(c))\
    \ continue;\n            if (!letters.Contains(c)) {\n                letters.Add(c);\n\
    \            } else {\n                long count = letters.Where(l => l.Key ==\
    \ c).Select(l => l.Value).Sum();\n                if (count > letters.Where(l\
    \ => l.Key == c).Select(l => l.Value).Max()) {\n                    letters[c]\
    \ = count;\n                }\n            }\n        }\n        return new Dictionary<string,\
    \ long>(letters.Where(l => l.Value > 1).ToDictionary(l => l.Key, l => l.Value));",
  "        string words = test;\n        Dictionary<string, long> result = new Dictionary<string,\
    \ long>();\n        char[] letters = words.ToCharArray();\n\n        for (int\
    \ i = 0; i < letters.Length; i++) {\n            string key = string.Join(\"\"\
    , letters.Take(i).ToArray());\n            result.TryGetValue(key, out long value);\n\
    \            result[key] = (long) value + 1;\n        }\n\n        return result;",
  "        Dictionary<string,long> dic = new Dictionary<string,long>();\n        List<string>\
    \ list = test.Split(new string[] {\" \"}, StringSplitOptions.None).ToList();\n\
    \        foreach(string s in list)\n            if(dic.ContainsKey(s))\n     \
    \           dic[s]++;\n            else\n                dic[s] = 1;\n       \
    \ foreach(KeyValuePair<string,long> kv in dic)\n            if(dic.Values.Max()\
    \ <= dic.Values.Min())\n                return new Dictionary<string,long>() {\
    \ kv };\n        return dic;", "        char[] chars = test.ToCharArray();\n \
    \       Dictionary<string,long> histogram = new Dictionary<string,long>();\n \
    \       string repeated = \"\";\n        long count = 0;\n        foreach (char\
    \ c in chars) {\n            if (!histogram.ContainsKey(c)) {\n              \
    \  histogram.Add(c, 1L);\n            } else {\n                count = histogram[c]\
    \ + 1L;\n                if (!histogram.ContainsKey(repeated) || count > histogram[repeated])\
    \ {\n                    histogram.Add(repeated, count);\n                }\n\
    \                repeated = \"\";\n            }\n        }\n        return histogram;",
  "        Debug.Assert(test != null);\n\n        Dictionary<string,long> result =\
    \ new Dictionary<string,long>();\n        HashSet<string> seen = new HashSet<string>();\n\
    \n        foreach (string letter in test.Trim().Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries))\
    \ {\n            if (seen.Contains(letter)) {\n                result[letter]++;\n\
    \            }\n            else {\n                seen.Add(letter);\n      \
    \          result[letter] = 1;\n            }\n        }\n\n        return result;",
  "        string alphabet = test.Split(' ');\n        if (alphabet.Count() == 0)\n\
    \            return new Dictionary<string, long>();\n\n        var result = new\
    \ Dictionary<string, long>();\n        foreach (string letter in alphabet)\n \
    \           LetterOccurrence(result, letter);\n\n        return result;", "  \
    \      var result = new Dictionary<string, long>();\n        foreach (var c in\
    \ test)\n        {\n            if (result.ContainsKey(c))\n            {\n  \
    \              result[c] += 1;\n            }\n            else\n            {\n\
    \                result[c] = 1;\n            }\n        }\n\n        return result;",
  "        var res = new Dictionary<string, long>();\n        foreach (var item in\
    \ test.Split(' ').OrderByDescending(x => x.Length)) {\n            var key = item;\n\
    \            if (!res.ContainsKey(key)) {\n                res.Add(key, 1L);\n\
    \            } else {\n                res[key]++;\n            }\n        }\n\
    \        return res;", "        string key = string.Empty;\n        Dictionary<string,long>\
    \ histo = new Dictionary<string,long>();\n        foreach (char c in test)\n \
    \       {\n            if (string.IsNullOrEmpty(key)) {\n                key =\
    \ c;\n                histo.Add(key, 1L);\n                continue;\n       \
    \     }\n            if (key.ToLower() == c.ToLower()) {\n                histo[key]++;\n\
    \            } else {\n                histo.Add(key, 1L);\n                key\
    \ = c;\n                histo.Add(key, 1L);\n            }\n        }\n      \
    \  return histo;", "        var dict = new Dictionary<string,long>();\n      \
    \  var split = test.Split( new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries\
    \ );\n        foreach(var s in split) {\n            if(!dict.ContainsKey(s))\
    \ dict[s] = 0L;\n            dict[s]++;\n        }\n        return dict;", " \
    \       var dictionary = new Dictionary<string,long>();\n        var stringToLong\
    \ = test.ToLongArray();\n        foreach (var charToCount in stringToLong.GroupBy(x\
    \ => x.ToString()).OrderBy(x => x.Count()).ThenBy(x => x.Key)) {\n           \
    \ dictionary.Add(charToCount.Key, charToCount.Count());\n        }\n        return\
    \ dictionary;", '        return Histogram(test.ToLower());', '        return test.ToLower().Split().GroupBy(c
    => c).ToDictionary(g => g.Key, g => g.Count());', "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        string letters = test.Split(new\
    \ char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries)\n                   \
    \         .Select(s => s.ToLower())\n                            .Aggregate((i1,\
    \ i2) => i1 + \" \" + i2)\n                            .Split(' ')\n         \
    \                   .Distinct()\n                            .OrderByDescending(s\
    \ => s.Length)\n                            .ToArray();\n        foreach(string\
    \ letter in letters) {\n            string value = test.Split(new char[] { ' '\
    \ }, StringSplitOptions.RemoveEmptyEntries)\n                                .Where(s\
    \ => s.ToLower() == letter)\n                                .Count()\n      \
    \                          .ToString();\n            result.Add(letter, long.Parse(value));\n\
    \        }\n        return result;", "        var counter = new Dictionary<string,long>();\n\
    \        foreach (char letter in test.ToLower()) {\n            counter.TryGetValue(letter,\
    \ out long count);\n            counter[letter] = count + 1;\n        }\n    \
    \    return counter.ToDictionary(k => k.Key, v => v.Value);", "        // If there's\
    \ nothing in the string, return an empty dictionary since there's nothing to do.\n\
    \        if (string.IsNullOrWhiteSpace(test)) {\n            return new Dictionary<string,long>();\n\
    \        }\n        // Split the string into an array of single chars.\n     \
    \   char[] chars = test.ToCharArray();\n        // Initialize a dictionary to\
    \ store the frequency of every single letter.\n        Dictionary<string,long>\
    \ histogram = new Dictionary<string,long>();\n        // For each letter in the\
    \ char array, add it into the histogram.\n        foreach (char c in chars) {\n\
    \            string letter = c.ToString();\n            long frequency = 0;\n\
    \            // If the letter exists in the histogram, add it's frequency to the\
    \ current letter.\n            if (histogram.ContainsKey(letter)) {\n        \
    \        frequency = histogram[letter];\n            }\n            else {\n \
    \               // If it doesn't exist in the histogram, add it to the dictionary.\n\
    \                histogram[letter] = 1;\n            }\n            // If the\
    \ letter is not in the histogram, add it to the dictionary with the frequency\
    \ 1.\n            else {\n                histogram[letter] = 1;\n           \
    \ }\n            // If the letter has been added to the histogram multiple times,\
    \ add it to the dictionary with the highest frequency.\n            if (frequency\
    \ > histogram.Values.Max()) {\n                histogram.Add(letter, frequency);\n\
    \            }\n            // If this letter has only been added to the histogram\
    \ once, remove the letter from the dictionary.\n            else {\n         \
    \       histogram.Remove(letter);\n            }\n        }\n        // Return\
    \ the histogram.\n        return histogram;", "        var result = new Dictionary<string,long>();\n\
    \        var letters = test.ToLower().Split();\n        foreach (string letter\
    \ in letters) {\n            if (result.ContainsKey(letter)) {\n             \
    \   result[letter] += 1;\n            } else {\n                if (result.Count\
    \ > 0) {\n                    string previousLetter = result[letters.First()];\n\
    \                    var currentLetterCount = result[previousLetter];\n      \
    \              result.Remove(previousLetter);\n                    result[letter]\
    \ = currentLetterCount + 1;\n                } else {\n                    result.Add(letter,\
    \ 1);\n                }\n            }\n        }\n        return result;", " \
    \       Dictionary<string,long> result = new Dictionary<string,long>();\n    \
    \    foreach (string item in test.Split(' ').Distinct())\n            if (result.ContainsKey(item))\
    \ result[item] ++;\n            else\n                result.Add(item, 1);\n \
    \       return result;", "        if (test == null)\n            return null;\n\
    \        StringBuilder result = new StringBuilder();\n        char[] arr = test.ToCharArray();\n\
    \        Array.Sort(arr);\n        int max = 0;\n        Dictionary<string,long>\
    \ count = new Dictionary<string,long>();\n        string curr = string.Empty;\n\
    \        foreach (char c in arr) {\n            int count = 1;\n            for\
    \ (int i = 0; i < arr.Length; i++) {\n                if (c == arr[i]) {\n   \
    \                 count++;\n                }\n            }\n            if (count\
    \ > max)\n            {\n                max = count;\n                curr =\
    \ string.Empty;\n                count.Add(c, 1);\n            }\n           \
    \ else {\n                if (count.ContainsKey(c)) {\n                    count[c]\
    \ = count[c] + 1;\n                }\n                else\n                 \
    \   count.Add(c, 1);\n            }\n        }\n        result.Append(max);\n\
    \        result.Append(\" \");\n        for (int i = 0; i < count.Keys.Count;\
    \ i++)\n            result.Append(count.Keys[i]);\n        result.Append(\" \"\
    );\n        for (int i = 0; i < count.Values.Count; i++)\n            result.Append(count.Values[i]);\n\
    \        return (new Dictionary<string,long>() { { result.ToString().Split()[0],\
    \ new long[result.ToString().Split()[0].Length]{ 0 } } });", "        Dictionary<string,long>\
    \ histogram = new Dictionary<string,long>();\n        if (test == null) return\
    \ histogram;\n        // count the letters in the string\n        foreach (string\
    \ s in test.Split(' ')) {\n            histogram[s] = 1;\n        }\n        //\
    \ count the occurrences and add them to our histogram\n        foreach (string\
    \ s in test.Split(' '))\n            histogram[s] = histogram[s].Add(1L);\n  \
    \      // return the largest histogram\n        return histogram.OrderByDescending(kv\
    \ => kv.Value).First();", "        if (string.IsNullOrWhiteSpace(test)) {\n  \
    \          return new Dictionary<string,long>();\n        }\n        var result\
    \ = new Dictionary<string,long>();\n        foreach(var item in test.Split(' ')){\n\
    \            if (result.ContainsKey(item)){\n                result[item] = result[item]\
    \ + 1;\n            }\n            else {\n                result.Add(item, 1L);\n\
    \            }\n        }\n        return result;", "        StringBuilder sb\
    \ = new StringBuilder();\n        string[] letters = test.Split(new char[] {'\
    \ '}, StringSplitOptions.RemoveEmptyEntries);\n        Dictionary<string, long>\
    \ histo = new Dictionary<string, long>();\n        foreach (string s in letters)\
    \ {\n            int count = 0;\n            foreach (char c in s) {\n       \
    \         if (histo[c] == 0) {\n                    count++;\n               \
    \     histo[c] = count;\n                }\n            }\n        }\n       \
    \ return new Dictionary<string, long>() {\n            {\"Total\", histo}\n  \
    \      };", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        if (string.IsNullOrEmpty(test)) {\n            return result;\n     \
    \   }\n        var letters = test.ToCharArray();\n        for (int i = 0; i <\
    \ letters.Length; i++) {\n            if (!letters[i].Equals(' ') && !letters[i].Equals(letters[i+1]))\
    \ {\n                string key = string.Format(\"{0}{1}\", letters[i], letters[i+1]);\n\
    \                result.Add(key, 1);\n            }\n        }\n        return\
    \ result;", "        // TODO: Write this function\n        string s = test;\n\
    \        Dictionary<string, long> result = new Dictionary<string,long>();\n  \
    \      string[] words = s.Split(' ');\n        foreach (string word in words)\
    \ {\n            string key = word;\n            long value;\n            if (result.TryGetValue(key,\
    \ out value)) {\n                result[key] = value += 1;\n            } else\
    \ {\n                result[key] = 1;\n            }\n        }\n        return\
    \ result;", "        string allLetters = \"\";\n        foreach(char letter in\
    \ test.ToCharArray()) {\n            allLetters += letter;\n        }\n      \
    \  Dictionary<string,long> histogram = new Dictionary<string,long>();\n\n    \
    \    foreach (char letter in allLetters.ToCharArray()) {\n            long tempCounter\
    \ = 0;\n            foreach(char test in test.ToCharArray()) {\n             \
    \   if (letter == test) {\n                    tempCounter++;\n              \
    \  }\n            }\n            if (tempCounter > histogram.Keys.Count() || histogram.Keys.Count\
    \ == 0) {\n                histogram.Add(letter, 1L);\n            } else {\n\
    \                histogram[letter] = tempCounter;\n            }\n        }\n\
    \        return histogram;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \n        // Convert string to array of chars\n        char[] chars = test.ToCharArray();\n\
    \n        // Count occurences of each char\n        int[] count = new int[256];\n\
    \        foreach (char c in chars) {\n            if (c < 'a' || c > 'z')\n  \
    \              continue;\n            int idx = c - 'a';\n            if (count[idx]\
    \ == 0) {\n                count[idx] = 1;\n            } else {\n           \
    \     count[idx]++;\n            }\n        }\n\n        // Sort by count and\
    \ add them to dictionary\n        Array.Sort(count, delegate(int x, int y) { return\
    \ x > y; });\n        for (int i = 0; i < count.Length; i++) {\n            int\
    \ idx = count[i];\n            if (i < 50)\n                result.Add(new String(new\
    \ char[]{Convert.ToChar('a' + idx)}), 1L);\n            else\n               \
    \ result.Add(new String(new char[]{Convert.ToChar('a' + idx)}), count[i]);\n \
    \       }\n        return result;", "        // Find the unique letters we have\n\
    \        var letters = test.ToLower().ToCharArray().Distinct().ToList();\n\n \
    \       // Initialize our return value\n        var result = new Dictionary<string,long>();\n\
    \n        // For each letter, increment our count for it\n        for (int i =\
    \ 0; i < letters.Count; i++) {\n            long count = letters.Count(letter\
    \ => test.IndexOf(letter, i) != -1);\n            if (count > 0) {\n         \
    \       result[letters[i]] = count;\n            }\n        }\n\n        return\
    \ result;", "        var data = test.Split(' ');\n        var result = new Dictionary<string,long>();\n\
    \n        foreach(var entry in data)\n        {\n            if(!result.ContainsKey(entry))\n\
    \            {\n                result.Add(entry, 1L);\n            }\n      \
    \      else\n            {\n                result[entry] += 1;\n            }\n\
    \        }\n\n        return result;", "        var results = new Dictionary<string,long>();\n\
    \        var splitted = test.ToCharArray().ToList();\n        splitted.Sort();\n\
    \        var counts = new Dictionary<char,long>();\n        foreach (var letter\
    \ in splitted) {\n            counts[letter] = counts[letter] ?? 1;\n        \
    \    counts[letter]++;\n        }\n        foreach (var c in counts) {\n     \
    \       if (results.ContainsKey(c)) {\n                results[c] = results[c]\
    \ + counts[c];\n            } else {\n                results[c] = counts[c];\n\
    \            }\n        }\n        return results;", "        Dictionary<string,long>\
    \ histogram = new Dictionary<string,long>();\n        foreach (string letter in\
    \ test.Split(' '))\n        {\n            long count = histogram.ContainsKey(letter)\
    \ ? histogram[letter]++ : 1;\n            histogram[letter] = count;\n       \
    \ }\n        return histogram;", "        Dictionary<string,long> count = new\
    \ Dictionary<string,long>();\n        for(int i = 0; i < test.Length; i++) {\n\
    \            string s = test.Substring(i, 1);\n            if (count.ContainsKey(s))\
    \ {\n                count[s] += 1;\n            } else {\n                count[s]\
    \ = 1;\n            }\n        }\n        return count;", "        Dictionary<string,long>\
    \ histo = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n            histo.Add(s, test.Split(s)\n                    .GroupBy(x\
    \ => x)\n                    .Select(g => new { letter = g.Key, count = g.Count()\
    \ })\n                    .OrderByDescending(x => x.count)\n                 \
    \   .Take(1)\n                    .FirstOrDefault()\n                    .letter)\n\
    \        return histo;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string[] words\
    \ = test.Split(' ');\n        foreach (string word in words) {\n            long\
    \ count = 0;\n            for (int i = 0; i < alphabet.Length; i++) {\n      \
    \          count += alphabet.Contains(word[i]) ? 1 : 0;\n            }\n     \
    \       result.Add(word, count);\n        }\n        return result;", "      \
    \  Dictionary<string,long> ret = new Dictionary<string,long>();\n        foreach\
    \ (string s in test.Split(' '))\n        {\n            ret.Add(s, ret.ContainsKey(s)\
    \ ? ret[s] += 1 : 1);\n        }\n        return ret;", "        char[] letters\
    \ = test.ToCharArray();\n        Dictionary<string, long> result = new Dictionary<string,\
    \ long>();\n\n        // Step 1: find all unique letters in the string and store\
    \ them in a hashset\n        // Step 2: for each letter in the hashset, loop through\
    \ all letters in the string and\n        //          increment the count of each\
    \ letter if present\n        foreach (char c in letters)\n        {\n        \
    \    if (result.ContainsKey(c))\n                result[c] += 1;\n           \
    \ else\n            {\n                result.Add(c, 1);\n            }\n    \
    \    }\n        return result;", "        string s = test;\n        if (s.Length\
    \ == 0) {\n            return new Dictionary<string,long>();\n        }\n    \
    \    StringBuilder sb = new StringBuilder();\n        Dictionary<string,long>\
    \ dict = new Dictionary<string,long>();\n        foreach (char c in s) {\n   \
    \         if (!dict.ContainsKey(c)) {\n                dict.Add(c, 1L);\n    \
    \            sb.Append(c);\n            } else {\n                long count =\
    \ dict[c];\n                dict[c] = count + 1;\n                sb.Append(c);\n\
    \            }\n        }\n        return dict;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        if (test.Length == 0)\n   \
    \         return result;\n        HashSet<string> letters = new HashSet<string>(test.Split('\
    \ '));\n        foreach (string letter in letters) {\n            long num = 0;\n\
    \            if (result.TryGetValue(letter, out num)) {\n                result[letter]\
    \ = num + 1;\n            } else {\n                result.Add(letter, 1);\n \
    \           }\n        }\n        return result;", "        var letters = new\
    \ Dictionary<string,long>();\n        if (test.Equals(\"\"))\n            return\
    \ letters;\n        foreach (var l in test.Split(' '))\n            letters.Add(l,0);\n\
    \        var result = letters.GroupBy(l => l.Key).Select(l => new {letter=l.Key,\
    \ count = l.Count()}).OrderByDescending(x => x.count).FirstOrDefault();\n    \
    \    foreach (var l in letters.Where(c => c.Value == result.count)) {\n      \
    \      letters.Remove(l.Key);\n            letters.Add(l.Key, l.Value);\n    \
    \    }\n        return letters;", "        Dictionary<string,long> ret = new Dictionary<string,long>();\n\
    \        char[] letters = test.ToCharArray();\n        Array.Sort(letters);\n\
    \        string text = string.Empty;\n        long maxCount = 0;\n        long\
    \ currentCount = 0;\n        foreach(char letter in letters) {\n            if(ret.ContainsKey(letter))\
    \ {\n                currentCount++;\n                maxCount = Math.Max(maxCount,\
    \ ret[letter]);\n            }\n            else {\n                ret.Add(letter,\
    \ currentCount);\n            }\n        }\n        if(maxCount == 0) {\n    \
    \        return ret;\n        }\n        ret.Clear();\n        for(int i = 0;\
    \ i < text.Length; i++) {\n            ret.Add(text[i], maxCount);\n        }\n\
    \        return ret;", "        char[] charArray = test.ToCharArray();\n     \
    \   Dictionary<string,long> result = new Dictionary<string,long>();\n        for(int\
    \ i = 0; i < charArray.Length; i++) {\n            string key = String.Empty;\n\
    \            int repetition = 0;\n            for(char c : charArray) {\n    \
    \            if(charArray[i] == c)\n                    key+=charArray[i];\n \
    \           }\n            if(!result.ContainsKey(key)) {\n                repetition\
    \ = 1;\n                result.Add(key, repetition);\n            } else if(result[key]\
    \ > repetition) {\n                repetition = result[key];\n            }\n\
    \        }\n        return result;", "        Dictionary<string, long> histo =\
    \ new Dictionary<string, long>();\n        string[] words = test.Split(' ');\n\
    \        foreach (string s in words) {\n            string l = s.ToLower();\n\
    \            if (histo.ContainsKey(l)) {\n                histo[l] += 1;\n   \
    \         } else {\n                histo.Add(l, 1);\n            }\n        }\n\
    \        return histo;"]
stop_tokens:
- "\n    }\n"
