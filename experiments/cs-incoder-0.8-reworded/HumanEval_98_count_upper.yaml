name: HumanEval_98_count_upper
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a string s, count the number of uppercase vowels in even\
  \ indices.\n    // For example:\n    // >>> CountUpper((\"aBCdEf\"))\n    // (1L)\n\
  \    // >>> CountUpper((\"abcdefg\"))\n    // (0L)\n    // >>> CountUpper((\"dBBE\"\
  ))\n    // (0L)\n    public static long CountUpper(string s) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountUpper((\"\
  aBCdEf\")) == (1L));\n    Debug.Assert(CountUpper((\"abcdefg\")) == (0L));\n   \
  \ Debug.Assert(CountUpper((\"dBBE\")) == (0L));\n    Debug.Assert(CountUpper((\"\
  B\")) == (0L));\n    Debug.Assert(CountUpper((\"U\")) == (1L));\n    Debug.Assert(CountUpper((\"\
  \")) == (0L));\n    Debug.Assert(CountUpper((\"EEEE\")) == (2L));\n    }\n\n}\n"
completions: ["        long vowels = 0;\n        foreach (char c in s) {\n       \
    \     if (char.IsUpper(c) && !char.IsUpper(c)) {\n                vowels++;\n\
    \            }\n            if (c >= 'a' && c <= 'z') {\n                vowels\
    \ -= 2;\n            }\n        }\n        return vowels;", "        long count\
    \ = 0;\n        foreach (char c in s) {\n            if (c == 'A' || c == 'a')\
    \ {\n                count++;\n            }\n            if (c > 'Z') {\n   \
    \             break;\n            }\n        }\n        return count;", "    \
    \    long count = 0;\n        for(int i = 0; i < s.Length; i++) {\n          \
    \  if (i % 2 == 0) {\n                if (s.Substring(i, 1).ToUpper() == \"A\"\
    ) {\n                    count++;\n                }\n            }\n        }\n\
    \        return count;", "        if (s == null)\n            return 0;\n\n  \
    \      var vowels = \"aeiouAEIOU\".ToCharArray();\n\n        var evenIndices =\
    \ Enumerable.Range(0, s.Length)\n            .Where((i) => i % 2 == 0)\n     \
    \       .ToArray();\n\n        var vowelCounts = new List<long>();\n\n       \
    \ foreach (var index in evenIndices) {\n            var vIndex = vowels.IndexOf(s[index]);\n\
    \            if (vIndex != -1)\n                vowelCounts.Add(1L);\n       \
    \ }\n\n        return vowelCounts.Count;", "        long vowels = 0;\n       \
    \ for (int i = 0; i < s.Length; i++) {\n            char c = s[i];\n         \
    \   if (Char.IsUpper(c))\n                if (i % 2 == 0)\n                  \
    \  vowels++;\n        }\n        return vowels;", "        var vowels = new HashSet<char>(new[]\
    \ {'a', 'e', 'i', 'o', 'u'});\n        var evens = new List<int>();\n        for\
    \ (int i = 0; i < s.Length; i++) {\n            if (i % 2 == 0) {\n          \
    \      if (vowels.Contains(s[i]) && vowels.Contains(s[i - 1])) {\n           \
    \         evens.Add(i);\n                }\n            }\n        }\n       \
    \ return evens.Count(x => vowels.Contains(s[x - 1]));", "        long result =\
    \ 0;\n        for (int i = 0; i < s.Length; i++) {\n            if (i % 2 == 0)\
    \ {\n                result += (s.ToCharArray()[i] >= 'A' && s.ToCharArray()[i]\
    \ <= 'Z') ? 1 : 0;\n            }\n        }\n        return result;", "     \
    \   long ans = 0, uppers = 0;\n        int n = s.Length;\n        for (int i =\
    \ 0; i < n; i++) {\n            if ((s[i] >= 'a') && (s[i] <= 'z')) {\n      \
    \          for (int j = (i+1) % n; j < n; j++)\n                    if ((s[j]\
    \ >= 'a') && (s[j] <= 'z'))\n                        if (s[j] == 'z')\n      \
    \                      uppers++;\n                if (i % 2 == 0)\n          \
    \          ans += uppers;\n                uppers = 0;\n            }\n      \
    \  }\n        return ans;", "        int count = 0;\n        for (int i = 0; i\
    \ < s.Length; i++) {\n            if (Char.IsUpper(s[i]) && (i % 2 == 0)) {\n\
    \                count++;\n            }\n        }\n        return count;", " \
    \       if (s == null || s.Length < 2)\n            return 0;\n        bool isEven\
    \ = s[2] != 'A' && s[2] != 'a';\n        int count = 0;\n        for (int i =\
    \ 3; i < s.Length; i += 2) {\n            char ch = s[i];\n            if (ch\
    \ >= 'a' && ch <= 'z') {\n                count += 1;\n            }\n       \
    \     if (ch >= 'A' && ch <= 'Z') {\n                count += 1;\n           \
    \ }\n            if (isEven && isEven(i)) {\n                count += 1;\n   \
    \         }\n            if (count > 0) {\n                count = count - 1;\n\
    \            }\n            isEven = i % 2 == 0;\n        }\n        return count;",
  "        long upperCount = 0;\n        for (int i = 0; i < s.Length; i++) {\n  \
    \          char c = s[i];\n            if (char.IsUpper(c)) {\n              \
    \  if ((i & 1) == 1) {\n                    upperCount++;\n                }\n\
    \            }\n        }\n        return upperCount;", "        long vowels =\
    \ 0;\n        for (int i = 0; i < s.Length; i++)\n        {\n            if (s[i]\
    \ != (char)'a' && (int)s[i] == (int)'A')\n            {\n                vowels++;\n\
    \            }\n        }\n        return vowels;", "        long result = 0;\n\
    \        foreach(char c in s) {\n            if((c >= 'a' && c <= 'z') || (c >=\
    \ 'A' && c <= 'Z')) {\n                if((c % 2) == 0) {\n                  \
    \  result += 1;\n                }\n            }\n        }\n        return result;",
  "        long result = 0;\n        for (int i = s.Length - 1; i >= 0; i--)\n   \
    \         if (Char.IsUpper(s[i]))\n                if (i % 2 == 0)\n         \
    \           result++;\n        return result;", "        int vowels = 0;\n   \
    \     foreach (char c in s) {\n            if (Char.IsUpper(c)) {\n          \
    \      vowels++;\n            }\n        }\n\n        if (vowels % 2 == 0) {\n\
    \            return vowels / 2;\n        }\n        else {\n            return\
    \ 0;\n        }", "        long count = 1;\n        for (int i = 0; i < s.Length;\
    \ i++)\n            count += s.Length - i;\n        return count;", "        long\
    \ total = 0L;\n        for (int i = 0; i < s.Length; i += 2) {\n            if\
    \ (Char.IsUpper(s[i]) && Char.IsUpper(s[i + 1])) {\n                total += 1;\n\
    \            }\n        }\n        return total;", "        long result = 0;\n\
    \        for (int i = 0; i < s.Length; ++i) {\n            if (s[i] >= 'a' &&\
    \ s[i] <= 'z')\n                result += Math.Pow(2, (s[i] - 'a' + 1));\n   \
    \     }\n        return result;", "        var vowels = \"aeiouAEIOU\";\n    \
    \    long count = 0;\n        for (int i = 0; i < s.Length; i++) {\n         \
    \   if (char.IsUpper(s[i]) && vowels.IndexOf(s[i]) != -1) {\n                count++;\n\
    \            }\n        }\n        return count;", "        long numUpper = 0;\n\
    \        for (int i = 0; i <= s.Length - 2; i += 2) {\n            if (Char.IsUpper(s[i]))\n\
    \                numUpper++;\n        }\n        return numUpper;", "        long\
    \ upper = 0;\n        int i = 0;\n        while (i < s.Length) {\n           \
    \ if (Char.IsUpper(s[i]))\n                upper++;\n            i += 2;\n   \
    \     }\n        return upper;", "        int countEven = 0;\n        for (int\
    \ i = 0; i < s.Length; ++i) {\n            if (i % 2 == 0) {\n               \
    \ if (Char.IsUpper(s[i]))\n                    countEven++;\n            }\n \
    \       }\n        return (long)countEven;", "        long count = 0;\n      \
    \  for (int i = 0; s.Length > i; ++i) {\n            if (s[i] == 'A' || s[i] ==\
    \ 'a' || s[i] == 'E' || s[i] == 'e' || s[i] == 'I' || s[i] == 'i' || s[i] == 'O'\
    \ || s[i] == 'o' || s[i] == 'U' || s[i] == 'u') ++count;\n        }\n        return\
    \ count;", "        var count = new int[26];\n        char[] chars = s.ToCharArray();\n\
    \        \n        // We have 26 vowels, so loop over each one\n        for (var\
    \ i = 0; i < chars.Length; i++) {\n            var ch = chars[i];\n          \
    \  \n            // Look for an uppercase vowel and set the index to even\n  \
    \          if (Char.IsUpper(ch) && i % 2 == 0) {\n                count[(int)ch\
    \ - 'A']++;\n            }\n        }\n        return 0;", "        long count\
    \ = 0L;\n        for (int i = 0; i < s.Length; i++) {\n            if (s[i] >\
    \ 'z')\n                break;\n            if (s[i] > 'Z')\n                count\
    \ += 1;\n            if (i % 2 == 0)\n                count += s.ToUpper().IndexOf(s[i].ToString(),\
    \ StringComparison.OrdinalIgnoreCase) % 2;\n        }\n        return count;",
  "        string vowels = \"AEIOUaeiou\";\n        var result = vowels.Select(v =>\
    \ new{\n            vowel = v, \n            index = s.IndexOf(v),\n         \
    \   even = s.Skip(index).TakeWhile(c => c == 'E').Count() == 0,\n            odd\
    \ = s.Skip(index).TakeWhile(c => c == 'O').Count() == 0\n        });\n       \
    \ return result.Where(x => x.even).Count() + result.Where(x => x.odd).Count();",
  "        long result = 0;\n        foreach (var c in s) {\n            if (c ==\
    \ 'a') result ++;\n            if (c == 'B') result ++;\n            if (c ==\
    \ 'C') result ++;\n            if (c == 'D') result ++;\n            if (c ==\
    \ 'E') result ++;\n            if (c == 'F') result ++;\n            if (c ==\
    \ 'G') result ++;\n        }\n        return result;", "        long result =\
    \ 0;\n        foreach (char c in s) {\n            if (Char.IsUpper(c)) {\n  \
    \              result += (c != 'A');\n            } else {\n                result\
    \ += !Char.IsUpper(c);\n            }\n        }\n        return result;", " \
    \       long result = 0;\n\n        if (String.IsNullOrEmpty(s))\n           \
    \ return result;\n\n        foreach (char c in s) {\n            if (c == 'A'\
    \ || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n                result +=\
    \ (c >= 'A' && c <= 'Z');\n            else\n                result += (c == 'A'\
    \ || c == 'E' || c == 'I' || c == 'O' || c == 'U');\n        }\n\n        return\
    \ result;", "        int vowels = 0;\n        int evenIndex = 0;\n        for\
    \ (int i = 0; i < s.Length; i++) {\n            if (s[i] != s[s.Length - 1]) {\n\
    \                if (s[i] == 'A' || s[i] == 'a' || s[i] == 'E' || s[i] == 'e'\
    \ || s[i] == 'I' || s[i] == 'i' || s[i] == 'O' || s[i] == 'o' || s[i] == 'U' ||\
    \ s[i] == 'u') {\n                    vowels++;\n                }\n         \
    \   } else {\n                if (i % 2 == 0) {\n                    evenIndex++;\n\
    \                }\n            }\n        }\n        return (evenIndex == 0 ?\
    \ vowels : (vowels / 2));", "        long vowels = 1;\n        string vowelSet\
    \ = \"AEIOUaeiou\";\n        char[] chars = s.ToCharArray();\n        for (int\
    \ i = 0; i < chars.Length; i++) {\n            if (chars[i] > 'Z') {\n       \
    \         if (chars[i].Equals('A'))\n                    vowels -= 1;\n      \
    \      }\n            else {\n                if (chars[i].Equals(vowelSet[i %\
    \ vowelSet.Length]))\n                    vowels -= 1;\n            }\n      \
    \  }\n        return vowels;", "        long countUpper = 0;\n        for (int\
    \ i = 0; i < s.Length; i++) {\n            if (i % 2 == 0) {\n               \
    \ char c = s[i];\n                if ((int)char.ToUpper(c) == c) countUpper++;\n\
    \            }\n        }\n        return countUpper;", "        long sum = 0;\n\
    \        for (int i = 0; i < s.Length; i++)\n            if (s[i] == 'A' || s[i]\
    \ == 'a') sum += 1;\n            else sum += (s[i+1] == 'A' || s[i+1] == 'a' ?\
    \ 1 : 0);\n        return sum;", "        if (string.IsNullOrWhiteSpace(s)) {\n\
    \            return 0L;\n        }\n        var vowels = \"aeiouAEIOU\";\n   \
    \     long result = 0L;\n        for (var i = 0; i != s.Length; i++) {\n     \
    \       if (char.IsUpper(s[i]) && vowels.IndexOf(s[i]) >= 0) {\n             \
    \   if (i % 2 == 0) {\n                    result += 1;\n                }\n \
    \           }\n        }\n        return result;", "        if (s == null) {\n\
    \            throw new ArgumentNullException(\"s\");\n        }\n        long\
    \ count = 0;\n        for (int i = 0; i < s.Length; i++) {\n            if (s[i]\
    \ == 'A' || s[i] == 'a') {\n                if ((i&1) == 0) {\n              \
    \      count += 1;\n                }\n            }\n            if (s[i] ==\
    \ 'E' || s[i] == 'e') {\n                if ((i&1) == 0) {\n                 \
    \   count += 1;\n                }\n            }\n            if (s[i] == 'I'\
    \ || s[i] == 'i') {\n                if ((i&1) == 0) {\n                    count\
    \ += 1;\n                }\n            }\n            if (s[i] == 'O' || s[i]\
    \ == 'o') {\n                if ((i&1) == 0) {\n                    count += 1;\n\
    \                }\n            }\n            if (s[i] == 'U' || s[i] == 'u')\
    \ {\n                if ((i&1) == 0) {\n                    count += 1;\n    \
    \            }\n            }\n            if (s[i] == 'Y' || s[i] == 'y') {\n\
    \                if ((i&1) == 0) {\n                    count += 1;\n        \
    \        }\n            }\n            if (s[i] == 'a' || s[i] == 'A') {\n   \
    \             if ((i&1) == 0) {\n                    count += 1;\n           \
    \     }\n            }\n            if (s[i] == 'e' || s[i] == 'E') {\n      \
    \          if ((i&1) == 0) {\n                    count += 1;\n              \
    \  }\n            }\n            if (s[i] == 'i' || s[i] == 'I') {\n         \
    \       if ((i&1) == 0) {\n                    count += 1;\n                }\n\
    \            }\n            if (s[i] == 'o' || s[i] == 'O') {\n              \
    \  if ((i&1) == 0) {\n                    count += 1;\n                }\n   \
    \         }\n            if (s[i] == 'u' || s[i] == 'U') {\n                if\
    \ ((i&1) == 0) {\n                    count += 1;\n                }\n       \
    \     }\n            if (s[i] == 'y' || s[i] == 'Y') {\n                if ((i&1)\
    \ == 0) {\n                    count += 1;\n                }\n            }\n\
    \        }\n        return count;", "        if (s.Length < 2) return 0;\n   \
    \     if (s.Length % 2 == 0) return 0;\n        var even = new HashSet<char>()\
    \ { 'e' };\n        var upper = new HashSet<char>() { 'u' };\n        var s =\
    \ new char[s.Length];\n        var i = 0;\n        for (int j = 0; j < s.Length;\
    \ j++) s[j] = s[j].ToString();\n        while (true) {\n            int j = s.IndexOf('e',\
    \ i) + 1;\n            int k = s.IndexOf('u', i) + 1;\n            if (j > k)\
    \ {\n                if (s[j].Equals('e', StringComparison.InvariantCultureIgnoreCase))\
    \ {\n                    if (even.Contains(s[j - 1])\n                       \
    \ && s[j].Equals('u', StringComparison.InvariantCultureIgnoreCase)) {\n      \
    \                  even.Remove(s[j - 1]);\n                        upper.Remove(s[j]);\n\
    \                    }\n                } else if (s[j].Equals('u', StringComparison.InvariantCultureIgnoreCase))\
    \ {\n                    even.Remove(s[j - 1]);\n                    upper.Remove(s[j]);\n\
    \                }\n            } else {\n                even.Remove(s[j]);\n\
    \                upper.Remove(s[j]);\n            }\n            if (j == k) break;\n\
    \            i = k;\n        }\n        return even.Count + upper.Count;", " \
    \       long count = 0;\n        foreach(char c in s) {\n            if(Char.IsUpper(c))\
    \ {\n                if((c - 'A') % 2 == 0) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;", "      \
    \  // Write your code here.\n        long count = 0;\n        for (int i = 0;\
    \ i < s.Length; i+=2){\n            if(s[i].Equals('A') && s[i].Equals('E')){\n\
    \                count++;\n            }\n        }\n        return count;", " \
    \       long upper = 0;\n        int n = s.Length;\n        for (int i = 0; i\
    \ < n; i++) {\n            char c = s[i];\n            if (c >= 'A' && c <= 'Z')\
    \ {\n                if (c >= 'a' && c <= 'z') {\n                    upper++;\n\
    \                }\n            }\n            else if (c >= 'a' && c <= 'z' ||\
    \ c == '_') {\n                upper++;\n            }\n        }\n        return\
    \ upper;", "        int counter = 0;\n        int evenIndex = 0;\n        for\
    \ (int i = 0; i < s.Length; i++) {\n            char currentChar = s[i];\n   \
    \         if (char.IsUpper(currentChar)) {\n                if (i % 2 == 0) {\n\
    \                    evenIndex += 2;\n                }\n                counter\
    \ += 1;\n            }\n            if (i % 2 == 1 && s[i] != currentChar) {\n\
    \                evenIndex += 1;\n            }\n        }\n        return counter;",
  "        long vowelCount = 0;\n        if (s == null) {\n            throw new ArgumentNullException(\"\
    s\");\n        }\n\n        // Count the number of uppercase vowels, even indices.\n\
    \        for (int i = 0; i < s.Length; i++) {\n            char c = s[i];\n  \
    \          if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {\n         \
    \       if ((i & 1) == 0) {\n                    vowelCount++;\n             \
    \   }\n            }\n        }\n\n        return vowelCount;", "        string\
    \ vowels = \"AEIOUaeiou\";\n        HashSet<Character> hs = new HashSet<Character>();\n\
    \        foreach (char c in s.ToCharArray()) {\n            if (vowels.IndexOf(c)\
    \ != -1) {\n                hs.Add(c);\n            }\n        }\n        long\
    \ cnt = 0;\n        foreach (char c in hs) {\n            if ((c & 1) == 1) {\n\
    \                cnt++;\n            }\n        }\n        return cnt;", "   \
    \     int evenIndex = 0;\n        int i = 1;\n        foreach (char c in s) {\n\
    \            if (Char.IsUpper(c)) {\n                evenIndex += ((i % 2) !=\
    \ 0);\n                i++;\n            }\n        }\n        return evenIndex;",
  "        List<char> vowels = new List<char>();\n        for (int i = 0; i < s.Length;\
    \ i++) {\n            if (s[i] != (char)64) {\n                vowels.Add(s[i]);\n\
    \            }\n        }\n        vowels.Sort();\n        long result = 0;\n\
    \        for (int i = 0; i < vowels.Count / 2; i++) {\n            if (vowels[i]\
    \ == vowels[i + 1])\n                result++;\n        }\n        return result;",
  "        // Your code here\n        var result = new List<long>();\n        foreach\
    \ (var item in s.Where((i, index) => index%2 == 0 && char.IsUpper(item)).ToArray())\n\
    \        {\n            if (Char.IsLetter(item))\n            {\n            \
    \    result.Add(1);\n            }\n            else\n            {\n        \
    \        result.Add(0);\n            }\n        }\n        return result.Sum();",
  "        char[] arrchars = s.ToCharArray();\n        int evenpos = Array.IndexOf(arrchars,\
    \ (char) 0);\n        int oddpos = Array.IndexOf(arrchars, (char) 1);\n      \
    \  long count = (evenpos - oddpos) * 2;\n        return count;", "        Debug.Assert(!string.IsNullOrEmpty(s));\n\
    \        long sum = 0;\n        foreach (char c in s) {\n            if ((c >=\
    \ 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {\n                sum++;\n    \
    \        }\n            if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))\
    \ {\n                sum++;\n            }\n        }\n        return sum;", " \
    \       long result = 0;\n        foreach (char c in s) {\n            if ((c\
    \ >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {\n                result +=\
    \ 1;\n            }\n            else if (c >= 'A' && c <= 'Z' && c != 'A' &&\
    \ c != 'Z') {\n                break;\n            }\n        }\n        return\
    \ result;", "        long.TryParse(s.Substring(0,1), out long v);\n        return\
    \ s.Length >= 2 ? v % 2 == 0 ? s.Length % 2 == 0 ? s.Substring(0, 1).ToUpper().Count(c=>c=='A')\
    \ : s.Substring(0, 1).ToUpper().Count(c=>c=='E') : s.Length % 2 == 0 ? 0 : 1 :\
    \ v%2 == 0 ? 0 : v%2 == 0 ? s.Length / 2 : s.Length / 2  : v%2 == 0 ? 0 : s.Length\
    \ / 2;", "        HashSet<char> vowels = new HashSet<char>() { 'a', 'e', 'i',\
    \ 'o', 'u' };\n        int evenCharIndex = 0;\n        long total = 0;\n     \
    \   for (int i = 0; i < s.Length; evenCharIndex++) {\n            if (i % 2 ==\
    \ 0) {\n                char c = s[evenCharIndex];\n                if (vowels.Contains(c))\n\
    \                    total++;\n            }\n        }\n        return total;",
  "        long count = 0;\n        for (int i = 0; i < s.Length; i++)\n         \
    \   if ((i + 1) % 2 == 0 && Char.IsUpper(s[i]))\n                count++;\n  \
    \      return count;", "        var vowels = \"aeiouAEIOU\";\n        var vowelsCount\
    \ = new HashSet<char>(vowels);\n        long count = 0;\n        for (int i =\
    \ 0; i <s.Length; i++) {\n            if ((i % 2) == 0) {\n                string\
    \ v = s.Substring(i,1);\n                if (vowelsCount.Contains(v[0])) {\n \
    \                   count++;\n                }\n            }\n        }\n  \
    \      return count;", "        Debug.Assert(s != null);\n        long count =\
    \ 0;\n        foreach (char c in s) {\n            if ((c >= 'a' && c <= 'z')\
    \ || (c >= 'A' && c <= 'Z')) {\n                count++;\n            }\n    \
    \    }\n        return count;", "        var vowels = \"aeiou\";\n        var\
    \ count = s.Length;\n        long ans = 0;\n        foreach(char c in s) {\n \
    \           if(vowels.Contains(c)) {\n                long pos = (int)Math.Floor(Math.Log10((double)count));\n\
    \                ans += Math.Pow(pos, (double)pos);\n                count -=\
    \ 1;\n            }\n        }\n        return ans;", "        if (s == null)\
    \ {\n            return 0L;\n        }\n        var len = s.Length;\n        var\
    \ even_upper = new List<char>();\n        for (int i = 0; i < len; i++) {\n  \
    \          var ch = s[i];\n            if (Char.IsUpper(ch)) {\n             \
    \   if ((i & 1) == 0) {\n                    even_upper.Add(ch);\n           \
    \     }\n            }\n        }\n        return even_upper.Count(c => Char.IsUpper(c));",
  "        long result = 0;\n        for (int i = 0; i < s.Length; i++) {\n      \
    \      if (i % 2 == 0)\n                result += (char)s[i] >= 'A' ? (char)s[i]\
    \ >= 'a' ? (char)s[i] >= 'u' ? (char)s[i] >= 'a' ? (char)s[i] + 1 : 1 : 1 : 0;\n\
    \        }\n        return result;", "        if (string.IsNullOrEmpty(s)) return\
    \ 0L;\n        var vowels = \"aeiouAEIOU\".ToCharArray();\n        var evenChars\
    \ = new List<char>();\n        for (int i = 0; i < s.Length; i += 2) {\n     \
    \       if (vowels.Contains(s[i]))\n            {\n                evenChars.Add(s[i]);\n\
    \            }\n        }\n        return evenChars.Count(c=>c=='U');", "    \
    \    if (s == null) return 0L;\n        int len = s.Length;\n        if (len ==\
    \ 0) return 0L;\n        long vowels = 0L;\n        for (int i = 0; i <= len;\
    \ i++) {\n            if (i % 2 == 0)\n                if (s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\n                    vowels++;\n\
    \        }\n        return vowels;", "        long count = 0; \n        for (int\
    \ i = 0; i <= s.Length - 2; i++) {\n            string current = s.Substring(i,\
    \ 2);\n            int index = current.IndexOf(\"AEIOUaeiou\", StringComparison.OrdinalIgnoreCase);\n\
    \            if (index >= 0) {\n                count++;\n            }\n    \
    \    }\n        return count;", "        if (s == null || s.Length <= 1) {\n \
    \           return 0L;\n        }\n        var vowels = new HashSet<char>(StringComparer.OrdinalIgnoreCase);\n\
    \        var evenIndices = new List<long>();\n        for (var j = 0; j < s.Length;\
    \ j++) {\n            if (j % 2 == 0 && vowels.Contains(s[j])) {\n           \
    \     evenIndices.Add(j);\n            }\n        }\n        return evenIndices.Count(i\
    \ => s[i] >= 'A' && s[i] <= 'Z');", "        int count = 0, i = 0;\n        while(i\
    \ < s.Length) {\n            char c = s[i];\n            if (Char.IsUpper(c))\
    \ {\n                i++;\n                continue;\n            }\n        \
    \    if (Char.IsLower(c)) {\n                count++;\n                i = s.IndexOf(c,\
    \ i);\n            } else {\n                i = s.IndexOf(c, i);\n          \
    \  }\n        }\n        return count;", "        long result = 0;\n        foreach(char\
    \ c in s) {\n            if (Char.IsUpper(c)) {\n                if (result %\
    \ 2 == 0) {\n                    result++;\n                }\n            } else\
    \ {\n                if (result % 2 == 1) {\n                    result++;\n \
    \               }\n            }\n        }\n        return result;", "      \
    \  if (string.IsNullOrEmpty(s)) return 0;\n        char[] upperChar = s.ToUpperInvariant().ToCharArray();\n\
    \        long vowelCount = 0;\n        for (int i = 0; i < upperChar.Length; i+=2)\
    \ {\n            if (char.IsUpper(upperChar[i]) && char.IsUpper(upperChar[i+1]))\
    \ {\n                vowelCount++;\n            }\n        }\n        return vowelCount;",
  "        var count = new List<long>();\n        foreach(var ch in s)\n        {\n\
    \            if (char.IsUpper(ch))\n            {\n                int i = ch\
    \ - 'A' + 1;\n                if (i % 2 == 0)\n                {\n           \
    \         count.Add(1L);\n                }\n            }\n        }\n      \
    \  return count.Count() ?? 0;", "        if (s == null || s.Length <= 1) return\
    \ 0;\n        StringBuilder sb = new StringBuilder(s);\n        int index = -1;\n\
    \        long count = 0;\n        while ((index = sb.IndexOf(\"A\", index + 1,\
    \ StringComparison.Ordinal)) != -1) {\n            sb.Remove(index, 1);\n    \
    \        count++;\n        }\n        return sb.ToString().ToUpper().Count(c =>\
    \ c != 'A');", "        long upperCount = 0L;\n        foreach (char c in s) {\n\
    \            if (Char.IsUpper(c))\n                if (c >= 'A' && c <= 'Z')\n\
    \                    upperCount++;\n        }\n        return upperCount;", " \
    \       long vowels = 0;\n        foreach (char c in s) {\n            if (Char.IsUpper(c)\
    \ && c.Equals('A')) {\n                vowels++;\n            }\n        }\n \
    \       return vowels;", "        long[] nums = new long[s.Length];\n        long\
    \ sum = 0;\n        for (int i = 0; i < s.Length; i++) {\n            char c =\
    \ s[i];\n            if (char.IsUpper(c)) {\n                nums[i % 2].Add(c);\n\
    \                sum += char.IsUpper(c) ? 1 : 0;\n            }\n        }\n \
    \       return sum;", "        // Count the number of uppercase vowels in even-index\
    \ positions\n        // (i.e., where the even-indexed letters are vowels).\n \
    \       //\n        // We start by counting the number of vowels up to the first\n\
    \        // uppercase letter (\"B\" in the first example).\n        long numVowels\
    \ = 0;\n        bool isFirstLetterUpper = true;\n        foreach (char c in s)\
    \ {\n            if (char.IsUpper(c)) {\n                if (isFirstLetterUpper)\
    \ {\n                    numVowels++;\n                }\n                isFirstLetterUpper\
    \ = false;\n            }\n            else {\n                isFirstLetterUpper\
    \ = true;\n            }\n        }\n\n        // Now we count the number of vowels\
    \ up to the second uppercase letter,\n        // which is the first letter (\"\
    a\").\n        isFirstLetterUpper = true;\n        foreach (char c in s) {\n \
    \           if (char.IsUpper(c)) {\n                if (isFirstLetterUpper) {\n\
    \                    numVowels++;\n                }\n                isFirstLetterUpper\
    \ = false;\n            }\n            else {\n                isFirstLetterUpper\
    \ = true;\n            }\n        }\n\n        return numVowels;", "        if\
    \ (s.Length < 2)\n            return 0L;\n        string vowels = \"aeiouAEIOU\"\
    ;\n        char[] c = s.ToCharArray();\n        Array.Sort(c);\n        long ans\
    \ = 0;\n        for (int i = 0; i < c.Length; i++) {\n            long count =\
    \ 0;\n            if (c[i] != vowels.First())\n                count++;\n    \
    \        if (c[i] == vowels.Last())\n                count++;\n            ans\
    \ += count;\n        }\n        return ans;", "        Debug.Assert(s.Length >\
    \ 0);\n        if (s.Length == 1) {\n            return 0;\n        }\n\n    \
    \    long count = 0;\n        for (int i = 0; i < s.Length; i++) {\n         \
    \   if (i % 2 == 0) {\n                char ch = s[i];\n                count\
    \ = count + (ch >= 'A' && ch <= 'Z' ? 1 : 0);\n            }\n        }\n    \
    \    return count;", "        long vowels = 0L;\n        char[] vowelsArray =\
    \ { ':', '?', 'a', 'e', 'i', 'o', 'u' };\n        for (int i = 0; i < s.Length;\
    \ i++) {\n            char c = s[i];\n            if (vowelsArray.Contains(c))\
    \ {\n                vowels++;\n            }\n            if (c != char.ToUpper(c))\
    \ {\n                vowels = 0;\n            }\n        }\n        return vowels;",
  "        long result = 0;\n        for (int i = 0; i < s.Length; i++)\n        {\n\
    \            if (s[i] > 'Z')\n            {\n                if (i % 2 == 0)\n\
    \                {\n                    result += 1;\n                }\n    \
    \        }\n        }\n        return result;", "        long c = 0;\n       \
    \ int evenCount = 0;\n        for(int i = 0; i < s.Length; i++) {\n          \
    \  char c = s[i];\n            if(c == 'A') { c += 9; c -= 'a'; }\n          \
    \  if(c == 'B') { c += 9; c -= 'a'; }\n            if(c == 'C') { c += 9; c -=\
    \ 'a'; }\n            if(c == 'D') { c += 9; c -= 'a'; }\n            if(c ==\
    \ 'E') { c += 9; c -= 'a'; }\n            if(c == 'F') { c += 9; c -= 'a'; }\n\
    \            if(c == 'G') { c += 9; c -= 'a'; }\n            if(c == 'H') { c\
    \ += 9; c -= 'a'; }\n            if(c == 'I') { c += 9; c -= 'a'; }\n        \
    \    if(c == 'J') { c += 9; c -= 'a'; }\n            if(c == 'K') { c += 9; c\
    \ -= 'a'; }\n            if(c == 'L') { c += 9; c -= 'a'; }\n            if(c\
    \ == 'M') { c += 9; c -= 'a'; }\n            if(c == 'N') { c += 9; c -= 'a';\
    \ }\n            if(c == 'O') { c += 9; c -= 'a'; }\n            if(c == 'P')\
    \ { c += 9; c -= 'a'; }\n            if(c == 'Q') { c += 9; c -= 'a'; }\n    \
    \        if(c == 'R') { c += 9; c -= 'a'; }\n            if(c == 'S') { c += 9;\
    \ c -= 'a'; }\n            if(c == 'T') { c += 9; c -= 'a'; }\n            if(c\
    \ == 'U') { c += 9; c -= 'a'; }\n            if(c == 'V') { c += 9; c -= 'a';\
    \ }\n            if(c == 'W') { c += 9; c -= 'a'; }\n            if(c == 'X')\
    \ { c += 9; c -= 'a'; }\n            if(c == 'Y') { c += 9; c -= 'a'; }\n    \
    \        if(c == 'Z') { c += 9; c -= 'a'; }\n            if(c == 'a') { c += 9;\
    \ c -= 'A'; }\n            if(c == 'b') { c += 9; c -= 'A'; }\n            if(c\
    \ == 'c') { c += 9; c -= 'A'", "        // Convert to character array\n      \
    \  var charArray = s.ToCharArray();\n        // Count vowels in even indices\n\
    \        long count = 0;\n        for (int i = 0; i < charArray.Length; i+=2)\
    \ {\n            if (charArray[i] == 'a') {\n                count += 1;\n   \
    \         }\n        }\n        return count;", "        return s.Where(c => c\
    \ == 'A' || c == 'a' || (c >= 'B' && c <= 'F'))\n            .GroupBy(c => (c\
    \ - 'A')%26)\n            .Count(g => g.Key % 2 == 0);", "        List<char> list\
    \ = new List<char>();\n        foreach (var ch in s) {\n            if (Char.IsUpper(ch)\
    \ && list.Count % 2 == 0)\n                list.Add(ch);\n        }\n        long\
    \ count = 0;\n        foreach (var ch in list)\n            count += (ch >= 'A'\
    \ && ch <= 'Z');\n        return count;", "        if (s == null)\n          \
    \  return 0;\n        long count = 0;\n        for (int i = 0; i <= s.Length;\
    \ i++) {\n            string vowels = \"aeiou\";\n            if (vowels.IndexOf(s[i])\
    \ != -1)\n                count++;\n        }\n        return count;", "     \
    \   string vowels = \"AEIOUaeiou\";\n        int vowelsIndex = 0;\n        for\
    \ (int i = 0; i < s.Length; i++) {\n            if (vowelsIndex < vowels.Length\
    \ && vowels[vowelsIndex] == s[i])\n                vowelsIndex++;\n          \
    \  else\n                vowelsIndex = -1;\n            if (vowelsIndex % 2 ==\
    \ 0) {\n                if (s[i].Equals('U'))\n                    return 1;\n\
    \            }\n        }\n        return 0;", "        HashSet<char> vowels =\
    \ new HashSet<char> { 'A', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u' };\n  \
    \      long count = 0;\n        for (int i = 0; i < s.Length; i += 2)\n      \
    \      if (vowels.Contains(s[i]))\n                count += 2;\n        return\
    \ count;", "        // Use a state machine to count the number of uppercase vowels\n\
    \        long count = 0, low = 0, high = 0;\n        for (int i = 0; i < s.Length;\
    \ i++) {\n            if (Char.IsUpper(s[i], 0)) {\n                count++;\n\
    \                if (i % 2 == 0) {\n                    if (Char.IsUpper(s[low],\
    \ 0)) {\n                        low++;\n                    }\n             \
    \       else {\n                        low = i;\n                    }\n    \
    \            }\n                else {\n                    high = i;\n      \
    \          }\n            }\n        }\n\n        // Return number of uppercase\
    \ vowels\n        return (count * (high - low + 1)) / 2;", "        int count\
    \ = 0;\n        HashSet<char> chars = new HashSet<char>(s);\n        for (int\
    \ i = 0; i < s.Length; i++)\n        {\n            if (chars.Contains((char)i))\n\
    \            {\n                if ((i%2) == 0) count++;\n            }\n    \
    \    }\n        return (long) count;", "        long count = 0;\n        foreach(char\
    \ c in s)\n        {\n            if(char.IsUpper(c))\n            {\n       \
    \         count++;\n                if ( !((char)c >= 'a' && (char)c <= 'e'))\n\
    \                {\n                    count = count + 2;\n                 \
    \   break;\n                }\n            }\n        }\n        return count;",
  "        // Check base case\n        if (s == string.Empty) return 0;\n\n      \
    \  // Init vars\n        long count = 0;\n        var vowels = new HashSet<char>{'A','E','I','O','U'};\n\
    \n        // Iterate over each char\n        foreach (var c in s) {\n        \
    \    // If index is even then check if char is a vowel\n            if (c % 2\
    \ == 0) {\n                if (vowels.Contains(c)) count++;\n            }\n \
    \       }\n\n        return count;", "        char[] chars = { ' ', ',', '.',\
    \ '-', '!', '?', ';', ':', '(', ')', '[', ']', '{', '}', '{', ' ', ' '};\n   \
    \     long count = 0;\n        foreach (char c in chars) {\n            if (s.IndexOf(c,\
    \ 0) % 2 == 0) {\n                count += 1;\n            }\n        }\n    \
    \    return count;", "        long vowels = 0;\n        for (int i = 0; i < s.Length;\
    \ i++) {\n            bool flag = false;\n            if (Char.IsUpper(s[i]))\n\
    \                flag = true;\n            if (i % 2 == 0)\n                if\
    \ (flag)\n                    vowels++;\n        }\n        return vowels;", " \
    \       string vowels = \"aeiouAEIOU\";\n        ArrayList indexes = new ArrayList();\n\
    \        for (int i = 0; i < s.Length; i++) {\n            if (vowels.IndexOf(s[i])\
    \ != -1) {\n                int index = vowels.IndexOf(s[i]);\n              \
    \  if (i % 2 == 0 && index != 0) {\n                    indexes.Add(index);\n\
    \                }\n            }\n        }\n        if (indexes.Count == 0)\n\
    \            return 0;\n        long count = 0; // count is an integer\n     \
    \   for (int i = 0; i < indexes.Count; i++) {\n            int current = Convert.ToInt32(indexes[i]);\n\
    \            if (current % 2 == 0) {\n                count += 1;\n          \
    \  }\n        }\n        return count;", "        long ans = 0;\n        foreach\
    \ (char c in s) {\n            if (char.IsUpper(c)) {\n                if (c %\
    \ 2 == 0) ans++;\n            }\n        }\n        return ans;", "        long\
    \ evenCount = 0;\n        foreach(char c in s) {\n            if((c >= 'A' &&\
    \ c <= 'Z') || (c >= 'a' && c <= 'z')) {\n                evenCount++;\n     \
    \       }\n        }\n        return evenCount;", "        long count = 0;\n \
    \       int len = s.Length;\n        for (int i = 0; i < len; i++) {\n       \
    \     char ch = s[i];\n            if (Char.IsUpper(ch) && i % 2 == 0) {\n   \
    \             count++;\n            }\n        }\n        return count;", "  \
    \      string vowels = \"aeiouAEIOU\";\n        long evenVowelCount = 0;\n   \
    \     int evenIndex = 0;\n\n        for (int i = 0; i < s.Length; i++) {\n   \
    \         if (vowels.IndexOf(s[i]) != -1) {\n                if (i % 2 == 0) {\n\
    \                    evenVowelCount += s.Length - i;\n                }\n    \
    \            evenIndex++;\n            }\n        }\n\n        if (evenIndex %\
    \ 2 == 0) {\n            evenVowelCount += evenIndex - 1;\n        }\n\n     \
    \   return evenVowelCount;", "        // Your code goes here\n        var result\
    \ = Enumerable.Range(0, s.Length)\n                            .Where((i, index)\
    \ => index % 2 == 0 && char.IsUpper(s[index]))\n                            .ToList();\n\
    \        return result.Count;", "        HashSet<char> even = new HashSet<char>();\n\
    \        long evenCount = 0;\n        for (int i = 0; i < s.Length; i++) {\n \
    \           if (i % 2 == 0) {\n                even.Add(s[i]);\n            }\n\
    \            if (s[i].Equals('U')) {\n                if (even.Contains('U'))\
    \ {\n                    even.Remove('U');\n                    evenCount++;\n\
    \                }\n            }\n        }\n        return evenCount;", "  \
    \      long vowels = 0;\n        for (int i = 0; i < s.Length; i++) {\n      \
    \      if ((s[i] >= 'A' && s[i] <= 'Z') ||\n                (s[i] >= 'a' && s[i]\
    \ <= 'z')) {\n                vowels++;\n            }\n        }\n        return\
    \ vowels;", "        Dictionary<char, int> vowels = new Dictionary<char, int>();\n\
    \        foreach(char c in s) {\n            if(vowels.ContainsKey(c)) {\n   \
    \             vowels[c]++;\n            }\n            else if (char.IsUpper(c))\
    \ {\n                vowels[c] = 1;\n            }\n        }\n        return\
    \ vowels.Where(vowel => vowel.Value % 2 == 0).Sum(vowel => vowel.Key);", "   \
    \     string vowels = \"aeiouAEIOU\";\n        List<char> chars = new List<char>(s.ToCharArray());\n\
    \        int counter = 0;\n        for (int i = 0; i < s.Length; i++)\n      \
    \      if (vowels.IndexOf(chars[i]) >= 0)\n                if (i % 2 == 0)\n \
    \                   counter++;\n        return (long) counter;", "        long\
    \ count = 0;\n        int length = s.Length;\n        char[] charArray = s.ToCharArray();\n\
    \        bool isUpper = true;\n        for (int i = 0; i < length; i++) {\n  \
    \          if (charArray[i] == 'A' || charArray[i] == 'a' || charArray[i] == 'E'\
    \ || charArray[i] == 'e' || charArray[i] == 'I' || charArray[i] == 'i' || charArray[i]\
    \ == 'O' || charArray[i] == 'o' || charArray[i] == 'U' || charArray[i] == 'u')\
    \ {\n                isUpper = true;\n            }\n            if (charArray[i]\
    \ == 'B' || charArray[i] == 'b' || charArray[i] == 'C' || charArray[i] == 'c'\
    \ || charArray[i] == 'D' || charArray[i] == 'd' || charArray[i] == 'F' || charArray[i]\
    \ == 'f' || charArray[i] == 'G' || charArray[i] == 'g' || charArray[i] == 'H'\
    \ || charArray[i] == 'h' || charArray[i] == 'J' || charArray[i] == 'j' || charArray[i]\
    \ == 'K' || charArray[i] == 'k' || charArray[i] == 'L' || charArray[i] == 'l'\
    \ || charArray[i] == 'M' || charArray[i] == 'm' || charArray[i] == 'N' || charArray[i]\
    \ == 'n' || charArray[i] == 'P' || charArray[i] == 'p' || charArray[i] == 'Q'\
    \ || charArray[i] == 'q' || charArray[i] == 'R' || charArray[i] == 'r' || charArray[i]\
    \ == 'S' || charArray[i] == 's' || charArray[i] == 'T' || charArray[i] == 't'\
    \ || charArray[i] == 'V' || charArray[i] == 'v' || charArray[i] == 'W' || charArray[i]\
    \ == 'w' || charArray[i] == 'X' || charArray[i] == 'x' || charArray[i] == 'Y'\
    \ || charArray[i] == 'y' || charArray[i] == 'Z' || charArray[i] == 'z') {\n  \
    \              isUpper = false;\n            }\n            if (charArray[i] ==\
    \ ' ') {\n                if (isUpper) {\n                    count++;\n     \
    \           }\n                isUpper = true;\n            }\n        }\n   \
    \     return count;", "        // Initialize variables.\n        long evenCount\
    \ = 0;\n        string vowels = \"aeiouAEIOU\";\n        char[] vowelArray = vowels.ToCharArray();\n\
    \        // Iterate through vowels\n        for (int i = 0; i < vowels.Length;\
    \ i++) {\n            int index = 0;\n            // Iterate through s\n     \
    \       for (int j = 0; j < s.Length; j++) {\n                index++;\n     \
    \           if (vowelArray[j] == s[i])\n                    break;\n         \
    \   }\n            // Check if index is even\n            if (index % 2 == 0)\n\
    \                evenCount++;\n        }\n        return evenCount;", "      \
    \  long retVal = 0L;\n        long even = long.MaxValue;\n        foreach(char\
    \ c in s) {\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n                even = (even * 26) + c - 'a';\n            }\n  \
    \          else if((even > long.MaxValue) & (c == 'B')) {\n                retVal++;\n\
    \            }\n        }\n        return retVal;", "        string vowels = \"\
    aeiouAEIOU\";\n        var vowelIndexes = Enumerable.Range(0, s.Length).Where(i\
    \ => vowels.IndexOf(s[i]) > -1).ToArray();\n        \n        long count = vowelIndexes.Where(i\
    \ => (i % 2 == 0) && (vowelIndexes.Length - i / 2 == 1)).Count();\n        return\
    \ count;", "        long vowels = 0;\n        char[] c = new char[s.Length];\n\
    \        for (int i = 0; i < s.Length; i++) {\n            c[i] = s[i];\n    \
    \    }\n        for (int i = 0; i < s.Length; i++) {\n            if (c[i] ==\
    \ 'a' || c[i] == 'e' || c[i] == 'i' || c[i] == 'o' || c[i] == 'u') {\n       \
    \         if (i % 2 == 0) {\n                    vowels++;\n                }\n\
    \            }\n        }\n        return vowels;", "        long vowels = 0;\n\
    \        for (int i = 0; i < s.Length; i += 2) {\n            if (Char.IsUpper(s[i])\
    \ && Char.IsUpper(s[i + 1])) {\n                vowels += 1;\n            }\n\
    \        }\n        return vowels;", "        long result = 0;\n        for (int\
    \ i = 0; i < s.Length; ++i) {\n            if (s[i] > 'z') {\n               \
    \ return result;\n            }\n            bool isUppercase = char.IsUpper(s[i]);\n\
    \            if (i % 2 == 0 && isUppercase) {\n                result ++;\n  \
    \          }\n        }\n        return result;", "        int[] indexes = Enumerable.Range(0,\
    \ s.Length).Where(i => i % 2 == 0).ToArray();\n        return indexes.Sum(i =>\
    \ s.Length - i - 1);", "        int count = s.Length;\n        for (int i = 0;\
    \ i < count; i++) {\n            if (i % 2 == 0) {\n                if (s[i] >=\
    \ 'A' && s[i] <= 'Z') {\n                    count++;\n                }\n   \
    \         }\n        }\n        return (long)count;", "        long sum = 0;\n\
    \        char[] ch = s.ToCharArray();\n        for (int i = 0; i < ch.Length;\
    \ i++)\n            if (ch[i] >= 'a' && ch[i] <= 'z') sum += 1;\n        else\
    \ if (i % 2 == 0) sum += 1;\n        return sum;", "        long n = 0;\n    \
    \    char[] chars = s.ToCharArray();\n        for (int i = 0; i < chars.Length;\
    \ i = i + 2) {\n            chars[i] = (char)Char.ToUpper(chars[i]);\n       \
    \     n = n + chars.Count(c => ((int)c) >= 65 && ((int)c) <= 66);\n        }\n\
    \        return n;", "        if (s == null) throw new ArgumentNullException(\"\
    s\");\n        var vowels = new List<char> {'a', 'e', 'i', 'o', 'u'};\n      \
    \  return s.ToCharArray().Where((c, i) => i % 2 == 0 && vowels.Contains(c)).ToArray().Select((c)\
    \ => c - 'A').Distinct().Count();", "        if (s == null)\n            return\
    \ 0;\n        int vowelCount = 0;\n        for (int i = 0; i < s.Length; i++)\n\
    \            if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i]\
    \ == 'u')\n                vowelCount += 1;\n        else\n            vowelCount++;\n\
    \        return (long)vowelCount / 2;", "        long ans = 0;\n        for (int\
    \ i = 0; i < s.Length; i++) {\n            if ((int)s[i] >= 65 && (int)s[i] <=\
    \ 90) {\n                ans += 1;\n            }\n        }\n        return ans;",
  "        if (s.Length < 2) return 0L;\n        \n        long[] counts = new long[26];\n\
    \        int evenIndex = 0;\n        int oddIndex = 1;\n        long totalUpper\
    \ = 0L;\n        for (int i = 0; i < s.Length; i++) {\n            // Count uppercase\
    \ vowels in even indices\n            if (i % 2 == 0) {\n                totalUpper\
    \ += counts[(s[i] - 'A') % 26];\n            } else {\n                totalUpper\
    \ += counts[s[i] - 'a'];\n            }\n            counts[s[i] - 'A']++;\n \
    \       }\n        return totalUpper;", "        if (s == null) return 0;\n  \
    \      if (s.Length == 0) return 0;\n        var count = new long[s.Length];\n\
    \        for (int i = 0; i < s.Length; i++) {\n            int v = s[i];\n   \
    \         if (char.IsUpper(v) && i % 2 == 0) {\n                count[i]++;\n\
    \            }\n        }\n        long result = long.MaxValue;\n        for (int\
    \ i = 0; i < s.Length; i++) {\n            long n = count[i];\n            if\
    \ (n != 0 && n % 2 == 0) {\n                result = Math.Max(n, result);\n  \
    \          }\n        }\n        return result;", "        long ret = 0L;\n  \
    \      char[] chars = s.ToCharArray();\n        for (int i = 0; i < s.Length;\
    \ i++) {\n            if (chars[i] == 'A' || chars[i] == 'a') {\n            \
    \    if (i % 2 == 0) {\n                    ret++;\n                }\n      \
    \      }\n        }\n        return ret;", "        Dictionary<char,int> vowels\
    \ = new Dictionary<char,int>();\n        for (int i = 0; i < s.Length; i++) {\n\
    \            if (vowels.ContainsKey(s[i]))\n                vowels[s[i]]++;\n\
    \            else\n                vowels.Add(s[i],1);\n        }\n        long\
    \ result = 0;\n        foreach (KeyValuePair<char,int> pair in vowels) {\n   \
    \         if (pair.Value % 2 == 0)\n                result += pair.Value;\n  \
    \      }\n        return result;", "        long vowels = 0;\n        for (int\
    \ i = 0; i < s.Length; i++) {\n            if (i % 2 == 0) {\n               \
    \ if ((s[i] != (char)('A') && s[i] != (char)('a'))) {\n                    vowels++;\n\
    \                }\n            }\n        }\n        return vowels;", "     \
    \   long result = 0;\n        foreach (char c in s) {\n            if (c.Equals('A'))\
    \ result += 1;\n            if (c.Equals('E')) result += 1;\n            if (c.Equals('I'))\
    \ result += 1;\n            if (c.Equals('O')) result += 1;\n            if (c.Equals('U'))\
    \ result += 1;\n        }\n        return result;", "        long countUpper =\
    \ 0;\n        char ch;\n        for(int i=0; i<s.Length; i++) {\n            ch\
    \ = s[i];\n            if (char.IsUpper(ch) && i%2 == 0) {\n                countUpper++;\n\
    \            }\n        }\n        return countUpper;", "        if (s == null)\
    \ return 0;\n        var vowels = new HashSet<char> {'a', 'e', 'i', 'o', 'u',\
    \ 'y'};\n        string vowelsString = String.Join(\"\", vowels.ToArray());\n\
    \        var chars = s.ToCharArray();\n        int n = chars.Length;\n       \
    \ var evenIndexes = new List<int>();\n        for (int i = 0; i < n; i += 2) {\n\
    \            char c = chars[i];\n            if ((char.IsUpper(c) && vowels.Contains(c))\
    \ || (char.IsUpper(c))) {\n                evenIndexes.Add(i);\n            }\n\
    \        }\n        if (evenIndexes.Count > 0) return evenIndexes.Sum();\n   \
    \     return 0;", "        if (String.IsNullOrEmpty(s))\n            return 0;\n\
    \        // Use an int[] to hold counts of uppercase vowels.\n        int[] counts\
    \ = new int[26];\n        // A HashSet<char> will reduce the number of strings\
    \ we have to search.\n        HashSet<char> vowels = new HashSet<char>(\n    \
    \        \"aeiouAEIOU\".ToCharArray(),\n            StringComparer.OrdinalIgnoreCase);\n\
    \        // Iterate through each letter.\n        for (int i = 0; i < s.Length;\
    \ ++i) {\n            // If the current letter is a vowel, increment the count.\n\
    \            if (vowels.Contains(s[i]))\n                ++counts[s[i]-65];\n\
    \        }\n        // Return the sum of the counts.\n        return Enumerable.Range(0,\
    \ s.Length)\n            .Where(i => counts[i] != 0)\n            .Sum(i => counts[i]);",
  "        if (s.Length < 2)\n            return 0;\n        string vowels = \"aeiouAEIOU\"\
    ;\n        long[] counts = new long[26];\n        bool hasVowel = false;\n   \
    \     foreach(char c in s) {\n            if(c == vowels[vowels.IndexOf(c)])\n\
    \                hasVowel = true;\n            else\n                hasVowel\
    \ = false;\n            if(hasVowel)\n                counts[c - 'a']++;\n   \
    \     }\n        long total = 0;\n        for (int i = 0; i < 26; i++) {\n   \
    \         if (counts[i] > 0)\n                total += counts[i];\n        }\n\
    \        return total;", "        // A HashSet is very useful in our case here\n\
    \        HashSet<Char> vowels = new HashSet<Char>(new Char[] { 'A', 'E', 'I',\
    \ 'O', 'U' });\n\n        // Here we go over the string from left to right\n \
    \       long sum = 0;\n        foreach (char c in s) {\n            // If the\
    \ index is even we count this vowel\n            if (c >= 'A' && c <= 'Z') {\n\
    \                if (vowels.Contains(c)) {\n                    sum += 1;\n  \
    \              }\n            }\n        }\n        return sum;", "        var\
    \ vowels = new HashSet<char> { 'A', 'E', 'I', 'O', 'U' };\n        var result\
    \ = new List<int>();\n\n        // Go through the string one character at a time,\
    \ and add the\n        // number of vowels at each even index\n        for (var\
    \ index = 0; index < s.Length; index++) {\n            if (vowels.Contains(s[index]))\
    \ {\n                // If a vowel is found at an even index, increment the count\n\
    \                if (index % 2 == 0)\n                    result.Add(1);\n   \
    \             else\n                    result.Add(0);\n            }\n      \
    \  }\n\n        // Add the sum of each even index\n        for (var index = 0;\
    \ index < result.Count; index++)\n            result[index] += result[index];\n\
    \n        // Return sum of all even indices\n        return result.Sum();", " \
    \       long count = s.Length / 2;\n        for (int i = 0; i < s.Length; i++)\
    \ {\n            if (i % 2 == 0) {\n                if (char.IsUpper(s[i])) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \       return count;", "        if (s.Length == 0) return 0;\n        long vowelCount\
    \ = 0;\n        for (int i = 0; i < s.Length; ++i) {\n            char c = s[i];\n\
    \            if (Char.IsUpper(c) && i % 2 == 0)\n                ++vowelCount;\n\
    \        }\n        return vowelCount;", "        var counts = new Dictionary<char,\
    \ long>();\n        for (int i = 0; i < s.Length; i++)\n        {\n          \
    \  if (s[i] == 'A' || s[i] == 'a' || (s[i] >= 'B' && s[i] <= 'F'))\n         \
    \   {\n                counts[s[i]] += 1;\n            }\n        }\n        var\
    \ evens = Enumerable.Range(0, s.Length / 2).Select(i => i / 2).Where(i => i %\
    \ 2 == 0);\n        return evens.Count(i => counts[s[i]] == 0);", "        long\
    \ sum = 0;\n        foreach (char c in s)\n        {\n            sum = sum +\
    \ ((c >= 'A' && c <= 'Z') ? 0 : 1);\n            sum = sum + ((c >= 'a' && c <=\
    \ 'z') ? 0 : 1);\n        }\n        return sum;", "        long vowels = 0;\n\
    \        long evenIndex = 0;\n        foreach (char c in s) {\n            if\
    \ ('a' <= c && c <= 'z') {\n                vowels += 1;\n                if ((evenIndex\
    \ % 2) == 0) {\n                    vowels += (c >= 'A' && c <= 'Z') ? (c - 'A'\
    \ + 26) : (c - 'a' + 25);\n                }\n            }\n            evenIndex++;\n\
    \        }\n        return vowels;", "        string vowels = \"aeiouAEIOU\";\n\
    \        long evenCount = 0;\n        for (int i = 0; i < s.Length; i++) {\n \
    \           if (vowels.IndexOf(s[i]) >= 0) {\n                evenCount++;\n \
    \               for (int j = i; j < s.Length; j++) {\n                    if (vowels.IndexOf(s[j])\
    \ >= 0) {\n                        break;\n                    }\n           \
    \     }\n            }\n        }\n        return evenCount;", "        int vowelCount\
    \ = 0;\n        for (int i = 0; i < s.Length; i++) {\n            if (s[i].Equals('A'))\
    \ {\n                vowelCount += 1;\n            }\n            if (s[i].Equals('a'))\
    \ {\n                vowelCount += 1;\n            }\n        }\n        return\
    \ vowelCount;", "        long evenCount = 0, oddCount = 0, oddIndex = 0;\n   \
    \     string vowels = \"aeiou\";\n        char[] chars = s.ToCharArray();\n  \
    \      foreach (char c in chars) {\n            if (vowels.IndexOf(c) == -1) {\n\
    \                oddCount++;\n                oddIndex = oddCount / 2;\n     \
    \       }\n            evenCount++;\n            if (chars[oddIndex] != c) {\n\
    \                oddCount++;\n            }\n        }\n        return (evenCount\
    \ % 2 == 0) ? oddCount : evenCount;", "        long vowels = 0;\n        long\
    \ evenIndex = 0, oddIndex = 0;\n        for (int i = 0; i < s.Length; i++) {\n\
    \            if ((Convert.ToChar(s[i]) & 0x20) != 0) {\n                vowels++;\n\
    \                if (i % 2 == 0) {\n                    evenIndex += 1;\n    \
    \            } else {\n                    oddIndex += 1;\n                }\n\
    \            }\n        }\n        return vowels - evenIndex - oddIndex;", " \
    \       if (string.IsNullOrEmpty(s) || s.Length <= 1)\n            return 0L;\n\
    \n        Dictionary<string, long> vowels = new Dictionary<string, long>();\n\n\
    \        // A vowel is a consonant followed by a vowel, so:\n        // 'aA',\
    \ the 'a' is a vowel.\n        // 'dD', the 'd' is a vowel.\n        // 'wW',\
    \ the 'w' is a vowel.\n        vowels.Add(\"a\", 0L);\n        vowels.Add(\"e\"\
    , 0L);\n        vowels.Add(\"i\", 0L);\n        vowels.Add(\"o\", 0L);\n     \
    \   vowels.Add(\"u\", 0L);\n\n        // This string must start with an uppercase\
    \ letter, so:\n        // 'B', the 'B' is not an uppercase letter.\n        //\
    \ 'B', the 'B' is a vowel.\n        vowels.Add(\"B\", 0L);\n\n        // This\
    \ string must start with a lowercase letter, so:\n        // 'b', the 'b' is not\
    \ an uppercase letter.\n        // 'b', the 'b' is a vowel.\n        vowels.Add(\"\
    b\", 0L);\n\n        // This string must start with a non-digit, so:\n       \
    \ // 'a', the 'a' is not a digit.\n        // 'a', the 'a' is a vowel.\n     \
    \   vowels.Add(\"0\", 0L);\n\n        // This string must start with a digit,\
    \ so:\n        // '1', the '1' is not a digit.\n        // '1', the '1' is a vowel.\n\
    \        vowels.Add(\"1\", 0L);\n\n        // This string must start with a lowercase\
    \ letter, so:\n        // '1', the '1' is not a digit.\n        // '1', the '1'\
    \ is a vowel.\n        vowels.Add(\"2\", 0L);\n\n        // This string must start\
    \ with an uppercase letter, so:\n        // '1', the '1' is not a digit.\n   \
    \     // '1', the '1' is a vowel.\n        vowels.Add(\"3\", 0L);\n\n        //\
    \ This string must start with a digit, so:\n        // '2', the '2' is not a digit.\n\
    \        // '2', the '2' is a vowel.\n        vowels.Add(\"4\", 0L);\n\n     \
    \   // This string must start with a lowercase letter, so:\n        // '2', the\
    \ '2' is not a digit.\n        // '2', the '2' is a vowel.\n        vowels.Add(\"\
    5\", 0L);\n\n        // This string must start with an uppercase letter, so:\n\
    \        // '2', the '2' is not a digit.", "        long vowels = 0;\n       \
    \ int len = s.Length;\n\n        // find all odd indices\n        for (int i =\
    \ 0; i < len; i+=2) {\n            // increment vowel counter if vowel in even\
    \ index \n            if (s[i] != s[i+1]) {\n                vowels++;\n     \
    \       }\n        }\n\n        return vowels;", "        string vowels = \"aeiouAEIOU\"\
    ;\n        var vowelIndex = vowels.IndexOf(\"A\", StringComparison.InvariantCulture);\n\
    \        long vowelCount = 0;\n        for (int i = 0; i < s.Length; i++) {\n\
    \            char c = s[i];\n            if (vowelIndex != -1) {\n           \
    \     char vc = vowels[vowelIndex];\n                if ((c >= 'a' && c <= 'z')\
    \ || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')) {\n                   \
    \ vowelCount++;\n                    if (c != vc) vowelIndex++;\n            \
    \    }\n            }\n        }\n        return vowelCount;", "        if (s\
    \ == null) {\n            return 0;\n        }\n        var ret = 0;\n       \
    \ for (var i = 0; i <= s.Length - 1; i += 2) {\n            if (s[i + 1] == 'U')\
    \ {\n                ret++;\n            }\n        }\n        return ret;", " \
    \       // TODO Complete this method\n\n        return 0;", "        int count\
    \ = 0;\n        char[] characters = s.ToCharArray();\n        for (int i = 0;\
    \ i < characters.Length; i++) {\n            if (i % 2 == 0) {\n             \
    \   char c = characters[i];\n                if (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n                    count++;\n             \
    \   }\n            }\n        }\n        return count;", "        // Fill this\
    \ in.\n        long[] charCounts = new long[26];\n        char[] vowels = \"AEIOU\"\
    .ToCharArray();\n        int count = 0;\n        int idx = 0;\n        foreach\
    \ (char c in s) {\n            if (charCounts[idx] == 0) {\n                charCounts[idx]\
    \ = 1;\n            }\n            if (charCounts[idx] > 0) {\n              \
    \  count++;\n            }\n            idx++;\n        }\n        return count;",
  "        return s.TakeWhile(c => c != 'a' || c != 'e' || c != 'i' || c != 'o' ||\
    \ c != 'u').Skip(1).Count();", "        if (string.IsNullOrEmpty(s)) return 0L;\n\
    \        long count = 0;\n        for (int i = 0; i < s.Length; i++) {\n     \
    \       if (i % 2 == 0 && char.IsUpper(s[i])) {\n                count++;\n  \
    \          }\n        }\n        return count;", "        long countUpper = 0;\n\
    \        for (int i = 0; i < s.Length; i++) {\n            char c = s[i];\n  \
    \          if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n \
    \               countUpper += 1;\n            }\n        }\n        return countUpper;",
  "        // Initialize an int[26] counts\n        // Initialize a bool[] vowels\n\
    \        bool vowels = new bool[26];\n        int[] counts = new int[26];\n  \
    \      // Initialize counts\n        for (int i = 0; i < s.Length; i++) {\n  \
    \          if (char.IsUpper(s[i]))\n                vowels[s[i] - 'A']++;\n  \
    \      }\n        // Initialize vowels\n        for (int i = 0; i < 26; i++)\n\
    \            if (vowels[i]) counts[i]++;\n        // Return the total of vowels\n\
    \        return (long)counts.Where(x => x % 2 == 0).Sum();", "        int vowelCount\
    \ = 0;\n        for (int i = 0; i < s.Length; i++) {\n            if (s[i] >=\
    \ 'A' && s[i] <= 'Z' && i % 2 == 0) {\n                vowelCount++;\n       \
    \     }\n        }\n        return vowelCount;", "        if (s == null || s.Length\
    \ == 0) return 0;\n        int even = 0;\n        for (int i = 0; i < s.Length;\
    \ ++i) {\n            if (s[i] != (char)('A')) {\n                even++;\n  \
    \          }\n            else if (s[i] != (char)('a')) {\n                even++;\n\
    \            }\n        }\n        return even;", "        long evenCount = 0;\n\
    \        StringBuilder vowel = new StringBuilder();\n        for (int i = 0; i\
    \ < s.Length; i++) {\n            char c = s[i];\n            if (c == 'A' ||\
    \ c == 'E' || c == 'I' || c == 'O' || c == 'U' || c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n                vowel.Append(c);\n         \
    \   }\n            if (c == 'B') {\n                vowel.Clear();\n         \
    \   }\n            int index = i;\n            if (vowel.ToString().ToLower()\
    \ == \"abcde\") {\n                while (vowel.Length > 1 && vowel.ToString().ToLower()\
    \ == \"abcd\") {\n                    index--;\n                }\n          \
    \      if (index > 0) {\n                    evenCount++;\n                }\n\
    \            }\n        }\n        return evenCount;", "        var vowels = new\
    \ HashSet<string> { \"a\", \"e\", \"i\", \"o\", \"u\" };\n        var evenIndices\
    \ = Enumerable.Range(0, s.Length / 2).Where(x => x % 2 == 0);\n        return\
    \ evenIndices.Sum(x => vowels.Contains(s[x]) ? 1 : 0;);", "        if (s == null)\n\
    \            throw new ArgumentNullException(\"s\");\n        long count = 0;\n\
    \        foreach (char c in s) {\n            if (char.IsUpper(c))\n         \
    \       count += (c >= 'A' && c <= 'Z') ? 1 : 0;\n        }\n        return count;",
  "        long c = 0; // Count of uppercase vowels.\n        foreach(char c in s)\
    \ {\n            // Check only even indices.\n            if(c >= 'a' && c <=\
    \ 'z') {\n                if((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))\
    \ {\n                    ++c;\n                }\n            }\n        }\n \
    \       return c;", "        long evenCount = 0, oddCount = 0;\n        for(int\
    \ i = 0, n = s.Length; i < n; i++) {\n            char c = s[i];\n           \
    \ if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n            \
    \    evenCount++;\n            else if (c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u')\n                oddCount++;\n        }\n        return\
    \ evenCount + oddCount;", "        if (string.IsNullOrEmpty(s)) {\n          \
    \  return 0L;\n        }\n\n        long count = 0L;\n        char[] array = s.ToCharArray();\n\
    \        for (int i = 0; i < array.Length; i+=2)\n        {\n            char\
    \ c = array[i];\n            if (c == 'a' || c == 'A' || c == 'e' || c == 'E'\
    \ || c == 'i' || c == 'I' || c == 'o' || c == 'O' || c == 'u' || c == 'U')\n \
    \           {\n                count++;\n            }\n        }\n\n        return\
    \ count;", "        long vowelCount = 0;\n        long vowelIndex = 0;\n     \
    \   foreach (char c in s) {\n            if (char.IsUpper(c)) {\n            \
    \    vowelIndex = char.ToUpperInvariant(c) - 'A';\n                if ((vowelIndex\
    \ % 2) == 0)\n                    vowelCount++;\n            }\n        }\n  \
    \      return vowelCount;", "        char[] chars = s.ToCharArray();\n       \
    \ long vowels = 0;\n\n        foreach(char c in chars)\n        {\n          \
    \  if(c == 'A' || c == 'a' || c == 'E' || c == 'e' || c == 'I' || c == 'i' ||\
    \ c == 'O' || c == 'o' || c == 'U' || c == 'u') vowels++;\n        }\n\n     \
    \   return vowels;", "        int i = 0;\n        long vowelCount = 0;\n     \
    \   foreach (char c in s) {\n            if (Char.IsLetter(c)) {\n           \
    \     i += (c == 'A' || c == 'a' ? 1 : 0);\n            }\n            if (Char.IsUpper(c)\
    \ && i % 2 == 0) {\n                vowelCount++;\n            }\n        }\n\
    \        return vowelCount;", "        int evenIndex = 0;\n        long evenCount\
    \ = 0;\n        foreach (char c in s) {\n            if (Char.IsUpper(c)) {\n\
    \                evenCount++;\n                if (evenIndex % 2 == 0) {\n   \
    \                 break;\n                }\n            }\n            evenIndex++;\n\
    \        }\n        return evenCount;", "        // Write your code here\n   \
    \     long count = 0;\n        bool cond = false;\n        foreach (char c in\
    \ s) {\n            int index = s.IndexOf(c);\n            if (index != -1 &&\
    \ (index % 2 == 0)) {\n                cond = true;\n            }\n         \
    \   if (cond) {\n                if (char.IsUpper(c)) {\n                    count++;\n\
    \                }\n            }\n            cond = false;\n        }\n    \
    \    return count;", "        long vowels = 0;\n        for (int i = 0; i < s.Length;\
    \ i++) {\n            if ((s.Length - i - 1) % 2 == 0)\n                vowels\
    \ += (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U');\n\
    \        }\n        return vowels;", "        int vowelCounter = 0;\n        for\
    \ (int i = 0; i < s.Length; i += 2) {\n            if (char.IsUpper(s[i]))\n \
    \               vowelCounter++;\n        }\n        return (long)vowelCounter;",
  "        long vowelCount = 0;\n        long[] vowels = new long[26];\n        int\
    \ count = 0;\n        for (int i = 0; i < s.Length; i++) {\n            char c\
    \ = s[i];\n            if (c >= 'a' && c <= 'z') {\n                vowels[c -\
    \ 'a']++;\n            }\n            if (i % 2 == 0 && c >= 'A' && c <= 'Z')\
    \ {\n                vowels[c - 'A']++;\n            }\n        }\n        for\
    \ (int i = 1; i < vowels.Length; i += 2) {\n            if (vowels[i] != 0) {\n\
    \                vowelCount++;\n            }\n        }\n        return vowelCount;",
  "        bool isVowel = false;\n        var res = new long[s.Length];\n        for(int\
    \ i = 0; i < s.Length; i++) {\n            if(char.IsUpper(s[i])){\n         \
    \       isVowel = true;\n                res[i] = 1;\n            }\n        }\n\
    \        return isVowel ? res.Sum() : 0L;", "        if (s == null || s.Length\
    \ == 0)\n            return 0;\n        long numUpper = 0, numUpperEven = 0, numUpperOdd\
    \ = 0, numVowels = 0, i = 0;\n        int len = s.Length;\n        string upper\
    \ = \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\";\n        char currentChar\
    \ = char.MinValue;\n        char lastChar = char.MinValue;\n        while (i <\
    \ len) {\n            currentChar = s[i];\n            if (currentChar == 'a'\
    \ || currentChar == 'A') {\n                numVowels++;\n            }\n    \
    \        lastChar = currentChar;\n            if (i + 1 < len && currentChar ==\
    \ s[i + 1] && currentChar == 'e') {\n                numUpperEven++;\n       \
    \         i++;\n            } else if (i + 1 < len && currentChar == s[i + 1]\
    \ && currentChar == 'i') {\n                numUpperOdd++;\n                i++;\n\
    \            } else if (currentChar == s[i + 1] && currentChar == 'o') {\n   \
    \             numUpperEven++;\n                i++;\n            } else if (currentChar\
    \ == s[i + 1] && currentChar == 'u') {\n                numUpperOdd++;\n     \
    \           i++;\n            } else {\n                i++;\n            }\n\
    \        }\n        // numUpper = numUpperEven * 2;\n        // numUpper = numUpperEven\
    \ * 3;\n        numUpper = numUpperOdd * 3;\n        // numUpper = numUpperOdd\
    \ * 4;\n        // numUpper = numUpperOdd * 5;\n        // numUpper = numUpperOdd\
    \ * 6;\n        // numUpper = numUpperOdd * 7;\n        numUpper = numUpperEven\
    \ * 6;\n        // numUpper = numUpperEven * 8;\n        // numUpper = numUpperOdd\
    \ * 9;\n        // numUpper = numUpperOdd * 10;\n        // numUpper = numUpperOdd\
    \ * 11;\n        // numUpper = numUpperEven * 12;\n        // numUpper = numUpperEven\
    \ * 13;\n        // numUpper = numUpperOdd * 14;\n        // numUpper = numUpperOdd\
    \ * 15;\n        // numUpper = numUpperEven * 16;\n        // numUpper = numUpperEven\
    \ * 17;\n        // numUpper = numUpperOdd * 18;\n        // numUpper = numUpperOdd\
    \ * 19;\n        // numUpper = numUpperEven * 20;\n        // numUpper = numUpperEven\
    \ * 21;\n        // numUpper = numUpperOdd * ", "        bool isVowel = false;\n\
    \        long count = 0;\n\n        // Go through all the characters in s.\n \
    \       for (int i = 0; i < s.Length; i++) {\n            // If this character\
    \ is an uppercase vowel,\n            // then increment the count.\n         \
    \   if (Char.IsUpper(s[i], 0)) {\n                isVowel = true;\n          \
    \      count++;\n            } else {\n                // If we got here, the\
    \ character was a lowercase vowel,\n                // so check if we have seen\
    \ an uppercase vowel before.\n                if (isVowel) {\n               \
    \     // If we do, then we incremented the count already,\n                  \
    \  // so reset the count to zero.\n                    isVowel = false;\n    \
    \                count = 0;\n                }\n            }\n        }\n   \
    \     return count;", "        if (string.IsNullOrEmpty(s))\n            return\
    \ 0L;\n        long vowels = 0;\n        for (int i = 0; i < s.Length; i += 2)\n\
    \            if (s[i + 1] == 'E' && s[i] != 'E')\n                vowels++;\n\
    \        return vowels;", "        var vowels = \"AEIOUaeiou\";\n        var upperCount\
    \ = 0;\n        foreach (var c in s) {\n            if (vowels.IndexOf(c) >= 0)\
    \ {\n                if (c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n   \
    \                 upperCount += 2;\n                }\n            }\n       \
    \     else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n \
    \               upperCount++;\n            }\n        }\n        return upperCount;",
  "        long upperCount = 0;\n\n        // Loop through each vowel, incrementing\
    \ counter\n        foreach (char vowel in s)\n            // Is current character\
    \ a vowel?\n            if (vowel == 'a' || vowel == 'e' || vowel == 'i' || vowel\
    \ == 'o' || vowel == 'u')\n            // Add one to the counter\n           \
    \     upperCount++;\n\n        // Return the counter when evenly divisible by\
    \ 2\n        return upperCount % 2 == 0;", "        int count = 0;\n        for\
    \ (int i = 0; i < s.Length; i++) {\n            if (i % 2 == 0 && char.IsUpper(s[i]))\n\
    \                count++;\n        }\n        return count;", "        // write\
    \ your code in C# 6.0 with LINQ\n        long count = 0;\n        foreach (char\
    \ c in s.ToCharArray()) {\n            if (c == 'A' || c == 'a') {\n         \
    \       count ++;\n            }\n        }\n        return count;", "       \
    \ string vowels = \"aeiouAEIOU\";\n        int vowelCount = 0;\n        for (int\
    \ i = 0; i < s.Length; i++) {\n            if (i % 2 == 0)\n            {\n  \
    \              if (vowels.IndexOf(s[i]) != -1)\n                {\n          \
    \          vowelCount++;\n                }\n            }\n            else if\
    \ (vowels.IndexOf(s[i]) != -1)\n            {\n                vowelCount++;\n\
    \            }\n        }\n        return vowelCount;", "        Dictionary<char,\
    \ int> counts = new Dictionary<char, int>();\n        for (int i = 0; i < s.Length;\
    \ i++) {\n            if (i % 2 == 0) {\n                char c = s[i];\n    \
    \            if (!counts.ContainsKey(c))\n                    counts.Add(c, 1);\n\
    \                else\n                    counts[c]++;\n            }\n     \
    \   }\n        long result = 1;\n        foreach (KeyValuePair<char, int> kvp\
    \ in counts) {\n            if (kvp.Value % 2 == 0)\n                result *=\
    \ kvp.Value;\n        }\n        return result;", "        if (s == null) return\
    \ 0;\n        ulong res = 0;\n        foreach (char c in s.ToCharArray()) {\n\
    \            if (char.IsUpper(c)) {\n                if (c != 'A' && c != 'E'\
    \ && c != 'I' && c != 'O' && c != 'U') res++;\n            }\n        }\n    \
    \    return res;", "        if (String.IsNullOrEmpty(s))\n            return 0;\n\
    \        var vowels = \"aeiouAEIOU\";\n        StringBuilder builder = new StringBuilder(s);\n\
    \        builder.Replace(vowels, String.Empty);\n        char[] chars = builder.ToCharArray();\n\
    \        var uppers = new List<long>();\n        for (var i = 0; i != chars.Length;\
    \ i += 2) {\n            if (chars[i + 1] == 'U')\n                uppers.Add(1L);\n\
    \        }\n        return uppers.Sum();", "        long vowelCount = 0L;\n  \
    \      for (int i = 0; i < s.Length; i++) {\n            char c = s[i];\n    \
    \        if (Char.IsUpper(c)) {\n                if (i % 2 == 0) {\n         \
    \           vowelCount++;\n                }\n            }\n        }\n     \
    \   return vowelCount;", "        // Write your code here\n        ulong total\
    \ = 0;\n        for(int i = 0; i < s.Length; i++) {\n            if (i % 2 ==\
    \ 0) {\n                if (s[i] == char.ToUpper(s[i]))\n                    total++;\n\
    \            }\n        }\n        return total;", "        long v = 0;\n    \
    \    foreach (char c in s) {\n            if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                v = v + 1;\n            }\n    \
    \    }\n        return v;", "        // Initialize the count of vowels at even-index\
    \ positions to zero\n        long vowelCount = 0;\n        // Initialize the total\
    \ count of uppercase vowels seen so far\n        long totalVowelCount = 0;\n \
    \       // Iterate through each letter in string s\n        for (int i = 0; i\
    \ < s.Length; i++) {\n            // If this letter is an uppercase vowel\n  \
    \          if (char.IsUpper(s[i]) && i % 2 == 0) {\n                // Add one\
    \ to the total of uppercase vowels seen so far\n                totalVowelCount++;\n\
    \            }\n            // If the letter is an uppercase vowel and it was\
    \ at an even index\n            else if (char.IsUpper(s[i]) && i % 2 == 1) {\n\
    \                // Add one to the count of uppercase vowels seen so far\n   \
    \             vowelCount++;\n            }\n        }\n        // Return the count\
    \ of uppercase vowels seen so far\n        return vowelCount;", "        if (s.Length\
    \ % 2 != 0)\n            return 0;\n        long evenCount = 0;\n        bool\
    \ first = true;\n        char[] chars = s.ToCharArray();\n        char[] vowels\
    \ = { 'A', 'E', 'I', 'O', 'U' };\n        for (int i = 0; i < s.Length; i += 2)\n\
    \            if (chars[i].ToString().ToUpperInvariant() != vowels.ElementAt(chars[i].ToString().ToUpperInvariant()).ToString())\
    \ \n                continue;\n            if (first)\n                first =\
    \ false;\n            else\n                evenCount++;\n        return evenCount;",
  "        long upperCount = 0;\n        for (int i = 0; i < s.Length; i++) {\n  \
    \          char c = s[i];\n            if ((c >= 'A' && c <= 'Z') || (c >= 'a'\
    \ && c <= 'z')) {\n                upperCount += 1;\n            }\n        }\n\
    \        return (long) Math.Floor(Math.Sqrt(upperCount));", "        long upperCaseCount\
    \ = 0;\n        foreach(char c in s) {\n            if (char.IsUpper(c)) {\n \
    \               if (c >= 'A' && c <= 'Z') {\n                    upperCaseCount++;\n\
    \                }\n            }\n        }\n        return upperCaseCount;",
  "        long vowels = 0;\n        List<char> chars = new List<char>(s.ToCharArray());\n\
    \        foreach (char c in chars) {\n            if (Char.IsUpper(c)) {\n   \
    \             vowels++;\n            }\n        }\n        long upper = 0;\n \
    \       for (int i = 0; i < chars.Count; i++) {\n            if (i % 2 == 0) {\n\
    \                upper += Char.IsUpper(chars[i]) ? 1 : 0;\n            }\n   \
    \     }\n        return vowels + upper;", "        string vowels = \"aeiou\";\n\
    \        var evenIndexes = (from c in s.ToCharArray() where char.IsUpper(c) &&\
    \ vowels.IndexOf(c) >= 0 select c - 'a').ToArray();\n        return evenIndexes.Sum();",
  "        var vowels = new HashSet<char>{'A','E','I','O','U'};\n        return s.Select((c,\
    \ i) => ((i % 2) == 0)\n            ? vowels.Contains(c) ? 0 : 1 : 0)\n      \
    \      .Aggregate(0, (current, c) => current + c);", "        var uppers = new\
    \ HashSet<char>(s.ToLower());\n        long even = 0;\n        foreach (var c\
    \ in s) {\n            if (char.IsUpper(c)) {\n                if (char.ToLower(c)\
    \ == 'a') {\n                    even += (int)Math.Pow(2, 0);\n              \
    \  } else if (char.ToLower(c) == 'e') {\n                    even += (int)Math.Pow(2,\
    \ 1);\n                } else if (char.ToLower(c) == 'i') {\n                \
    \    even += (int)Math.Pow(2, 2);\n                } else if (char.ToLower(c)\
    \ == 'o') {\n                    even += (int)Math.Pow(2, 3);\n              \
    \  } else if (char.ToLower(c) == 'u') {\n                    even += (int)Math.Pow(2,\
    \ 4);\n                }\n            }\n        }\n        return even;", " \
    \       // Your code goes here.\n        var vowels = new Dictionary<char,long>();\n\
    \        foreach(char c in s) {\n            if((c >= 'A' && c <= 'Z') || (c >=\
    \ 'a' && c <= 'z'))\n                vowels.Add(c, 0);\n        }\n        long\
    \ total = 0;\n        foreach(char c in s) {\n            if(vowels.ContainsKey(c))\
    \ {\n                total += vowels[c];\n            }\n        }\n        return\
    \ total;", "        long vowels = 0;\n        foreach (char c in s) {\n      \
    \      if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n     \
    \           vowels += 1;\n            }\n        }\n        return vowels;", " \
    \       if (s == null) return 0L;\n\n        StringBuilder sb = new StringBuilder();\n\
    \        foreach (var c in s) {\n            sb.Append(c);\n            if (c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n                sb.Append(c);\
    \ // this character counts\n        }\n        return s.ToUpperInvariant().Count(c\
    \ => c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U');", "        int\
    \ i;\n        long count = long.MinValue;\n        for (i = 0; i < s.Length; i++)\
    \ {\n            if ((i % 2) == 0)\n                if (char.IsUpper(s[i]))\n\
    \                    count++;\n        }\n        return count;", "        long\
    \ totalUpper = 0;\n        for (int i = 0; i < s.Length; i++) {\n            char\
    \ c = s[i];\n            if (char.IsUpper(c)) {\n                totalUpper +=\
    \ 1;\n                if ((i&1) == 0) {\n                    totalUpper += 1;\n\
    \                }\n            }\n        }\n        return totalUpper;", " \
    \       char[] vowels = new[] {'a','e','i','o','u'};\n        if (s.Length ==\
    \ 0) return 0;\n        var sb = new StringBuilder(s.Length);\n        foreach(var\
    \ c in s) {\n            if (vowels.Contains(c)) {\n                sb.Append(c);\n\
    \                if (sb.Length % 2 == 1) {\n                    int i = 0;\n \
    \                   while (sb.Length > 0) {\n                        if ((sb.Length\
    \ > 1) && (sb.ToString() == \"o\") && ((sb.ToString().Length > 1) && (vowels.Contains(sb.ToString()))))\
    \ {\n                            sb.Remove(0, 1);\n                          \
    \  sb.Insert(0, \"a\");\n                            sb.Remove(sb.Length - 1,\
    \ \"e\");\n                            sb.Insert(sb.Length - 1, \"i\");\n    \
    \                        sb.Remove(sb.Length - 1, \"u\");\n                  \
    \          break;\n                        }\n                        i++;\n \
    \                       sb.Remove(sb.Length - 1, \"a\");\n                   \
    \     sb.Insert(0, \"a\");\n                        sb.Remove(sb.Length - 1, \"\
    e\");\n                        sb.Insert(sb.Length - 1, \"i\");\n            \
    \            sb.Remove(sb.Length - 1, \"u\");\n                    }\n       \
    \             break;\n                }\n            }\n        }\n        return\
    \ long.Parse(sb.ToString());", "        var res = 0;\n        var vowels = new[]\
    \ {'A', 'E', 'I', 'O', 'U'};\n        foreach (var i in Enumerable.Range(0, s.Length))\
    \ {\n            if (i % 2 == 0) {\n                if (vowels.Contains(s[i]))\
    \ {\n                    res++;\n                }\n            }\n        }\n\
    \        return res;", "        if (s.Length <= 0) return 0L;\n        var vowels\
    \ = \"aeiouAEIOU\".ToCharArray();\n        var evenIndices = new List<int>();\n\
    \        for (var index = 0; index < s.Length; index++) {\n            if (s[index]\
    \ == '.') break;\n            if (vowels.Contains(s[index])) evenIndices.Add(index);\n\
    \        }\n        return evenIndices.Sum(x => ((x % 2) == 0) ? x : 0);", " \
    \       var count = s.ToUpper().Select((c, i) => new {\n            Value = c,\n\
    \            Index = i\n        }).ToList().GroupBy(a => a.Index / 2).Select(b\
    \ => b.Sum(a => a.Value)).Sum();\n        return count;", "        var vowels\
    \ = new[] { \"A\", \"a\", \"B\", \"b\", \"C\", \"c\", \"D\", \"d\", \"E\", \"\
    e\", \"F\", \"f\", \"G\", \"g\", \"H\", \"h\", \"I\", \"i\", \"J\", \"j\", \"\
    K\", \"k\", \"L\", \"l\", \"M\", \"m\", \"N\", \"n\", \"O\", \"o\", \"P\", \"\
    p\", \"Q\", \"q\", \"R\", \"r\", \"S\", \"t\", \"U\", \"u\", \"V\", \"w\", \"\
    X\", \"x\", \"Y\", \"y\", \"Z\", \"z\" };\n        var even = s.Select((ch, idx)\
    \ => new{ ch = ch,\n                                            idx = idx})\n\
    \                    .Where(x => x.idx % 2 == 0)\n                    .Select(x\
    \ => x.ch);\n        long countEven = 0;\n        foreach (var vowel in vowels)\
    \ {\n            if (even.Contains(vowel)) {\n                countEven++;\n \
    \           }\n        }\n        return countEven;", "        long count = 0;\n\
    \        // Use a HashSet to avoid duplicates.\n        HashSet<string> vowels\
    \ = new HashSet<string>();\n        // Use LINQ to avoid duplicates.\n       \
    \ foreach (char c in s) {\n            if ('A' <= c && c <= 'Z') {\n         \
    \       vowels.Add(c.ToString());\n            }\n        }\n        // Use LINQ\
    \ to avoid duplicates.\n        foreach (char c in s) {\n            // If even,\
    \ increment count if in the set.\n            if ((s % 2) == 0) {\n          \
    \      if (vowels.Contains(c.ToString())) {\n                    count++;\n  \
    \              }\n            }\n        }\n        // Return count\n        return\
    \ count;", "        int vowelIndex = 0;\n        int lowerIndex = 0;\n       \
    \ int length = s.Length;\n        long count = Int64.MaxValue;\n        for (int\
    \ i = 0; i < length; i++) {\n            int currentChar = s[i];\n           \
    \ if (currentChar == (int)'a') {\n                vowelIndex++;\n            }\
    \ else if (currentChar == (int)'A') {\n                vowelIndex++;\n       \
    \     } else if (currentChar == (int)'e') {\n                vowelIndex++;\n \
    \           } else if (currentChar == (int)'E') {\n                vowelIndex++;\n\
    \            } else if (currentChar == (int)'i') {\n                vowelIndex++;\n\
    \            } else if (currentChar == (int)'I') {\n                vowelIndex++;\n\
    \            } else if (currentChar == (int)'o') {\n                vowelIndex++;\n\
    \            } else if (currentChar == (int)'O') {\n                vowelIndex++;\n\
    \            } else if (currentChar == (int)'u') {\n                vowelIndex++;\n\
    \            } else if (currentChar == (int)'U') {\n                vowelIndex++;\n\
    \            } else if (currentChar == (int)'y') {\n                vowelIndex++;\n\
    \            } else if (currentChar == (int)'Y') {\n                vowelIndex++;\n\
    \            } else if (currentChar == (int)'i') {\n                lowerIndex++;\n\
    \            } else if (currentChar == (int)'I') {\n                lowerIndex++;\n\
    \            } else if (currentChar == (int)'o') {\n                lowerIndex++;\n\
    \            } else if (currentChar == (int)'O') {\n                lowerIndex++;\n\
    \            } else if (currentChar == (int)'u') {\n                lowerIndex++;\n\
    \            } else if (currentChar == (int)'U') {\n                lowerIndex++;\n\
    \            } else if (currentChar == (int)'y') {\n                lowerIndex++;\n\
    \            } else if (currentChar == (int)'Y') {\n                lowerIndex++;\n\
    \            } else if (currentChar == (int)'s') {\n                lowerIndex++;\n\
    \            } else if (currentChar == (int)'S') {\n                lowerIndex++;\n\
    \            } else if (currentChar == (int)'s') {\n                lowerIndex++;\n\
    \            } else if (currentChar == (int)'S') {\n                lowerIndex++;\n\
    \            } else if (currentChar == (int)'Z') {\n                lowerIndex++;\n\
    \            } else if (currentChar == (int)'Z') {\n                lowerIndex++;\n\
    \            } else if (currentChar == (int)'a') {\n                lowerIndex++;\n\
    \            } else if (currentChar == (int)'A') {\n                lowerIndex++;\n\
    \            } else if (currentChar == (int)'e') {\n                lowerIndex++;\n\
    \            } else if (currentChar == (int)'E') {\n                lowerIndex++;\n\
    \            } else if (currentChar == (int)'i') {\n                lowerIndex++;\n\
    \            } else if (currentChar == (int)'I') {\n                lowerIndex++;\n\
    \            } else if (currentChar == (int)'o') {\n                lowerIndex++;\n\
    \            } else if (currentChar == (int)'O') {\n                lowerIndex++;\n",
  "        if (String.IsNullOrEmpty(s)) throw new ArgumentNullException(\"s\");\n\
    \        if (s.Length < 2) return 0;\n        \n        var evenIndices = Enumerable.Range(0,\
    \ s.Length / 2)\n                .Where(i => i % 2 == 0)\n                .ToList();\n\
    \n        return evenIndices.Count(i => Char.IsUpper(s[i], i));", '        return
    s.Select((x, i) => new { value = x, index }).Where(x => i % 2 == 0).Select(x =>
    x.value).Where(x => char.IsUpper(x)).Count();', "        long even = s.Where((x,\
    \ i) => (i & 1) == 0).Count();\n        return even != 0 ? even : 1;", "     \
    \   long count = 0;\n        for (int i = 0; i < s.Length; i++) {\n          \
    \  if (i % 2 == 0) {\n                if (s[i].ToUpper() == s[i])\n          \
    \          count++;\n            }\n        }\n        return count;", "     \
    \   // Write your code here.\n        if (String.IsNullOrEmpty(s))\n         \
    \   return 0;\n        char[] vowels = \"AEIOU\".ToCharArray();\n        return\
    \ s.Select(c => char.IsUpper(c) && vowels.Contains(c) ? 1 : 0).Sum();", "    \
    \    string vowels = \"aeiouAEIOU\";\n        long ret = 0;\n        for(var i\
    \ = 0; i < s.Length; i++) {\n            if(vowels.IndexOf(s[i]) != -1) ret +=\
    \ s[i] == s[s[i]].ToUpper() ? 1 : 0;\n        }\n        return ret;", "     \
    \   long count = 0;\n        // Go over even indices.\n        for (int i = 0;\
    \ i < s.Length; i += 2) {\n            // If current char is uppercase.\n    \
    \        if (IsUpper(s[i])) {\n                // Add 1.\n                count++;\n\
    \            }\n        }\n        return count;"]
stop_tokens:
- "\n    }\n"
