language: cs
name: HumanEval_65_circular_shift
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        // If\
    \ the integer is negative, add 2^32 to it\n        if ((x & 0x80000000L) != 0)\
    \ {\n            x = x + 0x7FFFFFFFL << 32;\n        }\n        // Shift the digits\
    \ by shift to the right\n        var result = new StringBuilder();\n        while\
    \ (shift > 0) {\n            result.Append((x % 10).ToString());\n           \
    \ shift -= 10;\n            x = x / 10;\n        }\n        if (shift > 0 && !result.Any())\
    \ {\n            result.Append((x % 10).ToString());\n        }\n        return\
    \ result.ToString();\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm800iapm.cs(28,34): error CS1061: ''StringBuilder'' does not contain a
    definition for ''Any'' and no accessible extension method ''Any'' accepting a
    first argument of type ''StringBuilder'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1659976840
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var result\
    \ = \"\";\n        var digits = (int)Math.Pow(Math.Log10(x), shift);\n       \
    \ for (int i = 0; i < digits; i++) {\n            result += ((int)Math.Floor(x/Math.Pow(10,\
    \ i)))%10 + \"\";\n        }\n        if (shift>0) {\n            result = result.Reverse();\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgftb5gtb.cs(23,22): error CS0266: Cannot implicitly convert type ''System.Collections.Generic.IEnumerable<char>''
    to ''string''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976840
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        // Make\
    \ sure the shift is positive.\n        shift = shift % x.ToString().Length;\n\
    \        var result = x.ToString();\n        while (shift != 0) {\n          \
    \  result = (int)(Char.GetNumericValue(result[result.Length - shift - 1])) * 10\n\
    \                + (int)(Char.GetNumericValue(result[result.Length - shift]));\n\
    \            shift -= 1;\n        }\n        return new string(result.Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxrm27tzg.cs(21,56): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpxrm27tzg.cs(22,53): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976840
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ > long.MaxValue) {\n            return x.ToString().Select(c => (char) ((int)\
    \ c)).Reverse().ToArray();\n        } else {\n            int digits = (int)Math.Ceiling(Math.Log(shift,\
    \ 2));\n            char[] strDigits = x.ToString().ToCharArray();\n         \
    \   int digitsShifted = (int) (digits - shift);\n            char[] result = new\
    \ char[strDigits.Length + digitsShifted];\n            int index = 0;\n      \
    \      for (int i = strDigits.Length - 1; i >= 0; --i) {\n                result[index++]\
    \ = strDigits[i];\n                for (int j = 0; j < digitsShifted; ++j) {\n\
    \                    int nextDigit = (i + j) % (strDigits.Length);\n         \
    \           result[index++] = strDigits[nextDigit];\n                }\n     \
    \       }\n            return new string(result);\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsght502g.cs(18,20): error CS0029: Cannot implicitly convert type ''char[]''
    to ''string''

    '
  timestamp: 1659976840
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ result = \"\";\n        if (shift == 0) {\n            result = x.ToString();\n\
    \            return result;\n        }\n        int bitsPerLong = (long)Math.Pow(10,\
    \ shift.ToString().Length);\n        long bitsPerLongLong = (long) Math.Pow(10,\
    \ shift.ToString().Length * 2);\n        long currentValue = 0;\n        int digitCount\
    \ = 0;\n        while (true) {\n            long currentBits = currentValue %\
    \ bitsPerLong;\n            currentValue = (currentValue / bitsPerLong) | 0;\n\
    \            int digit = currentBits % bitsPerLong;\n            if (digit < bitsPerLongLong)\
    \ {\n                currentValue /= bitsPerLongLong;\n                currentBits\
    \ /= bitsPerLongLong;\n                currentBits += digit;\n               \
    \ currentValue = currentBits * bitsPerLongLong;\n            } else {\n      \
    \          currentBits += digit;\n            }\n            result += digit.ToString();\n\
    \            digitCount++;\n            if (digitCount >= shift)\n           \
    \     break;\n        }\n        result = result.reverse();\n        if (shift\
    \ == shift.ToString().Length)\n            return result;\n        else\n    \
    \        return result + CircularShift(x, shift - shift.ToString().Length).reverse();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsioy7bzn.cs(22,27): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpsioy7bzn.cs(29,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpsioy7bzn.cs(43,25): error CS1061: ''string'' does not contain a definition
    for ''reverse'' and no accessible extension method ''reverse'' accepting a first
    argument of type ''string'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpsioy7bzn.cs(47,79): error CS1061: ''string'' does not contain a definition
    for ''reverse'' and no accessible extension method ''reverse'' accepting a first
    argument of type ''string'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659976840
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long\
    \ digits = (int)Math.Ceiling(Math.Log10(x) + 1);\n        int digits2 = (int)Math.Ceiling(Math.Log10(shift.ToString())\
    \ + 1);\n        string result = \"\";\n\n        long remaining = x;\n      \
    \  for (int j = 0; j < digits2; j++)\n        {\n            // Shift the digits\
    \ right by shift.\n            long result = remaining % 10;\n            remaining\
    \ = remaining / 10;\n            if (j == digits2-1)\n            {\n        \
    \        result = result + \"0\";\n            }\n            result = result\
    \ + shift.ToString();\n            string strResult = string.Empty;\n        \
    \    for (int i = 0; i < digits; i++)\n            {\n                strResult\
    \ = strResult + result.ToString();\n            }\n            long sum = 0;\n\
    \            for (int i = digits.Length - digits2.Length; i >= 0; i--)\n     \
    \       {\n                sum = sum * 10 + long.Parse(strResult.Substring(i,\
    \ digits2.Length));\n            }\n            result = sum;\n        }\n\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbhq8zdxv.cs(18,52): error CS1503: Argument 1: cannot convert from ''string''
    to ''double''

    /tmp/tmpbhq8zdxv.cs(25,18): error CS0136: A local or parameter named ''result''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpbhq8zdxv.cs(29,26): error CS0029: Cannot implicitly convert type ''string''
    to ''long''

    /tmp/tmpbhq8zdxv.cs(31,22): error CS0029: Cannot implicitly convert type ''string''
    to ''long''

    /tmp/tmpbhq8zdxv.cs(38,33): error CS1061: ''long'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpbhq8zdxv.cs(38,50): error CS1061: ''int'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''int'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpbhq8zdxv.cs(40,76): error CS1061: ''int'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''int'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659976840
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ > Math.Ceiling((double)Math.Log10(x))) {\n            throw new ArgumentException(\"\
    Invalid shift: \" + shift);\n        }\n        var sb = new StringBuilder();\n\
    \        while ((x > 0L) && (shift > 0L)) {\n            var digit = x % 10;\n\
    \            x /= 10;\n            sb[sb.Length - 1] = digit.ToString();\n   \
    \         shift -= 1;\n        }\n        sb.Append(x);\n        while ((shift\
    \ > 0L)) {\n            sb[sb.Length - shift] = sb[sb.Length - shift - 1].ToString();\n\
    \            shift -= 1;\n        }\n        return sb.ToString();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcgcr30xg.cs(24,33): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpcgcr30xg.cs(29,16): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpcgcr30xg.cs(29,40): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976840
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        // The digits of the number in reverse.\n\
    \        // We could also use:\n        //long[] digits = x.ToString().OrderByDescending(n\
    \ => n).ToArray();\n        long[] digits = x.ToString().Reverse().ToArray();\n\
    \n        for (int i = 0; i < shift; i++)\n            sb.Append(digits[i]);\n\
    \n        // Add the rest of the digits.\n        Array.Reverse(digits, shift,\
    \ digits.Length - shift);\n\n        sb.Append(digits);\n        return sb.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplb3ydeyq.cs(21,25): error CS0029: Cannot implicitly convert type ''char[]''
    to ''long[]''

    /tmp/tmplb3ydeyq.cs(27,31): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmplb3ydeyq.cs(27,38): error CS1503: Argument 3: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976840
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        long remainder = 0;\n\n        do {\n   \
    \         long digit = (x % 10L);\n            x = x >> 1;\n            remainder\
    \ = (remainder * 10) + digit;\n            sb.Append(digit % 10);\n        } while\
    \ (x != 0);\n        if (shift > remainder) {\n            shift = remainder;\n\
    \        }\n        foreach (int c in sb.ToString().Reverse().ToString().ToCharArray())\
    \ {\n            long remainder = (((long) c) - shift);\n            Console.WriteLine((remainder\
    \ * 10));\n        }\n        return sb.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdj0cfixz.cs(30,18): error CS0136: A local or parameter named ''remainder''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659976840
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ str = Convert.ToString(x, CultureInfo.InvariantCulture);\n        StringBuilder\
    \ sb = new StringBuilder();\n        long startIndex = 0;\n        int shiftIndex\
    \ = 0;\n        while (shiftIndex < str.Length) {\n            if (shiftIndex\
    \ >= shift) {\n                sb.Append(str, startIndex, shiftIndex - shift);\n\
    \                startIndex = shiftIndex + shift;\n                while (shiftIndex\
    \ < str.Length) {\n                    sb.Insert(0, str[shiftIndex++]);\n    \
    \            }\n            } else {\n                sb.Append(str[shiftIndex++]);\n\
    \            }\n        }\n        return sb.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm4bvivfo.cs(17,42): error CS0103: The name ''CultureInfo'' does not exist
    in the current context

    /tmp/tmpm4bvivfo.cs(23,27): error CS1503: Argument 1: cannot convert from ''string''
    to ''char[]''

    /tmp/tmpm4bvivfo.cs(23,32): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpm4bvivfo.cs(23,44): error CS1503: Argument 3: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976840
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long\
    \ result = 0;\n        string str = \"\";\n\n        while (shift > 0) {\n   \
    \         result += x % 10;\n            x /= 10;\n            shift -= 1;\n \
    \       }\n\n        while (x > 0) {\n            result += x % 10;\n        \
    \    x /= 10;\n            shift += 1;\n        }\n\n        result = 10 * result\
    \ + result;\n\n        while (shift > 1) {\n            result /= 10;\n      \
    \      shift -= 1;\n        }\n\n        result = 10 * result + result;\n\n  \
    \      while ((x % 10) == 0) {\n            x /= 10;\n        }\n\n        string\
    \ str = \"\";\n        while (x != 0) {\n            str += (x % 10).ToString();\n\
    \            x /= 10;\n        }\n\n        str = str.Reverse().ToString();\n\
    \        return str + result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8o9la_an.cs(45,16): error CS0128: A local variable or function named ''str''
    is already defined in this scope

    /tmp/tmp8o9la_an.cs(45,16): warning CS0219: The variable ''str'' is assigned but
    its value is never used

    '
  timestamp: 1659976840
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ > Math.Ceiling(Math.Log10(x))) {\n            throw new ArgumentOutOfRangeException(\"\
    shift\", \"Shift must be <= \" + Math.Ceiling(Math.Log10(x)));\n        }\n  \
    \      string result = \"\";\n        while ((x != 0L) && (shift > 0L)) {\n  \
    \          x /= 10;\n            shift -= 1;\n        }\n        if (shift !=\
    \ 0L) {\n            for (long i = shift; i > 0; i--) {\n                result\
    \ = (x % 10) + result;\n                x /= 10;\n            }\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbc9a0f1b14c44ce91f53963847e9b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbc9a0f1b14c44ce91f53963847e9b84>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Shift must be <= 2\nParameter name: shift\n\
    \  at Problem.CircularShift (System.Int64 x, System.Int64 shift) [0x00039] in\
    \ <dbc9a0f1b14c44ce91f53963847e9b84>:0 \n  at Problem.Main (System.String[] args)\
    \ [0x00035] in <dbc9a0f1b14c44ce91f53963847e9b84>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: Sys"
  stdout: ''
  timestamp: 1659976840
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long\
    \ digit = 0;\n        string result = string.Empty;\n\n        digit = x % 10;\n\
    \        x /= 10;\n        result += digit;\n\n        do {\n            digit\
    \ = x % 10;\n            x /= 10;\n            result += (shift == 0 ? \"\" :\
    \ digit);\n            shift -= 1;\n        } while ((shift > 0) && x != 0);\n\
    \n        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5aeh3m0n.cs(27,24): error CS0173: Type of conditional expression cannot
    be determined because there is no implicit conversion between ''string'' and ''long''

    '
  timestamp: 1659976840
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ == 0) return \"\";\n        string result = \"\";\n        long digit = 0;\n\
    \        long temp = 0;\n        while (x-- > 0) {\n            digit = x % 10;\n\
    \            temp = (x << shift) | (digit & 1);\n            x >>= 1;\n      \
    \      digit &= 1;\n            result += Convert.ToString(temp);\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc2en50_s.cs(23,21): error CS0019: Operator ''<<'' cannot be applied to
    operands of type ''long'' and ''long''

    '
  timestamp: 1659976840
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ digits = x.ToString();\n        string result = \"\";\n        for (int i =\
    \ 0; i < digits.length; ++i) {\n            if (shift > digits.Length - 1) return\
    \ digits;\n            if (digits[i] == '1') continue;\n            result +=\
    \ (digits[i] - '0');\n        }\n        if (result.Length == 0) return \"0\"\
    ;\n        int remainder = digits.Length - result.Length;\n        for (int i\
    \ = 0; i < remainder; ++i) result += digits[digits.Length - 1 - i];\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3ok8p041.cs(19,36): error CS1061: ''string'' does not contain a definition
    for ''length'' and no accessible extension method ''length'' accepting a first
    argument of type ''string'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659976840
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long\
    \ xDigits[] = { 0 };\n        string xStr = \"\";\n\n        while (shift > 0)\
    \ {\n            xDigits[xDigits.Length - 1] += xDigits[xDigits.Length - 1] %\
    \ 10;\n            xDigits[xDigits.Length - 2] += xDigits[xDigits.Length - 2]\
    \ % 10;\n            xDigits[xDigits.Length - 3] += xDigits[xDigits.Length - 3]\
    \ % 10;\n            xDigits[xDigits.Length - 4] += xDigits[xDigits.Length - 4]\
    \ % 10;\n            xDigits[xDigits.Length - 5] += xDigits[xDigits.Length - 5]\
    \ % 10;\n            xDigits[xDigits.Length - 6] += xDigits[xDigits.Length - 6]\
    \ % 10;\n            xDigits[xDigits.Length - 7] += xDigits[xDigits.Length - 7]\
    \ % 10;\n            xDigits[xDigits.Length - 8] += xDigits[xDigits.Length - 8]\
    \ % 10;\n            xDigits[xDigits.Length - 9] += xDigits[xDigits.Length - 9]\
    \ % 10;\n\n            shift--;\n        }\n\n        while (shift < xDigits.Length)\
    \ {\n            xDigits[xDigits.Length - 1] -= xDigits[xDigits.Length - 1] %\
    \ 10;\n            xDigits[xDigits.Length - 2] -= xDigits[xDigits.Length - 2]\
    \ % 10;\n            xDigits[xDigits.Length - 3] -= xDigits[xDigits.Length - 3]\
    \ % 10;\n            xDigits[xDigits.Length - 4] -= xDigits[xDigits.Length - 4]\
    \ % 10;\n            xDigits[xDigits.Length - 5] -= xDigits[xDigits.Length - 5]\
    \ % 10;\n            xDigits[xDigits.Length - 6] -= xDigits[xDigits.Length - 6]\
    \ % 10;\n            xDigits[xDigits.Length - 7] -= xDigits[xDigits.Length - 7]\
    \ % 10;\n            xDigits[xDigits.Length - 8] -= xDigits[xDigits.Length - 8]\
    \ % 10;\n            xDigits[xDigits.Length - 9] -= xDigits[xDigits.Length - 9]\
    \ % 10;\n\n            shift++;\n        }\n\n        for (int i = xDigits.Length\
    \ - 1; i >= 0; i--) {\n            xStr += Convert.ToChar(xDigits[i]);\n     \
    \   }\n\n        return xStr;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq38fft7v.cs(17,21): error CS0650: Bad array declarator: To declare a managed
    array the rank specifier precedes the variable''s identifier. To declare a fixed
    size buffer field, use the fixed keyword before the field type.

    '
  timestamp: 1659976839
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        Debug.Assert(shift\
    \ > 0);\n\n        long xdigit = 0;\n        string result = string.Empty;\n\n\
    \        // Shift x right by shift digits and append the digits as a string\n\
    \        while (shift > 0) {\n            xdigit = x % 10;\n            result\
    \ = (xdigit < 10) ? string.Concat(xdigit, result) : $\"{xdigit}{result}\";\n \
    \           x /= 10;\n            shift--;\n        }\n\n        if (shift < 0)\
    \ {\n            int s = (int)Math.Abs(shift);\n            int k = shift / k;\n\
    \            shift = shift % k;\n            string temp;\n            for (int\
    \ i = 1; i <= k; i++) {\n                temp = result.Substring(s - k + i, k);\n\
    \                result += temp.Substring(0, 1) + temp.Substring(k - 1, 1);\n\
    \            }\n        }\n\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpht9a6b49.cs(32,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpht9a6b49.cs(32,29): error CS0165: Use of unassigned local variable ''k''

    '
  timestamp: 1659976840
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var digits\
    \ = BitConverter.GetBytes(x);\n        var resultDigits = digits.Take(shift).Concat(digits.Skip(shift));\n\
    \        return BitConverter.ToString(resultDigits);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxgzxv5zx.cs(18,40): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpxgzxv5zx.cs(18,66): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976840
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ result = \"\";\n\n        for (int i = 0; i < shift; i++) {\n            //\
    \ shift left by one digit\n            long digit = x % 10;\n            long\
    \ digitShifted = digit << 1;\n            long digitShiftedReverse = digitShifted\
    \ >> 1;\n            result = (char) (digitShiftedReverse + result);\n\n     \
    \       // shift right by one digit\n            x = x >> 1;\n        }\n\n  \
    \      // shift right by shift digit\n        long digit = x % 10;\n        long\
    \ digitShifted = digit << shift;\n        long digitShiftedReverse = digitShifted\
    \ >> shift;\n        result = (char) (digitShiftedReverse + result);\n       \
    \ \n        // reverse string\n        result = new string(result.Reverse().ToArray());\n\
    \n        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvm2kivnj.cs(21,18): error CS0136: A local or parameter named ''digit''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpvm2kivnj.cs(22,18): error CS0136: A local or parameter named ''digitShifted''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpvm2kivnj.cs(23,18): error CS0136: A local or parameter named ''digitShiftedReverse''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpvm2kivnj.cs(24,22): error CS0030: Cannot convert type ''string'' to ''char''

    /tmp/tmpvm2kivnj.cs(32,29): error CS0019: Operator ''<<'' cannot be applied to
    operands of type ''long'' and ''long''

    /tmp/tmpvm2kivnj.cs(33,36): error CS0019: Operator ''>>'' cannot be applied to
    operands of type ''long'' and ''long''

    /tmp/tmpvm2kivnj.cs(34,18): error CS0030: Cannot convert type ''string'' to ''char''

    '
  timestamp: 1659976840
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ < 0 || shift > Convert.ToInt64(Math.Sqrt(x)))\n            throw new ArgumentException(\"\
    Invalid shift\");\n        var digits = Convert.ToString(x, 10);\n        if (digits.Length\
    \ == 1)\n            return digits;\n        long a = digits != null ? Convert.ToInt64(digits,\
    \ 10) : x;\n        long digit = 0;\n        long product = a * Math.Pow(shift,\
    \ shift);\n        if (shift == 0)\n            return digits;\n        do {\n\
    \            product /= shift;\n            digit += shift % 2 == 0 ? Math.Abs(product)\
    \ : -Math.Abs(product);\n            shift = shift / 2;\n        } while (shift\
    \ != 0);\n        digit = digit.ToString().PadLeft(digits.Length + shift, 0);\n\
    \        return digits[digits.Length - shift] + digit;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0vmx4l_w.cs(24,24): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp0vmx4l_w.cs(32,42): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp0vmx4l_w.cs(32,65): error CS1503: Argument 2: cannot convert from ''int''
    to ''char''

    /tmp/tmp0vmx4l_w.cs(33,23): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976840
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        long temp = x;\n        while (shift > 0)\
    \ {\n            int digit = temp % 10;\n            temp = temp / 10;\n     \
    \       if (digit == 0) break;\n            char c = Convert.ToChar(digit);\n\
    \            if (shift > 1) {\n                temp = (temp * 10 + c) % 100;\n\
    \            } else {\n                temp = temp >> 1;\n                sb.Append(c);\n\
    \            }\n            shift--;\n        }\n        if (temp != 0) sb.Append(Convert.ToChar(temp));\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp45tuxd4a.cs(20,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976840
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ == 0)\n            return \"0\";\n        int sz = x.ToString().Length;\n  \
    \      if (shift > sz)\n            shift = sz;\n        string str = x.ToString();\n\
    \        for (int i = 0; i < sz; i++) {\n            int digit = int.Parse(str[i]);\n\
    \            if (shift > sz) {\n                int shift = sz - i;\n        \
    \        for (int j = 0; j < shift; j++)\n                    str = str.Insert(i,\
    \ str[i]);\n                sz++;\n            }\n            else\n         \
    \       str += str.Insert(i, (digit%10 + shift)%10).ToString();\n        }\n \
    \       return str;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph_a5zv5_.cs(24,35): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmph_a5zv5_.cs(26,21): error CS0136: A local or parameter named ''shift''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmph_a5zv5_.cs(28,41): error CS1503: Argument 2: cannot convert from ''char''
    to ''string''

    /tmp/tmph_a5zv5_.cs(32,38): error CS1503: Argument 2: cannot convert from ''long''
    to ''string''

    '
  timestamp: 1659976840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var result\
    \ = new StringBuilder();\n        var numDigits = (int)Math.Pow(10, shift.ToString().Length);\n\
    \        var mod = x % numDigits;\n        result.Append(x / (long)numDigits);\
    \ \n        result.Append(mod % numDigits);\n        return result.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aaecfd41118e446e9b557c056fdbe008>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aaecfd41118e446e9b557c056fdbe008>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976840
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long\
    \ shift = shift % x.ToString().Length;\n        // If shift >= length of number,\
    \ just return its digits.\n        if (shift >= x.ToString().Length)\n       \
    \     return x.ToString();\n        // Get first digit of x\n        string first\
    \ = x.ToString()[0];\n        // If shift > length of number, return digits reversed.\n\
    \        if (shift > x.ToString().Length)\n            return first + CircularShift(long.Parse(x.ToString().Substring(1)),\
    \ shift - x.ToString().Length).ToString();\n        // If shift < length of number,\
    \ return digits shifted right.\n        return first + CircularShift(long.Parse(x.ToString().Substring(1)),\
    \ shift).ToString();\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkc1lhfr3.cs(17,14): error CS0136: A local or parameter named ''shift''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpkc1lhfr3.cs(22,24): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpkc1lhfr3.cs(17,22): error CS0165: Use of unassigned local variable ''shift''

    '
  timestamp: 1659976840
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = \"\";\n        if (shift > 0) {\n            long digits = Math.Pow(10,\
    \ shift.ToString().Length);\n            int i = shift;\n            while (x\
    \ != 0) {\n                long temp = (x % digits);\n                if (temp\
    \ < 0) {\n                    temp = temp + digits;\n                }\n     \
    \           s = temp + s;\n                x = x / digits;\n                i\
    \ -= shift;\n            }\n        }\n        return s;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzz9pj9j6.cs(19,27): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpzz9pj9j6.cs(20,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpzz9pj9j6.cs(28,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976840
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        const\
    \ string digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        var digitsList\
    \ = digits.ToCharArray().OrderByDescending((c) => c.Value);\n        var digitsListReversed\
    \ = digits.ToCharArray().OrderByDescending((c) => c.Value).ToList();\n       \
    \ var result = new StringBuilder();\n        while (shift > 0) {\n           \
    \ if (shift > digits.Length)\n                shift = digits.Length;\n       \
    \     var digit = digitsListReversed[x % digits.Length];\n            var newDigit\
    \ = digitsListReversed[digit % digits.Length];\n            result.Append(newDigit);\n\
    \            x = x >> shift;\n            shift = shift - 1;\n        }\n    \
    \    return result.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx0jbxtdk.cs(18,74): error CS1061: ''char'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''char'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpx0jbxtdk.cs(19,82): error CS1061: ''char'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''char'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpx0jbxtdk.cs(27,17): error CS0019: Operator ''>>'' cannot be applied to
    operands of type ''long'' and ''long''

    '
  timestamp: 1659976840
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ result = \"\";\n        while (shift >= 0) {\n            if ((shift & 1) ==\
    \ 1) {\n                result += (x / 10).ToString();\n                x %= 10;\n\
    \            }\n            shift >>= 1;\n        }\n        if ((shift & 1) ==\
    \ 1) {\n            result += (x / 10).ToString();\n        }\n        if (result.Length\
    \ == 0) {\n            result = String.Empty;\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659976845
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        // Use\
    \ BigInteger instead of long to avoid overflow issues.\n        BigInteger bigInteger\
    \ = new BigInteger(x); // Convert to BigInteger\n        BigInteger bigIntegerShiftRight\
    \ = bigInteger.ShiftRight(shift); // Shift right\n        BigInteger bigIntegerReverse\
    \ = bigIntegerShiftRight.Reverse(); // Reverse and return\n        return bigIntegerReverse.ToString();\
    \ // Convert to string\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6pof0j0a.cs(19,54): error CS1061: ''BigInteger'' does not contain a definition
    for ''ShiftRight'' and no accessible extension method ''ShiftRight'' accepting
    a first argument of type ''BigInteger'' could be found (are you missing a using
    directive or an assembly reference?)

    /tmp/tmp6pof0j0a.cs(20,61): error CS1061: ''BigInteger'' does not contain a definition
    for ''Reverse'' and no accessible extension method ''Reverse'' accepting a first
    argument of type ''BigInteger'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659976840
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (x > 0) {\n            long digit =\
    \ x % 10;\n            x += digit * shift;\n            sb.Append(digit);\n  \
    \          if (shift > 1) {\n                shift -= 1;\n                x /=\
    \ 10;\n            }\n        }\n        return sb.ToString();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659976845
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = \"\";\n        List<long> digits = new List<long>(10);\n        while (shift\
    \ > 0)\n        {\n            digits.Add(x % 10);\n            x = x / 10;\n\
    \            shift = shift - 1;\n        }\n        foreach (long digits in digits)\n\
    \        {\n            s += digits.ToString();\n        }\n        s = s.Reverse().ToArray();\n\
    \        foreach (char c in s)\n        {\n            int digit = c - '0';\n\
    \            if (digit > 9)\n            {\n                digit = digit % 10;\n\
    \            }\n            else if (digit < 0)\n            {\n             \
    \   digit = digit * -1;\n            }\n            int shiftDigit = shift % 10;\n\
    \            if (shiftDigit > 9)\n            {\n                shiftDigit =\
    \ shiftDigit % 10;\n            }\n            else if (shiftDigit < 0)\n    \
    \        {\n                shiftDigit = shiftDigit * -1;\n            }\n   \
    \         if (digit == shiftDigit)\n            {\n                s += c.ToString();\n\
    \            }\n        }\n        return s.Reverse().ToArray();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptiltx2ya.cs(25,23): error CS0136: A local or parameter named ''digits''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmptiltx2ya.cs(29,13): error CS0029: Cannot implicitly convert type ''char[]''
    to ''string''

    /tmp/tmptiltx2ya.cs(41,30): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmptiltx2ya.cs(55,16): error CS0029: Cannot implicitly convert type ''char[]''
    to ''string''

    '
  timestamp: 1659976840
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = \"\";\n        while (x > 0) {\n            s += char((x % 10) + shift);\n\
    \            x /= 10;\n        }\n        string reversed = \"\";\n        for\
    \ (int i = s.Length - 1; i >= 0; i--)\n            reversed += s[i];\n       \
    \ return reversed;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl5e1xnp8.cs(19,18): error CS1525: Invalid expression term ''char''

    '
  timestamp: 1659976840
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ result = Convert.ToString(x >> shift);\n        long remainder = x & long.Parse(Math.Pow(10,\
    \ shift.ToString().Length));\n        if (remainder != 0) {\n            result\
    \ += Convert.ToString(remainder);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1ptru98k.cs(17,42): error CS0019: Operator ''>>'' cannot be applied to
    operands of type ''long'' and ''long''

    /tmp/tmp1ptru98k.cs(18,41): error CS1503: Argument 1: cannot convert from ''double''
    to ''string''

    '
  timestamp: 1659976840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ ret = \"\";\n        long xs = 1;\n        bool overflow = false;\n        for\
    \ (int i = 0; i < shift.ToString().Length; i++) {\n            string digits =\
    \ shift.ToString().Substring(i, 1);\n            long digit = Convert.ToInt64(digits);\n\
    \            xs = (x / (long)Math.Pow(10, (int)digit)) % 10;\n            overflow\
    \ = ((xs % 10) != 0) || ((xs % Math.Pow(10, (int)digit)) != 0);\n            ret\
    \ += xs.ToString();\n        }\n        return (ret + (!overflow ? \"\" : new\
    \ string('0', shift.ToString().Length)));\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1f7610995a2044b8878a7075bba7c322>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1f7610995a2044b8878a7075bba7c322>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976841
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var digits\
    \ = Convert.ToString(x, 10).Select(digit => Convert.ToInt64(digit));\n       \
    \ var result = new List<string>();\n        var shift = Convert.ToInt64(shift);\n\
    \        for(int i = shift, j = 0; j < digits.Count; i += shift, j++) {\n    \
    \        string str = digits.Substring(i, j);\n            var num = new string(str.Reverse().ToArray());\n\
    \            result.Add(num);\n        }\n        return result.Aggregate((x,\
    \ y) => x + y);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaj2_vx8h.cs(19,13): error CS0136: A local or parameter named ''shift''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpaj2_vx8h.cs(19,37): error CS0841: Cannot use local variable ''shift''
    before it is declared

    /tmp/tmpaj2_vx8h.cs(20,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpaj2_vx8h.cs(20,35): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''int'' and ''method group''

    /tmp/tmpaj2_vx8h.cs(20,53): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpaj2_vx8h.cs(21,33): error CS1061: ''IEnumerable<long>'' does not contain
    a definition for ''Substring'' and no accessible extension method ''Substring''
    accepting a first argument of type ''IEnumerable<long>'' could be found (are you
    missing a using directive or an assembly reference?)

    /tmp/tmpaj2_vx8h.cs(19,37): error CS0165: Use of unassigned local variable ''shift''

    '
  timestamp: 1659976840
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long\
    \ remainder = x % 10L;\n        string result = remainder;\n        if (shift\
    \ > result.Length)\n            return result.Reverse().ToString();\n        shift\
    \ %= result.Length;\n        while (shift != 0)\n        {\n            string\
    \ x = result.Substring(0, shift--);\n            result = (x + result).Substring(0,\
    \ result.Length + shift);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplf8sqcxb.cs(18,25): error CS0029: Cannot implicitly convert type ''long''
    to ''string''

    /tmp/tmplf8sqcxb.cs(24,20): error CS0136: A local or parameter named ''x'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmplf8sqcxb.cs(24,44): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmplf8sqcxb.cs(25,48): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976840
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long\
    \ temp = x;\n        long result = 0;\n        while (shift > 0) {\n         \
    \   temp *= 10;\n            result += (long)temp % 10;\n            temp /= 10;\n\
    \            shift--;\n        }\n        if (temp < 0) {\n            result\
    \ -= temp;\n        }\n        result = Math.Abs(result);\n        string result\
    \ = string.Format(\"{0}{1}{2}\",\n            (result / 10).ToString(),\n    \
    \        (result % 10).ToString(),\n            (result % 10).ToString());\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz_7q251q.cs(29,16): error CS0128: A local variable or function named ''result''
    is already defined in this scope

    /tmp/tmpz_7q251q.cs(33,16): error CS0029: Cannot implicitly convert type ''long''
    to ''string''

    '
  timestamp: 1659976840
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ == 0) {\n            return \"\";\n        }\n        int n = shift % x.ToString().Length;\n\
    \        StringBuilder sb = new StringBuilder(x.ToString().Length * 2);\n    \
    \    while (x-- > 0) {\n            sb.Insert(n, (char)(x % 10));\n        }\n\
    \        return sb.ToString().Reverse();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz06ggjsa.cs(20,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpz06ggjsa.cs(25,16): error CS0266: Cannot implicitly convert type ''System.Collections.Generic.IEnumerable<char>''
    to ''string''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976840
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long\
    \ ten = long.Parse(\"10\");\n        long one = long.Parse(\"1\");\n\n       \
    \ if (shift > x.ToString().Length) {\n            var result = new List<int>();\n\
    \            for (int i = x.ToString().Length - 1; i >= 0; i--) {\n          \
    \      result.Add(x.ToString()[i]);\n            }\n\n            return result.ToArray().Reverse().Aggregate((x,\
    \ y) => x + y);\n        }\n\n        long shift = shift % x.ToString().Length;\n\
    \n        if (shift == 0) {\n            return x.ToString();\n        }\n\n \
    \       var result = new StringBuilder(x.ToString());\n\n        while (shift\
    \ > 0) {\n            var m = shift % x.ToString().Length;\n\n            shift\
    \ = shift / x.ToString().Length;\n\n            result.Insert(m, string.Concat(x.ToString().Substring(m,\
    \ x.ToString().Length - m)));\n        }\n\n        return result.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsxy521am.cs(20,13): error CS0841: Cannot use local variable ''shift''
    before it is declared

    /tmp/tmpsxy521am.cs(21,17): error CS0136: A local or parameter named ''result''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpsxy521am.cs(26,20): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    /tmp/tmpsxy521am.cs(29,14): error CS0136: A local or parameter named ''shift''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpsxy521am.cs(42,67): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpsxy521am.cs(42,70): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976840
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (x\
    \ <= 0) {\n            throw new ArgumentOutOfRangeException(\"x\");\n       \
    \ }\n        if (shift > long.MaxValue / x) {\n            return x.ToString();\n\
    \        }\n        var result = 0;\n        var digits = 1;\n        var shift\
    \ = long.MaxValue - shift;\n        do {\n            digits = shift % x;\n  \
    \          shift = shift / x;\n            result += digits;\n        } while\
    \ (digits != 0 && shift != 0);\n        if (shift == 0) {\n            result\
    \ += 1;\n        }\n        return result.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_em8gq2i.cs(20,13): error CS0841: Cannot use local variable ''shift''
    before it is declared

    /tmp/tmp_em8gq2i.cs(25,13): error CS0136: A local or parameter named ''shift''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp_em8gq2i.cs(25,37): error CS0841: Cannot use local variable ''shift''
    before it is declared

    '
  timestamp: 1659976840
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        // Store\
    \ the result in a local variable\n        string result = \"\";\n        // Shift\
    \ each digit to the right by the shift amount\n        for (int i = shift; i <\
    \ 64; i += shift) {\n            // Convert the digit to ASCII\n            int\
    \ digit = (int)(x % 10);\n            // Append the ASCII value to the result\n\
    \            result += (char)(digit);\n            // Remove the shifted digit\
    \ from the integer\n            x = x / 10;\n        }\n        // Return the\
    \ result\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfi5d880l.cs(20,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpfi5d880l.cs(20,37): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976840
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = \"\";\n        while (shift > 0) {\n            s = (((x % 10 + 10) % 10\
    \ + x) % 10 + s) % 10;\n            x /= 10;\n            shift -= 1;\n      \
    \  }\n        while (shift < 0) {\n            s = (((x % 10 + 10) % 10 + x) %\
    \ 10 + s) % 10;\n            x /= 10;\n            shift += 1;\n        }\n  \
    \      if (shift != 0) {\n            s = (((x % 10 + 10) % 10 + x) % 10 + s)\
    \ % 10;\n        }\n        return s;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptktrue93.cs(19,17): error CS0019: Operator ''%'' cannot be applied to
    operands of type ''string'' and ''int''

    /tmp/tmptktrue93.cs(24,17): error CS0019: Operator ''%'' cannot be applied to
    operands of type ''string'' and ''int''

    /tmp/tmptktrue93.cs(29,17): error CS0019: Operator ''%'' cannot be applied to
    operands of type ''string'' and ''int''

    '
  timestamp: 1659976840
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var result\
    \ = new StringBuilder();\n        while (shift > 0) {\n            var digit =\
    \ x % 10;\n            result.Append(digit);\n            x /= 10;\n         \
    \   shift -= 1;\n        }\n        if (shift > 0) result.Reverse();\n       \
    \ if (result.Length == 0) result = \"\";\n        return result.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf0ifxxaq.cs(24,31): error CS1061: ''StringBuilder'' does not contain a
    definition for ''Reverse'' and no accessible extension method ''Reverse'' accepting
    a first argument of type ''StringBuilder'' could be found (are you missing a using
    directive or an assembly reference?)

    /tmp/tmpf0ifxxaq.cs(25,42): error CS0029: Cannot implicitly convert type ''string''
    to ''System.Text.StringBuilder''

    '
  timestamp: 1659976840
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long\
    \ tensShift = 1L;\n        while (shift > tensShift) {\n            tensShift\
    \ *= 10L;\n            shift -= tensShift;\n        }\n        // shift left until\
    \ it is less than number of digits\n        long digitsLeft = shift;\n       \
    \ while (shift > digitsLeft) {\n            x <<= digitsLeft;\n            digitsLeft\
    \ -= shift;\n            shift = 0;\n        }\n        // now shift left until\
    \ it is < number of digits\n        while (shift > 0) {\n            x <<= shift;\n\
    \            shift -= tensShift;\n            tensShift *= 10L;\n        }\n \
    \       long temp = 0;\n        long result = x;\n        while (result != 0)\
    \ {\n            temp = result % 10;\n            result /= 10;\n            result\
    \ += temp;\n        }\n        // return digits reversed\n        return (new\
    \ string((int)result, 1)).Reverse();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5d0oxubh.cs(25,13): error CS0019: Operator ''<<='' cannot be applied to
    operands of type ''long'' and ''long''

    /tmp/tmp5d0oxubh.cs(31,13): error CS0019: Operator ''<<='' cannot be applied to
    operands of type ''long'' and ''long''

    /tmp/tmp5d0oxubh.cs(43,28): error CS1503: Argument 1: cannot convert from ''int''
    to ''char''

    '
  timestamp: 1659976840
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long[]\
    \ digits = LongToDigits(x);\n        int numDigits = digits.Length;\n\n      \
    \  // Make sure shift is valid\n        if (shift < 1 || shift > numDigits) {\n\
    \            throw new ArgumentException(\"shift should be in range [1, \" + numDigits\
    \ + \"]\");\n        }\n\n        long shift = shift % numDigits;\n        string\
    \ result = \"\";\n\n        // Circular shift by shift\n        for (int i = 0;\
    \ i < shift; i++) {\n            result += digits[digits.Length - (i + 1)];\n\
    \        }\n\n        // Circular shift right\n        string digitsReversed =\
    \ \"\";\n        for (int i = 0; i < shift; i++) {\n            digitsReversed\
    \ += digits[numDigits - (i + 1)];\n        }\n\n        // Append the reversed\
    \ digits\n        return result += digitsReversed;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxuiva9ic.cs(17,25): error CS0103: The name ''LongToDigits'' does not exist
    in the current context

    /tmp/tmpxuiva9ic.cs(21,13): error CS0841: Cannot use local variable ''shift''
    before it is declared

    /tmp/tmpxuiva9ic.cs(21,26): error CS0841: Cannot use local variable ''shift''
    before it is declared

    /tmp/tmpxuiva9ic.cs(25,14): error CS0136: A local or parameter named ''shift''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659976840
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var digits\
    \ = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n        var numDigits = digits.Length;\n\
    \        if (shift > numDigits)\n            shift = numDigits;\n        var numShifted\
    \ = (x << shift) | x;\n        var result = numShifted.ToString();\n        var\
    \ reversedResult = result.Reverse().ToArray();\n        var finalResult = new\
    \ StringBuilder();\n        for (var i = 0; i < reversedResult.Length; i++)\n\
    \            finalResult.Append(digits.IndexOf(reversedResult[i]) * Math.Pow(shift,\
    \ numDigits - i - 1));\n        return finalResult.ToString();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdxyxfg_9.cs(21,27): error CS0019: Operator ''<<'' cannot be applied to
    operands of type ''long'' and ''long''

    '
  timestamp: 1659976841
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var digits\
    \ = BitConverter.GetBytes(x);\n        if (shift > digits.Length)\n          \
    \  throw new ArgumentOutOfRangeException();\n        Shift(digits, shift);\n \
    \       return BitConverter.ToString(digits);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpienrkkp1.cs(20,9): error CS0103: The name ''Shift'' does not exist in
    the current context

    '
  timestamp: 1659976841
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        // Assume\
    \ that shift is positive\n        shift = shift % x.ToString().Length;\n     \
    \   if (shift == 0)\n            return x.ToString();\n        string reversed\
    \ = x.ToString().Reverse().ToString();\n        if (reversed.Length < shift)\n\
    \            return reversed;\n        string result = \"\";\n        for (int\
    \ i = shift; i < reversed.Length; i++)\n            result += reversed[i];\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyleb3mlf.cs(25,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976841
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ result = \"\";\n\n        if (shift >= x.ToString().Length)\n            shift\
    \ %= x.ToString().Length;\n\n        for (int i = 0; i < shift; i++)\n       \
    \     result += x.ToString()[(int) x.ToString().Length - (shift - i)];\n\n   \
    \     for (int i = shift; i < x.ToString().Length; i++)\n            result +=\
    \ x.ToString()[(int) x.ToString().Length - (i - shift)];\n\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpapos_0tb.cs(23,36): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpapos_0tb.cs(25,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpapos_0tb.cs(26,36): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976841
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ > Math.Log10(x))\n            return x.ToString();\n        long mod = (long)Math.Log10(x);\n\
    \        long mask = (long)((ulong)-1 >> shift);\n        long r = x >> (mod -\
    \ shift);\n        r = ((r << shift) + r) % mod;\n        return r.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_853g7_a.cs(20,28): error CS0221: Constant value ''-1'' cannot be converted
    to a ''ulong'' (use ''unchecked'' syntax to override)

    /tmp/tmp_853g7_a.cs(20,28): error CS0019: Operator ''>>'' cannot be applied to
    operands of type ''ulong'' and ''long''

    /tmp/tmp_853g7_a.cs(21,18): error CS0019: Operator ''>>'' cannot be applied to
    operands of type ''long'' and ''long''

    /tmp/tmp_853g7_a.cs(22,15): error CS0019: Operator ''<<'' cannot be applied to
    operands of type ''long'' and ''long''

    '
  timestamp: 1659976841
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var str\
    \ = x.ToString();\n        var result = \"\";\n        var shiftRemainder = shift\
    \ % str.Length;\n        if (shiftRemainder == 0) {\n            while (shift\
    \ > 0) {\n                result += str.Substring((str.Length - 1 - shift), 1);\n\
    \                shift -= str.Length - 1 - shift;\n            }\n           \
    \ return result;\n        }\n        while (shift > 0) {\n            var lastDigit\
    \ = str.Substring(str.Length - 1, 1);\n            var nextDigit = str.Substring(0,\
    \ str.Length - 1);\n            var digit = (long)(lastDigit << 1) | (nextDigit\
    \ >> shiftRemainder);\n            result += digit.ToString();\n            shift\
    \ -= str.Length - 1 - shiftRemainder;\n        }\n        return result;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe0w7bb5g.cs(22,42): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpe0w7bb5g.cs(30,32): error CS0019: Operator ''<<'' cannot be applied to
    operands of type ''string'' and ''int''

    /tmp/tmpe0w7bb5g.cs(30,51): error CS0019: Operator ''>>'' cannot be applied to
    operands of type ''string'' and ''long''

    '
  timestamp: 1659976841
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        char[]\
    \ result = new char[((int)Math.Ceiling(Math.Log10(shift)) + 1)];\n        BigInteger\
    \ shift = BigInteger.Pow(10, shift);\n        BigInteger y = BigInteger.Multiply(x,\
    \ shift);\n        BigInteger m = BigInteger.Divide(y, shift);\n        BigInteger\
    \ remainder = BigInteger.Subtract(m, y);\n        foreach (BigInteger r in remainder)\
    \ {\n            result[(int)r.ToString().Length - 1] = (char)r.ToString()[0];\n\
    \        }\n        return string.Join(\"\", result);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4lj204p6.cs(17,64): error CS0841: Cannot use local variable ''shift''
    before it is declared

    /tmp/tmp4lj204p6.cs(18,20): error CS0136: A local or parameter named ''shift''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp4lj204p6.cs(18,47): error CS1503: Argument 2: cannot convert from ''System.Numerics.BigInteger''
    to ''int''

    /tmp/tmp4lj204p6.cs(22,34): error CS1579: foreach statement cannot operate on
    variables of type ''BigInteger'' because ''BigInteger'' does not contain a public
    instance definition for ''GetEnumerator''

    '
  timestamp: 1659976841
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ str = x.ToString();\n        string result = \"\";\n        if (shift > str.Length)\
    \ {\n            shift = str.Length;\n        }\n\n        for (int i = 0; i <\
    \ str.Length; i++) {\n            int temp = str[i];\n            temp = temp\
    \ >> (shift - i);\n            temp &= (long)'9';\n            result += temp;\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppvy7dx95.cs(25,20): error CS0019: Operator ''>>'' cannot be applied to
    operands of type ''int'' and ''long''

    /tmp/tmppvy7dx95.cs(26,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976841
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ result = \"\";\n        int bits = (int)Math.Floor(Math.Log(x.ToString().Length,\
    \ 2));\n        int mask = (1 << bits) - 1;\n        BigInteger bx = new BigInteger(x);\n\
    \        BigInteger bs = BigInteger.Pow(BigInteger.One, shift);\n        while\
    \ (bx.CompareTo(bs) < 0) {\n            result += bx.ToString();\n           \
    \ bx = bx.Add(bs);\n        }\n        if (bx.CompareTo(bs) > 0) {\n         \
    \   while (bits) {\n                result += bx.ToString().Substring(0, 1);\n\
    \                bx = bx.ShiftLeft(1);\n                bits -= 1;\n         \
    \   }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9fa01hl9.cs(21,56): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp9fa01hl9.cs(24,21): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''right'' of ''BigInteger.Add(BigInteger, BigInteger)''

    /tmp/tmp9fa01hl9.cs(27,20): error CS0029: Cannot implicitly convert type ''int''
    to ''bool''

    /tmp/tmp9fa01hl9.cs(29,25): error CS1061: ''BigInteger'' does not contain a definition
    for ''ShiftLeft'' and no accessible extension method ''ShiftLeft'' accepting a
    first argument of type ''BigInteger'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1659976841
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long\
    \ shift = shift % x.ToString().Length;\n        long x0 = x >> shift;\n      \
    \  int digits = Convert.ToInt32(x0.ToString().Length);\n        string result\
    \ = \"\";\n        for (int i = 0; i < digits; i ++) {\n            long xi =\
    \ x0 >> i;\n            if (xi == 0) {\n                result += \"0\";\n   \
    \         } else {\n                long xs = xi << shift;\n                string\
    \ s = xs.ToString();\n                result += s;\n            }\n        }\n\
    \        if (digits == 0)\n            return result;\n        else {\n      \
    \      string reversed = result.Reverse().ToArray().ToString();\n            return\
    \ reversed;\n        }\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj4al6fvh.cs(17,14): error CS0136: A local or parameter named ''shift''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpj4al6fvh.cs(18,19): error CS0019: Operator ''>>'' cannot be applied to
    operands of type ''long'' and ''long''

    /tmp/tmpj4al6fvh.cs(26,27): error CS0019: Operator ''<<'' cannot be applied to
    operands of type ''long'' and ''long''

    /tmp/tmpj4al6fvh.cs(17,22): error CS0165: Use of unassigned local variable ''shift''

    '
  timestamp: 1659976841
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        // Convert\
    \ to a string to make it easier to manipulate.\n        string digits = x.ToString();\n\
    \        // Perform the shift\n        long mask = (1L << shift) - 1;\n      \
    \  long digit = digits & mask;\n        digits = digits | digit;\n        digits\
    \ = digits >> shift;\n        // Convert to a string to return it.\n        return\
    \ digits.ToString();\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3g_oy5k2.cs(20,22): error CS0019: Operator ''<<'' cannot be applied to
    operands of type ''long'' and ''long''

    /tmp/tmp3g_oy5k2.cs(21,22): error CS0019: Operator ''&'' cannot be applied to
    operands of type ''string'' and ''long''

    /tmp/tmp3g_oy5k2.cs(22,18): error CS0019: Operator ''|'' cannot be applied to
    operands of type ''string'' and ''long''

    /tmp/tmp3g_oy5k2.cs(23,18): error CS0019: Operator ''>>'' cannot be applied to
    operands of type ''string'' and ''long''

    '
  timestamp: 1659976841
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = \"\";\n        if (shift == 0) return s.Substring(1);\n        for (long\
    \ i = 0; i < shift; i++) s += (x % 10);\n        x = x / 10;\n        for (long\
    \ i = 0; i < shift; i++) x = (x << 1) + 1;\n        s += x % 10;\n        return\
    \ s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <558c4341285f4a97a492fe02093e0582>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <558c4341285f4a97a492fe02093e0582>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976841
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        int n = s.Length;\n        if (shift > n) {\n   \
    \         return s.Reverse().ToString();\n        }\n        StringBuilder sb\
    \ = new StringBuilder(n);\n        int i = n;\n        while (i > shift) {\n \
    \           sb[--i] = '0' + (x % 10);\n            x /= 10;\n        }\n     \
    \   sb[--i] = '0' + (x % 10);\n        return sb.ToString();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0dqybi7k.cs(25,23): error CS0266: Cannot implicitly convert type ''long''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp0dqybi7k.cs(28,19): error CS0266: Cannot implicitly convert type ''long''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976841
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        const\
    \ string digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        long xx =\
    \ x;\n        int i, digit, carry;\n        if (shift < 0)\n        {\n      \
    \      carry = 0;\n            for (shift = -shift; shift >= 0; shift--)\n   \
    \         {\n                carry = (xx % 10) + carry;\n                xx =\
    \ xx / 10;\n            }\n            i = digits .Length - 1;\n            digit\
    \ = carry % 10;\n            if (i >= 0)\n            {\n                digit\
    \ = digit + carry;\n                carry = 0;\n            }\n        }\n   \
    \     else\n        {\n            carry = 0;\n            for (i = digits.Length\
    \ - 1; i >= shift; i--)\n            {\n                carry = (xx % 10) + carry;\n\
    \                xx = xx / 10;\n            }\n            digit = carry % 10;\n\
    \        }\n        return digits.Substring(0, digit) + digits.Substring(shift\
    \ + 1) + digit;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpygs8flh3.cs(25,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpygs8flh3.cs(41,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpygs8flh3.cs(46,62): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976841
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ > Math.DivRem(x, 10L, out long rem))\n            throw new ArgumentOutOfRangeException(\"\
    Invalid shift\");\n        string result = new string('0', Math.DivRem(x, 10L));\n\
    \        if (shift < Math.DivRem(result, 10L, out long rem))\n            throw\
    \ new ArgumentOutOfRangeException(\"Invalid shift\");\n        shift %= Math.DivRem(result,\
    \ 10L);\n        for (long i = 0; i < Math.DivRem(shift, 10L); ++i)\n        \
    \    result += (char)(((int)'0' + x[Math.DivRem(i, 10L)] - (int)'0') % 10);\n\
    \        result += new string(\n            x.ToString().Reverse().Skip(Math.DivRem(shift,\
    \ 10L)).Take(Math.DivRem(shift, 10L)).ToArray());\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqoo6yxo3.cs(19,46): error CS1501: No overload for method ''DivRem'' takes
    2 arguments

    /tmp/tmpqoo6yxo3.cs(20,55): error CS0128: A local variable or function named ''rem''
    is already defined in this scope

    /tmp/tmpqoo6yxo3.cs(20,33): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    /tmp/tmpqoo6yxo3.cs(20,41): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpqoo6yxo3.cs(20,50): error CS1503: Argument 3: cannot convert from ''out
    long'' to ''out int''

    /tmp/tmpqoo6yxo3.cs(22,23): error CS1501: No overload for method ''DivRem'' takes
    2 arguments

    /tmp/tmpqoo6yxo3.cs(23,35): error CS1501: No overload for method ''DivRem'' takes
    2 arguments

    /tmp/tmpqoo6yxo3.cs(24,49): error CS1501: No overload for method ''DivRem'' takes
    2 arguments

    /tmp/tmpqoo6yxo3.cs(26,46): error CS1501: No overload for method ''DivRem'' takes
    2 arguments

    /tmp/tmpqoo6yxo3.cs(26,76): error CS1501: No overload for method ''DivRem'' takes
    2 arguments

    '
  timestamp: 1659976841
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        char[]\
    \ arr = new char[(int) Math.Ceiling(Math.Log10(Math.Abs(x) + shift))];\n     \
    \   for (int i = 0; i < arr.Length; i++) {\n            int digit = (int)Math.Round(x\
    \ / Math.Pow(10, i));\n            arr[i] = ((int)((digit % 10 + shift)) + digit).ToString();\n\
    \        }\n        return new string(arr);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpewifjzhr.cs(20,22): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    '
  timestamp: 1659976841
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ result = \"\";\n        if (shift > x.ToString().Length) shift = x.ToString().Length\
    \ - shift;\n        while (shift > 0)\n        {\n            result += (char)(((int)(x%10)>>(shift&1))+96);\n\
    \            shift -= 1;\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc2aiudgq.cs(21,31): error CS0019: Operator ''>>'' cannot be applied to
    operands of type ''int'' and ''long''

    '
  timestamp: 1659976841
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ result = Convert.ToString(x, 10);\n        char[] chars = result.ToCharArray();\n\
    \        int index = Convert.ToInt32(Math.Floor(Math.Log10(x) + 1));\n       \
    \ for (int i = 0; i < shift; i++) {\n            chars[index] = chars[(index +\
    \ i) % chars.Length];\n            index = (index + i) / chars.Length;\n     \
    \   }\n        return new string(chars);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.CircularShift (System.Int64 x, System.Int64\
    \ shift) [0x00032] in <02f84cb384624321aaa5994685a9e7a6>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <02f84cb384624321aaa5994685a9e7a6>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.CircularShift (System.Int64 x,\
    \ System.Int64 shift) [0x00032] in <02f84cb384624321aaa5994685a9e7a6>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x00001] in <02f84cb384624321aaa5994685a9e7a6>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976841
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ == 0) {\n            return \"0\"; // Avoid \"0\"\n        }\n\n        int\
    \ digitCount = 0;\n        long div = x;\n        while (div != 0) {\n       \
    \     digitCount++;\n            div /= 10;\n        }\n\n        long rest =\
    \ x % 10;\n\n        int result = digitCount;\n        long temp;\n        do\
    \ {\n            temp = x;\n            x = (x << 1) + shift;\n            if\
    \ (x >= 10) {\n                x = (x >> 1) + shift;\n            }\n\n      \
    \      if (temp >= 10) {\n                result -= 1;\n            }\n\n    \
    \        shift -= 1;\n        } while (x != 0);\n\n        string result = \"\"\
    ;\n        for (int i = result + digitCount; i > 0; i--) {\n            result\
    \ += x % 10;\n            x /= 10;\n        }\n\n        // reverse the result\
    \ if shifting is greater than number of digits\n        if (shift > digitCount)\
    \ {\n            result = result.Reverse();\n        }\n\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfj5vcdgl.cs(46,16): error CS0128: A local variable or function named ''result''
    is already defined in this scope

    /tmp/tmpfj5vcdgl.cs(48,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpfj5vcdgl.cs(54,29): error CS1061: ''int'' does not contain a definition
    for ''Reverse'' and no accessible extension method ''Reverse'' accepting a first
    argument of type ''int'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpfj5vcdgl.cs(57,16): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    /tmp/tmpfj5vcdgl.cs(46,16): warning CS0219: The variable ''result'' is assigned
    but its value is never used

    '
  timestamp: 1659976841
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ digits = x.ToString();\n        string result = \"\";\n        // Shift digits\
    \ right\n        long digitShift = digits >> shift;\n        long carry = 0;\n\
    \        if (shift > digits.Length) {\n            digitShift = digits.Length;\n\
    \        }\n        for (int i = 0; i < digitShift && i < digits.Length; i++)\
    \ {\n            result += digits[digits.Length - 1 - i] + carry;\n          \
    \  carry = digits[digits.Length - 1 - i] >> 31;\n        }\n        // Shift digits\
    \ left\n        digitShift -= digits.Length;\n        carry = 0;\n        if (shift\
    \ < digitShift) {\n            for (int i = digitShift; i < shift; i++) {\n  \
    \              result += digits[digits.Length - 1 - i] + carry;\n            \
    \    carry = digits[digits.Length - 1 - i] >> 31;\n            }\n        } else\
    \ {\n            digit temp = digits[digits.Length - 1 - digitShift];\n      \
    \      result += temp + carry;\n            carry = temp >> 31;\n        }\n \
    \       if (carry != 0) {\n            result += \"1\" + carry;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_adbl7hl.cs(20,27): error CS0019: Operator ''>>'' cannot be applied to
    operands of type ''string'' and ''long''

    /tmp/tmp_adbl7hl.cs(33,26): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp_adbl7hl.cs(38,13): error CS0246: The type or namespace name ''digit''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmp_adbl7hl.cs(38,33): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976841
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        List<char>\
    \ buffer = new List<char>();\n        int digitCount = 0;\n\n        while (shift\
    \ > digitCount) {\n            digitCount++;\n            shift -= digitCount;\n\
    \        }\n\n        while (shift > 0) {\n            buffer.Add((char) (x %\
    \ 10));\n            x = x / 10;\n            shift--;\n        }\n\n        buffer.Add((char)\
    \ (x % 10));\n\n        return buffer.ToString();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6fc0513a566492a8bd9625054402ce4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6fc0513a566492a8bd9625054402ce4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976841
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        List<String>\
    \ digits = new List<string>();\n        StringBuilder sb = new StringBuilder();\n\
    \        long n = x;\n        while (shift > 0) {\n            digits.Add(n.ToString());\n\
    \            n >>= shift;\n            shift--;\n        }\n        if (n == 0)\
    \ return digits.Reverse().Aggregate(\"\", (current, digit) => current + digit);\n\
    \        digits.Reverse();\n        for (int i = digits.Count - 1; i >= 0; i--)\
    \ {\n            digits.Insert(i, digits[i]);\n            digits.RemoveAt(i);\n\
    \            while (digits.Count > 0) {\n                digits.Insert(0, digits[digits.Count\
    \ - 1]);\n                digits.RemoveAt(digits.Count - 1);\n            }\n\
    \        }\n        foreach (string digit in digits) sb.Append(digit);\n     \
    \   return sb.ToString();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpekv7y5s0.cs(22,13): error CS0019: Operator ''>>='' cannot be applied to
    operands of type ''long'' and ''long''

    /tmp/tmpekv7y5s0.cs(25,44): error CS0023: Operator ''.'' cannot be applied to
    operand of type ''void''

    '
  timestamp: 1659976841
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        int digits\
    \ = (int)Math.Sqrt(Math.Abs(shift));\n        long shift = shift % digits;\n \
    \       long remaining = x;\n        while (shift > 0) {\n            long digit\
    \ = remaining % 10;\n            remaining = remaining / 10;\n            string\
    \ s = digit + remaining.ToString();\n            shift--;\n        }\n       \
    \ return s.Reverse().ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpan7yu0k8.cs(17,46): error CS0841: Cannot use local variable ''shift''
    before it is declared

    /tmp/tmpan7yu0k8.cs(18,14): error CS0136: A local or parameter named ''shift''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpan7yu0k8.cs(26,16): error CS0103: The name ''s'' does not exist in the
    current context

    '
  timestamp: 1659976841
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long\
    \ n = x;\n        while (shift > 0)\n        {\n            long r = n / (long)10;\n\
    \            n = n - (r * (long)10);\n            shift--;\n        }\n      \
    \  long q = n;\n        long r = n % (long)10;\n        q = q + (long)(r * (long)10);\n\
    \        return q.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5qjg_ihi.cs(20,18): error CS0136: A local or parameter named ''r'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659976841
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ < 1 || shift > x.ToString().Length) {\n            throw new ArgumentException(\"\
    Invalid shift.\");\n        }\n        long temp = 0;\n        while (shift >\
    \ 0) {\n            temp = (temp << shift) | ((x & Math.Pow(2, shift)) - Math.Pow(2,\
    \ shift - 1));\n            shift -= 1;\n        }\n        return temp.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8jp98rsg.cs(22,21): error CS0019: Operator ''<<'' cannot be applied to
    operands of type ''long'' and ''long''

    /tmp/tmp8jp98rsg.cs(22,40): error CS0019: Operator ''&'' cannot be applied to
    operands of type ''long'' and ''double''

    '
  timestamp: 1659976841
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        // Shift\
    \ >= length of digits, return digits reversed\n        if (shift >= x.ToString().Length)\
    \ {\n            return x.ToString().Reverse().ToString();\n        }\n      \
    \  StringBuilder sb = new StringBuilder();\n        while (shift > 0) {\n    \
    \        sb.Append(x.ToString().Substring(0, Math.Min(x.ToString().Length - 1,\
    \ shift)));\n            x = x.ToString().Substring(Math.Min(x.ToString().Length\
    \ - 1, shift));\n            shift -= x.ToString().Length - 1;\n        }\n  \
    \      sb.Append(x);\n        return sb.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp53qwbcor.cs(23,49): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp53qwbcor.cs(24,40): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976841
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var result\
    \ = \"\";\n        var xdigits = new BigInteger(x).ToString().ToCharArray().Reverse();\n\
    \        for (var i = 0; i < shift / BigInteger.Digits; i++)\n        {\n    \
    \        result += xdigits[i];\n        }\n        result += xdigits.Take(shift\
    \ % BigInteger.Digits).Reverse().ToArray().ToString() + \"\";\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjot74g_z.cs(19,48): error CS0117: ''BigInteger'' does not contain a definition
    for ''Digits''

    /tmp/tmpjot74g_z.cs(21,23): error CS0021: Cannot apply indexing with [] to an
    expression of type ''IEnumerable<char>''

    /tmp/tmpjot74g_z.cs(23,51): error CS0117: ''BigInteger'' does not contain a definition
    for ''Digits''

    '
  timestamp: 1659976841
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        int shiftLeft\
    \ = shift;\n        long shiftRight = shift - 1;\n        string result = \"\"\
    ;\n        long temp = 0;\n        while (x > 0) {\n            temp = x % 10;\n\
    \            x /= 10;\n            if (shiftLeft > 0) {\n                result\
    \ += Convert.ToString(shiftLeft % 10);\n                shiftLeft /= 10;\n   \
    \         }\n            result += Convert.ToString(temp);\n            if (shiftRight\
    \ > 0) {\n                result += \"0\" + Convert.ToString(shiftRight % 10);\n\
    \                shiftRight /= 10;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcggletm5.cs(17,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976841
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ == 0L)\n            return string.Empty;\n        if (shift < 0)\n         \
    \   return LongToString(BitConverter.ToInt64(new long[] { x, (long)shift }, 0));\n\
    \        string result = \"\";\n        long curr = x;\n        long mask = (long)Math.Pow(10.0,\
    \ shift.ToDouble() / 8.0).ToString();\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 2; i <= shift; i++) {\n            long temp = curr / i;\n\
    \            if (temp != 0L)\n                sb.Append(temp);\n            curr\
    \ = (long)Math.Floor(temp * mask);\n            temp = curr / i;\n           \
    \ if (temp != 0L)\n                sb.Append(temp);\n            result += sb.ToString();\n\
    \        }\n        // reverse digits if shift > number of digits.\n        if\
    \ (shift > result.Length)\n            result += (result.Length - shift).ToString().Reverse().ToString();\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2_0to7vo.cs(20,20): error CS0103: The name ''LongToString'' does not exist
    in the current context

    /tmp/tmp2_0to7vo.cs(20,54): error CS1503: Argument 1: cannot convert from ''long[]''
    to ''byte[]''

    /tmp/tmp2_0to7vo.cs(23,48): error CS1061: ''long'' does not contain a definition
    for ''ToDouble'' and no accessible extension method ''ToDouble'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp2_0to7vo.cs(29,31): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Floor(decimal)'' and ''Math.Floor(double)''

    '
  timestamp: 1659976841
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ res = \"\";\n        long carry = 1;\n        for (int i = shift.ToString().Length\
    \ - 1; i >= 0; i--) {\n            if ((x & 1) != 0) {\n                x >>=\
    \ 1;\n                carry += 1;\n            }\n            else {\n       \
    \         x <<= 1;\n                carry -= 1;\n            }\n            res\
    \ = Convert.ToString(x | carry) + res;\n        }\n        return res.Substring(0,\
    \ res.Length - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ea55037264e4d60b30f1b691945e98b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ea55037264e4d60b30f1b691945e98b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var result\
    \ = new StringBuilder();\n        var buffer = new byte[8];\n        var bitmask\
    \ = (byte)(1 << (7 - shift));\n        // Do the actual shifting in 8 steps\n\
    \        while (shift >= 8) {\n            shift -= 8;\n            int shiftRight\
    \ = (int)Math.Pow(2, shift);\n            var mask = (byte)(1 << (7 - shift));\n\
    \            if (x == 0) {\n                result.Append((byte)(x & mask));\n\
    \                break;\n            }\n            int left = (int)Math.Truncate(x)\
    \ & mask;\n            int right = (int)Math.Truncate((x >> shiftRight)) & mask;\n\
    \            if (shift == 0) {\n                result.Append(left & bitmask);\n\
    \                result.Append(right & bitmask);\n                break;\n   \
    \         }\n            byte temp = (byte)(((left & bitmask) << 8) | right);\n\
    \            buffer[7 - shift] = temp;\n            buffer[6 - shift] = temp;\n\
    \            buffer[5 - shift] = temp;\n            buffer[4 - shift] = temp;\n\
    \            buffer[3 - shift] = temp;\n            buffer[2-shift] = temp;\n\
    \            buffer[1 - shift] = temp;\n            buffer[0 - shift] = temp;\n\
    \            x = left << shift;\n        }\n        buffer[0] = (byte)(x & bitmask);\n\
    \        result.Append(buffer[0]);\n        buffer.CopyTo(buffer, 1);\n      \
    \  result.Append(buffer[0]);\n        return result.ToString();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxzm4qcsf.cs(19,30): error CS0019: Operator ''<<'' cannot be applied to
    operands of type ''int'' and ''long''

    /tmp/tmpxzm4qcsf.cs(24,31): error CS0019: Operator ''<<'' cannot be applied to
    operands of type ''int'' and ''long''

    /tmp/tmpxzm4qcsf.cs(29,34): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Truncate(decimal)'' and ''Math.Truncate(double)''

    /tmp/tmpxzm4qcsf.cs(30,35): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Truncate(decimal)'' and ''Math.Truncate(double)''

    /tmp/tmpxzm4qcsf.cs(45,17): error CS0019: Operator ''<<'' cannot be applied to
    operands of type ''int'' and ''long''

    '
  timestamp: 1659976841
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var digits\
    \ = BitConverter.GetBytes(x);\n        foreach (var digit in digits.Skip(shift\
    \ * digits.Length)) {\n            var digit = digit % 10;\n            digits[digits.IndexOf(digit)]\
    \ = digit >> shift;\n        }\n        return BitConverter.ToString(digits).Replace(\"\
    -\", \"\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5ql4tazz.cs(18,43): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp5ql4tazz.cs(19,17): error CS0136: A local or parameter named ''digit''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp5ql4tazz.cs(19,25): error CS0841: Cannot use local variable ''digit''
    before it is declared

    '
  timestamp: 1659976841
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        const\
    \ long base = 0x10UL;\n        const long shiftBase = 10UL;\n        const long\
    \ baseMinusShiftBase = base - shiftBase;\n        if (shift == 0L) {\n       \
    \     return \"\" + base;\n        }\n        if (shift == 1L) {\n           \
    \ return (x % base) + base;\n        }\n        if (x == 0L) {\n            return\
    \ \"\";\n        }\n        long x = x % base;\n        long s = x << shift;\n\
    \        long z = s % baseMinusShiftBase;\n        long y = ((s - z) + baseMinusShiftBase)\
    \ % base;\n        long r = x + (y << shift);\n        return r == 0 ? \"\" :\
    \ Convert.ToString(Convert.ToInt32(r));\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph1e81z43.cs(17,20): error CS1001: Identifier expected

    /tmp/tmph1e81z43.cs(17,20): error CS0145: A const field requires a value to be
    provided

    /tmp/tmph1e81z43.cs(17,20): error CS1002: ; expected

    '
  timestamp: 1659976841
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ digits = Convert.ToString(x, 10);\n        char[] digitArray = digits.ToCharArray();\n\
    \        int digitCount = digits.Length;\n        if (shift > digitCount)\n  \
    \          digitCount = shift;\n\n        for (int i = 0; i < digitCount; i++)\
    \ {\n            char currentDigit = digitArray[i];\n            int shiftIndex\
    \ = digitCount - i - 1;\n            char newDigit = (char)(currentDigit + digitArray[shiftIndex]);\n\
    \            digitArray[shiftIndex] = newDigit;\n        }\n\n        return new\
    \ string(digitArray);\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_hgjxkki.cs(21,26): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976841
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var chars\
    \ = (x / 10).ToString(\"0000000\");\n        var remainder = (x / 10) % 10;\n\n\
    \        var result = \"\";\n        foreach (var c in chars.Reverse()) {\n  \
    \          var multiplier = Math.Pow(10, shift);\n            var shifted = ((long.Parse(c.ToString())\
    \ * multiplier) % 10) + remainder;\n            result += shifted.ToString();\n\
    \            shift -= 1;\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3c23066744dc46fa960efb8f82f80354>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3c23066744dc46fa960efb8f82f80354>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long\
    \ remainder = 0;\n        long digit = 0;\n        StringBuilder result = new\
    \ StringBuilder(x.ToString());\n        do {\n            digit = (long) (x%10);\n\
    \            x.Remove(0, 1);\n            x.Insert(0, digit);\n            x /=\
    \ 10;\n            remainder += digit*Math.Pow(10,shift);\n            shift -=\
    \ 1;\n        } while (x != 0);\n        return result.ToString();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq2y86z67.cs(22,13): error CS1929: ''long'' does not contain a definition
    for ''Remove'' and the best extension method overload ''CollectionExtensions.Remove<int,
    int>(IDictionary<int, int>, int, out int)'' requires a receiver of type ''IDictionary<int,
    int>''

    /tmp/tmpq2y86z67.cs(23,15): error CS1061: ''long'' does not contain a definition
    for ''Insert'' and no accessible extension method ''Insert'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpq2y86z67.cs(25,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976842
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ >= x.ToString().Length)\n            return x.ToString();\n        var digits\
    \ = x.ToString();\n        var result = new StringBuilder();\n        for (long\
    \ i = 0; i < shift; i++) {\n            result.Append(digits[digits.Length - shift\
    \ + i]);\n        }\n        return result.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp16b2wsh8.cs(22,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976841
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ < 0 || shift > x.ToString().Length)\n            return \"Error\";\n       \
    \ string s = x.ToString();\n        var result = new char[s.Length + shift + 1];\n\
    \        for (int i = 0; i < s.Length; i++)\n            result[(i + shift + 1)\
    \ % result.Length] = s[i];\n        return new string(result);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e8ee1db306e04827bbc41ec6e763f96c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e8ee1db306e04827bbc41ec6e763f96c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var result\
    \ = x.ToString();\n        foreach (var c in result.Reverse())\n        {\n  \
    \          var c2 = (char) (((ulong) c) << (ulong) shift);\n            result\
    \ += (char)c2;\n            shift -= 1;\n            if (shift == 0)\n       \
    \     {\n                shift = Math.Abs(c).ToString().Length;\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo9bryap9.cs(20,30): error CS0019: Operator ''<<'' cannot be applied to
    operands of type ''ulong'' and ''ulong''

    '
  timestamp: 1659976842
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        // Shift\
    \ any digit right by shift digits in the integer x to the right by\n        //\
    \ shift.\n        if (shift == 0)\n            return x.ToString();\n\n      \
    \  long temp = 0;\n        string result = string.Empty;\n        string str =\
    \ x.ToString();\n        Debug.Assert(str.Length > 0, \"x should be non-zero for\
    \ CircularShift.\");\n        if (str.Length == 1)\n            return str;\n\n\
    \        // Get the last digit, shift it left by shift digits, and add it to temp.\n\
    \        temp = (long)Math.Pow(10, str.Length - 1) * Math.Pow(10, shift);\n  \
    \      temp = temp + str[str.Length - 1] - '0';\n\n        // Shift digit by shift,\
    \ add it to result, and get the next digit.\n        for (int i = str.Length -\
    \ 2; i >= 0; i--)\n            result = temp + \"0\" + str[i] + result;\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppw1gwbr4.cs(30,16): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976842
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = \"\";\n        long[] p = {0,1,2,3,4,5,6,7,8,9};\n        long tmp = x;\n\
    \        for (long i = 0; i < shift - 1; i++) {\n            tmp <<= 1;\n    \
    \        tmp |= p[i];\n        }\n        s = s.Substring(0, 1) + tmp.ToString();\n\
    \        if (shift > 1) {\n            s = s.Substring(0, 0) + s.Substring(1);\n\
    \        }\n        return s;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length\
    \ must refer to a location within the string.\nParameter name: length\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CircularShift (System.Int64 x, System.Int64 shift) [0x00040]\
    \ in <3461a3d8e4384d718c4d1732d5941518>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <3461a3d8e4384d718c4d1732d5941518>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentOutOfRangeException: Index and length must refer to\
    \ a location within the string.\nParameter name: length\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CircularShift (System.Int64 x, System.Int64 shift) [0x00040]\
    \ in <3461a3d8e4384d718c4d1732d5941518>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <3461a3d8e4384d718c4d1732d5941518>:0 \n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long\
    \ remaining = x;\n        int digits;\n\n        digits = (int)Math.Log10(remaining);\n\
    \        if (shift > digits) {\n            digits = shift;\n        }\n     \
    \   shift = (int)Math.Pow(10, digits);\n\n        while (shift > 0) {\n      \
    \      long partialShift = remaining - remaining % shift;\n            if (partialShift\
    \ != 0) {\n                remaining = (long)Math.Pow(10, digits + 1) - partialShift;\n\
    \            } else {\n                remaining = (long)Math.Pow(10, digits);\n\
    \            }\n            shift -= digits;\n        }\n        return remaining\
    \ == 0 ? \"0\" : remaining.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoqf9_0np.cs(22,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976842
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long\
    \ shiftDigits = Math.Pow(10, shift);\n        string str = Convert.ToString(Math.Pow(x,\
    \ shift));\n        long res = 0;\n        foreach (var digit in str.Reverse())\
    \ {\n            long digit = Convert.ToInt64(digit);\n            res = res *\
    \ 10 + digit;\n        }\n        return Convert.ToString(Math.Pow(res, shiftDigits));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi2k_2fs3.cs(17,28): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpi2k_2fs3.cs(21,18): error CS0136: A local or parameter named ''digit''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpi2k_2fs3.cs(21,42): error CS0165: Use of unassigned local variable ''digit''

    '
  timestamp: 1659976842
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        int x0\
    \ = Convert.ToInt32(x / Math.Pow(10, shift));\n        string ret = \"\";\n  \
    \      string str = Convert.ToString(x0);\n        while (shift > 0) {\n     \
    \       ret = (str.Substring(0, str.length - 1) + \"0\") + ret;\n            shift\
    \ = shift - 1;\n            str = str.Substring(0, str.length - 1) + str.Substring(1);\n\
    \        }\n        return ret + str + Convert.ToString(x0);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwzsn5x4k.cs(21,41): error CS1061: ''string'' does not contain a definition
    for ''length'' and no accessible extension method ''length'' accepting a first
    argument of type ''string'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpwzsn5x4k.cs(23,40): error CS1061: ''string'' does not contain a definition
    for ''length'' and no accessible extension method ''length'' accepting a first
    argument of type ''string'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659976842
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (x\
    \ < 10L || shift < 10L) {\n            throw new Exception(\"Negative or zero\
    \ values\");\n        }\n        long n = x; // Save the value of x in n to prevent\
    \ repeated subtractions.\n        StringBuilder s = new StringBuilder();\n   \
    \     long remainder;\n        while (shift > 0)\n        {\n            remainder\
    \ = n % 10;\n            s.Insert(0, (remainder % 10) + remainder / 10);\n   \
    \         n /= 10;\n            shift--;\n        }\n        if (n > 0) {\n  \
    \          remainder = n % 10;\n            s.Insert(0, (remainder % 10) + remainder\
    \ / 10);\n        }\n        return s.ToString();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.Exception: Negative or zero values\n  at\
    \ Problem.CircularShift (System.Int64 x, System.Int64 shift) [0x00015] in <6419ea6052f14d99ae79cf31b593335a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <6419ea6052f14d99ae79cf31b593335a>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Exception: Negative or zero values\n\
    \  at Problem.CircularShift (System.Int64 x, System.Int64 shift) [0x00015] in\
    \ <6419ea6052f14d99ae79cf31b593335a>:0 \n  at Problem.Main (System.String[] args)\
    \ [0x00001] in <6419ea6052f14d99ae79cf31b593335a>:0 \n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ == 0) return x.ToString();\n        if (shift >= x.ToString().Length) shift\
    \ = x.ToString().Length - shift;\n        string result = \"\";\n        for (int\
    \ i = x.ToString().Length - shift; i >= shift; --i) {\n            result += Convert.ToString(x\
    \ >> shift);\n        }\n        result += (x % 10).ToString();\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1etncxqs.cs(20,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp1etncxqs.cs(21,40): error CS0019: Operator ''>>'' cannot be applied to
    operands of type ''long'' and ''long''

    '
  timestamp: 1659976842
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long[]\
    \ digits = x.ToString().Select(d => d - '0').ToArray();\n        if (shift >=\
    \ digits.Length) {\n            return digits.Reverse().Aggregate(\"\", (s, d)\
    \ => s + d);\n        }\n        digits = digits.Reverse().Take(shift).Reverse().ToArray();\n\
    \        digits.Reverse();\n        long[] reverse = digits.Reverse().Select(d\
    \ => (long)((1L + d) % x)).ToArray();\n        long[] reverse2 = reverse.Reverse().Take(shift).Reverse().ToArray();\n\
    \        return reverse2.Aggregate(\"\", (s, d) => s + d);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsnqnkjkj.cs(17,25): error CS0029: Cannot implicitly convert type ''int[]''
    to ''long[]''

    /tmp/tmpsnqnkjkj.cs(21,40): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpsnqnkjkj.cs(24,50): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976842
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ > Math.Abs(x)) {\n            throw new ArgumentException(\n               \
    \ \"shift must be less than the absolute value of x\");\n        }\n\n       \
    \ char[] digits = x.ToString().ToCharArray();\n        long xDigits = 0;\n   \
    \     long yDigits = 0;\n        for (int i = 0; i < digits.Length; ++i) {\n \
    \           long currentDigit = digits[i] - '0';\n            long currentShift\
    \ = shift % 10;\n            currentShift = 10 - currentShift;\n            if\
    \ (currentShift == 0 && currentDigit > 1) {\n                yDigits++;\n    \
    \        } else {\n                currentDigit += currentShift;\n           \
    \     xDigits += currentDigit;\n            }\n            digits[i] = '0' + currentDigit;\n\
    \            shift /= 10;\n        }\n\n        string result = new string((char)('A'\
    \ + xDigits), yDigits);\n        if (yDigits < digits.Length) {\n            result\
    \ = new string((char)(digits[digits.Length] - '0'), yDigits) + result;\n     \
    \   }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg9flbhiv.cs(35,25): error CS0266: Cannot implicitly convert type ''long''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpg9flbhiv.cs(39,59): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpg9flbhiv.cs(41,70): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976842
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        StringBuilder\
    \ result = new StringBuilder();\n        int digitCount = (int)Math.Ceiling(Math.Log10(x));\n\
    \        if (shift == digitCount)\n        {\n            result.Append(x);\n\
    \        }\n        else\n        {\n            while (shift > digitCount)\n\
    \            {\n                shift -= digitCount;\n                long shiftDigits\
    \ = 1 << shift;\n                x = x >> shift;\n                digitCount =\
    \ (int)Math.Ceiling(Math.Log10(x));\n            }\n            while (shift <\
    \ -digitCount)\n            {\n                shift += digitCount;\n        \
    \        long shiftDigits = 1 << shift;\n                x = x << shift;\n   \
    \             digitCount = (int)Math.Ceiling(Math.Log10(x));\n            }\n\
    \            while (true)\n            {\n                long temp;\n       \
    \         if (shift > digitCount)\n                {\n                    temp\
    \ = x >> shift;\n                    result.Append(Convert.ToString(temp));\n\
    \                    shift -= digitCount;\n                    x = x >> shift;\n\
    \                    digitCount = (int)Math.Ceiling(Math.Log10(x));\n        \
    \        }\n                else\n                {\n                    temp\
    \ = x << shift;\n                    result.Append(Convert.ToString(temp));\n\
    \                    shift += digitCount;\n                    x = x << shift;\n\
    \                    digitCount = (int)Math.Ceiling(Math.Log10(x));\n        \
    \        }\n                if (shift == 0)\n                {\n             \
    \       break;\n                }\n            }\n        }\n        return result.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1893t6gg.cs(28,36): error CS0019: Operator ''<<'' cannot be applied to
    operands of type ''int'' and ''long''

    /tmp/tmp1893t6gg.cs(29,21): error CS0019: Operator ''>>'' cannot be applied to
    operands of type ''long'' and ''long''

    /tmp/tmp1893t6gg.cs(35,36): error CS0019: Operator ''<<'' cannot be applied to
    operands of type ''int'' and ''long''

    /tmp/tmp1893t6gg.cs(36,21): error CS0019: Operator ''<<'' cannot be applied to
    operands of type ''long'' and ''long''

    /tmp/tmp1893t6gg.cs(44,28): error CS0019: Operator ''>>'' cannot be applied to
    operands of type ''long'' and ''long''

    /tmp/tmp1893t6gg.cs(47,25): error CS0019: Operator ''>>'' cannot be applied to
    operands of type ''long'' and ''long''

    /tmp/tmp1893t6gg.cs(52,28): error CS0019: Operator ''<<'' cannot be applied to
    operands of type ''long'' and ''long''

    /tmp/tmp1893t6gg.cs(55,25): error CS0019: Operator ''<<'' cannot be applied to
    operands of type ''long'' and ''long''

    '
  timestamp: 1659976842
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ result = \"\";\n        List<int> digits = new List<int>();\n        while (x\
    \ > 0) {\n            digits.Add(x % 10);\n            x /= 10;\n        }\n \
    \       shift = shift % digits.Count;\n        for (int i = digits.Count - 1;\
    \ i >= shift; --i) {\n            digits.Add(0);\n        }\n        for (int\
    \ i = digits.Count - 1; i >= shift; --i) {\n            result = result.Insert(0,\
    \ digits[i]);\n        }\n        if (digits.Count < shift) {\n            digits.Reverse();\n\
    \            for (int i = digits.Count - 1; i >= shift; --i) {\n             \
    \   result = result.Insert(0, digits[i]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkfo334nj.cs(20,24): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpkfo334nj.cs(28,39): error CS1503: Argument 2: cannot convert from ''int''
    to ''string''

    /tmp/tmpkfo334nj.cs(33,43): error CS1503: Argument 2: cannot convert from ''int''
    to ''string''

    '
  timestamp: 1659976842
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long\
    \ shift = shift % x.GetBitLength();\n        if (shift == 0)\n            return\
    \ x.ToString(\"\");\n        string result = \"\";\n        while ((x > 0L) &&\
    \ (shift > 0L)) {\n            int digit = x % 10;\n            result += (char)(((int)digit\
    \ + shift) % 26 + 'A');\n            x /= 10;\n            shift /= 10;\n    \
    \    }\n        int digit = x % 10;\n        result += (char)(((int)digit + shift)\
    \ % 26 + 'A');\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpizmduf6q.cs(17,14): error CS0136: A local or parameter named ''shift''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpizmduf6q.cs(17,32): error CS1061: ''long'' does not contain a definition
    for ''GetBitLength'' and no accessible extension method ''GetBitLength'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpizmduf6q.cs(22,17): error CS0136: A local or parameter named ''digit''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpizmduf6q.cs(22,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpizmduf6q.cs(27,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpizmduf6q.cs(17,22): error CS0165: Use of unassigned local variable ''shift''

    '
  timestamp: 1659976842
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        StringBuilder\
    \ sb = new StringBuilder(x.ToString());\n        Debug.Assert(shift >= 0 && shift\
    \ < sb.Length);\n\n        for (long i = sb.Length - shift - 1; i >= shift; --i)\n\
    \            sb.Insert(i, sb.First());\n\n        return sb.ToString();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpypf19nk4.cs(21,29): error CS1061: ''StringBuilder'' does not contain a
    definition for ''First'' and no accessible extension method ''First'' accepting
    a first argument of type ''StringBuilder'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1659976842
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var digits\
    \ = new char[Math.Abs(Math.Log10(shift) + 1)];\n        for (var i = 0; i < Math.Abs(Math.Log10(shift)\
    \ + 1); i++) {\n            var offset = shift * i;\n            digits[i] = ((int)Math.Floor(x/Math.Pow(10,\
    \ offset))%10).ToString();\n            x -= Math.Pow(10, offset) * Math.Pow(shift,\
    \ i);\n        }\n        return new string(digits);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0_34cqck.cs(17,31): error CS0266: Cannot implicitly convert type ''double''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp0_34cqck.cs(20,25): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmp0_34cqck.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976842
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var digits\
    \ = BitConverter.GetBytes(x); // Get digits from long.\n        var result = new\
    \ List<string>();\n        var shift = shift % digits.Count;\n        for (var\
    \ i = 0; i < digits.Count; i++) {\n            var digit = digits[i];\n      \
    \      int newDigit = digit;\n            if (shift == 0) {\n                newDigit\
    \ *= 10; // Multiply digits by 10.\n                shift = (digits - i).Count;\
    \ // Reset the shift.\n            }\n            result .Add(newDigit % 10 +\
    \ digits[digits.Count - 1 - i]); // Add digit.\n        }\n        if (shift ==\
    \ 0) return result.Reverse().ToArray().ToString();\n        return result.Reverse().Skip(shift).ToArray().ToString()\
    \ + new string(digits[digits.Count - shift]);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yqk00hn.cs(19,13): error CS0136: A local or parameter named ''shift''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp0yqk00hn.cs(19,21): error CS0841: Cannot use local variable ''shift''
    before it is declared

    /tmp/tmp0yqk00hn.cs(20,25): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''int'' and ''method group''

    /tmp/tmp0yqk00hn.cs(25,26): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''byte[]'' and ''int''

    /tmp/tmp0yqk00hn.cs(27,48): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''method group'' and ''int''

    /tmp/tmp0yqk00hn.cs(29,48): error CS0023: Operator ''.'' cannot be applied to
    operand of type ''void''

    /tmp/tmp0yqk00hn.cs(30,32): error CS0023: Operator ''.'' cannot be applied to
    operand of type ''void''

    '
  timestamp: 1659976842
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        // Initialize\
    \ to largest possible value.\n        long highest = (long.MaxValue - 1L) << shift;\n\
    \        // Handle negative shift value by subtracting largest possible.\n   \
    \     shift = shift < 0 ? shift - highest : shift;\n        // Compute bit-shifted\
    \ value.\n        long y = x >> shift;\n        // Handle negative value by adding\
    \ largest possible value.\n        y = y > highest ? highest : y;\n        //\
    \ Convert to string.\n        return y.ToString();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzjhhdx7r.cs(18,24): error CS0019: Operator ''<<'' cannot be applied to
    operands of type ''long'' and ''long''

    /tmp/tmpzjhhdx7r.cs(22,18): error CS0019: Operator ''>>'' cannot be applied to
    operands of type ''long'' and ''long''

    '
  timestamp: 1659976842
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ >= 0) {\n            return x.ToString().Reverse().Aggregate(\"\", (s, c) =>\
    \ s + char.GetNumericValue(c * (Math.Pow(10.0, shift)) / 10.0));\n        } else\
    \ {\n            return x.ToString().Reverse().Aggregate(\"\", (s, c) => s + char.GetNumericValue(c\
    \ * (Math.Pow(10.0, -shift)) / 10.0));\n        }\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9tcjm9cq.cs(18,92): error CS1503: Argument 1: cannot convert from ''double''
    to ''char''

    /tmp/tmp9tcjm9cq.cs(20,92): error CS1503: Argument 1: cannot convert from ''double''
    to ''char''

    '
  timestamp: 1659976842
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        Debug.Assert(shift\
    \ <= (long)(Math.Log10(Math.Abs(x))));\n        long remainder = 0;\n        string\
    \ result = \"\";\n        while (shift != 0) {\n            remainder = (x % 10)\
    \ * ((long)Math.Pow(10, shift - 1));\n            x /= 10;\n            result\
    \ += remainder / 10;\n            remainder %= 10;\n            shift -= 1;\n\
    \        }\n        Debug.Assert(x == 0);\n        return result + (x < 0 ? \"\
    -\" : \"\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.CircularShift (System.Int64\
    \ x, System.Int64 shift) [0x00000] in <86a1f4d4bea444fab3c8053865435485>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00000] in <86a1f4d4bea444fab3c8053865435485>:0\
    \ \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,\
    \ System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <86a1f4d4bea444fab3c8053865435485>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) ["
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ str = x.ToString();\n        if (shift > str.Length) {\n            return str.Reverse().ToString();\n\
    \        }\n        long n = long.Parse(str);\n        long xl = Convert.ToInt32(str.Length);\n\
    \        long n = n << shift;\n        long m = n >> xl;\n        return Convert.ToString(n,\
    \ 10);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplzwsbslf.cs(23,14): error CS0128: A local variable or function named ''n''
    is already defined in this scope

    /tmp/tmplzwsbslf.cs(23,18): error CS0019: Operator ''<<'' cannot be applied to
    operands of type ''long'' and ''long''

    /tmp/tmplzwsbslf.cs(24,18): error CS0019: Operator ''>>'' cannot be applied to
    operands of type ''long'' and ''long''

    '
  timestamp: 1659976842
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ result = string.Empty;\n        for (int i = shift, j = 0; j < shift + 1; j++)\
    \ {\n            result += (x % 10 + (x/10)%10 + x/100) % 10 + j % 10;\n     \
    \       x = x >> 1;\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvsjqjosd.cs(18,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976842
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ result = \"\";\n\n        string digits = \"\";\n        while (x > 0) {\n \
    \           digits = (x % 10).ToString();\n            result += digits[shift\
    \ == 0 ? 0 : shift - 1];\n            x /= 10;\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwwruili7.cs(22,30): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976842
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        // Shift\
    \ must be positive\n        if (shift < 0) {\n            throw new ArgumentOutOfRangeException(\"\
    shift\", \"shift must be positive\");\n        }\n        // Shift must be < the\
    \ length of x\n        if (shift >= x.Length) {\n            throw new ArgumentOutOfRangeException(\"\
    shift\", \"shift must be < the length of x\");\n        }\n        \n        string\
    \ result = new String();\n\n        // Convert to a string first\n        result\
    \ = x.ToString();\n\n        // Shift each digit\n        for (int i = result.Length\
    \ - 1; i >= shift; i--) {\n            result[i] = result[i + shift];\n      \
    \  }\n\n        // Reverse the digits if the shift was > the number of digits\n\
    \        if (shift > result.Length) {\n            result = new string[result.Length\
    \ - shift]\n              .Concat(result.Take(result.Length - shift))\n      \
    \        .Reverse().ToString();\n        }\n\n        // Return result\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8favw3fp.cs(22,24): error CS1061: ''long'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp8favw3fp.cs(26,29): error CS1729: ''string'' does not contain a constructor
    that takes 0 arguments

    /tmp/tmp8favw3fp.cs(33,13): error CS0200: Property or indexer ''string.this[int]''
    cannot be assigned to -- it is read only

    /tmp/tmp8favw3fp.cs(33,32): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp8favw3fp.cs(39,35): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976842
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ > x.ToString().Length) {\n            Debug.Assert(shift == x.ToString().Length,\
    \ \"Shift must be <= length of number\");\n            shift = 0;\n        }\n\
    \        long n = 1;\n        while (x != 0) {\n            n = n * 10;\n    \
    \        n += x % 10;\n            x = x / 10;\n        }\n        long carry\
    \ = 0;\n        while ((n / 10) != 0) {\n            long tmp = (n % 10);\n  \
    \          carry = 10 * carry + (tmp / 10);\n            n = tmp % 10;\n     \
    \   }\n        if (carry > 0) {\n            n = n + carry;\n        }\n     \
    \   string result = n.ToString();\n        if ((shift > 0) && (shift < result.Length))\
    \ {\n            string reversed = new string(new char[result.Length - shift],\
    \ 0);\n            Array.Copy(result, shift, reversed, 0, reversed.Length);\n\
    \            reversed = new string(reversed, reversed.Length + shift);\n     \
    \       result = reversed;\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpin6xw_qi.cs(38,42): error CS1503: Argument 1: cannot convert from ''char[]''
    to ''char''

    /tmp/tmpin6xw_qi.cs(39,24): error CS1503: Argument 1: cannot convert from ''string''
    to ''System.Array''

    /tmp/tmpin6xw_qi.cs(39,39): error CS1503: Argument 3: cannot convert from ''string''
    to ''System.Array''

    /tmp/tmpin6xw_qi.cs(40,35): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpin6xw_qi.cs(40,45): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976842
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ result = \"0\";\n        // For each digit of the integer \"x\", divide the\
    \ integer by 10.\n        while (x > 0) {\n            long y = x / 10;\n    \
    \        result = (y > result) ? y : result;\n            x = x % 10;\n      \
    \  }\n        // For each digit of the integer \"y\", divide by 10 and shift right\
    \ by shift\n        // until there are no more digits left after shifting.\n \
    \       while (shift > 0) {\n            long y = y / 10;\n            result\
    \ = (y > result) ? y : result;\n            shift -= 1;\n        }\n        //\
    \ Return the result as a string.\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptrwpt2ng.cs(21,23): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''long'' and ''string''

    /tmp/tmptrwpt2ng.cs(21,22): error CS0173: Type of conditional expression cannot
    be determined because there is no implicit conversion between ''long'' and ''string''

    /tmp/tmptrwpt2ng.cs(28,23): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''long'' and ''string''

    /tmp/tmptrwpt2ng.cs(28,22): error CS0173: Type of conditional expression cannot
    be determined because there is no implicit conversion between ''long'' and ''string''

    /tmp/tmptrwpt2ng.cs(27,22): error CS0165: Use of unassigned local variable ''y''

    '
  timestamp: 1659976842
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var res\
    \ = (long)x;\n        var shiftVal = shift - ((long)Math.Ceiling(Math.Log10(x)));\n\
    \        res = res / shiftVal * shiftVal;\n        var reverseRes = (int)(res\
    \ % shiftVal);\n        var str = new StringBuilder();\n        foreach(var r\
    \ in reverseRes) {\n            str.Append((char)r);\n        }\n        return\
    \ str.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp48_g87rc.cs(22,26): error CS1579: foreach statement cannot operate on
    variables of type ''int'' because ''int'' does not contain a public instance definition
    for ''GetEnumerator''

    '
  timestamp: 1659976842
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        // Convert\
    \ long to an array of digits.\n        long[] digits = new long[26];\n       \
    \ for (int i = digits.Length - 1; i >= 0; i--)\n            digits[i] = x % 10;\n\
    \        // Circular-shift digits, leaving least significant digit in place\n\
    \        // and insert 0 in front. Pre-increment to prevent pre-decrement.\n \
    \       for (int i = shift, j = 0; i < digits.Length; i++)\n            digits[i]\
    \ = (digits[i] << 1) + digits[i + 1] + j++;\n        // Reverse digits and convert\
    \ to string.\n        char[] result = new char[digits.Length];\n        for (int\
    \ i = digits.Length - 1; i >= 0; i--)\n            result[i] = (char)(digits[i]\
    \ % 10 + '0');\n        return new string(result);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw4y63xl4.cs(23,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976842
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        do {\n            if (shift > 0) {\n    \
    \            sb.Append((x % 10) + \"\");\n                x /= 10;\n         \
    \       --shift;\n            }\n            else {\n                sb.Append((x\
    \ % 10).ToString().ToLowerInvariant());\n                x /= 10;\n          \
    \      ++shift;\n            }\n        } while (shift > 0);\n        return sb.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eafdb2f497cc47529f89e824687451a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eafdb2f497cc47529f89e824687451a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        int shift\
    \ = shift % 10;\n        long mask = (long) Math.Pow(10, shift + 1);\n       \
    \ // Compute x's digits modulo 10^shift.\n        long y = (long) (x / mask) %\
    \ 10;\n\n        // Shift the digits from right by shift places.\n        x =\
    \ x - (mask * y);\n        // Append the shifted digits.\n        return x + ((long)\
    \ Math.Pow(10, shift)) % 10;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt6ri3sfu.cs(17,13): error CS0136: A local or parameter named ''shift''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpt6ri3sfu.cs(25,16): error CS0029: Cannot implicitly convert type ''long''
    to ''string''

    /tmp/tmpt6ri3sfu.cs(17,21): error CS0165: Use of unassigned local variable ''shift''

    '
  timestamp: 1659976842
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ == 0) return \"\" + x;\n        StringBuilder sb = new StringBuilder();\n  \
    \      long div = x / (long)Math.Pow(10, shift * 10);\n        long rem = (x -\
    \ div * Math.Pow(10, shift * 10));\n        do {\n            if (shift > sb.Length)\
    \ sb.Append(rem % 10);\n            shift -= 1;\n            rem = rem / 10;\n\
    \        } while (rem != 0);\n        sb.Append(rem);\n        return sb.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplofx6lpp.cs(20,21): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976842
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ result;\n        long totalDigits = (int)(Math.Floor(Math.Log10(shift)));\n\
    \        string shifted = x.ToString(\"N\" + totalDigits);\n        shifted =\
    \ shifted.Substring(0, shifted.Length - totalDigits);\n        string reversed\
    \ = shifted.Reverse().Aggregate((s, t) => s + t);\n        long startIndex = reversed.Length\
    \ - totalDigits;\n        long endIndex = reversed.Length;\n        string shiftString\
    \ = shifted.Substring(startIndex, totalDigits);\n        result = reversed.Substring(0,\
    \ startIndex) + shiftString;\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpswq6xs68.cs(20,40): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpswq6xs68.cs(21,65): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpswq6xs68.cs(21,65): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    /tmp/tmpswq6xs68.cs(24,48): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpswq6xs68.cs(24,60): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpswq6xs68.cs(25,40): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976843
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        StringBuilder\
    \ result = new StringBuilder();\n        long carry = 0;\n        long digit;\n\
    \        int digits;\n\n        if (shift > Math.Abs(x)) {\n            digits\
    \ = -shift;\n            x = x / x;\n            shift = shift / x;\n        }\n\
    \        else {\n            digits = shift;\n        }\n\n        while ((x %\
    \ 10L) != 0) {\n            digit = x / 10L;\n            carry = 10L * (x / 10L);\n\
    \            x = digit;\n            digits = digits - 1;\n            result.Append((long)\
    \ carry);\n        }\n        while ((digits > 0) && (x % 10L) != 0) {\n     \
    \       digit = x / 10L;\n            carry = 10L * (x / 10L);\n            x\
    \ = digit;\n            result.Append((long) carry);\n            digits--;\n\
    \        }\n        result.Append((long) x);\n        string reverse = result.ToString().ToUpper();\n\
    \n        if (carry != 0) {\n            reverse = reverse.Insert(reverse.Length,\
    \ \"1\");\n        }\n\n        return reverse;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpthzqgsxd.cs(23,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpthzqgsxd.cs(28,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976843
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long[]\
    \ nums = new long[] {\n            x % 10000000, // 100000\n            (x % 100000)\
    \ % 1000000, // 10000\n            (x % 10000) % 100000, // 1000\n           \
    \ (x % 1000) % 10000, // 100\n            (x % 100) % 1000, // 10\n          \
    \  x % 10, // 1\n        };\n        if (shift == 0)\n            return nums.Reverse().Aggregate(\"\
    \", (cur, next) => cur + next.ToString());\n        if (shift > nums.Length -\
    \ 1)\n            return nums.Reverse().Aggregate(\"\", (cur, next) => cur + next.ToString());\n\
    \        long digit = nums[shift];\n        if (digit > 9)\n            return\
    \ nums.Reverse().Aggregate(\"\", (cur, next) => cur + next.ToString());\n    \
    \    if (shift == nums.Length - 1)\n            return nums.Aggregate(\"\", (cur,\
    \ next) => cur + next.ToString());\n        return nums.Skip(shift).Aggregate(\"\
    \", (cur, next) => cur + next.ToString()) +\n            CircularShift(digit,\
    \ shift + 1).Aggregate(\"\", (cur, next) => cur + next.ToString());\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp77us75m9.cs(34,26): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976843
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        // Initialize\
    \ result string\n        string result = \"\";\n        // Count digits\n    \
    \    int digits = (int)Math.Floor(Math.Log10(Math.Abs(x)));\n        // Shift\
    \ left or right by shift digits\n        if (shift > digits) {\n            //\
    \ Shift right\n            for (int i = digits - 1; i >= shift; --i)\n       \
    \         result += (char)((x >> i) & 1);\n        }\n        else {\n       \
    \     // Shift left\n            for (int i = 0; i < shift; ++i)\n           \
    \     result += (char)((x >> i) & 1);\n        }\n        // Return result\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5203145bf1dc43e7a5e4d9e9563b67b1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5203145bf1dc43e7a5e4d9e9563b67b1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var result\
    \ = \"\";\n        string digits = \"0123456789\";\n        while (shift > 0)\
    \ {\n            int digit = (int) (digits [x % (digits.Length - 1)]);\n     \
    \       result += digit + (digits [(x /= (digits.Length - 1)) % digits.Length]);\n\
    \            shift -= digits.Length;\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnb_3r_5e.cs(20,40): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpnb_3r_5e.cs(21,40): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976843
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        // convert\
    \ x to a string and get the digits\n        string s = x.ToString();\n       \
    \ int digitCount = s.Length;\n        if (shift > digitCount)\n            return\
    \ s.Reverse();\n\n        // Shift the digits right by shift position\n      \
    \  long[] digits = { 0 };\n        string result = \"\";\n        for (int i =\
    \ 0; i < digitCount; i++) {\n            // Shift digits right (divide by ten)\n\
    \            long digit = Convert.ToInt64(s[i]) * (Math.Pow(10, shift - i));\n\
    \            // Add digit to result\n            result += digit.ToString();\n\
    \        }\n        // Return the result as a string\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxk8dflln.cs(21,20): error CS0266: Cannot implicitly convert type ''System.Collections.Generic.IEnumerable<char>''
    to ''string''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpxk8dflln.cs(28,26): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976843
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ < 0)\n            throw new ArgumentOutOfRangeException(\"shift\", \"Shift must\
    \ not be negative.\");\n        if (shift > Math.Log10(x))\n            throw\
    \ new ArgumentOutOfRangeException(\"shift\", \"Shift must be less than or equal\
    \ to the number of digits in x.\");\n        if (shift == 0)\n            return\
    \ \"0\";\n        var s = x.ToString();\n        long result = 0;\n        foreach\
    \ (var c in s)\n            result = result * 10 + Convert.ToInt64(c);\n     \
    \   return result.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d092e1a4226f4bf99b4232a8e169aa48>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Shift must be less than or equal to the number\
    \ of digits in x.\nParameter name: shift\n  at Problem.CircularShift (System.Int64\
    \ x, System.Int64 shift) [0x00029] in <d092e1a4226f4bf99b4232a8e169aa48>:0 \n\
    \  at Problem.Main (System.String[] args) [0x0001b] in <d092e1a4226f4bf99b4232a8e169aa48>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Shift\
    \ must be less than or equal to the number of digits in x.\nParameter name: shift\n\
    \  at Problem.CircularShift (System.Int64 x, System.Int64 shift) [0x00029] in\
    \ <d092e1a4226f4bf99b4232a8e169aa48>:0 \n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <d092e1a4226f4bf99b4232a8e169aa48>:0 \n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        // Write\
    \ your code here\n        string s = \"\";\n        long digit;\n        for (int\
    \ i = 0; i < shift - 1; i++)\n        {\n            digit = x % 10;\n       \
    \     x /= 10;\n            s = digit + s;\n        }\n        digit = x % 10;\n\
    \        s = digit + s;\n        return s;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2b2dc46cc6bc4b55b57501c4bb62a36a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2b2dc46cc6bc4b55b57501c4bb62a36a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long\
    \ n = x;\n        // The number x is larger than the size of the long data type,\
    \ so we\n        // need to do the shift in chunks of digits. \n        string\
    \ result = \"\";\n        int maxDigits = (int) Math.Ceiling(Math.Log10(maxValue(x)));\n\
    \        for (int i = 0; i < maxDigits; i++) {\n            if (shift <= 0) {\n\
    \                break;\n            }\n            long digit = n / Math.Pow(10,\
    \ i + 1);\n            long remainder = n % Math.Pow(10, i + 1);\n           \
    \ n = remainder;\n            result += digit + \"\";\n            shift -= 1;\n\
    \        }\n        if (shift > 0) {\n            string reversed = result.Reverse();\n\
    \            int shiftDigits = maxDigits - shift;\n            int digitOffset\
    \ = maxDigits - shiftDigits;\n            int index = maxDigits - shift;\n   \
    \         if (digitOffset > 1) {\n                for (int i = index - digitOffset;\
    \ i > 0; i--) {\n                    reversed = reversed.Insert(i, \" \");\n \
    \               }\n            }\n            result += reversed;\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2gf5qn34.cs(21,55): error CS0103: The name ''maxValue'' does not exist
    in the current context

    /tmp/tmp2gf5qn34.cs(26,26): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp2gf5qn34.cs(27,30): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp2gf5qn34.cs(33,31): error CS0266: Cannot implicitly convert type ''System.Collections.Generic.IEnumerable<char>''
    to ''string''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp2gf5qn34.cs(34,31): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp2gf5qn34.cs(36,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976843
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        int count\
    \ = 0;\n        StringBuilder result = new StringBuilder();\n        long tmp\
    \ = x;\n        do {\n            count++;\n            tmp = tmp << 1;\n    \
    \    } while (tmp != 0);\n        // Shift more digits if shift is greater than\
    \ number of digits\n        if (shift > count) {\n            shift = count -\
    \ 1;\n        }\n        do {\n            if (shift < 0 || shift > count) {\n\
    \                throw new ArgumentOutOfRangeException(\"shift\");\n         \
    \   }\n            count--;\n            result.Append((int)((tmp >> shift) &\
    \ 0x1));\n            shift--;\n        } while (shift >= 0);\n        return\
    \ result.ToString();\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpecgbocst.cs(33,34): error CS0019: Operator ''>>'' cannot be applied to
    operands of type ''long'' and ''long''

    '
  timestamp: 1659976843
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long\
    \ tenMultiplier = 10L;\n        long tenPowerMultiplier = 100L;\n        long\
    \ tenDivMultiplier = 1000L;\n        long tenPowDivMultiplier = 10000L;\n    \
    \    StringBuilder sb = new StringBuilder();\n        long tenPowerDivisor;\n\
    \        long tenDiv;\n        long tenPowerDiv;\n\n        if (shift > 0)\n \
    \       {\n            tenPowerDivisor = (tenPowerMultiplier * shift);\n     \
    \       tenPowerDiv = (tenPowerDivMultiplier * shift);\n\n            do\n   \
    \         {\n                tenDiv = (x / tenPowerDivisor);\n               \
    \ tenDiv %= tenDivMultiplier;\n                tenPowerDiv = (tenPowerDiv / tenPowerDivisor);\n\
    \                tenPowerDiv %= tenPowDivMultiplier;\n                tenMultiplier\
    \ = tenMultiplier * tenPowerMultiplier;\n                tenDivisor = tenPowerDiv;\n\
    \                tenPowerMultiplier = tenPowerMultiplier * tenDivMultiplier;\n\
    \                tenPowerDivisor = tenPowerDiv;\n                sb.Append(tenMultiplier);\n\
    \                x = tenDiv;\n            } while ((tenPowerDiv != tenPowerDivisor)\
    \ && (tenDiv != tenDivMultiplier));\n\n            tenPowerDiv = (tenPowerDiv\
    \ / tenPowerDivisor);\n            tenPowerDiv %= tenPowDivMultiplier;\n     \
    \       tenMultiplier = tenMultiplier * tenPowerMultiplier;\n            tenDivisor\
    \ = tenPowerDiv;\n            tenPowerMultiplier = tenPowerMultiplier * tenDivMultiplier;\n\
    \            tenPowerDivisor = tenPowerDiv;\n            sb.Append(tenMultiplier);\n\
    \            x = tenDiv;\n\n            if (tenPowerDivisor != tenPowerDivisor)\n\
    \            {\n                sb.Append(tenPowerMultiplier);\n             \
    \   x = tenPowerDiv;\n            }\n        }\n\n        return Convert.ToString(sb);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1e2wze7r.cs(29,28): error CS0103: The name ''tenPowerDivMultiplier'' does
    not exist in the current context

    /tmp/tmp1e2wze7r.cs(38,17): error CS0103: The name ''tenDivisor'' does not exist
    in the current context

    /tmp/tmp1e2wze7r.cs(48,13): error CS0103: The name ''tenDivisor'' does not exist
    in the current context

    /tmp/tmp1e2wze7r.cs(54,17): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    '
  timestamp: 1659976843
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var str\
    \ = x.ToString();\n        if (x < 0) {\n            str = str.Reverse().ToString();\n\
    \        }\n        long result = x;\n        for (int i = 0; i < shift; i++)\
    \ {\n            result <<= 1;\n            result >>= 1;\n        }\n       \
    \ var s = result.ToString();\n        if (shift > str.Length) {\n            while\
    \ (s.Length > str.Length) {\n                s = s.Remove(s.Length - 1);\n   \
    \         }\n            s = s.PadLeft(str.Length, '0');\n        } else {\n \
    \           s = s.PadLeft(shift, '0');\n        }\n        return s;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxlsr_rx4.cs(33,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976843
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = string.Empty;\n        long digits = 0;\n        while (x > 0)\n       \
    \ {\n            digits = x % 10;\n            x /= 10;\n            s += ((digits\
    \ != 0) && (shift == 1) ? digits.ToString() : digits.ToString() + shift.ToString());\n\
    \            shift >>= 1;\n        }\n        long reverseShift = 0;\n       \
    \ while (shift > 0)\n        {\n            reverseShift *= 10;\n            reverseShift\
    \ += shift % 10;\n            shift /= 10;\n        }\n        return s + reverseShift.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d5855f50d094e438439b30dd17d8666>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d5855f50d094e438439b30dd17d8666>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = \"\";\n        long lastDigit = x % 10;\n        int zeros = 0;\n      \
    \  while (lastDigit != 0) {\n            int digit = lastDigit % 10;\n       \
    \     s += digit + \"\";\n            x /= 10;\n            lastDigit /= 10;\n\
    \            ++zeros;\n        }\n        int digits = x - shift + 1;\n      \
    \  if (digits > zeros) {\n            string digits1 = \"\";\n            while\
    \ (zeros > 0) {\n                digits1 += \"\";\n                --zeros;\n\
    \            }\n            digits = digits - zeros + 1;\n            while (digits\
    \ > zeros) {\n                s += digits1[digits - zeros];\n                digits\
    \ -= zeros;\n            }\n        } else if (digits < zeros) {\n           \
    \ string digits3 = \"\";\n            while (zeros > 0) {\n                digits3\
    \ += \"\";\n                --zeros;\n            }\n            digits = zeros\
    \ + digits + 1;\n            while (digits > 0) {\n                s += digits3[zeros\
    \ - digits];\n                digits -= zeros;\n            }\n        }\n   \
    \     s += lastDigit + \"\";\n        while (zeros > 0) {\n            s += \"\
    0\";\n            --zeros;\n        }\n        s = \"0\" + s;\n        return\
    \ s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxcvwrq1s.cs(21,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpxcvwrq1s.cs(27,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976843
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var sb\
    \ = StringBuilder.newBuilder();\n        while (shift > 0)\n        {\n      \
    \      var remainder = x % 10;\n            x /= 10;\n            sb.Append(remainder);\n\
    \            shift -= 1;\n        }\n        return sb.ToString();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1wesz_3b.cs(17,32): error CS0117: ''StringBuilder'' does not contain a
    definition for ''newBuilder''

    '
  timestamp: 1659976843
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ digits = x.ToString();\n        int result = 0;\n        for (int i = 0; i <\
    \ shift.ToString().Length; i++) {\n            result |= (digits.IndexOf(digits.Substring(i,\
    \ 1)) << i);\n        }\n        return (result.ToString());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <57e0da56e7e34d18912382146d835860>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <57e0da56e7e34d18912382146d835860>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = \"\";\n        while (x > 0) {\n            s = s + x%10;\n            x\
    \ /= 10;\n        }\n        if (shift > s.Length)\n            shift = s.Length;\n\
    \        x <<= shift;\n        char[] digits = s.ToCharArray();\n        Array.Reverse(digits);\n\
    \        s = new string(digits);\n        return s;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgtuzqw34.cs(24,9): error CS0019: Operator ''<<='' cannot be applied to
    operands of type ''long'' and ''long''

    '
  timestamp: 1659976843
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ > Math.Abs(x)) {\n            throw new ArgumentException(\"shift must be <=\
    \ absolute value of x.\");\n        }\n        StringBuilder sb = new StringBuilder();\n\
    \        while (x > 0) {\n            sb.Append((char)(x%10));\n            x\
    \ /= 10;\n        }\n        for (int i = sb.Length-1; i >= shift; i--) {\n  \
    \          sb.Insert(i, (char)(sb.Length-i - 1));\n        }\n        return sb.reverse().ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqlca7jly.cs(28,19): error CS1061: ''StringBuilder'' does not contain a
    definition for ''reverse'' and no accessible extension method ''reverse'' accepting
    a first argument of type ''StringBuilder'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1659976843
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ == 0) return \"\";\n        if (shift == 1) return x.ToString();\n\n       \
    \ int shift = shift % x.ToString().Length;\n\n        StringBuilder sb = new StringBuilder(x.ToString().Length);\n\
    \n        for (int i = 0; i < x.ToString().Length; i++) {\n            if (i ==\
    \ shift) {\n                sb.Append(x.ToString()[i]);\n            }\n     \
    \       else {\n                sb.Append(x.ToString()[i]);\n            }\n \
    \       }\n\n        if (shift > x.ToString().Length) sb.Append(x.ToString().Reverse().ToString());\n\
    \n        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb9cabbex.cs(17,13): error CS0841: Cannot use local variable ''shift''
    before it is declared

    /tmp/tmpb9cabbex.cs(18,13): error CS0841: Cannot use local variable ''shift''
    before it is declared

    /tmp/tmpb9cabbex.cs(20,13): error CS0136: A local or parameter named ''shift''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659976843
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        // TODO:\
    \ Your code here\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1e048c96deb8404db91d85bcd1a92a3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1e048c96deb8404db91d85bcd1a92a3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        // If\
    \ shift > number of digits, return digits reversed.\n        if (shift > Math.Abs(x))\
    \ shift = shift % x.ToString().Length;\n\n        // If shift is 0, just return\
    \ the digits as a string.\n        if (shift == 0) return x.ToString();\n\n  \
    \      // Make sure x is represented as a string first\n        string xAsString\
    \ = x.ToString();\n\n        // Initialize result as empty string\n        string\
    \ result = \"\";\n\n        // Shift right\n        for (int i = shift, j = 0;\
    \ i <= Math.Abs(xAsString.Length); i++) {\n            long digit = Convert.ToInt64(xAsString,\
    \ i) % 10;\n            result += (char)digit;\n        }\n\n        // Return\
    \ digits reversed\n        if (result.Length > shift) result = result.Substring(0,\
    \ shift) + result.Substring(shift);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0219fpyp.cs(30,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp0219fpyp.cs(36,65): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp0219fpyp.cs(36,91): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp0219fpyp.cs(30,29): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    '
  timestamp: 1659976843
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        // The\
    \ result is a string: digits + the leading zeroes.\n        var result = \"\"\
    ;\n\n        while (shift > 0) {\n            if (shift > 1000000000)\n      \
    \          throw new OverflowException(\"Too many digits shifted.\");\n\n    \
    \        var digit = (x % 10L) / 10;\n            x = x % 10;\n            if\
    \ (digit > 9)\n                result += ((long) digit).ToString(\"000000000\"\
    );\n            else\n                result += digit.ToString(\"00000000\");\n\
    \            shift -= 10;\n        }\n\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0af36792e2ae46308f6c204fcc82413d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0af36792e2ae46308f6c204fcc82413d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976843
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ digits = x.ToString();\n        long result = 0;\n        int shiftBits = int.Parse(shift.ToString());\n\
    \        for (int i = 0; i < shiftBits; i++)\n            result += (long.Parse(digits.Substring(0,\
    \ digits.Length - 1) + digits.Substring(digits.Length - 1, 1))) << (i + 1);\n\
    \        return (result % (long)Math.Pow(10, digits.Length - 1)) + digits.Substring(digits.Length\
    \ - 1, 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eabc85479bc5487980f77461b0cc5be2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eabc85479bc5487980f77461b0cc5be2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        int len\
    \ = Convert.ToInt32(Math.Ceiling((decimal)Math.Log(x.ToString(\"n0\"), 10)));\n\
    \        string result = new StringBuilder(len).ToString();\n        string temp\
    \ = Convert.ToString(0);\n        long result = x;\n        while (result != 0)\
    \ {\n            temp += result;\n            result /= 10;\n        }\n     \
    \   for (int i = len - 1; i >= 0; i--) {\n            result *= 10;\n        \
    \    result += temp[len - (i + 1)];\n            temp[i] = temp[len - (i + 1)];\n\
    \        }\n        for (int i = 0; i < len; i++) {\n            temp[i] = temp[i].ToString();\n\
    \        }\n        result = temp[0].ToString() + result;\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_oexf9dn.cs(17,66): error CS1503: Argument 1: cannot convert from ''string''
    to ''double''

    /tmp/tmp_oexf9dn.cs(20,14): error CS0128: A local variable or function named ''result''
    is already defined in this scope

    /tmp/tmp_oexf9dn.cs(21,16): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''string'' and ''int''

    /tmp/tmp_oexf9dn.cs(23,13): error CS0019: Operator ''/='' cannot be applied to
    operands of type ''string'' and ''int''

    /tmp/tmp_oexf9dn.cs(26,13): error CS0019: Operator ''*='' cannot be applied to
    operands of type ''string'' and ''int''

    /tmp/tmp_oexf9dn.cs(28,13): error CS0200: Property or indexer ''string.this[int]''
    cannot be assigned to -- it is read only

    /tmp/tmp_oexf9dn.cs(31,13): error CS0200: Property or indexer ''string.this[int]''
    cannot be assigned to -- it is read only

    '
  timestamp: 1659976843
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        char[]\
    \ result = new char[(int) Math.Ceiling(Math.Log10(shift))];\n        string digits;\n\
    \n        for (int pos = (int) Math.Ceiling(Math.Log10(shift)); pos >= 0; --pos)\
    \ {\n            digits = Convert.ToString(x % 10);\n            x /= 10;\n  \
    \          int digitpos = (int) pos;\n\n            while (digitpos >= 0 && digitpos\
    \ < result.Length)\n                result[digitpos--] = digits[digitpos];\n \
    \       }\n\n        return new string(result);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.CircularShift (System.Int64 x, System.Int64\
    \ shift) [0x0003b] in <99d20bbba5884d3fae231b81744333a2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <99d20bbba5884d3fae231b81744333a2>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.CircularShift (System.Int64 x,\
    \ System.Int64 shift) [0x0003b] in <99d20bbba5884d3fae231b81744333a2>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x00001] in <99d20bbba5884d3fae231b81744333a2>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        // TODO:\
    \ Fix negative shift\n        // TODO: Fix overflow for shifting by 0\n      \
    \  // TODO: Test this implementation\n        if (x < 0 || shift < 0) {\n    \
    \        throw new Exception(\"Both x and shift must be non-negative\");\n   \
    \     }\n        int size = x.ToString().Length;\n        if (shift > size) {\n\
    \            throw new Exception(\"The shifting amount must be less than the length\
    \ of the number\");\n        }\n        string s = \"\";\n        while (shift\
    \ > 0) {\n            if (shift > size) {\n                s = s.Substring(0,\
    \ size - 1) + s.Substring(size - 1, 1);\n                shift -= size;\n    \
    \        } else {\n                s = s.Insert(size, \"0\");\n            }\n\
    \        }\n        s = s.Reverse();\n        return s;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvrzauyih.cs(36,13): error CS0266: Cannot implicitly convert type ''System.Collections.Generic.IEnumerable<char>''
    to ''string''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976843
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        char[]\
    \ digits = x.ToString(\"N2\").ToCharArray();\n        char[] reversedDigits =\
    \ new char[digits.Length];\n        int pos = 0;\n        while (pos < digits.Length)\
    \ {\n            if (pos == shift)\n                reversedDigits[pos] = digits[pos];\n\
    \            else\n                reversedDigits[pos] = digits[pos];\n      \
    \      pos++;\n        }\n        return new string(reversedDigits);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8eeea8033de84c7abd3898842fc3cc44>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8eeea8033de84c7abd3898842fc3cc44>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = Convert.ToString(x);\n        int shift = Convert.ToInt32(shift);\n    \
    \    if (shift > s.Length) shift = s.Length - shift;\n        StringBuilder ss\
    \ = new StringBuilder(s.Length + shift);\n        for (int i = 0; i < s.Length;\
    \ i++)\n            sb.Append(Convert.ToChar(s.CharAt(i) + s.CharAt(i + shift)));\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9cdp7pv5.cs(18,13): error CS0136: A local or parameter named ''shift''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp9cdp7pv5.cs(22,13): error CS0103: The name ''sb'' does not exist in the
    current context

    /tmp/tmp9cdp7pv5.cs(22,40): error CS1061: ''string'' does not contain a definition
    for ''CharAt'' and no accessible extension method ''CharAt'' accepting a first
    argument of type ''string'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmp9cdp7pv5.cs(22,54): error CS1061: ''string'' does not contain a definition
    for ''CharAt'' and no accessible extension method ''CharAt'' accepting a first
    argument of type ''string'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmp9cdp7pv5.cs(23,16): error CS0103: The name ''sb'' does not exist in the
    current context

    /tmp/tmp9cdp7pv5.cs(18,37): error CS0165: Use of unassigned local variable ''shift''

    '
  timestamp: 1659976843
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ == 0)\n            return \"0\";\n        string s = String.Empty;\n       \
    \ long n = 0;\n        do {\n            n += shift & x; // move right\n     \
    \       shift >>= 1; // move left\n            s += Convert.ToString(n % 10);\n\
    \        } while (shift > 0);\n        if ((x & 1) == 0)\n            s = \"1\"\
    \ + s;\n        else\n            s = s.Reverse();\n        return s;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1sruvnmt.cs(29,17): error CS0266: Cannot implicitly convert type ''System.Collections.Generic.IEnumerable<char>''
    to ''string''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976843
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var result\
    \ = \"\";\n        while (shift > 0) {\n            var digit = x % 10;\n    \
    \        if (digit != 0) {\n                result += (char)(((int)digit) + shift);\n\
    \            }\n            x /= 10;\n            shift /= 10;\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b64ff4dd4bdb4a4fb6777e461a7fbfdd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b64ff4dd4bdb4a4fb6777e461a7fbfdd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976844
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ result = \"\";\n\n        // TODO: This can be optimized by using BigInteger,\n\
    \        // but we need to use strings for now. Can we refactor this?\n\n    \
    \    long xDigits = LongDigits(x);\n        long shiftDigits = LongDigits(shift);\n\
    \n        if (shiftDigits == 0) {\n            Console.WriteLine(\"0\");\n   \
    \         return string.Empty;\n        }\n\n        if (xDigits == 0 || shiftDigits\
    \ == 0) {\n            Console.WriteLine(\"1\");\n            return string.Empty;\n\
    \        }\n\n        if (xDigits == shiftDigits) {\n            Console.WriteLine(\"\
    2\");\n            result = x.ToString();\n            return result;\n      \
    \  }\n\n        if (shiftDigits > xDigits) {\n            Console.WriteLine(\"\
    3\");\n            result = x.ToString();\n            return result;\n      \
    \  }\n\n        // If shift > xDigits, we need to reverse digits of x.\n     \
    \   BigInteger shiftBig = new BigInteger(shift.ToString());\n        BigInteger\
    \ xBig = new BigInteger(x.ToString());\n\n        BigInteger lastDigit;\n\n  \
    \      BigInteger xFirstDigit = xBig.Subtract(shiftBig);\n\n        // If lastDigit\
    \ is 0, shift is 0.\n        if (BigInteger.Zero == xFirstDigit) {\n         \
    \   Console.WriteLine(\"4\");\n            result = string.Empty;\n          \
    \  return result;\n        }\n\n        if (xFirstDigit.CompareTo(BigInteger.One)\
    \ > 0) {\n            lastDigit = xFirstDigit;\n            xFirstDigit = xBig;\n\
    \        } else {\n            lastDigit = xFirstDigit.Negate();\n        }\n\n\
    \        long lastDigitDigits = LongDigits(lastDigit);\n\n        for (int i =\
    \ xDigits - 1; i >= 0; i--) {\n            BigInteger xDigit = new BigInteger(x.ToString());\n\
    \            xDigit.Multiply(xFirstDigit);\n            xDigit.Add(xFirstDigit.Negate());\n\
    \            BigInteger result = xDigit.Divide(shiftBig);\n            if (result.CompareTo(BigInteger.One)\
    \ > 0) {\n                result = result.Negate();\n            }\n\n       \
    \     string digit = result.ToString();\n\n            if (i < lastDigitDigits)\
    \ {\n                digit += lastDigit.ToString();\n            }\n\n       \
    \     result += digit;\n            lastDigit = result;\n        }\n\n       \
    \ return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp99tkdluu.cs(22,24): error CS0103: The name ''LongDigits'' does not exist
    in the current context

    /tmp/tmp99tkdluu.cs(23,28): error CS0103: The name ''LongDigits'' does not exist
    in the current context

    /tmp/tmp99tkdluu.cs(48,46): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    /tmp/tmp99tkdluu.cs(49,42): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    /tmp/tmp99tkdluu.cs(53,39): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''right'' of ''BigInteger.Subtract(BigInteger,
    BigInteger)''

    /tmp/tmp99tkdluu.cs(66,37): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''value'' of ''BigInteger.Negate(BigInteger)''

    /tmp/tmp99tkdluu.cs(69,32): error CS0103: The name ''LongDigits'' does not exist
    in the current context

    /tmp/tmp99tkdluu.cs(71,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp99tkdluu.cs(72,48): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    /tmp/tmp99tkdluu.cs(73,20): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''right'' of ''BigInteger.Multiply(BigInteger,
    BigInteger)''

    /tmp/tmp99tkdluu.cs(74,36): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''value'' of ''BigInteger.Negate(BigInteger)''

    /tmp/tmp99tkdluu.cs(75,24): error CS0136: A local or parameter named ''result''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp99tkdluu.cs(75,40): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''divisor'' of ''BigInteger.Divide(BigInteger,
    BigInteger)''

    /tmp/tmp99tkdluu.cs(77,33): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''value'' of ''BigInteger.Neg'
  timestamp: 1659976843
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        int maxShift\
    \ = (int)Math.Pow(10, (int)Math.Log10(Math.Abs(x)));\n        if (shift > maxShift)\n\
    \            return x.ToString();\n\n        long reversedShift = ((long)(((long)1\
    \ << shift) - 1));\n\n        // Store the digits of the number in an array of\
    \ longs. These will be shifted to\n        // the left and then joined into one\
    \ long string at the end.\n        long[] digits = new long[(long)Math.Ceiling((double)x\
    \ / Math.Pow(10, shift))];\n        for (int i = 0; i < digits.Length; i++)\n\
    \            digits[i] = (long)Math.Ceiling((double)x * Math.Pow(10, shift)) /\
    \ Math.Pow(10, shift);\n\n        // Shift the digits from the right to the left.\
    \ \n        for (int i = digits.Length - 1; i >= 0; i--)\n            digits[i]\
    \ = digits[i] - reversedShift * digits[digits.Length - 1 - i];\n\n        // Shift\
    \ the digits from the left to the right. \n        for (int i = 0; i < digits.Length;\
    \ i++)\n            digits[i] = digits[i] + reversedShift * digits[digits.Length\
    \ - 1 - i];\n\n        string result = \"\";\n        for (int i = 0; i < digits.Length;\
    \ i++) {\n            result += digits[i].ToString();\n        }\n\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3bxrbhn2.cs(21,39): error CS0019: Operator ''<<'' cannot be applied to
    operands of type ''long'' and ''long''

    /tmp/tmp3bxrbhn2.cs(27,25): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976843
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = \"\";\n        long n = (long)Math.Pow(10, shift.ToString().Length);\n \
    \       long m = Math.Floor(x);\n        long r = x;\n        for (long i = 1;\
    \ i <= shift; i++) {\n            long j = (long)(((m / n) * n) % n);\n      \
    \      long tmp = r / n;\n            r = (long)(tmp * ((double)j % n));\n   \
    \         s += Convert.ToString(j, 10);\n        }\n        return s + Convert.ToString(r,\
    \ 10);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_q3adt7z.cs(19,23): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Floor(decimal)'' and ''Math.Floor(double)''

    '
  timestamp: 1659976843
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        // Shift\
    \ digits by shift times the length of the digits to shift by.\n        long shiftDigits\
    \ = shift / Math.Pow(10, shift.ToString().Length);\n\n        // Convert the integer\
    \ to an array of characters.\n        char[] digitsAsChars = x.ToString().ToCharArray();\n\
    \        List<char> digitsAsList = digitsAsChars.ToList();\n\n        // Circulate\
    \ through the digits array.\n        for (int i = digitsAsList.Count - 1; i >=\
    \ 0; i--) {\n            // Shift the digit to the left by shiftDigits.\n    \
    \        char shiftedDigit = digitsAsList[i + shiftDigits];\n            digitsAsList[i\
    \ + shiftDigits] = digitsAsList[i];\n            digitsAsList[i] = shiftedDigit;\n\
    \        }\n\n        // Convert the digits back to a string and return it.\n\
    \        return string.Join(\"\", digitsAsList.ToArray());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl53gb6vt.cs(18,28): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpl53gb6vt.cs(27,46): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpl53gb6vt.cs(28,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976844
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ > long.MaxValue) return string.Empty;\n        // If shift is 0, return x.\n\
    \        if (shift == 0) return x.ToString();\n        // Find the length of the\
    \ digits of the result.\n        int resultLength = Convert.ToInt32(Math.Floor(Math.Log10(shift\
    \ + 1)));\n        // Find the digits of the right shift. \n        // This assumes\
    \ that the number is in base 10.\n        long shiftDigits = shift / Math.Pow(10,\
    \ resultLength);\n        // Convert the long number to a string.\n        string\
    \ result = x.ToString();\n        // Shift each digit to the left of the shiftDigits\
    \ position. \n        for (int i = 0; i < resultLength; i++) {\n            result\
    \ = result.Substring(0, result.Length - 1) + result.Substring(result.Length -\
    \ 1);\n            if (i < shiftDigits) {\n                result = result + shiftDigits.ToString();\n\
    \            }\n        }\n        // Return the result.\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp451_hzmz.cs(24,28): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976843
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        // Convert\
    \ the input to a string\n        var s = x.ToString();\n        // Convert the\
    \ number to a string array\n        var digits = s.Select(d => d.ToString()).ToArray();\n\
    \        // Get the length of digits\n        var n = digits.Length;\n       \
    \ // Shift the digits right by shift\n        for (int i = n - 1; i >= shift;\
    \ i--)\n            digits[i] = digits[i - shift];\n        // Shift them back\
    \ by shift\n        for (int i = shift; i < n; i++)\n            digits[i - shift]\
    \ = digits[i];\n        // Convert the number to a string \n        return String.Join(\"\
    \", digits);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmupcnm0r.cs(27,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976844
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ < 0) {\n            shift = 0;\n        }\n        long remainder = x % 10;\n\
    \        int digitsBefore = (int) (x / 10);\n        int digitsToShift = shift\
    \ - (int)shift;\n        int digitsAfter = digitsToShift;\n        if (digitsBefore\
    \ < digitsToShift) {\n            digitsAfter = digitsBefore;\n        }\n   \
    \     StringBuilder sb = new StringBuilder();\n        if (digitsBefore >= 0)\
    \ {\n            // Shift left so digits before are zero\n            for (int\
    \ i = digitsBefore; i < digitsToShift; i++) {\n                sb.Append(0);\n\
    \            }\n        }\n        // Shift right to insert zeros after digits\n\
    \        for (int i = 0; i < digitsToShift; i++) {\n            sb.Append(0);\n\
    \        }\n        for (int i = 0; i < digitsAfter; i++) {\n            sb.Append(remainder);\n\
    \            remainder = x % 10;\n            x /= 10;\n        }\n        return\
    \ sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp42397u1f.cs(22,29): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976844
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        // Shift\
    \ the digits of the number x right by shift.\n        string result = \"\";\n\
    \        while (shift > 0) {\n            int digit = x % 10;\n            int\
    \ shift = shift % 10;\n            x /= 10;\n            x += digit;\n       \
    \     shift /= 10;\n            result += shift.ToString();\n        }\n     \
    \   // If the number was a power of two, then return it reversed.\n        if\
    \ ((x & (x - 1)) == 0) {\n            result = result[0].ToString() + result.Substring(1);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwe3vwekd.cs(20,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpwe3vwekd.cs(21,17): error CS0136: A local or parameter named ''shift''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpwe3vwekd.cs(21,25): error CS0165: Use of unassigned local variable ''shift''

    '
  timestamp: 1659976844
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long\
    \ remainder = x % 10;\n        string result = \"\";\n\n        long digit = 0;\n\
    \        while (remainder != 0) {\n            digit = remainder;\n          \
    \  remainder = x % 10;\n            result += (char)((digit << shift) + remainder);\n\
    \            x /= 10;\n        }\n\n        if (result == \"\") {\n          \
    \  result = String.Empty;\n        }\n\n        int remainderCount = result.Length;\n\
    \        if (shift > remainderCount) {\n            shift = remainderCount;\n\
    \        }\n\n        int charCount = result.Length - shift;\n        char[] charArray\
    \ = result.ToCharArray();\n        for (int i = 0; i < charCount; i++) {\n   \
    \         charArray[i + shift] = charArray[i];\n        }\n\n        return new\
    \ string(charArray);\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp60m5xgq.cs(24,31): error CS0019: Operator ''<<'' cannot be applied to
    operands of type ''long'' and ''long''

    /tmp/tmpp60m5xgq.cs(37,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976844
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        StringBuilder\
    \ digits = new StringBuilder();\n\n        // Get the number of digits in x\n\
    \        int digitsCount = Convert.ToInt32(Math.Floor(Math.Log10(x)));\n     \
    \   // Get the number of digits in shift\n        int shiftCount = Convert.ToInt32(Math.Floor(Math.Log10(shift)));\n\
    \        // Shift right, then left\n        for (int i = 0; i < shiftCount; i++)\
    \ {\n            digits.Append((x >> shiftCount) % (long) 10);\n            x\
    \ <<= 1;\n        }\n        // Shift left, then right\n        for (int i = 0;\
    \ i < digitsCount; i++) {\n            digits.Append((x >> shift) % (long) 10);\n\
    \            x >>= 1;\n        }\n\n        // Convert from StringBuilder to string\n\
    \        return digits.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6f3r50b4.cs(30,28): error CS0019: Operator ''>>'' cannot be applied to
    operands of type ''long'' and ''long''

    '
  timestamp: 1659976844
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long\
    \ mask = 0x8000000000000000L;\n        long shifted = 0;\n        long reversed\
    \ = 0;\n        while (shift > 0) {\n            shifted = (x & mask) << shift;\n\
    \            reversed = reversed | (shifted >> shift);\n            x >>= shift;\n\
    \            shift -= 8;\n        }\n        return reversed.ToString();\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy6w6d4nb.cs(17,21): error CS0266: Cannot implicitly convert type ''ulong''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpy6w6d4nb.cs(21,23): error CS0019: Operator ''<<'' cannot be applied to
    operands of type ''long'' and ''long''

    /tmp/tmpy6w6d4nb.cs(22,36): error CS0019: Operator ''>>'' cannot be applied to
    operands of type ''long'' and ''long''

    /tmp/tmpy6w6d4nb.cs(23,13): error CS0019: Operator ''>>='' cannot be applied to
    operands of type ''long'' and ''long''

    '
  timestamp: 1659976844
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ digits = Convert.ToString(x, 10);\n        StringBuilder sb = new StringBuilder();\n\
    \        foreach (char c in digits)\n            sb.Append(Convert.ToString(c));\n\
    \        for (int i = shift, iMax = digits.Length; i >= shift; i--)\n        {\n\
    \            int d = Convert.ToInt32(digits[i - shift]);\n            int n =\
    \ (int)(d % 10);\n            sb.Insert(i - shift, Convert.ToString(n));\n   \
    \     }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpljdkitt9.cs(21,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpljdkitt9.cs(23,44): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpljdkitt9.cs(25,23): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976844
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var digits\
    \ = BitConverter.GetBytes(x);\n        digits = digits.Reverse();\n        for\
    \ (int i = 0; i < shift; i++) {\n            shiftDigits(digits, shift);\n   \
    \     }\n        var result = BitConverter.ToString(digits).Replace(\"-\", \"\"\
    );\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm5rl76n8.cs(18,18): error CS0266: Cannot implicitly convert type ''System.Collections.Generic.IEnumerable<byte>''
    to ''byte[]''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpm5rl76n8.cs(20,13): error CS0103: The name ''shiftDigits'' does not exist
    in the current context

    '
  timestamp: 1659976844
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long\
    \ shiftDig = shift % 10;\n        long shiftRest = shift - shiftDig;\n\n     \
    \   // If shift is 0, just return digits.\n        if (shiftRest == 0) {\n   \
    \         // Cast to int because C# is stupid and won't compile for shift > int.\n\
    \            return x.ToString();\n        }\n\n        // Store digits in an\
    \ array for easier iteration.\n        long[] digits = long.Parse(x.ToString()).ToCharArray();\n\
    \n        // Shift digits to the right by shift digits and return the result.\n\
    \        string result = \"\";\n        for (int i = 0; i < shiftDig; i++) {\n\
    \            result += (digits[shiftDig - i - 1] + shiftRest).ToString();\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7fvxv72m.cs(27,50): error CS1061: ''long'' does not contain a definition
    for ''ToCharArray'' and no accessible extension method ''ToCharArray'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659976844
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ result = \"\";\n        if (shift >= 0) {\n            while (shift >= 0) {\n\
    \                result += (x % 10).ToString();\n                x /= 10;\n  \
    \              shift -= 1;\n            }\n        }\n        else {\n       \
    \     while (shift < 0)\n                result += (x % 10).ToString();\n    \
    \        x /= 10;\n            shift += 1;\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f066c1cf98e6434c873cfad7bd93f7d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f066c1cf98e6434c873cfad7bd93f7d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976844
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var chars\
    \ = x.ToString().ToCharArray();\n        var charArray = new char[shift / 2];\n\
    \        for (var i = 0; i != chars.Length; ++i) {\n            var a = chars[i]\
    \ - '0';\n            var b = chars[(i + 1) % chars.Length] - '0';\n         \
    \   charArray[i] = (b << shift) | (a >> shift);\n        }\n        return new\
    \ string(charArray);\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuzvzk1b6.cs(22,29): error CS0019: Operator ''<<'' cannot be applied to
    operands of type ''int'' and ''long''

    /tmp/tmpuzvzk1b6.cs(22,44): error CS0019: Operator ''>>'' cannot be applied to
    operands of type ''int'' and ''long''

    '
  timestamp: 1659976844
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long\
    \ shift = shift % x.ToString().Length;\n        long rem = x - shift;\n      \
    \  return x.ToString().Substring(shift, x.ToString().Length - shift) + rem.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfkk0gy86.cs(17,14): error CS0136: A local or parameter named ''shift''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpfkk0gy86.cs(19,39): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpfkk0gy86.cs(19,46): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpfkk0gy86.cs(17,22): error CS0165: Use of unassigned local variable ''shift''

    '
  timestamp: 1659976844
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long\
    \ xDigits = Math.Pow(10, (int)Math.Log10(Math.Abs(x)));\n        long shift =\
    \ Math.Abs(shift);\n        long shiftDigits = Math.Pow(10, (int)Math.Log10(shift));\n\
    \        string xStr = x.ToString();\n        string result = \"\";\n        //\
    \ If the shift of shift is less than the number of\n        // digits, we are\
    \ done.\n        if (shift < xDigits) {\n            // If the shift of shift\
    \ is less than the number of\n            // digits, we reverse the digits from\
    \ right to left.\n            if (shift > xDigits) {\n                shiftDigits\
    \ = 1;\n                shift = 0;\n            } else {\n                shiftDigits\
    \ = Math.Pow(10, (int)Math.Log10(shift));\n            }\n            for (int\
    \ i = xDigits-shiftDigits; i >= 0; i--) {\n                result += xStr[(i+shift)\
    \ % xDigits];\n            }\n        } else {\n            // If the shift of\
    \ shift is greater than the number of digits,\n            // we reverse the digits\
    \ from left to right.\n            if (shift < xDigits) {\n                shiftDigits\
    \ = Math.Pow(10, (int)Math.Log10(shift));\n            } else {\n            \
    \    shiftDigits = 1;\n            }\n            for (int i = 0; i < shiftDigits;\
    \ i++) {\n                result += xStr[(i+shift) % xDigits];\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp84v1n4su.cs(17,24): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp84v1n4su.cs(18,14): error CS0136: A local or parameter named ''shift''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp84v1n4su.cs(19,28): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp84v1n4su.cs(31,31): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp84v1n4su.cs(33,26): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp84v1n4su.cs(34,32): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp84v1n4su.cs(40,31): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp84v1n4su.cs(45,32): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp84v1n4su.cs(18,31): error CS0165: Use of unassigned local variable ''shift''

    '
  timestamp: 1659976844
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ < 1) {\n            throw new ArgumentOutOfRangeException(\"shift\", \"shift\
    \ cannot be < 1\");\n        }\n        if (shift > Int64.MaxValue / x) {\n  \
    \          throw new ArgumentOutOfRangeException(\"shift\", \"shift cannot be\
    \ > \" + (Int64.MaxValue / x));\n        }\n        // Perform circular shift\
    \ to the left.\n        string result = \"\";\n        bool sign = x > 0 ? \"\
    -\" : string.Empty;\n        for (int i = 0; i < shift; i++) {\n            if\
    \ (sign != (x * x) % Int64.MaxValue) {\n                result += \"0\";\n   \
    \         }\n            long remaining = x - (x * x) % Int64.MaxValue;\n    \
    \        x /= Int64.MaxValue;\n            if (x >= 1) {\n                x -=\
    \ 1;\n            }\n            result += x.ToString();\n            if (remaining\
    \ != 0) {\n                x /= Int64.MaxValue;\n            }\n        }\n  \
    \      if (sign != (x * x) % Int64.MaxValue) {\n            result += \"0\";\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvs5558wz.cs(25,21): error CS0029: Cannot implicitly convert type ''string''
    to ''bool''

    /tmp/tmpvs5558wz.cs(27,17): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''bool'' and ''long''

    /tmp/tmpvs5558wz.cs(40,13): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''bool'' and ''long''

    '
  timestamp: 1659976844
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ digits = x.ToString();\n        // CircularShift(12L, 1L) --> \"21\"\n     \
    \   if (shift <= digits.length)\n            return digits.Substring(0, shift\
    \ + 1).Insert(shift, \"0\");\n        // CircularShift(12L, 2L) --> \"12\" (and\
    \ not \"21\")\n        else\n            return digits.Substring(0, shift + 1).Insert(digits.length,\
    \ \"0\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm4149ev1.cs(19,29): error CS1061: ''string'' does not contain a definition
    for ''length'' and no accessible extension method ''length'' accepting a first
    argument of type ''string'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpm4149ev1.cs(20,40): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpm4149ev1.cs(20,58): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpm4149ev1.cs(23,40): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpm4149ev1.cs(23,65): error CS1061: ''string'' does not contain a definition
    for ''length'' and no accessible extension method ''length'' accepting a first
    argument of type ''string'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659976844
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        long carry = 0;\n\n        if (shift > x.ToString().Length)\
    \ {\n            shift = x.ToString().Length;\n        }\n        while (shift\
    \ > 0) {\n            long value = long.Parse(x.ToString().Substring(Math.Max(0,\
    \ shift--)));\n            value += carry;\n            carry = value / 10;\n\
    \            sb.Append(value % 10);\n        }\n        sb.Append(carry.ToString());\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf1w0fsxy.cs(24,60): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976844
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        // Shift\
    \ digits to the right\n        long xDigits = x.ToString().Select(x => x - '0').ToArray();\n\
    \        long yDigits = xDigits.Select(x => (long)Math.Pow(10, shift - 1)).Sum();\n\
    \        long yString = (long)Math.Pow(10, shift) * yDigits;\n        string yString\
    \ = yString.ToString();\n        string yString = yString.Reverse().ToArray().Select(x\
    \ => x + 48).ToString();\n        return yString;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkcs4qjva.cs(18,24): error CS0029: Cannot implicitly convert type ''int[]''
    to ''long''

    /tmp/tmpkcs4qjva.cs(19,32): error CS1061: ''long'' does not contain a definition
    for ''Select'' and no accessible extension method ''Select'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpkcs4qjva.cs(21,16): error CS0128: A local variable or function named ''yString''
    is already defined in this scope

    /tmp/tmpkcs4qjva.cs(22,16): error CS0128: A local variable or function named ''yString''
    is already defined in this scope

    /tmp/tmpkcs4qjva.cs(22,34): error CS1061: ''long'' does not contain a definition
    for ''Reverse'' and no accessible extension method ''Reverse'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpkcs4qjva.cs(23,16): error CS0029: Cannot implicitly convert type ''long''
    to ''string''

    '
  timestamp: 1659976844
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        long remaining = x;\n        bool more =\
    \ true;\n        while (more) {\n            long digit = remaining % 10;\n  \
    \          if (digit > shift) {\n                sb.Append((int)digit);\n    \
    \            remaining /= 10;\n                more = false;\n            } else\
    \ {\n                sb.Append((int)((digit << shift) | (remaining / 10 >> shift)));\n\
    \                more = false;\n            }\n        }\n        return sb.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyovpjlz9.cs(27,34): error CS0019: Operator ''<<'' cannot be applied to
    operands of type ''long'' and ''long''

    /tmp/tmpyovpjlz9.cs(27,53): error CS0019: Operator ''>>'' cannot be applied to
    operands of type ''long'' and ''long''

    '
  timestamp: 1659976844
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long\
    \ shiftPow2 = (long)Math.Pow(shift, 2);\n        // Find the position of shift\
    \ such that x is now shifted to left by shift\n        long mask = (x >> shift)\
    \ & mask;\n        // Shift x to the left by shift\n        long shift = x >>\
    \ shift;\n        // Shift x to the right by shift\n        x = x >> shift;\n\
    \        // Shift x left by shift and add mask\n        x = (x << shift) | mask;\n\
    \        // Convert to string\n        string str = Convert.ToString(x, 10);\n\
    \        // Reverse\n        string reversed = str.Reverse().ToArray().Select(c\
    \ => (char)c).ToString();\n        return reversed;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpovv5l1ur.cs(17,41): error CS0841: Cannot use local variable ''shift''
    before it is declared

    /tmp/tmpovv5l1ur.cs(19,27): error CS0841: Cannot use local variable ''shift''
    before it is declared

    /tmp/tmpovv5l1ur.cs(21,14): error CS0136: A local or parameter named ''shift''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpovv5l1ur.cs(21,22): error CS0019: Operator ''>>'' cannot be applied to
    operands of type ''long'' and ''long''

    /tmp/tmpovv5l1ur.cs(23,13): error CS0019: Operator ''>>'' cannot be applied to
    operands of type ''long'' and ''long''

    /tmp/tmpovv5l1ur.cs(25,14): error CS0019: Operator ''<<'' cannot be applied to
    operands of type ''long'' and ''long''

    /tmp/tmpovv5l1ur.cs(19,36): error CS0165: Use of unassigned local variable ''mask''

    '
  timestamp: 1659976844
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ > Math.Abs(x)) {\n            x = x % shift;\n        }\n        StringBuilder\
    \ result = new StringBuilder(Math.Abs(x));\n        while (shift > 0) {\n    \
    \        long digit = x % 10;\n            x /= 10;\n            result.Insert(result.Length\
    \ - shift, digit.ToString());\n            shift -= 1;\n        }\n        return\
    \ result.ToString();\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppr5n9ng2.cs(20,50): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmppr5n9ng2.cs(24,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976844
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        StringBuilder\
    \ result = new StringBuilder();\n        while (shift > 0) {\n            long\
    \ digit = (x % 10L) / 10;\n            result.Append(digit.ToString());\n    \
    \        shift -= 1;\n            x = x % 10;\n        }\n        if (shift >\
    \ 0)\n        {\n            shift = 1;\n            while (shift < result.Length)\n\
    \            {\n                result.Insert(0, (char)(x.ToString().First()));\n\
    \                shift += 1;\n                x = x % 10;\n            }\n   \
    \     }\n        return result.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a41b98ce8f54382954de7b966c25ce0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a41b98ce8f54382954de7b966c25ce0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976844
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var s\
    \ = string.Join(\"\", GetDigits(x, shift).Reverse());\n        if (shift > s.Length)\n\
    \            s = s.Reverse().Substring(0, s.Length - shift);\n        return s;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpryawh227.cs(17,33): error CS0103: The name ''GetDigits'' does not exist
    in the current context

    /tmp/tmpryawh227.cs(19,29): error CS1061: ''IEnumerable<char>'' does not contain
    a definition for ''Substring'' and no accessible extension method ''Substring''
    accepting a first argument of type ''IEnumerable<char>'' could be found (are you
    missing a using directive or an assembly reference?)

    '
  timestamp: 1659976844
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var result\
    \ = new StringBuilder();\n        long shiftDigits = shift % 10;\n        x /=\
    \ 10;\n        do {\n            result.Append((x % 10) + shiftDigits);\n    \
    \        x /= 10;\n            shiftDigits++;\n        } while ((x > 0) && (shiftDigits\
    \ < 10));\n        if (shift < 10) {\n            result.Reverse();\n        }\n\
    \        return result.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppoty8u3f.cs(26,20): error CS1061: ''StringBuilder'' does not contain a
    definition for ''Reverse'' and no accessible extension method ''Reverse'' accepting
    a first argument of type ''StringBuilder'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1659976844
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var digits\
    \ = new char[(int) Math.Ceiling(Math.Log10(x)) + 1];\n        int index = 0;\n\
    \n        // Convert from base 10 to base 10.\n        while (x > 0) {\n     \
    \       digits[index++] = (char) ('0' + (int) x % 10);\n            x /= 10;\n\
    \        }\n\n        // Shift the digits right by shift.\n        while (index\
    \ >= shift) {\n            index--;\n            digits[index] = digits[--index];\n\
    \        }\n\n        // Add leading zeros.\n        while (index > 0) {\n   \
    \         digits[index--] = '0';\n        }\n\n        return new string(digits);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea3699e6247c4ea588ec2ac02ec38a31>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea3699e6247c4ea588ec2ac02ec38a31>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976844
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        const\
    \ string Digits = \"0123456789\";\n        string res = new String();\n      \
    \  while (shift > 0) {\n            res = Digits[x % 10] + res;\n            x\
    \ /= 10;\n            shift -= 1;\n        }\n        if (shift > 0) \n      \
    \      return res.Reverse();\n        return res;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvn9seahc.cs(18,26): error CS1729: ''string'' does not contain a constructor
    that takes 0 arguments

    /tmp/tmpvn9seahc.cs(20,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpvn9seahc.cs(25,20): error CS0266: Cannot implicitly convert type ''System.Collections.Generic.IEnumerable<char>''
    to ''string''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976844
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long[]\
    \ digits = ConvertToDigits(x);\n        Array.Reverse(digits);\n        return\
    \ new String(DigitsToChar(digits), 0, shift * digits.Length);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2te759iw.cs(17,25): error CS0103: The name ''ConvertToDigits'' does not
    exist in the current context

    /tmp/tmp2te759iw.cs(19,27): error CS0103: The name ''DigitsToChar'' does not exist
    in the current context

    /tmp/tmp2te759iw.cs(19,52): error CS1503: Argument 3: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976844
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ result = \"\";\n        while (shift > 0)\n        {\n            int digit\
    \ = x % 10;\n            x /= 10;\n            while (x % 10 != 0)\n         \
    \   {\n                result += digit;\n                x /= 10;\n          \
    \  }\n            shift -= 1;\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdvq4d4pl.cs(20,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976844
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ > Math.Pow(10, x.ToString().Length)) {\n            return x.ToString();\n \
    \       }\n        StringBuilder result = new StringBuilder();\n        while\
    \ (x>0) {\n            int digit = x % 10;\n            result.Append(digit);\n\
    \            x = (int) (x / 10);\n        }\n        string temp = result.ToString();\n\
    \        long digit = temp[0];\n        while (shift > 0) {\n            if (digit\
    \ != 0) {\n                digit = digit * 10 + temp[shift - 1];\n           \
    \     result.Append(digit % 10);\n                shift = shift - 1;\n       \
    \     }\n        }\n        return result.reverse().ToString();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuw6wehnx.cs(22,17): error CS0136: A local or parameter named ''digit''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpuw6wehnx.cs(22,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpuw6wehnx.cs(30,43): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpuw6wehnx.cs(35,23): error CS1061: ''StringBuilder'' does not contain a
    definition for ''reverse'' and no accessible extension method ''reverse'' accepting
    a first argument of type ''StringBuilder'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1659976844
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        int len = s.Length;\n        int i = 0;\n       \
    \ string result = string.Empty;\n        while (i < len) {\n            long val\
    \ = Convert.ToInt64(s[i++], 16);\n            int valModShift = val % shift;\n\
    \            val = val / shift;\n            long valModShift2 = val % shift;\n\
    \            val /= shift;\n            while (val > 0) {\n                if\
    \ ((valModShift < 0) && (valModShift2 > 0)) {\n                    result = result\
    \ + (char)('0' + valModShift2);\n                    valModShift = valModShift\
    \ + shift;\n                    valModShift2 = valModShift2 - shift;\n       \
    \         } else if ((valModShift > 0) && (valModShift2 < 0)) {\n            \
    \        result = result + (char)('0' + valModShift);\n                    valModShift\
    \ = valModShift - shift;\n                    valModShift2 = valModShift2 + shift;\n\
    \                } else {\n                    result = result + (char)('0' +\
    \ val);\n                    val = val - 1;\n                    valModShift =\
    \ valModShift + shift;\n                    valModShift2 = valModShift2 + shift;\n\
    \                }\n            }\n        }\n        Console.WriteLine(result);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf_ldvha6.cs(22,48): error CS1503: Argument 2: cannot convert from ''int''
    to ''System.IFormatProvider''

    /tmp/tmpf_ldvha6.cs(23,31): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpf_ldvha6.cs(30,35): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpf_ldvha6.cs(34,35): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpf_ldvha6.cs(39,35): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976844
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ result = \"\";\n        for (int i = 0; i < shift; i++) {\n            result\
    \ += Convert.ToString(x % 10);\n            x /= 10;\n        }\n        string\
    \ reverse = \"\";\n        while (x > 0) {\n            int digit = (int)(x %\
    \ 10);\n            x += digit;\n            reverse += Convert.ToString(digit);\n\
    \        }\n        result = result + reverse;\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659976850
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (shift > 0)\n        {\n          \
    \  long remainder = x % 10;\n            x /= 10;\n            sb = (char)('0'\
    \ + remainder);\n            shift -= 1;\n        }\n        while (x != 0)\n\
    \        {\n            long remainder = x % 10;\n            x /= 10;\n     \
    \       sb = (char)('0' + remainder) + sb;\n        }\n        return sb.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsu1h8qsu.cs(22,18): error CS0029: Cannot implicitly convert type ''char''
    to ''System.Text.StringBuilder''

    /tmp/tmpsu1h8qsu.cs(29,18): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''char'' and ''StringBuilder''

    '
  timestamp: 1659976844
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ result = \"\";\n        string digits = \"\";\n\n        // Iterate over each\
    \ digit. Reverse if shifting right by the max power of 10\n        // for that\
    \ digit. Shift to the left otherwise. Add the digits in the digit\n        //\
    \ string to the result string.\n        for (int digit = 0; digit < x.ToString().Length;\
    \ digit++) {\n            if (shift < Math.Pow(10, x.ToString().Length)) {\n \
    \               // Shift to the left. Add the digit.\n                result +=\
    \ digits[digit];\n            } else {\n                // Shift to the right.\
    \ Reverse the digit.\n                result += digits[digit] + \"0\";\n     \
    \       }\n            digits += x.ToString()[digit];\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.CircularShift (System.Int64 x, System.Int64\
    \ shift) [0x00036] in <9c5aa4b8b4af4fc4beca634199479a2a>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <9c5aa4b8b4af4fc4beca634199479a2a>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.CircularShift (System.Int64 x,\
    \ System.Int64 shift) [0x00036] in <9c5aa4b8b4af4fc4beca634199479a2a>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x00001] in <9c5aa4b8b4af4fc4beca634199479a2a>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976845
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ digits = Convert.ToString(x, 10);\n        long temp;\n        string result\
    \ = \"\";\n        for (long i = 0; i < shift.ToString().Length; i++) {\n    \
    \        temp = Convert.ToInt64(digits.Substring(i * 2, 2));\n            result\
    \ += Convert.ToString(Math.Pow(temp, shift), 10);\n        }\n        if (result.Length\
    \ < digits.Length) {\n            result = result.Insert(digits.Length - result.Length,\
    \ digits.Substring(digits.Length - result.Length));\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe1jouwh5.cs(21,53): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpe1jouwh5.cs(22,63): error CS1503: Argument 2: cannot convert from ''int''
    to ''System.IFormatProvider''

    '
  timestamp: 1659976844
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long\
    \ shift = shift == 0L ? shift : shift - 1L;\n        List<char> result = new List<char>();\n\
    \        while (shift >= 0) {\n            long y = x >> shift;\n            result.Add((char)y);\n\
    \            x = y;\n            shift -= Convert.ToInt64(Math.Log10(y));\n  \
    \      }\n        return new string(result.Reverse().ToArray());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppvhygx9z.cs(17,14): error CS0136: A local or parameter named ''shift''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmppvhygx9z.cs(20,22): error CS0019: Operator ''>>'' cannot be applied to
    operands of type ''long'' and ''long''

    /tmp/tmppvhygx9z.cs(25,43): error CS0023: Operator ''.'' cannot be applied to
    operand of type ''void''

    /tmp/tmppvhygx9z.cs(17,22): error CS0165: Use of unassigned local variable ''shift''

    '
  timestamp: 1659976844
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        int digitCount\
    \ = Math.Abs(shift);\n        string output = \"\";\n        while (x > 0) {\n\
    \            int digit = (int)Math.Abs(x%10);\n            if (digit < digitCount\
    \ && digit > 0) output += digit;\n            x /= 10;\n        }\n        if\
    \ (output.Length < digitCount)\n            output += new string('0', digitCount\
    \ - output.Length);\n        return output;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1wclkr19.cs(17,26): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976844
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        BigInteger\
    \ bi = new BigInteger(x);\n        BigInteger bi2 = bi.ShiftRight(shift);\n  \
    \      StringBuilder sb = new StringBuilder();\n        while (bi2.HasValue) {\n\
    \            sb.Append(bi2.Value);\n            bi2 = bi2.ShiftRight(shift);\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy0e336vr.cs(18,29): error CS1061: ''BigInteger'' does not contain a definition
    for ''ShiftRight'' and no accessible extension method ''ShiftRight'' accepting
    a first argument of type ''BigInteger'' could be found (are you missing a using
    directive or an assembly reference?)

    /tmp/tmpy0e336vr.cs(20,20): error CS1061: ''BigInteger'' does not contain a definition
    for ''HasValue'' and no accessible extension method ''HasValue'' accepting a first
    argument of type ''BigInteger'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpy0e336vr.cs(21,27): error CS1061: ''BigInteger'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''BigInteger'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpy0e336vr.cs(22,23): error CS1061: ''BigInteger'' does not contain a definition
    for ''ShiftRight'' and no accessible extension method ''ShiftRight'' accepting
    a first argument of type ''BigInteger'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1659976845
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long\
    \ remainder;\n        if (x != 0) {\n            List<long> result = new List<long>();\n\
    \            while (shift >= 0) {\n                remainder = x % 10;\n     \
    \           result.Add(remainder);\n                x = x / 10;\n            \
    \    shift = shift - 1;\n            }\n            return result.Reverse().Aggregate(\"\
    \", (str, digit) => str + digit).Substring(0, shift + 1);\n        }\n       \
    \ else\n            return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptpjg9y84.cs(26,36): error CS0023: Operator ''.'' cannot be applied to
    operand of type ''void''

    '
  timestamp: 1659976845
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var result\
    \ = new StringBuilder();\n        for (int i = 0; i < shift && shift != 0; i--,\
    \ shift--) {\n            while (shift != 0) {\n                result.Append(((x\
    \ >> shift) % 10L).ToString());\n                shift -= (10L * shift == 0);\n\
    \            }\n        }\n        if (shift != 0) {\n            result.Reverse();\n\
    \        }\n        return result.toString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphvbmivly.cs(20,33): error CS0019: Operator ''>>'' cannot be applied to
    operands of type ''long'' and ''long''

    /tmp/tmphvbmivly.cs(21,17): error CS0019: Operator ''-='' cannot be applied to
    operands of type ''long'' and ''bool''

    /tmp/tmphvbmivly.cs(25,20): error CS1061: ''StringBuilder'' does not contain a
    definition for ''Reverse'' and no accessible extension method ''Reverse'' accepting
    a first argument of type ''StringBuilder'' could be found (are you missing a using
    directive or an assembly reference?)

    /tmp/tmphvbmivly.cs(27,23): error CS1061: ''StringBuilder'' does not contain a
    definition for ''toString'' and no accessible extension method ''toString'' accepting
    a first argument of type ''StringBuilder'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1659976845
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ > Int32.MaxValue / 2)\n            throw new ArgumentException(\"shift too large\"\
    );\n        StringBuilder sb = new StringBuilder();\n        while (shift > 0)\
    \ {\n            long temp = x;\n            x = x % 10;\n            if (shift\
    \ > 0)\n                x += x;\n            temp = temp % (10 * 10);\n      \
    \      x += (10 * temp);\n            shift -= 1;\n            sb.Append(x);\n\
    \        }\n        string reverse = sb.ToString().Reverse().ToString();\n   \
    \     if (reverse.Length != sb.Length)\n            reverse = reverse.Substring(1);\n\
    \        return reverse + sb.ToString().Substring(1);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1982478b982142059c3f55275023d903>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1982478b982142059c3f55275023d903>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976845
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ == 0)\n        {\n            return x.ToString();\n        }\n        string\
    \ result = \"\";\n        long temp = x;\n        long tempShift;\n        while\
    \ (shift > 0)\n        {\n            tempShift = temp % 10;\n            temp\
    \ = (temp / 10) + 1;\n            tempShift = tempShift + 1;\n            result\
    \ = tempShift.ToString() + result;\n            shift = shift - 1;\n        }\n\
    \        result = tempShift.ToString() + result;\n        while (result.Length\
    \ > 0)\n        {\n            result = result.Substring(0, result.Length - 1)\
    \ + result.Substring(result.Length - 1, 1);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9j7m4yre.cs(32,18): error CS0165: Use of unassigned local variable ''tempShift''

    '
  timestamp: 1659976845
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ > Math.Pow(10, x.ToString().Length)) {\n            throw new ArgumentException(\"\
    Shift must be less than \" + Math.Pow(10, x.ToString().Length) + \".\", \"shift\"\
    );\n        }\n        StringBuilder result = new StringBuilder();\n        long\
    \ xi = x;\n        string output = \"\";\n        while (shift >= 0) {\n     \
    \       if (shift > 0) {\n                output = xi % 10 + output;\n       \
    \     }\n            xi = xi / 10;\n            shift--;\n        }\n        if\
    \ (shift < 0) {\n            output = xi % 10 + output;\n        }\n        string\
    \ digits = result.ToString();\n        string reversed = string.Join(\"\", digits.Reverse().ToArray());\n\
    \        if (reversed == digits)\n            return digits;\n        else\n \
    \           return reversed;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <41fef1050ac448d5a09e12dafa2be6d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <41fef1050ac448d5a09e12dafa2be6d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976845
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ == 0) return \"0\";\n        if (shift > Math.Abs(x)) return \"\".PadLeft(Math.Abs(x));\n\
    \        var buffer = new StringBuilder(10);\n        var digits = x % 10;\n \
    \       buffer.Append(digits);\n        x /= 10;\n        for (long i = shift;\
    \ i > 0; i--)\n            buffer.Append(digits);\n        return buffer.ToString().PadRight(Math.Abs(x));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbfv0_ax4.cs(18,52): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpbfv0_ax4.cs(25,43): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976845
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        Debug.Assert(shift\
    \ < x, \"Too much shift.\");\n        string digits = \"0123456789\";\n      \
    \  long mask = Convert.ToInt64(digits.Repeat(shift).ToArray());\n        string\
    \ result = \"\";\n        for (long n = x; n > 0; n /= 10L) {\n            long\
    \ remainder = (n / mask) % 10;\n            result += digits.Substring(remainder\
    \ - shift, 1) + digits.Substring(remainder, 1);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7bnv5m3q.cs(19,44): error CS1061: ''string'' does not contain a definition
    for ''Repeat'' and no accessible extension method ''Repeat'' accepting a first
    argument of type ''string'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmp7bnv5m3q.cs(23,40): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp7bnv5m3q.cs(23,81): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976845
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        char[] array = s.ToCharArray();\n        int[] digits\
    \ = new int[s.Length];\n        int length = s.Length;\n        while (shift >\
    \ 0) {\n            digits[--length] = (int)(Math.Floor(Math.Pow(10, length)));\n\
    \            shift -= digits[length];\n        }\n        Debug.Assert(shift <=\
    \ length);\n        bool isNegative = s.StartsWith(\"-\");\n        Array.Reverse(digits,\
    \ 0, length);\n        return isNegative ? string.Concat(\"-\", new String(digits,\
    \ 0, length)) : string.Concat(new String(digits, 0, length));\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9oiu7j04.cs(28,59): error CS1503: Argument 1: cannot convert from ''int[]''
    to ''char[]''

    /tmp/tmp9oiu7j04.cs(28,106): error CS1503: Argument 1: cannot convert from ''int[]''
    to ''char[]''

    '
  timestamp: 1659976845
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long\
    \ tmp = 0;\n        while (shift > 0) {\n            tmp = x % 10;\n         \
    \   x = x / 10;\n            shift = shift - 1;\n        }\n        x = x + (x\
    \ % 10);\n        tmp = x % 10;\n        x = x / 10;\n        shift = shift -\
    \ 1;\n        if (shift == 0)\n            return x.ToString();\n        string\
    \ str = x.ToString();\n        char[] digits = str.ToCharArray();\n        char[]\
    \ digits2 = new char[digits.Length + 1];\n        for (int i = 0; i < digits.Length;\
    \ i++) {\n            digits2[digits.Length - 1 - i] = digits[i];\n        }\n\
    \        return new string(digits2);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4bf87a5dae40455a8fa094282450837d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4bf87a5dae40455a8fa094282450837d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976845
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        StringBuilder\
    \ result = new StringBuilder();\n\n        // Iterate from right to left shifting\
    \ the digits by shift\n        for (int i = shift, shift = shift - x.ToString().Length;\n\
    \            shift < x.ToString().Length; shift = shift + 1) {\n            result.Append((char)((int)(x\
    \ % 10) + 10 * (shift % 10)));\n            x /= 10;\n        }\n\n        //\
    \ Return the result as string\n        return result.ToString();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgn3duluq.cs(20,22): error CS0841: Cannot use local variable ''shift''
    before it is declared

    /tmp/tmpgn3duluq.cs(20,29): error CS0136: A local or parameter named ''shift''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659976845
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ < 0 || shift > Math.Ceiling(Math.Log10(x)))\n            throw new ArgumentException(\n\
    \                \"Invalid shift: \" + shift + \", max shift = \" + Math.Ceiling(Math.Log10(x)));\n\
    \        var sb = new StringBuilder();\n        while (shift > 0) {\n        \
    \    sb.Append((x % 10) + \"\");\n            x /= 10;\n            shift--;\n\
    \        }\n        if (shift > 0) {\n            for (int i = sb.Length - 1;\
    \ i >= 0; i--)\n                sb.Insert(0, (x % 10) + \"\");\n        }\n  \
    \      return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <56d66df685504b13aed7c86b0c3a42a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <56d66df685504b13aed7c86b0c3a42a2>:0 \n\nUnhandled Exception:\n\
    System.ArgumentException: Invalid shift: 8, max shift = 2\n  at Problem.CircularShift\
    \ (System.Int64 x, System.Int64 shift) [0x00047] in <56d66df685504b13aed7c86b0c3a42a2>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00035] in <56d66df685504b13aed7c86b0c3a42a2>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentExcepti"
  stdout: ''
  timestamp: 1659976845
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        StringBuilder\
    \ result = new StringBuilder();\n        while (shift > result.Length) result.Append(GetDigits(x,\
    \ shift));\n        while (shift < result.Length) result.Insert(0, GetDigits(x,\
    \ shift));\n        return result.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphiq6cwxz.cs(18,53): error CS0103: The name ''GetDigits'' does not exist
    in the current context

    /tmp/tmphiq6cwxz.cs(19,56): error CS0103: The name ''GetDigits'' does not exist
    in the current context

    '
  timestamp: 1659976845
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (shift >= x.ToString().Length) {\n\
    \            sb.Append(x.ToString());\n            x = x >> 1;\n            shift\
    \ -= x.ToString().Length;\n        }\n        if (shift > 0) {\n            sb.Append(x.ToString().Substring(0,\
    \ shift));\n            x = x >> shift;\n        }\n        return sb.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvwe7g_bs.cs(24,49): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpvwe7g_bs.cs(25,17): error CS0019: Operator ''>>'' cannot be applied to
    operands of type ''long'' and ''long''

    '
  timestamp: 1659976845
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        Debug.Assert(shift\
    \ >= 0);\n        Debug.Assert(shift < long.MaxValue);\n        long shiftPow2\
    \ = Math.Pow(shift, 2);\n        long xPow2 = Math.Pow(x, 2);\n        long temp1\
    \ = Math.DivRem(xPow2, shiftPow2, out long rem);\n        long temp2 = Math.DivRem(xPow2,\
    \ shiftPow2, out long rem2); \n        if (rem2 == 0)\n            return x.ToString();\n\
    \        if (rem == 0)\n            return temp1.ToString() + shift.ToString();\n\
    \        else\n            return temp1.ToString() + shift.ToString() + temp2.ToString()\
    \ + rem2.ToString();\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5ul6xxol.cs(19,26): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp5ul6xxol.cs(20,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976845
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ result = \"\";\n        long digits = x;\n        string shift = shift.ToString();\n\
    \        while (digits.Length > 0) {\n            result = digits[digits.Length\
    \ - 1] + result;\n            if (shift.Length > 0) {\n                digits\
    \ = digits / 10;\n            }\n            shift = shift.Remove(shift.Length\
    \ - 1);\n        }\n        if (shift > digits.Length) {\n            digits =\
    \ digits.Reverse();\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp26la3k02.cs(19,16): error CS0136: A local or parameter named ''shift''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp26la3k02.cs(20,23): error CS1061: ''long'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp26la3k02.cs(21,36): error CS1061: ''long'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp26la3k02.cs(27,28): error CS1061: ''long'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp26la3k02.cs(28,29): error CS1061: ''long'' does not contain a definition
    for ''Reverse'' and no accessible extension method ''Reverse'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp26la3k02.cs(19,24): error CS0165: Use of unassigned local variable ''shift''

    '
  timestamp: 1659976845
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ result = \"\";\n        if (x < 0) {\n            result = \"-\";\n        \
    \    x = -x;\n        }\n        int remainder = 0;\n        while (shift >= 0)\
    \ {\n            int next = (int)x / 10;\n            x %= 10;\n            int\
    \ digit = (int)x / 10;\n            remainder = (remainder * 10) + digit;\n  \
    \          x %= 10;\n            shift -= 1;\n            if (shift < 0) {\n \
    \               shift += 10;\n                result += new String(new char[]\
    \ {Convert.ToChar(next), Convert.ToChar(remainder)});\n                break;\n\
    \            }\n            result += new String(new char[] {Convert.ToChar(digit)});\n\
    \        }\n        if (shift < 0) {\n            result = result.Reverse().ToString()\
    \ + new String(new char[] {Convert.ToChar(x)});\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2b745ef6a36c4677a9e6d7b3bbe438eb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2b745ef6a36c4677a9e6d7b3bbe438eb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976845
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long\
    \ mask = (1L << (shift & 63));\n        long carry = (1L << (shift & 63));\n \
    \       long carry2 = 0;\n        long xnew;\n        string result = \"\";\n\
    \        // Perform circular (circular) shift until we get back to the starting\
    \ value.\n        for (long i = shift; i > 0; i >>= 1) {\n            carry +=\
    \ x & mask;\n            x = (x >> 1) | (carry << 63);\n            mask = mask\
    \ >> 1;\n            carry &= mask;\n        }\n        // Convert carry to string.\n\
    \        while ((carry & 1) == 1) {\n            result += ((long)carry) & 15;\n\
    \            carry >>= 4;\n        }\n        result += carry & 15;\n        result\
    \ += \"0\";\n        // Convert x to string.\n        for (long i = shift; i >\
    \ 0; i >>= 1) {\n            result += ((long)x & 15) + \"0\";\n            x\
    \ >>= 4;\n        }\n        // Convert the rest to string.\n        while (x\
    \ > 0) {\n            result += ((long)x & 15) + \"0\";\n            x >>= 4;\n\
    \        }\n        // Reverse result.\n        StringBuilder sb = new StringBuilder(result.Length);\n\
    \        for (int i = result.Length - 1; i >= 0; i--)\n            sb.Append(result[i]);\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxt5ekfav.cs(17,22): error CS0019: Operator ''<<'' cannot be applied to
    operands of type ''long'' and ''long''

    /tmp/tmpxt5ekfav.cs(18,23): error CS0019: Operator ''<<'' cannot be applied to
    operands of type ''long'' and ''long''

    /tmp/tmpxt5ekfav.cs(19,14): warning CS0219: The variable ''carry2'' is assigned
    but its value is never used

    /tmp/tmpxt5ekfav.cs(20,14): warning CS0168: The variable ''xnew'' is declared
    but never used

    '
  timestamp: 1659976845
