name: HumanEval_68_pluck
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // \"Given a list representing a branch of a tree that has non-negative\
  \ integer nodes\n    // your task is to pluck one of the nodes and return it.\n\
  \    // The plucked node should be the node with the smallest even value.\n    //\
  \ If multiple nodes with the same smallest even value are found return the node\
  \ that has smallest index.\n    // The plucked node should be returned in a list,\
  \ [ smalest_value, its index ],\n    // If there are no even values or the given\
  \ list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new\
  \ long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,\
  \ (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the\
  \ smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n\
  \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
  \    // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n\
  \    // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
  \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
  \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n\
  \    // so we will choose the first zero, which has the smallest index.\n    //\
  \ Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
  \    public static List<long> Pluck(List<long> arr) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
  \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
  \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
  \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new\
  \ List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
  \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
  \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,\
  \ (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n\
  \    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,\
  \ (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
completions: ["        long smalest_value;\n        long[] smalest_values = new long[arr.Count];\n\
    \        long[] smalest_indexes= new long[arr.Count];\n        int smalest_indexe\
    \ = 0;\n        List<long> list_smalest_values = new List<long>();\n        List<long>\
    \ list_smalest_indexes = new List<long>();\n        long smallest_index;\n   \
    \     foreach (long node in arr) {\n            smallest_index = -1;\n       \
    \     smallest_value = Long.MinValue;\n            smalest_value = node;\n   \
    \         smalest_values[index] = node;\n            smalest_indexes[index] =\
    \ index;\n            while (node.HasChildren) {\n                foreach (long\
    \ child in node.Children) {\n                    if (smallest_index == -1 || ((child\
    \ % 2) == 0)) {\n                        if (smallest_value == Long.MinValue)\
    \ {\n                            smalest_value = child;\n                    \
    \        smalest_values[index] = child;\n                            smalest_indexes[index]\
    \ = index;\n                            smallest_index = index;\n            \
    \                smallest_value = child;\n                        } else if ((child\
    \ < smallest_value) || (smallest_value == Long.MinValue)) {\n                \
    \            smalest_value = child;\n                            smalest_values[index]\
    \ = child;\n                            smalest_indexes[index] = index;\n    \
    \                        smallest_value = child;\n                           \
    \ smallest_index = index;\n                        }\n                    }\n\
    \                }\n                node = node.Parent;\n            }\n     \
    \       list_smalest_values.Add(smalest_value);\n            list_smalest_indexes.Add(smalest_indexes[index]);\n\
    \        }\n        return list_smalest_values;", "        int sz = arr.Count;\n\
    \        if (sz <= 0) {\n            return new List<long>();\n        }\n   \
    \     double mn = double.MinValue;\n        int min = -1;\n        for (int i\
    \ = 0; i < sz; i++) {\n            if (arr[i] % 2 == 0) {\n                mn\
    \ = Math.Min(mn, arr[i]);\n                min = i;\n            }\n        }\n\
    \        if (min == -1) {\n            return new List<long>();\n        }\n \
    \       List<long> res = new List<long>();\n        long cur = arr[mn - 1];\n\
    \        long temp = 0;\n        for (int i = 0; i <= min; i++) {\n          \
    \  if (arr[i] % 2 == 0) {\n                temp += arr[i];\n                if\
    \ (temp >= cur) {\n                    res.Add(cur);\n                    res.Add(i);\n\
    \                }\n            }\n        }\n        return res;", "        List<long>\
    \ ret = new List<long>();\n        int min_even = -1;\n        int min = -1;\n\
    \        foreach (long elt in arr)\n        {\n            if (elt % 2 == 0)\n\
    \            {\n                if (min == -1)\n                {\n          \
    \          min = elt;\n                }\n                else\n             \
    \   {\n                    if (elt < min)\n                    {\n           \
    \             min = elt;\n                    }\n                }\n         \
    \       if (elt == min_even)\n                {\n                    ret.Add(elt);\n\
    \                }\n            }\n        }\n        if (ret.Count > 0)\n   \
    \     {\n            return ret;\n        }\n        else\n        {\n       \
    \     return new List<long>();\n        }", "        var result = new List<long>();\n\
    \        var results = new List<long>();\n        var minIndex = -1;\n       \
    \ var minValue = -1;\n        for (var i = 1; i < arr.Count; i++) {\n        \
    \    var value = arr[i];\n            if (i % 2 == 0) {\n                if (value\
    \ < minValue) {\n                    minValue = value;\n                    minIndex\
    \ = i;\n                }\n                if (value < minIndex || minIndex ==\
    \ -1) {\n                    result.Add(value);\n                }\n         \
    \       if (value < minIndex && minIndex != -1) {\n                    result.Add(minIndex);\n\
    \                }\n            }\n        }\n        return result.Distinct().ToList();",
  "        List<long> ans = new List<long>();\n        foreach(var item in arr){\n\
    \            int oddValue = CountOdds(item);\n            if (oddValue != -1)\n\
    \                ans.Add(item);\n            else\n                return ans;\n\
    \        }\n        return ans;", "        var smalest_value = arr.First();\n\
    \        var min_even_value = arr.Where(item => item % 2 == 0).Min();\n\n    \
    \    foreach (var item in arr.Where(item => item % 2 == 0)) {\n            if\
    \ (item.Equals(min_even_value)) {\n                return arr.Where(item => item\
    \ % 2 == 0).ToList();\n            }\n        }\n\n        foreach (var item in\
    \ arr.Where(item => item % 2 == 0)) {\n            if (item.Equals(min_even_value))\
    \ {\n                return new List<long>();\n            }\n        }\n\n  \
    \      return arr.Where(item => item % 2 == 0).ToList();", "        var result\
    \ = new List<long>();\n        var evens = new List<long>();\n        if (arr.Count\
    \ == 0) {\n            return new List<long>();\n        }\n        var min =\
    \ arr.Min();\n        var minEvens = arr.Where(e => e % 2 == 0).ToArray();\n \
    \       if (minEvens.Length == 0)\n            return new List<long>();\n    \
    \    var minIndex = 0;\n        for (var i = 0; i < minEvens.Length; i++) {\n\
    \            if (minIndex > 0)\n                break;\n            if (minEvens[i]\
    \ == min) {\n                minIndex = i;\n                break;\n         \
    \   }\n        }\n        if (minIndex != 0) {\n            result.Add(min);\n\
    \            result.Add(minIndex);\n            return result;\n        }\n  \
    \      var largest = arr.Max();\n        var largestEvens = arr.Where(e => e %\
    \ 2 == 0).ToArray();\n        var largestIndex = -1;\n        for (var i = minIndex;\
    \ i < largestEvens.Length; i++) {\n            if (largestIndex < 0)\n       \
    \         largestIndex = i;\n            if (largestEvens[i] == largest)\n   \
    \             break;\n        }\n        if (largestIndex == -1)\n           \
    \ return new List<long>();\n        var largestEven = largestEvens[largestIndex];\n\
    \        var largestIndexs = arr.FindIndex(e => e % 2 == largestEven && e <= largest);\n\
    \        if (largestIndexs == null)\n            return new List<long>();\n  \
    \      result.Add(largest);\n        result.Add(largestIndex);\n        return\
    \ result;", "        var list = new List<long>();\n        foreach (var item in\
    \ arr) {\n            if (item % 2 == 0) {\n                var smallestEvenValueIndex\
    \ = arr.IndexOf((long)item);\n                var smallestEvenValueValue = arr[smallestEvenValueIndex];\n\
    \                list.Add(smallestEvenValueValue);\n                return list;\n\
    \            }\n        }\n        return list;", "        // write your code\
    \ here\n        var result = new List<long>();\n        if (arr.Count == 0)\n\
    \            return result;\n        bool even = true;\n        int min = arr.Min();\n\
    \        int min = arr.Min();\n        int minIndex = -1;\n        int i = 0;\n\
    \        while (i < arr.Count) {\n            if (arr[i] == min) {\n         \
    \       if (!even)\n                    min = arr.Min();\n                if (minIndex\
    \ == -1)\n                    minIndex = i;\n                if (arr[i] != min)\n\
    \                    even = false;\n            }\n            else if (arr[i]\
    \ != min)\n                even = true;\n            i++;\n        }\n       \
    \ Console.WriteLine(\"min: {0}\", min);\n        result.Add(min);\n        result.Add(minIndex);\n\
    \        return result;", "        int len = arr.Count;\n        Dictionary<long,\
    \ int> dic = new Dictionary<long, int>();\n        long minval = arr[0];\n   \
    \     int minidx = 0;\n        for (int i = 1; i < len; i++) {\n            long\
    \ val = arr[i];\n            if (dic.ContainsKey(val)) {\n                int\
    \ idx = (int)dic[val];\n                if (val < minval) {\n                \
    \    minval = val;\n                    minidx = idx;\n                }\n   \
    \         }\n            else {\n                minval = val;\n             \
    \   minidx = 0;\n            }\n            dic.Add(val, minidx);\n        }\n\
    \        List<long> list = new List<long>();\n        if (minidx != 0) {\n   \
    \         list.Add(minval);\n            list.Add(minidx);\n        }\n      \
    \  return list;", "        // write your code here\n        int minIndex = 0;\n\
    \        long minValue = arr.FirstOrDefault();\n        foreach (var item in arr.Skip(1))\n\
    \        {\n            if (item % 2 == 0 && (minValue % 2 == 0 || item < minValue))\n\
    \            {\n                minValue = item;\n                minIndex = arr.IndexOf(item);\n\
    \            }\n        }\n        return new List<long> { minValue, minIndex\
    \ };", "        long maxValue = 0L;\n        long minIndex = 0L;\n        int\
    \ i = 0;\n        for(int j = 0;j < arr.Count;j++) {\n            if(arr[j] %\
    \ 2 == 0) {\n                if(i == 0 && arr[j] > maxValue) {\n             \
    \       maxValue = arr[j];\n                    minIndex = j;\n              \
    \  }\n                else if(arr[j] > maxValue && arr[j] <= maxValue + i) {\n\
    \                    maxValue = arr[j];\n                    minIndex = j;\n \
    \               }\n            }\n            i++;\n        }\n        List<long>\
    \ result = new List<long>();\n        if(maxValue == 0)\n            return result;\n\
    \        result.Add(maxValue);\n        result.Add(minIndex);\n        return\
    \ result;", "        \n        // Your code goes here\n        Dictionary<long,\
    \ List<long>> dict = new Dictionary<long, List<long>>();\n        List<long> ans\
    \ = new List<long>();\n        foreach (var value in arr)\n        {\n       \
    \     if (dict.ContainsKey(value))\n            {\n                dict[value].Add(value);\n\
    \            }\n            else\n            {\n                List<long> newList\
    \ = new List<long>();\n                newList.Add(value);\n                dict.Add(value,\
    \ newList);\n            }\n        }\n        foreach (var key in dict.Keys.ToList())\n\
    \        {\n            int count = 0;\n            long smallestEven = key;\n\
    \            List<long> values = dict[key];\n            bool done = false;\n\
    \            while (!done && count < values.Count)\n            {\n          \
    \      if (values[count] % 2 == 0)\n                {\n                    smallestEven\
    \ = values[count];\n                    done = true;\n                }\n    \
    \            count++;\n            }\n            ans.Add(smallestEven);\n   \
    \     }\n        return ans;", "        long evenValue = 0L;\n        int evenIndex\
    \ = -1;\n\n        if (arr.Count() > 0) {\n            evenValue = arr.FirstOrDefault();\n\
    \            if (evenValue % 2 == 0) {\n                arr.Remove(evenValue);\n\
    \                arr.Sort();\n                evenIndex = arr.BinarySearch(0L);\n\
    \            }\n        }\n        return arr.ToList().ToList();", "        //\
    \ Write your code in C# 6.0 with .NET 4.5 (C#, Visual Basic, or F#) language features\n\
    \        Debug.Assert(arr.Count == 0);\n        Debug.Assert(arr.Count() == 0);\n\
    \        Debug.Assert(arr.Count() == 0);\n        Debug.Assert(arr.Count() ==\
    \ 0);\n\n        List<long> res = new List<long>();\n\n        int n = 0;\n  \
    \      long smalest_value = arr.Min();\n        long smallest_index = smalest_value;\n\
    \        bool found = false;\n\n        for (int i = 0; i < arr.Count(); i++)\
    \ {\n            if (arr[i] == smalest_value) {\n                found = true;\n\
    \            } else {\n                n = i;\n                smalest_value =\
    \ arr[i];\n                smallest_index = arr[i];\n            }\n        }\n\
    \        if (!found) {\n            return new List<long>();\n        }\n\n  \
    \      // smalest_value = (long)Math.Pow(2, n);\n        // smallest_index = smalest_value;\n\
    \n        for (int i = 0; i < arr.Count(); i++) {\n            if (arr[i] % 2\
    \ == 0) {\n                smalest_value = arr[i];\n                smallest_index\
    \ = arr[i];\n                break;\n            }\n        }\n        res.Add(smalest_value);\n\
    \        res.Add(smallest_index);\n\n        return res;", "        Dictionary<long,\
    \ List<long>> d = new Dictionary<long, List<long>>();\n        List<long> ans\
    \ = new List<long>();\n        for (int i = 0; i < arr.Count; i++) {\n       \
    \     List<long> temp = new List<long>();\n            if (d.TryGetValue(arr[i],\
    \ out temp)) {\n                temp.Add(i);\n                d[arr[i]] = temp;\n\
    \                if (temp.Count > 1) ans.Add(arr[temp[0]]);\n            } else\
    \ {\n                d.Add(arr[i], temp);\n                ans.Add(arr[i]);\n\
    \            }\n        }\n        return ans;", "        if (arr.Count == 0)\n\
    \            return new List<long>();\n        List<long> result = new List<long>();\n\
    \        Dictionary<long, int> evens = new Dictionary<long, int>();\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (evens.ContainsKey(arr[i]))\n\
    \                evens[arr[i]] = evens[arr[i]] + 1;\n            else\n      \
    \          evens.Add(arr[i], 1);\n        }\n        List<long> zeros = new List<long>(evens.Keys);\n\
    \        if (zeros.Count != 0)\n            zeros.Sort();\n        int minVal\
    \ = zeros[0];\n        int minIndex = 0;\n        for (int i = 0; i < zeros.Count;\
    \ i++) {\n            if (zeros[i] == minVal) {\n                minIndex = i;\n\
    \                break;\n            }\n        }\n        for (int i = 0; i <\
    \ evens.Keys.Count; i++) {\n            if (evens[zeros[minIndex]] % 2 == 0)\n\
    \                minVal = zeros[minIndex];\n        }\n        result.Add(minVal);\n\
    \        result.Add(minIndex);\n        return result;", "        var result =\
    \ new List<long>();\n        var minOdd = arr.Where(x => x % 2 == 0).OrderBy(x\
    \ => x).ToList();\n        if (minOdd.Count != 0) result.Add(minOdd.First());\n\
    \        var maxEven = arr.Where(x => x % 2 == 1).OrderByDescending(x => x).ToList();\n\
    \        if (maxEven.Count != 0) result.Add(maxEven.First());\n        if (result.Count\
    \ == 0) return result;\n        var minIndex = arr.FindIndex(x => x % 2 == 0);\n\
    \        if (minIndex >= 0) result.Add(arr[minIndex]);\n        return result;",
  "        // Write your code here\n        var sortedArray = arr.OrderBy(i => (int)i).ToList();\n\
    \        var index = -1;\n        var minValue = 0;\n        var minValueIndex\
    \ = -1;\n\n        int evenCount = 0;\n        int evenIndex = -1;\n        foreach\
    \ (var i in sortedArray) {\n            if (i % 2 == 0) {\n                if\
    \ (evenCount > 0) {\n                    if (evenIndex < 0)\n                \
    \        evenIndex = sortedArray.IndexOf(i);\n                    if (evenIndex\
    \ < minValueIndex)\n                        minValue = evenIndex;\n          \
    \      }\n                evenCount++;\n            } else {\n               \
    \ evenIndex = 0;\n                evenCount = 0;\n            }\n        }\n \
    \       if (minValueIndex == -1)\n            return new List<long>();\n     \
    \   return new List<long> {sortedArray[minValue]};", "        long min_even =\
    \ arr.Min(v => ((long)v % 2 == 0) ? v : 0);\n        long min_value = arr.Min(v\
    \ => v);\n        var indexes = arr.Select(v => v == min_value ? arr.IndexOf(v)\
    \ : -1).Where(i => i >= 0).ToList();\n        var found = indexes.Where(i => arr[i]\
    \ % 2 == 0).Any() && indexes.Where(i => arr[i] % 2 == 0).FirstOrDefault() == arr.IndexOf(min_even);\n\
    \        var result = found ?\n            new List<long>() { min_even, arr.IndexOf(min_even)\
    \ }.Concat(arr.Where(i => !indexes.Contains(i)).Select(v => v)).Distinct().ToList()\
    \ :\n            new List<long>();\n        return result.Any() ? result : new\
    \ List<long>();", "        int min_index = -1;\n        long smalest_value = 0;\n\
    \        List<long> result = new List<long>();\n        if (arr.Count == 0) {\n\
    \            return result;\n        }\n        foreach (long n in arr) {\n  \
    \          if (n % 2 == 0) {\n                smalest_value = n;\n           \
    \     min_index = arr.IndexOf(n);\n            }\n            else if (smalest_value\
    \ == 0) {\n                smalest_value = n;\n                min_index = arr.IndexOf(n);\n\
    \            }\n            else if (n == smalest_value) {\n                if\
    \ (min_index != arr.IndexOf(n)) {\n                    smalest_value = n;\n  \
    \                  min_index = arr.IndexOf(n);\n                }\n          \
    \  }\n            else if (n == arr.Max()) {\n                result.Add(n);\n\
    \            }\n            else {\n                result.Add(n);\n         \
    \   }\n        }\n        return result;", "        if (arr.Count <= 0)\n    \
    \        return new List<long>();\n        int min = arr.Min();\n        int maxindex\
    \ = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ <= min)\n                continue;\n            if (arr[i] < min + arr[min])\
    \ {\n                min = arr[i];\n                maxindex = i;\n          \
    \  }\n        }\n        arr.RemoveAt(maxindex);\n        return arr.Count ==\
    \ 0 ? new List<long>() : new List<long> { arr[maxindex], maxindex };", "     \
    \   bool even = true;\n        var minValue = int.MaxValue;\n        int minIndex\
    \ = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0) {\n                even = true;\n                if (arr[i] < minValue)\
    \ {\n                    minValue = arr[i];\n                    minIndex = i;\n\
    \                } else if (arr[i] == minValue) {\n                    if (i <\
    \ minIndex) {\n                        minIndex = i;\n                    }\n\
    \                }\n            } else {\n                even = false;\n    \
    \        }\n        }\n        if (minIndex == arr.Count && minValue == int.MaxValue)\
    \ {\n            return new List<long>();\n        }\n        if (minIndex < arr.Count\
    \ && minValue != int.MaxValue) {\n            return new List<long>(arr.Skip(minIndex).ToList());\n\
    \        }\n        return new List<long>();", "        // write your code here\n\
    \        List<long> list = new List<long>();\n        Array.Sort(arr);\n     \
    \   int index = arr.FindIndex(x => x % 2 == 0);\n        if (index >= 0)\n   \
    \     {\n            list.Add(arr[index]);\n            list.Add(index);\n   \
    \     }\n        else\n        {\n            list.AddRange(arr.ToList());\n \
    \       }\n        return list;", "        if (arr.Count <= 0) return new List<long>();\n\
    \        var smalest_value = arr.First();\n        var smalest_index = 0;\n  \
    \      for (var i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0)\
    \ {\n                if (smalest_value % 2 == 0) {\n                    if (smalest_index\
    \ < i) return new List<long> {smalest_value, smalest_index};\n               \
    \     smalest_value = arr[i];\n                    smalest_index = i;\n      \
    \          }\n                else {\n                    smalest_value = arr[i];\n\
    \                    smalest_index = i;\n                }\n            }\n  \
    \      }\n        if (smalest_value % 2 == 0) return new List<long> {smalest_value,\
    \ smalest_index};\n        return new List<long> { smalest_value, smalest_index\
    \ };", "        if (arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n        if (arr.Count == 1) {\n            return new List<long> {\
    \ arr[0] };\n        }\n        var min = arr.Min();\n        long minIndex;\n\
    \        var temp = new List<long>();\n        bool found = false;\n        int\
    \ count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ != min && arr[i] % 2 == 0) {\n                temp.Add(arr[i]);\n          \
    \      found = true;\n                minIndex = i;\n            } else if (arr[i]\
    \ == min && count < 2) {\n                temp.Add(arr[i]);\n                count++;\n\
    \            }\n        }\n        if (!found) {\n            return new List<long>();\n\
    \        }\n        if (count == 2 && min != 0) {\n            var temp2 = Pluck(new\
    \ List<long> { arr[minIndex] });\n            temp2.Add(minIndex);\n         \
    \   return temp2;\n        } else {\n            return temp;\n        }", " \
    \       var res = new List<long>();\n        var map = arr.ToDictionary(x => x,\
    \ x => x);\n        var largestEven = arr.Where(x => x % 2 == 0).OrderBy(x =>\
    \ x).First();\n        var even = arr.Where(x => x % 2 == 0);\n        var index\
    \ = 0;\n        var smallest = even.OrderBy(x => x).First();\n        var indexToAdd\
    \ = -1;\n        if (smallest % 2 != 0) {\n            smallest = smallest - 1;\n\
    \        }\n        if (smallest == 0 || smallest == largestEven) {\n        \
    \    res.Add(smallest);\n            res.Add(0);\n            return res;\n  \
    \      }\n        if (smallest == largestEven) {\n            indexToAdd = even.IndexOf(smallest);\n\
    \        }\n        if (smallest > largestEven) {\n            res.Add(smallest);\n\
    \            index = even.IndexOf(smallest);\n        }\n        else if (smallest\
    \ == largestEven) {\n            indexToAdd = 0;\n        }\n        else {\n\
    \            indexToAdd = 0;\n        }\n\n        foreach (var x in even.Skip(index).ToList())\
    \ {\n            if (map[x] == largestEven) {\n                map[x] = even.IndexOf(x);\n\
    \            }\n        }\n        var minEvenValue = even.First();\n        var\
    \ minEvenValue = even.First();\n        var minEvenIndex = even.IndexOf(minEvenValue);\n\
    \        if (map[indexToAdd] == largestEven) {\n            map[indexToAdd] =\
    \ minEvenIndex;\n        }\n        foreach (var x in even.Skip(indexToAdd).ToList())\
    \ {\n            if (map[x] == largestEven) {\n                map[x] = minEvenIndex;\n\
    \            }\n        }\n\n        res.Add(map[index]);\n        return res;",
  "        // code here\n        List<long> picks = new List<long>();\n        long\
    \ smalest_value = arr.Min();\n        long smalest_index = 0;\n        foreach\
    \ (long num in arr) {\n            if (num % 2 == 0) {\n                if (smalest_value\
    \ < num && num < smalest_value) {\n                    smalest_value = num;\n\
    \                    smalest_index = arr.IndexOf(num);\n                }\n  \
    \          }\n        }\n        picks.Add(smalest_value);\n        picks.Add(smalest_index);\n\
    \        return picks;", "        var result = new List<long>();\n        var\
    \ minValue = (long?)null;\n        var minIndex = 0;\n        var currentIndex\
    \ = 0;\n        var evenCount = 0;\n\n        // for each element of the array\n\
    \        foreach (var item in arr) {\n            if (item % 2 == 0) {\n     \
    \           // count the number of even values so far\n                evenCount\
    \ += 1;\n            } else {\n                // if we've found a non-even value\
    \ and it's smaller than the current minimum\n                if (minValue == null\
    \ || (minValue == item && minIndex < currentIndex)) {\n                    minValue\
    \ = item;\n                    minIndex = currentIndex;\n                }\n \
    \               // if we've found an even value and it's greater than the current\
    \ minimum\n                if (minValue != null && (item == minValue || (item\
    \ == minValue && minIndex > currentIndex))) {\n                    minValue =\
    \ item;\n                    minIndex = currentIndex;\n                }\n   \
    \             // if we found an even value\n                if (minValue != null\
    \ && item == minValue) {\n                    currentIndex += 1;\n           \
    \     }\n            }\n        }\n\n        if (minValue == null) return result;\n\
    \n        result.Add(minValue);\n        result.Add(minIndex);\n        return\
    \ result;", "        Debug.WriteLine(arr.Count);\n        List<long> result =\
    \ new List<long>();\n        if (arr.Count == 0) {\n            return result;\n\
    \        }\n        long Smallest_Even_Value = 1;\n        long Smallest_Index\
    \ = 1;\n        long Smallest_Even_Value_Index = 1;\n        List<long> Smallest_Even_Value_Indexlist\
    \ = new List<long>();\n        List<long> Smallest_Even_Value_Indexlist_Value\
    \ = new List<long>();\n        List<long> Smallest_Even_Value_Indexlist_Index\
    \ = new List<long>();\n        int Smallest_Index_Count = 1;\n        bool Smallest_Even_Value_Count_Increased\
    \ = true;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i %\
    \ 2 == 0) {\n                if (Smallest_Even_Value > arr[i]) {\n           \
    \         Smallest_Even_Value = arr[i];\n                    Smallest_Even_Value_Index\
    \ = i;\n                }\n                Smallest_Even_Value_Indexlist.Add(i);\n\
    \                Smallest_Even_Value_Indexlist_Value.Add(arr[i]);\n          \
    \      Smallest_Even_Value_Indexlist_Index.Add(i);\n                Smallest_Even_Value_Count_Increased\
    \ = true;\n            } else {\n                if (Smallest_Even_Value == arr[i])\
    \ {\n                    Smallest_Even_Value_Count_Increased = false;\n      \
    \          }\n                if (Smallest_Even_Value_Count_Increased == true)\
    \ {\n                    if (Smallest_Even_Value < arr[i]) {\n               \
    \         Smallest_Even_Value_Index = i;\n                        Smallest_Even_Value_Indexlist.Add(i);\n\
    \                        Smallest_Even_Value_Indexlist_Value.Add(arr[i]);\n  \
    \                      Smallest_Even_Value_Indexlist_Index.Add(i);\n         \
    \               Smallest_Even_Value_Count_Increased = true;\n                \
    \    }\n                }\n            }\n        }\n        Smallest_Index =\
    \ Smallest_Even_Value_Index;\n        for (int i = 0; i < Smallest_Even_Value_Indexlist_Index.Count;\
    \ i++) {\n            if (i == Smallest_Index_Count) {\n                result.Add(Smallest_Even_Value_Indexlist_Value[Smallest_Even_Value_Indexlist_Index[i]]);\n\
    \                result.Add(Smallest_Even_Value_Index);\n            }\n     \
    \   }\n        return result;", "        Debug.Assert(arr.Count > 0);\n      \
    \  if (arr.Count == 1) {\n            var res = new List<long>() { arr[0] };\n\
    \            return res;\n        }\n        long min = arr.Min();\n        var\
    \ res1 = new List<long>();\n        var res2 = new List<long>();\n        var\
    \ res3 = new List<long>();\n        var res4 = new List<long>();\n        var\
    \ res5 = new List<long>();\n        var res6 = new List<long>();\n        foreach\
    \ (var a in arr) {\n            var b = new List<long>();\n            if (a ==\
    \ min)\n            {\n                b.Add(a);\n            }\n            else\
    \ if (a < min)\n            {\n                b.Add(min);\n            }\n  \
    \          else\n            {\n                var count = arr.ToList().Where(x\
    \ => x == min).Count();\n                if (count > 0)\n                {\n \
    \                   b.Add(min);\n                }\n                else\n   \
    \             {\n                    Debug.Assert(count != 0);\n             \
    \       var min = Math.Min(a, min);\n                    var k = arr.ToList().FindIndex(x\
    \ => x == min);\n                    var index = k;\n                    b.Add(min);\n\
    \                    b.Add(index);\n                }\n            }\n       \
    \     if (b.Count == 2)\n            {\n                res1.Add(b[0]);\n    \
    \            res2.Add(b[1]);\n            }\n            else if (b.Count == 3)\n\
    \            {\n                res3.Add(b[0]);\n                res4.Add(b[1]);\n\
    \                res5.Add(b[2]);\n            }\n            else if (b.Count\
    \ == 4)\n            {\n                res6.Add(b[0]);\n                res7.Add(b[1]);\n\
    \                res8.Add(b[2]);\n                res9.Add(b[3]);\n          \
    \  }\n        }\n        var res11 = new List<long>(res1);\n        var res12\
    \ = new List<long>(res2);\n        var res13 = new List<long>(res3);\n       \
    \ var res14 = new List<long>(res4);\n        var res15 = new List<long>(res5);\n\
    \        var res16 = new List<long>(res6);\n        var res17 = new List<long>(res7);\n\
    \        var res18 = new List<long>(res8);\n        var res19 = new List<long>(res9);\n\
    \        if (res11.Count > res16.Count && res11.Count > res18.Count)\n       \
    \ {\n            return new List<long>(res11);\n        }\n        if (res12.Count\
    \ > res17.Count && res12.Count > res19.Count)\n        {\n            return new\
    \ List<long>(res12);\n        }\n        if (res13.Count > res18.Count && res13.Count\
    \ > res19.Count)\n        {\n            return new List<long>(res13);\n     \
    \   }\n        if (res14.Count > res19.Count && ", "        HashSet<long> set\
    \ = new HashSet<long>();\n        bool first = true;\n        long smallest_index\
    \ = 0;\n        for (int i = 0; i < arr.Count; ++i) {\n            long val =\
    \ arr[i];\n            if (val % 2 == 0) {\n                set.Add(val);\n  \
    \              if (first) {\n                    smallest_index = i;\n       \
    \             first = false;\n                }\n            }\n        }\n  \
    \      if (!set.Any()) {\n            return new List<long>();\n        }\n\n\
    \        List<long> ret = new List<long>();\n        foreach (long val in set)\
    \ {\n            ret.Add(val);\n        }\n        if (ret.Count > 1) {\n    \
    \        return ret;\n        }\n\n        long min = ret.Min();\n        if (smallest_index\
    \ == ret[ret.IndexOf(min)] & ret.Count > 1) {\n            return ret;\n     \
    \   }\n\n        return ret.Where(a => a != min).ToList();", "        int length\
    \ = arr.Count;\n        List<long> list = new List<long>();\n\n        if (arr.Any())\n\
    \        {\n            list.Add(arr.Min());\n        }\n        else\n      \
    \  {\n            return list;\n        }\n        \n        long curval = arr.Min();\n\
    \        List<long> minindexes = new List<long>();\n        \n        for (int\
    \ i = 0; i < length; i++)\n        {\n            if (arr[i] % 2 == 0)\n     \
    \       {\n                long curmin = curval;\n                long curindex\
    \ = i;\n                for (int j = i + 1; j < length; j++)\n               \
    \ {\n                    if (arr[j] % 2 == 0 && arr[j] < curmin)\n           \
    \         {\n                        curmin = arr[j];\n                      \
    \  curindex = j;\n                    }\n                }\n                list.Add(curmin);\n\
    \                minindexes.Add(curindex);\n            }\n        }\n\n     \
    \   return list;", "        List<long> evenValues = new List<long>();\n      \
    \  List<long> indexes = new List<long>();\n        int maxCount = 0;\n       \
    \ long maxValue = 0;\n        for (int i = 0; i < arr.Count; i++) {\n        \
    \    if (arr[i] % 2 == 0) {\n                evenValues.Add(arr[i]);\n       \
    \         if (arr[i] > maxValue) {\n                    maxValue = arr[i];\n \
    \                   maxCount = 1;\n                }\n                else {\n\
    \                    maxCount++;\n                }\n            }\n         \
    \   else if (arr[i] == maxValue) {\n                indexes.Add(i);\n        \
    \    }\n        }\n        if (evenValues.Count == 0) {\n            return new\
    \ List<long>();\n        }\n        else {\n            int index = 0;\n     \
    \       List<long> result = new List<long>();\n            foreach (var item in\
    \ evenValues) {\n                if (index != 0) {\n                    if (item\
    \ == maxValue) {\n                        if (indexes.Count == maxCount) {\n \
    \                           result.Add(maxValue);\n                          \
    \  result.Add(indexes.Count - 1);\n                        }\n               \
    \         else {\n                            result.Add(maxValue);\n        \
    \                    result.Add(index);\n                        }\n         \
    \               break;\n                    }\n                    else {\n  \
    \                      if (item < maxValue) {\n                            result.Add(maxValue);\n\
    \                            result.Add(index);\n                        }\n \
    \                       else {\n                            result.Add(item);\n\
    \                        }\n                        index++;\n               \
    \     }\n                }\n                else {\n                    if (item\
    \ < maxValue) {\n                        result.Add(item);\n                 \
    \   }\n                    else {\n                        result.Add(maxValue);\n\
    \                        result.Add(index);\n                    }\n         \
    \           index++;\n                }\n            }\n            return result;\n\
    \        }", "        long smalest_value = arr[0];\n        int smalest_index\
    \ = 0;\n        int index = 1;\n        List<long> result;\n        for (int i\
    \ = 1; i < arr.Count; i++)\n        {\n            if (arr[i] < arr[index])\n\
    \            {\n                smalest_value = arr[i];\n                smalest_index\
    \ = index;\n            }\n            else\n            {\n                index++;\n\
    \            }\n        }\n        result = new List<long>(new long[]{smalest_value,\
    \ smalest_index});\n        return result;", "        List<long> results = new\
    \ List<long>();\n        long smallestEvenValue = -1;\n        int smallestIndex\
    \ = 0;\n        foreach (var node in arr) {\n            if (smallestEvenValue\
    \ == -1 && node.Value % 2 == 0) {\n                smallestEvenValue = node.Value;\n\
    \                smallestIndex = arr.IndexOf(node);\n            }\n         \
    \   if (smallestEvenValue != -1 && node.Value % 2 == 0) {\n                if\
    \ (node.Value < smallestEvenValue) {\n                    smallestEvenValue =\
    \ node.Value;\n                    smallestIndex = arr.IndexOf(node);\n      \
    \          }\n            }\n            if (smallestEvenValue != -1 && node.Value\
    \ % 2 == 0 && node.Value > smallestEvenValue) {\n                results.Add(smallestEvenValue);\n\
    \                results.Add(smallestIndex);\n                smallestEvenValue\
    \ = -1;\n                smallestIndex = 0;\n            }\n        }\n      \
    \  if (smallestEvenValue != -1) {\n            results.Add(smallestEvenValue);\n\
    \            results.Add(smallestIndex);\n        }\n        return results;",
  "        var minValues = arr.Select(x => x.ToString()).Where(x => int.TryParse(x,\
    \ out int value)).Select(x => new { value = x, idx = arr.FindIndex(y => y.ToString()\
    \ == x.ToString()) }).GroupBy(x => x.value % 2).Select(x => new { value = x.Key,\
    \ idx = x.Min(y => y.idx) }).Where(x => x.value % 2 == 0).Select(x => x.value).ToList();\n\
    \        var smallestEven = minValues.SingleOrDefault(x=>x%2 == 0);\n        if\
    \ (smallestEven == 0) return new List<long>();\n        var idx = arr.FindIndex(x\
    \ => x.ToString() == smallestEven);\n        return new List<long> { smallestEven,\
    \ idx };", "        Debug.Assert(arr.Length >= 1, \"arr must have at least 1 element\"\
    );\n        Debug.Assert(arr.All(a => a >= 0L), \"arr should only contain positive\
    \ numbers\");\n        Debug.Assert(arr.All(a => a % 2 == 1), \"arr should only\
    \ contain even numbers\");\n\n        List<long> result = new List<long>();\n\
    \        Debug.Assert(arr.Count == arr.Max(), \"arr must contain all elements\
    \ <= arr.max\");\n\n        List<long> evens = arr.Where(a => a % 2 == 0).ToList();\n\
    \        if (evens.Count == 0) {\n            return result;\n        }\n\n  \
    \      long smallestEven = evens.Min();\n        result.Add(smallestEven);\n \
    \       int index = arr.IndexOf(smallestEven);\n        while (index > 0) {\n\
    \            smallestEven = evens[index - 1];\n            result.Add(smallestEven);\n\
    \            index = arr.IndexOf(smallestEven);\n        }\n\n        return result;",
  "        if (arr.Any()) {\n            var minValue = new long?();\n           \
    \ var minIndex = 0;\n            for (int i = 0; i < arr.Count; i++) {\n     \
    \           var value = arr[i];\n                if (minValue.HasValue && value\
    \ < minValue.Value) {\n                    continue;\n                }\n    \
    \            if (minValue.HasValue && value == minValue.Value) {\n           \
    \         minIndex = i;\n                }\n                if (i % 2 == 0) {\n\
    \                    minValue = value;\n                }\n            }\n   \
    \         return minIndex == 0 ? new List<long>() : new List<long>(arr.Take(minIndex\
    \ + 1).ToList());\n        }\n        return new List<long>();", "        List<long>\
    \ ret = new List<long>();\n        HashSet<long> vals = new HashSet<long>();\n\
    \        for (int i = 0; i < arr.Count; i++)\n        {\n            if (vals.Add(arr[i]))\n\
    \            {\n                ret.Add(arr[i]);\n            }\n        }\n \
    \       if (ret.Count == 0)\n        {\n            return ret;\n        }\n \
    \       if (ret.Count == 1)\n        {\n            if (ret.First() == arr.First())\n\
    \            {\n                return ret;\n            }\n            else\n\
    \            {\n                ret.Remove(ret.First());\n                return\
    \ ret;\n            }\n        }\n        long[] arr = arr.OrderBy(x=>x).ToArray();\n\
    \        long smallest = arr.First();\n        long largest = arr.Last();\n  \
    \      int smallest_index = -1;\n        int largest_index = -1;\n        for\
    \ (int i = 1; i < arr.Length; i++)\n        {\n            if (arr[i] > largest)\n\
    \            {\n                largest = arr[i];\n                largest_index\
    \ = i;\n            }\n            if (arr[i] < smallest)\n            {\n   \
    \             smallest = arr[i];\n                smallest_index = i;\n      \
    \      }\n        }\n        if (smallest == arr.First())\n        {\n       \
    \     ret = new List<long>();\n        }\n        else if (smallest == arr.Last())\n\
    \        {\n            ret = new List<long>();\n            ret.Add(smallest);\n\
    \        }\n        else if (smallest_index == largest_index)\n        {\n   \
    \         ret = new List<long>();\n            ret.Add(smallest);\n          \
    \  ret.Add(smallest_index);\n        }\n        else\n        {\n            ret\
    \ = new List<long>();\n            ret.Add(smallest);\n            ret.Add(smallest_index);\n\
    \            ret.Add(largest);\n            ret.Add(largest_index);\n        }\n\
    \        return ret;", "        var smalest_value;\n        var smalest_index;\n\
    \        var index = arr.Count - 1;\n        while (index >= 0) {\n          \
    \  if (arr[index] % 2 != 0) {\n                smalest_value = arr[index];\n \
    \               smalest_index = index;\n            }\n            index--;\n\
    \        }\n        return new List<long>() { smalest_value, smalest_index };",
  "        int[] evens = new int[arr.Count];\n        int index = 0;\n        bool\
    \ hasEven = false;\n        for (int i = 0; i < arr.Count; i++) {\n          \
    \  if (arr[i] % 2 == 0) {\n                evens[index] = i;\n               \
    \ hasEven = true;\n                index++;\n            }\n        }\n      \
    \  if (hasEven) return evens.OrderBy(ev => ev).FirstOrDefault();\n        else\
    \ return arr.OrderBy(a => a).FirstOrDefault();", "        var result = new List<long>();\n\
    \n        foreach (var item in arr)\n        {\n            if (item.HasValue)\n\
    \            {\n                result.Add(item);\n            }\n        }\n\n\
    \        if (result.Count != 0)\n        {\n            int min = result.Min();\n\
    \n            int index = 0;\n            for (int i = 0; i < result.Count; i++)\n\
    \            {\n                if (result[i] == min)\n                {\n   \
    \                 index = i;\n                    break;\n                }\n\
    \            }\n\n            if (result.Any(item => item == min))\n         \
    \   {\n                result.Remove(min);\n                result.Insert(0, min);\n\
    \            }\n        }\n\n        if (result.Count != 0)\n        {\n     \
    \       int min = result.Min();\n\n            int index = 0;\n            for\
    \ (int i = 0; i < result.Count; i++)\n            {\n                if (result[i]\
    \ == min)\n                {\n                    index = i;\n               \
    \     break;\n                }\n            }\n\n            result.Remove(min);\n\
    \            result.Insert(0, min);\n        }\n\n        return result;", " \
    \       if (arr.Count < 1) {\n            return new List<long>();\n        }\n\
    \        var ret = arr.OrderBy(x => x).Take(2).ToList();\n        var count =\
    \ arr.GroupBy(x => (x % 2 == 0)).OrderBy(x => x).Count();\n        if (count >\
    \ 1 && count != ret.Count || ret.Count == 1) {\n            ret.Add(ret.First());\n\
    \        }\n        return ret;", "        long even = 1L;\n        List<long>\
    \ res = new List<long>();\n        foreach (var x in arr.OrderBy(a => a)) {\n\
    \            if (even % x == 0) {\n                even = even / x;\n        \
    \        res.Add(x);\n            }\n        }\n        if (res.Count == 0)\n\
    \            res.Add(0L);\n        return res;", "        List<long> ret = new\
    \ List<long>();\n        if (arr.Count == 0) {\n            return ret;\n    \
    \    }\n        List<long> smallest = new List<long>();\n        int index = 0;\n\
    \        bool flag = false;\n        long min_value = arr.Min();\n        foreach\
    \ (long value in arr) {\n            if (value != min_value) {\n             \
    \   flag = true;\n                break;\n            }\n            if (flag)\
    \ {\n                smallest.Add(value);\n                index++;\n        \
    \    }\n        }\n        if (flag) {\n            smallest.Sort();\n       \
    \     ret.Add(smallest[0]);\n            ret.Add(index);\n        }\n        return\
    \ ret;", "        if (arr.Any(x => x != 0L) && arr.Count(x => x % 2 == 0) == arr.Max(x\
    \ => x % 2).Value) {\n            var evens = arr.Where(x => x % 2 == 0);\n  \
    \          evens = evens.Select(x => x).ToList();\n            evens.RemoveAll(x\
    \ => x == 0L);\n            if (evens.Count == 0)\n                return new\
    \ List<long>();\n            var smalest_value = evens.Min();\n            var\
    \ smalest_index = 0;\n            var index_of_smalest_value = 0;\n          \
    \  var index_of_smalest_value_bad = 0;\n            var index_of_smalest_value_bad_1\
    \ = 0;\n            for (var i = 0; i < evens.Count; i++) {\n                var\
    \ current = evens[i];\n                index_of_smalest_value = i;\n         \
    \       if (current < smalest_value) {\n                    smalest_value = current;\n\
    \                    index_of_smalest_value = i;\n                }\n        \
    \        if (i == evens.Count - 1)\n                    break;\n             \
    \   index_of_smalest_value_bad = i;\n                if (current % 2 == 0)\n \
    \                   index_of_smalest_value_bad_1 = i;\n                if (index_of_smalest_value\
    \ < index_of_smalest_value_bad_1) {\n                    index_of_smalest_value_bad\
    \ = index_of_smalest_value_bad_1;\n                }\n            }\n        \
    \    var result = new List<long>();\n            while (true) {\n            \
    \    var index = index_of_smalest_value;\n                result.Add(arr[smalest_index]);\n\
    \                index_of_smalest_value = index_of_smalest_value_bad;\n      \
    \          if (index_of_smalest_value == arr.Count - 1)\n                    break;\n\
    \                index_of_smalest_value_bad = index_of_smalest_value_bad_1;\n\
    \                if (index_of_smalest_value == arr.Count - 1)\n              \
    \      break;\n                index_of_smalest_value_bad_1 = index_of_smalest_value_bad;\n\
    \                if (index_of_smalest_value == arr.Count - 1)\n              \
    \      break;\n                index_of_smalest_value_bad_1 = index_of_smalest_value_bad;\n\
    \                if (index_of_smalest_value == arr.Count - 1)\n              \
    \      break;\n                index_of_smalest_value_bad_1 = index_of_smalest_value_bad;\n\
    \                if (index_of_smalest_value == arr.Count - 1)\n              \
    \      break;\n                index_of_smalest_value_bad_1 = index_of_smalest_value_bad;\n\
    \                if (index_of_smalest_value == arr.Count - 1)\n              \
    \      break;\n            }\n            return result;\n        }\n        else\n\
    \            return new List<long>();", "        List<long> res = new List<long>();\n\
    \        if (arr.Count() == 0) {\n            return res;\n        }\n       \
    \ long smalest_val = arr.OrderByDescending(x => (x & 1) == 0 ? x : x >> 1).First();\n\
    \        int smallest_idx = 0;\n        for (int i = 0; i < arr.Count(); i++)\
    \ {\n            if ((arr[i] & 1) == 0) {\n                if (smalest_val !=\
    \ arr[i]) {\n                    smalest_val = arr[i];\n                    smallest_idx\
    \ = i;\n                }\n            }\n        }\n        if (smalest_val ==\
    \ arr.Last()) {\n            res.Add(smalest_val);\n        }\n        else {\n\
    \            res.Add(smalest_val);\n            res.Add(smallest_idx);\n     \
    \   }\n        return res;", "        if (arr.Count < 2) {\n            return\
    \ new List<long>();\n        }\n\n        long smalest_value = 0;\n        int\
    \ min_idx = 0;\n        int max_idx = arr.Count - 1;\n\n        while (min_idx\
    \ < max_idx) {\n            int m = (min_idx + max_idx) / 2;\n\n            long\
    \ leftsum = arr[m] + arr[m - 1];\n            long rightsum = arr[m] - arr[m -\
    \ 1];\n            if (leftsum % 2 == 0 && rightsum % 2 == 0) {\n            \
    \    if (leftsum > rightsum) {\n                    smalest_value = arr[m];\n\
    \                    min_idx = m + 1;\n                } else {\n            \
    \        smalest_value = arr[m - 1];\n                    max_idx = m - 1;\n \
    \               }\n            } else {\n                smalest_value = arr[m\
    \ - 1];\n                min_idx = m + 1;\n            }\n        }\n\n      \
    \  return new List<long> {\n            smalest_value,\n            min_idx\n\
    \        };", "        List<long> result = new List<long>();\n        List<int>\
    \ arrIndex = new List<int>();\n        bool isEven = true;\n        foreach (long\
    \ n in arr)\n        {\n            if (n % 2 == 0) {\n                isEven\
    \ = false;\n            }\n            int i = arrIndex.IndexOf(Math.Floor(n /\
    \ 2.0));\n            if (i == -1) {\n                arrIndex.Add(i);\n     \
    \       }\n        }\n        if (arrIndex.Count > 0) {\n            int min =\
    \ arrIndex.Min();\n            long minValue = 0;\n            int minIndex =\
    \ 0;\n            for (int i = 0; i < arrIndex.Count; i++)\n            {\n  \
    \              long value = arrIndex[i];\n                if (value < minValue)\n\
    \                {\n                    minValue = value;\n                  \
    \  minIndex = i;\n                }\n            }\n            if (isEven)\n\
    \            {\n                result.Add(minValue);\n                result.Add(minIndex);\n\
    \            }\n            else\n            {\n                result.Add(minIndex);\n\
    \            }\n        }\n        else {\n            result.Add(new List<long>());\n\
    \        }\n        return result;", "        if(arr.Count == 0)\n           \
    \ return new List<long>();\n        if(arr.Count == 1)\n            return arr;\n\
    \        if(arr.Count == 2)\n            return arr.Where(a => a % 2 == 0).OrderBy(a\
    \ => a).First();\n        var min = arr.Where(a => a % 2 == 0).Min(a => a);\n\
    \        List<long> ret = new List<long>();\n        List<long> picker = new List<long>();\n\
    \        var index = arr.FindIndex(a => a > min);\n        picker.Add(min);\n\
    \        picker.Add(index);\n        ret.AddRange(picker.Skip(1).Take(picker.Count\
    \ - 2));\n        return ret;", "        List<long> rez = new List<long>();\n\
    \        foreach (long value in arr)\n        {\n            if (value % 2 ==\
    \ 0)\n            {\n                long index = GetIndex(value);\n         \
    \       if (index == -1)\n                    rez.Add(value);\n              \
    \  else\n                {\n                    rez.Add(value);\n            \
    \        rez.Add(index);\n                }\n            }\n        }\n      \
    \  return rez;", "        // write your code here\n        List<long> result =\
    \ new List<long>();\n        Dictionary<long, int> index = new Dictionary<long,\
    \ int>();\n        foreach (long n in arr)\n        {\n            if (!index.ContainsKey(n))\
    \ {\n                index.Add(n, arr.IndexOf(n));\n            }\n        }\n\
    \n        List<long> evens = index.Values.Where(p => p % 2 == 0).OrderBy(p =>\
    \ p).ToList();\n        long smalest_value = evens.First();\n\n        if (evens.Count\
    \ == 0) {\n            return result;\n        }\n\n        if (evens.Count >\
    \ 1) {\n            int smallest_index = evens.IndexOf(smalest_value);\n     \
    \       if (smallest_index == -1) {\n                return result;\n        \
    \    }\n        }\n\n        result.Add(smalest_value);\n        return result;",
  "        int n = arr.Count;\n        int m = arr.Max();\n        long minIndex =\
    \ -1;\n        bool minValue = false;\n        for (int i = 0; i < n; i++) {\n\
    \            if (arr[i] % 2 == 0) {\n                if (!minValue || (minValue\
    \ && arr[i] < minValue)) {\n                    minValue = arr[i];\n         \
    \           minIndex = i;\n                }\n            }\n        }\n     \
    \   List<long> retval = new List<long>(new long[] { minValue, minIndex });\n \
    \       return retval;", "        if (arr.Count == 0)\n            return new\
    \ List<long>();\n        var min_value = arr.Min();\n        var result = new\
    \ List<long>();\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] <= min_value) {\n                break;\n            }\n           \
    \ if (arr[i] % 2 == 0) {\n                result.Add(arr[i]);\n              \
    \  break;\n            }\n        }\n        if (result.Count == 0)\n        \
    \    return new List<long>();\n        if (result.Count == 1) {\n            int\
    \ index = result.ToList().IndexOf(min_value);\n            result.RemoveAt(index);\n\
    \            return new List<long>() { result.First() };\n        }\n        int\
    \ min_index = result.ToList().IndexOf(min_value);\n        var new_list = new\
    \ List<long>(result.Count);\n        for (int i = 0; i < result.Count; i++) {\n\
    \            if (i == min_index) {\n                new_list[i] = result.First();\n\
    \                break;\n            }\n            new_list[i] = result[i];\n\
    \        }\n        return new_list;", "        // write your code here\n    \
    \    long[] arr = arr.OrderBy(o => (long) o).ToArray();\n        Dictionary<long,\
    \ int> dic = new Dictionary<long, int>();\n        for (int i = 0; i < arr.Length;\
    \ i++) {\n            if (dic.ContainsKey(arr[i])) {\n                int index\
    \ = dic[arr[i]];\n                int temp = arr[i];\n                for (int\
    \ j = index + 1; j < arr.Length; j++) {\n                    arr[j] = temp;\n\
    \                }\n                return new List<long>() { temp };\n      \
    \      } else {\n                dic.Add(arr[i], i);\n            }\n        }\n\
    \        return new List<long>();", "        long smallest_value = arr[0].Value\
    \ % 2 == 0 ? arr[0].Value : arr[0].Value * 2;\n        List<long> list_node =\
    \ new List<long>();\n        bool isSmalest = false;\n        int smallest_index\
    \ = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i].Value\
    \ % 2 == 0) {\n                if (arr[i].Value < smallest_value) {\n        \
    \            smallest_value = arr[i].Value;\n                    isSmalest = true;\n\
    \                    smallest_index = i;\n                } else if (arr[i].Value\
    \ == smallest_value) {\n                    smallest_index = i;\n            \
    \    }\n            }\n        }\n        if (isSmalest)\n            list_node.Add(smallest_value,\
    \ smallest_index);\n        return list_node;", "        // Your code here\n \
    \       long minVal = arr.Min();\n        long minIndex = 0;\n        List<long>\
    \ res = new List<long>();\n        List<long> evenNodes = new List<long>();\n\
    \        for (int i = 0; i < arr.Count; i++)\n        {\n            if (arr[i]\
    \ % 2 == 0)\n            {\n                evenNodes.Add(arr[i]);\n         \
    \   }\n            else\n            {\n                if (arr[i] < minVal)\n\
    \                {\n                    minVal = arr[i];\n                   \
    \ minIndex = i;\n                }\n            }\n        }\n        if (minVal\
    \ != 0)\n        {\n            evenNodes.Add(minVal);\n        }\n        evenNodes.Sort();\n\
    \        if (evenNodes.Count == 1)\n        {\n            evenNodes.Sort();\n\
    \            res.Add(evenNodes[0]);\n        }\n        else\n        {\n    \
    \        res.Add(minIndex);\n            foreach (long i in evenNodes)\n     \
    \       {\n                res.Add(i);\n            }\n        }\n        return\
    \ res;", "        // write your code here\n        SortedList<long, long> sorted_list\
    \ = new SortedList<long, long>();\n        foreach (var i in arr)\n        {\n\
    \            if (i.Value % 2 == 0 && i.Value != 0)\n            {\n          \
    \      sorted_list.Add(i.Value, i.Index);\n            }\n        }\n        int\
    \ count = 0;\n        SortedList<long, long> sorted_list_2 = new SortedList<long,\
    \ long>();\n        foreach (var i in sorted_list)\n        {\n            if\
    \ (sorted_list.ContainsKey(i.Value) && sorted_list.ContainsKey(i.Value))\n   \
    \         {\n                if (i.Value == sorted_list[i].Value)\n          \
    \      {\n                    count++;\n                    sorted_list_2.Add(i.Value,\
    \ i.Index);\n                }\n            }\n        }\n        if (sorted_list.Count\
    \ != 0)\n        {\n            int j = 0;\n            List<long> result = new\
    \ List<long>();\n            while (j < count)\n            {\n              \
    \  if (sorted_list_2.ContainsKey(sorted_list[j].Value) && sorted_list_2.ContainsKey(sorted_list[j].Value))\n\
    \                {\n                    if (sorted_list[j].Value == sorted_list_2[j].Value)\n\
    \                    {\n                        result.Add(sorted_list[j].Value);\n\
    \                        result.Add(sorted_list[j].Index);\n                 \
    \       break;\n                    }\n                }\n                j++;\n\
    \            }\n            return result;\n        }\n        else\n        {\n\
    \            return new List<long>();\n        }", "        if (arr.Count <= 0)\
    \ return new List<long>();\n        long[] nodes = new long[arr.Count];\n    \
    \    int i, n;\n        long smallestEvenValue, smallestIndex;\n        for (i\
    \ = 0, n = 0; i < arr.Count; ++i)\n            nodes[i] = arr[i];\n        while\
    \ (n > 0) {\n            smallestEvenValue = 0;\n            smallestIndex = 0;\n\
    \            for (i = 0, n = 0; n < arr.Count; ++n)\n                if (nodes[n]\
    \ % 2 == 0 && nodes[n] < smallestEvenValue)\n                    smallestEvenValue\
    \ = nodes[n];\n                else if (nodes[n] % 2 == 0 && nodes[n] == smallestEvenValue)\n\
    \                    smallestIndex = n;\n            i += smallestIndex - n;\n\
    \            while (i < arr.Count)\n                nodes[i++] = nodes[i];\n \
    \           --n;\n        }\n        List<long> ret = new List<long>();\n    \
    \    while (n > 0) {\n            ret.Add(smallestEvenValue);\n            i +=\
    \ smallestIndex - n;\n            while (i < arr.Count)\n                nodes[i++]\
    \ = nodes[i];\n            --n;\n        }\n        if (ret.Count != 0) ret.Remove(ret.Count\
    \ - 1);\n        return ret;", "        long val = new Random().Next();\n    \
    \    List<long> res = new List<long>();\n        foreach (var e in arr)\n    \
    \    {\n            if (e % 2 == 0 && e < val)\n            {\n              \
    \  res.Add(e);\n                val = e;\n            }\n        }\n        if\
    \ (res.Count == 0)\n        {\n            return new List<long>();\n        }\n\
    \        else\n        {\n            List<long> final = new List<long>();\n \
    \           int pos = 0;\n            int index = res.Count - 1;\n           \
    \ int curr = 0;\n            long smallest = val;\n            while (pos < res.Count)\n\
    \            {\n                if (index == 0)\n                {\n         \
    \           final.Add(smallest);\n                    pos = 0;\n             \
    \       index = res.Count - 1;\n                    curr = 0;\n              \
    \      smallest = val;\n                }\n                else if (res[pos] ==\
    \ val)\n                {\n                    curr++;\n                    pos++;\n\
    \                    index = index - 1;\n                }\n                else\
    \ if (res[pos] % 2 == 0 && res[pos] < val)\n                {\n              \
    \      pos = 0;\n                    curr = 0;\n                    index = index;\n\
    \                    smallest = res[pos];\n                }\n               \
    \ else\n                {\n                    index = index - 1;\n          \
    \      }\n            }\n            return final;\n        }", "        long\
    \ smalest_value = arr.Min();\n        var index = arr.IndexOf(smalest_value);\n\
    \        if (arr.Count <= 1) {\n            return new List<long>();\n       \
    \ }\n        while (index != -1) {\n            var value = arr[index];\n    \
    \        var smalest_value = Math.Min(smalest_value, value);\n            index\
    \ = arr.IndexOf(smalest_value);\n        }\n        return new List<long> {smalest_value,\
    \ index};", "        var index = new List<long>();\n        var val = new List<long>();\n\
    \        var smallestEvenVal = arr.Min();\n        foreach (var i in arr) {\n\
    \            if (i % 2 == 0 && i % 2 == smallestEvenVal) {\n                index.Add(i);\n\
    \                val.Add(i);\n            }\n        }\n        \n        if (index.Count\
    \ > 0) {\n            smallestEvenVal = val.Min();\n        }\n        \n    \
    \    var list = new List<long>();\n        if (val.Count > 0) {\n            list.Add(smallestEvenVal);\n\
    \            list.Add(val.Min());\n            list.Add(index.Min());\n      \
    \  }\n        return list;", "        if (arr.Count() == 0)\n            return\
    \ new List<long>();\n        if (arr.Count() > 10000 || arr.Sum() < 0)\n     \
    \       return new List<long>();\n\n        var min = arr.Min();\n        var\
    \ result = new List<long>();\n        var index = 0;\n\n        for (int i = 0;\
    \ i < arr.Count(); i++) {\n            var x = arr[i];\n            if (x % 2\
    \ == 0) {\n                if (x <= min) {\n                    min = x;\n   \
    \                 result.Add(x);\n                }\n                else if (result.Count()\
    \ == 0) {\n                    result.Add(x);\n                }\n           \
    \     else {\n                    var found = false;\n                    for\
    \ (; index >= result.Count(); index--) {\n                        if (result[index]\
    \ == x) {\n                            result.Insert(index, x);\n            \
    \                found = true;\n                            break;\n         \
    \               }\n                    }\n                    if (!found) {\n\
    \                        result.Add(x);\n                    }\n             \
    \   }\n            }\n        }\n        return result;", "        if (arr.Count\
    \ == 0) return new List<long>();\n        var list = new List<long>();\n     \
    \   var hash = new Dictionary<long, List<long>>();\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            if (hash.ContainsKey(arr[i])) {\n         \
    \       hash[arr[i]].Add(i);\n            } else {\n                hash[arr[i]]\
    \ = new List<long>() { i };\n            }\n        }\n        var min = -1;\n\
    \        int cur_idx = 0;\n        var result = new List<long>();\n        foreach\
    \ (var pair in hash) {\n            var idx = pair.Values.Max();\n           \
    \ if (idx >= min || (idx < min && idx == pair.Keys.Max())) {\n               \
    \ min = idx;\n                result.Add(pair.Key);\n                cur_idx =\
    \ idx;\n            }\n        }\n        if (result.Count == 0) {\n         \
    \   return new List<long>();\n        }\n        return result;", "        List<long>\
    \ res = new List<long>();\n        if (arr.Count > 0)\n        {\n           \
    \ arr.Sort();\n            int i = arr.Count;\n            long smalest_value\
    \ = 0;\n            long smalest_index = 0;\n            for (int j = i; j >=\
    \ 1; j--)\n            {\n                if (arr[j] % 2 == 0 && smalest_value\
    \ == 0)\n                {\n                    smalest_value = arr[j];\n    \
    \                smalest_index = j;\n                }\n                else if\
    \ (arr[j] % 2 == 0 && smalest_value > arr[j])\n                {\n           \
    \         smalest_value = arr[j];\n                    smalest_index = j;\n  \
    \              }\n            }\n            res.Add(smalest_value);\n       \
    \     res.Add(smalest_index);\n        }\n        return res;", "        if (arr.Count\
    \ <= 0) return new List<long>();\n        var min = arr.OrderBy(n => n).First();\n\
    \        var index = arr.IndexOf(arr.First(n => n == min));\n        arr.Remove(min);\n\
    \        var rem = arr.Count(n => n % 2 == 0);\n        if (rem == 0) return new\
    \ List<long>();\n        return arr.GroupBy(n => n % 2).Min(ng => ng.First()).OrderBy(n\
    \ => n).First().ToList();", "        var result = new List<long>();\n        if\
    \ (arr.Any(x => x % 2 == 0)) {\n            foreach (var x in arr.Where(x => x\
    \ % 2 == 0)) {\n                result.Add(x);\n            }\n        } else\
    \ {\n            var minValue = arr.Min();\n            var minIndex = Array.IndexOf(arr,\
    \ minValue);\n            if (minIndex < arr.Count - 1) {\n                var\
    \ minNext = arr[minIndex + 1];\n                if (minNext % 2 == 0) {\n    \
    \                result.Add(minNext);\n                }\n            }\n    \
    \    }\n        return result;", "        Debug.WriteLine(\"Starting Pluck\");\n\
    \        int[] indexes = new int[arr.Count];\n        int j = 0;\n        int\
    \ k = 0;\n        int smallest = arr.Min();\n        int minIndex = 0;\n     \
    \   for (int i = 0; i < arr.Count; i++) {\n            indexes[i] = 0;\n     \
    \       while (arr[i] < smallest && arr[i] != smallest) {\n                arr[i]\
    \ += smallest;\n                indexes[i]++;\n                j++;\n        \
    \    }\n            k = smallest;\n            smallest = arr[i];\n          \
    \  for (int n = 0; n < k; n++) {\n                while (arr[k] >= arr[n]) {\n\
    \                    k -= arr[k];\n                    indexes[k] += n;\n    \
    \            }\n            }\n            if (k == arr[i]) {\n              \
    \  if (smallest > arr[i]) {\n                    smallest = arr[i];\n        \
    \        }\n                minIndex = indexes[i];\n            }\n        }\n\
    \        Debug.WriteLine(\"Result: \" + smallest + \" \" + minIndex);\n      \
    \  List<long> result = new List<long>();\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (indexes[i] == minIndex) {\n                result.Add(arr[i]);\n\
    \            }\n        }\n        Debug.WriteLine(\"Pluck Done\");\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long minValue\
    \ = arr.Min();\n        int minIndex = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            long value = arr[i];\n            if (minValue == value)\
    \ {\n                if (minIndex > i) {\n                    minIndex = i;\n\
    \                }\n            } else {\n                if (minValue > value)\
    \ {\n                    minValue = value;\n                    minIndex = i;\n\
    \                }\n            }\n        }\n        if (minValue != arr.Min())\
    \ {\n            result.Add(minValue);\n            result.Add(minIndex);\n  \
    \      } else {\n            result.Add(minIndex);\n        }\n        return\
    \ result;", "        List<long> evens = new List<long>();\n        int smallestIndex\
    \ = 0;\n        long smallestValue = 0;\n        if (arr.Count > 0) {\n      \
    \      for (int i = 0; i < arr.Count; i++) {\n                if (arr[i] % 2 ==\
    \ 0) {\n                    evens.Add(arr[i]);\n                }\n          \
    \      if (arr[i] < smallestValue) {\n                    smallestValue = arr[i];\n\
    \                    smallestIndex = i;\n                }\n            }\n  \
    \          return evens;\n        }\n        return evens;", "        if (arr.Count()\
    \ == 0)\n            return new List<long>();\n        long smallest = arr.Min();\n\
    \        long smallest_odd = arr.Where(i => (i % 2) == 0).Min();\n        long\
    \ smallest_even_value = smallest_odd % 2 == 0 ? smallest_odd : smallest + 1;\n\
    \        var index = arr.FindIndex(i => (i % 2) == 0);\n        var values = new\
    \ List<long>();\n        if (index != -1) {\n            values.Add(arr[index]);\n\
    \            values.Add(index);\n        }\n        if (arr.Count() == 1) {\n\
    \            if (smallest % 2 == 0)\n                values.Add(smallest);\n \
    \           else\n                values.Add(smallest_even_value);\n        }\n\
    \        return values.ToList();", "        if (arr.Count == 0) {\n          \
    \  return new List<long>();\n        }\n        long minValue = arr.Min();\n \
    \       long minIndex = 0;\n        long maxValue = 0;\n        long maxIndex\
    \ = 0;\n\n        foreach (var node in arr) {\n            if (node > maxValue)\
    \ {\n                maxValue = node;\n                maxIndex = minIndex;\n\
    \            } else if (node < minValue) {\n                minValue = node;\n\
    \                minIndex = maxIndex;\n            }\n        }\n\n        if\
    \ (minValue % 2 == 0) {\n            List<long> list = new List<long>();\n   \
    \         list.Add(minValue);\n            list.Add(minIndex);\n            return\
    \ list;\n        } else {\n            if (maxValue % 2 == 0) {\n            \
    \    List<long> list = new List<long>();\n                list.Add(minValue);\n\
    \                list.Add(minIndex);\n                return list;\n         \
    \   } else {\n                List<long> list = new List<long>();\n          \
    \      list.Add(minValue);\n                list.Add(maxIndex);\n            \
    \    return list;\n            }\n        }", "        Stack<long> stack = new\
    \ Stack<long>();\n        foreach (long l in arr) {\n            if (l % 2 ==\
    \ 0) {\n                stack.Push(l);\n            }\n        }\n        while\
    \ (stack.Count > 0) {\n            long value = stack.Pop();\n            List<long>\
    \ result = new List<long>();\n            List<long> indexes = new List<long>();\n\
    \            int j = 0;\n            for (int i = 0; i < arr.Count; i++) {\n \
    \               if (arr[i] == value) {\n                    result.Add(arr[i]);\n\
    \                    indexes.Add(i);\n                }\n                else\
    \ if (arr[i] % 2 == 0) {\n                    if (j == 0 && i + 1 < arr.Count)\
    \ {\n                        result.Add(arr[i + 1]);\n                       \
    \ indexes.Add(i + 1);\n                    }\n                    j++;\n     \
    \           }\n            }\n            if (result.Count != 0) {\n         \
    \       return result;\n            }\n        }\n        return new List<long>();",
  "        var min = arr.Min();\n        var minIndex = arr.FindIndex(n => n == min);\n\
    \        var minIndex = minIndex.Value == arr.Count ? 0 : minIndex.Value;\n  \
    \      var smalest_value = arr.Take(minIndex).ToList();\n        return smalest_value;",
  "        var result = new List<long>();\n        if (arr.Count == 0)\n         \
    \   return result;\n        var evenValue = arr.Min(a => (a % 2 == 0 ? a : 0));\n\
    \        var index = arr.IndexOf(evenValue);\n        arr.RemoveAt(index);\n \
    \       var index = arr.IndexOf(evenValue);\n        if (index < 0)\n        \
    \    return result;\n        result.Add(evenValue);\n        return result;",
  "        int l = arr.Count;\n        int[] counts = new int[l];\n        int[] mins\
    \ = new int[l];\n        for (int i = 0; i < l; i++) {\n            counts[i]\
    \ = 0;\n            mins[i] = 0;\n            while (arr[i] > 0) {\n         \
    \       counts[arr[i] - 1]++;\n                mins[arr[i] - 1]++;\n         \
    \       i--;\n            }\n        }\n        int min_index = mins[0];\n   \
    \     for (int i = 1; i < l; i++) {\n            if (mins[i] == min_index) {\n\
    \                min_index = i;\n            }\n        }\n        List<long>\
    \ result;\n        if (min_index == l) {\n            result = new List<long>();\n\
    \        }\n        else {\n            result = new List<long>(new long[counts[min_index]]);\n\
    \            for (int i = 0; i < min_index; i++) {\n                int index\
    \ = mins[i];\n                result.Add(arr[index]);\n                for (int\
    \ j = 0; j < counts[index] - 1; j++) {\n                    index++;\n       \
    \             result.Add(arr[index]);\n                }\n            }\n    \
    \    }\n        return result;", "        arr.Sort((a, b) => { return (a ^ b).CompareTo(1);\
    \ });\n\n        var smallestEven = arr.First();\n        var smallestIndex =\
    \ 0;\n\n        for (int i = 0; i < arr.Length; i++) {\n            var current\
    \ = arr[i];\n\n            if (current == smallestEven) {\n                smallestEven\
    \ = arr[i + smallestIndex];\n                smallestIndex = i;\n            }\n\
    \n            if (current == smallestEven) {\n                if (smallestIndex\
    \ == 0) {\n                    smallestEven = current;\n                    smallestIndex\
    \ = i;\n                } else {\n                    smallestEven = arr[i + smallestIndex];\n\
    \                    smallestIndex = i;\n                }\n            }\n  \
    \      }\n\n        var result = new List<long>();\n        if (smallestEven !=\
    \ 0) {\n            result.Add(smallestEven);\n            result.Add(smallestIndex);\n\
    \        }\n\n        return result;", "        int n = arr.Count;\n        long[]\
    \ a = new long[n];\n        int m = arr.Sum(x => (x%2 == 0)?x:0);\n        int\
    \ ind = 0;\n        long value = m;\n        for (int i = 0; i < n; i++) {\n \
    \           a[i] = arr[i];\n            if ((a[i] % 2 == 0) && a[i] < value) {\n\
    \                value = a[i];\n                ind = i;\n            }\n    \
    \    }\n        if (value > 0)\n            return new List<long>(new long[] {\
    \ value, ind });\n        else\n            return new List<long>();", "     \
    \   List<long> list = new List<long>();\n        int[] arr = new int[arr.Count];\n\
    \        int k = 0;\n        arr.CopyTo(arr,0);\n        long smalest_value =\
    \ arr[0];\n        long smalest_index = 0;\n        for (int i = 1; i < arr.Length;\
    \ i++) {\n            if (arr[i] < smalest_value) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \      if (smalest_index != 0) {\n            list.Add(smalest_value);\n     \
    \       list.Add(smalest_index);\n        } else {\n            list.Add((long)0);\n\
    \            list.Add((long)0);\n        }\n        return list;", "        if\
    \ (arr.Count == 0) {\n            return new List<long>();\n        }\n      \
    \  int[] hashmap = new int[arr.Count];\n        int min = arr.Min();\n       \
    \ int max = 0;\n        int idx = 0;\n        while (idx < arr.Count) {\n    \
    \        hashmap[idx] = arr[idx] - min;\n            if (hashmap[idx] & 1) ==\
    \ 1) {\n                min = Math.Min(min, arr[idx]);\n                max =\
    \ Math.Max(max, arr[idx]);\n                idx++;\n                continue;\n\
    \            }\n            idx++;\n        }\n        if (min == max) {\n   \
    \         return new List<long>();\n        }\n        var result = new List<long>();\n\
    \        while (min != 0) {\n            var value = min % 2 == 1 ? min : min\
    \ - 1;\n            result.Add(value);\n            min /= 2;\n        }\n   \
    \     return result;", "        int counter = 0;\n        List<long> result =\
    \ new List<long>();\n        bool is_even = true;\n        long picked = 0;\n\
    \        foreach (long i in arr)\n        {\n            is_even = (i % 2 == 0);\n\
    \            if (is_even)\n            {\n                if (counter == 0)\n\
    \                {\n                    picked = i;\n                }\n     \
    \           else\n                {\n                    if (picked < i)\n   \
    \                 {\n                        picked = i;\n                   \
    \ }\n                }\n                counter++;\n            }\n          \
    \  else\n            {\n                if (counter == 0)\n                {\n\
    \                    picked = i;\n                }\n                else\n  \
    \              {\n                    if (picked < i)\n                    {\n\
    \                        picked = i;\n                    }\n                }\n\
    \            }\n            if (counter == 1)\n            {\n               \
    \ if (picked < 0)\n                {\n                    return new List<long>();\n\
    \                }\n                result.Add(picked);\n                counter\
    \ = 0;\n                picked = 0;\n                is_even = true;\n       \
    \     }\n        }\n        if (counter == 0)\n        {\n            return new\
    \ List<long>();\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        List<long> evenNodes = new List<long>();\n    \
    \    List<long> nodes = new List<long>();\n        \n        \n        if (arr.Count()\
    \ == 0)\n            return new List<long>();\n        \n        for (int i =\
    \ 0; i < arr.Count(); i++)\n        {\n            if (arr[i] % 2 == 0)\n    \
    \            nodes.Add(arr[i]);\n            else\n                evenNodes.Add(arr[i]);\n\
    \        }\n        \n        bool isEven = true;\n        int index = nodes.Count();\n\
    \        \n        for (int i = 0; i < nodes.Count(); i++)\n        {\n      \
    \      if (isEven)\n            {\n                if (nodes[i] > nodes[index])\n\
    \                {\n                    index = i;\n                    isEven\
    \ = false;\n                }\n                else\n                {\n     \
    \               result.Add(nodes[i]);\n                    result.Add(i);\n  \
    \              }\n            }\n            else\n            {\n           \
    \     if (nodes[i] > nodes[index])\n                {\n                    index\
    \ = i;\n                    isEven = true;\n                }\n              \
    \  else\n                {\n                    result.Add(nodes[i]);\n      \
    \              result.Add(i);\n                }\n            }\n        }\n \
    \       \n        if (result.Count > 1)\n        {\n            for (int i = 0;\
    \ i < result.Count; i++)\n            {\n                if (result[i] == result[1])\n\
    \                    return new List<long>();\n            }\n        }\n    \
    \    else\n        {\n            return result;\n        }", "        int[] bucket\
    \ = new int[arr.Count];\n        int pos = 0;\n        foreach (long x in arr)\
    \ {\n            bucket[(int)x] += 1;\n            pos += 1;\n        }\n    \
    \    int[] result = new int[bucket.Length];\n        for (int i = 0; i < bucket.Length;\
    \ i++) {\n            if (bucket[i] != 0)\n                result[i] = bucket[i];\n\
    \        }\n        Array.Sort(result, (a, b) => a.CompareTo(b.Value));\n    \
    \    for (int i = 0; i < result.Length; i++) {\n            if (result[i] == 0)\n\
    \                result[i] = result.Length - 1;\n            if (result[i] ==\
    \ result.Length - 1)\n                return arr.Where(x => x == (long)i).ToList();\n\
    \        }\n        return new List<long>();", "        int len = arr.Count;\n\
    \        if (len == 0) {\n            return new List<long>();\n        }\n  \
    \      if (len == 1) {\n            return new List<long>(new long[] { arr[0]\
    \ });\n        }\n        List<long> result = new List<long>();\n        long\
    \ smallest, smallestValue;\n        long minValue = -1;\n        int minIndex\
    \ = -1;\n        for (int i = 0; i < len; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                smallest = arr[i];\n                for (int j = i; j\
    \ < len; j++) {\n                    if (arr[j] < smallest) {\n              \
    \          smallest = arr[j];\n                    }\n                }\n    \
    \            result.Add(smallest);\n                if (smallest < minValue) {\n\
    \                    minValue = smallest;\n                    minIndex = i;\n\
    \                }\n            } else if (arr[i] == minValue) {\n           \
    \     if (arr[i] < minValue) {\n                    minIndex = i;\n          \
    \      }\n            }\n        }\n        if (minIndex == -1) {\n          \
    \  return result;\n        }\n        if (minValue == 0) {\n            if (minIndex\
    \ == 1) {\n                return result;\n            } else {\n            \
    \    result.Add(minIndex);\n                return result;\n            }\n  \
    \      }\n        if (minValue == 1) {\n            result.Add(minIndex);\n  \
    \          return result;\n        }\n        for (int i = minIndex + 1; i < len;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] < minValue)\
    \ {\n                    result.Add(arr[i]);\n                    if (arr[i] <\
    \ minIndex) {\n                        minValue = arr[i];\n                  \
    \      minIndex = i;\n                    }\n                }\n            }\n\
    \        }\n        return result;", "        var result = new List<long>();\n\
    \        var minValue = arr.Min(x => x);\n        var minIndex = arr.IndexOf(minValue);\n\
    \n        // We have found a minimal even value\n        if (minValue % 2 == 0)\
    \ {\n            result.Add(minValue);\n            result.Add(minIndex);\n  \
    \      }\n\n        // We have found a minimal odd value\n        if (minValue\
    \ % 2 == 1) {\n            result.Add(minValue);\n            result.Add(minIndex);\n\
    \        }\n\n        // We have found a minimum value that is not even and is\
    \ not minimal\n        if (minValue > 0 && (minValue - minIndex) % 2 == 1) {\n\
    \            result.Add(minValue);\n            result.Add(minIndex);\n      \
    \  }\n\n        // We have not found a minimal even or minimal odd value or the\
    \ minimum value\n        // is not even or minimal is not even or we haven't found\
    \ anything.\n        if (minValue == 0 || minIndex == -1) {\n            return\
    \ result;\n        }\n\n        // There are still nodes with even values, so\
    \ we will search for the minimal value\n        // that is even and is not minimal\n\
    \        var nextIndex = minIndex;\n        do {\n            // Get the value\
    \ before the index by adding minIndex to it\n            var valueBefore = arr[minIndex\
    \ - 1];\n            // Get the value at the index\n            var value = arr[minIndex];\n\
    \            // Is the value after minIndex a minimal even value?\n          \
    \  if (valueBefore % 2 == 0 && (value - valueBefore) % 2 == 0) {\n           \
    \     result.Add(value);\n                result.Add(nextIndex);\n           \
    \ }\n            nextIndex--;\n        } while (nextIndex >= 0 && nextIndex <\
    \ arr.Count);\n\n        // We didn't find any minimal even or minimal odd value\
    \ or the minimum value\n        // is not even or minimal is not even or we haven't\
    \ found anything.\n        if (minValue == 0 || minIndex == -1 || result.Count\
    \ == 0) {\n            return result;\n        }\n\n        // There are still\
    \ nodes with odd values, so we will search for the minimal value\n        // that\
    \ is odd but is not minimal\n        nextIndex = minIndex;\n        do {\n   \
    \         // Get the value before the index by adding minIndex to it\n       \
    \     var valueBefore = arr[minIndex - 1];\n            // Get the value at the\
    \ index\n            var value = arr[minIndex];\n            // Is the value after\
    \ minIndex a minimal odd value?\n            if (valueBefore % 2 == 1 && (value\
    \ - valueBefore) % 2 == 1) {\n                result.Add(value);\n           \
    \     result.Add(nextIndex);\n            }\n            nextIndex--;\n      \
    \  } while (nextIndex >= 0 && nextIndex < arr.Count);\n\n        // We didn't\
    \ find any minimal odd value or the minimum value\n        // is not odd or minimal\
    \ is not odd or we haven't found anything.\n        if (minValue == 0 || minIndex\
    \ == -1 || result.Count == 0) {\n            return result;\n        }\n\n   \
    \     // There are still nodes with even values, so we will search ", "      \
    \  var sorted = arr.OrderBy(i => i % 2 == 0).ToList();\n        var index = sorted.IndexOf(sorted[0]\
    \ % 2 == 0);\n        return sorted.Take(index).ToList();", "        // initialize\
    \ two variables\n        long max_value = 0, smalest_value = 0;\n        int max_index\
    \ = 0;\n\n        for (int i = 0; i < arr.Count; i++) {\n            long value\
    \ = arr[i];\n            if (value % 2 == 0) {\n                smalest_value\
    \ = value;\n                max_value = max_value < value ? max_value : value;\n\
    \                max_index = i;\n            }\n        }\n\n        List<long>\
    \ result = new List<long>();\n        if (max_value > 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(max_index);\n        }\n\n        return result;", " \
    \       Dictionary<long, int> res = new Dictionary<long, int>();\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (res.ContainsKey(arr[i]))\
    \ {\n                res[arr[i]] = res[arr[i]] + 1;\n            } else {\n  \
    \              res[arr[i]] = 1;\n            }\n        }\n        List<long>\
    \ ret = new List<long>();\n        res.TryGetValue(Math.Min(res.Values.ToArray()),\
    \ out int index);\n        ret.Add(Math.Min(res.Values.ToArray()), index);\n \
    \       return ret;", "        if (arr.Any(item => item < 0L)) {\n           \
    \ throw new ArgumentOutOfRangeException(\"arr\", \"Some of nodes is less than\
    \ 0.\");\n        }\n        List<long> results = new List<long>();\n        long\
    \ smallestEvenValue = arr.Min();\n        int indexOfSmallestEvenValue = arr.IndexOf(smallestEvenValue);\n\
    \        if (indexOfSmallestEvenValue >= 0) {\n            int indexOfSmallestIndex\
    \ = arr.IndexOf(smallestEvenValue);\n            for (int i = 1; i < arr.Count;\
    \ i++) {\n                if (arr[i] < smallestEvenValue) {\n                \
    \    indexOfSmallestIndex = i;\n                    break;\n                }\n\
    \                if (arr[i] == smallestEvenValue) {\n                    if (indexOfSmallestIndex\
    \ == i) {\n                        indexOfSmallestIndex = i;\n               \
    \         break;\n                    }\n                }\n            }\n  \
    \          if (indexOfSmallestIndex > indexOfSmallestEvenValue) {\n          \
    \      indexOfSmallestEvenValue = indexOfSmallestIndex;\n                smallestEvenValue\
    \ = arr[indexOfSmallestIndex];\n            }\n        }\n        results.Add(smallestEvenValue);\n\
    \        results.Add(indexOfSmallestEvenValue);\n        return results;", " \
    \       \n        int smallest_value = 0;\n        int smallest_index = 0;\n \
    \       List<long> result = new List<long>();\n        bool found = false;\n \
    \       \n        // sort array\n        arr = arr.OrderBy(x => x).ToList();\n\
    \n        // find smallest even value\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            long value = arr[i];\n            if (value % 2 == 0) {\n\
    \                if (!found && (value > smallest_value)) {\n                 \
    \   smallest_value = value;\n                    smallest_index = i;\n       \
    \             found = true;\n                }\n                else {\n     \
    \               found = false;\n                }\n            }\n        }\n\n\
    \        // if we have found the smallest value\n        if (!found) {\n     \
    \       result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \            return result;\n        }\n\n        // if we haven't found the smallest\
    \ value\n        \n        // find smallest even value index, index\n        for\
    \ (int i = smallest_index + 1; i < arr.Count; i++) {\n            long value =\
    \ arr[i];\n            if (value % 2 == 0) {\n                result.Add(i);\n\
    \            }\n        }\n\n        // if we have found the smallest even value\n\
    \        \n        // find smallest value\n        for (int i = smallest_index\
    \ + 1; i < arr.Count; i++) {\n            long value = arr[i];\n            if\
    \ (value > smallest_value) {\n                smallest_value = value;\n      \
    \      }\n        }\n\n        // if we have found the smallest value\n      \
    \  \n        // find smallest index\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            long value = arr[i];\n            if (value < smallest_value)\
    \ {\n                smallest_index = i;\n            }\n        }\n\n       \
    \ // if we have found the smallest value\n        \n        // find smallest even\
    \ value index, index\n        for (int i = smallest_index + 1; i < arr.Count;\
    \ i++) {\n            long value = arr[i];\n            if (value % 2 == 0) {\n\
    \                result.Add(i);\n            }\n        }\n\n        // if we\
    \ have found the smallest even value\n        \n        // find smallest value\n\
    \        for (int i = smallest_index + 1; i < arr.Count; i++) {\n            long\
    \ value = arr[i];\n            if (value > smallest_value) {\n               \
    \ smallest_value = value;\n            }\n        }\n\n        // if we have found\
    \ the smallest value\n        \n        // find smallest index\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            long value = arr[i];\n           \
    \ if (value < smallest_value) {\n                smallest_index = i;\n       \
    \     }\n        }\n\n        // if we have found the smallest value\n       \
    \ \n        // find smallest even value index, index\n        for (int i = smallest_index\
    \ + 1; i < arr.Count; i++) {\n            long value = arr[i];\n            if\
    \ (value % 2 == 0) {\n                result.Add(i);\n            }\n        }\n\
    \n        // if we have found the smallest even value\n        \n        // find\
    \ smallest value\n        for (int i = smallest_index + 1; i < arr.Count; i++)\
    \ {\n            long ", "        List<long> evens = new List<long>();\n     \
    \   long[] numbers = arr.OrderBy(x => x).ToArray();\n        int size = arr.Count;\n\
    \        long min = numbers[0];\n        int minIndex = 0;\n        for (int i\
    \ = 1; i < size; i++) {\n            if (numbers[i] % 2 == 0 && numbers[i] < min)\
    \ {\n                min = numbers[i];\n                minIndex = i;\n      \
    \      }\n        }\n        evens.Add(min);\n        List<long> indexes = new\
    \ List<long>();\n        for (int i = 0; i < size; i++) {\n            if (numbers[i]\
    \ != min && numbers[i] < min) {\n                indexes.Add(numbers[i]);\n  \
    \          }\n        }\n        if (indexes.Count > 0) {\n            evens.Add(min);\n\
    \            int index = 0;\n            foreach (var item in indexes) {\n   \
    \             if (item % 2 == 0) {\n                    evens.Add(item);\n   \
    \                 index++;\n                }\n            }\n        }\n    \
    \    return evens.Distinct().OrderBy(x => x).Take(1).ToList();", "        int[]\
    \ indexes = Array.ConvertAll(arr.ToArray(), (index) => new int{index = index});\n\
    \        Array.Sort(indexes, (x, y) => x.index - y.index);\n\n        var result\
    \ = new List<long>();\n        long smallest_value = 0;\n\n        foreach (var\
    \ index in indexes) {\n            if (smallest == 0) smallest = index;\n    \
    \        else if (smallest != 0 && smallest_value < arr.ElementAt(smallest)) break;\n\
    \            else if (smallest == 0 && arr.ElementAt(index) % 2 == 0) result.Add(arr.ElementAt(index));\n\
    \        }\n\n        if (result.Count == 0) return new List<long>();\n      \
    \  else return result;", "        int N = arr.Count;\n        long min = int.MaxValue;\n\
    \        int minIndex = 0;\n\n        for (int i = 0; i < N; i++) {\n        \
    \    if (arr[i] < min) {\n                min = arr[i];\n                minIndex\
    \ = i;\n            }\n        }\n\n        int[] arr = Enumerable.Range(0, N).Where(i\
    \ => arr[i] >= min).ToArray();\n        if (arr.Length == 0) return new List<long>();\n\
    \n        for (int i = 0; i < arr.Length; i++) {\n            int index = i;\n\
    \            long v = arr[i];\n            int pos = 0;\n\n            while (true)\
    \ {\n                if (pos == arr.Length - 1) break;\n                if (arr[pos]\
    \ % 2 == 0 && v <= arr[pos + 1]) {\n                    v = arr[pos + 1];\n  \
    \                  index++;\n                    pos++;\n                } else\
    \ {\n                    break;\n                }\n            }\n\n        \
    \    arr.RemoveAt(index);\n            arr.Insert(index, v);\n        }\n\n  \
    \      return new List<long>(arr);", "        List<long> res = new List<long>();\n\
    \        for (int i = 0; i < arr.Count - 1; i++) {\n            long value = arr[i];\n\
    \            long temp = arr[i + 1];\n            if (Math.Pow(value, 2) % 2 ==\
    \ 0) {\n                res.Add(value);\n                res.Add(temp);\n    \
    \        }\n        }\n        if (res.Count == 0)\n            return new List<long>();\n\
    \        else\n            return res;", "        List<long> results = new List<long>();\n\
    \        foreach (var item in arr)\n        {\n            var temp = item;\n\
    \            if (item % 2 == 0 && item != 0)\n            {\n                temp\
    \ = item / 2;\n            }\n            results.Add(temp);\n        }\n    \
    \    return results.OrderBy(x => x).ToList();", "        var minValue = arr.Min(l\
    \ => l);\n        var minIndex = arr.FindIndex(l => l == minValue);\n        if\
    \ (minIndex >= 0 && minIndex < arr.Count) {\n            var index = minIndex\
    \ + 1;\n            if (arr[index] % 2 == 0) {\n                return arr.Where((n,\
    \ i) => i == index).ToList();\n            } else {\n                return arr.Where((n,\
    \ i) => i == minIndex).ToList();\n            }\n        }\n        return new\
    \ List<long>();", "        if (arr.Count == 0) return new List<long>();\n    \
    \    if (arr.Count == 1) return arr;\n        int min = FindSmallestEvenNode(arr);\n\
    \        int minIndex = 0;\n        for (int i = 1; i < arr.Count; i++) {\n  \
    \          if (arr[i] != min) {\n                if (arr[i] % 2 == 0) {\n    \
    \                minIndex = i;\n                    break;\n                }\n\
    \            } else {\n                minIndex = i;\n            }\n        }\n\
    \        List<long> list = new List<long>();\n        if (minIndex < arr.Count\
    \ - 1) {\n            list.Add(arr[min]);\n            list.Add(minIndex);\n \
    \       } else {\n            list.Add(arr[min]);\n        }\n        return list;",
  "        Dictionary<long, List<int>> map = new Dictionary<long, List<int>>();\n\
    \        foreach (var node in arr) {\n            if (map.ContainsKey(node)) {\n\
    \                map[node].Add(arr.IndexOf(node));\n            } else {\n   \
    \             map.Add(node, new List<int>() { arr.IndexOf(node) });\n        \
    \    }\n        }\n\n        // remove all nodes that have no even values.\n \
    \       foreach (var pair in map) {\n            if (pair.Value.Count > 1 && !pair.Value.Contains(0))\
    \ {\n                map.Remove(pair.Key);\n            }\n        }\n\n     \
    \   if (map.Count == 0) {\n            return new List<long>();\n        }\n\n\
    \        List<long> ret = new List<long>();\n        var sorted_map = map.OrderByDescending(p\
    \ => p.Key);\n        foreach (var pair in sorted_map) {\n            var index\
    \ = pair.Value.FirstOrDefault();\n            ret.Add(pair.Key);\n           \
    \ if (index != 0) {\n                ret.Insert(index, pair.Key);\n          \
    \      break;\n            }\n        }\n\n        return ret;", "        long\
    \ smalest_value = 0;\n        List<long> results = new List<long>();\n       \
    \ HashSet<long> even_values = new HashSet<long>();\n        arr.Sort();\n    \
    \    for (int i = 0; i < arr.Count; i++) {\n            long current = arr[i];\n\
    \            if (current % 2 == 0) {\n                even_values.Add(current);\n\
    \            } else {\n                if (smalest_value == 0) {\n           \
    \         smalest_value = current;\n                    results.Add(smalest_value);\n\
    \                } else {\n                    if (current < smalest_value) {\n\
    \                        smalest_value = current;\n                        results.Add(smalest_value);\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ (smalest_value != 0)\n            results.Add(smalest_value);\n        if (even_values.Count\
    \ == 0)\n            return new List<long>();\n        even_values.Sort();\n \
    \       HashSet<long> smallest_index = new HashSet<long>();\n        Smallest(even_values,\
    \ smallest_index, results);\n        if (smallest_index.Count == 1)\n        \
    \    return new List<long>(smallest_index);\n        return Smallest(even_values,\
    \ smallest_index, results);", "        var evens = arr.Where(x => x % 2 == 0).Select(x\
    \ => (long)x).ToList();\n        var biggest = evens.Where((x, i) => i % 2 ==\
    \ 1).OrderByDescending(x => x).First();\n        var indexed = evens.Select((x,\
    \ i) => new { x, i })\n            .Where(x => x.i == biggest)\n            .ToList();\n\
    \        var selected = indexed\n            .Select(x => new { x.x, x.i })\n\
    \            .Where(x => x.i % 2 == 0)\n            .OrderBy(x => x.x)\n     \
    \       .First();\n        return selected.Select(x => (long)x).ToList();", " \
    \       // write your code here\n        if (arr.Count() == 0) {\n           \
    \ return new List<long>();\n        }\n        var smalest_value = arr.Min();\n\
    \        var smalest_index = -1;\n        var smalest_indexes = new List<long>();\n\
    \        var smalest_value = arr.Min();\n        var smalest_index = -1;\n   \
    \     for (int i = 0; i != arr.Count(); i++) {\n            var value = arr[i];\n\
    \            if (IsEven(value)) {\n                smalest_value = value;\n  \
    \              smalest_index = i;\n            }\n            var ind = arr.ToList().IndexOf(new\
    \ List<long> {value});\n            smalest_indexes = smalest_indexes.Concat(new\
    \ List<long> {ind}).ToList();\n        }\n        if (smalest_indexes.Count ==\
    \ 0) {\n            return new List<long>();\n        }\n        return smalest_indexes.Select(i\
    \ => arr[i]).ToList();", "        bool hasSameEven = false;\n        var result\
    \ = new List<long>();\n        long minEven = 0;\n        long minIndex = -1;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            bool isEven = arr[i]\
    \ % 2 == 0;\n            if (isEven) {\n                if (minEven < arr[i])\
    \ {\n                    minEven = arr[i];\n                    minIndex = i;\n\
    \                }\n            } else {\n                if (minIndex == -1 ||\
    \ minEven < arr[i]) {\n                    minEven = arr[i];\n               \
    \     minIndex = i;\n                }\n            }\n        }\n        if (minIndex\
    \ != -1) {\n            result.Add(minEven);\n            result.Add(minIndex);\n\
    \            return result;\n        }\n        List<long> ret = new List<long>();\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            bool isEven = arr[i]\
    \ % 2 == 0;\n            if (isEven) {\n                if (minEven < arr[i])\
    \ {\n                    minEven = arr[i];\n                    minIndex = i;\n\
    \                }\n            } else {\n                if (minIndex == -1 ||\
    \ minEven < arr[i]) {\n                    minEven = arr[i];\n               \
    \     minIndex = i;\n                }\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return ret;\n        } else {\n            return new\
    \ List<long>();\n        }", "        if(arr.Count <= 0) {\n            return\
    \ new List<long>();\n        }\n        int[] arrVals = arr.Select(x => (int)x).ToArray();\n\
    \        int[] arrIndexes = arr.Select((x, i) => new { value = x, index = i }).ToArray();\n\
    \        int min = arrVals.Min();\n        int minIndex = arrIndexes[arrIndexes.Select((x,\
    \ i) => x == min).First()].index;\n        List<long> results = new List<long>();\n\
    \        foreach(var x in arrVals) {\n            if((x % 2 == 0) && (x < min))\
    \ {\n                minIndex = arrIndexes[arrIndexes.Select((x, i) => x == min).First()].index;\n\
    \            }\n            if((x % 2 != 0) && (x != min)) {\n               \
    \ results.Add(new long[] {x, minIndex});\n            }\n        }\n        return\
    \ results;", "        if (arr == null || arr.Count == 0) {\n            return\
    \ null;\n        }\n\n        int smallest_index = -1;\n        long smallest_value\
    \ = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0 && arr[i] < smallest_value) {\n                smallest_value = arr[i];\n\
    \                smallest_index = i;\n            }\n        }\n\n        if (smallest_index\
    \ != -1) {\n            var list = arr.ToList();\n            list.RemoveAt(smallest_index);\n\
    \            return new List<long> { smallest_value, smallest_index };\n     \
    \   }\n\n        return arr.ToList();", "        List<long> answer = new List<long>();\n\
    \        List<long> nodes = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach(long value in arr) {\n            if (!seen.Contains(value))\
    \ {\n                nodes.Add(value);\n                seen.Add(value);\n   \
    \         }\n        }\n        if (nodes.Count == 0) return answer;\n       \
    \ long smallest_value = Int32.MaxValue;\n        int smallest_index = -1;\n  \
    \      for (int i = 0; i < nodes.Count; i++) {\n            long value = nodes[i];\n\
    \            if (value % 2 == 0 && value <= smallest_value) {\n              \
    \  smallest_value = value;\n                smallest_index = i;\n            }\n\
    \        }\n        if (smallest_index != -1) {\n            answer.Add(smallest_value);\n\
    \            answer.Add(smallest_index);\n        }\n        return answer;",
  "        long minValue = arr.Min();\n        long minIndex = 0;\n        HashSet<long>\
    \ evens = new HashSet<long>();\n        bool hasEven = false;\n        for (long\
    \ i = 0; i < arr.Count; i++) {\n            if (evens.Contains(arr[i]) && (arr[i]\
    \ % 2) == 0) {\n                hasEven = true;\n            }\n            if\
    \ (arr[i] == minValue && hasEven) {\n                if (minIndex == 0) {\n  \
    \                  minIndex = i;\n                } else if (arr[i] < minValue)\
    \ {\n                    minValue = arr[i];\n                    minIndex = i;\n\
    \                }\n            }\n            evens.Add(arr[i]);\n        }\n\
    \        if (arr.Count == 0) {\n            return new List<long>();\n       \
    \ }\n        return new List<long> {minValue, minIndex};", "        Array.Sort(arr);\n\
    \n        if (arr.Count < 2)\n            return new List<long>();\n        var\
    \ minIndex = -1;\n        var minValue = arr[0];\n        for (int i = 1; i <\
    \ arr.Count; i++) {\n            var value = arr[i];\n            if (value <\
    \ minValue) {\n                minValue = value;\n                minIndex = i;\n\
    \            }\n        }\n\n        if (minIndex == -1)\n            return new\
    \ List<long>();\n\n        var newArr = new List<long>(new long[arr.Count]);\n\
    \        var tmpArr = new long[arr.Count];\n        for (var i = 0; i < (arr.Count\
    \ - 1); i++) {\n            tmpArr[i] = arr[i];\n            newArr[i] = arr[i\
    \ + 1];\n        }\n        newArr[minIndex] = minValue;\n        newArr.CopyTo(tmpArr,\
    \ 0);\n\n        return newArr;", "        List<long> minVals = new List<long>();\n\
    \        long minVal = long.MinValue;\n        int minIndex = 0;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] < minVal) {\n    \
    \            minVal = arr[i];\n                minIndex = i;\n            }\n\
    \            if (arr[i] % 2 == 0 && arr[i] < minVal) {\n                minVals.Add(arr[i]);\n\
    \            }\n        }\n        return minVals.Count == 0 ? new List<long>()\
    \ : minVals;", "        List<long> result = new List<long>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n\n        long smallest_value\
    \ = 0;\n        int smallest_index = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] > smallest_value) {\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n\n\
    \        int count = arr.Count;\n        int half = 0;\n        while (half++\
    \ < count) {\n            int left = smallest_index;\n            int right =\
    \ count - 1;\n            bool has_left = false;\n            bool has_right =\
    \ false;\n            while (left <= right) {\n                bool has_left_sub\
    \ = false;\n                bool has_right_sub = false;\n                int left_sub_i\
    \ = left;\n                int right_sub_i = right - 1;\n                int left_sub_j\
    \ = 0;\n                int right_sub_j = 0;\n                while (left_sub_i\
    \ < right_sub_i) {\n                    int left_sub_val = arr[left_sub_i];\n\
    \                    int right_sub_val = arr[right_sub_i];\n                 \
    \   if (left_sub_val > left_sub_val) {\n                        has_left_sub =\
    \ true;\n                        left_sub_i++;\n                    } else if\
    \ (right_sub_val > right_sub_val) {\n                        has_right_sub = true;\n\
    \                        right_sub_i--;\n                    } else {\n      \
    \                  break;\n                    }\n                }\n\n      \
    \          if (has_left_sub) {\n                    if (has_right_sub) {\n   \
    \                     if (left_sub_j != right_sub_j) {\n                     \
    \       bool found = false;\n                            int i = left_sub_i;\n\
    \                            while (!found && i <= right_sub_i) {\n          \
    \                      if (arr[i] == left_sub_j) {\n                         \
    \           found = true;\n                                    break;\n      \
    \                          }\n                                i++;\n         \
    \                   }\n                            if (found) {\n            \
    \                    result.Add(arr[left_sub_i]);\n                          \
    \      result.Add(left_sub_j);\n                            } else {\n       \
    \                         // the right sub-list is empty, so return nothing\n\
    \                                break;\n                            }\n     \
    \                   } else {\n                            has_right_sub = false;\n\
    \                            has_left = false;\n                            break;\n\
    \                        }\n                    } else {\n                   \
    \     if (left_sub_j > left_sub_i) {\n                            has_left = true;\n\
    \                            has_right = false;\n                            break;\n\
    \                        }\n                    }\n                } else {\n\
    \                    if (has_right_sub) {\n                        if (right_sub_j\
    \ > right_sub_i) {\n                            has_right = true;\n          \
    \                  has_left = false;\n                            break;\n   \
    \                     }\n                    } else {\n                      \
    \  if (left > right) {\n                            has_right = true;\n      \
    \                      has_left = false;\n                            break;\n\
    \                        }\n                    }\n                }\n       \
    \     }\n\n            if (has_left || has_right) {\n                break;\n\
    \            }\n        }\n        return result;", "        List<long> res =\
    \ new List<long>();\n        Stack<long> stack = new Stack<long>();\n        long\
    \ smalest_value;\n        long smalest_index;\n        for (long i = 0; i < arr.Count;\
    \ i++) {\n            if (i % 2 == 0) {\n                stack.Clear();\n    \
    \            while (stack.Count != 0) {\n                    smalest_value = stack.Pop();\n\
    \                    smalest_index = i;\n                    i++;\n          \
    \          while (i < arr.Count && i % 2 == 0 && arr[i] <= smalest_value) {\n\
    \                        stack.Push(arr[i]);\n                        i++;\n \
    \                   }\n                }\n                res.Add(smalest_value);\n\
    \                res.Add(smalest_index);\n            }\n        }\n        return\
    \ res.Count == 0 ? new List<long>() : res;", "        List<long> result = new\
    \ List<long>();\n        long smalest_value = arr[0];\n        int smalest_index\
    \ = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long value\
    \ = arr[i];\n            if (value == 0)\n                break;\n           \
    \ if (value % 2 == 0) {\n                smalest_value = value;\n            \
    \    smalest_index = i;\n                break;\n            }\n        }\n  \
    \      if (smalest_index > 0)\n            result.Add(smalest_value);\n      \
    \  else\n            return new List<long>();\n\n        arr.RemoveAt(smalest_index);\n\
    \        return Pluck(arr);", "        var res = new List<long>();\n        Array.Sort(arr.OrderBy(x\
    \ => x));\n\n        List<long> indexes = new List<long>();\n        int i = arr.Count;\n\
    \        int j = 1;\n\n        while (i > 0 || j < arr.Count) {\n            while\
    \ (j > i && arr[i - 1] == arr[j - 1]) {\n                j++;\n            }\n\
    \            if (arr[j] < arr[i - 1]) {\n                res.Add(arr[i - 1]);\n\
    \                indexes.Add(i - 1);\n                i--;\n                j--;\n\
    \            }\n            else {\n                res.Add(arr[j - 1]);\n   \
    \             indexes.Add(j - 1);\n                j--;\n            }\n     \
    \   }\n        if (res == null || res.Count == 0)\n            return null;\n\
    \        var minIndex = 0;\n        var minValue = res[0];\n        for (int i\
    \ = 0; i < res.Count; i++) {\n            if (res[i] == minValue)\n          \
    \      minIndex = indexes[i];\n        }\n        return new List<long> { minValue,\
    \ minIndex };", "        if (arr == null || arr.Count == 0) {\n            return\
    \ new List<long>();\n        }\n\n        long smalest_value = arr.Min();\n  \
    \      var indexOfSmallestValue = new List<int>();\n        var indexOfSmallestIndex\
    \ = new List<int>();\n        var currentValue = smalest_value;\n        var currentIndex\
    \ = 0;\n        var smallestIndex = 0;\n        var result = new List<long>();\n\
    \        foreach (var node in arr) {\n            if (node < currentValue) {\n\
    \                indexOfSmallestIndex.Clear();\n                indexOfSmallestValue.Clear();\n\
    \                indexOfSmallestIndex.Add(currentIndex);\n                indexOfSmallestValue.Add(currentValue);\n\
    \                currentValue = node;\n                currentIndex++;\n     \
    \           smallestIndex = indexOfSmallestIndex.Min();\n                result.Add(indexOfSmallestValue[smallestIndex]);\n\
    \            }\n            else {\n                indexOfSmallestIndex.Clear();\n\
    \                indexOfSmallestValue.Clear();\n                indexOfSmallestIndex.Add(currentIndex);\n\
    \                indexOfSmallestValue.Add(currentValue);\n                if (indexOfSmallestIndex.Count\
    \ == 0) {\n                    break;\n                }\n                currentValue\
    \ = indexOfSmallestValue[indexOfSmallestIndex.Min()];\n                currentIndex++;\n\
    \            }\n        }\n        return result;", "        if (arr.Count < 1)\n\
    \            return arr;\n        Dictionary<long, List<long>> dic = new Dictionary<long,\
    \ List<long>>();\n        for (int i = 0; i < arr.Count; i++) {\n            long\
    \ a = arr[i];\n            if (!dic.ContainsKey(a)) {\n                List<long>\
    \ list = new List<long>();\n                list.Add(a);\n                dic.Add(a,\
    \ list);\n            }\n            else {\n                dic[a].Add(i);\n\
    \            }\n        }\n        int min = Int32.MinValue;\n        List<long>\
    \ result = new List<long>();\n        foreach (KeyValuePair<long, List<long>>\
    \ keyValuePair in dic) {\n            if (keyValuePair.Value.Count != 0) {\n \
    \               int min = Int32.MaxValue;\n                int index = 0;\n  \
    \              List<long> minIndex = new List<long>();\n                foreach\
    \ (long n in keyValuePair.Value) {\n                    int tmp = n % 2;\n   \
    \                 if (tmp < min) {\n                        min = tmp;\n     \
    \                   index = n;\n                    }\n                    else\
    \ {\n                        minIndex.Add(n);\n                    }\n       \
    \         }\n                if (minIndex.Count != 0)\n                    result.Add(new\
    \ Tuple<long, int>(minIndex, index));\n            }\n            else\n     \
    \           break;\n        }\n        if (result.Count > 0) {\n            if\
    \ (result.Count > 1) {\n                List<long> index = new List<long>();\n\
    \                foreach (KeyValuePair<long, List<long>> keyValuePair in dic)\n\
    \                    index.AddRange(keyValuePair.Value);\n                result\
    \ = result.OrderBy(p => p.Item1).First();\n                index.Remove(result);\n\
    \                result = result.Item1 + index.ToList();\n            }\n    \
    \        else if (result.Count == 1)\n                result = result.OrderBy(p\
    \ => p.Item1).First();\n        }\n        return result;", "        List<long>\
    \ indexes = new List<long>();\n        foreach (var element in arr)\n        \
    \    if (element % 2 == 0)\n                indexes.Add(element);\n          \
    \  else\n                return new List<long>();\n        return new List<long>(indexes.OrderBy(i\
    \ => i));", "        List<long> result = new List<long>();\n        if(arr.Count\
    \ > 0){\n            long smallest = arr.Min();\n            bool found = false;\n\
    \            for(int i = 0; i < arr.Count; i++){\n                if(arr[i] ==\
    \ smallest && arr[i] % 2 == 0){\n                    found = true;\n         \
    \       }\n            }\n            if(found){\n                result.Add(smallest);\n\
    \            }\n        }\n        return result;", "        if (arr.Count > 1)\
    \ {\n            long smalest_value;\n            int smalest_index;\n       \
    \     var max_even_index = arr.IndexOf(Math.Min(arr.Skip(1).Select(i => i%2==0).Max(),\
    \ arr.Max()));\n            arr.Remove(max_even_index);\n            smalest_value\
    \ = arr.Min();\n            smalest_index = max_even_index;\n            while\
    \ (max_even_index != -1) {\n                smalest_value = Math.Min(smalest_value,\
    \ arr[max_even_index]);\n                smalest_index = max_even_index;\n   \
    \             max_even_index = arr.IndexOf(Math.Min(arr.Skip(max_even_index +\
    \ 1).Select(i => i%2==0).Max(), arr.Max()));\n                arr.Remove(max_even_index);\n\
    \            }\n            if (smalest_index == arr.Count) return new List<long>(){smalest_value};\n\
    \            else if (arr.Count == 1) return new List<long>(){smalest_value};\n\
    \            return new List<long>(){smalest_value, arr[smalest_index]};\n   \
    \     }\n        return new List<long>();", "        int min_index = -1;\n   \
    \     long min_even_val = 0;\n        foreach (var v in arr)\n        {\n    \
    \        int even_val = 0;\n            foreach (var x in v)\n            {\n\
    \                even_val += x;\n            }\n            if (even_val > min_even_val)\n\
    \            {\n                min_even_val = even_val;\n                min_index\
    \ = v;\n            }\n        }\n\n        if (min_index == -1)\n        {\n\
    \            return new List<long>();\n        }\n        else\n        {\n  \
    \          long index = 0;\n            while (min_index != index)\n         \
    \   {\n                arr[index] = arr[min_index];\n                arr[index\
    \ + 1] = arr[min_index + 1];\n                index++;\n            }\n      \
    \      return arr.ToList();\n        }", "        var result = new List<long>();\n\
    \        var minValue = arr.Min();\n        var minIndex = arr.FindIndex(node\
    \ => node == minValue);\n        if (minIndex >= 0) {\n            result.Add(minValue);\n\
    \            result.Insert(minIndex, minIndex + 1);\n        }\n        return\
    \ result.Count == 0 ? new List<long>() : result;", "        List<long> res = new\
    \ List<long>();\n        if (arr.Count == 0) return res;\n        long minVal\
    \ = arr.Min();\n        long minIndex = 0;\n        List<long> temp = new List<long>();\n\
    \        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0 && arr[i] > minVal) {\n                minVal = arr[i];\n                minIndex\
    \ = i;\n            }\n            temp.Add(arr[i]);\n        }\n        if (minVal\
    \ % 2 == 0) {\n            res.Add(minVal);\n            res.Add(minIndex);\n\
    \        }\n        List<long> tmp = new List<long>();\n        for (int i = 0;\
    \ i < temp.Count; i++) {\n            long num = temp[i];\n            if (num\
    \ % 2 == 0) {\n                tmp.Add(num);\n            }\n        }\n     \
    \   if (tmp.Count == 0) return res;\n        long minVal2 = minVal;\n        int\
    \ minIndex2 = minIndex;\n        for (int i = 0; i < tmp.Count; i++) {\n     \
    \       long num = tmp[i];\n            if (num % 2 == 0) {\n                minVal2\
    \ = Math.Min(minVal2, num);\n                minIndex2 = Math.Min(minIndex2, i);\n\
    \            }\n        }\n        if (minVal2 == minVal) {\n            res.Add(minVal);\n\
    \            res.Add(minIndex);\n        } else if (minIndex2 == minIndex) {\n\
    \            res.Add(minVal);\n            res.Add(minIndex);\n        }\n   \
    \     return res;", "        if (arr.Count <= 0) {\n            return new List<long>();\n\
    \        }\n        var index = 0;\n        var maxValue = 0;\n        var smalest_value\
    \ = 0;\n        foreach (var i in arr) {\n            if (i % 2 == 0) {\n    \
    \            maxValue = i;\n            }\n            if (maxValue < i) {\n \
    \               maxValue = i;\n                smalest_value = i;\n          \
    \      index = i;\n            }\n        }\n        return new List<long>(arr.Where(x\
    \ => x == index).OrderBy(x => x).ToList());", "        var result = new List<long>();\n\
    \        if (arr.Count == 0)\n            return result;\n        var min = arr.Min();\n\
    \        var minIndex = arr.IndexOf(min);\n        if (minIndex == arr.Count -\
    \ 1)\n            result.Add(min);\n        else {\n            var value = arr[minIndex\
    \ + 1];\n            var index = minIndex + 1;\n            while (index + 1 <\
    \ arr.Count && value % arr[index] == 0) {\n                value = arr[index +\
    \ 1];\n                index++;\n            }\n            result.Add(value);\n\
    \        }\n        return result;", "        long[] x = arr.ToArray();\n    \
    \    long[] y = new long[x.Length];\n        long[] z = new long[x.Length];\n\
    \        int i = 0;\n        int j = 0;\n        int k = 0;\n        Array.Sort(x,\
    \ y);\n        int len = (int) Math.Ceiling(Math.Log10(x[0]));\n        List<long>\
    \ result = new List<long>();\n        if (x.Length == 0)\n            return new\
    \ List<long>();\n        while (j < x.Length) {\n            if (y[j] % 2 == 0)\
    \ {\n                z[k++] = y[j];\n                result.Add(z[k - 1]);\n \
    \           } else {\n                if (k < len) {\n                    y[j]\
    \ = 0;\n                }\n                k = 0;\n            }\n           \
    \ j++;\n        }\n        if (k < len) {\n            y[j] = 0;\n        }\n\
    \        return result;", "        if (arr.Count == 0) {\n            return new\
    \ List<long>();\n        }\n\n        int min = arr.Min();\n        int index\
    \ = -1;\n\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ == min) {\n                index = i;\n            }\n        }\n\n        if\
    \ (arr.Count == 1) {\n            return new List<long>() { arr[0] };\n      \
    \  }\n\n        List<long> ret = new List<long>();\n        ret.Add(min);\n  \
    \      ret.Add(index);\n\n        if (arr.Count > 1) {\n            for (int i\
    \ = 0; i < arr.Count - 1; i++) {\n                if (arr[i] > min && arr[i +\
    \ 1] == min) {\n                    int temp;\n                    if (i > 0 &&\
    \ arr[i - 1] == min && arr[i] == min) {\n                        temp = arr[i\
    \ - 1];\n                    } else if (i < arr.Count - 1 && arr[i + 1] == min\
    \ && arr[i] == min) {\n                        temp = arr[i + 1];\n          \
    \          } else {\n                        temp = arr[i - 1];\n            \
    \        }\n                    ret.Add(temp);\n                }\n          \
    \  }\n        }\n\n        return ret;", "        if (arr.Count <= 0)\n      \
    \      return new List<long>();\n\n        var list = new List<long>();\n    \
    \    int cur = arr.Count - 1;\n        while ((cur >= 0) && (arr[cur] != 0)) {\n\
    \            var val = arr[cur];\n            list.Add(val);\n            cur--;\n\
    \        }\n        return list;", "        if (arr.Count < 1) return new List<long>();\n\
    \        List<long> ret = new List<long>();\n        long min = arr.Min();\n \
    \       HashSet<long> even = new HashSet<long>();\n        even.Add(min);\n  \
    \      int i = 0;\n        while (i < arr.Count) {\n            if (arr.ElementAt(i)\
    \ % 2 == 0) {\n                if (even.Contains(arr.ElementAt(i))) {\n      \
    \              ret.Add(arr.ElementAt(i));\n                    even.Remove(arr.ElementAt(i));\n\
    \                }\n                else {\n                    even.Add(arr.ElementAt(i));\n\
    \                }\n            }\n            i++;\n        }\n        List<long>\
    \ minindex = new List<long>();\n        for (int j = 0; j < ret.Count; j++)\n\
    \        {\n            if (ret.ElementAt(j) == min) {\n                minindex.Add(j);\n\
    \            }\n        }\n        return minindex;", "        List<long> res\
    \ = new List<long>(arr.Count);\n\n        int even = 0;\n        int index = -1;\n\
    \        for (long n: arr) {\n            if (n % 2 == 0) {\n                even++;\n\
    \                index = n;\n            }\n        }\n\n        if (even != 0\
    \ && arr.Count>0) {\n            List<long> smalest = new List<long>(arr.Count);\n\
    \            for (int i = 0; i < arr.Count; i++) {\n                if (arr[i]\
    \ % 2 == 0) {\n                    if (arr[i] < index) index = arr[i];\n     \
    \               smalest.Add(arr[i]);\n                }\n            }\n     \
    \       res.Add(index);\n            res.AddRange(smalest);\n            return\
    \ res;\n        }\n        return res;", "        Debug.Assert(arr.Count <= 10000);\n\
    \        Debug.Assert(arr.Sum(item => item) >= 0);\n        Debug.Assert(arr.Sum(item\
    \ => item) <= 100000);\n\n        List<long> results = new List<long>();\n   \
    \     if (arr.Count > 0) {\n            int counter = arr.Count;\n           \
    \ while (counter > 0) {\n                results.Add(arr[counter / 2]);\n    \
    \            counter /= 2;\n            }\n            long[] arr = results.ToArray();\n\
    \            Array.Sort(arr);\n            long min = arr[0];\n            int\
    \ index_of_min = Array.BinarySearch(arr, min);\n            if (index_of_min ==\
    \ -1) {\n                index_of_min = arr.Length;\n            }\n         \
    \   results.Add(min);\n            results.Add(index_of_min);\n        } else\
    \ {\n            results.Add(0);\n            results.Add(0);\n        }\n   \
    \     return results;", "        // write your code here\n        HashSet<long>\
    \ set = new HashSet<long>();\n        long minValue = arr.Min();\n        int\
    \ index = arr.FindIndex(v => v == minValue);\n        while (index < arr.Count)\
    \ {\n            if (arr[index] % 2 == 0) {\n                set.Add(arr[index]);\n\
    \            }\n            index++;\n        }\n        if (set.Count != 0) {\n\
    \            long[] result = new long[set.Count];\n            set.CopyTo(result,\
    \ 0);\n            return result;\n        } else {\n            return new List<long>();\n\
    \        }", "        int n = arr.Count;\n        if (n <= 1) return new List<long>();\n\
    \        var min = arr.Min();\n        var min = arr.Min();\n        var minIndex\
    \ = 0;\n        for (int i = 0; i < n; i++) {\n            var val = arr[i];\n\
    \            if (val % 2 == 0) {\n                if (val < min) {\n         \
    \           min = val;\n                    minIndex = i;\n                }\n\
    \            }\n        }\n        return new List<long>() { min, minIndex };",
  "        long evenSmallestValue = 0;\n        long smallestIndex = 0;\n        long\
    \ minIndex = 0;\n        bool valueFound = false;\n\n        // sort arr using\
    \ sort method\n        arr.Sort();\n\n        foreach (long i in arr) {\n    \
    \        // find minimum index where arr[i] is even\n            if (arr[i] %\
    \ 2 == 0) {\n                if (evenSmallestValue == 0) {\n                 \
    \   evenSmallestValue = i;\n                    smallestIndex = i;\n         \
    \           minIndex = i;\n                    valueFound = true;\n          \
    \      } else if (evenSmallestValue < i) {\n                    evenSmallestValue\
    \ = i;\n                    smallestIndex = i;\n                    minIndex =\
    \ minIndex;\n                }\n            }\n        }\n\n        if (valueFound)\
    \ {\n            List<long> ret = new List<long>();\n\n            ret.Add(evenSmallestValue);\n\
    \            ret.Add(smallestIndex);\n\n            return ret;\n        } else\
    \ {\n            return new List<long>();\n        }\n", "        Array.Sort(arr);\n\
    \        long smalest_value = arr.FirstOrDefault();\n        long smalest_index\
    \ = 0;\n        if (arr.Contains(smalest_value))\n            smalest_index =\
    \ 1;\n        while (smalest_index >= 0 && arr.Count > 1) {\n            bool\
    \ flag = true;\n            for (int i = 0; i < arr.Count - 1; i++) {\n      \
    \          if (arr[i + smalest_index] != arr[i + smalest_index + 1])\n       \
    \             flag = false;\n            }\n            if (flag && smalest_index\
    \ > 0)\n                break;\n            smalest_index++;\n        }\n    \
    \    if (smalest_index >= 0 && arr.Count > 1)\n            smalest_value = arr[smalest_index];\n\
    \        return new List<long> { smalest_value, smalest_index };", "        int\
    \ i, j, k, l, m, n, s, sum, temp;\n        List<long> ret = new List<long>();\n\
    \        for (i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n\
    \                for (j = i; j < arr.Count; j++) {\n                    sum +=\
    \ arr[j];\n                    if (sum % 2 == 0) {\n                        n\
    \ = arr.Count - j;\n                        sum = 0;\n                       \
    \ for (k = j + 1; k < arr.Count; k++) {\n                            sum += arr[k];\n\
    \                            if (sum % 2 == 0) {\n                           \
    \     m = arr.Count - k;\n                                if (m < n) {\n     \
    \                               s = m;\n                                    l\
    \ = n;\n                                    j = k;\n                         \
    \           m = n;\n                                    n = m;\n             \
    \                       k = l;\n                                    l = j;\n \
    \                               }\n                                else {\n  \
    \                                  s = k;\n                                  \
    \  l = j;\n                                    j = k;\n                      \
    \              m = l;\n                                    n = m;\n          \
    \                          k = s;\n                                    l = j;\n\
    \                                }\n                                break;\n \
    \                           }\n                        }\n                   \
    \     temp = (long)arr.ElementAt(j);\n                        if (temp % 2 ==\
    \ 0) {\n                            ret.add((long)arr.ElementAt(j));\n       \
    \                 }\n                        else {\n                        \
    \    ret.add((long)((arr[i] + (long)arr.ElementAt(j))) % 10);\n              \
    \          }\n                        break;\n                    }\n        \
    \        }\n                break;\n            }\n        }\n        if (ret.Count\
    \ == 0) {\n            return ret;\n        }\n        return ret; // ret.toString();",
  "        var result = new List<long>();\n        var index = 0;\n        var min\
    \ = arr.Min();\n        var max = 0;\n        foreach (var num in arr) {\n   \
    \         if (num == min) {\n                max = num;\n            }\n     \
    \       if (num == max) {\n                result.Add(num);\n                index++;\n\
    \            }\n        }\n        if (result.Count != 0) {\n            result.Add(max);\n\
    \            result.Add(index);\n        }\n        return result;", "       \
    \ // Your code goes here\n        List<long> output = new List<long>();\n    \
    \    long min = arr.Min();\n        int minIndex = -1;\n        foreach (var item\
    \ in arr)\n        {\n            if (item % 2 == 0)\n            {\n        \
    \        if (item < min)\n                {\n                    min = item;\n\
    \                    minIndex = arr.IndexOf(item);\n                }\n      \
    \      }\n        }\n        output.Add(min);\n        output.Add(minIndex);\n\
    \        return output;", "        int[] evens = new int[arr.Count];\n       \
    \ Array.Sort(evens, arr.ToArray());\n        var min = arr.FirstOrDefault(x =>\
    \ x % 2 == 0);\n        if (arr.Count == 0 || min == -1) return new List<long>();\n\
    \        List<long> res = new List<long>();\n        int index = -1;\n       \
    \ for (int i = 0; i < evens.Length; i++) {\n            if (evens[i] < min.Value)\
    \ {\n                index = i;\n                min = evens[i];\n           \
    \ }\n        }\n        res.Add(min);\n        res.Add(index + 1);\n        return\
    \ res;", "        if (arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n        if (arr.Count > 10000) {\n            throw new ArgumentOutOfRangeException(\"\
    Too many nodes in the tree to be plucked.\");\n        }\n        var minNode\
    \ = arr.Min();\n        var minIndex = -1;\n        var minEven = arr.Where(x\
    \ => x % 2 == 0).Select(x => (int)(x / 2)).Min();\n        foreach (var node in\
    \ arr.Where(x => x % 2 == 0 && x != minEven)) {\n            if (node < minNode)\
    \ {\n                minNode = node;\n                minIndex = arr.IndexOf(minNode);\n\
    \            }\n        }\n        return new List<long> { minNode, minIndex }; ",
  "        int count = arr.Count;\n        if (count == 0) {\n            return new\
    \ List<long>();\n        }\n        BigInteger sum = 0;\n        int index = 0;\n\
    \        foreach (long val in arr) {\n            sum += val;\n            if\
    \ (sum.Equals(BigInteger.Zero)) {\n                return new List<long>();\n\
    \            }\n            if (sum.Equals(BigInteger.One) && BigInteger.TryParse(val.ToString(),\
    \ out BigInteger val2)) {\n                if (val2.Equals(BigInteger.Zero)) {\n\
    \                    index = 0;\n                } else {\n                  \
    \  index = val2.ToString().Length;\n                }\n            } else {\n\
    \                index = 0;\n            }\n        }\n        return new List<long>()\
    \ { sum, index };", "        // Your code here\n        /*\n        long sum =\
    \ 0;\n        int index = 0;\n        foreach (var el in arr) {\n            if\
    \ (el % 2 == 0)\n                sum += el;\n            else\n              \
    \  index = arr.IndexOf(el);\n        }\n        if (sum % 2 == 0)\n          \
    \  return new List<long>() { sum };\n        else\n            return new List<long>()\
    \ { sum, index };\n        */\n        ArrayList result = new ArrayList();\n \
    \       ArrayList even = new ArrayList();\n        ArrayList index = new ArrayList();\n\
    \        int minIndex = 0;\n        int minEven = 0;\n        foreach (var el\
    \ in arr) {\n            if (el % 2 == 0) {\n                even.Add(el);\n \
    \               foreach (var x in even) {\n                    if (x > minEven)\
    \ {\n                        minEven = x;\n                        minIndex =\
    \ x.ToString().IndexOf(\"L\");\n                    }\n                }\n   \
    \             if (minEven == el)\n                    minIndex = x.ToString().IndexOf(\"\
    L\");\n                result.Add(new List() { minEven, minIndex });\n       \
    \     } else {\n                index.Add(el);\n            }\n        }\n   \
    \     if (minIndex == -1)\n            minIndex = 0;\n        if (minEven == -1)\n\
    \            minEven = 0;\n        result.Add(new List() { minEven, minIndex });\n\
    \        return result;", "        int min = arr.Min();\n        List<long> ret\
    \ = new List<long>();\n        bool bInside = false;\n        for (int i = 0;\
    \ i < arr.Count(); i++) {\n            if (arr[i] == 0) {\n                bInside\
    \ = true;\n                continue;\n            }\n            if (arr[i] !=\
    \ 0) {\n                if (!bInside) continue;\n            }\n            if\
    \ (arr[i] < min) {\n                bInside = true;\n                continue;\n\
    \            }\n            if (arr[i] == min) {\n                ret.Add(arr[i]);\n\
    \            }\n            if (arr[i] == min) break;\n        }\n        return\
    \ ret;", "        int[] indexes = new int[arr.Count];\n        int smallest_value_index\
    \ = 0;\n        int smallest_value = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] < smallest_value) {\n                smallest_value\
    \ = arr[i];\n                smallest_value_index = i;\n            }\n      \
    \      if (arr[i] % 2 == 0) {\n                indexes[i] = smallest_value_index;\n\
    \            }\n        }\n        if (arr.Count == 0)\n            return new\
    \ List<long>();\n        if (smallest_value_index == arr.Count) {\n          \
    \  List<long> res = new List<long>();\n            int size = arr.Count;\n   \
    \         for (int i = 0; i < arr.Count; i++) {\n                if (indexes[i]\
    \ != size - 1 && indexes[i] != arr.Count - 1 && indexes[i] >= 0) {\n         \
    \           res.Add(arr[indexes[i]]);\n                }\n            }\n    \
    \        return res;\n        }\n        if (smallest_value_index != arr.Count\
    \ && smallest_value_index != arr.Count - 1) {\n            List<long> res = new\
    \ List<long>();\n            for (int i = 0; i < arr.Count; i++) {\n         \
    \       if (indexes[i] < smallest_value_index && indexes[i] >= 0) {\n        \
    \            res.Add(arr[indexes[i]]);\n                }\n            }\n   \
    \         return res;\n        }\n        if (smallest_value_index == arr.Count\
    \ - 1) {\n            List<long> res = new List<long>();\n            for (int\
    \ i = 0; i < arr.Count; i++) {\n                if (indexes[i] != arr.Count -\
    \ 1 && indexes[i] >= 0) {\n                    res.Add(arr[indexes[i]]);\n   \
    \             }\n            }\n            return res;\n        }\n        List<long>\
    \ res = new List<long>();\n        for (int i = 0; i < arr.Count; i++) {\n   \
    \         if (indexes[i] == arr.Count - 1 && indexes[i] >= 0) {\n            \
    \    res.Add(arr[indexes[i]]);\n            }\n        }\n        return res;",
  "        var maxValues = arr.OrderByDescending(i => i % 2).Select(i => new { Value\
    \ = i, Index = i % 2 }).ToArray();\n        return maxValues.FirstOrDefault().Index\
    \ != 0 ? maxValues.FirstOrDefault() : new List<long>();", "        var ret = new\
    \ List<long>();\n        var min = arr.Min();\n        var min = arr.Min();\n\
    \        var minIndex = -1;\n        for (var i = 0; i < arr.Length; i++) {\n\
    \            var x = arr[i];\n            if (x == min || (minIndex == -1 && x\
    \ == min))\n                minIndex++;\n            if (minIndex > 0 && x - min\
    \ % 2 == 0) {\n                ret.Add(min);\n                minIndex--;\n  \
    \              min = x;\n            }\n        }\n        return ret;", "   \
    \     if (arr.Count == 0) {\n            return new List<long>();\n        }\n\
    \        Dictionary<long, int> ds = new Dictionary<long, int>();\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (ds.ContainsKey(arr[i])) {\n\
    \                ds[arr[i]] = ds[arr[i]] + 1;\n            } else {\n        \
    \        ds[arr[i]] = 1;\n            }\n        }\n        List<long> result\
    \ = new List<long>();\n        long smalest_value;\n        int smalest_index;\n\
    \        long smalest_key = 0;\n        foreach (long key in ds.Keys) {\n    \
    \        if (key % 2 == 0) {\n                if (smalest_key == 0) {\n      \
    \              smalest_key = key;\n                    smalest_index = ds[key];\n\
    \                } else if (smalest_key != key) {\n                    if (smalest_index\
    \ == ds[smalest_key]) {\n                        smalest_index++;\n          \
    \          } else if (smalest_index > ds[smalest_key]) {\n                   \
    \     smalest_key = key;\n                        smalest_index = ds[key];\n \
    \                   }\n                }\n            } else {\n             \
    \   if (smalest_key == 0) {\n                    smalest_key = key;\n        \
    \            smalest_index = ds[key];\n                } else if (smalest_key\
    \ != key) {\n                    if (smalest_index == ds[smalest_key]) {\n   \
    \                     smalest_index++;\n                    } else if (smalest_index\
    \ > ds[smalest_key]) {\n                        smalest_key = key;\n         \
    \               smalest_index = ds[key];\n                    }\n            \
    \    }\n            }\n        }\n        bool found_smalest_key = false;\n  \
    \      bool found_smalest_value = false;\n        int i = smalest_index;\n   \
    \     while (i >= 0) {\n            found_smalest_value = true;\n            if\
    \ (arr.Contains(smalest_key)) {\n                found_smalest_key = true;\n \
    \           }\n            i = i - 1;\n        }\n        if (found_smalest_value)\
    \ {\n            result.Add(smalest_key);\n            result.Add(smalest_index);\n\
    \        }\n        if (found_smalest_key) {\n            result.Add(smalest_key);\n\
    \            result.Add(smalest_index);\n        }\n        return result;", " \
    \       var result = new List<long>();\n        long smalest_value = arr.OrderBy(x\
    \ => x).SkipWhile(x => (x % 2) == 0).First();\n        long smalest_index = 0;\n\
    \        if (arr.Count > 0) {\n            for (int i = 0; i < arr.Count; i++)\
    \ {\n                if ((arr[i] % 2) == 0) {\n                    if (smalest_value\
    \ > arr[i]) {\n                        smalest_value = arr[i];\n             \
    \           smalest_index = i;\n                    }\n                }\n   \
    \         }\n        }\n        result.Add(smalest_value);\n        result.Add(smalest_index);\n\
    \        return result;", "        // write your code here\n        int minindex\
    \ = -1;\n        int minvalue = 0;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] % 2 == 0 && minvalue < arr[i]) {\n               \
    \ minvalue = arr[i];\n                minindex = i;\n            }\n        }\n\
    \n        if (minindex >= 0) {\n            List<long> result = new List<long>();\n\
    \            result.Add(minvalue);\n            result.Add(minindex);\n      \
    \      return result;\n        }\n        return null;", "        List<long> result\
    \ = new List<long>();\n        List<long> evenNodes = new List<long>();\n    \
    \    List<long> smallestEven = new List<long>();\n        List<long> smallestIndex\
    \ = new List<long>();\n        int smallestIndexValue = -1;\n        foreach (var\
    \ i in arr) {\n            if (i % 2 == 0 && i > 0) {\n                evenNodes.Add(i);\n\
    \            }\n        }\n        if (evenNodes.Count > 0) {\n            smallestEven\
    \ = evenNodes.OrderBy(v => v).ToList();\n            smallestIndexValue = smallestEven.IndexOf(smallestEven[0]);\n\
    \            smallestIndex = smallestEven.ToList();\n        }\n        if (result.Count\
    \ > 0 && result.ElementAt(0) == smallestIndexValue) {\n            result.RemoveAt(0);\n\
    \        }\n        if (result.Count > 0 && result.ElementAt(0).Equals(smallestIndexValue))\
    \ {\n            result.RemoveAt(0);\n        }\n        if (result.Count > 0)\
    \ {\n            return result;\n        }\n        return result;", "       \
    \ if (arr.Count == 0) {\n            return new List<long>();\n        }\n\n \
    \       // Sort list\n        var sortedArr = arr.OrderByDescending(x => x).ToList();\n\
    \n        // Get the smallest even value\n        var smallestEvenValue = GetSmallestEvenValue(sortedArr);\n\
    \n        // If no even value was found return empty list\n        if (smallestEvenValue\
    \ == -1) {\n            return new List<long>();\n        }\n\n        // Get\
    \ the smallest index\n        var smallestIndexValue = GetSmallestIndexValue(sortedArr,\
    \ smallestEvenValue);\n\n        // If we reached this point we found the smallest\
    \ even value\n        // and smallest index\n        if (smallestIndexValue ==\
    \ -1) {\n            return new List<long>();\n        }\n\n        // Put the\
    \ value in the list\n        var result = new List<long>();\n        result.Add(sortedArr[smallestIndexValue]);\n\
    \n        // Return the list\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long smalest_value = 0;\n        long smalest_index\
    \ = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            }\n        }\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] > smalest_value)\
    \ {\n                    smalest_value = arr[i];\n                    smalest_index\
    \ = i;\n                }\n            }\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;", "        if (arr.Count\
    \ == 0) return new List<long>();\n        int[] arr = new int[arr.Count];\n  \
    \      int index = 0;\n        arr.ForEach(n => arr[index++] = n);\n        Array.Sort(arr);\n\
    \        List<long> result = new List<long>();\n        long smallest_value =\
    \ 0;\n        int smallest_index = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (smallest_value\
    \ == 0)\n                    smallest_value = arr[i];\n                else if\
    \ (smallest_value < arr[i])\n                    smallest_value = arr[i];\n  \
    \              else\n                    smallest_index = i;\n            }\n\
    \        }\n        if (smallest_value != 0)\n            result.Add(smallest_value);\n\
    \        else\n            result.Add(arr[smallest_index]);\n        if (arr.Count\
    \ > 0)\n            result.Add(arr[arr.Count - 1]);\n        else\n          \
    \  result.Add(0);\n        return result;", "        Debug.Assert(arr.Count >\
    \ 0, \"Empty array.\");\n        if (arr.Count == 1) {\n            return new\
    \ List<long>() { arr[0] };\n        }\n        HashSet<long> set = new HashSet<long>();\n\
    \        foreach (long node in arr) {\n            if (set.Add(node)) {\n    \
    \            set.Remove(node);\n                return new List<long>() { node,\
    \ arr.FindIndex(i => i == node) };\n            }\n        }\n        return new\
    \ List<long>() { arr.First(), 0 };", "        if (arr.Any(n=> n%2==0) && arr.First(n=>n%2==0).CompareTo(arr.Last(n=>n%2==0))\
    \ == 0){\n            var index = arr.FindIndex(n => n%2 == 0);\n            return\
    \ arr.FindIndex(n => n%2 == 0).ToList().Remove(index);\n        }\n        \n\
    \        return arr.Select(n => n%2 == 0).ToList();", "        var evens = arr.Where((v,\
    \ i) => v & 1 == 0).Select(v => v).Distinct().OrderBy(v => v).ToArray();\n   \
    \     if (arr.Any(v => v & 1 == 0)) {\n            List<long> result = new List<long>();\n\
    \            var idx = arr.IndexOf(arr.Min());\n            result.Add(arr.Min());\n\
    \            result.Add(idx);\n            return result;\n        }\n       \
    \ return evens.Select(v => v).ToList();", "        double smallestEvenValue =\
    \ 1;\n        List<long> result = new List<long>();\n        double smallestEvenValueIndex\
    \ = 0;\n        foreach (var node in arr) {\n            if (node % 2 == 0) {\n\
    \                if (smallestEvenValue > node) {\n                    smallestEvenValue\
    \ = node;\n                    smallestEvenValueIndex = i;\n                }\n\
    \            }\n            i++;\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestEvenValueIndex);\n        return result;", "     \
    \   if (arr.Count > 0 && arr.Any(x => x % 2 == 0)) {\n            var res = arr.GroupBy(x\
    \ => x % 2).OrderBy(x => x.Key).FirstOrDefault()?.First();\n            return\
    \ res == 0 ? res : new List<long> { res.Key };\n        }\n        return new\
    \ List<long>();", "        if (arr.Count == 0)\n            return new List<long>();\n\
    \        var result = new List<long>();\n        var minEven = arr.Min();\n  \
    \      var minIndex = 0;\n        for (int i = 0; i < arr.Count; ++i) {\n    \
    \        var value = arr[i];\n            if (value % 2 == 0 && value < minEven)\
    \ {\n                minEven = value;\n                minIndex = i;\n       \
    \     }\n        }\n        result.Add(minEven);\n        result.Add(minIndex);\n\
    \        return result;", "        if (arr.Count < 1) {\n            return new\
    \ List<long>();\n        }\n        long minEven = arr.Min();\n        var res\
    \ = new List<long>();\n        foreach (var node in arr) {\n            if (node.Value\
    \ % 2 == 0) {\n                if (node.Value < minEven) {\n                 \
    \   minEven = node.Value;\n                }\n            }\n        }\n     \
    \   var index = arr.IndexOf(arr.FirstOrDefault(x => x.Value == minEven));\n  \
    \      if (index == -1) {\n            return new List<long>();\n        }\n \
    \       res.Add(minEven);\n        res.Add(index);\n        return res;", "  \
    \      long minValue, minIndex = 0;\n        var results = new List<long>();\n\
    \n        // sort and find the minimum\n        var sortedArray = arr.OrderBy(x\
    \ => x).ToArray();\n        foreach (var node in sortedArray) {\n            bool\
    \ isEven = IsEven(node);\n            if (minIndex == 0 || isEven) {\n       \
    \         minValue = node;\n                minIndex = sortedArray.IndexOf(node);\n\
    \            }\n            else {\n                if (isEven) {\n          \
    \          // found a min even value\n                    if (minValue == node\
    \ || minIndex == sortedArray.IndexOf(node)) {\n                        // found\
    \ the min even value or its index\n                        results.Add(node);\n\
    \                    }\n                    else {\n                        //\
    \ found the min even value but not its index, so remove the min value\n      \
    \                  minValue = sortedArray[minIndex];\n                    }\n\
    \                }\n            }\n        }\n        if (arr.Count == 0)\n  \
    \      {\n            return new List<long>();\n        }\n        else\n    \
    \    {\n            // return both min values and their indices if there are at\
    \ least two nodes with same value\n            if (minIndex >= sortedArray.Length\
    \ || minIndex >= sortedArray.Where(x => x == minValue).FirstOrDefault())\n   \
    \         {\n                return results;\n            }\n            else\n\
    \            {\n                return new List<long>() { minValue, minIndex };\n\
    \            }\n        }", "        List<long> result = new List<long>();\n \
    \       if (arr.Count == 0) return result;\n        int[] evens = new int[arr.Count];\n\
    \        int index = 0;\n        int min = 1;\n        int index2 = 0;\n     \
    \   for (int i = 0; i < arr.Count; i++)\n        {\n            if (arr[i] % 2\
    \ == 0)\n                evens[i] = arr[i];\n            else\n            {\n\
    \                if (index2 == 0 && arr[i] < min) index2 = i;\n              \
    \  if (arr[i] < min)\n                {\n                    min = arr[i];\n \
    \                   index = i;\n                }\n            }\n        }\n\
    \        result.Add(min);\n        if (index != index2)\n            result.Add(index);\n\
    \        return result;", "        var sorted = arr.OrderBy(a => a % 2 == 0);\n\
    \        List<long> result = new List<long>();\n        foreach (var item in sorted)\
    \ {\n            result.Add(item);\n        }\n        if (result.Count > 0)\n\
    \        {\n            var min = result.Min();\n            var indexOf = sorted.FindIndex(a\
    \ => a % 2 == 0 && a==min);\n            if (indexOf>0)\n            {\n     \
    \           result.RemoveAt(indexOf);\n                result.Insert(indexOf,\
    \ min);\n            }\n        }\n        return result;", "        if (arr.Count\
    \ == 0) {\n            return new List<long>();\n        }\n        var minValue\
    \ = arr.Min();\n        var minIndex = 0;\n        var maxValue = 0;\n       \
    \ var maxIndex = 0;\n        for (var index = 0; index < arr.Count; index++) {\n\
    \            var curValue = arr[index];\n            if (curValue < minValue)\
    \ {\n                minIndex = index;\n                minValue = curValue;\n\
    \            }\n            if (curValue > maxValue) {\n                maxValue\
    \ = curValue;\n                maxIndex = index;\n            }\n        }\n \
    \       if (minValue % 2 == 0 && minIndex < maxIndex) {\n            arr.RemoveAt(minIndex);\n\
    \            return Pluck(arr);\n        } else if (minValue % 2 == 0 && minIndex\
    \ >= maxIndex) {\n            return Pluck(arr);\n        } else {\n         \
    \   var list = new List<long>();\n            list.Add(minValue);\n          \
    \  list.Add(minIndex);\n            return list;\n        }", "        List<long>\
    \ evenIndexes = new List<long>();\n        long smallestEvenValue = 0;\n     \
    \   bool isSmallestEven = false;\n        long smallestIndex = 0;\n        int\
    \ index = -1;\n        Array.Sort(arr, (a, b) => { a = Math.Abs(a); b = Math.Abs(b);\
    \ return (a < b) ? 1 : -1; });\n        for (int i = 0; i < arr.Length; i++) {\n\
    \            if (arr[i] % 2 == 0) {\n                isSmallestEven = true;\n\
    \                if (isSmallestEven) {\n                    smallestEvenValue\
    \ = arr[i];\n                    smallestIndex = i;\n                }\n     \
    \       }\n        }\n        if (isSmallestEven) {\n            index = smallestIndex;\n\
    \            while (arr.Contains(smallestEvenValue)) {\n                arr.RemoveAt(index);\n\
    \                index = arr.IndexOf(smallestEvenValue);\n            }\n    \
    \        evenIndexes.Add(index);\n        }\n        if (arr.Count == 0) {\n \
    \           arr.Add(0);\n            arr.Insert(0, 0);\n        }\n        return\
    \ evenIndexes;", "        int[] arr = new int[arr.Count];\n        int i = 0;\n\
    \        int j = 0;\n        foreach (var item in arr)\n        {\n          \
    \  if (item % 2 != 0)\n            {\n                arr[i] = item;\n       \
    \         i++;\n            }\n            else\n            {\n             \
    \   j++;\n            }\n        }\n        List<long> evenValues = new List<long>();\n\
    \        int index = 0;\n        while (j < arr.Length)\n        {\n         \
    \   if (arr[j] % 2 == 0)\n            {\n                evenValues.Add(arr[j]);\n\
    \                j++;\n            }\n            else\n            {\n      \
    \          index++;\n            }\n        }\n        if (index == 0)\n     \
    \   {\n            throw new Exception(\"No even values found.\");\n        }\n\
    \        if (evenValues.Count() == 0)\n        {\n            return new List<long>();\n\
    \        }\n        int smallestIndex = -1;\n        int smallestValue = evenValues.First();\n\
    \        foreach (var value in evenValues)\n        {\n            if (value <\
    \ smallestValue)\n            {\n                smallestValue = value;\n    \
    \            smallestIndex = index;\n            }\n            index++;\n   \
    \     }\n        return new List<long> { smallestValue, smallestIndex };", " \
    \       int max = arr.Max();\n        List<long> list = new List<long>();\n  \
    \      if (arr.Count > 0) {\n            if (arr.Count > 1 && arr.Min() % 2 ==\
    \ 0) {\n                list.Add(arr.Min());\n                list.Add(max);\n\
    \                return list;\n            }\n            if (arr.Any(x => x %\
    \ 2 == 0)) {\n                long smallest = arr.Min();\n                long\
    \ largest = arr.Max();\n                while (smallest % 2 == 0) {\n        \
    \            smallest = smallest / 2;\n                }\n                while\
    \ (largest % 2 == 0) {\n                    largest = largest / 2;\n         \
    \       }\n                int smallIndex = arr.FindIndex(x => x == smallest);\n\
    \                int largeIndex = arr.FindIndex(x => x == largest);\n        \
    \        list.Add(arr[smallIndex]);\n                list.Add(arr[largeIndex]);\n\
    \                return list;\n            }\n        }\n        return list;",
  "        if (arr.Count() == 0) return new List<long>();\n        List<long> res\
    \ = new List<long>();\n        long sum = 0;\n        foreach (var node in arr)\
    \ {\n            sum += node;\n        }\n        int k = 0;\n        long smallest\
    \ = sum;\n        while (smallest % 2 == 0) {\n            smallest = smallest\
    \ / 2;\n            k++;\n        }\n        for (int i = 0; i < k; i++) {\n \
    \           if (smallest == sum) break;\n            if (sum > smallest) {\n \
    \               res.Add(smallest);\n            }\n            sum = sum - smallest\
    \ + 1;\n            smallest = sum;\n        }\n        if (smallest == sum) res.Add(sum);\n\
    \        return res;", "        long smalest_value = 0;\n        int smalest_index\
    \ = 0;\n        if (arr.Count > 0) {\n            arr.Sort();\n            smalest_value\
    \ = arr[arr.Count - 1];\n            int smalest_index = 0;\n            foreach\
    \ (var item in arr)\n            {\n                if (item % 2 == 0)\n     \
    \           {\n                    if (item < smalest_value)\n               \
    \     {\n                        smalest_value = item;\n                     \
    \   smalest_index = arr.IndexOf(item);\n                    }\n              \
    \  }\n            }\n        }\n        return new List<long>(new long[] {smalest_value,\
    \ smalest_index});", "        int[] arr1 = new int[arr.Count];\n        List<long>\
    \ result = new List<long>();\n        int counter = 0;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] == 0) {\n                arr1[counter]\
    \ = i;\n                counter++;\n            }\n        }\n        Array.Sort(arr1,\
    \ (x, y) => arr.ElementAt(x).CompareTo(arr.ElementAt(y)));\n        if (arr1.Length\
    \ > 1) {\n            result.Add(arr1[1]);\n            for (int i = 2; i < arr1.Length;\
    \ i++) {\n                if (arr1[i] == arr1[i - 1]) {\n                    result.Add(arr1[i]);\n\
    \                }\n            }\n        } else {\n            if (arr1[0] ==\
    \ 0) {\n                result.Add(arr1[0]);\n            } else {\n         \
    \       result.Add(0);\n            }\n        }\n        return result;", " \
    \       if (arr == null || arr.Count == 0) return new List<long>();\n        long\
    \ min = arr.Min();\n        int idx = arr.FindIndex(d => d < min);\n        List<long>\
    \ result = new List<long>();\n        foreach (var item in arr.Where(d => d !=\
    \ min && d % 2 == 0)) {\n            if (idx == arr.FindIndex(d => d == item))\
    \ break;\n            if (idx == arr.FindIndex(d => d < item)) idx = arr.FindIndex(d\
    \ => d < item);\n            result.Add(item);\n        }\n        if (result.Count\
    \ == 0) result.Add(min);\n        return result;", "        if (arr.Any(x => x\
    \ == 0L)) {\n            return arr.Take(arr.FindIndex(x=>x == 0)).ToList();\n\
    \        }\n        long[] evens = arr.Where(x => x % 2 == 0L).OrderBy(x => x).ToArray();\n\
    \        long[] odd = arr.Where(x => x % 2 != 0L).OrderBy(x => x).ToArray();\n\
    \        if (evens.Any()) {\n            int index = evens.Min();\n          \
    \  return new List<long>(){arr.FirstOrDefault(x => x == index), index};\n    \
    \    }\n        if (odd.Any()) {\n            int index = odd.Min();\n       \
    \     return new List<long>(){arr.FirstOrDefault(x => x == index), index};\n \
    \       }\n        return new List<long>();", "        List<long> res = new List<long>();\n\
    \        if (arr.Count() == 0) {\n            return res;\n        }\n       \
    \ arr.Sort();\n        int i = 0;\n        int j = 1;\n        while (j < arr.Count())\
    \ {\n            if (arr[j] % 2 == 0) {\n                res.Add(arr[j]);\n  \
    \              j++;\n            } else if (j != i) {\n                i = j;\n\
    \                j++;\n            } else {\n                j++;\n          \
    \  }\n        }\n        if (res.Count > 1) {\n            int k = 0;\n      \
    \      for (int p = 0; p < res.Count; p++) {\n                if (res[p] % 2 ==\
    \ 0) {\n                    res.Insert(p, res[k++]);\n                }\n    \
    \        }\n        }\n        return res;", "        var minIndex = 0;\n    \
    \    var minValue = arr[0];\n        for (var i = 0; i < arr.Count; i++) {\n \
    \           var value = arr[i];\n            if (value % 2 == 0) {\n         \
    \       if (value < minValue) {\n                    minValue = value;\n     \
    \               minIndex = i;\n                }\n            }\n        }\n \
    \       if (arr.Count == 0) return new List<long>();\n        var results = new\
    \ List<long>();\n        results.Add(minValue);\n        results.Add(minIndex);\n\
    \        return results;", "        var res = (from n in arr\n               \
    \     orderby n / 2, n\n                    let isEven = (n % 2 == 0)\n      \
    \              select new { n = n, isEven = isEven }).First().n;\n        return\
    \ new List<long> { res };", "        Array.Sort(arr);\n        List<long> result\
    \ = new List<long>(arr.Count);\n        long smallestIndex = 0;\n        long\
    \ smallestValue = arr[0];\n        int indexOfSmallestValue = 0;\n        for\
    \ (long value = arr[0]; value != 0; ) {\n            if ((value & 1) == 0) {\n\
    \                if (smallestValue < value) {\n                    smallestValue\
    \ = value;\n                    indexOfSmallestValue = indexOfSmallestValue +\
    \ 1;\n                }\n                result.Add(smallestValue);\n        \
    \        smallestIndex = indexOfSmallestValue;\n            }\n            value\
    \ >>= 1;\n        }\n        if (smallestIndex > 0) {\n            result.Add(smallestValue);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;", " \
    \       long[] even = new long[arr.Count];\n        Array.Sort(arr, (left, right)\
    \ => { even[(int)Math.Floor(left)] += (long)Math.Floor(right); return left; });\n\
    \        var evenIndex = 0;\n        while (evenIndex < even.Length && even[evenIndex]\
    \ % 2 == 0) {\n            evenIndex++;\n        }\n        if (evenIndex > 0)\
    \ {\n            var idx = evenIndex - 1;\n            var minVal = arr[evenIndex];\n\
    \            while ((int)Math.Floor(even[evenIndex++]) != minVal) {\n        \
    \    }\n            return new List<long>() { minVal, idx };\n        }\n    \
    \    return new List<long>();", "        var index = 0;\n        var minIndex\
    \ = 0;\n        var minValue = arr.Min();\n        var minEven = 0;\n        var\
    \ pluckedNodes = new List<long>();\n        var evenCount = 0;\n        for (int\
    \ i = 0; i < arr.Count; i++)\n        {\n            if (arr[i] % 2 == 0 && arr[i]\
    \ < minValue && arr[i] != 0)\n            {\n                evenCount++;\n  \
    \              if (evenCount == 1)\n                {\n                    if\
    \ (arr[i] == minValue)\n                    {\n                        minIndex\
    \ = i;\n                    }\n                    if (arr[i] == minEven)\n  \
    \                  {\n                        minIndex = i;\n                \
    \    }\n                }\n                else if (evenCount == 2)\n        \
    \        {\n                    if (arr[i] < minEven)\n                    {\n\
    \                        minEven = arr[i];\n                    }\n          \
    \      }\n            }\n        }\n\n        if (arr.Count > 0)\n        {\n\
    \            pluckedNodes.Add(arr[minIndex]);\n        }\n        else if (arr.Count\
    \ == 0)\n        {\n            pluckedNodes = new List<long>();\n        }\n\
    \        return pluckedNodes;", "        int count = 0;\n        long smalest_value,\
    \ smalest_index;\n        List<long> return_list = new List<long>();\n       \
    \ long smalest_value_temp = smalest_value;\n        foreach (long value in arr)\
    \ {\n            count += 1;\n            if (value > smalest_value) {\n     \
    \           smalest_value = value;\n                smalest_index = count;\n \
    \           } else if (value == smalest_value) {\n                smalest_index\
    \ = count;\n            }\n        }\n        if (smalest_index > 0) {\n     \
    \       smalest_value = arr[smalest_index];\n            return_list.Add(smalest_value);\n\
    \            smalest_index -= 1;\n        }\n        if (smalest_index >= 0) {\n\
    \            for (int i = smalest_index + 1; i < arr.Count; i++) {\n         \
    \       if (arr[i] % 2 == 0) {\n                    smalest_value = arr[i];\n\
    \                    return_list.Add(smalest_value);\n                    break;\n\
    \                }\n            }\n        }\n        if (return_list.Count ==\
    \ 0) {\n            return new List<long>();\n        }\n        return return_list;",
  "        if (arr.Count == 0) return new List<long>();\n        HashSet<long> evenValues\
    \ = new HashSet<long>();\n        int smallestEvenValueIndex = 0;\n        long\
    \ smallestEvenValue = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n\
    \            long value = arr[i];\n            if (value % 2 == 0) {\n       \
    \         evenValues.Add(value);\n                if (value < smallestEvenValue\
    \ || (smallestEvenValue == smallestEvenValueIndex && value < smallestEvenValue))\
    \ {\n                    smallestEvenValue = value;\n                    smallestEvenValueIndex\
    \ = i;\n                }\n            }\n        }\n        return evenValues.Count\
    \ == 1 ? new List<long>() { smallestEvenValue } : new List<long>() { smallestEvenValue,\
    \ smallestEvenValueIndex };", "        List<long> result = new List<long>();\n\
    \        if (arr.Count > 0) {\n            long smalest_value = 0;\n         \
    \   int min_index = 0;\n            bool has_odd = false;\n\n            // find\
    \ smallest value\n            for (int i = 0; i < arr.Count; ++i) {\n        \
    \        if (!has_odd && arr[i] % 2 != 0) {\n                    has_odd = true;\n\
    \                    smalest_value = arr[i];\n                    min_index =\
    \ i;\n                }\n                else if (has_odd && arr[i] % 2 == 0)\
    \ {\n                    if (smalest_value < arr[i]) {\n                     \
    \   smalest_value = arr[i];\n                        min_index = i;\n        \
    \            }\n                }\n            }\n\n            // find smallest\
    \ index\n            bool has_zero = false;\n            for (int i = 0; i < arr.Count;\
    \ ++i) {\n                if (arr[i] == 0) {\n                    has_zero = true;\n\
    \                    break;\n                }\n            }\n            if\
    \ (!has_zero && (min_index > -1)) {\n                result.Add(smalest_value);\n\
    \                result.Add(min_index);\n            }\n        }\n        return\
    \ result;", "        // write your code here\n        int smalest_value = arr.Min();\n\
    \        int smalest_index = 0;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] < smalest_value && i % 2 == 0) {\n                smalest_index\
    \ = i;\n                smalest_value = arr[i];\n            }\n        }\n  \
    \      return new List<long>() { smalest_value, smalest_index };", "        arr.Sort();\n\
    \        var result = new List<long>();\n        var evens = new Dictionary<long,\
    \ bool>();\n        for (int i = 0; i < arr.Count; i++) {\n            if (i %\
    \ 2 == 0 && arr[i] % 2 == 0)\n                evens[arr[i]] = true;\n        \
    \    else if (i % 2 == 1 && arr[i] % 2 != 0)\n                evens[arr[i]] =\
    \ false;\n            else if (evens.ContainsKey(arr[i])) {\n                if\
    \ (result.Count < 1 || evens[arr[i]]) {\n                    result.Add(arr[i]);\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   long minval = arr.Min();\n        long minidx = arr.IndexOf(minval);\n   \
    \     while (arr.Remove(minval)) {\n            if (minidx < arr.IndexOf(minval))\
    \ {\n                minidx = arr.IndexOf(minval);\n            }\n        }\n\
    \        return new List<long>() { minval };", "        int[] vals = new int[arr.Count];\n\
    \        int count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n     \
    \       vals[i] = arr[i];\n            if (vals[i] % 2 == 0)\n               \
    \ count++;\n        }\n        if (count == 0)\n            return new List<long>();\n\
    \        List<long> result = new List<long>();\n        Array.Sort(vals);\n  \
    \      int index = 0;\n        while (vals[index] % 2 == 0) {\n            result.Add(vals[index]);\n\
    \            index++;\n        }\n        if (index == 0)\n            return\
    \ new List<long>();\n        result.Insert(0, vals[0]);\n        result.Insert(1,\
    \ index);\n        return result;", "        BigInteger biggest = BigInteger.Zero;\n\
    \        List<long> indexes = new List<long>();\n        foreach (long num in\
    \ arr) {\n            if (biggest.Equals(BigInteger.Zero)) {\n               \
    \ biggest = num;\n                indexes.Clear();\n            } else if (biggest.Equals(BigInteger.Parse(num.ToString())))\
    \ {\n                indexes.Add(arr.IndexOf(num));\n            } else if (biggest.Add(BigInteger.Parse(num.ToString())).Equals(BigInteger.Parse(num.ToString())))\
    \ {\n                indexes.Add(arr.IndexOf(num));\n            }\n        }\n\
    \n        if (biggest.Equals(BigInteger.Zero)) {\n            return indexes;\n\
    \        }\n        BigInteger biggest_value = biggest.ToString();\n        List<long>\
    \ index_values = new List<long>();\n        foreach (long num in indexes) {\n\
    \            string index = (num + 1).ToString();\n            if (index_values.Contains(index))\
    \ {\n                index_values.Add(num);\n            }\n        }\n      \
    \  return index_values.Select(x => x).ToList();", "        List<long> result =\
    \ new List<long>();\n        long[] evens = new long[arr.Count];\n        int\
    \ min = evens[0];\n        int minIndex = 0;\n        for (int i = 0; i < arr.Count;\
    \ ++i) {\n            if (arr[i] % 2 == 0) {\n                evens[i] = arr[i];\n\
    \                if (arr[i] < min) {\n                    min = arr[i];\n    \
    \                minIndex = i;\n                }\n            }\n        }\n\
    \        if (min == evens[0]) {\n            result.Add(min);\n            result.Add(minIndex);\n\
    \        }\n        return result;", "        if (arr == null || arr.Count ==\
    \ 0)\n            return new List<long>();\n        int n = arr.Count;\n     \
    \   List<long> result = new List<long>();\n        int min_index = 0;\n      \
    \  long min_value = arr[0];\n        bool any_zeros = false;\n        for (int\
    \ i = 0; i < n; i++) {\n            long value = arr[i];\n            if (value\
    \ == 0) {\n                any_zeros = true;\n                continue;\n    \
    \        }\n            if (value < min_value) {\n                min_value =\
    \ value;\n                min_index = i;\n            }\n        }\n        if\
    \ (!any_zeros) {\n            return new List<long>();\n        }\n        List<long>\
    \ smalest_values = new List<long>(arr.Count);\n        for (int i = 0; i < n;\
    \ i++) {\n            long value = arr[i];\n            if (value == 0) {\n  \
    \              any_zeros = true;\n                continue;\n            }\n \
    \           if (value == min_value) {\n                smalest_values.Add(value);\n\
    \            }\n        }\n        if (min_index == 0)\n            return new\
    \ List<long>(smalest_values);\n        return new List<long>(smalest_values.GetRange(min_index,\
    \ smalest_values.Count));", "        List<long> res = new List<long>();\n    \
    \    int[] indexes = new int[arr.Count];\n        int k = 0;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n         \
    \       indexes[k] = i;\n                k++;\n            }\n        }\n    \
    \    int minIndex = Int32.MinValue;\n        List<long> minValues = new List<long>();\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (indexes[i] < minIndex\
    \ && indexes[i] % 2 == 0 && indexes[i] != minIndex) {\n                minIndex\
    \ = indexes[i];\n                minValues.Add(arr[i]);\n            }\n     \
    \   }\n        if (minValues.Count > 0) {\n            int minValueIndex = minValues.IndexOf(arr[0]);\n\
    \            res.Add(minValues[minValueIndex]);\n        }\n        return res;",
  "        if (arr.Count == 0) return new List<long>();\n        // first we will\
    \ pick any even number, it could be the smallest index\n        int smallest_even_number\
    \ = 0;\n        foreach (long n in arr)\n            if (n % 2 == 0 && n < smallest_even_number)\n\
    \                smallest_even_number = n;\n        if (smallest_even_number ==\
    \ 0) return new List<long>();\n        int smallest_value_index = -1;\n      \
    \  List<long> result = new List<long>();\n        foreach (long n in arr)\n  \
    \          if (n % 2 == 0 && n < smallest_even_number)\n            {\n      \
    \          result.Add(n);\n                smallest_value_index = arr.IndexOf(n);\n\
    \            }\n        if (smallest_value_index < 0)\n            return new\
    \ List<long>();\n        var smallest_value = arr[smallest_value_index];\n   \
    \     var smallest_value_index = smallest_value_index;\n        foreach (long\
    \ n in arr)\n            if (n % 2 != 0 && n != smallest_even_number)\n      \
    \      {\n                if (n != smallest_value)\n                {\n      \
    \              result.Add(n);\n                    smallest_value_index = arr.IndexOf(n);\n\
    \                }\n            }\n        if (smallest_value_index < 0)\n   \
    \         return new List<long>();\n        result.Insert(smallest_value_index\
    \ + 1, smallest_value);\n        return result;", "        long smalest_value\
    \ = 0;\n        long smalest_idx = 0;\n        List<long> ans = new List<long>();\n\
    \        foreach (var x in arr)\n        {\n            if((smalest_value < x)\
    \ && (x % 2) == 0)\n            {\n                smalest_value = x;\n      \
    \          smalest_idx = arr.IndexOf(x);\n            }\n        }\n        if\
    \ (smalest_idx == arr.Count - 1)\n        {\n            return ans;\n       \
    \ }\n        else\n        {\n            ans.Add(smalest_value);\n          \
    \  ans.Add(smalest_idx);\n            return ans;\n        }", "        var index\
    \ = arr.OrderBy(i => ((i & 0xFFFF0000) >> 16).CompareTo(i & 0xFFFF)).First().Index;\n\
    \        if (index == 0)\n            return new List<long>();\n\n        var\
    \ smalest_value = arr.OrderBy(i => ((i & 0xFFFF0000) >> 16).CompareTo(i & 0xFFFF)).First().Value;\n\
    \n        var new_array = new List<long>();\n        for (int i = index - 1; i\
    \ >= 0; --i)\n            if (arr[i] & 1)\n                new_array.Add(arr[i]);\n\
    \n        if (new_array.Count > 1)\n        {\n            var sorted_array =\
    \ new_array.OrderBy(i => ((i & 0xFFFF0000) >> 16).CompareTo(i & 0xFFFF)).ToList();\n\
    \            foreach (var i in sorted_array)\n            {\n                if\
    \ (smalest_value == i)\n                {\n                    if (sorted_array.IndexOf(i)\
    \ < sorted_array.IndexOf(smalest_value))\n                        smalest_value\
    \ = i;\n                    break;\n                }\n            }\n       \
    \ }\n\n        return new_array.ToList();", "        List<long> results = new\
    \ List<long>();\n        if (arr.Count == 0) {\n            results.Add(0);\n\
    \            results.Add(0);\n            return results;\n        }\n       \
    \ int smallest = arr.First().CompareTo(arr.Last());\n        bool is_even = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                is_even = true;\n                break;\n            }\n\
    \        }\n        if (is_even && smallest != 0) {\n            for (int i =\
    \ 0; i < arr.Count; i++) {\n                if (arr[i] != 0) {\n             \
    \       smallest = arr.First().CompareTo(arr[i]);\n                    is_even\
    \ = false;\n                }\n            }\n        }\n        if (is_even &&\
    \ smallest != 0) {\n            for (int i = 0; i < arr.Count; i++) {\n      \
    \          if (arr[i] != 0) {\n                    results.Add(arr[i]);\n    \
    \                results.Add(i);\n                }\n            }\n        }\
    \ else if (smallest != 0) {\n            for (int i = 0; i < arr.Count; i++) {\n\
    \                if (arr[i] != 0) {\n                    results.Add(arr[i]);\n\
    \                    results.Add(i);\n                }\n            }\n     \
    \   } else {\n            for (int i = 0; i < arr.Count; i++) {\n            \
    \    if (arr[i] != 0) {\n                    results.Add(arr[i]);\n          \
    \      }\n            }\n        }\n        return results;", "        int n =\
    \ arr.Count;\n        List<long> res = new List<long>();\n        long m = arr.Min();\n\
    \        for (int i = 0; i < n; i++) {\n            if (arr[i] < m) {\n      \
    \          res.Add(arr[i]);\n            }\n            else if (arr[i] == m)\
    \ {\n                res.Add(arr[n - 1 - i]);\n            }\n        }\n    \
    \    return res;", "        var min = arr.Min(i => i);\n        var minIndex =\
    \ arr.FindIndex(i => i == min);\n        if (minIndex >= 0) {\n            if\
    \ (arr.Where(i => i % 2 == 0).Count() > 0)\n                return new List<long>\
    \ { arr[minIndex], minIndex };\n            if (minIndex == 0)\n             \
    \   return new List<long> { arr[minIndex] };\n            return arr.Where((i,\
    \ j) => i % 2 == 0 || j % 2 == 0).Select((i, index) => (i + (minIndex - index))\
    \ / 2).ToList();\n        }\n        return new List<long>();", "        var m\
    \ = arr.First();\n        arr.RemoveAt(0);\n        var res = (from n in arr\n\
    \                   let i = n\n                   let c = m & i\n            \
    \       let p = m ^ c\n                   let h = m ^ c\n                   select\
    \ new { i, c, p, h })\n                   .Where(x => x.c != 0)\n            \
    \       .OrderBy(x => x.p)\n                   .FirstOrDefault();\n        arr.Insert(0,\
    \ res.i);\n        return arr;", "        List<long> evenNodes = new List<long>();\n\
    \        long smalest_value = arr.FirstOrDefault();\n        int smalest_index\
    \ = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long value\
    \ = arr[i];\n            if (value % 2 == 0) {\n                evenNodes.Add(value);\n\
    \            }\n            else if (value < smalest_value) {\n              \
    \  smalest_value = value;\n                smalest_index = i;\n            }\n\
    \        }\n        if (evenNodes.Count > 0) {\n            int smallest_index\
    \ = evenNodes.IndexOf(evenNodes.Min());\n            return evenNodes.ToList().GetRange(smallest_index,\
    \ evenNodes.Count - smallest_index).ToList();\n        }\n        return new List<long>();",
  "        if (arr.Any(x => x < 0)) {\n            return null;\n        }\n     \
    \   Array.Sort(arr);\n        int indexOfSmallestEven = 0;\n        while (indexOfSmallestEven\
    \ < arr.Count && arr[indexOfSmallestEven] % 2 == 0) {\n            indexOfSmallestEven++;\n\
    \        }\n        if (indexOfSmallestEven == arr.Count) {\n            return\
    \ new List<long>();\n        }\n        else {\n            return new List<long>()\
    \ { arr[indexOfSmallestEven] };\n        }", "        int length = arr.Count;\n\
    \        if (length == 0)\n            return new List<long>();\n        long\
    \ smallest_value;\n        long smallest_index;\n        long min_even_value;\n\
    \        long min_even_index;\n        int i = 0;\n        bool is_even;\n   \
    \     List<long> even_values = new List<long>();\n        List<long> even_indexes\
    \ = new List<long>();\n        long even_min_index;\n        while (i < length)\
    \ {\n            i++;\n            int min_value = arr[i];\n            smallest_value\
    \ = min_value;\n            smallest_index = i;\n            min_even_value =\
    \ min_value;\n            min_even_index = i;\n            is_even = true;\n \
    \           even_min_index = i;\n            while (i < length && !is_even) {\n\
    \                if (arr[i] % 2 == 0) {\n                    is_even = true;\n\
    \                    even_min_index = i;\n                    even_values.Add(arr[i]);\n\
    \                    even_indexes.Add(i);\n                } else {\n        \
    \            is_even = false;\n                    i++;\n                }\n \
    \           }\n            while (i < length && !is_even) {\n                if\
    \ (arr[i] < min_even_value) {\n                    min_even_value = arr[i];\n\
    \                    min_even_index = i;\n                }\n                i++;\n\
    \            }\n            while (i < length) {\n                if (arr[i] <\
    \ smallest_value) {\n                    smallest_value = arr[i];\n          \
    \          smallest_index = i;\n                }\n                i++;\n    \
    \        }\n        }\n        if (smallest_index == 0)\n            return new\
    \ List<long>();\n        even_min_index = even_min_index - 1;\n        while (even_min_index\
    \ >= 0) {\n            even_min_index--;\n            if (even_values.Count ==\
    \ 0) {\n                break;\n            } else if (even_values.Count > 1 &&\
    \ even_values[even_min_index] == 0) {\n                even_min_index = even_min_index\
    \ - 1;\n                break;\n            } else {\n                even_values.RemoveAt(even_min_index);\n\
    \                even_indexes.RemoveAt(even_min_index);\n            }\n     \
    \   }\n        while (even_min_index >= 0) {\n            even_min_index--;\n\
    \            if (even_values.Count == 0)\n                break;\n           \
    \ even_indexes.Add(even_indexes[even_min_index]);\n        }\n        while (even_min_index\
    \ >= 0) {\n            even_min_index--;\n            if (even_values.Count ==\
    \ 0)\n                break;\n            even_indexes.Add(even_indexes[even_min_index]);\n\
    \        }\n        even_indexes.Add(smallest_index);\n        even_values.Insert(0,\
    \ smallest_index);\n        even_values.Insert(even_indexes[0], smallest_index);\n\
    \        even_indexes.Insert(0, even_indexes[0]);\n        if (even", "      \
    \  long min = arr.Min();\n        long index = -1;\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            if (arr[i] < min) {\n                min =\
    \ arr[i];\n                index = i;\n            }\n        }\n        if (index\
    \ == -1) {\n            return new List<long>();\n        }\n\n        List<long>\
    \ ret = arr.Take(index).ToList();\n        ret.Add(min);\n        return ret;",
  "        long[] v = new long[arr.Count];\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            v[i] = arr[i];\n        }\n        Array.Sort(v);\n    \
    \    int i = 0;\n        List<long> values = new List<long>(v.Length);\n     \
    \   while (i < v.Length) {\n            values.Add(v[i]);\n            i++;\n\
    \        }\n        if (values.Count == 0) {\n            return new List<long>();\n\
    \        } else if (values.Count == 1) {\n            return new List<long>()\
    \ { values.get(0), 0 };\n        }\n        int min = -1;\n        int index =\
    \ 0;\n        for (int i = 0; i < values.Count; i++) {\n            if (min ==\
    \ -1 || min > values[i]) {\n                min = values[i];\n               \
    \ index = i;\n            }\n        }\n        return new List<long>() { values.get(index),\
    \ index };", "        int n = arr.Count;\n        long value = arr.Min();\n  \
    \      int index = 0;\n\n        while (value < n) { // start with the first element\n\
    \            index = value;\n            value = arr[index];\n        }\n    \
    \    int i = 1;\n        while (arr[index] == arr[index + i]) { // find another\
    \ element with the same value\n            i++;\n        }\n\n        int smallest\
    \ = arr[index];\n        int index = value;\n        for (int i = 1; i <= n; i++)\
    \ {\n            int c = arr[index];\n            if (c > smallest) {\n      \
    \          smallest = c;\n                index = index + i;\n            }\n\
    \        }\n        return arr.Where((x, i) => i == index).ToList();"]
stop_tokens:
- "\n    }\n"
