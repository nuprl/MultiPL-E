language: cs
name: HumanEval_126_is_sorted
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var seen = new HashSet<long>(lst);\n        if (seen.Count > 1)\n
    \           return false;\n        var min = lst.Min();\n        var max = lst.Max();\n
    \       return (min <= max);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <984939d59feb46bdbf483c48ce225896>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <984939d59feb46bdbf483c48ce225896>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        bool ok = true;\n        if (lst.Count == 1) {\n            if
    (lst[0] != lst[0]) { ok = false; }\n        }\n        else {\n            HashSet<long>
    set = new HashSet<long>();\n            for (int i = 0; i < lst.Count; i++) {\n
    \               set.Add(lst[i]);\n            }\n            if (set.Count < lst.Count)
    { ok = false; }\n        }\n        return ok;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef28dbb91c814c778ed1b394f956c3b2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef28dbb91c814c778ed1b394f956c3b2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        // if there are no elements, return true\n        if (lst.Count
    == 0)\n            return true;\n\n        // if there are more than 1 duplicate
    elements, return false\n        if (lst.Count > 1) {\n            return false;\n
    \       }\n\n        // if the first element does not meet the condition, return
    false\n        if (lst[0] != 0)\n            return false;\n\n        long? max
    = null;\n        long curr = 0;\n        long min = lst[0];\n        long sum
    = 0;\n\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]
    != 0) {\n                curr += lst[i];\n                if (min > curr)\n                    min
    = curr;\n                sum += lst[i];\n                if (max < lst[i])\n                    max
    = lst[i];\n            }\n        }\n        // if sum is equal to sum of the
    numbers in the list, return true\n        if (sum == sum)\n            return
    true;\n\n        // if the minimum element is less than the maximum, return false\n
    \       if (min < max)\n            return false;\n\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f47ca39227914aafb66eb153e5d7c681>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f47ca39227914aafb66eb153e5d7c681>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977161
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long last = lst[0];\n        bool result = true;\n        foreach
    (var v in lst.Skip(1)) {\n            if (v < last) return false;\n            last
    = v;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <49370aea38224c8ea5ad778daae0a92e>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <49370aea38224c8ea5ad778daae0a92e>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <49370aea38224c8ea5ad778daae0a92e>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <49370aea38224c8ea5ad778daae0a92e>:0
    \n"
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        return lst.Distinct().Count() <= 1;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91f429c47dbc404294a1b9f2464016d1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91f429c47dbc404294a1b9f2464016d1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977161
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 1) return false;\n        var seen = new HashSet<long>();\n
    \       var min = lst.Min();\n        var max = lst.Max();\n        var i = 1;\n
    \       var result = true;\n        while (i < lst.Count) {\n            var currMin
    = lst[i];\n            if (curMin == max) return false;\n            if (curMin
    == min && seen.Add(currMin)) {\n                result = false;\n            }\n
    \           i++;\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpokpkerce.cs(38,17): error CS0103: The name ''curMin'' does not exist in
    the current context

    /tmp/tmpokpkerce.cs(39,17): error CS0103: The name ''curMin'' does not exist in
    the current context

    '
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count <= 1) return true;\n        long lastVal = lst[lst.Count
    - 1];\n        var hash = new SortedDictionary<long, List<long>>();\n        foreach
    (long value in lst) {\n            if (!hash.ContainsKey(value)) {\n                hash.Add(value,
    new List<long>());\n            }\n            hash[value].Add(value);\n        }\n
    \       foreach (var item in hash) {\n            if (item.Value != item.Value.OrderBy(i
    => i)) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be31be0a87e8448081b3bb77d3d64e39>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be31be0a87e8448081b3bb77d3d64e39>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if(lst.Count == 0) return true;\n        if(lst.Count == 1) return
    lst.First() == lst[0]; // special case 1\n        if(lst.Contains(lst.First()))
    return false; // special case 2\n        for(int i = 0; i < lst.Count - 1; i++)
    {\n            if(lst[i] < lst[i + 1]) return true;\n        }\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4d2233b70e72477c9e2436fead1a3810>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4d2233b70e72477c9e2436fead1a3810>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977161
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        List<long> dup = new List<long>();\n        for (int i = 0; i
    < lst.Count; i++) {\n            if (lst.ElementAt(i) != lst[i - 1]) {\n                if
    (dup.Contains(lst.ElementAt(i))) {\n                    return false;\n                }\n
    \               dup.Add(lst.ElementAt(i));\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00013] in <d12f86e47e804b6da8412e2450941a0a>:0
    \n  at Problem.Main (System.String[] args) [0x00011] in <d12f86e47e804b6da8412e2450941a0a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00013] in <d12f86e47e804b6da8412e2450941a0a>:0
    \n  at Problem.Main (System.String[] args) [0x00011] in <d12f86e47e804b6da8412e2450941a0a>:0
    \n"
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        return lst.Distinct().OrderBy(i => i).SequenceEqual(lst);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e16b047d5d4b4c98b0d64e645d8fc786>:0
    \n"
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var set = new HashSet<long>(lst);\n        return set.Count ==
    lst.Count && set.OrderBy(x => x).ToList() == lst;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cd60b091a3a7450f881203b04b322282>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cd60b091a3a7450f881203b04b322282>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977161
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count > 1)\n            return false;\n        long last
    = lst[0];\n        int i = 0;\n        foreach (long n in lst)\n            if
    (n != last)\n                if (i++ > 1)\n                    return false;\n
    \               last = n;\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprvruvu50.cs(38,24): error CS0103: The name ''n'' does not exist in the
    current context

    '
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long lastValue = lst[0];\n
    \       bool duplicated = false;\n        List<long> seen = new List<long>();\n
    \       seen.Add(lastValue);\n        for (int i = 1; i < lst.Count; ++i) {\n
    \           long curValue = lst[i];\n            if (curValue == lastValue) duplicated
    = true;\n            else if (curValue != lastValue && !seen.Contains(curValue))
    {\n                seen.Add(curValue);\n            }\n            lastValue =
    curValue;\n        }\n        return !duplicated;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77d1be42833f46e697207e4654077972>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77d1be42833f46e697207e4654077972>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977161
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var last = lst.Last();\n        var first = lst.First();\n        for
    (int i = 0; i < lst.Count; ++i) {\n            if (lst[i] > last && lst[i] < first)
    {\n                return false;\n            }\n            if (lst[i] < last
    && lst[i] > first) {\n                return false;\n            }\n            last
    = lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Last[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <c34a7cc96e7d4d22a4618955e2d34a52>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <c34a7cc96e7d4d22a4618955e2d34a52>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.Last[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <c34a7cc96e7d4d22a4618955e2d34a52>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <c34a7cc96e7d4d22a4618955e2d34a52>:0
    \n"
  stdout: ''
  timestamp: 1659977161
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count <= 1) { return true; }\n        long prev;\n        if
    (lst.Count > 1) { prev = -1; }\n        else { prev = lst.First(); }\n        for
    (int i = 0; i < lst.Count; i++) {\n            if (lst[i] < prev) { break; }\n
    \           prev = lst[i];\n        }\n        if (i - 1 == lst.Count && lst[i
    - 1] != prev) { return false; }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphp8oec4z.cs(38,13): error CS0103: The name ''i'' does not exist in the
    current context

    /tmp/tmphp8oec4z.cs(38,39): error CS0103: The name ''i'' does not exist in the
    current context

    '
  timestamp: 1659977161
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return false;\n        var dic = lst.ToDictionary(x
    => x, x => new List<long>());\n        foreach (var x in lst) {\n            if
    (!dic.ContainsKey(x))\n                dic[x] = new List<long>();\n            if
    (dic[x].Count > 1) return false;\n            dic[x].Add(x);\n        }\n        foreach
    (var x in dic)\n            if (dic[x].Count > 1) return false;\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3ar7j1_j.cs(39,21): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.KeyValuePair<long,
    System.Collections.Generic.List<long>>'' to ''long''

    '
  timestamp: 1659977161
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 1)\n            return false;\n        int prev;\n
    \       for (int i = 1; i < lst.Count; i++) {\n            prev = lst[i];\n            if
    (prev != lst[i - 1])\n                return false;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpckx8bliy.cs(34,20): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977161
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count() == 1)\n            return true;\n        var seen
    = new Dictionary<long, long>();\n        var last = lst.First();\n        for
    (int i = 1; i < lst.Count(); i++)\n        {\n            if (seen[lst[i]] ==
    null)\n            {\n                seen[lst[i]] = last;\n                return
    false;\n            }\n            else\n            {\n                last =
    seen[lst[i]];\n            }\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.Collections.Generic.KeyNotFoundException:
    The given key '2' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item
    (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x0002e] in <da734b40d86c44819585997b9d02b2ba>:0
    \n  at Problem.Main (System.String[] args) [0x00032] in <da734b40d86c44819585997b9d02b2ba>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Collections.Generic.KeyNotFoundException:
    The given key '2' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item
    (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x0002e] in <da734b40d86c44819585997b9d02b2ba>:0
    \n  at Problem.Main (System.String[] args) [0x00032] in <da734b40d86c44819585997b9d02b2ba>:0
    \n"
  stdout: ''
  timestamp: 1659977161
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        bool isSorted = false;\n        if (lst.Count > 0) {\n            HashSet<long>
    hashSet = new HashSet<long>();\n            for (int i = 0; i < lst.Count - 1;
    i++) {\n                long x = lst[i];\n                long y = lst[i + 1];\n
    \               int compare = Compare(x, y);\n                if (compare != 0)
    {\n                    if (compare < 0) {\n                        isSorted =
    false;\n                        break;\n                    } else if (compare
    > 0) {\n                        isSorted = true;\n                        break;\n
    \                   } else if (compare == 0) {\n                        hashSet.Add(x);\n
    \                   }\n                }\n            }\n\n            if (!hashSet.Contains(lst[lst.Count
    - 1])) {\n                isSorted = true;\n            }\n        }\n        return
    isSorted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplllxiqh_.cs(36,31): error CS0103: The name ''Compare'' does not exist
    in the current context

    '
  timestamp: 1659977161
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        int left
    = 0, right = lst.Count - 1;\n        while (left < right) {\n            long
    mid = (left + right) / 2;\n            if (lst[mid] < lst[mid]) {\n                right
    = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n
    \       }\n        if (left < right) {\n            return false;\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsgt4p2b1.cs(35,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpsgt4p2b1.cs(35,32): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpsgt4p2b1.cs(36,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpsgt4p2b1.cs(38,24): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count > 1) {\n            return false;\n        }\n        var
    numbers = lst.Distinct().OrderBy(x => x).ToList();\n        return numbers.All(x
    => numbers.Contains(x));\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5044925b11064ca6b90e54465ef4eb09>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5044925b11064ca6b90e54465ef4eb09>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977161
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var prevItem = lst.First();\n        var isSorted = false;\n        var
    foundDuplicate = false;\n        foreach (var item in lst) {\n            if (foundDuplicate)
    {\n                return false;\n            }\n            if (item == prevItem)
    {\n                foundDuplicate = true;\n                continue;\n            }\n
    \           if (item > prevItem) {\n                isSorted = true;\n                continue;\n
    \           }\n            return false;\n        }\n        return isSorted;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2a5679b741944df8824581a15ceb42f5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2a5679b741944df8824581a15ceb42f5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count <= 1) return true;\n\n        // Hash table to check
    for duplicates\n        var hashSet = new HashSet<long>();\n\n        long lastNum
    = lst[lst.Count - 1];\n\n        foreach (var num in lst) {\n            if (hashSet.Contains(num))
    return false;\n            if (num > lastNum) hashSet.Add(num);\n        }\n\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <596e5ab5f2be4e4f956f52b55c1b8267>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <596e5ab5f2be4e4f956f52b55c1b8267>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977161
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count() == 1)\n            return true;\n        List<long>
    duplicates = new List<long>();\n        var dict = lst.GroupBy(x => x).Where(x
    => x.Count() > 1).ToDictionary(x => x.Key, x => x.ToList());\n        foreach
    (var item in dict)\n            if (item.Key != item[0])\n                duplicates.Add(item.Key);\n
    \       return duplicates.Count == 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp09lksbrl.cs(35,29): error CS0021: Cannot apply indexing with [] to an
    expression of type ''KeyValuePair<long, List<long>>''

    '
  timestamp: 1659977161
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 1) {\n            return true;\n        }\n        var
    seen = new Dictionary<long, int>();\n        var result = false;\n        foreach
    (var item in lst) {\n            var count = seen.TryGetValue(item, out var count)
    ? count : 1;\n            if (count == 1) {\n                if (result || item
    < lst[count-1]) {\n                    result = false;\n                }\n            }\n
    \           else {\n                seen[item] = count;\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdb23t1s4.cs(36,56): error CS0128: A local variable or function named ''count''
    is already defined in this scope

    /tmp/tmpdb23t1s4.cs(36,65): error CS0841: Cannot use local variable ''count''
    before it is declared

    '
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst==null || lst.Count==0)\n            return false;\n\n
    \       if (lst.Count > 1) {\n            List<long> res = new List<long>();\n
    \           long temp;\n            for (int i = 0; i < lst.Count; ++i) {\n                for
    (int j = i; j < lst.Count; ++j) {\n                    if (lst[j] == lst[i]) {\n
    \                       res.Add(lst[j]);\n                        break;\n                    }\n
    \               }\n            }\n            return res.Count == 1;\n        }\n
    \       return lst.Count == 0;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ea7b67ca725e473e8873aea12291675e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ea7b67ca725e473e8873aea12291675e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977161
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        int[] a = new int[256];\n        for (int i =0; i <lst.Count;
    i++) {\n            int val = lst[i];\n            if (val < a[i])\n                return
    false;\n            a[val] = 1;\n        }\n\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_942rs_y.cs(32,23): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if(lst.Count==0) return true;\n        long last=lst[0];\n        bool
    ascending = true;\n        for(int i=1; i<lst.Count; i++) {\n            long
    current = lst[i];\n            if(current==last) {\n                // This happens
    when the list is sorted already:\n                if(ascending) {\n                    if(lst[i-1]>lst[i])
    ascending = false;\n                }\n                else { \n                    if(lst[i-1]<lst[i])
    ascending = true;\n                }\n            }\n            else {\n                if(ascending)
    {\n                    if(current<last) ascending = false;\n                }\n
    \               else {\n                    if(current>last) ascending = true;\n
    \               }\n            }\n            last = current;\n        }\n        return
    !ascending;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6cf8286c07524df9b29ea171eecabf25>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6cf8286c07524df9b29ea171eecabf25>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977161
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        Dictionary<long, long> counts = new Dictionary<long, long>();\n
    \       foreach (long n in lst) {\n            counts[n] = (counts[n] ?? 0) +
    1;\n        }\n        int count = 0;\n        foreach (KeyValuePair<long, long>
    kvp in counts) {\n            if (kvp.Value > 1) {\n                return false;\n
    \           } else if (kvp.Value == 1) {\n                count = kvp.Key;\n            }\n
    \       }\n\n        // if we get here, then the list is already sorted\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5hy14kt8.cs(32,26): error CS0019: Operator ''??'' cannot be applied to
    operands of type ''long'' and ''int''

    /tmp/tmp5hy14kt8.cs(39,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        int n = lst.Count;\n        if (n == 0) return true;\n        Dictionary<long,
    bool> dict = new Dictionary<long, bool>();\n        for (int i = 1; i < n; i++)
    {\n            if (i == lst[i]) return false;\n            if (dict.ContainsKey(lst[i]))
    return false;\n            dict.Add(lst[i], true);\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4e3a3f0e8094497e8247e99dc1cf6e84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4e3a3f0e8094497e8247e99dc1cf6e84>:0
    \n"
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst.Last();\n        bool flag = false;\n        bool flag2 = false;\n        long
    last2 = lst.Last();\n        for (int i = 0; i < lst.Count - 1; i++) {\n            if
    (lst[i] < last) {\n                flag = true;\n            }\n            if
    (lst[i] < last2) {\n                flag2 = true;\n            }\n            if
    (lst[i] > last) {\n                flag = true;\n            }\n            if
    (lst[i] > last2) {\n                flag2 = true;\n            }\n            long
    temp1 = lst[i];\n            long temp2 = lst[i + 1];\n            if (flag &&
    flag2) {\n                return true;\n            }\n            if (flag) {\n
    \               return false;\n            }\n            if (flag2) {\n                return
    false;\n            }\n            last = temp1;\n            last2 = temp2;\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a16e66e5353f499aa9b5378f811bcddf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a16e66e5353f499aa9b5378f811bcddf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var hashSet = lst.ToHashSet();\n        return lst.All(x => hashSet.Contains(x));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <228c244fa81744adb5ca20831f6db09e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <228c244fa81744adb5ca20831f6db09e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count <= 1)\n            return true;\n        if (lst.Count
    > 1 && lst.Contains(lst.Last()))\n            return false;\n\n        var seen
    = new HashSet<long>();\n\n        // Use a foreach loop to determine if all values
    in lst are in the seen\n        foreach (var num in lst) {\n            if (seen.Add(num))
    {\n                lst.Remove(num);\n                return false;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <982824f681564ceeb593e9afdb92fd5c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <982824f681564ceeb593e9afdb92fd5c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977162
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        int n = lst.Count;\n        if (n < 2) return true;\n        int
    i = 0, j = 1;\n        while (i < n && j < n) {\n            if (lst[i] < lst[j])
    {\n                return false;\n            }\n            if (lst[i] == lst[j])
    {\n                i++;\n                j++;\n            }\n            if (i
    == n) break;\n        }\n        return i == n;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4d352c1fbd204e33b2143f9f1df6cd8f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4d352c1fbd204e33b2143f9f1df6cd8f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: None
  timestamp: 1659977166
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long prev = lst[0];\n        bool ok = true;\n        for(int
    i = 1; i < lst.Count; ++i) {\n            if(lst[i] == prev) {\n                return
    false;\n            }\n            if(lst[i] < prev) {\n                ok = false;\n
    \           }\n            prev = lst[i];\n        }\n        return ok;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <48570e11688d41489e2964fc1c77cbd5>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <48570e11688d41489e2964fc1c77cbd5>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <48570e11688d41489e2964fc1c77cbd5>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <48570e11688d41489e2964fc1c77cbd5>:0
    \n"
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var seen = new HashSet<long>();\n        foreach (var item in
    lst) {\n            if (seen.Contains(item)) return false;\n            seen.Add(item);\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <048ba6d2183348dfa5c84473987bf87d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <048ba6d2183348dfa5c84473987bf87d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        // Using a hashset will let us find duplicate elements quickly.\n
    \       // The first number will be the one that isn't in the hash set\n        //
    so we don't need to worry about duplicates in the list.\n        HashSet<long>
    hashSet = new HashSet<long>();\n        for (int i = 0; i < lst.Count; i++) {\n
    \           if (!hashSet.Add(lst[i])) {\n                return false;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0ba743dd873a414cacb80b66874d0b16>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0ba743dd873a414cacb80b66874d0b16>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        int last
    = lst.Count;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]
    < lst[i - 1]) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <50be0e5c617749959268e2b28eab30b2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <50be0e5c617749959268e2b28eab30b2>:0
    \n"
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        // O(n)\n        if (lst.Count < 2) {\n            return true;\n
    \       }\n        long lastValue = lst[lst.Count - 1];\n        bool isDescending
    = true;\n        foreach (long value in lst) {\n            if (value <= lastValue)
    {\n                isDescending = false;\n                break;\n            }\n
    \           lastValue = value;\n        }\n        return isDescending;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6ad767db1cba4e15bdedd4d975f6af8e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6ad767db1cba4e15bdedd4d975f6af8e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        List<long> dup = lst.GroupBy(x
    => x).Where(x => x.Count() > 1).Select(x => x.Key).ToList();\n        return lst.All(x
    => dup.All(y => y > x));\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86a9eee2f3384f05b398976d2c5120f3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86a9eee2f3384f05b398976d2c5120f3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n\n        // We need to keep
    track of the last number we saw in the list.\n        long lastValue = 0;\n        long
    currentValue = 0;\n        long previousValue = 0;\n\n        // We know that
    the list has at least 2 items, so the first\n        // two items are guaranteed
    to be the same number.\n        bool firstItemIsNumber = true;\n\n        // Check
    if the first item is a number.\n        if (!lst.All(x => x > 0)) return false;\n
    \       if (!lst.All(x => x < 0)) return false;\n\n        // Loop over the rest
    of the items in the list.\n        for (int i = 3; i < lst.Count; i++) {\n            currentValue
    = lst[i];\n\n            // If we have seen this item before, we have a duplicate.\n
    \           if (currentValue == lastValue) {\n                return false;\n
    \           }\n\n            // We have not seen this item before, so see if we
    have\n            // seen it before.\n            if (firstItemIsNumber) {\n                firstItemIsNumber
    = false;\n                previousValue = currentValue;\n            } else {\n
    \               // If we haven't seen it before, make sure it is higher\n                //
    than the previous item in the list.\n                if (currentValue < previousValue)
    {\n                    return false;\n                }\n\n                //
    We have seen it before, so update the previous value.\n                previousValue
    = currentValue;\n            }\n\n            lastValue = currentValue;\n        }\n\n
    \       // If we got here, that means there was only one unique item\n        //
    and it is less than the value of the last item in the list.\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77dd3c7132334be18ee4f6aac630b97b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77dd3c7132334be18ee4f6aac630b97b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        bool sorted = false;\n        long prev = (long)0;\n        if
    (lst.Count > 1) {\n            long lastNum = lst.Last();\n            foreach
    (long num in lst) {\n                if (num > lastNum) {\n                    return
    false;\n                }\n                else if (num < prev) {\n                    return
    false;\n                }\n                prev = num;\n            }\n            sorted
    = true;\n        }\n        return sorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b100d2b87cb24bb8bc7bc47852cd8227>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b100d2b87cb24bb8bc7bc47852cd8227>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        bool areAscending = true;\n        Dictionary<long, bool> set
    = new Dictionary<long, bool>();\n        foreach (long n in lst) {\n            if
    (set.ContainsKey(n)) {\n                areAscending = (!set[n]);\n            }\n
    \           set[n] = true;\n        }\n        return areAscending;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <24f10db02de049aaba6c74f8fdab3fed>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <24f10db02de049aaba6c74f8fdab3fed>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0) return true;\n        long prev = 0;\n        foreach
    (long x in lst)\n        {\n            if (prev >= x) break;\n            prev
    = x;\n        }\n        return prev <= lst.Last();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <349334becc10421092409849a631dd02>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <349334becc10421092409849a631dd02>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        int count = lst.Count(d => d == lst[0]);\n        return count
    == lst.Count || count == lst.Count - 1;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7c264f8874c7417b87bbc6bfb00e9076>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7c264f8874c7417b87bbc6bfb00e9076>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var seen = new HashSet<long>();\n        for (var i = 1; i < lst.Count;
    ++i) {\n            if (lst.ElementAt(i) == lst.ElementAt(i - 1))\n                return
    false;\n            if (seen.Add(lst.ElementAt(i)))\n                return true;\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6a2fc1d685964e22a3f375ecf595eee8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6a2fc1d685964e22a3f375ecf595eee8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977162
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var hash = new Dictionary<long, int>();\n        var item = 0;\n
    \       lst.ForEach((x) => { if (hash.ContainsKey(x)) hash[x] += 1; else hash[x]
    = 1; });\n        \n        foreach (var item in hash)\n        {\n            if
    (hash[item] > 1)\n            {\n                return false;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn6a8n21s.cs(34,22): error CS0136: A local or parameter named ''item''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpn6a8n21s.cs(36,22): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.KeyValuePair<long,
    int>'' to ''long''

    /tmp/tmpn6a8n21s.cs(31,13): warning CS0219: The variable ''item'' is assigned
    but its value is never used

    '
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        // Return false if the list does not contain any duplicates\n
    \       if(lst.Count < 2)\n            return false;\n        long last = lst[0];\n
    \       long count = 1;\n        bool ret = true;\n        foreach(long x in lst)\n
    \       {\n            if(x == last)\n                count++;\n            else\n
    \           {\n                if(count > 1)\n                    ret = false;\n
    \               last = x;\n                count = 1;\n            }\n        }\n
    \       return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6fbb994fe4a641db8f2eff0fbd289909>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6fbb994fe4a641db8f2eff0fbd289909>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        // Check one by one, not using the LINQ method OrderBy()\n        //
    because it's slow.\n        for (int i = 0; i < lst.Count - 1; i++) {\n            long
    current = lst[i];\n            long next = lst[i + 1];\n            if (current
    > next)\n                return false;\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f487b04015d24411b3de8af62eefbf5a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f487b04015d24411b3de8af62eefbf5a>:0
    \n"
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) { return true; }\n        if (lst.Count <=
    1) { return false; }\n\n        long lastval = lst[0];\n        bool first = true;\n
    \       for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastval)
    { return false; }\n            if (first == false) {\n                if (lst[i]
    == lastval) { return false; }\n            }\n            lastval = lst[i];\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8600df7e58c4431daea2c413b77c6316>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8600df7e58c4431daea2c413b77c6316>:0
    \n"
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count() > 1)\n            return false;\n        var hash
    = lst.ToDictionary(x => x);\n        if (hash.Keys.Count() != lst.Count())\n            return
    false;\n        foreach (var k in hash.Keys) {\n            if (hash[k] < k)\n
    \               return false;\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5a515413d838494bafdba42b4e4347c4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5a515413d838494bafdba42b4e4347c4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977162
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count() > 1) {\n            return false;\n        }\n
    \       var val = lst.First();\n        for (int i = 1; i < lst.Count(); i++)
    {\n            if (val.CompareTo(lst[i]) < 0) {\n                return false;\n
    \           }\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8f35d3465c134cd6b43aedcc8f091b5e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8f35d3465c134cd6b43aedcc8f091b5e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        bool found = false;\n        for (int i = 0; i < lst.Count - 1;
    ++i) {\n            int j = i + 1;\n            if (j == lst.Count) {\n                found
    = true;\n                break;\n            }\n            if (lst[i] == lst[j])
    {\n                found = false;\n                break;\n            }\n        }\n
    \       return found;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0d3106d34d5a44dbb76c86d866077525>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0d3106d34d5a44dbb76c86d866077525>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        return lst.Count > 0 && (lst.FindIndex(x => x == lst.FirstOrDefault())
    + 1 == lst.Count);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9856a131cbe44e30985ba6444ecce8f1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9856a131cbe44e30985ba6444ecce8f1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var set = lst.ToLookup(x => x);\n        if (set.Count() > 1)
    return false;\n        return set.All(x => x.Count() == 1 && x.Skip(1).Any());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b37770280b1041828635f26ab79b6cd5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b37770280b1041828635f26ab79b6cd5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long[] data = lst.ToArray();\n        bool flag = false;\n        int
    count = 0;\n        int lastIndex = data.Length - 1;\n        long previous =
    0;\n        if (lastIndex == 0) {\n            return true;\n        }\n        for
    (int i = 0; i < data.Length; i++) {\n            long current = data[i];\n            if
    (current == previous) {\n                count++;\n            }\n            else
    {\n                previous = current;\n                count = 1;\n            }\n
    \           if (count == lastIndex) {\n                flag = true;\n            }\n
    \       }\n        if (flag) {\n            return true;\n        }\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <caee798f172b451293597ac09021e420>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <caee798f172b451293597ac09021e420>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977162
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) { return false; }\n        if (lst.Contains(lst.Last()))
    { return false; }\n        var lastVal = lst.Last();\n        var lastKey = lst.Key;\n
    \       foreach (var n in lst) {\n            if (n > lastVal) { return false;
    }\n            if (lastKey < lst.Key) { return false; }\n            lastVal =
    n;\n            lastKey = lst.Key;\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpck_ib_76.cs(33,27): error CS1061: ''List<long>'' does not contain a definition
    for ''Key'' and no accessible extension method ''Key'' accepting a first argument
    of type ''List<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpck_ib_76.cs(36,31): error CS1061: ''List<long>'' does not contain a definition
    for ''Key'' and no accessible extension method ''Key'' accepting a first argument
    of type ''List<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpck_ib_76.cs(38,27): error CS1061: ''List<long>'' does not contain a definition
    for ''Key'' and no accessible extension method ''Key'' accepting a first argument
    of type ''List<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var hash = new HashSet<long>();\n        foreach (var num in lst)\n
    \           if (!hash.Add(num)) {\n                return false;\n            }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <de77d9d570814651bd28455a26e2c270>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <de77d9d570814651bd28455a26e2c270>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0)\n            return true;\n        if (lst.Count
    == 1)\n            return true;\n        if (lst.Count == 2) {\n            if
    (lst[0] != lst[1])\n                return false;\n            return true;\n
    \       }\n        Dictionary<long, bool> dic = new Dictionary<long, bool>();\n
    \       foreach (var val in lst) {\n            bool exists = dic.ContainsKey(val);\n
    \           dic[val] = exists;\n        }\n        if (dic.Values.All(val => val
    == false))\n            return false;\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86d78f3c0141466a995db4417c80b86a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86d78f3c0141466a995db4417c80b86a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977163
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        return lst.Count() == lst.Distinct().Count() && lst.Where(x =>
    x == lst.First()).Skip(1).All(x => x <= lst.First());\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2cfcce45b76e4d56b8f5eb2393749a39>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2cfcce45b76e4d56b8f5eb2393749a39>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977163
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long prevNum = lst[0];\n        bool isSorted = true;\n        for
    (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < prevNum) {\n                isSorted
    = false;\n                break;\n            }\n            prevNum = lst[i];\n
    \       }\n        return isSorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <13dce8f0d9d24e608ecbbd7bcdd639aa>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <13dce8f0d9d24e608ecbbd7bcdd639aa>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <13dce8f0d9d24e608ecbbd7bcdd639aa>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <13dce8f0d9d24e608ecbbd7bcdd639aa>:0
    \n"
  stdout: ''
  timestamp: 1659977162
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var first = lst.FirstOrDefault();\n        if (first == null)
    {\n            return true;\n        }\n        int firstVal = first.Value;\n
    \       int firstCount = 0;\n        bool found = false;\n        lst.ForEach(x
    => {\n            if (x.Value == firstVal) {\n                firstCount++;\n
    \           }\n            else {\n                if (firstCount == 1) {\n                    return
    found;\n                }\n                found = true;\n            }\n        });\n
    \       return found;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe532p7r0.cs(34,30): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpe532p7r0.cs(38,19): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpe532p7r0.cs(43,21): error CS8030: Anonymous function converted to a void
    returning delegate cannot return a value

    /tmp/tmpe532p7r0.cs(31,13): warning CS0472: The result of the expression is always
    ''false'' since a value of type ''long'' is never equal to ''null'' of type ''long?''

    '
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var sorted = lst.OrderBy(x => x);\n        return sorted.Count()
    == lst.Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2412225c1d2141a181dedb8769192a2e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2412225c1d2141a181dedb8769192a2e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977163
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0)\n            return true;\n        var lc
    = lst.Count;\n        if (lc == 1)\n            return lst.Contains(lst[0]);\n
    \       if (lc > 1)\n            long[] arr = lst.ToArray();\n            Array.Sort(arr);\n
    \           for (int i = 0; i < arr.Length; i++) {\n                if (i == 0
    || arr[i] != arr[i-1])\n                    return false;\n            }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0_bsa85k.cs(36,13): error CS1023: Embedded statement cannot be a declaration
    or labeled statement

    /tmp/tmp0_bsa85k.cs(37,24): error CS0103: The name ''arr'' does not exist in the
    current context

    /tmp/tmp0_bsa85k.cs(38,33): error CS0103: The name ''arr'' does not exist in the
    current context

    /tmp/tmp0_bsa85k.cs(39,31): error CS0103: The name ''arr'' does not exist in the
    current context

    /tmp/tmp0_bsa85k.cs(39,41): error CS0103: The name ''arr'' does not exist in the
    current context

    '
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0) return true;\n        long last = lst[0];\n
    \       bool check = true;\n        foreach (long i in lst) {\n            if
    (i <= last) return false;\n            check = check && i == last;\n            last
    = i;\n        }\n        return check;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2e69f4eb72284500970205292356c98a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2e69f4eb72284500970205292356c98a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977163
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        var seen
    = new HashSet<long>(lst.ToArray());\n        return lst.Select(n => new { nValue
    = n }).Distinct().ToList()\n            .All(x => seen.Add(x.nValue) && IsSorted(lst,
    x.nValue));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3ar0284u.cs(34,45): error CS1501: No overload for method ''IsSorted''
    takes 2 arguments

    '
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        return lst\n            .GroupBy(n => n)\n            .Any(g =>
    g.Count() == 1 && g.Key <= lst.Last());\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6a04b5b3f96a4e2390b0b036ca146af4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6a04b5b3f96a4e2390b0b036ca146af4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977163
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst==null || lst.Count==0) return true;\n        long[] set
    = new long[lst.Count];\n        Dictionary<long, bool> setDict = new Dictionary<long,
    bool>();\n        Dictionary<long, List<long>> setDictList = new Dictionary<long,
    List<long>>();\n        for (int i=0; i<lst.Count; i++) {\n            set[i]
    = lst[i];\n            setDict.Add(lst[i], true);\n            List<long> lstInList
    = setDictList.GetOrDefault(lst[i], new List<long>());\n            lstInList.Add(lst[i]);\n
    \           setDictList[lst[i]] = lstInList;\n        }\n        bool isAscending
    = true;\n        for (int i=0; i<lst.Count; i++) {\n            if (set[i]<set[i-1])
    {\n                isAscending = false;\n            }\n        }\n        return
    isAscending;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppoi0jcun.cs(37,48): error CS1061: ''Dictionary<long, List<long>>'' does
    not contain a definition for ''GetOrDefault'' and no accessible extension method
    ''GetOrDefault'' accepting a first argument of type ''Dictionary<long, List<long>>''
    could be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0) return true;\n        // Check for duplicate
    values\n        long lastValue = lst[0];\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] != lastValue) return false;\n            lastValue
    = lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8dbbb145d0fb46a688f8d0fdb6659ee0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8dbbb145d0fb46a688f8d0fdb6659ee0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977163
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        // If there are duplicates return false\n        if (lst.Count(x
    => x == lst.LastOrDefault()) > 1)\n            return false;\n        // If there
    is no duplicates return true\n        if (lst.Count(x => x == lst.FirstOrDefault())
    == 1)\n            return true;\n        long firstNumber = lst.FirstOrDefault();\n
    \       long lastNumber = lst.LastOrDefault();\n        // If first number is
    greater than last number return false\n        if (firstNumber > lastNumber)\n
    \           return false;\n        // If first number is less than last number
    return false\n        if (firstNumber < lastNumber)\n            return false;\n
    \       // If first number is equal to last number return true\n        return
    lst.Count(x => x == firstNumber) == lst.Count(x => x == lastNumber);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1112355dfe0d42768f669f62ea517e3e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1112355dfe0d42768f669f62ea517e3e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977163
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long lastVal = lst[0];\n        foreach (long num in lst) {\n
    \           if (num > lastVal) return false;\n            lastVal = num;\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4249114a73a04e86b4cb4f6a66bdf58e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4249114a73a04e86b4cb4f6a66bdf58e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977163
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        var dict = new Dictionary<long,
    int>();\n        foreach (var x in lst)\n            dict.TryGetValue(x, out var
    result);\n        return !dict.ContainsKey(lst.Last());\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <63cd2894e13942179c98f70d4a9933c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <63cd2894e13942179c98f70d4a9933c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977163
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        return lst.Count <= 1 || (lst.Count > 1 && lst.Distinct().Count()
    > 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a998999e8a14ee9bdec5c22e4ac7cd9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a998999e8a14ee9bdec5c22e4ac7cd9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977163
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        if (lst.Count
    == 2)\n            return lst[0] == lst[1];\n        var seen = new HashSet<long>();\n
    \       var i = 1;\n        var j = 0;\n        while (i < lst.Count && j < lst.Count)
    {\n            if (lst[i] == lst[j]) {\n                i++;\n                j++;\n
    \           }\n            else if (seen.Contains(lst[i])) {\n                j++;\n
    \           }\n            else if (seen.Contains(lst[j])) {\n                i++;\n
    \           }\n            else {\n                seen.Add(lst[i]);\n                i++;\n
    \               j++;\n            }\n        }\n        if (i == lst.Count)\n
    \           return true;\n        if (j == lst.Count)\n            return false;\n
    \       if (i < j)\n            return IsSorted(lst);\n        return IsSorted(lst.Skip(j).Take(i
    - j + 1).ToList());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8f2fabc78ab942498453231924c576bf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8f2fabc78ab942498453231924c576bf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977163
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        int[] lstAsIntArr = lst.ToArray();\n        // Count number of
    identical numbers\n        int count = lstAsIntArr.Distinct().Count();\n        if
    (count > 1) {\n            return false;\n        }\n\n        // Sort integers\n
    \       Array.Sort(lstAsIntArr);\n        bool res = true;\n        for (int i
    = 0; i < lstAsIntArr.Length; i++) {\n            if (lstAsIntArr[i] != (i + 1))
    {\n                res = false;\n            }\n        }\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp47a5pz6f.cs(30,29): error CS0029: Cannot implicitly convert type ''long[]''
    to ''int[]''

    '
  timestamp: 1659977163
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst==null || lst.Count < 2)\n            return true;\n        long
    prevValue = lst.First();\n        bool isSortedAscending = true;\n        for
    (int i = 1; i < lst.Count; i++) {\n            long thisValue = lst[i];\n            if
    (thisValue < prevValue) {\n                isSortedAscending = false;\n                break;\n
    \           }\n            prevValue = thisValue;\n        }\n        return isSortedAscending;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <38267256bbb846b8a3b6018cd995f41d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <38267256bbb846b8a3b6018cd995f41d>:0
    \n"
  stdout: ''
  timestamp: 1659977163
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var seen = new HashSet<long>();\n        long last = lst[0];\n
    \       bool found = false;\n        foreach (var val in lst) {\n            if
    (!seen.Add(val)) {\n                return false;\n            }\n            if
    (val > last) {\n                return false;\n            }\n            last
    = val;\n            found = true;\n        }\n        return found;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <316beaddfea147b29041c48d3b8d84f7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <316beaddfea147b29041c48d3b8d84f7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977163
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        int last = lst.Count - 1;\n        long largest = lst[last];\n
    \       for (int i = 0; i < last; i++) {\n            if (lst[i] < largest &&
    lst[i + 1] == lst[i]) continue;\n            return false;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9ece070e834a4099813c51a3453739b2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9ece070e834a4099813c51a3453739b2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977163
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        // Sort the list\n        Array.Sort(lst);\n        // Compare
    each number to the next\n        for (int i = 1; i < lst.Count; i++) {\n            if
    (lst[i - 1] >= lst[i]) return false;\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl3mj63_s.cs(31,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    '
  timestamp: 1659977163
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count() != (from n in lst group n by n into g select g.Count()).Max())
    {\n            return false;\n        }\n\n        return lst.OrderBy(i => i).Take(2).SequenceEqual(lst.Take(2).OrderBy(i
    => i));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5851fed6e694a0da781fa725b978cc5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5851fed6e694a0da781fa725b978cc5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977163
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count <= 1) return true;\n        long firstLst = lst[0],
    secondLst = lst[1];\n        bool isSorted = true;\n        for (int i = 2; i
    < lst.Count; i++) {\n            long currLst = lst[i];\n            if (currLst
    > firstLst) {\n                isSorted = false;\n            } else if (currLst
    < firstLst && currLst != secondLst) {\n                isSorted = false;\n            }\n
    \           firstLst = secondLst;\n            secondLst = currLst;\n        }\n
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <035e8b07ceb945f1a9c17d1a9215b28f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <035e8b07ceb945f1a9c17d1a9215b28f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977163
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var values = lst.ToArray();\n        Array.Sort(values);\n        var
    distinctValues = new HashSet<long>(values);\n        return values.SequenceEqual(distinctValues.ToArray());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <29e164afbb0343618abff0e9050df24f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <29e164afbb0343618abff0e9050df24f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977163
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        HashSet<long> set = new HashSet<long>(lst);\n        if (set.Count()
    != lst.Count) {\n            return false;\n        }\n        bool inOrder =
    true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i -
    1] > lst[i]) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d057ccaf93ed4470b0655554d489b7a0>:0
    \n"
  stdout: ''
  timestamp: 1659977163
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) { return true; }\n        if (lst.Count % 2
    != 0) { return false; }\n        var sorted = new List<long>();\n        for (int
    i = 0; i < lst.Count - 1; i++) {\n            var a = lst[i];\n            var
    b = lst[i + 1];\n            if (a > b) { sorted.Add(a); } else if (a < b) { sorted.Add(b);
    }\n        }\n        return sorted.SequenceEqual(lst);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1bff504c2cf14d9e9de45c0b8b3ee89a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1bff504c2cf14d9e9de45c0b8b3ee89a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977163
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        Dictionary<long, long> d = new Dictionary<long, long>();\n        foreach(long
    x in lst) {\n            long y = d[x];\n            if(y!=0) {\n                if(d[x]>x)
    {\n                    return false;\n                }\n            } else {\n
    \               d[x] = x;\n            }\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.Collections.Generic.KeyNotFoundException:
    The given key '5' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item
    (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x0001a] in <dc0f1ab3110e422bb2032b0e19db549b>:0
    \n  at Problem.Main (System.String[] args) [0x00011] in <dc0f1ab3110e422bb2032b0e19db549b>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Collections.Generic.KeyNotFoundException:
    The given key '5' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item
    (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x0001a] in <dc0f1ab3110e422bb2032b0e19db549b>:0
    \n  at Problem.Main (System.String[] args) [0x00011] in <dc0f1ab3110e422bb2032b0e19db549b>:0
    \n"
  stdout: ''
  timestamp: 1659977163
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0) return true;\n        int j = 0;\n        for
    (int i = 1; i < lst.Count; i++) {\n            if (lst[j] < lst[i]) return false;\n
    \           j++;\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <254ed2f20f7b4727a4102f5555fdf150>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <254ed2f20f7b4727a4102f5555fdf150>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977163
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long largest = lst[0];\n
    \       for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] != largest)
    return false;\n            largest = lst[i];\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d6d117432fa146f1baa83e093536b9e9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d6d117432fa146f1baa83e093536b9e9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977163
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count <= 1) return true;\n        HashSet<long> hs = new
    HashSet<long>();\n        foreach (var item in lst) {\n            if (hs.Contains(item))
    return false;\n            hs.Add(item);\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a2f4250b4a144d88a35a55520a770993>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a2f4250b4a144d88a35a55520a770993>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977163
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count <= 1) {\n            return true;\n        }\n        var
    seen = new HashSet<long>();\n        foreach (var item in lst) {\n            if
    (seen.Add(item)) {\n                seen.Remove(item);\n            } else {\n
    \               return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e40864625cbc4e6e8f42c929a0307ff9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e40864625cbc4e6e8f42c929a0307ff9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977163
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        int max = lst.Max();\n        long num2 = max;\n        long num1
    = 1;\n        if (lst.Count > 1) {\n            for (int i = 0; i < lst.Count;
    i++) {\n                num2 = num1;\n                if (lst[i] < num1) {\n                    num2
    = num1;\n                }\n                num1 = num2;\n            }\n        }\n
    \       return lst.SequenceEqual(num1, num2);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptfh5o5iq.cs(30,19): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmptfh5o5iq.cs(42,34): error CS1503: Argument 2: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmptfh5o5iq.cs(42,40): error CS1503: Argument 3: cannot convert from ''long''
    to ''System.Collections.Generic.IEqualityComparer<long>''

    '
  timestamp: 1659977163
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var seen = new HashSet<long>();\n        for (int i = 0; i < lst.Count;
    ++i) {\n            if (seen.Contains(lst[i]))\n                return false;\n
    \           seen.Add(lst[i]);\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <de9f6b7831984f7cae08fa6558fbeb85>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <de9f6b7831984f7cae08fa6558fbeb85>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977164
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long previousNumber = 0;\n        long currentNumber;\n        if
    (lst.Count == 0) {\n            return true;\n        }\n        foreach (long
    number in lst) {\n            currentNumber = number;\n            if (currentNumber
    != previousNumber) {\n                return false;\n            }\n            previousNumber
    = currentNumber;\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dbde0082aa554445a30ddb96c76ced73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dbde0082aa554445a30ddb96c76ced73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977164
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var last = lst[0];\n        for (int i = 1; i < lst.Count; ++i)
    {\n            if (lst[i] < last) {\n                return false;\n            }\n
    \           last = lst[i];\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <79c6745dce4f4c448362e5d7383b5361>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <79c6745dce4f4c448362e5d7383b5361>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <79c6745dce4f4c448362e5d7383b5361>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <79c6745dce4f4c448362e5d7383b5361>:0
    \n"
  stdout: ''
  timestamp: 1659977164
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        int n = lst.Count;\n        if (n > 1) {\n            long lastValue
    = lst[n-1];\n            bool isSorted;\n            bool isInOrder;\n            int
    pivotIndex = n / 2;\n            int pivotValue = 0;\n            while (true)
    {\n                if (pivotIndex == 0)\n                    isInOrder = lst[pivotIndex]
    > lastValue;\n                else\n                    isInOrder = lst[pivotIndex]
    <= lastValue;\n                if (isInOrder)\n                    break;\n                isSorted
    = true;\n                for (int i = pivotIndex - 1; i > 0; i--) {\n                    if
    (lst[i] < lst[pivotIndex]) {\n                        isSorted = false;\n                        break;\n
    \                   }\n                }\n                if (!isSorted)\n                    break;\n
    \               lastValue = lst[pivotIndex];\n                pivotIndex++;\n
    \           }\n            return isInOrder;\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <43a1fadfc2a2460287b46ada34850d0c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <43a1fadfc2a2460287b46ada34850d0c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977164
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) {\n            return true;\n        }\n        long[]
    arr = new long[arr.Count];\n        int i = 0;\n        int j = 0;\n        bool
    dup = false;\n        bool ascending = false;\n        while (i < lst.Count &&
    j < arr.Count) {\n            if (lst[i] < lst[j]) {\n                ascending
    = true;\n            }\n            arr[j] = lst[i];\n            if (i == lst.Count
    - 1) {\n                ascending = false;\n            }\n            i++;\n
    \           j++;\n            if (j == arr.Count - 1) {\n                if (ascending)
    {\n                    if (i == lst.Count - 1) {\n                        dup
    = true;\n                        break;\n                    }\n                    dup
    = false;\n                    j = 0;\n                }\n                else
    {\n                    dup = true;\n                    break;\n                }\n
    \           }\n        }\n        return !dup;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphy8hrt30.cs(33,35): error CS0428: Cannot convert method group ''Count''
    to non-delegate type ''int''. Did you intend to invoke the method?

    /tmp/tmphy8hrt30.cs(38,33): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''int'' and ''method group''

    /tmp/tmphy8hrt30.cs(48,22): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''method group'' and ''int''

    /tmp/tmphy8hrt30.cs(33,31): error CS0165: Use of unassigned local variable ''arr''

    '
  timestamp: 1659977164
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        int counter = 0;\n        bool bFlag = false;\n        int n =
    lst.Count;\n        int k = lst.Count;\n        for (int i = 0; i < n; i++)\n
    \           counter++;\n        for (int i = 0; i < k; i++)\n            counter--;\n
    \       if (counter < 0)\n            return false;\n        else\n            return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4f2055c0c020492288d4b34e0aef15af>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4f2055c0c020492288d4b34e0aef15af>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977164
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long prev
    = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]
    < prev)\n                return false;\n            prev = lst[i];\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6c344cc65f4d49d187e3411e57e1ef54>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6c344cc65f4d49d187e3411e57e1ef54>:0
    \n"
  stdout: ''
  timestamp: 1659977164
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) {\n            return true;\n        }\n        if
    (lst.Count == 2) {\n            return lst.Last() > lst.First();\n        }\n
    \       int mid = lst.Count / 2;\n        long left = mid ? lst[mid-1] : 0;\n
    \       long right = mid ? lst[mid + 1] : 0;\n        if (left > right) {\n            return
    true;\n        }\n        int compareResult = lst[0] > right ? -1 : 1;\n        foreach
    (var n in lst.Skip(1).Take(lst.Count - 1)) {\n            long next = n > left
    ? left : right;\n            compareResult = (compareResult * 2) - (next > n ?
    1 : 0);\n            left = right;\n            right = next;\n        }\n        return
    compareResult == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphhr3i4mw.cs(37,21): error CS0029: Cannot implicitly convert type ''int''
    to ''bool''

    /tmp/tmphhr3i4mw.cs(38,22): error CS0029: Cannot implicitly convert type ''int''
    to ''bool''

    '
  timestamp: 1659977164
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        Dictionary<long, int> counts = new Dictionary<long, int>();\n
    \       foreach (long n in lst)\n        {\n            if (counts.ContainsKey(n))\n
    \           {\n                counts[n] += 1;\n            }\n            else\n
    \           {\n                counts.Add(n, 1);\n            }\n        }\n        long
    current = lst[0];\n        bool ret = false;\n        foreach (long n in counts)\n
    \       {\n            if (counts[n] > 1)\n            {\n                ret
    = false;\n                break;\n            }\n            else if (counts[n]
    == 1)\n            {\n                if (current < n)\n                {\n                    ret
    = false;\n                    break;\n                }\n                else\n
    \               {\n                    current = n;\n                }\n            }\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdkxl1o_q.cs(44,9): error CS0030: Cannot convert type ''System.Collections.Generic.KeyValuePair<long,
    int>'' to ''long''

    '
  timestamp: 1659977164
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long lastValue = lst[0];\n        bool isAscending = true;\n        bool
    containsDuplicate = false;\n        foreach (var v in lst) {\n            if (lastValue
    == v) containsDuplicate = true;\n            lastValue = v;\n            if (isAscending
    == false) return false;\n        }\n        if (containsDuplicate) return false;\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <488cb5f9543c4cf2a5d94c778a4e7cd1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <488cb5f9543c4cf2a5d94c778a4e7cd1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977164
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var firstVal = lst[0];\n        var lastVal = lst[lst.Count -
    1];\n        if (firstVal > lastVal) return false;\n        var counter = 1;\n
    \       for (var i = 1; i < lst.Count; i++) {\n            var val = lst[i];\n
    \           if (val == firstVal) {\n                counter++;\n                if
    (counter == lst.Count - 1) return true;\n            }\n            if (val ==
    lastVal) {\n                counter--;\n                if (counter < 0) return
    false;\n            }\n        }\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6dd9c4a2738440d6b955dcb35ddcb980>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6dd9c4a2738440d6b955dcb35ddcb980>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977164
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) { return true; }\n        var last = lst[0];\n
    \       foreach (var x in lst.Skip(1))\n            if (x > last) { return false;
    }\n        return true;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9cfa795ddd354b8bafa314958ad4e1aa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9cfa795ddd354b8bafa314958ad4e1aa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977164
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var seen = new HashSet<long>();\n        long num;\n        foreach
    (var item in lst) {\n            num = item;\n            if (seen.Add(num)) {\n
    \               continue;\n            }\n            // item is unique; check
    adjacent items\n            seen.Remove(num);\n            if (num < lst[seen.Count
    - 1]) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <65ebf11fca20414d8c853e5de3ada91c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <65ebf11fca20414d8c853e5de3ada91c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977164
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst==null || lst.Count==0) return false;\n        var seen
    = new HashSet<long>();\n        foreach (var item in lst) {\n            if (seen.Contains(item))
    return false;\n            seen.Add(item);\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a69b8a305aa1400bb80292a3ad57651e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a69b8a305aa1400bb80292a3ad57651e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977164
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) { return true; }\n        if (lst.Count <=
    1) { return false; }\n        long lastVal = lst[0];\n        bool isSorted =
    false;\n        int count = 0;\n        foreach (var v in lst) {\n            if
    (v < lastVal) {\n                count++;\n                if (count > 1) {\n
    \                   isSorted = false;\n                    break;\n                }\n
    \           }\n            lastVal = v;\n        }\n        return isSorted;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8ec4c71c430c4ca286ae0c5c52cb7664>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8ec4c71c430c4ca286ae0c5c52cb7664>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977164
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count <= 0) return true;\n        long lastValue = lst[0];\n
    \       bool isSorted = false;\n        for (long i = 1, len = lst.Count; i <
    len; i++) {\n            if (lst[i] < lastValue) isSorted = false;\n            else
    if (lst[i] > lastValue) isSorted = false;\n            else {\n                lastValue
    = lst[i];\n                isSorted = true;\n            }\n        }\n        return
    isSorted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_a_1phak.cs(34,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp_a_1phak.cs(35,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp_a_1phak.cs(37,33): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659977164
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count <= 1) return true;\n        if (lst.Count == 2)
    return lst[0] < lst[1];\n        double maxVal = lst[0];\n        var duplicates
    = new Dictionary<long, bool>();\n        foreach (var num in lst)\n        {\n
    \           if (duplicates.ContainsKey(num))\n            {\n                if
    (duplicates[num] != num)\n                {\n                    return false;\n
    \               }\n            }\n            else\n            {\n                duplicates.Add(num,
    num);\n                if (num > maxVal) maxVal = num;\n            }\n        }\n
    \       return maxVal == lst[lst.Count - 1];\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk2_mtbtw.cs(38,21): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''bool'' and ''long''

    /tmp/tmpk2_mtbtw.cs(45,37): error CS1503: Argument 2: cannot convert from ''long''
    to ''bool''

    '
  timestamp: 1659977164
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 1)\n            return false;\n        bool flag
    = false;\n        int index = 0;\n        int counter = 0;\n        double lastValue
    = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (index ==
    i) {\n                flag = true;\n                continue;\n            }\n
    \           if (lst[i] == lastValue && lst[i] != lst[index])\n                return
    false;\n            if (lst[i] == lst[index]) {\n                counter++;\n
    \               if (counter > 1)\n                    return false;\n            }\n
    \           else {\n                counter = 0;\n            }\n            lastValue
    = lst[i];\n            index++;\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <580d250286d3487c8d6c2bb4c6255c83>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <580d250286d3487c8d6c2bb4c6255c83>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977164
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 1)\n            return true;\n        var groups
    = lst.GroupBy(n => n);\n        if (groups.Count() > 1)\n            return false;\n
    \       return groups.All((group) => group.Key == lst.First());\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5bc4b81b4542432eb74aba5021e2936e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5bc4b81b4542432eb74aba5021e2936e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977164
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 1) return true;\n        if (lst.Count == 1) return
    lst[0] < lst[0];\n        bool result = true;\n        int n = lst.Count;\n        List<long>
    dup = new List<long>(new long[n]);\n        for (int i = 0; i < n; i++) {\n            long
    current = lst[i];\n            for (int j = i - 1; j >= 0; j--) {\n                if
    (current < lst[j]) {\n                    result = false;\n                    dup[i]
    = current;\n                    break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5336c7ed83b941049abe81e49bda2173>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5336c7ed83b941049abe81e49bda2173>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977164
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0) return true;\n\n        Dictionary<long, List<long>>
    dups = new Dictionary<long, List<long>>();\n        var hashset = new HashSet<long>(lst.ToArray());\n
    \       lst.ForEach(item =>\n        {\n            if (!hashset.Contains(item))\n
    \           {\n                hashset.Add(item);\n                dups.Add(item,
    new List<long>());\n            }\n            else\n            {\n                dups[item].Add(item);\n
    \           }\n        });\n\n        return lst.All(item => !dups[item].Contains(item));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.Collections.Generic.KeyNotFoundException:
    The given key '5' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item
    (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c__DisplayClass0_0.<IsSorted>b__0
    (System.Int64 item) [0x00038] in <e2b86c4f6ba6472bb4216e71b66e7384>:0 \n  at System.Collections.Generic.List`1[T].ForEach
    (System.Action`1[T] action) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.IsSorted (System.Collections.Generic.List`1[T] lst) [0x00034] in
    <e2b86c4f6ba6472bb4216e71b66e7384>:0 \n  at Problem.Main (System.String[] args)
    [0x00011] in <e2b86c4f6ba6472bb4216e71b66e7384>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.Collections.Generic.KeyNotFoundException: The given key '5' was not present
    in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item
    (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c__DisplayClass0_0.<IsSorted>b__0
    (System.Int64 item) [0x00038] in <e2b86c4f6ba6472bb4216e71b66e7384>:0 \n  at System.Collections.Generic.List`1[T].ForEach
    (System.Action`1[T] action) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.IsSorted (System.Collections.Generic.List`1[T] lst) [0x00034] in
    <e2b86c4f6ba6472bb4216e71b66e7384>:0 \n  at Problem.Main (System.String[] args)
    [0x00011] in <e2b86c4f6ba6472bb4216e71b66e7384>:0 \n"
  stdout: ''
  timestamp: 1659977164
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst==null || lst.Count==0)\n            return true;\n        int
    idx = lst.FindLastIndex(x => x==lst.Min());\n        if (idx==lst.Count-1)\n            return
    true;\n        bool prev = lst.Skip(idx-1).Take(2).All(n => n<lst.Min());\n        return
    prev || !lst.Take(idx).Distinct().Any();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c997304358464cccb225400dae059457>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c997304358464cccb225400dae059457>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977164
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long previous = lst[0], current = lst[0];\n        bool isSorted
    = true;\n        foreach (var number in lst.Skip(1)) {\n            if (number
    > current) {\n                isSorted = false;\n                break;\n            }\n
    \           previous = current;\n            current = number;\n        }\n        return
    isSorted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cb76be8514e64cd196943313896b400d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cb76be8514e64cd196943313896b400d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977164
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var hash = lst.ToDictionary(x => x, x => 1);\n        foreach
    (var x in hash)\n            if (hash[x.Key] > 1) return false;\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <69b7d71ba731442f991aaca429b73801>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <69b7d71ba731442f991aaca429b73801>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var dups = lst.GroupBy(i => i).Where(i => i.Skip(1).Any()).ToList();\n
    \       return dups.All(i => i.Count() == 1) || lst.OrderBy(i => i).Take(lst.Count
    - dups.Count).SequenceEqual(lst);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <29ef6b150bf548ac9fcfb06d25711713>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <29ef6b150bf548ac9fcfb06d25711713>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var lstHash = lst.ToHashSet();\n        return lst.SequenceEqual(lstHash);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1479b0cae7c4c5e9a90228b3879a593>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1479b0cae7c4c5e9a90228b3879a593>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var sorted = lst.Distinct().OrderBy(x => x).ToList();\n        return
    lst.All(x => sorted.Contains(x));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d7b82552f0b24cc6a5a66c5f7c6abe96>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d7b82552f0b24cc6a5a66c5f7c6abe96>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) {\n            return true;\n        }\n\n
    \       var groups = lst.GroupBy(x => x);\n        long minValue = groups.Min(x
    => x.Key);\n        long maxValue = groups.Max(x => x.Key);\n\n        Debug.Assert(minValue
    < maxValue);\n        Debug.Assert(maxValue == groups.Max(x => x.Count()) || maxValue
    == groups.Max(x => x.Count()) + 1);\n\n        if (maxValue == minValue + 1) {\n
    \           return false;\n        }\n\n        bool isSorted = true;\n        foreach
    (var group in groups) {\n            isSorted &= minValue <= group.Key;\n            isSorted
    &= group.Key <= maxValue;\n        }\n\n        return isSorted;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.IsSorted (System.Collections.Generic.List`1[T] lst) [0x00000] in
    <8b8d053d6c574e62ae55a17fad3470b1>:0 \n  at Problem.Main (System.String[] args)
    [0x00000] in <8b8d053d6c574e62ae55a17fad3470b1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.IsSorted (System.Collections.Generic.List`1[T] lst) [0x00000] in
    <8b8d053d6c574e62ae55a17fad3470b1>:0 \n  at Problem.Main (System.String[] args)
    [0x00000] in <8b8d053d6c574e62ae55a17fad3470b1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message, System.String detailMessage) [0"
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        HashSet<long> set = new HashSet<long>();\n        foreach(long
    n in lst)\n            if (!set.Add(n))\n                return false;\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <73666f647007460da634331f2dc344dd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <73666f647007460da634331f2dc344dd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var seen = new HashSet<long>();\n        foreach (var num in lst)
    {\n            if (seen.Add(num)) {\n                return false;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1bcf2108b1554c9cb8b59cb31f783314>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1bcf2108b1554c9cb8b59cb31f783314>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count() > 1)\n            return false;\n        if (lst.Count()
    == 0)\n            return true;\n        long lastIndex = lst.LastOrDefault();\n
    \       if (lastIndex < 0)\n            return true;\n        long lastDuplicate
    = lst.LastOrDefault(l => l == lastIndex);\n        return lastDuplicate == lastIndex;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <981239d4dba44c2b80959ca87b125b0d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <981239d4dba44c2b80959ca87b125b0d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var set = new HashSet<long>(lst);\n        return set.Count >
    0 && set.IsSubsetOf(lst);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3a7468b26544a59a203b2ed950073ef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3a7468b26544a59a203b2ed950073ef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        bool isSorted = false;\n        if (lst.Count <= 1) return isSorted;\n
    \       long lastNum = lst[0];\n        bool numInFirstPosition = true;\n        for
    (int i = 1; i < lst.Count; i++) {\n            long currentNum = lst[i];\n            if
    (currentNum == lastNum) {\n                numInFirstPosition = false;\n            }\n
    \           if (numInFirstPosition) {\n                if (currentNum < lastNum)
    {\n                    isSorted = false;\n                    break;\n                }\n
    \           }\n            else {\n                if (currentNum > lastNum) {\n
    \                   isSorted = false;\n                    break;\n                }\n
    \           }\n            lastNum = currentNum;\n        }\n        return isSorted;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <709fd315d85140f3b1bc266aeb5e7a1b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <709fd315d85140f3b1bc266aeb5e7a1b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        HashSet<long> hashSet = new HashSet<long>(lst);\n        bool
    notSorted = hashSet.Count == lst.Count;\n        if (notSorted) {\n            Debug.Assert(lst.Count
    > 0);\n        }\n        return notSorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <782fed0b96d14ecea02a13eabd0545be>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <782fed0b96d14ecea02a13eabd0545be>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977165
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 1)\n            return true;\n        var last
    = lst.Last();\n        int startIndex = 0;\n        int endIndex = 1;\n        while
    (startIndex < lst.Count - endIndex) {\n            long first = lst[startIndex];\n
    \           long second = lst[endIndex];\n            if (first < second)\n                return
    false;\n            if (second == last)\n                break;\n            startIndex++;\n
    \           endIndex++;\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <04cf40ce73754fbbb5b0aa0e563e4717>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <04cf40ce73754fbbb5b0aa0e563e4717>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977165
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long lastNum = lst.LastOrDefault();\n        if(lst.Count == 0
    || lastNum < 0) return true;\n        \n        bool startCheck = false;\n        bool
    endCheck = false;\n        int firstIdx = -1;\n        int lastIdx = -1;\n        \n
    \       for(int i = 0; i < lst.Count; i++) {\n            if(lst[i] == lastNum
    && lastIdx == i) {\n                if(i != lst.Count - 1) {\n                    endCheck
    = true;\n                    lastIdx = i + 1;\n                }\n            }
    else {\n                if(startCheck == false) {\n                    startCheck
    = true;\n                    firstIdx = i;\n                }\n            }\n
    \       }\n        \n        if(startCheck == false) return true;\n        if(endCheck
    == false) return true;\n        \n        if(firstIdx >= 0 && lastIdx >= 0) {\n
    \           int mid = firstIdx;\n            while(first < lastIdx) {\n                if(lst[mid]
    < lst[mid+1]) mid++;\n                else break;\n            }\n            if(mid
    == firstIdx || mid == lastIdx) return true;\n        }\n        \n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfitbf_f2.cs(57,19): error CS0103: The name ''first'' does not exist in
    the current context

    '
  timestamp: 1659977165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        // sort and check the length\n        if (lst.Count > 1) {\n            long[]
    sorted = lst.OrderBy(i => i).ToArray();\n            int len = sorted.Length;\n
    \           long last = sorted[len - 1];\n            for (int i = 0; i < len
    - 1; i++) {\n                if (sorted[i] != last)\n                    return
    false;\n            }\n            return true;\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <557d7952e3cb43f5a5f207db1abeeb24>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <557d7952e3cb43f5a5f207db1abeeb24>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var seen = new Dictionary<long, long>(lst.Count);\n        foreach
    (var x in lst) {\n            if (seen.ContainsKey(x)) {\n                seen[x]
    = seen[x] + 1;\n            } else {\n                seen.Add(x, 1);\n            }\n
    \       }\n        var sortedList = lst.OrderBy(x => x).ToList();\n        foreach
    (var x in seen) {\n            if (x.Value > sortedList.Count) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91695241d66d45479e6ef8113c485455>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91695241d66d45479e6ef8113c485455>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var counts = new Dictionary<long, int>();\n        foreach (var
    item in lst) {\n            if (counts.ContainsKey(item))\n                counts[item]++;\n
    \           else\n                counts.Add(item, 1);\n        }\n\n        foreach
    (var count in counts) {\n            if (count.Value < 2)\n                return
    false;\n        }\n\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <74264e2a362f4c7fbf58809ec183cd55>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <74264e2a362f4c7fbf58809ec183cd55>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977165
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        // HashSet is useful to check if all numbers are unique\n        var
    set = new HashSet<long>(lst);\n        if (set.Count != lst.Count)\n            return
    false;\n\n        // To find the first duplicate\n        var first = lst.First();\n
    \       // To check if the first number is greater than the rest of the list\n
    \       for (var i = 1; i < lst.Count; i++) {\n            if (lst[i] > first
    && lst[i] != lst[i - 1])\n                return false;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aeb620f14a564449accf6796f562c33b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aeb620f14a564449accf6796f562c33b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977165
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var dict = lst.ToDictionary(x => x);\n        foreach (var n in
    dict) {\n            int i = n.Key;\n            while (i > 1 && n != dict[i -
    1]) {\n                dict[i - 1] = dict[i - 1] - 1;\n                i -= 1;\n
    \           }\n        }\n        return dict.Count == 1;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpslalmq9m.cs(32,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpslalmq9m.cs(33,29): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''KeyValuePair<long, long>'' and ''long''

    '
  timestamp: 1659977165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        return lst.Distinct().Count() == lst.Count\n               &&
    !lst.Distinct().Any(x => x == lst.Last());\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61c8f18e223743f8ab9d0087e8dd4b87>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61c8f18e223743f8ab9d0087e8dd4b87>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977165
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        bool result = true;\n        int i = 0;\n        int j = 0;\n
    \       long prev = lst[0];\n        foreach (long num in lst) {\n            if
    (i == 0) {\n                if (prev <= num) {\n                    result = false;\n
    \                   break;\n                }\n            }\n            if (num
    == prev) {\n                result = false;\n                break;\n            }\n
    \           prev = num;\n            i++;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <33907a8484cd4129bb135f45c9f75237>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <33907a8484cd4129bb135f45c9f75237>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977165
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n\n        long last
    = lst[0];\n        long index = 1;\n        while (index < lst.Count) {\n            if
    (lst[index - 1] == last)\n                return false;\n            last = lst[index++];\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd1gb2ao1.cs(36,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpd1gb2ao1.cs(38,24): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659977165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        bool hasDuplicate = false;\n        var lst2 = lst.ToList();\n
    \       for (int i = 1; i < lst2.Count; i++) {\n            if (lst2[i] > lst2[i
    - 1]) {\n                return false;\n            }\n        }\n        hasDuplicate
    = lst.Count == lst2.Count;\n        return hasDuplicate;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <96017501c3204a12b3f947266c73715b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <96017501c3204a12b3f947266c73715b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977165
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0)\n            return true;\n\n        Dictionary<long,
    bool> h = new Dictionary<long, bool>();\n        int lastItem = lst[lst.Count
    - 1];\n\n        for (int i = 0; i < lst.Count; i++)\n            if (h[lst.ElementAt(i)])\n
    \               return false;\n\n        h.Add(lastItem, true);\n\n        for
    (int i = 1; i < lst.Count; i++)\n            if (h[lst.ElementAt(i)]) {\n                h[lst[i]]
    = false;\n                return false;\n            }\n\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6p1phmny.cs(34,24): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) {\n            return true;\n        }\n        long
    first = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if
    (lst[i] < first) {\n                return false;\n            }\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <30ea5a77d92242e48ce380915907c7f3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <30ea5a77d92242e48ce380915907c7f3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0)\n            return true;\n        var lastValue
    = lst.Last();\n        var duplicates = lst.GroupBy(x => x).Where(g => g.Count()
    > 1).ToList();\n        if (duplicates.Any())\n            return false;\n        return
    lst.All(x => x<=lastValue);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <977822a0030d42ba80b16201d3e0b5fa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <977822a0030d42ba80b16201d3e0b5fa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count > 1) return false;\n        if (lst.Count == 0)
    return true;\n        var last = lst[0];\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < last) return false;\n            last = lst[i];\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5ab2ccceca3648d3ad6d8c26f4512043>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5ab2ccceca3648d3ad6d8c26f4512043>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977166
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var count = new int[3];\n        var numbers = new int[3];\n        var
    currentNumber;\n        long lastNumber;\n\n        // count and numbers array
    are initialized with 3 empty values\n        for (var countIndex = 0; countIndex
    < count.Length; countIndex++)\n            count[countIndex] = 0;\n        for
    (var numberIndex = 0; numberIndex < numbers.Length; numberIndex++)\n            numbers[numberIndex]
    = 0;\n\n        // count and numbers array values are incremented in each iteration\n
    \       for (var index = 0; index < lst.Count; index++) {\n            currentNumber
    = lst[index];\n            numbers[currentNumber]++;\n            if (currentNumber
    == lastNumber)\n                count[currentNumber]++;\n            else {\n
    \               count[currentNumber] = 1;\n                lastNumber = currentNumber;\n
    \           }\n        }\n\n        // At this point count[0] is the number of
    different numbers in lst\n        // count[1] is the number of same numbers in
    lst\n        // count[2] is the number of unique numbers in lst\n\n        //
    Return false if one of the counts is equal to or greater than\n        // the
    number of items in lst\n        return count[0] < lst.Count || count[1] < lst.Count
    || count[2] < lst.Count;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfup81pln.cs(32,13): error CS0818: Implicitly-typed variables must be initialized

    /tmp/tmpfup81pln.cs(45,34): error CS0165: Use of unassigned local variable ''lastNumber''

    '
  timestamp: 1659977165
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return false;\n        var seen = new HashSet<long>(lst);\n
    \       var last = lst[0];\n        var lesser = lst.Skip(1).ToList();\n        foreach
    (var n in lessser)\n            if (seen.Add(n)) return true;\n        if (lst.Count
    == 1) return false;\n        foreach (var n in lst) {\n            if (seen.Contains(n))
    return false;\n            seen.Add(n);\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpolnrwney.cs(34,27): error CS0103: The name ''lessser'' does not exist
    in the current context

    '
  timestamp: 1659977165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 1) {\n            return true;\n        }\n        if
    (lst.Count > 1) {\n            for (int i = 1; i < lst.Count; i++) {\n                if
    (lst[i] < lst[i - 1]) {\n                    return false;\n                }\n
    \           }\n            return true;\n        }\n        return false;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8be5127a2b8b44fb9cc6379c896bb465>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8be5127a2b8b44fb9cc6379c896bb465>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var result = true;\n\n        foreach (var number in lst) {\n
    \           if (number == number)\n                continue;\n\n            var
    last = lst.LastOrDefault(x => x == number);\n            if (last == null)\n                return
    false;\n\n            if (Math.Abs(number - last) > 1) // check if numbers are
    equal\n                return false;\n        }\n\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5bb24141ca14494dad48162ec7fba0e2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5bb24141ca14494dad48162ec7fba0e2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        Dictionary<long, int> count = new Dictionary<long, int>();\n        foreach(long
    l in lst) {\n            if (!count.ContainsKey(l)) {\n                count[l]
    = 1;\n            } else {\n                count[l] += 1;\n            }\n        }\n
    \       List<long> newList = new List<long>();\n        foreach(long l in lst)
    {\n            if (count.ContainsKey(l) && count[l] == 1) {\n                newList.Add(l);\n
    \               count[l] -= 1;\n            }\n        }\n        return newList.Count
    == lst.Count && newList.All(i => i == lst[0]);\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77023b2d918e42f987c28247aac3eaed>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77023b2d918e42f987c28247aac3eaed>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if(lst.Count < 2)\n            return true;\n\n        long lastDuplicate
    = 0;\n        bool isSorted = false;\n\n        for(int i = 0; i < lst.Count;
    i++) {\n            long current = lst[i];\n            if(i != 0 && current ==
    lastDuplicate)\n                continue;\n\n            isSorted = true;\n            lastDuplicate
    = current;\n        }\n\n        return isSorted;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <962d294ca490414c8b0e4a872557b0a3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <962d294ca490414c8b0e4a872557b0a3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var hashSet = new HashSet<long>();\n        return lst.Where(x
    => !hashSet.Add(x)).ToList().Count == lst.Count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <363ae0d17d79438c97820814858c8a23>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <363ae0d17d79438c97820814858c8a23>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count <= 1)\n            return true;\n        long first
    = lst[0];\n        long last = lst[lst.Count - 1];\n        bool ascending = true;\n
    \       for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < first)\n
    \               ascending = false;\n            if (lst[i] > last)\n                ascending
    = false;\n        }\n        return ascending;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7149b84a9584410e978327f62a73c560>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7149b84a9584410e978327f62a73c560>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977166
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var hash = new Dictionary<long, long>();\n        var lastKey
    = 0;\n        var count = 0;\n        var infinity = BigInteger.PositiveInfinity;\n\n
    \       foreach (var value in lst) {\n            var key = value;\n\n            //
    Check hash for duplicates\n            if (hash.TryGetValue(key, out var hashValue))
    {\n                if (hashValue != infinity) {\n                    return false;\n
    \               }\n            }\n\n            // Hash key\n            hash[key]
    = ++count;\n            lastKey = key;\n        }\n\n        // If count is even
    and last key > first key, the list is not sorted\n        return count % 2 ==
    0 && lastKey <= lst[0];\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9oq2ttny.cs(33,35): error CS0117: ''BigInteger'' does not contain a definition
    for ''PositiveInfinity''

    /tmp/tmp9oq2ttny.cs(47,23): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977166
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        int flag = 0;\n        long max = lst.Max();\n        long min
    = lst.Min();\n        foreach(long item in lst) {\n            if (item == max)
    {\n                flag = 1;\n                break;\n            }\n            if
    (item == min) {\n                flag = 2;\n                break;\n            }\n
    \       }\n        if (flag != 0) return false;\n        else return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5a2163e0340b40d792976bbc030c2ce4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5a2163e0340b40d792976bbc030c2ce4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        int i = 0;\n        int j = 0;\n        if (lst.Count < 2) {\n
    \           return true;\n        }\n        if (lst[0] == lst[1]) {\n            return
    true;\n        }\n        for (i = 1; i < lst.Count; i++) {\n            if (lst[i]
    < lst[i - 1]) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b9e3a8bceccf43eea7e18466e2658c1f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b9e3a8bceccf43eea7e18466e2658c1f>:0
    \n"
  stdout: ''
  timestamp: 1659977166
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long previous = lst.First();\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i - 1] == lst[i]) {\n                if (previous
    == lst[i])\n                    return false;\n                else\n                    return
    true;\n            }\n            previous = lst[i];\n        }\n        if (previous
    == lst[0])\n            return false;\n        else\n            return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <160a140833da410388633f68570704b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <160a140833da410388633f68570704b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) {\n            return true;\n        }\n        if
    (lst.Count > 2) {\n            return false;\n        }\n        List<long> dupes
    = new List<long>(lst);\n        dupes.RemoveAt(0);\n        if (dupes.Count !=
    lst.Count) {\n            return false;\n        }\n        for (int i = 1; i
    < lst.Count; ++i) {\n            if (dupes.ElementAt(i) > lst.ElementAt(i)) {\n
    \               return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7779444ef56843ff9d0baf6b9fd769c3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7779444ef56843ff9d0baf6b9fd769c3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977166
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count > 1) {\n            var hash = lst.Distinct().OrderBy(x
    => x).ToArray().GetHashCode();\n            var hashSet = new HashSet<long>(hash);\n
    \           if (lst.Any(x => hashSet.Contains(x)))\n                return false;\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a33d72600ad403fafdda10a0555e520>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: capacity\n  at System.Collections.Generic.HashSet`1[T]..ctor
    (System.Int32 capacity, System.Collections.Generic.IEqualityComparer`1[T] comparer)
    [0x0000b] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Collections.Generic.HashSet`1[T]..ctor
    (System.Int32 capacity) [0x00007] in <e540098dd111461e919c5863f6975c29>:0 \n  at
    Problem.IsSorted (System.Collections.Generic.List`1[T] lst) [0x0004a] in <3a33d72600ad403fafdda10a0555e520>:0
    \n  at Problem.Main (System.String[] args) [0x000b9] in <3a33d72600ad403fafdda10a0555e520>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified
    argument was out of the range of valid values.\nParameter name: capacity\n  at
    System.Collections.Generic.HashSet`1[T]..ctor (System.Int32 capacity, System.Collections.Generic.IEqualityComparer`1[T]
    comparer) [0x0000b] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Collections.Generic.HashSet`1[T]..ctor
    (System.Int32 capacity) [0x00007] in <e540098dd111461e919c5863f6975c29>:0 \n  at
    Problem.IsSorted (System.Collections.Generic.List`1[T] lst) [0x000"
  stdout: ''
  timestamp: 1659977166
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0)\n            return true;\n        HashSet<long>
    hashSet = new HashSet<long>(lst);\n        bool firstItem = true;\n        foreach
    (long item in lst) {\n            if (firstItem) {\n                firstItem
    = false;\n                continue;\n            }\n            bool retVal =
    false;\n            foreach (long item in hashSet) {\n                if (item
    < item) {\n                    retVal = true;\n                    break;\n                }\n
    \           }\n            if (retVal)\n                return false;\n            hashSet.Add(item);\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbq7asr8h.cs(40,27): error CS0136: A local or parameter named ''item''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpbq7asr8h.cs(41,21): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    '
  timestamp: 1659977166
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count <= 1)\n            return true;\n        var seen
    = new HashSet<long>();\n        foreach (var item in lst) {\n            if (seen.Add(item))
    {\n                return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ade73100e1af4eaebb22c049f6292b14>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ade73100e1af4eaebb22c049f6292b14>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0)\n            return true;\n        if (lst.Count
    <= 1)\n            return false;\n        var last = lst.First();\n        bool
    flag = true;\n        for (var i = 1; i < lst.Count; i++) {\n            if (lst[i]
    > last)\n                return false;\n            last = lst[i];\n        }\n
    \       return flag;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <939939ab0fe54df194bcebb5a3fc6f7a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <939939ab0fe54df194bcebb5a3fc6f7a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count > 1) {\n            long last = lst.Last();\n            int
    count = 0;\n            foreach (long num in lst) {\n                if (num >
    last) {\n                    if (count > 0) {\n                        return
    false;\n                    } else {\n                        last = num;\n                        count
    = 1;\n                    }\n                } else {\n                    count++;\n
    \               }\n            }\n            return true;\n        }\n        return
    lst.Count == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d15a5d4750aa4d978a7632696dcd43cb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d15a5d4750aa4d978a7632696dcd43cb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977166
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0) return true;\n        Dictionary<long, long>
    counts = new Dictionary<long, long>();\n        for (int i = 0; i < lst.Count;
    ++i) {\n            long curr = lst[i];\n            if (counts.ContainsKey(curr))
    counts[curr]++;\n            else counts[curr] = 1;\n        }\n        // All
    counts must be the same\n        if (counts.Values.All(x => x == counts.Keys.Single()))
    return true;\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <468ecf0b1681414b99a59f1dc5696fbe>:0
    \n\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    more than one element\n  at System.Linq.Enumerable.Single[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00070] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem+<>c__DisplayClass0_0.<IsSorted>b__0
    (System.Int64 x) [0x0000c] in <468ecf0b1681414b99a59f1dc5696fbe>:0 \n  at System.Linq.Enumerable.All[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source, System.Func`2[T,TResult]
    predicate) [0x0002c] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00099] in <468ecf0b1681414b99a59f1dc5696fbe>:0
    \n  at Problem.Main (System.String[] args) [0x00032] in <468ecf0b1681414b99a59f1dc5696fbe>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains more than one element\n  at System.Linq.Enumerable.Single[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00070] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem+<>c__DisplayClass0_0.<IsSorted>b__0
    (System.Int64 x) [0x0000c] in <468ecf0b1681414b99a59f1dc5696fbe>:0 \n  at System.Linq.Enumerable.All[TSource]
    (System.Collections.Generic.IEn"
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        Debug.Assert(lst.Count >= 1);\n        int hashset = lst.GroupBy(n
    => n).Where(g => g.Count() > 1).Count();\n        if (hashset > 0) {\n            return
    false;\n        }\n        HashSet<long> set = new HashSet<long>(lst);\n        return
    set.Count == lst.Count;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <81b9338901f64cc386c9ed8ed90833bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <81b9338901f64cc386c9ed8ed90833bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0) return true;\n        long prevNum = lst[0];\n
    \       foreach (long num in lst) {\n            if (prevNum >= num) {\n                return
    false;\n            }\n            prevNum = num;\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a11a627928ef42a4b09eeac04e7057dc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a11a627928ef42a4b09eeac04e7057dc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977166
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        bool isSorted = false;\n        long lastValue = lst[0];\n        foreach
    (var value in lst) {\n            if (value >= lastValue) {\n                isSorted
    = false;\n                break;\n            }\n            isSorted = true;\n
    \           lastValue = value;\n        }\n        return isSorted;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d5b128d4ece94e608864b9da81e76af1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d5b128d4ece94e608864b9da81e76af1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977166
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long prevValue = 0;\n        if (lst.Count() > 1) {\n            return
    false;\n        }\n        if (lst.Count == 1) {\n            return true;\n        }\n
    \       if (lst[0] != 0) {\n            return false;\n        }\n        foreach
    (long i in lst) {\n            if (prevValue < i) {\n                return false;\n
    \           }\n            prevValue = i;\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b7e97fd36ffb498585042823e0d9dc7d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b7e97fd36ffb498585042823e0d9dc7d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977166
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var map = new SortedDictionary<long, long>();\n        foreach
    (var i in lst) {\n            if (map.ContainsKey(i)) {\n                map[map[i]]++;\n
    \           } else {\n                map[map[i]] = 1;\n            }\n        }\n
    \       return !map.Values.Any(v => v > 1);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.Collections.Generic.KeyNotFoundException:
    The given key '5' was not present in the dictionary.\n  at System.Collections.Generic.SortedDictionary`2[TKey,TValue].get_Item
    (TKey key) [0x00047] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x0004b] in <51e165fba2524c42a0e1ee2ee1489056>:0
    \n  at Problem.Main (System.String[] args) [0x00011] in <51e165fba2524c42a0e1ee2ee1489056>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Collections.Generic.KeyNotFoundException:
    The given key '5' was not present in the dictionary.\n  at System.Collections.Generic.SortedDictionary`2[TKey,TValue].get_Item
    (TKey key) [0x00047] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x0004b] in <51e165fba2524c42a0e1ee2ee1489056>:0
    \n  at Problem.Main (System.String[] args) [0x00011] in <51e165fba2524c42a0e1ee2ee1489056>:0
    \n"
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long
    n in lst)\n        {\n            if (set.Add(n))\n            {\n                return
    true;\n            }\n        }\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <68ec24f75b90434cb4758d585470bfc7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <68ec24f75b90434cb4758d585470bfc7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        var first
    = lst[0];\n        var last = lst[lst.Count - 1];\n        bool isAscending =
    true;\n        for (var i = 1; i < lst.Count; i++) {\n            if (lst[i] <
    first)\n                isAscending = false;\n            else if (lst[i] > last)\n
    \               isAscending = false;\n        }\n        return isAscending;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aa56b72e7472453389c19c8ded481e8c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aa56b72e7472453389c19c8ded481e8c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977167
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long lastValue = lst[0];\n        bool result = true;\n        int
    size = lst.Count;\n        for (int i = 1; i < size; i++) {\n            if (lst[i]
    < lastValue) {\n                result = false;\n            }\n            lastValue
    = lst[i];\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <bc1a9f6d545b48008a8bbee62b09ee91>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <bc1a9f6d545b48008a8bbee62b09ee91>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <bc1a9f6d545b48008a8bbee62b09ee91>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <bc1a9f6d545b48008a8bbee62b09ee91>:0
    \n"
  stdout: ''
  timestamp: 1659977166
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.isEmpty()) {\n            return true;\n        }\n        if
    (lst.Count() == 1) {\n            return true;\n        }\n        Dictionary<long,
    int> dict = new Dictionary<long, int>();\n        foreach (long num in lst) {\n
    \           int i = 0;\n            if (dict.TryGetValue(num, out i)) {\n                i++;\n
    \           }\n            dict[num] = i;\n        }\n        foreach (long num
    in dict.Keys) {\n            if (dict[num] != dict[num - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr2xs3h12.cs(30,17): error CS1061: ''List<long>'' does not contain a definition
    for ''isEmpty'' and no accessible extension method ''isEmpty'' accepting a first
    argument of type ''List<long>'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659977166
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        HashSet<long> hashSet = new HashSet<long>(lst);\n        return
    hashSet.Count == lst.Count && hashSet.Sort();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxc5gyc_7.cs(31,54): error CS1061: ''HashSet<long>'' does not contain a
    definition for ''Sort'' and no accessible extension method ''Sort'' accepting
    a first argument of type ''HashSet<long>'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1659977166
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count() == 0) {\n            return true;\n        }\n
    \       var seen = new HashSet<long>();\n        var last = lst[0];\n        bool
    first = true;\n        for (int i = 1; i < lst.Count(); i++) {\n            var
    current = lst[i];\n            if (current < last) {\n                return false;\n
    \           }\n            if (seen.Add(current)) {\n                return false;\n
    \           }\n            seen.Remove(current);\n            last = current;\n
    \           if (first) {\n                first = false;\n            }\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <03253fbe52444019ad3e0adbc722ec94>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <03253fbe52444019ad3e0adbc722ec94>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var sorted = lst.OrderBy(x => x);\n        return sorted.Count()
    == lst.Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2412225c1d2141a181dedb8769192a2e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2412225c1d2141a181dedb8769192a2e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977163
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long last = lst.First();\n
    \       bool flag = true;\n        foreach (long item in lst) {\n            if
    (item == last) return false;\n            last = item;\n        }\n        return
    flag;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0ee2289b70404b19a6bfcd812872df28>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0ee2289b70404b19a6bfcd812872df28>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977167
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        int count = lst.Count;\n        if (count == 0) return true;\n
    \       int prev = -1;\n        bool isSorted = true;\n        for (int i = 0;
    i < count; i++) {\n            long val = lst[i];\n            if (prev != -1
    && (prev == val || val < prev)) {\n                isSorted = false;\n            }\n
    \           prev = val;\n        }\n        return isSorted;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphissvkhe.cs(39,20): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977166
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) { return false; }\n        var map = new Dictionary<long,
    List<long>>();\n        foreach (var v in lst) {\n            var list = map.GetValueOrDefault(v,
    new List<long>());\n            list.Add(v);\n            map[v] = list;\n        }\n\n
    \       long last = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if
    (lst[i] > last) { return false; }\n            last = lst[i];\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2acf68a7f684b2fad2c1f7067a46734>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2acf68a7f684b2fad2c1f7067a46734>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977167
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 1) return true;\n        if (lst.Count == 2)
    return lst.First() <= lst.Last();\n        if (lst.Count <= 3) {\n            bool
    firstDuplicate = lst.GroupBy(x => x).Count() > 1;\n            if (firstDuplicate)
    return false;\n            long min = lst.Min();\n            long max = lst.Max();\n
    \           return min <= max;\n        }\n        long min = lst.Min();\n        long
    max = lst.Max();\n        long sum = 0;\n        bool changed = true;\n        while
    (changed) {\n            changed = false;\n            for (int i = 0; i < lst.Count
    - 1; i++) {\n                if (lst[i] < lst[i + 1]) {\n                    changed
    = true;\n                    if (lst[i] < min) min = lst[i];\n                    if
    (lst[i + 1] > max) max = lst[i + 1];\n                    sum += lst[i + 1] -
    lst[i];\n                    break;\n                }\n            }\n        }\n
    \       return sum == 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkh1w4q0_.cs(35,18): error CS0136: A local or parameter named ''min'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpkh1w4q0_.cs(36,18): error CS0136: A local or parameter named ''max'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659977166
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count > 1) {\n            int count = 0;\n            int
    max = lst.Max();\n            foreach (long i in lst) {\n                if (i
    == max) count++;\n                else if (count > 1) return false;\n            }\n
    \           return true;\n        }\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnkmwvqph.cs(32,23): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977167
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0)\n            return true;\n        var seen
    = new HashSet<long>();\n        long previous = lst[0];\n        for (var i =
    1; i < lst.Count; ++i) {\n            if (seen[lst[i]] == true || seen[previous]
    == true)\n                return false;\n            seen.Add(lst[i]);\n            previous
    = lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp07laclrd.cs(35,17): error CS0021: Cannot apply indexing with [] to an
    expression of type ''HashSet<long>''

    /tmp/tmp07laclrd.cs(35,41): error CS0021: Cannot apply indexing with [] to an
    expression of type ''HashSet<long>''

    '
  timestamp: 1659977167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count() > 1) {\n            return false;\n        }\n
    \       var ints = new HashSet<long>();\n        foreach (long num in lst) {\n
    \           if (ints.Contains(num)) {\n                return false;\n            }\n
    \           ints.Add(num);\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <38a11a57ace242bb9c8e81ef1ce72980>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <38a11a57ace242bb9c8e81ef1ce72980>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        var hashset = new HashSet<long>();\n
    \       foreach (var n in lst)\n            if (!hashset.Add(n))\n                return
    false;\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <60f043b5434e4deeb88f1c5eacfaa825>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <60f043b5434e4deeb88f1c5eacfaa825>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        int i = 0;\n        for
    (int n = lst.Count; n > 1; n--) {\n            if (lst[n - 1] == lst[n - 2]) return
    false;\n            i += 2;\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c7455602597b4f18a8707a0ff8095e85>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c7455602597b4f18a8707a0ff8095e85>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var seen = new HashSet<long>();\n        for (int i = 0; i < lst.Count
    - 1; i++) {\n            if (lst.ElementAt(i) != lst.ElementAt(i + 1)) {\n                return
    false;\n            }\n            if (seen.Contains(lst.ElementAt(i))) {\n                return
    false;\n            }\n            seen.Add(lst.ElementAt(i));\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f47ae0b0c230440290844d8868dcedc9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f47ae0b0c230440290844d8868dcedc9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var seen = new HashSet<long>();\n        for (int i = 0; i < lst.Count;
    i++)\n            if (seen.Add(lst[i]))\n                return true;\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5ec42d04897145ee8be618f421687bff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5ec42d04897145ee8be618f421687bff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count <= 1) return true;\n        Dictionary<long, int>
    uniques = new Dictionary<long, int>();\n        foreach (var n in lst)\n        {\n
    \           if (uniques.ContainsKey(n)) { return false; }\n            uniques.Add(n,
    uniques.Count);\n        }\n        return uniques.Values.All(x => x == uniques.Count);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3d2d00dbf78f4181990d2fa98893ca48>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3d2d00dbf78f4181990d2fa98893ca48>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        HashSet<long> hs = new HashSet<long>();\n        foreach (var
    item in lst) {\n            if (hs.Contains(item))\n                return false;\n
    \           hs.Add(item);\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <522ca2a2da9640c78d1a4f54a44080d8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <522ca2a2da9640c78d1a4f54a44080d8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977167
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long lastValue = lst.Last();\n        bool areSorted = true;\n\n
    \       for (int i = 0; i < lst.Count; i++) {\n            if (lst[i] > lastValue)
    {\n                areSorted = false;\n            }\n        }\n\n        return
    areSorted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0051187caf1940e58a854463f7187d0d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0051187caf1940e58a854463f7187d0d>:0
    \n\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Last[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <0051187caf1940e58a854463f7187d0d>"
  stdout: ''
  timestamp: 1659977167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0)\n            return true;\n        var seen
    = new HashSet<long>();\n        foreach (var elt in lst) {\n            if (seen.Contains(elt))\n
    \               return false;\n            seen.Add(elt);\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51b0241435344de485f5d13585e3995d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51b0241435344de485f5d13585e3995d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        if (lst.Count > 2 &&
    lst.Last() == lst.First()) return false;\n        long last = lst.Last();\n        if
    (lst.Count <= 2) return true;\n        long middle = lst.Count / 2;\n        bool
    middleIsLast = false;\n        if (middle == lst.Count / 2) middleIsLast = true;\n
    \       long first = 0;\n        bool firstIsLast = false;\n        if (lst.Count
    > 2) first = lst.Count / 2;\n        bool firstIsFirst = false;\n        if (first
    == 0) firstIsFirst = true;\n        int leftCount = 0;\n        int rightCount
    = 0;\n        foreach (long num in lst) {\n            if (num == last) rightCount++;\n
    \           else if (num == lst.First()) leftCount++;\n            else if (num
    < last) leftCount++;\n            else if (num > last) rightCount++;\n            else
    {\n                if (num == first) leftCount++;\n                else if (num
    == lst.Last()) rightCount++;\n                else if (num < first) leftCount++;\n
    \               else if (num > first) rightCount++;\n                else if (middleIsLast)\n
    \                   if (num < middle) leftCount++;\n                    else if
    (num > middle) rightCount++;\n                else middleIsLast = true;\n                firstIsLast
    = true;\n                firstIsFirst = true;\n            }\n        }\n        if
    (leftCount > 1) return false;\n        if (rightCount > 1) return false;\n        if
    (firstIsFirst && middleIsLast)\n            return IsSorted(lst.Take(1).ToList());\n
    \       if (firstIsLast && !middleIsLast)\n            return IsSorted(lst.Take(2).ToList());\n
    \       return IsSorted(lst.Take(lst.Count / 2).ToList());\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b51c4e2d56e548d3950665d1aa18f3b6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b51c4e2d56e548d3950665d1aa18f3b6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        List<long> dups = new List<long>();\n        dups.AddRange(lst);\n
    \       dups.Sort();\n        for(int i = 0; i < dups.Count; i++) {\n            if(i
    == dups.Count - 1) {\n                return true;\n            }\n            if(i
    == dups.Count - 2) {\n                if((lst[dups.Count - 1]) == (lst[dups.Count
    - 2])) {\n                    return false;\n                }\n            }\n
    \           if((lst[dups.Count - 1]) <= (lst[dups.Count - 2])) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <093f24fbbcfa4866bc08506c2fe47275>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <093f24fbbcfa4866bc08506c2fe47275>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977167
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        int lastValue = lst[0];\n        bool areSorted;\n        for
    (int i = 1; i < lst.Count; i++) {\n            if (lst[i] != lastValue + 1) {\n
    \               areSorted = false;\n                break;\n            }\n            lastValue
    = lst[i];\n        }\n        return areSorted;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp07gf7a8h.cs(30,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp07gf7a8h.cs(37,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp07gf7a8h.cs(39,16): error CS0165: Use of unassigned local variable ''areSorted''

    '
  timestamp: 1659977167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 1) return true;\n        var hash = new HashSet<long>(lst);\n
    \       return !hash.Any();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <456aaf89696d42799efd7024296c39f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <456aaf89696d42799efd7024296c39f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count <= 1) {\n            return true;\n        }\n        var
    dict = new Dictionary<long, bool>();\n        for (int i = 0; i < lst.Count; i++)
    {\n            long l = lst[i];\n            if (dict.ContainsKey(l)) {\n                return
    false;\n            }\n            dict.Add(l, true);\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dd4fdc6040fc49edac8b7c91589b9a2b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dd4fdc6040fc49edac8b7c91589b9a2b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 1) return true;\n        if (lst.Count == 2)
    return lst[0] < lst[1] || lst[0] == lst[1];\n        if (lst.Count == 3) return
    lst[0] < lst[1] && lst[1] < lst[2];\n        if (lst.Count == 4) return lst[0]
    < lst[1] && lst[1] < lst[2] && lst[2] < lst[3];\n        if (lst.Count == 5) return
    lst[0] < lst[1] && lst[1] < lst[2] && lst[2] < lst[3] && lst[3] < lst[4];\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <007ad5665e804b3ea9505d66ee62f2c9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <007ad5665e804b3ea9505d66ee62f2c9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977167
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long first;\n        long last = lst[0];\n        for (int i =
    1; i < lst.Count; i++) {\n            if (lst[i] != last) {\n                return
    false;\n            }\n            first = lst[i];\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b858eac5d0864086a6e619f9c25f1633>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b858eac5d0864086a6e619f9c25f1633>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977167
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var lastValue = lst.Last();\n        var firstValue = lst.First();\n
    \       var isSorted = true;\n        var previous = firstValue;\n        foreach
    (var number in lst) {\n            if (number == lastValue && number > previous)\n
    \               return false;\n            previous = number;\n        }\n        return
    isSorted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ae92a36367ae43f6bb8c049b8ec8a032>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ae92a36367ae43f6bb8c049b8ec8a032>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977168
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long minValue = lst.Min();\n        long maxValue = lst.Max();\n
    \       return lst.OrderBy(x => x).Count() > 1 || lst.OrderBy(x => x).Skip(1).First()
    == minValue || lst.OrderBy(x => x).Skip(1).First() == maxValue;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00067] in <2128def40cec4323b2a7e9754981050a>:0
    \n  at Problem.Main (System.String[] args) [0x00011] in <2128def40cec4323b2a7e9754981050a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00067] in <2128def40cec4323b2a7e9754981050a>:0
    \n  at Problem.Main (System.String[] args) [0x00011] in <2128def40cec4323b2a7e9754981050a>:0
    \n"
  stdout: ''
  timestamp: 1659977168
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        return lst.Distinct().Count() <= 1;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91f429c47dbc404294a1b9f2464016d1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91f429c47dbc404294a1b9f2464016d1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) {\n            return false;\n        }\n        var
    lastValue = lst[lst.Count - 1];\n        var foundMatch = false;\n        foreach
    (var number in lst) {\n            if (number == lastValue) {\n                foundMatch
    = true;\n            } else {\n                foundMatch = false;\n                break;\n
    \           }\n        }\n        return !foundMatch;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db750c330bed4b42ad5b2b5debee5152>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db750c330bed4b42ad5b2b5debee5152>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977167
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        Debug.Assert(lst.Count > 0);\n        if (lst.Count > 1)\n            return
    false;\n\n        var minElem = lst[0];\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (minElem > lst[i])\n                return false;\n        }\n\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b06748ee4c50495dbe42d5c67d1355db>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b06748ee4c50495dbe42d5c67d1355db>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977168
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var last = lst[0];\n        return lst.Skip(1).All(i => last >
    i);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8f4a54b37eeb42088f684daeeee45d80>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8f4a54b37eeb42088f684daeeee45d80>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977168
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        // if one number is missing, return false\n        if (lst.Count
    == 0)\n            return false;\n        if (lst.Count == 1)\n            return
    true;\n        // sort list, count number of duplicates\n        int noOfDups
    = lst.GroupBy(x => x).Where(x => x.Count() > 1).Count();\n        // If duplicates
    are present, return false\n        if (noOfDups > 0)\n            return false;\n
    \       // If no duplicates are present, sort and return true\n        long minValue
    = lst.Min();\n        long maxValue = lst.Max();\n        bool sortAscending =
    minValue < maxValue;\n        if (sortAscending)\n            return true;\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1104c4fb5be0430f9006edfbca37f7f5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1104c4fb5be0430f9006edfbca37f7f5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977168
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return false;\n        if (lst.Count == 2)
    return true;\n        if (lst.Count == 3) return lst.Contains(lst[0]) && lst.Contains(lst[1]);\n
    \       if (lst.Count < 4) return true;\n        var set = new HashSet<long>(lst);\n
    \       if (set.Count > 3) return false;\n        var min = lst.Min();\n        var
    max = lst.Max();\n        if (min < min && min < max) return true;\n        if
    (min == max) return true;\n        if (min > max) return false;\n        var diff
    = max - min;\n        if (diff % 2 == 1) return false;\n        var mid = min
    + (diff / 2);\n        if (mid == mid) return true;\n        return IsSorted(lst.Take(mid).Concat(\n
    \           lst.Skip(mid))).\n            Any(e => e == lst.Last());\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmim_vye0.cs(45,34): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpmim_vye0.cs(46,22): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpmim_vye0.cs(38,13): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    /tmp/tmpmim_vye0.cs(44,13): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    '
  timestamp: 1659977167
