name: HumanEval_93_encode
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function that takes a message, and encodes in such a\
  \ \n    // way that it swaps case of all letters, replaces all vowels in \n    //\
  \ the message with the letter that appears 2 places ahead of that \n    // vowel\
  \ in the english alphabet. \n    // Assume only letters. \n    // Examples:\n  \
  \  // >>> Encode((\"test\"))\n    // (\"TGST\")\n    // >>> Encode((\"This is a\
  \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static string Encode(string\
  \ message) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
  TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
  mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
  This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
  I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
  \n}\n"
completions: ["        var letters = new List<char>() { 'a', 'b', 'c', 'd', 'e', 'f',\
    \ 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\
    \ 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };\n  \
    \      var vowels = new List<char>() { 'a', 'e', 'i', 'o', 'u' };\n        var\
    \ replacements = new List<char>() { 'A', 'I', 'O', 'U' };\n        var splits\
    \ = message.Split(' ').ToList();\n        var newMessage = \"\";\n        var\
    \ currentIndex = 0;\n        var previousIndex = 0;\n        foreach (var word\
    \ in splits) {\n            var newWord = word.ToLower();\n            newMessage\
    \ += newWord[0];\n            var index = newWord.IndexOfAny(letters);\n     \
    \       if (index > -1) {\n                for (int i = 0; i < index; i++) {\n\
    \                    if (i < currentIndex - 1) {\n                        newMessage\
    \ += replacements[i - previousIndex];\n                    } else if (i > currentIndex\
    \ - 1) {\n                        newMessage += replacements[i - previousIndex\
    \ - 1];\n                    }\n                }\n            }\n           \
    \ if (index < newWord.Length) {\n                for (int i = 0; i < newWord.Length;\
    \ i++) {\n                    if (i > index) {\n                        newMessage\
    \ += replacements[i - currentIndex];\n                    }\n                }\n\
    \            }\n            newMessage += newWord[index + 1];\n            currentIndex\
    \ = index + 2;\n            previousIndex = index;\n        }\n        return\
    \ newMessage;", "        char [] charArray = message.ToCharArray();\n        string\
    \ newMessage = \"\";\n        for(int i = 0; i < charArray.Length; i++) {\n  \
    \          char c = charArray[i];\n            int index = 0;\n            int\
    \ length = char.IsUpper(c) ? 2 : 1;\n            string newChar = new string(c);\n\
    \            for(int j = 0; j < length; j++) {\n                index = charArray.IndexOf(c,\
    \ c[index + j]) + j;\n                if(index == charArray.Length - 1) break;\n\
    \                char newChar2 = charArray[index];\n                charArray[index]\
    \ = newChar2;\n                charArray[index + j] = newChar;\n            }\n\
    \            newMessage += charArray.ToString() + char;\n        }\n        return\
    \ newMessage;", "        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < message.Length; i++) {\n            var currentChar = message[i];\n\
    \            if (currentChar.Equals('a'))\n                sb.Append(\"A\");\n\
    \            else if (currentChar.Equals('e'))\n                sb.Append(\"E\"\
    );\n            else if (currentChar.Equals('i'))\n                sb.Append(\"\
    I\");\n            else if (currentChar.Equals('o'))\n                sb.Append(\"\
    O\");\n            else if (currentChar.Equals('u'))\n                sb.Append(\"\
    U\");\n            else if (currentChar.Equals('A'))\n                sb.Append(\"\
    a\");\n            else if (currentChar.Equals('E'))\n                sb.Append(\"\
    e\");\n            else if (currentChar.Equals('I'))\n                sb.Append(\"\
    i\");\n            else if (currentChar.Equals('O'))\n                sb.Append(\"\
    o\");\n            else if (currentChar.Equals('U'))\n                sb.Append(\"\
    u\");\n            else\n                sb.Append(currentChar);\n        }\n\
    \        return sb.ToString();", "        if (string.IsNullOrWhiteSpace(message))\
    \ return message;\n\n        // convert all letters to their lower case code\n\
    \        var letters = message.ToLower().ToCharArray().Select(c => Char.ToLower(c));\n\
    \n        // determine how many vowels there are\n        var vowels = \"aeiou\"\
    .ToCharArray().Where(c => c == message.ToLower()[message.Length - 2]).Count();\n\
    \n        var newArray = new char[message.Length];\n        for (int i = 0; i\
    \ < message.Length; i++) {\n            var letterIndex = letters.IndexOf(message[i]);\n\
    \            var letterCode = (int)letterIndex;\n            var newLetter = Char.ToLower(letterCode);\n\
    \n            // if the letter is in the english alphabet, append the lower\n\
    \            // case version of the letter 2 places behind it\n            if\
    \ (Char.IsLetter(letterCode)) {\n                newArray[i] = newLetter;\n  \
    \              continue;\n            }\n\n            // if the letter is a vowel,\
    \ append the vowels \n            if (Char.IsUpper(letterCode)) {\n          \
    \      newArray[i] = newLetter + vowels;\n                continue;\n        \
    \    }\n\n            newArray[i] = newLetter;\n        }\n        return new\
    \ string(newArray);", "        List<char> alphabet = new List<char>();\n     \
    \   alphabet.Add('a');\n        alphabet.Add('b');\n        alphabet.Add('c');\n\
    \        alphabet.Add('d');\n        alphabet.Add('e');\n        alphabet.Add('f');\n\
    \        alphabet.Add('g');\n        alphabet.Add('h');\n        alphabet.Add('i');\n\
    \        alphabet.Add('j');\n        alphabet.Add('k');\n        alphabet.Add('l');\n\
    \        alphabet.Add('m');\n        alphabet.Add('n');\n        alphabet.Add('o');\n\
    \        alphabet.Add('p');\n        alphabet.Add('q');\n        alphabet.Add('r');\n\
    \        alphabet.Add('s');\n        alphabet.Add('t');\n        alphabet.Add('u');\n\
    \        alphabet.Add('v');\n        alphabet.Add('w');\n        alphabet.Add('x');\n\
    \        alphabet.Add('y');\n        alphabet.Add('z');\n        alphabet.Add('AA');\n\
    \        alphabet.Add('AE');\n        alphabet.Add('AH');\n        alphabet.Add('AO');\n\
    \        alphabet.Add('AW');\n        alphabet.Add('AY');\n        alphabet.Add('BB');\n\
    \        alphabet.Add('BE');\n        alphabet.Add('BH');\n        alphabet.Add('BK');\n\
    \        alphabet.Add('BO');\n        alphabet.Add('BS');\n        alphabet.Add('CA');\n\
    \        alphabet.Add('CH');\n        alphabet.Add('CO');\n        alphabet.Add('CS');\n\
    \        alphabet.Add('DZ');\n        alphabet.Add('DH');\n        alphabet.Add('DJ');\n\
    \        alphabet.Add('DK');\n        alphabet.Add('DM');\n        alphabet.Add('DO');\n\
    \        alphabet.Add('DZ');\n        alphabet.Add('EA');\n        alphabet.Add('EE');\n\
    \        alphabet.Add('EF');\n        alphabet.Add('EH');\n        alphabet.Add('EK');\n\
    \        alphabet.Add('EL');\n        alphabet.Add('EM');\n        alphabet.Add('EN');\n\
    \        alphabet.Add('EO');\n        alphabet.Add('ES');\n        alphabet.Add('FA');\n\
    \        alphabet.Add('FC');\n        alphabet.Add('FD');\n        alphabet.Add('FE');",
  "        var englishLetters = new[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\
    \ 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\
    \ 'z' };\n        var vowels = new[] {'a', 'e', 'i', 'o', 'u' };\n        var\
    \ result = \"\";\n        foreach (char letter in message) {\n            result\
    \ += englishLetters[(letter - 'a') + (letter.ToUpper() - 'A')]\n             \
    \   + vowels[(letter - 'a') + (letter.ToUpper() - 'A')] + letter;\n        }\n\
    \        return result;", "        string retVal = new StringBuilder();\n\n  \
    \      char[] myChars = message.ToCharArray();\n        string myMessage = message.ToLower();\n\
    \        string englishLetters = \"abcdefghijklmnopqrstuvwxyz\";\n        int\
    \ j = 0;\n        bool vowelFound = false;\n        string letterToSwap;\n   \
    \     string letterToPrepend;\n\n        foreach (char c in myMessage) {\n   \
    \         if (englishLetters.Contains(c)) {\n                letterToSwap = englishLetters[j];\n\
    \                letterToPrepend = englishLetters[j + 1];\n                j++;\n\
    \            }\n            if (j > 1) {\n                if (c == letterToSwap)\
    \ {\n                    retVal.Append(letterToPrepend);\n                   \
    \ j--;\n                    vowelFound = false;\n                    letterToSwap\
    \ = englishLetters[j];\n                    letterToPrepend = englishLetters[j\
    \ + 1];\n                    j++;\n                }\n                else if\
    \ (c == letterToPrepend) {\n                    retVal.Append(letterToSwap);\n\
    \                    letterToSwap = englishLetters[j];\n                    letterToPrepend\
    \ = englishLetters[j + 1];\n                    j++;\n                }\n    \
    \        }\n            if (vowelFound == true) {\n                retVal.Append(c);\n\
    \            }\n            else if (c == ' ') {\n                retVal.Append(c);\n\
    \            }\n            else {\n                retVal.Append(\"?\");\n  \
    \              vowelFound = true;\n            }\n        }\n        return retVal.ToString();",
  "        // TODO: Your code here.\n        return message;", "        var result\
    \ = \"\";\n        for(int i = 0; i < message.Length; i++) {\n            result\
    \ += message[i].ToUpper();\n            result += message[i];\n            result\
    \ += message[i].ToLower();\n        }\n        return result;", "        string\
    \ result = \"\";\n        for (int i = 0; i < message.Length; i++) {\n       \
    \     char a = message[i];\n            char b = Char.ToUpper(a);\n          \
    \  char c = Char.ToUpper(b);\n            char d = Char.ToUpper(c);\n        \
    \    char e = Char.ToUpper(d);\n            char f = Char.ToUpper(e);\n      \
    \      char g = Char.ToUpper(f);\n            result += a;\n        }\n      \
    \  return result;", "        char vowel = 'a';\n        char shift = 'A';\n  \
    \      var result = new StringBuilder();\n        foreach (char letter in message)\n\
    \        {\n            bool isVowel = false;\n            for (int i = 0; i <\
    \ vowel.Length; i++)\n            {\n                if (letter == vowel)\n  \
    \              {\n                    isVowel = true;\n                    break;\n\
    \                }\n            }\n            if (!isVowel)\n            {\n\
    \                result.Append(letter);\n            }\n            else\n   \
    \         {\n                var counter = 0;\n                var index = Array.IndexOf(shift,\
    \ letter);\n                if (index == -1)\n                {\n            \
    \        result.Append(letter);\n                }\n                else\n   \
    \             {\n                    while (index > -1 && counter < 2)\n     \
    \               {\n                        result.Append(shift[counter]);\n  \
    \                      counter++;\n                        index = Array.IndexOf(shift,\
    \ letter);\n                    }\n                }\n            }\n        }\n\
    \        return result.ToString();", "        if (string.IsNullOrEmpty(message))\
    \ {\n            throw new ArgumentException(\"Message cannot be null or empty\"\
    , \"message\");\n        }\n        var sb = new StringBuilder(message);\n   \
    \     int vowelCount = 0;\n        foreach (char c in message) {\n           \
    \ if (char.IsLetter(c)) {\n                char temp = c;\n                if\
    \ (temp.Equals('A') || temp.Equals('E') || temp.Equals('I') || temp.Equals('O')\
    \ || temp.Equals('U')) {\n                    sb.Replace(temp, GetVowelIndexFromLetterCount(vowelCount++,\
    \ message));\n                } else {\n                    sb.Replace(temp, GetLetterIndexFromVowelCount(vowelCount++,\
    \ message));\n                }\n            }\n        }\n        return sb.ToString();",
  "        char[] letters = message.ToCharArray();\n        char[] replacements =\
    \ new char[message.Length];\n        for (int i = 0; i < replacements.Length;\
    \ i++) {\n            replacements[i] = ' ';\n        }\n\n        foreach (char\
    \ letter in letters) {\n            replacements[letter.ToString().ToLower()]\
    \ = letter.ToString().ToUpper();\n        }\n\n        replacements[message.Length]\
    \ = '\\0';\n\n        return new string(replacements);", "        var result =\
    \ new List<char>();\n        var vowels = \"aeiouAEIOU\";\n        foreach (char\
    \ c in message) {\n            if (vowels.Contains(c)) {\n                result.Add(vowels.IndexOf(c)\
    \ + 1);\n            }\n            result.Add(c);\n        }\n        return\
    \ new string(result.ToArray());", "        char[] chars = message.ToCharArray();\n\
    \        ArrayList swaps = new ArrayList();\n        foreach (char c in chars)\
    \ {\n            if (char.IsLower(c)) {\n                swaps.Add((char.ToUpper(c)));\n\
    \            }\n            if (char.IsUpper(c)) {\n                swaps.Add((char.ToLower(c)));\n\
    \            }\n        }\n\n        // now swap vowels in the message\n     \
    \   int vowel = 0;\n        int length = 0;\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            char currentChar = chars[i];\n            if (currentChar\
    \ == 'a' || currentChar == 'e' || currentChar == 'i' ||\n                currentChar\
    \ == 'o' || currentChar == 'u') {\n                length++;\n               \
    \ if (vowel == 0)\n                    vowel = i;\n                else\n    \
    \                swaps[vowel] = chars[i];\n            }\n        }\n\n      \
    \  string result = \"\";\n        for (int i = 0; i < swaps.Count; i++) {\n  \
    \          result += swaps[i].ToString();\n        }\n        result += chars[swaps.Count\
    \ - 1];\n        return result;", "        char[] result = new char[message.Length];\n\
    \        for (int i = 0; i < message.Length; i++) {\n            char ch = message[i];\n\
    \            if (ch >= 'A' && ch <= 'Z') {\n                result[i] = ch - 'A'\
    \ + 'a';\n            } else if (ch >= 'a' && ch <= 'z') {\n                result[i]\
    \ = ch - 'a' + 'A';\n            } else if (ch >= '0' && ch <= '9') {\n      \
    \          result[i] = ch - '0' + '9';\n            } else {\n               \
    \ result[i] = ch;\n            }\n        }\n        return string.Join(\"\",\
    \ result);", "        string vowels = \"AEIOU\";\n        char[] letters = message.ToCharArray();\n\
    \        List<int> counts = new List<int>();\n        foreach (char c in letters)\
    \ {\n            int i = vowels.IndexOf(c); // returns first index not counting\
    \ vowels\n            counts.Add(i);\n            int pos = i;\n            while\
    \ (pos >= 0) {\n                counts[pos]--;\n                pos--;\n     \
    \       }\n        }\n\n        string encoded = new string();\n        foreach\
    \ (int c in counts) {\n            if (c == 2) {\n                encoded = encoded\
    \ + letters[c];\n                encoded = encoded + letters[c - 1];\n       \
    \     }\n            else if (c == 1) {\n                encoded = encoded + letters[c];\n\
    \            }\n            else {\n                encoded = encoded + letters[c];\n\
    \                encoded = encoded + letters[c + 1];\n            }\n        }\n\
    \        return encoded;", "        string encoded = \"\";\n        for (int i\
    \ = 0; i < message.Length; i++) {\n            if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n                encoded = encoded + (char)(message[i] + 32);\n  \
    \          }\n            if (message[i] >= 'A' && message[i] <= 'Z') {\n    \
    \            encoded = encoded + (char)(message[i] + 65);\n            }\n   \
    \         if (message[i] >= '0' && message[i] <= '9') {\n                encoded\
    \ = encoded + (char)(message[i] + 32);\n            }\n        }\n        return\
    \ encoded;", "        char[] englishLetters = {'a', 'b', 'c', 'd', 'e', 'f', 'g',\
    \ 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w',\
    \ 'x', 'y', 'z'};\n        string encrypted = \"\";\n        for (int i = 0; i\
    \ < message.Length; i++) {\n            string letter = message[i].ToString();\n\
    \            int vowelIndex = Array.IndexOf(englishLetters, letter);\n       \
    \     if (vowelIndex != -1) {\n                encrypted += new string(englishLetters,\
    \ vowelIndex + 1, 2);\n                encrypted += new string(englishLetters,\
    \ vowelIndex, 1);\n            } else {\n                encrypted += letter;\n\
    \            }\n        }\n        return encrypted;", "        char[] letters\
    \ = {'a','b','c','d','e','f','g','h','i','j','k','l','m',\n                  \
    \         'n','o','p','q','r','s','t','u','v','w','x','y','z'};\n        char[]\
    \ vowels = {'a','e','i','o','u'};\n        char[] letters2 = {'A','B','C','D','E','F','G','H','I','J','K','L','M',\n\
    \                           'N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};\n\
    \        char[] vowels2 = {'a','e','i','o','u'};\n        char[] letters3={'A','B','C','D','E','F','G','H','I','J','K','L','M',\n\
    \                           'N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};\n\
    \        char[] vowels3={'a','e','i','o','u'};\n        StringBuilder sb = new\
    \ StringBuilder();\n        for (int i = 0; i < message.Length; i++) {\n     \
    \       char ch = message[i];\n            int index = (int)ch - 65;\n       \
    \     int index2 = (char)index + 2;\n            int index3 = (char)index + 3;\n\
    \            int index4 = (char)index + 4;\n            if (letters.Contains(ch))\
    \ {\n                ch = (char)index;\n            }\n            if (vowels.Contains(ch))\
    \ {\n                ch = (char)index2;\n            }\n            if (letters2.Contains(ch))\
    \ {\n                ch = (char)index3;\n            }\n            if (vowels2.Contains(ch))\
    \ {\n                ch = (char)index4;\n            }\n            if (letters3.Contains(ch))\
    \ {\n                ch = (char)index4;\n            }\n            if (vowels3.Contains(ch))\
    \ {\n                ch = (char)index2;\n            }\n            sb.Append(ch);\n\
    \        }\n        return sb.ToString();", "        var result = \"\";\n    \
    \    var vowels = \"aeiouAEIOU\";\n        // Add your implementation here.\n\
    \        // Use System.Linq\n        var count = message.Count();\n        var\
    \ vowel = vowels.FirstOrDefault(c => message.Contains(c));\n        result +=\
    \ \"t\";\n        for (int i = 0; i < count; i++) {\n            result += (message.ElementAt(i).ToUpper()\
    \ == vowel) \n                    ? vowels.ElementAt(vowels.IndexOf(vowel) + 2)\
    \ \n                    : message.ElementAt(i);\n        }\n        result +=\
    \ \"s\";\n        return result;", "        // TODO: Implement\n        return\
    \ \"\";", "        string result = \"\";\n        foreach (char c in message)\
    \ {\n            string letterToAdd = \"\";\n            switch (c) {\n      \
    \          case 'a':\n                    letterToAdd = \"B\";\n             \
    \       break;\n                case 'b':\n                    letterToAdd = \"\
    A\";\n                    break;\n                case 'c':\n                \
    \    letterToAdd = \"C\";\n                    break;\n                case 'd':\n\
    \                    letterToAdd = \"D\";\n                    break;\n      \
    \          case 'e':\n                    letterToAdd = \"F\";\n             \
    \       break;\n                case 'f':\n                    letterToAdd = \"\
    E\";\n                    break;\n                case 'g':\n                \
    \    letterToAdd = \"G\";\n                    break;\n                case 'h':\n\
    \                    letterToAdd = \"H\";\n                    break;\n      \
    \          case 'i':\n                    letterToAdd = \"J\";\n             \
    \       break;\n                case 'j':\n                    letterToAdd = \"\
    I\";\n                    break;\n                case 'k':\n                \
    \    letterToAdd = \"K\";\n                    break;\n                case 'l':\n\
    \                    letterToAdd = \"L\";\n                    break;\n      \
    \          case 'm':\n                    letterToAdd = \"M\";\n             \
    \       break;\n                case 'n':\n                    letterToAdd = \"\
    N\";\n                    break;\n                case 'o':\n                \
    \    letterToAdd = \"P\";\n                    break;\n                case 'p':\n\
    \                    letterToAdd = \"O\";\n                    break;\n      \
    \          case 'q':\n                    letterToAdd = \"Q\";\n             \
    \       break;\n                case 'r':\n                    letterToAdd = \"\
    R\";\n                    break;\n                case 's':\n                \
    \    letterToAdd = \"S\";\n                    break;\n                case 't':\n\
    \                    letterToAdd = \"T\";\n                    break;\n      \
    \          case 'u':\n                    letterToAdd = \"U\";\n             \
    \       break;\n                case 'v':\n                    letterToAdd = \"\
    V\";\n                    break;\n                case 'w':\n                \
    \    letterToAdd = \"W\";\n                    break;\n                case 'x':\n\
    \                    letterToAdd = \"X\";\n                    break;\n      \
    \          case 'y':\n                    letterToAdd = \"Y\";\n             \
    \       break;\n                case 'z':\n                    letterToAdd = \"\
    Z\";\n                    break;\n                default:\n                 \
    \   letterToAdd = c;\n                    break;\n            }\n            int\
    \ letter = c - 'a' + 1;\n            if (letterToAdd.Length == 1) {\n        \
    \        result += letterToAdd;\n            } else {\n                int numOfVowelsInLetter\
    \ = letterToAdd.Count();\n                int numOfVowelsInLetter2 = numOfVowelsInLetter\
    \ - 1;\n                if (numOfVowelsInLetter2 < 0) {\n                    numOfVowelsInLetter2\
    \ = numOfVowelsInLetter + 1 - letterToAdd.Count();\n                }\n      \
    \          for (int i = 0; i < numOfVowelsInLetter2; i++) {", "        List<char>\
    \ vowels = new List<char>{'a', 'e', 'i', 'o', 'u'};\n        int vowelPos = 0;\n\
    \        StringBuilder newMessage = new StringBuilder(message.Length);\n     \
    \   foreach (char c in message) {\n            if (vowels.Contains(c)) {\n   \
    \             newMessage.Append(vowels[vowelPos]);\n                vowelPos++;\n\
    \            } else {\n                newMessage.Append(c);\n            }\n\
    \        }\n        char[] a = newMessage.ToArray();\n        char[] b = newMessage.ToArray();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            if (a[i] >= 'a' &&\
    \ a[i] <= 'z') {\n                b[i] = (char)(b[i] + 'a' - 'a');\n         \
    \   }\n        }\n        return newMessage.ToString();", "        var dictionary\
    \ = new Dictionary<string, char>();\n        // map all vowels to their corresponding\
    \ uppercase letters\n        dictionary.Add(\"a\", (char) 97);\n        dictionary.Add(\"\
    e\", (char) 101);\n        dictionary.Add(\"i\", (char) 103);\n        dictionary.Add(\"\
    o\", (char) 111);\n        dictionary.Add(\"u\", (char) 117);\n        \n    \
    \    // map all letters to the letter that appears two places ahead \n       \
    \ // of a vowel in the english alphabet\n        dictionary.Add(\"a\", (char)\
    \ 'z');\n        dictionary.Add(\"e\", (char) 'z');\n        dictionary.Add(\"\
    i\", (char) 'z');\n        dictionary.Add(\"o\", (char) 'z');\n        dictionary.Add(\"\
    u\", (char) 'z');\n        \n        // Map all letters in the input string to\
    \ their corresponding \n        // uppercase letter in the dictionary\n      \
    \  var map = new Dictionary<string, char>();\n        foreach (var item in dictionary)\n\
    \            map.Add(item.Key, item.Value);\n        \n        \n        // replace\
    \ all vowels in the message with the letter that appears \n        // two places\
    \ ahead of their corresponding vowel in the english \n        // alphabet\n  \
    \      var replaced = message\n            .Replace(\" \", string.Empty)\n   \
    \         .Select(item => map.ContainsKey(item) ? map[item] : item)\n        \
    \    .ToList();\n        \n        // replace all vowels in the input string with\
    \ the uppercase \n        // letter that appears two places ahead of their corresponding\
    \ \n        // vowel in the english alphabet\n        string output = string.Empty;\n\
    \        foreach (var item in replaced)\n            output += dictionary[item];\n\
    \        \n        return output;", "        string[] chars = message.ToLower().ToCharArray();\n\
    \        string result = string.Empty;\n\n        int vowel = 0;\n        foreach\
    \ (char c in chars) {\n            switch (c) {\n                case 'a':\n \
    \               case 'e':\n                case 'i':\n                case 'o':\n\
    \                case 'u':\n                    result += 'A';\n             \
    \       break;\n                case 'b':\n                case 'c':\n       \
    \         case 'd':\n                case 'f':\n                case 'g':\n  \
    \                  result += 'B';\n                    break;\n              \
    \  case 'z':\n                    result += 'Z';\n                    break;\n\
    \                case 'w':\n                    result += 'W';\n             \
    \       break;\n                case 'y':\n                    result += 'Y';\n\
    \                    break;\n            }\n        }\n        if (result.Length\
    \ > 0) {\n            result = result.Substring(vowel, result.Length - vowel);\n\
    \        }\n        vowel = 0;\n        foreach (char c in chars) {\n        \
    \    switch (c) {\n                case 'a':\n                case 'e':\n    \
    \            case 'i':\n                case 'o':\n                case 'u':\n\
    \                    result += 'A';\n                    break;\n            \
    \    case 'b':\n                case 'c':\n                case 'd':\n       \
    \         case 'f':\n                case 'g':\n                    result +=\
    \ 'B';\n                    break;\n                case 'z':\n              \
    \      result += 'Z';\n                    break;\n                case 'w':\n\
    \                    result += 'W';\n                    break;\n            \
    \    case 'y':\n                    result += 'Y';\n                    break;\n\
    \            }\n            vowel++;\n        }\n        if (result.Length > 0)\
    \ {\n            result = result.Substring(vowel, result.Length - vowel);\n  \
    \      }\n        vowel = 0;\n        foreach (char c in chars) {\n          \
    \  switch (c) {\n                case 'a':\n                case 'e':\n      \
    \          case 'i':\n                case 'o':\n                case 'u':\n \
    \                   result += 'A';\n                    break;\n             \
    \   case 'b':\n                case 'c':\n                case 'd':\n        \
    \        case 'f':\n                case 'g':\n                    result += 'B';\n\
    \                    break;\n                case 'z':\n                    result\
    \ += 'Z';\n                    break;\n                case 'w':\n           \
    \         result += 'W';\n                    break;\n                case 'y':\n\
    \                    result += 'Y';\n                    break;\n            }\n\
    \            vowel++;\n        }\n        if (result.Length > 0) {\n         \
    \   result = result.Substring(vowel, result.Length - vowel);\n        }\n    \
    \    return result;", "        List<char> vowels = new List<char>();\n       \
    \ vowels.AddRange(new char[]{'a', 'e', 'i', 'o', 'u', 'y'});\n        \n     \
    \   foreach (char vowel in vowels) {\n            int firstVowelIndex = message.IndexOf(vowel);\n\
    \            int secondVowelIndex = message.IndexOf(vowel, firstVowelIndex + 1);\n\
    \            string replacement = string.Empty;\n            int newVowelIndex\
    \ = secondVowelIndex;\n            \n            while (newVowelIndex != -1) {\n\
    \                replacement = message.Substring(0, newVowelIndex) + message.Substring(newVowelIndex\
    \ + 1) + message.Substring(0, firstVowelIndex) + message.Substring(firstVowelIndex\
    \ + 1);\n                newVowelIndex = message.IndexOf(vowel, newVowelIndex\
    \ + 1);\n            }\n            string replacedMessage = replacement;\n  \
    \          \n            int i = 1;\n            \n            while (i <= message.Length)\
    \ {\n                string letter = string.Empty;\n                int letterIndex\
    \ = i;\n                \n                while (message[letterIndex] != ' ')\
    \ {\n                    letter = letter + message[letterIndex];\n           \
    \         letterIndex = i;\n                    i++;\n                }\n    \
    \            if (i == message.Length) {\n                    replacedMessage =\
    \ replacedMessage + letter;\n                } else {\n                    replacedMessage\
    \ = replacedMessage + letter + replacement;\n                }\n             \
    \   i++;\n            }\n            message = replacedMessage;\n        }\n \
    \       return message;", "        char[] alphabet = Enumerable.Range(0, 26).Select(i\
    \ => (char)('A' + i)).ToArray();\n        char[] vowels = Enumerable.Range(0,\
    \ 26).Select(i => (char)('a' + i)).ToArray();\n        message = message.ToUpper();\n\
    \        string result = message;\n        char[] chars = result.ToCharArray();\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i] ==\
    \ vowels[chars.Length - i - 1]) {\n                int vowelIndex = chars.Length\
    \ - i - 1;\n                char vowel = vowels[vowelIndex];\n               \
    \ int vowelLength = vowelIndex - 1;\n                for (int j = i - 1; j >=\
    \ 0 && chars[j] == vowel; j--) {\n                    chars[j] = alphabet[chars.Length\
    \ - j - 1];\n                }\n                for (int j = i + 1; j < chars.Length\
    \ && chars[j] == vowel; j++) {\n                    chars[j] = alphabet[chars.Length\
    \ - j - 1];\n                }\n                chars[vowelIndex] = vowel;\n \
    \           }\n        }\n        return new string(chars);", "        string\
    \ encodedMessage = message.ToUpper();\n        char[] vowels = new[] { 'A', 'E',\
    \ 'I', 'O', 'U' };\n        char[] letters = new[] { 'a', 'b', 'c', 'd', 'e',\
    \ 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',\
    \ 'v', 'w', 'x', 'y', 'z' };\n        foreach(var letter in letters) {\n     \
    \       int letterIndex = message.IndexOf(letter);\n            int vowelIndex\
    \ = message.IndexOf(vowels);\n            if (letterIndex >= 0 && letterIndex\
    \ < vowelIndex) {\n                encodedMessage += letter;\n            }\n\
    \            else if (letterIndex < vowelIndex) {\n                string messageLetter\
    \ = message.Substring(letterIndex, 1);\n                string messageVowel =\
    \ message.Substring(vowelIndex + 2, 1);\n                encodedMessage += letters[letterIndex\
    \ - vowelIndex - 1] + messageVowel + messageLetter;\n            }\n        }\n\
    \        return encodedMessage;", '        // TODO: ', "        var result = \"\
    \";\n        foreach(var letter in message) {\n            result += string.Concat((char)(letter.ToUpperInvariant()),\n\
    \                letter.ToUpperInvariant().Length > 1 ? (char)(letter.ToLowerInvariant())\
    \ : \"\");\n        }\n        return result;", "        char[] alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\".ToCharArray();\n        var message = message.ToUpperInvariant();\n\
    \        var vowels = \"AEIOU\".ToUpperInvariant();\n        var vowels2 = new\
    \ HashSet<char>(vowels);\n        var res = new StringBuilder();\n\n        var\
    \ l = message.Length;\n        for(int i = 0; i < l; i++) {\n            var c\
    \ = message[i];\n            if (vowels.Contains(c)) {\n                res.Append(alphabet[vowels.IndexOf(c)]);\n\
    \            }\n            else {\n                res.Append(alphabet[vowels2.IndexOf(c)]);\n\
    \            }\n        }\n        return res.ToString();", "        string encoded\
    \ = \"\";\n        for (int i = 0; i < message.Length; i++) {\n            int\
    \ vowelIndex = GetIndexOfVowel(message[i]);\n            int firstLetter = message[i].ToLowerInvariant()\n\
    \                .IndexOfAny(char.IsLower);\n            int secondLetter = message[i].ToLowerInvariant()\n\
    \                .IndexOfAny(char.IsLower) + 1;\n            encoded = Encode(message[i],\
    \ vowelIndex, firstLetter, \n                secondLetter, encoded);\n       \
    \ }\n        return encoded;", "        var vowels = \"AEIOUaeiou\";\n       \
    \ var newMessage = message;\n        for (int i = 0; i < message.Length; i++)\
    \ {\n            var letter = message[i];\n            if (letter == \" \") {\n\
    \                continue;\n            }\n            var newLetter = letter;\n\
    \            if (vowels.IndexOf(letter) != -1) {\n                var index =\
    \ 2;\n                while (vowels.IndexOf(newLetter, index) != -1) {\n     \
    \               index++;\n                }\n                newLetter = vowels[vowels.IndexOf(letter)\
    \ - index];\n            }\n            newMessage = newMessage.Replace(letter,\
    \ newLetter);\n        }\n        return newMessage;", "        var newMessage\
    \ = new StringBuilder();\n        var alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n        var vowels = \"AEIOU\";\n        foreach (var c in message) {\n   \
    \         var index = alphabet.IndexOf(c) + 2;\n            if (index < (alphabet.Length\
    \ - 1)) {\n                var nextVowel = vowels.IndexOf(alphabet.Substring(index,\
    \ 1));\n                if (nextVowel != -1) {\n                    newMessage.Append(alphabet.Substring((int)c,\
    \ 1));\n                    newMessage.Append(alphabet.Substring((int)nextVowel,\
    \ 1));\n                } else {\n                    newMessage.Append(alphabet.Substring((int)c,\
    \ 1));\n                }\n            } else {\n                newMessage.Append(c);\n\
    \            }\n        }\n        return newMessage.ToString();", "        string\
    \ vowels = \"AEIOUaeiou\";\n        string alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n        char[] messageChars = message.ToCharArray();\n        StringBuilder\
    \ output = new StringBuilder();\n        foreach(char c in messageChars) {\n \
    \           char replacement = vowels.IndexOf(alphabet[c]) \n                \
    \                 + alphabet.IndexOf(alphabet[c].Next());\n            if (replacement\
    \ != 0) {\n                output.Append(replacement);\n            } else {\n\
    \                output.Append(c);\n            }\n        }\n        return output.ToString();",
  "        // Your code goes here.\n        var vowels = \"aeiouAEIOU\";\n       \
    \ var indexToSwap = new int[vowels.Length];\n        var swappedMessage = \"\"\
    ;\n        foreach (char letter in message)\n        {\n            if (vowels.IndexOf(letter)\
    \ != -1)\n            {\n                var index = vowels.IndexOf(letter);\n\
    \                indexToSwap[index] = index;\n            }\n        }\n     \
    \   for (var i = 0; i < vowels.Length; i++)\n        {\n            if (i != vowels.Length\
    \ - 1)\n            {\n                var letter = vowels[i];\n             \
    \   var previousLetter = vowels[i - 1];\n                var currentLetter = vowels[i];\n\
    \                if (indexToSwap[i] == indexToSwap[vowels.Length - 1])\n     \
    \           {\n                    swappedMessage += letter;\n               \
    \ }\n                else\n                {\n                    var previousIndex\
    \ = indexToSwap[previousLetter];\n                    var currentIndex = indexToSwap[currentLetter];\n\
    \                    swappedMessage += \n                        ((previousIndex\
    \ + currentIndex) % 2 == 0 ? letter + letter : letter + previousLetter);\n   \
    \             }\n            }\n            else\n            {\n            \
    \    swappedMessage += vowels[i];\n            }\n        }\n        return swappedMessage;",
  "        // Your code here.\n        return new string('*', message.Length);", " \
    \       string[] alphabet = new string[] {\n                \"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"\
    , \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\"\
    , \"V\", \"W\", \"X\", \"Y\", \"Z\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"0\"\n        };\n        var letters = new Dictionary<char,\
    \ char>();\n        foreach (var letter in alphabet) {\n            letters.Add(letter,\
    \ letters[letter]);\n        }\n\n        var vowels = new HashSet<char>(\"aeiouAEIOU\"\
    );\n        var messageLetters = message.ToCharArray().Select(x => (int)letters[x]);\n\
    \        var vowelLetters = (from letter in vowels select (int)letters[letter]).ToArray();\n\
    \        var messageWords = Enumerable.Range(0, message.Length).Select(i => message.Substring(i,\
    \ 1)).ToArray();\n        var vowelWords = messageWords.SelectMany(word => word.ToCharArray().Select(x\
    \ => (int)vowelLetters[x]));\n        var messageWordsAndVowels = messageWords.SelectMany(word\
    \ => vowelWords.Select(vowel => new {Word = word, Vowel = vowel}));\n        var\
    \ messageWordsAndVowelsShuffled = messageWordsAndVowels.OrderBy(x => Guid.NewGuid());\n\
    \        var result = new StringBuilder();\n        foreach (var vowelWord in\
    \ messageWordsAndVowelsShuffled) {\n            var message = vowelWord.Word;\n\
    \            var vowel = vowelWord.Vowel;\n            var index = vowels.IndexOf(vowel);\n\
    \            var newMessage = message.Substring(0, index) + message.Substring(index\
    \ + 1);\n            foreach (var letter in alphabet) {\n                var indexInAlphabet\
    \ = letters.IndexOf(letter);\n                if (messageLetters[indexInAlphabet]\
    \ > vowelLetters[index]) {\n                    newMessage = newMessage + alphabet[indexInAlphabet];\n\
    \                } else {\n                    newMessage = newMessage + letters[letter];\n\
    \                }\n            }\n            result.Append(newMessage);\n  \
    \      }\n        return result.ToString();", "        string result = \"\";\n\
    \        Dictionary<char, char> vowels = new Dictionary<char, char> {\n      \
    \      {'a', 'e'}, {'o', 'u'}, {'i', 'u'}\n        };\n        foreach (char letter\
    \ in message) {\n            char vowel;\n            if (vowels.TryGetValue(letter,\
    \ out vowel)) {\n                result += vowel;\n            }\n           \
    \ else {\n                result += letter.ToUpper();\n            }\n       \
    \ }\n        return result;", "        StringBuilder encodedMessage = new StringBuilder();\n\
    \        for(int i = 0; i < message.Length; i++) {\n            if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n                int index = message.IndexOf(message[i],\
    \ 2);\n                if (index < 0) index = message.Length;\n              \
    \  encodedMessage.Append(message.Substring(i + 1, index - i - 1));\n         \
    \       encodedMessage.Append(message[i]);\n            } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n                int index = message.IndexOf(message[i],\
    \ 2);\n                if (index < 0) index = message.Length;\n              \
    \  encodedMessage.Append(message.Substring(i + 1, index - i - 1));\n         \
    \       encodedMessage.Append(message[i]);\n            } else if (message[i]\
    \ == '.') {\n                encodedMessage.Append(message[i]);\n            }\n\
    \        }\n        return encodedMessage.ToString();", "        string result\
    \ = \"\";\n\n        char[] vowels = \"AEIOU\".ToCharArray();\n\n        int i\
    \ = 0;\n        for (int k = 0; k < message.Length; k++) {\n            if (k\
    \ > 0) result += message[k];\n            result += vowels[i];\n            i++;\n\
    \        }\n\n        return result;", "        string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n        string vowels = \"aeiou\";\n        string result = string.Empty;\n\
    \        // Convert each character of the message to lower case\n        for (int\
    \ i = 0; i < message.Length; i++) {\n            result += Convert.ToChar(message[i].ToLower(CultureInfo.InvariantCulture)).ToString();\n\
    \        }\n        // Iterate over each character of the message and swap case\
    \ if \n        // the current character is a vowel\n        for (int i = 0; i\
    \ < message.Length; i++) {\n            char ch = result[i].ToLower(CultureInfo.InvariantCulture);\n\
    \            if (vowels.Contains(ch)) {\n                int x = result.IndexOf(ch,\
    \ i) + 1;\n                result += alphabet[(x - i) % 26].ToUpper(CultureInfo.InvariantCulture);\n\
    \            }\n        }\n        return result;", "        if (message == null)\
    \ {\n            return string.Empty;\n        }\n        string result = string.Empty;\n\
    \        char vowel = 'a';\n        bool first = true; // flag to determine if\
    \ we are first letter\n        foreach (char c in message) {\n            if (first\
    \ && !char.IsLower(c)) {\n                result = \"a\" + result;\n         \
    \       first = false;\n            }\n            char upperCase = char.ToUpper(c);\n\
    \            if (char.IsLower(c) && char.IsUpper(upperCase)) {\n             \
    \   char c = char.ToUpper(upperCase);\n                if (c == vowel) {\n   \
    \                 char c2 = char.ToUpper(message[vowel + 2]);\n              \
    \      if (c2 == vowel) {\n                        result = c + result + c;\n\
    \                    } else {\n                        result = c + result;\n\
    \                    }\n                } else {\n                    result =\
    \ upperCase + result;\n                }\n            } else {\n             \
    \   result = upperCase + result;\n            }\n            first = true;\n \
    \       }\n        return result;", "        string returnValue = string.Empty;\n\
    \        if (message == null || message.Length <= 0) {\n            return string.Empty;\n\
    \        }\n        byte[] inputBytes = Encoding.ASCII.GetBytes(message);\n  \
    \      byte[] outputBytes = new byte[inputBytes.Length];\n        for (int i =\
    \ 0; i < inputBytes.Length; i++) {\n            byte currentValue = inputBytes[i];\n\
    \            switch (currentValue) {\n                case (byte)'a':\n      \
    \          case (byte)'A':\n                    if (i > 0) {\n               \
    \         byte previousValue = inputBytes[i - 1];\n                        byte\
    \ currentValue = previousValue;\n                        byte nextValue = inputBytes[i\
    \ + 1];\n                        byte previousNextValue = inputBytes[i - 1];\n\
    \                        byte previousValue = previousNextValue;\n           \
    \             byte currentNextValue = inputBytes[i + 1];\n                   \
    \     outputBytes[i] = (byte) (previousValue + currentValue);\n              \
    \      }\n                    break;\n                case (byte)'e':\n      \
    \          case (byte)'E':\n                    if (i > 0 && (i > 1 || i % 2 ==\
    \ 0)) {\n                        byte previousValue = inputBytes[i - 1];\n   \
    \                     byte currentValue = inputBytes[i];\n                   \
    \     byte previousNextValue = inputBytes[i - 1];\n                        byte\
    \ previousValue = previousNextValue;\n                        byte currentNextValue\
    \ = inputBytes[i + 1];\n                        byte nextValue = inputBytes[i\
    \ + 1];\n                        outputBytes[i] = (byte) (previousValue + currentValue);\n\
    \                    }\n                    break;\n                case (byte)'i':\n\
    \                case (byte)'I':\n                    if (i > 0 && (i > 1 || i\
    \ % 2 == 1)) {\n                        byte previousValue = inputBytes[i - 1];\n\
    \                        byte currentValue = inputBytes[i];\n                \
    \        byte previousNextValue = inputBytes[i - 1];\n                       \
    \ byte previousValue = previousNextValue;\n                        byte currentNextValue\
    \ = inputBytes[i + 1];\n                        byte nextValue = inputBytes[i\
    \ + 1];\n                        outputBytes[i] = (byte) (previousValue + currentValue);\n\
    \                    }\n                    break;\n                case (byte)'o':\n\
    \                case (byte)'O':\n                    if (i > 0) {\n         \
    \               byte previousValue = inputBytes[i - 1];\n                    \
    \    byte currentValue = inputBytes[i];\n                        byte previousNextValue\
    \ = inputBytes[i - 1];\n                        byte previousValue = previousNextValue;\n\
    \                        byte currentNextValue = inputBytes[i + 1];\n        \
    \                outputBytes[i] = (byte) (previousValue + currentValue);\n   \
    \                 }\n                    break;\n                case (byte)'u':\n\
    \                case (byte)'U':\n                    if (i > 0 && (i > 1 || i\
    \ % 2 == 0)) {\n                        byte previousValue = inputBytes[i - 1];\n\
    \                        byte currentValue = inputBytes[i];\n                \
    \        byte previousNextValue = inputBytes[i - 1];\n                       \
    \ byte previousValue = previousNextValue;\n                        byte currentNextValue\
    \ = input", "        char[] alphabet = new char[] { 'A', 'B', 'C', 'D', 'E', 'F',\
    \ 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',\
    \ 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };\n  \
    \      string codedMessage = string.Empty;\n        char[] messageCharArray =\
    \ message.ToCharArray();\n        for (int i = 0; i < messageCharArray.Length;\
    \ i++) {\n            codedMessage += messageCharArray[i].ToString().ToUpper();\n\
    \        }\n        codedMessage += messageCharArray.Length.ToString();\n    \
    \    for (int i = 0; i < messageCharArray.Length; i++) {\n            codedMessage\
    \ += alphabet[(messageCharArray[i] - 65 + 2) % 26];\n        }\n        return\
    \ codedMessage;", "        // Use a HashTable to map each vowel to a letter 2\
    \ places \n        // ahead. \n        // Create a List to hold the new string.\
    \ \n        // Create a counter for each letter. \n        // Initialize counter\
    \ to 0. \n        Hashtable vowels = new Hashtable();\n        List<string> newMessage\
    \ = new List<string>();\n        int counter = 0;\n        foreach (char letter\
    \ in message.ToCharArray()) {\n            // Get vowel from the hash table. \n\
    \            string vowel = vowels.ContainsKey(letter) \n                ? vowels[letter].ToString()\
    \ \n                : letter.ToString();\n            // Increment counter by\
    \ 2 if current letter is a vowel. \n            // Subtract 1 from counter if\
    \ current letter is a consonant. \n            if (vowel.Equals(\"A\", StringComparison.InvariantCultureIgnoreCase)\
    \ || vowel.Equals(\"E\", StringComparison.InvariantCultureIgnoreCase) || vowel.Equals(\"\
    I\", StringComparison.InvariantCultureIgnoreCase) || vowel.Equals(\"O\", StringComparison.InvariantCultureIgnoreCase)\
    \ || vowel.Equals(\"U\", StringComparison.InvariantCultureIgnoreCase)) {\n   \
    \             counter = counter + 2;\n            }\n            else {\n    \
    \            counter = counter - 1;\n            }\n            // Add letter\
    \ to new message if current letter is a vowel. \n            // Add vowel to new\
    \ message if current letter is a consonant. \n            if (vowel.Equals(\"\
    A\", StringComparison.InvariantCultureIgnoreCase) || vowel.Equals(\"E\", StringComparison.InvariantCultureIgnoreCase)\
    \ || vowel.Equals(\"I\", StringComparison.InvariantCultureIgnoreCase) || vowel.Equals(\"\
    O\", StringComparison.InvariantCultureIgnoreCase) || vowel.Equals(\"U\", StringComparison.InvariantCultureIgnoreCase))\
    \ {\n                newMessage.Add(vowel);\n                newMessage.Add(vowels[letter]);\n\
    \            }\n            else {\n                newMessage.Add(vowel);\n \
    \           }\n            vowels[letter] = vowel;\n        }\n        // Return\
    \ new string. \n        return string.Concat(newMessage.ToArray());", "      \
    \  string result = string.Empty;\n        foreach (char letter in message) {\n\
    \            char replacement;\n            switch (letter) {\n              \
    \  case 'a':\n                    replacement = 'b';\n                    break;\n\
    \                case 'b':\n                    replacement = 'c';\n         \
    \           break;\n                case 'c':\n                    replacement\
    \ = 'd';\n                    break;\n                case 'd':\n            \
    \        replacement = 'e';\n                    break;\n                case\
    \ 'e':\n                    replacement = 'f';\n                    break;\n \
    \               case 'f':\n                    replacement = 'g';\n          \
    \          break;\n                case 'g':\n                    replacement\
    \ = 'h';\n                    break;\n                case 'h':\n            \
    \        replacement = 'i';\n                    break;\n                case\
    \ 'i':\n                    replacement = 'j';\n                    break;\n \
    \               case 'j':\n                    replacement = 'k';\n          \
    \          break;\n                case 'k':\n                    replacement\
    \ = 'l';\n                    break;\n                case 'l':\n            \
    \        replacement = 'm';\n                    break;\n                case\
    \ 'm':\n                    replacement = 'n';\n                    break;\n \
    \               case 'n':\n                    replacement = 'o';\n          \
    \          break;\n                case 'o':\n                    replacement\
    \ = 'p';\n                    break;\n                case 'p':\n            \
    \        replacement = 'q';\n                    break;\n                case\
    \ 'q':\n                    replacement = 'r';\n                    break;\n \
    \               case 'r':\n                    replacement = 's';\n          \
    \          break;\n                case 's':\n                    replacement\
    \ = 't';\n                    break;\n                case 't':\n            \
    \        replacement = 'u';\n                    break;\n                case\
    \ 'u':\n                    replacement = 'v';\n                    break;\n \
    \               case 'v':\n                    replacement = 'w';\n          \
    \          break;\n                case 'w':\n                    replacement\
    \ = 'x';\n                    break;\n                case 'x':\n            \
    \        replacement = 'y';\n                    break;\n                case\
    \ 'y':\n                    replacement = 'z';\n                    break;\n \
    \               case 'z':\n                    replacement = 'A';\n          \
    \          break;\n                case 'A':\n                    replacement\
    \ = 'B';\n                    break;\n                case 'B':\n            \
    \        replacement = 'C';\n                    break;\n                case\
    \ 'C':\n                    replacement = 'D';\n                    break;\n \
    \               case 'D':\n                    replacement = 'E';\n          \
    \          break;\n                case 'E':\n                    replacement\
    \ = 'F';\n                    break;\n                case 'F':\n            \
    \        replacement = 'G';\n                    break;\n                case\
    \ 'G':\n                    replacement = 'H';\n                    break;\n \
    \               case 'H':\n                    replacement = 'I';\n          \
    \          break;\n                case 'I':\n                    replacement\
    \ = 'J';\n                    break;\n                case 'J':\n            \
    \        replacement = 'K';\n                    break;\n                case\
    \ 'K':\n                    replacement = 'L';\n                    break;\n \
    \               case 'L':\n                    replacement = 'M';\n          \
    \          break;\n                case 'M':\n                    replacement\
    \ = 'N';\n                    break;\n                case 'N':\n            \
    \        replacement = 'O';\n                    break;\n                case\
    \ 'O':\n                    replacement = 'P';\n                    break;", " \
    \       char[] alphabet = \n            { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',\
    \ 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',\
    \ 'y', 'z' };\n        char[] vowels = \n            { 'a', 'e', 'i', 'o', 'u',\
    \ 'y' };\n\n        var alphabetDict = \n            alphabet\n            .GroupBy(c\
    \ => c.ToUpper())\n            .Select(gp => gp.ToCharArray())\n            .ToDictionary(c\
    \ => c, c => alphabetDict.Single(d => d.Key.Equals(c)).Value);\n        var vowelDict\
    \ = \n            vowels\n            .GroupBy(c => c)\n            .Select(gp\
    \ => gp.ToCharArray())\n            .ToDictionary(c => c, c => vowelDict.Single(d\
    \ => d.Key.Equals(c)).Value);\n\n        var chars = \n            message.ToCharArray()\n\
    \            .Where(c => alphabetDict.ContainsKey(c) || vowelDict.ContainsKey(c))\n\
    \            .Select(c => alphabetDict.ContainsKey(c) ? alphabetDict[c] : vowelDict[c])\n\
    \            .ToList();\n        var result = new StringBuilder();\n        for\
    \ (int i = 0; i < chars.Count; i++) {\n            result.Append(chars[i]);\n\
    \            result.Append(chars[chars.Count - i - 1]);\n        }\n        return\
    \ result.ToString();", "        int vowelCount = 0;\n        string result = \"\
    \";\n        foreach (char letter in message) {\n            if (char.IsLetter(letter))\
    \ {\n                result += letter;\n            } else if (char.IsVowel(letter))\
    \ {\n                result += string.Concat(\n                    Enumerable.Range(0,\
    \ vowelCount)\n                    .Select(n => letter.ToString())\n         \
    \           .TakeWhile(n => !char.IsLetter(n)).ToArray());\n                result\
    \ += string.Concat(\n                    Enumerable.Range(1, vowelCount)\n   \
    \                 .Select(n => letter.ToString())\n                    .TakeWhile(n\
    \ => !char.IsLetter(n)).ToArray());\n                vowelCount++;\n         \
    \   }\n        }\n        return result;", "        string result = string.Empty;\n\
    \        \n        // Your code here\n        string lowerCaseMessage = message.ToLower();\n\
    \        string vowels = \"aeiouy\";\n        var counters = new[] { \"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\" };\n        for (int i = 0; i < lowerCaseMessage.Length;\
    \ i++) {\n            char c = lowerCaseMessage[i];\n            int counter =\
    \ counters.IndexOf(c);\n            if (counter >= 0) {\n                result\
    \ = result + counters[counter - 2];\n            } else {\n                result\
    \ = result + c;\n            }\n        }\n        return result;", "        //\
    \ The tricky part of this program is figuring out what \n        // letter to\
    \ replace what with. One way to do this \n        // would be to just go through\
    \ the message and replace \n        // every vowel with its index in the alphabet.\
    \ This \n        // would work for the first example shown above. However,\n \
    \       // it won't work for the second example shown above.\n        // To solve\
    \ this problem, we need to loop through the message\n        // replacing every\
    \ vowel with its index in the alphabet. \n        // This is where I am stuck\
    \ and I am unsure how to go about \n        // solving this problem. \n      \
    \  string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string newMessage\
    \ = \"\";\n        foreach (char letter in message) {\n            if (char.IsLetter(letter))\
    \ {\n                // If this letter isn't the first letter in the message,\n\
    \                // append it to the new message.\n                if (newMessage\
    \ != \"\") {\n                    newMessage += letter;\n                }\n \
    \               // Otherwise, if the letter is not a vowel, append it\n      \
    \          // to the new message and continue.\n                else {\n     \
    \               newMessage += letter;\n                    continue;\n       \
    \         }\n            }\n            // If the letter is in the alphabet, get\
    \ the index of \n            // the letter that is 2 places ahead of it in the\
    \ alphabet.\n            // If that index is -1, that means there is no such letter\
    \ \n            // to replace it with. \n            else {\n                int\
    \ index = alphabet.IndexOf(letter);\n                if (index == -1) {\n    \
    \                // If there is no index 2 places ahead of the letter \n     \
    \               // that would be in the alphabet then append the \n          \
    \          // letter to newMessage and continue.\n                    newMessage\
    \ += letter;\n                    continue;\n                }\n             \
    \   else {\n                    newMessage += alphabet[(index + 2) % alphabet.Length];\n\
    \                }\n            }\n        }\n        return newMessage;", " \
    \       string ret = \"\";\n        string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n        char[] vowels = { ',', '.', '!', '?' };\n        char[] lowerCase =\
    \ message.ToLower();\n        char[] upperCase = message.ToUpper();\n        foreach\
    \ (char c in lowerCase) {\n            int index = alphabet.IndexOf(c);\n    \
    \        if (index == -1) {\n                throw new Exception(\"Unexpected\
    \ character in message: \" + c.ToString());\n            }\n            string\
    \ s = alphabet.Substring(index + 1).ToUpper();\n            ret += s.Substring(1,\
    \ 1) + s.Substring(0, 1) + \"1\";\n        }\n        foreach (char c in upperCase)\
    \ {\n            int index = alphabet.IndexOf(c);\n            if (index == -1)\
    \ {\n                throw new Exception(\"Unexpected character in message: \"\
    \ + c.ToString());\n            }\n            string s = alphabet.Substring(index\
    \ + 1).ToUpper();\n            ret += s.Substring(1, 1) + s.Substring(0, 1) +\
    \ \"1\";\n        }\n        foreach (char c in vowels) {\n            int index\
    \ = alphabet.IndexOf(c);\n            if (index == -1) {\n                throw\
    \ new Exception(\"Unexpected character in message: \" + c.ToString());\n     \
    \       }\n            string s = alphabet.Substring(index + 1).ToUpper();\n \
    \           ret += s.Substring(1, 1) + s.Substring(0, 1) + \"1\";\n        }\n\
    \        return ret;", "        var alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    .ToCharArray();\n        var vowels = \"aeiouAEIOU\".ToCharArray();\n        var\
    \ vowelIndexes = new Dictionary<char, int>();\n        var letterIndexes = new\
    \ Dictionary<char, int>();\n        var maxLength = 0;\n        var maxIndex =\
    \ 0;\n        var maxCharIndex = 0;\n        foreach (var c in message) {\n  \
    \          var index = alphabet.IndexOf(c);\n            letterIndexes[c] = index;\n\
    \            if (index < maxIndex) {\n                maxLength = maxIndex - index;\n\
    \            }\n            vowelIndexes[c] = vowels.IndexOf(c);\n           \
    \ if (vowelIndexes[c] == -1) {\n                maxIndex++;\n                maxCharIndex\
    \ = maxIndex-1;\n            }\n            else {\n                maxCharIndex\
    \ = vowelIndexes[c];\n            }\n        }\n        var length = maxLength\
    \ + 1;\n        var buffer = new char[length];\n        for (int i = 0; i < length;\
    \ i++) {\n            buffer[i] = alphabet[letterIndexes[message[i]]];\n     \
    \   }\n        var buffer = buffer[maxIndex - maxLength];\n        var i = maxLength;\n\
    \        bool foundVowel = false;\n        while ((i = i - 1) >= 0) {\n      \
    \      var c = buffer[i];\n            if (vowelIndexes.TryGetValue(c, out var\
    \ vowelIndex)) {\n                if (i == maxCharIndex) {\n                 \
    \   var index = maxIndex + vowelIndex;\n                    var newBuffer = new\
    \ char[buffer.Length + 1];\n                    Array.Copy(buffer, 1, newBuffer,\
    \ 0, buffer.Length - 1);\n                    newBuffer[buffer.Length - 1] = alphabet[index];\n\
    \                    buffer = newBuffer;\n                }\n                else\
    \ {\n                    var newBuffer = new char[buffer.Length + 1];\n      \
    \              Array.Copy(buffer, 1, newBuffer, 0, i);\n                    newBuffer[i]\
    \ = alphabet[vowelIndex];\n                    newBuffer[i+1] = alphabet[letterIndexes[message[i+1]]];\n\
    \                    buffer = newBuffer;\n                }\n                foundVowel\
    \ = true;\n            }\n        }\n        if (foundVowel == false) {\n    \
    \        buffer = buffer[0];\n        }\n        return buffer;", "        //\
    \ The first thing we do is split the message into an array of\n        // letters,\
    \ and a count of the letters.\n        char[] letters = message.ToCharArray();\n\
    \        int letterCount = letters.Length;\n\n        // The next step is to create\
    \ a dictionary with all the vowels\n        // and the letters that follow them.\n\
    \        // e.g. \"AEIOU\" => \"AE\"\n        Dictionary<string, string> vowels\
    \ = new Dictionary<string, string>();\n        vowels.Add(\"AE\", \"E\");\n  \
    \      vowels.Add(\"AH\", \"A\");\n        vowels.Add(\"AO\", \"O\");\n      \
    \  vowels.Add(\"AW\", \"W\");\n        vowels.Add(\"AY\", \"Y\");\n        vowels.Add(\"\
    B\", \"B\");\n        vowels.Add(\"CH\", \"C\");\n        vowels.Add(\"D\", \"\
    D\");\n        vowels.Add(\"DH\", \"D\");\n        vowels.Add(\"EH\", \"E\");\n\
    \        vowels.Add(\"ER\", \"E\");\n        vowels.Add(\"EY\", \"Y\");\n    \
    \    vowels.Add(\"F\", \"F\");\n        vowels.Add(\"G\", \"G\");\n        vowels.Add(\"\
    HH\", \"H\");\n        vowels.Add(\"IH\", \"I\");\n        vowels.Add(\"IH\",\
    \ \"I\");\n        vowels.Add(\"IH\", \"I\");\n        vowels.Add(\"IH\", \"I\"\
    );\n        vowels.Add(\"JH\", \"J\");\n        vowels.Add(\"K\", \"K\");\n  \
    \      vowels.Add(\"L\", \"L\");\n        vowels.Add(\"N\", \"N\");\n        vowels.Add(\"\
    N\", \"N\");\n        vowels.Add(\"O\", \"O\");\n        vowels.Add(\"P\", \"\
    P\");\n        vowels.Add(\"Q\", \"Q\");\n        vowels.Add(\"R\", \"R\");\n\
    \        vowels.Add(\"S\", \"S\");\n        vowels.Add(\"SH\", \"S\");\n     \
    \   vowels.Add(\"T\", \"T\");\n        vowels.Add(\"TH\", \"T\");\n        vowels.Add(\"\
    UH\", \"U\");\n        vowels.Add(\"UW\", \"W\");\n        vowels.Add(\"Y\", \"\
    Y\");\n        vowels.Add(\"Z\", \"Z\");\n        vowels.Add(\"ZH\", \"Z\");\n\
    \n        // Now we use the dictionary to replace the vowels in the message\n\
    \        // with the appropriate letters.\n        StringBuilder sb = new StringBuilder(message.Length);\n\
    \        for (int i = 0; i < message.Length; i++) {\n            // If the letter\
    \ is in the dictionary, replace the vowel with\n            // the letter that\
    \ appears 2 letters ahead ", "        if (message == null) {\n            throw\
    \ new ArgumentNullException(\"message\");\n        }\n        \n        var builder\
    \ = new StringBuilder(message.Length);\n        int i = 0;\n        foreach (var\
    \ c in message) {\n            switch (c) {\n                case 'a':\n     \
    \               builder.Append(\"z\");\n                    break;\n         \
    \       case 'e':\n                    builder.Append(\"z\");\n              \
    \      break;\n                case 'i':\n                    builder.Append(\"\
    z\");\n                    break;\n                case 'o':\n               \
    \     builder.Append(\"z\");\n                    break;\n                case\
    \ 'u':\n                    builder.Append(\"z\");\n                    break;\n\
    \                case 'y':\n                    builder.Append(\"z\");\n     \
    \               break;\n                default:\n                    var index\
    \ = i + 1;\n                    char nextLetter = message.ElementAtOrDefault(index\
    \ + 1);\n                    char prevLetter = message.ElementAtOrDefault(index\
    \ - 1);\n                    if (char.IsUpper(c)) {\n                        if\
    \ (nextLetter == 'A' \n                            || nextLetter == 'E' \n   \
    \                         || nextLetter == 'I' \n                            ||\
    \ nextLetter == 'O' \n                            || nextLetter == 'U' \n    \
    \                        || nextLetter == 'Y') {\n                           \
    \ builder.Append(nextLetter);\n                            builder.Append(\"z\"\
    );\n                        }\n                    }\n                    if (char.IsLower(c))\
    \ {\n                        if (prevLetter == 'a' \n                        \
    \    || prevLetter == 'e' \n                            || prevLetter == 'i' \n\
    \                            || prevLetter == 'o' \n                         \
    \   || prevLetter == 'u' \n                            || prevLetter == 'y') {\n\
    \                            builder.Append(prevLetter);\n                   \
    \         builder.Append(\"z\");\n                        }\n                \
    \    }\n                    builder.Append(c);\n                    break;\n \
    \           }\n            i = index + 1;\n        }\n        return builder.ToString();",
  "        // your code\n        StringBuilder sb = new StringBuilder();\n       \
    \ char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        string newWord;\n\n    \
    \    foreach (char c in message) {\n            if (vowels.Contains(c)) {\n  \
    \              newWord = SwapCase(c);\n            }\n            else {\n   \
    \             newWord = c;\n            }\n            sb.Append(newWord);\n \
    \       }\n        return sb.ToString();", "        // TODO: Encode the message\
    \ in this method\n        string result = \"\";\n        char[] message = message.ToLowerInvariant().ToCharArray();\n\
    \        int count = 0;\n        for (int i = 0; i < message.Length; i++) {\n\
    \            if (message[i] >= 'a' && message[i] <= 'z') {\n                result\
    \ += message[i];\n                count++;\n            } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n                result += message[i];\n    \
    \            count++;\n            } else if (message[i] == '_') {\n         \
    \       result += ' ';\n                count++;\n            } else if (message[i]\
    \ == '.') {\n                result += ' ';\n                count++;\n      \
    \      } else if (message[i] == ' ') {\n                result += ' ';\n     \
    \           count++;\n            } else if (message[i] == ',') {\n          \
    \      result += ' ';\n                count++;\n            } else if (message[i]\
    \ == ':') {\n                result += ' ';\n                count++;\n      \
    \      } else if (message[i] == '!') {\n                result += ' ';\n     \
    \           count++;\n            } else if (message[i] == '?') {\n          \
    \      result += ' ';\n                count++;\n            } else if (message[i]\
    \ == '(') {\n                result += ' ';\n                count++;\n      \
    \      } else if (message[i] == ')') {\n                result += ' ';\n     \
    \           count++;\n            } else if (message[i] == '-') {\n          \
    \      result += ' ';\n                count++;\n            } else if (message[i]\
    \ == '+') {\n                result += ' ';\n                count++;\n      \
    \      } else if (message[i] == '=') {\n                result += ' ';\n     \
    \           count++;\n            } else if (message[i] == '[') {\n          \
    \      result += ' ';\n                count++;\n            } else if (message[i]\
    \ == ']') {\n                result += ' ';\n                count++;\n      \
    \      } else if (message[i] == '\\\\') {\n                result += ' ';\n  \
    \              count++;\n            } else if (message[i] == '^') {\n       \
    \         result += ' ';\n                count++;\n            } else if (message[i]\
    \ == '`') {\n                result += ' ';\n                count++;\n      \
    \      } else if (message[i] == '[') {\n                result += ' ';\n     \
    \           count++;\n            } else if (message[i] == ']') {\n          \
    \      result += ' ';\n                count++;\n            } else if (message[i]\
    \ == '{') {\n                result += ' ';\n                count++;\n      \
    \      } else if (message[i] == '}') {\n                result += ' ';\n     \
    \           count++;\n            } else if (message[i] == '\\\\') {\n       \
    \         result += ' ';\n                count++;\n            } else if (message[i]\
    \ == '$') {\n                result += ' ';\n                count++;\n      \
    \      } else if (message[i] == '%') {\n                result += ' ';\n     \
    \           count++;\n            } else if (message[i] == '*') {\n          \
    \      result += ' ';\n                count++;\n            } else if (message[i]\
    \ == '(') {\n                result += ' ';\n                count++;\n      \
    \      } else if (message[i] == ')') {\n                result += ' ';\n     \
    \           count++;\n            } else if (message", "        var ae = Encoding.ASCII;\n\
    \        var alphabet = Enumerable.Range(ae.MinValue, ae.MaxValue - ae.MinValue\
    \ + 1).Select(x => char.ToLowerInvariant(x)).ToArray();\n        alphabet[0] =\
    \ \"z\";\n        alphabet[26] = \"z\";\n        StringBuilder sb = new StringBuilder();\n\
    \        foreach(var c in message) {\n            if(char.IsUpper(c)) {\n    \
    \            sb.Append(char.ToUpperInvariant(c));\n            } else {\n    \
    \            sb.Append(c);\n            }\n        }\n        foreach(var letter\
    \ in alphabet) {\n            var n = alphabet.IndexOf(letter);\n            if(n\
    \ >= 0) {\n                for(var i = 1; i < n; i++) {\n                    var\
    \ s = alphabet[i - 1];\n                    var t = alphabet[i];\n           \
    \         var f = alphabet[i + 1];\n                    sb.Replace(s, t);\n  \
    \                  sb.Replace(t, f);\n                }\n            }\n     \
    \   }\n        return sb.ToString();", "        string newMessage = \"\";\n  \
    \      foreach (char c in message) {\n            int currentChar = Convert.ToInt32(c);\n\
    \            if (currentChar >= 97 && currentChar <= 122) {\n                currentChar\
    \ = (char) (currentChar + 2 - 'a');\n            }\n            newMessage +=\
    \ currentChar;\n        }\n        foreach (char c in newMessage) {\n        \
    \    int currentChar = Convert.ToInt32(c);\n            if (currentChar >= 65\
    \ && currentChar <= 90) {\n                newMessage = (char) (currentChar +\
    \ 2 - 'a');\n            }\n        }\n        return newMessage;", "        string\
    \ result = \"\";\n        string vowels = \"AEIOUaeiou\";\n        Regex regex\
    \ = new Regex(@\"[\" + vowels + \"]\");\n\n        foreach (string vowel in vowels.ToCharArray())\
    \ {\n            string toSwap = regex.Replace(message, vowel);\n            int\
    \ position = vowels.IndexOf(vowel) + 1;\n            string replace = vowels.Substring(position,\
    \ 1);\n            result += toSwap.Replace(replace, vowel) + replace;\n     \
    \   }\n        return result;", "        var arr = message.ToCharArray();\n  \
    \      List<char> lst = new List<char>();\n        foreach (var item in arr) {\n\
    \            if (Char.IsLetter(item)) {\n                switch (item) {\n   \
    \                 case 'A':\n                    case 'B':\n                 \
    \   case 'C':\n                    case 'D':\n                    case 'E':\n\
    \                    case 'F':\n                    case 'G':\n              \
    \      case 'H':\n                    case 'I':\n                    case 'J':\n\
    \                    case 'K':\n                    case 'L':\n              \
    \      case 'M':\n                    case 'N':\n                    case 'O':\n\
    \                    case 'P':\n                    case 'Q':\n              \
    \      case 'R':\n                    case 'S':\n                    case 'T':\n\
    \                    case 'U':\n                    case 'V':\n              \
    \      case 'W':\n                    case 'X':\n                    case 'Y':\n\
    \                    case 'Z':\n                    case 'a':\n              \
    \      case 'b':\n                    case 'c':\n                    case 'd':\n\
    \                    case 'e':\n                    case 'f':\n              \
    \      case 'g':\n                    case 'h':\n                    case 'i':\n\
    \                    case 'j':\n                    case 'k':\n              \
    \      case 'l':\n                    case 'm':\n                    case 'n':\n\
    \                    case 'o':\n                    case 'p':\n              \
    \      case 'q':\n                    case 'r':\n                    case 's':\n\
    \                    case 't':\n                    case 'u':\n              \
    \      case 'v':\n                    case 'w':\n                    case 'x':\n\
    \                    case 'y':\n                    case 'z':\n              \
    \          lst.Add(item.ToUpper());\n                        break;\n        \
    \            default:\n                        lst.Add(item);\n              \
    \          break;\n                }\n            }\n        }\n\n        for\
    \ (int i = 0; i < lst.Count - 1; i++) {\n            for (int j = i + 1; j < lst.Count;\
    \ j++) {\n                if (lst[i] == lst[j] && i != j) {\n                \
    \    char temp = lst[i];\n                    lst[i] = lst[j];\n             \
    \       lst[j] = temp;\n                }\n            }\n        }\n        string\
    \ newMessage = string.Empty;\n        for (int i = 0; i < lst.Count; i++) {\n\
    \            newMessage += lst[i];\n        }\n\n        return newMessage;",
  "        return message.ToLower().Replace(\"a\", \"e\").Replace(\"e\", \"a\")\n\
    \            .Replace(\"i\", \"o\").Replace(\"o\", \"i\").Replace(\"u\", \"a\"\
    )\n            .Replace(\"a\", \"e\").Replace(\"e\", \"a\").Replace(\"i\", \"\
    o\")\n            .Replace(\"o\", \"i\").Replace(\"u\", \"a\").Replace(\"a\",\
    \ \"e\")\n            .Replace(\"e\", \"a\").Replace(\"i\", \"o\").Replace(\"\
    o\", \"i\")\n            .Replace(\"u\", \"a\").Replace(\"a\", \"e\").Replace(\"\
    e\", \"a\")\n            .Replace(\"i\", \"o\").Replace(\"o\", \"i\").Replace(\"\
    u\", \"a\");", "        StringBuilder output = new StringBuilder();\n        string\
    \ swapCase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        string vowels = \"AEIOU\"\
    ;\n        int maxVowelIndex = vowels.Length - 1;\n        for (int i = 0; i <\
    \ message.Length; i++) {\n            char a = message[i];\n            char b\
    \ = swapCase[a];\n            int j = i;\n            if (maxVowelIndex == j -\
    \ 1) {\n                maxVowelIndex = 0;\n            }\n            if (maxVowelIndex\
    \ <= j - 2) {\n                int v = vowels.IndexOf(b);\n                int\
    \ s = maxVowelIndex - j - 1;\n                output[j] = (char)(v + s);\n   \
    \         } else {\n                output[j] = (char)b;\n            }\n    \
    \    }\n        return output.ToString();", "        string vowels = \"AEIOU\"\
    ;\n        string encodedMessage = \"\";\n        List<string> lettersAlphabet\
    \ = new List<string>();\n        lettersAlphabet.Add(\"A\");\n        lettersAlphabet.Add(\"\
    E\");\n        lettersAlphabet.Add(\"I\");\n        lettersAlphabet.Add(\"O\"\
    );\n        lettersAlphabet.Add(\"U\");\n        foreach (char letter in message)\
    \ {\n            if (vowels.Contains(letter)) {\n                int index = lettersAlphabet.IndexOf(letter);\n\
    \                if (index > 0) {\n                    string beforeLetter = lettersAlphabet.ElementAt(index\
    \ - 1);\n                    string afterLetter = lettersAlphabet.ElementAt(index);\n\
    \                    encodedMessage += beforeLetter + afterLetter;\n         \
    \       } else {\n                    encodedMessage += letter;\n            \
    \    }\n            } else {\n                encodedMessage += letter;\n    \
    \        }\n        }\n        return encodedMessage;", "        // TODO:\n  \
    \      return \"\";", "        string encryptedMessage = \"\";\n        string\
    \ alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        foreach (char letter in\
    \ message) {\n            encryptedMessage += letter.ToString().ToUpper();\n \
    \           encryptedMessage += letter.ToString().ToLower();\n        }\n\n  \
    \      char[] vowels = \"AEIOUaeiou\".ToCharArray();\n        for (int i = 0;\
    \ i < vowels.Length; i++) {\n            string vowelIndex = alphabet.Substring((vowels.IndexOf(vowels[i])),\
    \ 2);\n            encryptedMessage += vowelIndex.ToString().ToUpper();\n    \
    \        encryptedMessage += vowelIndex.ToString().ToLower();\n        }\n\n \
    \       return encryptedMessage;", "        string result = \"\";\n        foreach\
    \ (char letter in message)\n        {\n            char upper = char.ToUpper(letter);\n\
    \            result += upper;\n        }\n        char[] vowels = new[] {'a',\
    \ 'e', 'i', 'o', 'u'};\n        char[] letters = new[] {'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'};\n\
    \        char[] doubleLetters = new[] {'B', 'D', 'F', 'G', 'H', 'J', 'K', 'L',\
    \ 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'};\n        for (int\
    \ i = 0; i < message.Length; i++) {\n            char currentLetter = message[i];\n\
    \            int position = vowels.IndexOf(currentLetter);\n            if (position\
    \ != -1) {\n                result += vowels[position];\n            } else if\
    \ (letters.Contains(currentLetter)) {\n                result += letters[letters.IndexOf(currentLetter)];\n\
    \            } else if (doubleLetters.Contains(currentLetter)) {\n           \
    \     int position2 = letters.IndexOf(currentLetter);\n                int position3\
    \ = vowels.IndexOf(message[i + 1]);\n                if (position2 == position3)\
    \ {\n                    result += doubleLetters[doubleLetters.IndexOf(message[i\
    \ + 1])];\n                }\n            }\n        }\n        return result;",
  "        // Your code here\n        char[] letters = message.ToCharArray();\n  \
    \      char[] newletters = new char[letters.Length];\n        for (int i = 0;\
    \ i < letters.Length; i++) {\n            if (char.IsUpper(letters[i])) {\n  \
    \              newletters[i] = letters[i].ToString().ToUpper();\n            }\n\
    \            else if (char.IsLower(letters[i])) {\n                newletters[i]\
    \ = letters[i].ToString().ToLower();\n            }\n            else {\n    \
    \            newletters[i] = letters[i].ToString();\n            }\n        }\n\
    \        string result = new string(newletters);\n        result = result.Replace(\"\
    A\",\"B\");\n        result = result.Replace(\"E\",\"F\");\n        result = result.Replace(\"\
    I\",\"J\");\n        result = result.Replace(\"O\",\"P\");\n        result = result.Replace(\"\
    U\",\"V\");\n        result = result.Replace(\"S\",\"T\");\n        result = result.Replace(\"\
    C\",\"K\");\n        result = result.Replace(\"G\",\"R\");\n        result = result.Replace(\"\
    M\",\"N\");\n        result = result.Replace(\"D\",\"L\");\n        result = result.Replace(\"\
    P\",\"M\");\n        result = result.Replace(\"F\",\"N\");\n        result = result.Replace(\"\
    H\",\"P\");\n        result = result.Replace(\"V\",\"Q\");\n        result = result.Replace(\"\
    R\",\"S\");\n        result = result.Replace(\"T\",\"R\");\n        result = result.Replace(\"\
    K\",\"C\");\n        result = result.Replace(\"J\",\"I\");\n        result = result.Replace(\"\
    N\",\"V\");\n        result = result.Replace(\"Q\",\"H\");\n        result = result.Replace(\"\
    L\",\"D\");\n        result = result.Replace(\"M\",\"G\");\n        result = result.Replace(\"\
    N\",\"S\");\n        result = result.Replace(\"B\",\"A\");\n        result = result.Replace(\"\
    F\",\"E\");\n        result = result.Replace(\"J\",\"I\");\n        result = result.Replace(\"\
    P\",\"O\");\n        result = result.Replace(\"V\",\"U\");\n        result = result.Replace(\"\
    S\",\"T\");\n        result = result.Replace(\"K\",\"C\");\n        result = result.Replace(\"\
    R\",\"G\");\n        result = result.Replace(\"T\",\"S\");\n        result = result.Replace(\"\
    R\",\"M\");\n        result = result.Replace(\"C\",\"K\");\n        result = result.Replace(\"\
    G\",\"R\");\n        result = result.Replace(\"N\",\"M\");\n        result = result.Replace(\"\
    D\",\"L\");\n        result = result.Replace(\"P\",\"M\");\n        result = result.Replace(\"\
    F\",\"N\");\n        result = result.Replace(\"H\",\"P\");\n        result = result.Replace(\"\
    V\",\"Q\");\n        result = result.Replace(\"R\",\"S\");\n        result = result.Replace(\"\
    T\",\"R\");\n        result = result.Replace(\"K\",\"C\");\n        result = result.Replace(\"\
    J\",\"I\");\n", "        char[] vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I',\
    \ 'O', 'U'}; //lowercase a to z \n        int firstVowel = vowels.IndexOf(message.Substring(0,1));\n\
    \        int secondVowel = vowels.IndexOf(message.Substring(1,1));\n        int\
    \ lastVowel = vowels.IndexOf(message.Substring(message.Length-1,1));\n       \
    \ char[] finalLetters = new char[message.Length];\n        for (int i = 0; i <\
    \ message.Length; i++) {\n            char letter = message[i];\n            if\
    \ (letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter\
    \ == 'u')\n                finalLetters[i] = (char)firstVowel;\n            else\
    \ if (letter != 'a' && letter != 'e' && letter != 'i' && letter != 'o' && letter\
    \ != 'u')\n                finalLetters[i] = (char)secondVowel;\n            else\
    \ if (letter != 'a' && letter != 'e' && letter != 'i' && letter != 'o' && letter\
    \ != 'u')\n                finalLetters[i] = (char)lastVowel;\n        }\n   \
    \     return finalLetters.Aggregate((x,y) => x + y);", "        Dictionary<string,\
    \ char> englishLetters = new Dictionary<string, char> \n        {\n          \
    \  {\"a\", 'b'}, \n            {\"b\", 'a'}, \n            {\"c\", 'd'}, \n  \
    \          {\"d\", 'c'}, \n            {\"e\", 'f'}, \n            {\"f\", 'e'},\
    \ \n            {\"g\", 'h'}, \n            {\"h\", 'g'}, \n            {\"i\"\
    , 'j'}, \n            {\"j\", 'i'}, \n            {\"k\", 'l'}, \n           \
    \ {\"l\", 'k'}, \n            {\"m\", 'n'}, \n            {\"n\", 'm'}, \n   \
    \         {\"o\", 'p'}, \n            {\"p\", 'o'}, \n            {\"q\", 'r'},\
    \ \n            {\"r\", 'q'}, \n            {\"s\", 'sb'}, \n            {\"sb\"\
    , 's'}, \n            {\"t\", 't'}, \n            {\"t\", 't'}, \n           \
    \ {\"u\", 'u'}, \n            {\"u\", 'u'}, \n            {\"v\", 'v'}, \n   \
    \         {\"v\", 'v'}, \n            {\"w\", 'w'}, \n            {\"w\", 'w'},\
    \ \n            {\"x\", 'x'}, \n            {\"x\", 'x'}, \n            {\"y\"\
    , 'y'}, \n            {\"y\", 'y'}, \n            {\"z\", 'z'}, \n           \
    \ {\"z\", 'z'}\n        };\n        string result = \"\";\n        for (int i\
    \ = 0; i < message.Length; i++) {\n            char currentChar = message[i];\n\
    \            if (englishLetters.ContainsKey(currentChar)) {\n                result\
    \ += englishLetters[currentChar];\n            } else if (currentChar == '.')\
    \ {\n                result += currentChar;\n            } else {\n          \
    \      result += currentChar;\n            }\n        }\n        return result;",
  "        var result = string.Empty;\n        var vowels = \"AEIOUaeiou\";\n    \
    \    var letters = \"abcdefghijklmnopqrstuvwxyz\";\n        foreach (char c in\
    \ message) {\n            if (letters.IndexOf(c) != -1) {\n                result\
    \ += string.Format(\"{0}{1}{2}\", c[0].ToString(), \n                        \
    \                      letters.IndexOf(c) + 1, c);\n            } else\n     \
    \           if (vowels.IndexOf(c) != -1) {\n                    result += string.Format(\"\
    {0}{1}{2}\", c[0].ToString(), \n                                             \
    \     vowels.IndexOf(c) + 2, c);\n                } else {\n                 \
    \   throw new ArgumentException(\"Invalid character encountered \" + \n      \
    \                                              \"during encoding.\");\n      \
    \          }\n        }\n        return result;", "        char[] vowels = { 'A',\
    \ 'a', 'E', 'e', 'I', 'i', 'O', 'o', 'U', 'u', 'Y', 'y' };\n        var splitted\
    \ = message.ToLower().Split(vowels, StringSplitOptions.RemoveEmptyEntries);\n\
    \        return splitted\n            .Select((s, i) => vowels.Contains(s) ? \n\
    \                vowels.IndexOf(s) + ((i < 2) ? 2 : 0) : s.ToLower())\n      \
    \      .Aggregate((current, next) => current.Replace(next, next))\n          \
    \  .Aggregate((current, next) => current.Replace(\"E\", next));", "        var\
    \ letters = new List<string>();\n        var vowels = \"aeiou\";\n        var\
    \ lettersToIndex = new Dictionary<string, int>();\n        var vowelsToIndex =\
    \ new Dictionary<char, int>();\n        for (int i = 0; i < message.Length; i++)\
    \ {\n            char c = message[i];\n            if (vowels.IndexOf(c) >= 0)\
    \ {\n                var index = vowels.IndexOf(c);\n                if (lettersToIndex.ContainsKey(letters[index]))\
    \ {\n                    int index = lettersToIndex[letters[index]];\n       \
    \             lettersToIndex[letters[index]] = i;\n                    letters[index]\
    \ = c;\n                }\n            } else if (letters.IndexOf(c) >= 0) {\n\
    \                var index = letters.IndexOf(c);\n                if (vowelsToIndex.ContainsKey(c))\
    \ {\n                    int index = vowelsToIndex[c];\n                    vowelsToIndex[c]\
    \ = i;\n                    vowels[index] = c;\n                }\n          \
    \  }\n            if (lettersToIndex.ContainsKey(c)) {\n                int index\
    \ = lettersToIndex[c];\n                lettersToIndex[c] = i;\n             \
    \   letters.Insert(index, c);\n            } else if (vowelsToIndex.ContainsKey(c))\
    \ {\n                int index = vowelsToIndex[c];\n                vowelsToIndex[c]\
    \ = i;\n                vowels.Insert(index, c);\n            }\n        }\n\n\
    \        var result = new StringBuilder();\n        for (int i = 0; i < letters.Count;\
    \ i++) {\n            result.Append(letters[i]);\n        }\n        return result.ToString();",
  "        string result = \"\";\n        char prev = '\\0';\n        foreach (char\
    \ c in message) {\n            if (char.IsUpper(c)) {\n                result\
    \ += char.ToLower(c);\n            }\n            else if (char.IsLower(c)) {\n\
    \                result += char.ToUpper(c);\n            }\n            else {\n\
    \                if (char.IsLetter(c)) {\n                    char next = message[message.IndexOf(c)\
    \ + 1];\n                    char next2 = message[message.IndexOf(c) + 2];\n \
    \                   if (char.IsLetter(next)) {\n                        if (prev\
    \ == 'A') {\n                            result += char.ToLower(next);\n     \
    \                   }\n                        else if (prev == 'a') {\n     \
    \                       result += char.ToUpper(next);\n                      \
    \  }\n                        else {\n                            result += char.ToLower(next);\n\
    \                        }\n                    }\n                    if (char.IsLetter(next2))\
    \ {\n                        if (prev == 'A') {\n                            result\
    \ += char.ToUpper(next2);\n                        }\n                       \
    \ else if (prev == 'a') {\n                            result += char.ToLower(next2);\n\
    \                        }\n                        else {\n                 \
    \           result += char.ToUpper(next2);\n                        }\n      \
    \              }\n                    else {\n                        result +=\
    \ c;\n                    }\n                    prev = c;\n                }\n\
    \                else {\n                    result += c;\n                }\n\
    \            }\n        }\n        return result;", "        StringBuilder result\
    \ = new StringBuilder(message.Length);\n        foreach(char c in message) {\n\
    \            if(!Char.IsLetter(c)) {\n                result.Append(c);\n    \
    \        } else if(Char.IsLetter(c)) {\n                result.Append((char)(c\
    \ + 1));\n                result.Append((char)(c + 2));\n                result.Append((char)(c\
    \ + 1));\n            }\n        }\n        return result.ToString();", '        return
    message;', "        string result = \"\";\n        bool vowel = false;\n     \
    \   bool firstLetter = false;\n        bool secondLetter = false;\n        bool\
    \ thirdLetter = false;\n        char previousLetter = ' ';\n        foreach (char\
    \ letter in message) {\n            if (!vowel) {\n                switch (letter)\
    \ {\n                    case 'a':\n                        previousLetter = 'a';\n\
    \                        firstLetter = true;\n                        secondLetter\
    \ = false;\n                        thirdLetter = false;\n                   \
    \     break;\n                    case 'e':\n                        previousLetter\
    \ = 'e';\n                        firstLetter = true;\n                      \
    \  secondLetter = false;\n                        thirdLetter = false;\n     \
    \                   break;\n                    case 'i':\n                  \
    \      previousLetter = 'i';\n                        firstLetter = true;\n  \
    \                      secondLetter = false;\n                        thirdLetter\
    \ = false;\n                        break;\n                    case 'o':\n  \
    \                      previousLetter = 'o';\n                        firstLetter\
    \ = true;\n                        secondLetter = false;\n                   \
    \     thirdLetter = false;\n                        break;\n                 \
    \   case 'u':\n                        previousLetter = 'u';\n               \
    \         firstLetter = true;\n                        secondLetter = false;\n\
    \                        thirdLetter = false;\n                        break;\n\
    \                    case 'y':\n                        previousLetter = 'y';\n\
    \                        firstLetter = true;\n                        secondLetter\
    \ = false;\n                        thirdLetter = false;\n                   \
    \     break;\n                    default:\n                        firstLetter\
    \ = false;\n                        break;\n                }\n            } else\
    \ {\n                switch (letter) {\n                    case 'a':\n      \
    \                  if (previousLetter == 'a') {\n                            previousLetter\
    \ = 'A';\n                            firstLetter = false;\n                 \
    \           secondLetter = true;\n                            thirdLetter = false;\n\
    \                        }\n                        break;\n                 \
    \   case 'e':\n                        if (previousLetter == 'e') {\n        \
    \                    previousLetter = 'E';\n                            firstLetter\
    \ = false;\n                            secondLetter = true;\n               \
    \             thirdLetter = false;\n                        }\n              \
    \          break;\n                    case 'i':\n                        if (previousLetter\
    \ == 'i') {\n                            previousLetter = 'I';\n             \
    \               firstLetter = false;\n                            secondLetter\
    \ = true;\n                            thirdLetter = false;\n                \
    \        }\n                        break;\n                    case 'o':\n  \
    \                      if (previousLetter == 'o') {\n                        \
    \    previousLetter = 'O';\n                            firstLetter = false;\n\
    \                            secondLetter = true;\n                          \
    \  thirdLetter = false;\n                        }\n                        break;\n\
    \                    case 'u':\n                        if (previousLetter ==\
    \ 'u') {\n                            previousLetter = 'U';\n                \
    \            firstLetter = false;\n                            secondLetter =\
    \ true;\n                            thirdLetter = false;\n                  \
    \      }\n                        break;\n                    case 'y':\n    \
    \                    if (previousLetter == 'y') {\n                          \
    \  previousLetter = 'Y';\n                            firstLetter = false;\n \
    \                           secondLetter = true;\n                           \
    \ thirdLetter = false;\n                        }\n                        break;\n\
    \                    default:\n                        secondLetter = false;\n\
    \                        break;\n                }", "        var chars = message.ToLowerInvariant();\n\
    \        var encodedChars = new StringBuilder();\n        var vowels = new HashSet<char>()\
    \ { 'a', 'e', 'i', 'o', 'u' };\n        var numVowels = new HashSet<char>() {\
    \ '2', '3', '4', '5', '6', '7', '8', '9' };\n\n        foreach (var c in chars)\
    \ {\n            if (vowels.Contains(c)) {\n                encodedChars.Append(vowels.ElementAt(vowels.IndexOf(c)\
    \ + 2));\n            }\n            else if (numVowels.Contains(c)) {\n     \
    \           encodedChars.Append(vowels.ElementAt(vowels.IndexOf(c) - 2));\n  \
    \          }\n            else\n                encodedChars.Append(c);\n    \
    \    }\n        return encodedChars.ToString();", "        char[] charArray =\
    \ message.ToCharArray();\n        for (int i = 0; i < charArray.Length; i++) {\n\
    \            if (charArray[i] == 'a' || charArray[i] == 'A' || charArray[i] ==\
    \ 'e' || charArray[i] == 'E' || charArray[i] == 'i' || charArray[i] == 'I' ||\
    \ charArray[i] == 'o' || charArray[i] == 'O' || charArray[i] == 'u' || charArray[i]\
    \ == 'U') {\n                charArray[i] = (char)(charArray[i] + 2);\n      \
    \      }\n        }\n        return new string(charArray);", "        string alphabet\
    \ = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        string consonants = \"BCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n        string vowels = \"AEIOU\";\n        string[] words = message.Split('\
    \ ');\n        char[] buffer = new char[message.Length];\n        for (int i =\
    \ 0; i < words.Length; i++) {\n            buffer[i] = consonants.IndexOf(words[i])\
    \ + consonants.IndexOf(words[i + 1]);\n            buffer[i + 1] = consonants.IndexOf(words[i])\
    \ + vowels.IndexOf(words[i + 1]) + vowels.IndexOf(words[i + 2]);\n           \
    \ buffer[i + 2] = consonants.IndexOf(words[i]) + consonants.IndexOf(words[i +\
    \ 1]) + vowels.IndexOf(words[i + 2]);\n            buffer[i + 3] = consonants.IndexOf(words[i])\
    \ + consonants.IndexOf(words[i + 1]) + consonants.IndexOf(words[i + 2]);\n   \
    \     }\n        return new string(buffer);", "        // TODO: Write your code\
    \ here.\n        return \"\";", "        string result = \"\";\n        string\
    \ vowels = \"AEIOUaeiou\";\n        for (int i = 0; i < message.Length; i++) {\n\
    \            result += message[i];\n        }\n\n        for (int i = 0; i < message.Length;\
    \ i++) {\n            if (vowels.IndexOf(message[i]) >= 0) {\n               \
    \ result += message[i];\n            }\n        }\n\n        for (int i = 0; i\
    \ < message.Length; i++) {\n            if (vowels.IndexOf(message[i]) >= 0) {\n\
    \                result += message[i].ToUpper();\n            }\n        }\n\n\
    \        return result;", '        return message;', "        var chars = new\
    \ StringBuilder();\n        foreach (char letter in message) {\n            var\
    \ nextLetter = message[message.IndexOf(letter) + 1];\n            if (chars.Length\
    \ != 0) chars.Append(letter);\n            if (chars.Length != 0 && chars.ToString()\
    \ == \"AEIOUaeiou\") {\n                chars.Append(nextLetter);\n          \
    \  }\n            if (chars.Length != 0 && chars.ToString() == \"AEIOUaeiouy\"\
    ) {\n                chars.Append(nextLetter);\n            }\n        }\n   \
    \     return chars.ToString();", "        string result = new StringBuilder();\n\
    \        string vowels = \"aeiouAEIOU\";\n        string vowelReplace = \"a\"\
    ;\n        for (int i = 0; i < message.Length; i++) {\n            if (vowels.IndexOf(message[i])\
    \ != -1) {\n                int vowelIndex = vowels.IndexOf(message[i]);\n   \
    \             int vowelIndex2 = vowelIndex + 1;\n                char letter =\
    \ message[i];\n                char letter2 = message[vowelIndex2];\n        \
    \        result = result.Append(letter2);\n                result = result.Append(letter);\n\
    \                result = result.Append(letter2);\n                result = result.Append(letter);\n\
    \            }\n            else\n                result = result.Append(message[i]);\n\
    \        }\n        return result.ToString();", "        // Write your code here\n\
    \n        char[] messageChars = message.ToCharArray();\n        foreach (char\
    \ c in messageChars)\n        {\n            if(c=='a')\n                c='q';\n\
    \            if(c=='b')\n                c='w';\n            if(c=='c')\n    \
    \            c='e';\n            if(c=='d')\n                c='r';\n        \
    \    if(c=='e')\n                c='t';\n            if(c=='f')\n            \
    \    c='y';\n            if(c=='g')\n                c='u';\n            if(c=='h')\n\
    \                c='v';\n            if(c=='i')\n                c='t';\n    \
    \        if(c=='j')\n                c='i';\n            if(c=='k')\n        \
    \        c='o';\n            if(c=='l')\n                c='p';\n            if(c=='m')\n\
    \                c='o';\n            if(c=='n')\n                c='y';\n    \
    \        if(c=='o')\n                c='i';\n            if(c=='p')\n        \
    \        c='a';\n            if(c=='q')\n                c='m';\n            if(c=='r')\n\
    \                c='k';\n            if(c=='s')\n                c='c';\n    \
    \        if(c=='t')\n                c='o';\n            if(c=='u')\n        \
    \        c='g';\n            if(c=='v')\n                c='h';\n            if(c=='w')\n\
    \                c='f';\n            if(c=='x')\n                c='g';\n    \
    \        if(c=='y')\n                c='f';\n            if(c=='z')\n        \
    \        c='e';\n        }\n        char[] alphabet = new char[] { 'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'\
    \ };\n        StringBuilder messageBuilder = new StringBuilder();\n        StringBuilder\
    \ newMessage = new StringBuilder();\n        foreach(char c in messageChars)\n\
    \        {\n            int index = alphabet.IndexOf(c);\n            if(index>0)\n\
    \            {\n                index = index-2;\n                char newChar\
    \ = alphabet[index+1];\n                newMessage.Append(newChar);\n        \
    \    }\n            else\n            {\n                newMessage.Append(c);\n\
    \            }\n        }\n\n        return newMessage.ToString();", "       \
    \ StringBuilder builder = new StringBuilder();\n        for (int i = 0; i < message.Length;\
    \ i++) {\n            char letter = message[i];\n            if (letter == 'a'\
    \ || letter == 'A') {\n                builder.Append(\"B\");\n            } else\
    \ if (letter == 'b' || letter == 'B') {\n                builder.Append(\"M\"\
    );\n            } else if (letter == 'c' || letter == 'C') {\n               \
    \ builder.Append(\"N\");\n            } else if (letter == 'd' || letter == 'D')\
    \ {\n                builder.Append(\"B\");\n            } else if (letter ==\
    \ 'e' || letter == 'E') {\n                builder.Append(\"G\");\n          \
    \  } else if (letter == 'f' || letter == 'F') {\n                builder.Append(\"\
    O\");\n            } else if (letter == 'g' || letter == 'G') {\n            \
    \    builder.Append(\"O\");\n            } else if (letter == 'h' || letter ==\
    \ 'H') {\n                builder.Append(\"B\");\n            } else if (letter\
    \ == 'i' || letter == 'I') {\n                builder.Append(\"A\");\n       \
    \     } else if (letter == 'j' || letter == 'J') {\n                builder.Append(\"\
    A\");\n            } else if (letter == 'k' || letter == 'K') {\n            \
    \    builder.Append(\"N\");\n            } else if (letter == 'l' || letter ==\
    \ 'L') {\n                builder.Append(\"N\");\n            } else if (letter\
    \ == 'm' || letter == 'M') {\n                builder.Append(\"B\");\n       \
    \     } else if (letter == 'n' || letter == 'N') {\n                builder.Append(\"\
    C\");\n            } else if (letter == 'o' || letter == 'O') {\n            \
    \    builder.Append(\"O\");\n            } else if (letter == 'p' || letter ==\
    \ 'P') {\n                builder.Append(\"B\");\n            } else if (letter\
    \ == 'q' || letter == 'Q') {\n                builder.Append(\"G\");\n       \
    \     } else if (letter == 'r' || letter == 'R') {\n                builder.Append(\"\
    O\");\n            } else if (letter == 's' || letter == 'S') {\n            \
    \    builder.Append(\"G\");\n            } else if (letter == 't' || letter ==\
    \ 'T') {\n                builder.Append(\"C\");\n            } else if (letter\
    \ == 'u' || letter == 'U') {\n                builder.Append(\"O\");\n       \
    \     } else if (letter == 'v' || letter == 'V') {\n                builder.Append(\"\
    O\");\n            } else if (letter == 'w' || letter == 'W') {\n            \
    \    builder.Append(\"O\");\n            } else if (letter == 'x' || letter ==\
    \ 'X') {\n                builder.Append(\"M\");\n            } else if (letter\
    \ == 'y' || letter == 'Y') {\n                builder.Append(\"A\");\n       \
    \     } else if (letter == 'z' || letter == 'Z') {\n                builder.Append(\"\
    B\");\n            } else if (letter == 'A' || letter == 'a') {\n            \
    \    builder.Append(\"B\");\n            } else if (letter == 'B' || letter ==\
    \ 'b') {\n                builder.Append(\"M\");\n            } else if (letter\
    \ == 'C' || letter == 'c') {\n                builder.Append", "        List<char>\
    \ alphabet = new List<char>() { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',\
    \ 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'\
    \ };\n\n        string output = string.Empty;\n\n        foreach (char c in message.ToUpper())\
    \ {\n            int index = alphabet.IndexOf(c);\n            output += alphabet[index\
    \ ^ 1];\n        }\n\n        char[] vowels = new char[] { 'A', 'E', 'I', 'O',\
    \ 'U' };\n        foreach (char v in vowels) {\n            int index = alphabet.IndexOf(v);\n\
    \            output += alphabet[(index + 2) ^ 1];\n        }\n\n        char[]\
    \ vowelsAndHappyLetters = new char[] { 'E', 'I', 'O', 'U' };\n        foreach\
    \ (char v in vowelsAndHappyLetters) {\n            int index = alphabet.IndexOf(v);\n\
    \            output += alphabet[(index + 2) ^ 1];\n        }\n\n        char[]\
    \ consonants = new char[] { 'B', 'C', 'D', 'G', 'H', 'J', 'K', 'L', 'M', 'N',\
    \ 'P', 'Q', 'R', 'S', 'T', 'W', 'X', 'Y', 'Z' };\n        foreach (char c in consonants)\
    \ {\n            int index = alphabet.IndexOf(c);\n            output += alphabet[(index\
    \ + 2) ^ 1];\n        }\n\n        return output;", "        // Insert code here.\n\
    \        var r = new System.Text.StringBuilder(message.Length);\n        var vowels\
    \ = \"aeiouAEIOU\";\n        int len = message.Length;\n        for(int i = 0;\
    \ i < len; i++) {\n            if(vowels.Contains(message[i])) {\n           \
    \     int index = vowels.IndexOf(message[i]);\n                var firstTwoPlaces\
    \ = index;\n                var secondTwoPlaces = index;\n                var\
    \ firstVowel = vowels.Substring(index, 1);\n                var secondVowel =\
    \ vowels.Substring((index + 2), 1);\n                firstTwoPlaces += 1;\n  \
    \              secondTwoPlaces += 2;\n                var r1 = message[i];\n \
    \               var r2 = message[i];\n                var r3 = message[i];\n \
    \               r[0] = r1;\n                r[1] = r2;\n                r[2] =\
    \ r3;\n                r.Replace(vowels.Substring(firstTwoPlaces, 1), firstVowel);\n\
    \                r.Replace(vowels.Substring(secondTwoPlaces, 1), secondVowel);\n\
    \            }\n            else {\n                r[i] = message[i];\n     \
    \       }\n        }\n        return r.ToString();", "        // Your code goes\
    \ here\n        char[] vowels = new char[] { 'a', 'e', 'i', 'o', 'u', 'A', 'E',\
    \ 'I', 'O', 'U' };\n        char[] alphabet = new char[] { 'a', 'b', 'c', 'd',\
    \ 'e', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',\
    \ 'v', 'w', 'x', 'y', 'z' };\n        List<char> newAlphabet = new List<char>(alphabet.Length);\n\
    \        newAlphabet.AddRange(alphabet);\n        string newMessage = new string(message.ToCharArray().Where(c\
    \ => newAlphabet.Contains(c)).ToArray());\n\n        string lowerMessage = newMessage.ToLower();\n\
    \        char[] temp = lowerMessage.ToCharArray();\n        Dictionary<char,int>\
    \ letterCounts = new Dictionary<char,int>();\n        for (int i = 0; i < temp.Length;\
    \ i++) {\n            char c = temp[i];\n            int count = 1;\n        \
    \    if (letterCounts.ContainsKey(c)) {\n                count = letterCounts[c]\
    \ + 1;\n            }\n            letterCounts[c] = count;\n        }\n     \
    \   temp = lowerMessage.ToCharArray();\n        for (int i = 0; i < temp.Length;\
    \ i++) {\n            char c = temp[i];\n            int count = 1;\n        \
    \    if (letterCounts.ContainsKey(c)) {\n                count = letterCounts[c]\
    \ + 1;\n            }\n            if (count > 2) {\n                temp[i] =\
    \ alphabet[count - 2];\n            }\n        }\n        string upperMessage\
    \ = new string(temp);\n        return upperMessage;", "        //TODO: Replace\
    \ with your logic\n        string result = \"\";\n        for(int i = 0; i < message.Length;\
    \ i++) {\n            char c = message[i];\n            if(c >= 'a' && c <= 'z')\
    \ {\n                result += (char)(c - 'a' + 1);\n            } else if (c\
    \ >= 'A' && c <= 'Z') {\n                result += (char)(c - 'A' + 1);\n    \
    \        } else {\n                result += c;\n            }\n        }\n  \
    \      return result;", "        // write your solution here\n        string encoded\
    \ = \"\";\n        foreach (char c in message)\n        {\n            if (char.IsLetter(c)\
    \ && !char.IsUpper(c))\n                encoded += (char.IsUpper(c)) ? char.ToUpper(c)\
    \ : char.ToLower(c);\n            else\n                encoded += c;\n      \
    \  }\n        return encoded;", "        string key = string.Empty;\n        char[]\
    \ charArray = message.ToCharArray();\n        Array.Sort(charArray);\n       \
    \ Dictionary<int, char> dictionary = new Dictionary<int, char>();\n        foreach(char\
    \ c in charArray) {\n            dictionary.Add(charArray[charArray.IndexOf(c)]\
    \ + 2, c);\n        }\n        List<char> encoded = new List<char>();\n      \
    \  for(int i = 0; i < charArray.Length; i++) {\n            int value = dictionary.ContainsKey(charArray[i])\
    \ ? dictionary[charArray[i]] : -1;\n            char replacement = char.Empty;\n\
    \            if(value > 0) {\n                replacement = char.ToLower(charArray[value\
    \ - 2]);\n            }\n            encoded.Add(replacement);\n        }\n  \
    \      return encoded.ToArray().Aggregate((x, y) => x + y);", "        // TODO:\
    \ Write a function which takes string, and returns \n        // string. \n   \
    \     string encoded = \"\";\n        char alphabet = 'A';\n        for (int i\
    \ = 0; i < message.Length; i++) {\n            encoded += message[i];\n      \
    \      char vowel = message[i];\n            int index = alphabet.IndexOf(vowel);\n\
    \            int index2 = alphabet.IndexOf((char)((alphabet.IndexOf(vowel) + 1)));\n\
    \            string alphabets = \"AEIOUaeiou\";\n            int start1 = alphabets.IndexOf(alphabet[index]);\n\
    \            int end1 = alphabets.IndexOf(alphabet[index2]);\n            if (start1\
    \ < end1) {\n                char temp = alphabet[index];\n                alphabets[index]\
    \ = alphabet[index2];\n                alphabets[index2] = temp;\n           \
    \ }\n            else\n            {\n                char temp = alphabet[index];\n\
    \                alphabets[index] = alphabet[index2];\n                alphabets[index2]\
    \ = temp;\n            }\n        }\n        return encoded;", "        return\
    \ string.Concat(\n            new string(message.Select(x => {\n             \
    \   string val = x.ToUpper();\n                int aIndex = 0;\n             \
    \   int eIndex = 0;\n                if (char.IsUpper(x)) {\n                \
    \    if (val.Length > 2) {\n                        string firstLetter = val.Substring(0,\
    \ 1);\n                        string secondLetter = val.Substring(1, 1);\n  \
    \                      string firstVowel = val.Substring(0, 2);\n            \
    \            string secondVowel = val.Substring(2, 2);\n                     \
    \   int firstVowelIndex = Array.FindIndex(new[] {firstLetter, firstVowel}, delegate\
    \ (string s) {\n                            return s == secondLetter;\n      \
    \                  });\n                        int secondVowelIndex = Array.FindIndex(new[]\
    \ {secondLetter, secondVowel}, delegate (string s) {\n                       \
    \     return s == firstLetter;\n                        });\n                \
    \        int firstIndex = (firstVowelIndex + 1) >= 1 ? firstVowelIndex + 1 : -1;\n\
    \                        int secondIndex = (secondVowelIndex + 1) >= 1 ? secondVowelIndex\
    \ + 1 : -1;\n                        string replacement = string.Empty;\n    \
    \                    switch (firstVowel) {\n                            case \"\
    E\":\n                                replacement = \"Q\";\n                 \
    \               break;\n                            case \"I\":\n            \
    \                    replacement = \"K\";\n                                break;\n\
    \                            case \"O\":\n                                replacement\
    \ = \"S\";\n                                break;\n                         \
    \   case \"U\":\n                                replacement = \"T\";\n      \
    \                          break;\n                        }\n               \
    \         switch (secondVowel) {\n                            case \"A\":\n  \
    \                              replacement = \"Y\";\n                        \
    \        break;\n                            case \"E\":\n                   \
    \             replacement = \"P\";\n                                break;\n \
    \                           case \"I\":\n                                replacement\
    \ = \"H\";\n                                break;\n                         \
    \   case \"O\":\n                                replacement = \"V\";\n      \
    \                          break;\n                            case \"U\":\n \
    \                               replacement = \"C\";\n                       \
    \         break;\n                        }\n                        return val.Replace(firstLetter,\
    \ replacement);\n                    } else {\n                        throw new\
    \ Exception(\"Message must be at least three letters long to encode properly\"\
    );\n                    }\n                } else {\n                    int aIndex\
    \ = Array.FindIndex(new[] {firstLetter}, delegate (string s) {\n             \
    \           return s == secondLetter;\n                    });\n             \
    \       int eIndex = Array.FindIndex(new[] {secondLetter}, delegate (string s)\
    \ {\n                        return s == firstLetter;\n                    });\n\
    \                    int aIndex = Array.FindIndex(new[] {firstLetter}, delegate\
    \ (string s) {\n                        return s == secondLetter;\n          \
    \          });\n                    int eIndex = Array.FindIndex(new[] {secondLetter},\
    \ delegate (string s) {\n                        return s == firstLetter;\n  \
    \                  });\n                    int aIndex = Array.Find", "      \
    \  var list = new List<char>();\n        foreach (var x in message) {\n      \
    \      list.Add(x);\n        }\n\n        var vowels = \"AEIOUaeiou\".ToCharArray();\n\
    \        var result = string.Empty;\n        for (int i = 0; i < list.Count -\
    \ 1; i++) {\n            if (vowels.Contains(list[i])) {\n                var\
    \ index = list.IndexOf(list[i]);\n                var next = list[index + 1];\n\
    \                list[index + 1] = list[index];\n                list[index] =\
    \ next;\n            }\n        }\n        for (int i = 0; i < list.Count - 1;\
    \ i++) {\n            if (vowels.Contains(list[i])) {\n                result\
    \ += vowels[list.IndexOf(list[i]) - 1];\n            }\n        }\n        for\
    \ (int i = 0; i < list.Count - 1; i++) {\n            if (vowels.Contains(list[i]))\
    \ {\n                result += vowels[list.IndexOf(list[i]) - 1];\n          \
    \  }\n        }\n        for (int i = 0; i < list.Count - 1; i++) {\n        \
    \    if (vowels.Contains(list[i])) {\n                result += vowels[list.IndexOf(list[i])\
    \ - 1];\n            }\n        }\n\n        for (int i = 0; i < list.Count -\
    \ 1; i++) {\n            if (vowels.Contains(list[i])) {\n                result\
    \ += vowels[list.IndexOf(list[i]) - 1];\n            }\n        }\n        return\
    \ result;", "        var result = \"\";\n        var index = -1;\n        var\
    \ replacements = new Dictionary<string, string> {\n            {\"a\", \"z\"},\n\
    \            {\"e\", \"z\"},\n            {\"i\", \"z\"},\n            {\"o\"\
    , \"z\"},\n            {\"u\", \"z\"},\n            {\"A\", \"Z\"},\n        \
    \    {\"E\", \"Z\"},\n            {\"I\", \"Z\"},\n            {\"O\", \"Z\"},\n\
    \            {\"U\", \"Z\"},\n            {\"C\", \"C\"},\n            {\"M\"\
    , \"M\"},\n            {\"S\", \"S\"},\n        };\n\n        foreach (var c in\
    \ message.ToUpper()) {\n            index = Array.FindIndex(message.ToUpper(),\
    \ letter => replacements.ContainsKey(letter));\n\n            if (index > -1)\
    \ {\n                result += replacements[c];\n            } else {\n      \
    \          result += c;\n            }\n        }\n        return result;", " \
    \       char[] alphabet = new char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',\
    \ 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',\
    \ 'y', 'z' };\n        char[] vowels = new char[] { 'a', 'e', 'i', 'o', 'u' };\n\
    \        char[] consonants = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y' };\n\n        var\
    \ result = new StringBuilder();\n        var temp = new StringBuilder();\n   \
    \     foreach (var letter in message) {\n            // Swap the case of all letters.\n\
    \            result.Append(char.ToUpper(letter));\n        }\n        foreach\
    \ (var letter in result) {\n            temp.Append(alphabet[alphabet.IndexOf(letter)\
    \ + 1]);\n        }\n        foreach (var vowel in vowels) {\n            for\
    \ (int i = 0; i < message.Length; i++) {\n                if (message[i] == vowel)\
    \ {\n                    result.Replace(vowel, temp[alphabet.IndexOf(message[i])\
    \ + 1]);\n                }\n            }\n        }\n        foreach (var letter\
    \ in result) {\n            result.Append(letter);\n        }\n\n        return\
    \ result.ToString();", "        char[] vowels = { 'a', 'e', 'i', 'o', 'u', 'y'\
    \ };\n        int firstVowelIndex = vowels.IndexOf((char)0);\n        int lastVowelIndex\
    \ = vowels.IndexOf((char)9);\n        char[] firstLetters = message.ToLower()\n\
    \            .ToCharArray()\n            .Where((char) =>\n            {\n   \
    \             return (char)0 != (char)((int)char % 26);\n            }).ToArray();\n\
    \        char[] lastLetters = message.ToLower()\n            .ToCharArray()\n\
    \            .Where((char) =>\n            {\n                return (char)0 !=\
    \ (char)((int)char % 26);\n            }).ToArray();\n        int firstIndex =\
    \ vowels.IndexOf((char)0);\n        int[] positions = new int[lastLetters.Length];\n\
    \        for (int index = 0; index < lastLetters.Length; index++)\n        {\n\
    \            positions[index] = firstIndex + index;\n        }\n        int[]\
    \ firstVowelPositions = positions.Where(position => position >= firstVowelIndex).ToArray();\n\
    \        int[] lastVowelPositions = positions.Where(position => position > firstVowelIndex\
    \ && position <= lastVowelIndex).ToArray();\n        List<int> firstVowelPositionsList\
    \ = new List<int>(firstVowelPositions);\n        List<int> lastVowelPositionsList\
    \ = new List<int>(lastVowelPositions);\n        List<int> firstVowelPositionsListOrdered\
    \ = firstVowelPositionsList.OrderBy(i => i).ToList();\n        List<int> lastVowelPositionsListOrdered\
    \ = lastVowelPositionsList.OrderBy(i => i).ToList();\n        List<int> firstVowelPositionsListOrderedWithDuplicates\
    \ = firstVowelPositionsListOrdered;\n        for (int i = 0; i <= lastVowelPositionsList.Count\
    \ - 1; i++)\n        {\n            if (lastVowelPositionsList.Count == i)\n \
    \           {\n                lastVowelPositionsListOrderedWithDuplicates.Add(i);\n\
    \            }\n            else\n            {\n                int first = lastVowelPositionsListOrderedWithDuplicates[lastVowelPositionsListOrderedWithDuplicates.Count\
    \ - 1];\n                int second = lastVowelPositionsListOrderedWithDuplicates[i];\n\
    \                if (first < second)\n                {\n                    firstVowelPositionsListOrderedWithDuplicates.Add(i);\n\
    \                    lastVowelPositionsListOrderedWithDuplicates.Add(i);\n   \
    \             }\n                else\n                {\n                   \
    \ firstVow", "        if (string.IsNullOrEmpty(message))\n        {\n        \
    \    throw new ArgumentException(\"message\");\n        }\n\n        var builder\
    \ = new StringBuilder();\n        foreach (char letter in message)\n        {\n\
    \            if (letter > 'Z' && letter < 'A')\n            {\n              \
    \  builder.Append((char)(letter - 26));\n            }\n            else\n   \
    \         {\n                var vowelPosition = GetVowelPosition(letter);\n \
    \               if (vowelPosition != -1)\n                {\n                \
    \    builder.Append((char)(letter + vowelPosition));\n                }\n    \
    \        }\n        }\n        return builder.ToString();", "        var vowels\
    \ = \"aeiouAEIOU\".ToCharArray();\n        var result = new StringBuilder(message);\n\
    \        foreach (char c in message) {\n            bool found = false;\n    \
    \        for (int i = 0; i < vowels.Length; i++) {\n                if (c == vowels[i])\
    \ {\n                    result.Replace(c, vowels[(i + 2) % vowels.Length]);\n\
    \                    found = true;\n                    break;\n             \
    \   }\n            }\n            if (!found) {\n                result.Replace(c,\
    \ String.Concat(vowels[(vowels.Length - i) % vowels.Length], c));\n          \
    \  }\n        }\n        return result.toString();", '        return message.Replace("a",
    "A").Replace("b", "B").Replace("c", "C").Replace("d", "D").Replace("e", "E").Replace("f",
    "F").Replace("g", "G").Replace("h", "H").Replace("i", "I").Replace("j", "J").Replace("k",
    "K").Replace("l", "L").Replace("m", "M").Replace("n", "N").Replace("o", "O").Replace("p",
    "P").Replace("q", "Q").Replace("r", "R").Replace("s", "S").Replace("t", "T").Replace("u",
    "U").Replace("v", "V").Replace("w", "W").Replace("x", "X").Replace("y", "Y").Replace("z",
    "Z").Replace(" ", string.Empty);', "        StringBuilder result = new StringBuilder();\n\
    \        foreach (char c in message) {\n            string s = Convert.ToString(c\
    \ - 1);\n            if (s.Length >= 2) s = s.Substring(2);\n            string\
    \ a = Convert.ToString(c + (char.IsLower(c) ? \"a\" : \"A\"));\n            string\
    \ b = Convert.ToString(c + (char.IsUpper(c) ? \"a\" : \"A\"));\n            string\
    \ c = Convert.ToString(c + (char.IsUpper(c) ? \"A\" : \"a\"));\n            result.Append(a);\n\
    \            if (s.Length > 0) result.Append(s);\n            result.Append(b);\n\
    \            result.Append(c);\n            result.Append(s);\n        }\n   \
    \     return result.ToString();", "        \n        var alphabet = new Dictionary<char,\
    \ char>();\n        alphabet.Add('a', 'A');\n        alphabet.Add('b', 'B');\n\
    \        alphabet.Add('c', 'C');\n        alphabet.Add('d', 'D');\n        alphabet.Add('e',\
    \ \"E\");\n        alphabet.Add('f', \"F\");\n        alphabet.Add('g', 'G');\n\
    \        alphabet.Add('h', \"H\");\n        alphabet.Add('i', \"I\");\n      \
    \  alphabet.Add('j', \"J\");\n        alphabet.Add('k', \"K\");\n        alphabet.Add('l',\
    \ \"L\");\n        alphabet.Add('m', \"M\");\n        alphabet.Add('n', \"N\"\
    );\n        alphabet.Add('o', \"O\");\n        alphabet.Add('p', \"P\");\n   \
    \     alphabet.Add('q', \"Q\");\n        alphabet.Add('r', \"R\");\n        alphabet.Add('s',\
    \ \"S\");\n        alphabet.Add('t', \"T\");\n        alphabet.Add('u', \"U\"\
    );\n        alphabet.Add('v', \"V\");\n        alphabet.Add('w', \"W\");\n   \
    \     alphabet.Add('x', \"X\");\n        alphabet.Add('y', \"Y\");\n        alphabet.Add('z',\
    \ \"Z\");\n        alphabet.Add('A', \"a\");\n        alphabet.Add('B', \"b\"\
    );\n        alphabet.Add('C', \"c\");\n        alphabet.Add('D', \"d\");\n   \
    \     alphabet.Add('E', \"e\");\n        alphabet.Add('F', \"f\");\n        alphabet.Add('G',\
    \ \"g\");\n        alphabet.Add('H', \"h\");\n        alphabet.Add('I', \"i\"\
    );\n        alphabet.Add('J', \"j\");\n        alphabet.Add('K', \"k\");\n   \
    \     alphabet.Add('L', \"l\");\n        alphabet.Add('M', \"m\");\n        alphabet.Add('N',\
    \ \"n\");\n        alphabet.Add('O', \"o\");\n        alphabet.Add('P', \"p\"\
    );\n        alphabet.Add('Q', \"q\");\n        alphabet.Add('R', \"r\");\n   \
    \     alphabet.Add('S', \"s\");\n        alphabet.Add('T', \"t\");\n        alphabet.Add('U',\
    \ \"u\");\n        alphabet.Add('V', \"v\");\n        alphabet.Add('W', \"w\"\
    );\n        alphabet.Add('X', \"x\");\n        alphabet.Add('Y', \"y\");\n   \
    \     alphabet.", "        char[] chars = message.ToCharArray();\n        Array.Sort(chars);\n\
    \        char[] vowels = { \"a\", \"e\", \"i\", \"o\", \"u\" };\n        List<char>\
    \ newChars = new List<char>();\n        int nextVowel = chars.Length;\n      \
    \  for (int i = 0; i < chars.Length; i++) {\n            char c = chars[i];\n\
    \            if (vowels.Contains(c)) {\n                nextVowel = i;\n     \
    \       }\n            newChars.Add(c);\n        }\n        int newVowel = chars.Length;\n\
    \        for (int i = 0; i < newChars.Count; i++) {\n            if (vowels.Contains(newChars[i]))\
    \ {\n                newVowel = i;\n            }\n        }\n        for (int\
    \ i = 0; i < chars.Length; i++) {\n            char c = chars[i];\n          \
    \  if (c == newChars[newVowel]) {\n                if (i < newVowel) {\n     \
    \               newChars[newVowel] = newChars[nextVowel];\n                  \
    \  nextVowel = i;\n                } else {\n                    newChars[newVowel]\
    \ = newChars[newVowel - 1];\n                }\n            }\n        }\n   \
    \     return new string(newChars.ToArray());", "        char[] array = message.ToCharArray();\n\
    \        List<char> newList = new List<char>(array.Length);\n        for (int\
    \ i = 0; i < array.Length; i++) {\n            char letter = array[i];\n     \
    \       if (letter >= 'A' && letter <= 'Z') {\n                newList.Add(letter);\n\
    \            } else {\n                newList.Add((char)(letter + 2));\n    \
    \        }\n        }\n        return newList.Aggregate((c, n) => c+n).ToString();",
  "        char[] letters = message.ToCharArray();\n        StringBuilder builder\
    \ = new StringBuilder();\n        foreach (char letter in letters) {\n       \
    \     switch (letter) {\n                case 'a': letter = 'a'; break;\n    \
    \            case 'A': letter = 'A'; break;\n                case 'e': letter\
    \ = 'e'; break;\n                case 'E': letter = 'E'; break;\n            \
    \    case 'i': letter = 'i'; break;\n                case 'I': letter = 'I'; break;\n\
    \                case 'o': letter = 'o'; break;\n                case 'O': letter\
    \ = 'O'; break;\n                case 'u': letter = 'u'; break;\n            \
    \    case 'U': letter = 'U'; break;\n                default: letter = letter;\n\
    \            }\n            builder.Append(letter);\n        }\n        return\
    \ builder.ToString();", "        int vowelIndex = 0;\n        string result =\
    \ \"\";\n\n        foreach(char c in message) {\n            if(c >= 'a' && c\
    \ <= 'z') {\n                result += (char)(c - 'a' + vowelIndex % 26);\n  \
    \              vowelIndex++;\n            }\n            else if(c >= 'A' && c\
    \ <= 'Z') {\n                result += (char)(c - 'A' + vowelIndex % 26);\n  \
    \              vowelIndex++;\n            }\n            else if(c == ' ') {\n\
    \                result += \"_\";\n            }\n            else {\n       \
    \         result += c;\n            }\n        }\n        return result;", " \
    \       char[] message = message.ToCharArray();\n        string output = new StringBuilder();\n\
    \        bool vowel = false;\n        bool swapped = false;\n        char prev\
    \ = '\\0';\n        char current = '\\0';\n        char next = '\\0';\n      \
    \  int pos = 0;\n        for (int i = 0; i < message.Length; i++) {\n        \
    \    current = message[i];\n            if (vowel && prev != current && next !=\
    \ current) {\n                output.Append(current);\n            } else if (vowel\
    \ && prev == current) {\n                output.Append(next);\n              \
    \  swapped = true;\n            } else if (!vowel && prev != current) {\n    \
    \            output.Append(current);\n            }\n            vowel = vowel\
    \ == false ? true : false;\n            next = message[i+1];\n            prev\
    \ = message[i-1];\n        }\n        return output.ToString();", "        string[]\
    \ arr = message.ToLowerInvariant().Split(' ');\n        string result = \"\";\n\
    \        foreach (string s in arr) {\n            foreach (char c in s) {\n  \
    \              result += (char)(c + 2);\n            }\n        }\n        result\
    \ = result.ToUpperInvariant();\n        result = result.Replace(vowels, \"\");\n\
    \        result = result.Replace(\"AEIOUaeiou\", \"g\");\n        return result;",
  '        // Your code here...', "        // Write code here\n        string letters\
    \ = string.Join(\"\", message.ToCharArray().Select((c, i) => i == 0 ? c : Char.ToUpper(c)));\n\
    \        string vowels = \"AEIOUaeiou\".ToCharArray().ToList();\n        string\
    \ coded = new string(\n            Enumerable.Range(1, message.Length)\n     \
    \           .Select(i => \n                vowels.Contains(letters[i-1]) \n  \
    \              ? letters[i-1] \n                : Char.ToUpper(letters[i-1]))\n\
    \                .ToArray()\n            );\n        return coded;", "       \
    \ string encoded = \"\";\n        List<char> alphabet = \n            new List<char>()\
    \ { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', \n                            'i',\
    \ 'j', 'k', 'l', 'm', 'n', 'o', 'p', \n                            'q', 'r', 's',\
    \ 't', 'u', 'v', 'w', 'x', 'y', \n                            'z'};\n        foreach\
    \ (char letter in message)\n        {\n            int index = 0;\n          \
    \  bool vowel = false;\n            foreach (char c in alphabet)\n           \
    \ {\n                if (letter == c)\n                {\n                   \
    \ index = alphabet.IndexOf(c);\n                    vowel = true;\n          \
    \          break;\n                }\n            }\n            int letterIndex\
    \ = alphabet.IndexOf(letter);\n            int nextLetterIndex = letterIndex +\
    \ 2;\n            if (nextLetterIndex >= alphabet.Count)\n            {\n    \
    \            nextLetterIndex = alphabet.Count - 1;\n                vowel = true;\n\
    \            }\n            if (vowel)\n            {\n                encoded\
    \ += alphabet[letterIndex];\n            }\n            else\n            {\n\
    \                encoded += alphabet[nextLetterIndex];\n            }\n      \
    \  }\n        return encoded;", "        var result = new StringBuilder();\n \
    \       foreach (char letter in message) {\n            var beforeLetter = letter;\n\
    \            var afterLetter = letter;\n            var vowels = new string[]\
    \ { \"a\", \"e\", \"i\", \"o\", \"u\" };\n            if (vowels.Contains(letter))\
    \ {\n                afterLetter = beforeLetter;\n            }\n            for\
    \ (int i = 1; i < vowels.Length; i++) {\n                beforeLetter = letter;\n\
    \                afterLetter = beforeLetter;\n                letter = beforeLetter\
    \ + vowels[i - 1];\n                if (vowels.Contains(letter)) {\n         \
    \           afterLetter = beforeLetter;\n                }\n            }\n  \
    \          result.Append(afterLetter);\n        }\n        return result.ToString();",
  "        int vowelCount = message.Count(c => c == 'A' || c == 'E' || c == 'I' ||\
    \ c == 'O' || c == 'U');\n        char[] vowels = new char[] { 'A', 'E', 'I',\
    \ 'O', 'U' };\n\n        // Make a new array of letters, where the vowels have\
    \ been \n        // replaced with the index of the vowel in the \n        // vowels\
    \ array. \n        char[] newMessage = message.Select(c => \n            vowels.Contains(c)\
    \ ? vowels.IndexOf(c) : c).ToArray();\n\n        // Convert the new array back\
    \ into a string, \n        // by looping through the chars and adding them to\
    \ a \n        // StringBuilder. \n        StringBuilder stringBuilder = new StringBuilder();\n\
    \        for (int i = 0; i < newMessage.Length; i++) {\n            stringBuilder.Append(newMessage[i]);\n\
    \        }\n\n        // Create a new string, where the vowels are swapped with\
    \ the \n        // letter that appears 2 places ahead, starting from the \n  \
    \      // beginning of the new string.\n        string newString = stringBuilder.ToString();\n\
    \        for(int i = 0; i < vowelCount; i++) {\n            newString = newString.Replace(vowels[i],\
    \ vowels[vowels.IndexOf((string)newString[vowels.IndexOf((string)newString[vowels.IndexOf((string)newString[i]\
    \ - 1)]) + 1]));\n        }\n        return newString;", "        // Complete\
    \ this function\n        string result = \"\";\n        int count = 1;\n     \
    \   string vowels = \"AEIOUaeiou\";\n        string alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    ;\n        foreach (char c in message) {\n            if (vowels.IndexOf(c) <\
    \ 0) {\n                char next = alphabet[alphabet.IndexOf(c) + 1];\n     \
    \           result += next + c;\n            } else {\n                int index\
    \ = alphabet.IndexOf(c);\n                string pre = alphabet.Substring(0, index\
    \ - 1);\n                string next = alphabet[index + 1];\n                result\
    \ += pre + next;\n                count++;\n            }\n        }\n       \
    \ if (count != 0)\n            result += \"X\";\n        return result;", "  \
    \      // Your code goes here\n        string output = \"\";\n        for(int\
    \ i=0; i<message.Length; i++)\n        {\n            if(Char.IsUpper(message[i]))\n\
    \            {\n                output += message[i].ToUpper();\n            }\n\
    \            else if(Char.IsLower(message[i]))\n            {\n              \
    \  output += message[i].ToLower();\n            }\n            else if(message[i]\
    \ == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i]\
    \ == 'u' || message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i]\
    \ == 'O' || message[i] == 'U')\n            {\n                output += message[i];\n\
    \            }\n            else\n            {\n                output += (char)(message[i]\
    \ + 2);\n            }\n        }\n        return output;", "        string newMessage\
    \ = \"\";\n        foreach (char c in message.ToUpper()) {\n            if (Char.IsLetter(c))\
    \ {\n                newMessage += (char)(Char.ToLower(c) + 2);\n            }\
    \ else\n                newMessage += c;\n        }\n        return newMessage;",
  "        if (string.IsNullOrEmpty(message))\n            return null;\n\n      \
    \  var sb = new StringBuilder();\n        message.ToCharArray().ToList().ForEach(x\
    \ =>\n        {\n            char currentChar = x;\n            var lowerCaseChar\
    \ = Char.ToLower(currentChar);\n            var letterIndex = Encoding.ASCII.GetBytes().Select(b\
    \ => b).IndexOf(lowerCaseChar);\n            bool isVowel = Char.IsUpper(currentChar)\
    \ || Char.IsLower(currentChar);\n            if (isVowel)\n            {\n   \
    \             var vowelIndex = letterIndex + 2;\n                for (int i =\
    \ letterIndex; i > vowelIndex; i--)\n                {\n                    var\
    \ beforeChar = Encoding.ASCII.GetString(b, i - 1, 1);\n                    var\
    \ afterChar = Encoding.ASCII.GetString(b, i, 1);\n                    sb.Append(afterChar);\n\
    \                }\n            }\n            else\n            {\n         \
    \       sb.Append(lowerCaseChar);\n            }\n        });\n\n        return\
    \ sb.ToString();", "        var sb = new StringBuilder();\n        var letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n        var vowels = \"aeiou\";\n       \
    \ var messageLength = message.Length;\n\n        for (int i = 0; i < messageLength;\
    \ i++) {\n            var currentChar = message[i];\n            if (letters.Contains(currentChar))\
    \ {\n                var index = letters.IndexOf(currentChar);\n             \
    \   var secondIndex = (index + 2) % (letters.Length - 1);\n                sb.Append((char)(((int)currentChar\
    \ + ((int)letters[secondIndex])));\n            }\n            else if (vowels.Contains(currentChar))\
    \ {\n                var index = vowels.IndexOf(currentChar);\n              \
    \  var secondIndex = (index + 1) % (vowels.Length - 1);\n                sb.Append((char)(((int)currentChar\
    \ + ((int)vowels[secondIndex])));\n            }\n            else {\n       \
    \         sb.Append(currentChar);\n            }\n        }\n        return sb.ToString();",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < message.Length;\
    \ i++) {\n            char ch = message[i];\n            if (char.IsLetter(ch))\
    \ {\n                sb.Append(\n                    ch \n                   \
    \ + (message.Count(x => char.IsVowel(x.ToString())) == 2 \n                  \
    \      ? message.Replace(char.ToString(ch), \n                            char.ToString(\n\
    \                                message.IndexOf(char.ToString(ch), \n       \
    \                             message.IndexOf(ch, \n                         \
    \           message.IndexOf(ch, i + 1) + 1))\n                            ).ToString()\n\
    \                        )\n                        : char.ToString(ch)));\n \
    \           }\n            else {\n                sb.Append(ch);\n          \
    \  }\n        }\n        return sb.ToString();", "        var vowels = \"AEIOUaeiou\"\
    ;\n        var newMessage = message;\n        // loop through each letter\n  \
    \      for (var i = 0; i < message.Length; i++) {\n            // check if it\
    \ is a vowel\n            if (vowels.Contains(message[i])) {\n               \
    \ // if so replace it with the letter 2 letters ahead\n                // this\
    \ letter will either be a vowel or a vowel 2 letters ahead\n                newMessage\
    \ = newMessage.Replace(message[i], message[i].ToUpper());\n            }\n   \
    \         // check if it is a capital letter\n            if (Char.IsUpper(message[i]))\
    \ {\n                // if so replace it with letter 1 letter ahead \n       \
    \         newMessage = newMessage.Replace(message[i], message[i].ToLower());\n\
    \            }\n        }\n        return newMessage;", "        StringBuilder\
    \ builder = new StringBuilder(message);\n        StringBuilder firstLetter = new\
    \ StringBuilder();\n        StringBuilder secondLetter = new StringBuilder();\n\
    \        StringBuilder thirdLetter = new StringBuilder();\n        StringBuilder\
    \ fourthLetter = new StringBuilder();\n        foreach (char c in message) {\n\
    \            if (Char.IsLetter(c)) {\n                if (Char.IsUpper(c)) {\n\
    \                    firstLetter.Append(c);\n                }\n             \
    \   else if (Char.IsLower(c)) {\n                    secondLetter.Append(c);\n\
    \                }\n                else {\n                    thirdLetter.Append(c);\n\
    \                }\n            }\n        }\n        if (firstLetter.Length >\
    \ 1) {\n            builder.Replace(firstLetter, secondLetter);\n        }\n \
    \       if (secondLetter.Length > 1) {\n            builder.Replace(secondLetter,\
    \ thirdLetter);\n        }\n        if (thirdLetter.Length > 1) {\n          \
    \  builder.Replace(thirdLetter, fourthLetter);\n        }\n        return builder.ToString();",
  "        string result;\n        int vowel = 26; //assume 26 vowels\n        int\
    \ alphabetSize = 26; //assume 26 letters in english alphabet\n        string vowels\
    \ = \"aeiouAEIOU\"; //vowels in english alphabet\n        string newMessage =\
    \ message;\n        bool flag = true;\n        //now find all the vowels in the\
    \ message and replace it with the letter that comes 2 places ahead of that vowel\n\
    \        for (int i = 0; i < newMessage.Length; i++) {\n            char letter\
    \ = newMessage[i];\n            if (vowels.Contains(letter)) {\n             \
    \   int index = vowels.IndexOf(letter);\n                for (int j = vowel +\
    \ 1; j < alphabetSize; j++) {\n                    if (j == index + 1) {\n   \
    \                     newMessage = newMessage.Remove(i, 1).Insert(i, newMessage[i\
    \ - index]);\n                        break;\n                    }\n        \
    \        }\n                i++;\n            }\n        }\n\n        //now find\
    \ all the letters in the message and replace them with the letters 2 places ahead\
    \ of that letter in the english alphabet\n        for (int i = 0; i < newMessage.Length;\
    \ i++) {\n            char letter = newMessage[i];\n            if (newMessage.Contains(letter))\
    \ {\n                string temp1 = newMessage.Substring(0, i - 1);\n        \
    \        string temp2 = newMessage.Substring(i + 1);\n                string temp3\
    \ = temp2 + temp1;\n                string temp4 = temp2.Replace(letter, temp3);\n\
    \                string temp5 = temp3.Replace(temp2, letter);\n              \
    \  newMessage = newMessage.Replace(temp4, temp5);\n                i++;\n    \
    \        }\n        }\n        //now find the vowels again in the new message\
    \ and replace them with the letters in the english alphabet\n        for (int\
    \ i = 0; i < newMessage.Length; i++) {\n            char letter = newMessage[i];\n\
    \            if (vowels.Contains(letter)) {\n                string temp1 = newMessage.Substring(0,\
    \ i - 1);\n                string temp2 = newMessage.Substring(i + 1);\n     \
    \           string temp3 = temp2 + temp1;\n                string temp4 = temp2.Replace(letter,\
    \ temp3);\n                string temp5 = temp3.Replace(temp2, letter);\n    \
    \            newMessage = newMessage.Replace(temp4, temp5);\n                i++;\n\
    \            }\n        }\n        //now find the vowels again in the new message\
    \ and replace them with the letters 2 places ahead of that letter in the english\
    \ alphabet\n        for (int i = 0; i < newMessage.Length; i++) {\n          \
    \  char letter = newMessage[i];\n            if (newMessage.Contains(letter))\
    \ {\n                string temp1 = newMessage.Substring(0, i - 1);\n        \
    \        string temp2 = newMessage.Substring(i + 1);\n                string temp3\
    \ = temp2 + temp1;\n                string temp4 = temp2.Replace(letter, temp3);\n\
    \                string temp5 = temp3.Replace(temp2, letter);\n              \
    \  new", "        if (string.IsNullOrWhiteSpace(message)) return message;\n\n\
    \        var result = new StringBuilder();\n        foreach (var letter in message)\n\
    \        {\n            var index = letter.ToLower().IndexOfAny(new char[] { 'a',\
    \ 'e', 'i', 'o', 'u', 'y' });\n            if (index != -1) result.Append(letter.Substring(0,\
    \ index) + letters[index + 1]);\n            else result.Append(letter);\n   \
    \     }\n        return result.ToString();", "        StringBuilder result = new\
    \ StringBuilder();\n        foreach(char c in message) {\n            char upper\
    \ = Char.ToUpper(c);\n            char lower;\n            if(Char.IsUpper(c))\
    \ {\n                lower = Char.ToLower(upper);\n            } else {\n    \
    \            lower = upper;\n            }\n            int upperCount = message.IndexOf(upper)\
    \ + 1;\n            int lowerCount = message.IndexOf(lower) + 1;\n           \
    \ int index = upperCount;\n            if(upperCount > lowerCount) {\n       \
    \         index = lowerCount;\n            }\n            result.Append(lower.ToString()\
    \ + message.Substring(index, upperCount - index));\n        }\n        return\
    \ result.ToString();", "        char[] vowels = { \n            'a', 'e', 'i',\
    \ 'o', 'u', 'A', 'E', 'I', 'O', 'U'\n        };\n\n        StringBuilder builder\
    \ = new StringBuilder();\n\n        foreach (char letter in message)\n       \
    \ {\n            if (vowels.Contains(letter))\n            {\n               \
    \ builder.Append(vowels[vowels.IndexOf(letter) - 2]);\n            }\n       \
    \     else\n            {\n                builder.Append(letter);\n         \
    \   }\n        }\n\n        return builder.ToString();", "        // Your code\
    \ here\n        string result = \"\";\n        string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n        foreach (char c in message) {\n            if (alphabet.IndexOf(c.ToString())\
    \ >= 0) {\n                result += c;\n                continue;\n         \
    \   }\n            int i = alphabet.IndexOf(c.ToString());\n            result\
    \ += alphabet[(i - 2) % 26] + alphabet[i];\n        }\n        return result;",
  "        char[] charArray = message.ToCharArray();\n        StringBuilder builder\
    \ = new StringBuilder(charArray.Length);\n        foreach (char c in charArray)\
    \ {\n            if (char.IsLower(c)) {\n                int index = char.ToLower(c).ToUpper().IndexOf('C');\n\
    \                if (index != -1) {\n                    builder.Append(char.ToLower(c));\n\
    \                    builder.Append(message[index + 1]);\n                } else\
    \ {\n                    builder.Append(message.Substring(index + 1, 1));\n  \
    \              }\n            } else if (char.IsUpper(c)) {\n                int\
    \ index = char.ToUpper(c).IndexOf('A');\n                if (index != -1) {\n\
    \                    builder.Append(char.ToUpper(c));\n                    builder.Append(message[index\
    \ + 2]);\n                } else {\n                    builder.Append(message.Substring(index\
    \ + 2, 1));\n                }\n            } else if (char.IsLetter(c)) {\n \
    \               builder.Append(char.ToLower(c));\n            }\n        }\n \
    \       return builder.ToString();", '        // Your code here', "        StringBuilder\
    \ result = new StringBuilder(message.Length);\n        foreach (char c in message)\n\
    \            result.Append(\n                c == 'a' ? 'A' :\n              \
    \  c == 'b' ? 'B' :\n                c == 'c' ? 'C' :\n                c == 'd'\
    \ ? 'D' :\n                c == 'e' ? 'E' :\n                c == 'f' ? 'F' :\n\
    \                c == 'g' ? 'G' :\n                c == 'h' ? 'H' :\n        \
    \        c == 'i' ? 'I' :\n                c == 'j' ? 'J' :\n                c\
    \ == 'k' ? 'K' :\n                c == 'l' ? 'L' :\n                c == 'm' ?\
    \ 'M' :\n                c == 'n' ? 'N' :\n                c == 'o' ? 'O' :\n\
    \                c == 'p' ? 'P' :\n                c == 'q' ? 'Q' :\n        \
    \        c == 'r' ? 'R' :\n                c == 's' ? 'S' :\n                c\
    \ == 't' ? 'T' :\n                c == 'u' ? 'U' :\n                c == 'v' ?\
    \ 'V' :\n                c == 'w' ? 'W' :\n                c == 'x' ? 'X' :\n\
    \                c == 'y' ? 'Y' :\n                c == 'z' ? 'Z' :\n        \
    \        c == 'A' ? 'a' :\n                c == 'B' ? 'b' :\n                c\
    \ == 'C' ? 'c' :\n                c == 'D' ? 'd' :\n                c == 'E' ?\
    \ 'e' :\n                c == 'F' ? 'f' :\n                c == 'G' ? 'g' :\n\
    \                c == 'H' ? 'h' :\n                c == 'I' ? 'i' :\n        \
    \        c == 'J' ? 'j' :\n                c == 'K' ? 'k' :\n                c\
    \ == 'L' ? 'l' :\n                c == 'M' ? 'm' :\n                c == 'N' ?\
    \ 'n' :\n                c == 'O' ? 'o' :\n                c == 'P' ? 'p' :\n\
    \                c == 'Q' ? 'q' :\n                c == 'R' ? 'r' :\n        \
    \        c == 'S' ? 's' :\n                c == 'T' ? 't' :\n                c\
    \ == 'U' ? 'u' :\n                c == 'V' ? 'v' :\n                c == 'W' ?\
    \ 'w' :\n                c == 'X' ? 'x' :\n                c == 'Y' ? 'y' :\n\
    \                c == 'Z' ? 'z'\n            );\n        return result.ToString();",
  "        // Declare variables to hold the decoded message. \n        string encodedMessage\
    \ = \"\";\n        // Declare an array to hold the vowels, and the corresponding\
    \ \n        // indices in message. \n        char[] vowels = { 'a','e','i','o','u'\
    \ };\n        int[] indices = new int[26];\n        // Declare a counter called\
    \ indexOfVowel, which starts at zero. \n        int indexOfVowel = 0;\n      \
    \  // Iterate through the message and keep a count of how many \n        // letters\
    \ are in the message. \n        foreach (char c in message)\n        {\n     \
    \       // If the letter c is a letter, then append it to the \n            //\
    \ encoded message. \n            if (Char.IsLetter(c))\n            {\n      \
    \          encodedMessage += c;\n            }\n            // Otherwise, if the\
    \ letter c is a vowel, append the letter \n            // that appears 2 places\
    \ ahead of c to the encoded message. \n            else if (char.IsVowel(c))\n\
    \            {\n                encodedMessage += vowels[indices[c] + 2];\n  \
    \          }\n            // Otherwise, append the letter that appears 1 place\
    \ ahead \n            // of c to the encoded message. \n            else\n   \
    \         {\n                encodedMessage += vowels[indices[c] + 1];\n     \
    \       }\n            // Increment the index of c by one and set the index of\
    \ c \n            // to the value of indexOfVowel. \n            indices[c]++;\n\
    \            indices[c] = indexOfVowel;\n            indexOfVowel++;\n       \
    \ }\n        return encodedMessage;", "        char previous = ' ';\n        string\
    \ result = \"\";\n        foreach (char c in message) {\n            char next\
    \ = previous;\n            previous = c;\n            if (Char.IsLetter(c)) {\n\
    \                next = GetNextLetter(previous, c);\n            }\n         \
    \   result += next;\n        }\n        return result;", "        List<char> alphabet\
    \ = new List<char>() { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',\
    \ 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };\n\
    \        List<char> vowels = new List<char>() { 'a', 'e', 'i', 'o', 'u' };\n\n\
    \        var output = string.Join(\"\", alphabet\n            .Zip(vowels, (x,\
    \ y) => new { x, y })\n            .Select(x => x.x.ToUpper())\n            .Select(x\
    \ => x + x.y)\n            .Select(x => char.ToUpper(x)));\n\n        foreach\
    \ (var ch in message)\n            output = output.Replace(ch, \"\");\n\n    \
    \    return output;", "        // TODO: write your function here!\n        var\
    \ vowels = new List<char>(new[] { 'a', 'e', 'i', 'o', 'u' });\n        var lowerCaseLetters\
    \ = new List<char>(new[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' });\n        var\
    \ upperCaseLetters = new List<char>(new[] { 'A', 'B', 'C', 'D', 'E', 'F', 'G',\
    \ 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'\
    \ });\n        foreach(var c in message) {\n            var index = c.ToUpper().IndexOfAny(vowels);\n\
    \            if(index != -1) {\n                var a = index + 2;\n         \
    \       var b = index + 3;\n                message = message.Replace(vowels[a],\
    \ vowels[b]);\n            }\n            index = c.ToUpper().IndexOfAny(lowerCaseLetters);\n\
    \            if(index != -1) {\n                var a = index + 2;\n         \
    \       var b = index + 3;\n                message = message.Replace(lowerCaseLetters[a],\
    \ lowerCaseLetters[b]);\n            }\n            index = c.ToUpper().IndexOfAny(upperCaseLetters);\n\
    \            if(index != -1) {\n                var a = index + 2;\n         \
    \       var b = index + 3;\n                message = message.Replace(upperCaseLetters[a],\
    \ upperCaseLetters[b]);\n            }\n        }\n        return message;", " \
    \       // Your code goes here\n        char[] arr = message.ToCharArray();\n\
    \        string result = \"\";\n        foreach (char c in arr) {\n          \
    \  result += (char.IsUpper(c)) ? (char.IsUpper(arr[c-1]) ? arr[c-1] : arr[c])\
    \ : c;\n        }\n        return result;", "        // Your code here\n     \
    \   return null;", "        char[] array = new char[message.Length];\n       \
    \ for (int i = 0; i < message.Length; i++) {\n            array[i] = message[i];\n\
    \        }\n        char[] vowels = { 'a', 'e', 'i', 'o', 'u' };\n        char[]\
    \ letters = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', \n            'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowelsRearranged\
    \ = new char[message.Length];\n        Array.Sort(vowels);\n        Array.Sort(letters);\n\
    \        Array.Sort(vowelsRearranged);\n        for (int i = 0; i < message.Length;\
    \ i++) {\n            if (vowels.Contains(array[i])) {\n                for (int\
    \ j = 0; j < vowels.Length; j++) {\n                    if (i == j) {\n      \
    \                  vowelsRearranged[j] = vowels[i];\n                        break;\n\
    \                    }\n                }\n            } else {\n            \
    \    for (int j = 0; j < letters.Length; j++) {\n                    if (i ==\
    \ j) {\n                        vowelsRearranged[j] = letters[i];\n          \
    \              break;\n                    }\n                }\n            }\n\
    \        }\n        string result = string.Empty;\n        for (int i = 0; i <\
    \ vowelsRearranged.Length; i++) {\n            result += vowelsRearranged[i];\n\
    \        }\n        return result;", "        // YOUR CODE HERE\n\n        return\
    \ message;", "        // Write your code here\n        string result = \"\";\n\
    \        var vowels = new HashSet<char>(new[] {'a', 'e', 'i', 'o', 'u', 'y'});\n\
    \        foreach(char c in message) {\n            char vowel = char.ToLower(c);\n\
    \            result += vowel;\n        }\n        char[] newarray = new char[result.Length];\n\
    \        for(int i = 0; i < result.Length; i++) {\n            char c = result[i];\n\
    \            int position = 0;\n            bool found = false;\n            for(int\
    \ j = 0; j < vowels.Count; j++) {\n                position = (int)vowels[j];\n\
    \                if(position == i) {\n                    newarray[i] = vowels[j];\n\
    \                    found = true;\n                    break;\n             \
    \   }\n            }\n            if(!found) {\n                newarray[i] =\
    \ c;\n            }\n        }\n        string result = new string(newarray);\n\
    \        foreach(char c in result) {\n            char newc = char.ToUpper(c);\n\
    \        }\n        \n        return result;", "        string encoded = \"\"\
    ;\n        for (int i = 0; i < message.Length; i++) {\n            if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n                encoded += message[i] + message[++i];\n\
    \            }\n            else if (message[i] >= 'A' && message[i] <= 'Z') {\n\
    \                encoded += message[i] + message[++i];\n            }\n      \
    \      else if (message[i] == ' ') {\n                encoded += message[i] +\
    \ message[++i];\n            }\n        }\n        return encoded;", "       \
    \ var result = \"\";\n        message = message.ToLower();\n        var vowels\
    \ = \"AEIOUaeiouy\";\n        var map = new Dictionary<char, char>();\n      \
    \  foreach (var letter in message) {\n            if (vowels.Contains(letter))\
    \ {\n                var vowelIndex = message.IndexOf(letter);\n             \
    \   var vowelPosition = vowels.IndexOf(letter.ToUpper());\n                var\
    \ vowelToChange = vowels[vowelIndex + 1];\n                map[vowelToChange]\
    \ = letter;\n                result += (map[vowelToChange]);\n            } else\
    \ {\n                result += map.ContainsKey(letter) ? map[letter] : letter;\n\
    \            }\n        }\n        return result;", "        // Get the english\
    \ alphabet, with two spaces \n        // after each letter.\n        var alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\" + \" \"; \n        // Initialize a List to\
    \ hold the swapped letter pairs.\n        List<char> swappedLetters = new List<char>();\n\
    \        // Iterate through each letter of the message.\n        foreach(var letter\
    \ in message) {\n            // If the letter is a vowel, then \n            //\
    \ add it to the swappedLetters List.\n            if (letter == 'a' || letter\
    \ == 'e' || letter == 'i' || letter == 'o' || letter == 'u') {\n             \
    \   swapped.Add(letter);\n            }\n            // If the letter is not a\
    \ vowel, \n            // add it to the alphabet List and \n            // increment\
    \ the index for two spaces.\n            else {\n                alphabet.Add(letter);\n\
    \            }\n        }\n        // Now we have a string with letters swapped\
    \ for every other letter.\n        // We now want to replace any vowels in the\
    \ message with their\n        // counterparts 2 spaces ahead in the alphabet.\n\
    \        // We iterate through the message again, \n        // and replace any\
    \ vowels with their swapped letter pair.\n        foreach (var letter in message)\
    \ {\n            if (letter == 'a' || letter == 'e' || letter == 'i' || letter\
    \ == 'o' || letter == 'u') {\n                alphabet.Replace(letter, swappedLetters[0]);\n\
    \                swapped.RemoveAt(0);\n            }\n            else {\n   \
    \             alphabet.Replace(letter, swappedLetters[0]);\n                swapped.RemoveAt(0);\n\
    \            }\n        }\n        // We now have the complete encoded message.\n\
    \        return string.Join(\"\", alphabet);", "        var chars = message.ToCharArray();\n\
    \        var result = new StringBuilder();\n        bool useLetters = false;\n\
    \        for (int i = 0; i < chars.Length; ++i) {\n            if (chars[i] ==\
    \ 'A') useLetters = true;\n            if (chars[i] == 'a') useLetters = true;\n\
    \            if (chars[i] == 'O') useLetters = true;\n            if (chars[i]\
    \ == 'o') useLetters = true;\n            if (chars[i] == 'I') useLetters = true;\n\
    \            if (chars[i] == 'i') useLetters = true;\n            if (chars[i]\
    \ == 'U') useLetters = true;\n            if (chars[i] == 'u') useLetters = true;\n\
    \            if (chars[i] == 'E') useLetters = true;\n            if (chars[i]\
    \ == 'e') useLetters = true;\n        }\n        if (useLetters) {\n         \
    \   for (int i = 0; i < chars.Length; ++i) {\n                if (chars[i] ==\
    \ 'A') {\n                    result.Append((char)(chars[i] - 'A' + 2));\n   \
    \             } else if (chars[i] == 'a') {\n                    result.Append((char)(chars[i]\
    \ - 'a' + 2));\n                } else if (chars[i] == 'O') {\n              \
    \      result.Append((char)(chars[i] - 'O' + 2));\n                } else if (chars[i]\
    \ == 'o') {\n                    result.Append((char)(chars[i] - 'o' + 2));\n\
    \                } else if (chars[i] == 'I') {\n                    result.Append((char)(chars[i]\
    \ - 'I' + 2));\n                } else if (chars[i] == 'i') {\n              \
    \      result.Append((char)(chars[i] - 'i' + 2));\n                } else if (chars[i]\
    \ == 'U') {\n                    result.Append((char)(chars[i] - 'U' + 2));\n\
    \                } else if (chars[i] == 'u') {\n                    result.Append((char)(chars[i]\
    \ - 'u' + 2));\n                } else if (chars[i] == 'E') {\n              \
    \      result.Append((char)(chars[i] - 'E' + 2));\n                } else if (chars[i]\
    \ == 'e') {\n                    result.Append((char)(chars[i] - 'e' + 2));\n\
    \                }\n            }\n        } else {\n            for (int i =\
    \ 0; i < chars.Length; ++i) {\n                if (chars[i] == 'A') {\n      \
    \              result.Append((char)(chars[i] + 'A' + 2));\n                } else\
    \ if (chars[i] == 'a') {\n                    result.Append((char)(chars[i] +\
    \ 'a' + 2));\n                } else if (chars[i] == 'O') {\n                \
    \    result.Append((char)(chars[i] + 'O' + 2));\n                } else if (chars[i]\
    \ == 'o') {\n                    result.Append((char)(chars[i] + 'o' + 2));\n\
    \                } else if (chars[i] == 'I') {\n                    result.Append((char)(chars[i]\
    \ + 'I' + 2));\n                } else if (chars[i] == 'i') {\n              \
    \      result.Append((char)(chars[i] + 'i' + 2));\n                } else if (chars[i]\
    \ == 'U') {\n                    result.Append((char)(chars[i] + 'U' + 2));\n\
    \                } else if (chars[i]", "        var lookup = \n            \"\
    ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\".ToCharArray();\n      \
    \  var codes = \n            \"DEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    .ToCharArray();\n\n        // For each character in the message\n        foreach(var\
    \ c in message)\n        {\n            // Find out what index it's at\n     \
    \       var index = lookup.IndexOf(c);\n            // If it's not a vowel, do\
    \ nothing\n            if (index < 0) continue;\n            // Get the code for\
    \ the character at that position\n            var code = codes[index];\n     \
    \       // Swap case (doesn't matter where it is)\n            c = c.ToUpper();\n\
    \            // If it's in the lookup string\n            if (lookup.Contains(c))\n\
    \                // Get the index 2 places ahead of the vowel\n              \
    \  var index2 = \n                    index + \n                    lookup.Length\
    \ - \n                    codes.Length;\n                // Replace the vowel\
    \ with the code at that position\n                c = codes[index2];\n       \
    \ }\n        return c;", "        string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n        var alphabetArray = new string[alphabet.Length];\n        for (int\
    \ i = 0; i < alphabet.Length; i++)\n            alphabetArray[i] = (char)(i +\
    \ 64);\n        alphabetArray[64] = \".\";\n        alphabetArray[65] = \"A\"\
    ;\n        alphabetArray[66] = \"B\";\n        alphabetArray[67] = \"C\";\n  \
    \      alphabetArray[68] = \"D\";\n        alphabetArray[69] = \"E\";\n      \
    \  alphabetArray[70] = \"F\";\n        alphabetArray[71] = \"G\";\n        alphabetArray[72]\
    \ = \"H\";\n        alphabetArray[73] = \"I\";\n        alphabetArray[74] = \"\
    J\";\n        alphabetArray[75] = \"K\";\n        alphabetArray[76] = \"L\";\n\
    \        alphabetArray[77] = \"M\";\n        alphabetArray[78] = \"N\";\n    \
    \    alphabetArray[79] = \"O\";\n        alphabetArray[80] = \"P\";\n        alphabetArray[81]\
    \ = \"Q\";\n        alphabetArray[82] = \"R\";\n        alphabetArray[83] = \"\
    S\";\n        alphabetArray[84] = \"T\";\n        alphabetArray[85] = \"U\";\n\
    \        alphabetArray[86] = \"V\";\n        alphabetArray[87] = \"W\";\n    \
    \    alphabetArray[88] = \"X\";\n        alphabetArray[89] = \"Y\";\n        alphabetArray[90]\
    \ = \"Z\";\n        alphabetArray[91] = \".\";\n        alphabetArray[92] = \"\
    A\";\n        alphabetArray[93] = \"B\";\n        alphabetArray[94] = \"C\";\n\
    \        alphabetArray[95] = \"D\";\n        alphabetArray[96] = \"E\";\n    \
    \    alphabetArray[97] = \"F\";\n        alphabetArray[98] = \"G\";\n        alphabetArray[99]\
    \ = \"H\";\n        alphabetArray[100] = \"I\";\n        alphabetArray[101] =\
    \ \"J\";\n        alphabetArray[102] = \"K\";\n        alphabetArray[103] = \"\
    L\";\n        alphabetArray[104] = \"M\";\n        alphabetArray[105] = \"N\"\
    ;\n        alphabetArray[106] = \"O\";\n        alphabetArray[107] = \"P\";\n\
    \        alphabetArray[108] = \"Q\";\n        alphabetArray[109] = \"R\";\n  \
    \      alphabetArray[110] = \"S\";\n        alphabetArray[111] = \"T\";\n    \
    \    alphabetArray[112] = \"U\";\n        alphabetArray[113] = \"V\";\n      \
    \  alphabetArray[114] = \"W\";\n        alphabetArray[", "        HashSet<char>\
    \ vowels = new HashSet<char>() { 'a', 'e', 'i', 'o', 'u' };\n        HashSet<char>\
    \ consonants = new HashSet<char>() { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        string\
    \ output = new StringBuilder();\n        bool swapcase = true;\n        foreach\
    \ (char c in message.ToCharArray()) {\n            if (vowels.Contains(c)) {\n\
    \                output.Append((c - 64).ToString());\n            } else if (consonants.Contains(c))\
    \ {\n                output.Append((c - 64).ToString());\n            } else {\n\
    \                output.Append(c);\n            }\n        }\n        foreach\
    \ (char c in message.ToCharArray()) {\n            if (vowels.Contains(c)) {\n\
    \                output.Insert(message.IndexOf(c) + 2, (c - 64).ToString());\n\
    \            } else if (consonants.Contains(c)) {\n                output.Insert(message.IndexOf(c)\
    \ + 2, (c - 64).ToString());\n            } else {\n                output.Insert(message.IndexOf(c)\
    \ + 2, c);\n            }\n        }\n        return output.ToString();", "  \
    \      string encoded = \"\";\n        char[] arr = message.ToCharArray();\n \
    \       int currentVowel = 0;\n        for(int i = 0; i < arr.Length; i++) {\n\
    \            if (char.IsLetter(arr[i])) {\n                encoded += (char)(char.ToLower(arr[i]).ToUpper());\n\
    \                for (int x = i; x < arr.Length; x++) {\n                    if\
    \ (arr[x] == arr[i]) {\n                        currentVowel = x;\n          \
    \              break;\n                    }\n                }\n            \
    \    encoded += arr[currentVowel];\n            }\n        }\n        return encoded;",
  "        string result = \"\";\n        for (int i = 0; i < message.Length; i++)\
    \ {\n            string letter = message[i].ToLower();\n            if (IsVowel(letter))\
    \ {\n                result += \"e\";\n            }\n            else {\n   \
    \             result += \"o\";\n            }\n            if (IsVowel(letter))\
    \ {\n                result += \"o\";\n            }\n            result += letter;\n\
    \        }\n        return result;", "        // TODO: Write your code here.\n\
    \        return string.Empty;", "        var letters = message.ToCharArray().ToList();\n\
    \        letters.Sort();\n        letters.Insert(1, ' ');\n        var vowels\
    \ = Enumerable.Range(0, 26).Select(i => char.ToUpper(Convert.ToChar(letters.ElementAtOrDefault(i))))\n\
    \            .Distinct();\n        letters = letters.Select(l => l.Equals(vowels.ElementAtOrDefault(0)\
    \ ? \"a\" : l)).ToArray();\n        letters.Insert(2, ' ');\n        letters =\
    \ letters.Select(l => l.Equals(vowels.ElementAtOrDefault(1) ? \"A\" : l)).ToArray();\n\
    \        var result = string.Concat(letters);\n        var vowelsCount = vowels.Count();\n\
    \        if (vowelsCount > 0) {\n            var firstVowel = vowels.ElementAtOrDefault(0);\n\
    \            var secondVowel = vowels.ElementAtOrDefault(1);\n            var\
    \ thirdVowel = vowels.ElementAtOrDefault(2);\n            var firstLetter = Convert.ToChar(firstVowel);\n\
    \            var secondLetter = Convert.ToChar(secondVowel);\n            var\
    \ thirdLetter = Convert.ToChar(thirdVowel);\n            var firstIndexOfVowel\
    \ = result.IndexOf(firstLetter);\n            var secondIndexOfVowel = result.IndexOf(secondLetter);\n\
    \            var thirdIndexOfVowel = result.IndexOf(thirdLetter);\n          \
    \  while (firstIndexOfVowel >= 0 && secondIndexOfVowel >= 0 && thirdIndexOfVowel\
    \ >= 0) {\n                result = result.Insert(firstIndexOfVowel + secondIndexOfVowel,\
    \ firstLetter);\n                result = result.Insert(secondIndexOfVowel + thirdIndexOfVowel,\
    \ secondLetter);\n                result = result.Insert(thirdIndexOfVowel + firstIndexOfVowel,\
    \ thirdLetter);\n                firstIndexOfVowel = result.IndexOf(firstLetter);\n\
    \                secondIndexOfVowel = result.IndexOf(secondLetter);\n        \
    \        thirdIndexOfVowel = result.IndexOf(thirdLetter);\n            }\n   \
    \     }\n        return result;", "        if (string.IsNullOrEmpty(message))\
    \ {\n            return \"\";\n        }\n        char[] alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    .ToCharArray();\n        StringBuilder sb = new StringBuilder();\n        foreach\
    \ (char letter in message) {\n            int pos = alphabet.IndexOf(letter);\n\
    \            int nextPos = pos + 1;\n            if (nextPos >= alphabet.Length)\
    \ {\n                nextPos = 0;\n            }\n            char nextLetter\
    \ = alphabet[nextPos];\n            sb.Append(nextLetter);\n        }\n      \
    \  return sb.ToString();", "        string result = \"\";\n        foreach (char\
    \ c in message) {\n            string currentVowel = \"aeiou\";\n            int\
    \ currentVowelIndex = -1;\n            for (int i = 0; i < currentVowel.Length;\
    \ i++) {\n                if (c.Equals(currentVowel[i])) {\n                 \
    \   currentVowelIndex = i;\n                    break;\n                }\n  \
    \          }\n            if (currentVowelIndex > 0) {\n                string\
    \ currentChar = String.Empty;\n                for (int i = 0; i < currentVowel.Length;\
    \ i++) {\n                    if (currentVowelIndex == i) {\n                \
    \        currentChar = c;\n                    }\n                    else {\n\
    \                        currentChar += currentVowel[i];\n                   \
    \ }\n                }\n                result += currentChar;\n            }\n\
    \            else {\n                result += c;\n            }\n        }\n\
    \        return result;", "        \n        char[] letters = message.ToCharArray();\n\
    \n        // Sort characters to make vowels easier\n        Array.Sort(letters);\n\
    \n        // Build array of vowel positions\n        int[] vowelPositions = new\
    \ int[letters.Length];\n        for (int i = 0; i < letters.Length; i++) {\n \
    \           if (letters[i] == 'A' || letters[i] == 'E' || letters[i] == 'I'\n\
    \                || letters[i] == 'O' || letters[i] == 'U') {\n              \
    \  vowelPositions[i] = i;\n            }\n        }\n\n        // Find position\
    \ for first vowel in message\n        int firstVowelPosition = Array.IndexOf(vowelPositions,\
    \ 0);\n\n        // Replace vowels in message with vowel that occurs in 2 spots\
    \ ahead of vowel\n        for (int i = 0; i < message.Length; i++) {\n       \
    \     if (vowelPositions[i] != firstVowelPosition) {\n                letters[i]\
    \ = letters[vowelPositions[i]];\n            }\n        }\n\n        // Return\
    \ message in new sorted order\n        return new string(letters);", "       \
    \ char[] letters = message.ToCharArray();\n        int[] vowels = {0,1,2,3,4,5,6,7,8,9};\n\
    \        int[] doubleVowels = {2,3,5,7,9};\n        int[] swapVowels = {1,0,4,5};\n\
    \        string newLetters = string.Empty;\n        foreach (char letter in letters)\
    \ {\n            // swap case for all letters\n            char newLetter = char.ToUpper(letter);\n\
    \            // replace vowels\n            for (int i = 0; i < vowels.Length;\
    \ i++) {\n                if (newLetter.Equals(vowels[i])) {\n               \
    \     newLetter = (char)(newLetter + swapVowels[i]);\n                }\n    \
    \        }\n            // replace double vowels\n            for (int i = 0;\
    \ i < doubleVowels.Length; i++) {\n                if (newLetter.Equals(doubleVowels[i]))\
    \ {\n                    newLetter = (char)(newLetter + swapVowels[i]);\n    \
    \            }\n            }\n            // add to new string\n            newLetters\
    \ += newLetter;\n        }\n        // done!\n        return newLetters;", " \
    \       char[] messageArray = message.ToCharArray();\n        Array.Sort(messageArray);\n\
    \        int alphabetIndex = 0;\n        string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n        string encodedMessage = \"\";\n        for (int i = 0; i < messageArray.Length;\
    \ i++) {\n            if (messageArray[i] == alphabet[alphabetIndex]) {\n    \
    \            encodedMessage += alphabet[alphabetIndex + 1];\n            }\n \
    \           if (messageArray[i] == 'A' || messageArray[i] == 'E' || \n       \
    \         messageArray[i] == 'I' || messageArray[i] == 'O' || \n             \
    \   messageArray[i] == 'U') {\n                encodedMessage += messageArray[i];\n\
    \            }\n            alphabetIndex++;\n            if (alphabetIndex ==\
    \ alphabet.Length) {\n                alphabetIndex = 0;\n            }\n    \
    \    }\n        return encodedMessage;", "        // TODO Auto-generated method\
    \ stub\n        char[] aChar = message.ToCharArray();\n        int l=0;\n    \
    \    int j=0;\n        int k=0;\n        string c=\"\";\n        for(int i=0;i<aChar.Length;i++){\n\
    \            aChar[i]=(char)(aChar[i]+1);\n            if(aChar[i]>26){\n    \
    \            aChar[i]=(char)(aChar[i]-1);\n            }\n        }\n        for(int\
    \ i=0;i<aChar.Length;i++){\n            if(l==1){\n                c+=aChar[i]-1;\n\
    \            }\n            if(aChar[i]==55){\n                l++;\n        \
    \    }\n            if(aChar[i]==56){\n                l++;\n            }\n \
    \       }\n        for(int i=0;i<aChar.Length;i++){\n            if(j==2){\n \
    \               c+=aChar[i]+1;\n                j=0;\n            }\n        \
    \    if(aChar[i]==55){\n                j++;\n            }\n            if(aChar[i]==56){\n\
    \                j++;\n            }\n        }\n        for(int i=0;i<aChar.Length;i++){\n\
    \            if(k==2){\n                c+=aChar[i]+1;\n                k=0;\n\
    \            }\n            if(aChar[i]==55){\n                k++;\n        \
    \    }\n            if(aChar[i]==56){\n                k++;\n            }\n \
    \       }\n        return c;", "        string result = string.Empty;\n      \
    \  char[] letters = new char[message.Length];\n        int index = 0;\n      \
    \  foreach (char letter in message) {\n            if (char.IsLetter(letter))\
    \ {\n                letters[index] = letter;\n            }\n            else\
    \ {\n                index++;\n            }\n        }\n        HashSet<char>\
    \ vowels = new HashSet<char>() { 'a', 'e', 'i', 'o', 'u', 'y' };\n        HashSet<char>\
    \ consonants = new HashSet<char>() { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        HashSet<char>\
    \ avowel = new HashSet<char>() { 'a', 'e', 'i', 'o', 'u', 'y' };\n        HashSet<char>\
    \ aconsonant = new HashSet<char>() { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        HashSet<char>\
    \ aphone = new HashSet<char>() { 'a', 'p', 'p', 'h', 'h' };\n        HashSet<char>\
    \ atone = new HashSet<char>() { 'a', 't', 't' };\n        HashSet<char> apeol\
    \ = new HashSet<char>() { 'a', 'p', 'p', 'e', 'e' };\n        HashSet<char> aphonetwo\
    \ = new HashSet<char>() { 'a', 'p', 'p', 'h', 'h', 'h', 'h' };\n        HashSet<char>\
    \ atonetwo = new HashSet<char>() { 'a', 't', 't', 't', 't', 't' };\n        HashSet<char>\
    \ aphonethree = new HashSet<char>() { 'a', 'p', 'p', 'h', 'h', 'h', 'h', 'h',\
    \ 'h' };\n        HashSet<char> atonethree = new HashSet<char>() { 'a', 't', 't',\
    \ 't', 't', 't', 't', 't' };\n        HashSet<char> apeoltwo = new HashSet<char>()\
    \ { 'a', 'p', 'p', 'e', 'e', 'e' };\n        HashSet<char> apeolthree = new HashSet<char>()\
    \ { 'a', 'p', 'p', 'e', 'e', 'e', 'e' };\n        HashSet<char> anone = new HashSet<char>()\
    \ { 'n', 'o' };\n        HashSet<char> enegy = new HashSet<char>() { 'n', 'e',\
    \ 'g' };\n        HashSet<char> eone = new HashSet<char>() { 'e', 'n' };\n   \
    \     HashSet<char> eonetwo = new HashSet<char>() { 'e', 'n', 'e' };\n       \
    \ HashSet<char", '        // TODO: return your solution', "        if (string.IsNullOrEmpty(message))\
    \ {\n            throw new ArgumentException(\"Expected a non-empty string.\"\
    );\n        }\n        char[] result = new char[message.Length];\n        int\
    \ offset = 0;\n        Dictionary<char, char> v = new Dictionary<char, char>();\n\
    \        Dictionary<char, char> e = new Dictionary<char, char>();\n        foreach\
    \ (char c in message) {\n            if (v.ContainsKey(c)) {\n               \
    \ char a = v[c];\n                char b = e[c];\n                result[offset++]\
    \ = b;\n                result[offset++] = a;\n            } else {\n        \
    \        int index = char.ToUpper(c) - 65;\n                if (index >= 0) {\n\
    \                    char a = char.ToUpper(message[index + 1]);\n            \
    \        char b = char.ToUpper(message[index - 1]);\n                    result[offset++]\
    \ = b;\n                    result[offset++] = a;\n                } else {\n\
    \                    char c2 = c;\n                    if (c == 'U') {\n     \
    \                   c2 = char.ToUpper(c);\n                    }\n           \
    \         result[offset++] = c2;\n                }\n                v.Add(c,\
    \ c);\n                e.Add(c, c);\n            }\n        }\n        return\
    \ new string(result, 0, offset);", "        // TODO: implement this function\n\
    \        // TODO: return \"TODO: implement this function\"\n        // TODO: implement\
    \ this function\n        // TODO: return \"TODO: implement this function\"", " \
    \       string encodedMessage = \"\";\n        \n        // Make a new array that\
    \ holds all possible combinations of letters \n        // and vowels \n      \
    \  char[] messageCharArray = message.ToCharArray();\n        bool[] vowelArray\
    \ = new bool[messageCharArray.Length];\n        \n        // Make an array that\
    \ holds all possible combinations of vowels \n        // and letters \n      \
    \  char[] vowelArrayCharArray = new char[message.Length];\n        int vowelIndex\
    \ = 0;\n        \n        // Set all possible combinations of vowels and letters\n\
    \        for (int index = 0; index < message.Length; index++) {\n            if\
    \ (messageCharArray[index] == 'a') {\n                vowelArrayCharArray[index]\
    \ = 'A';\n            } else if (messageCharArray[index] == 'e') {\n         \
    \       vowelArrayCharArray[index] = 'E';\n            } else if (messageCharArray[index]\
    \ == 'i') {\n                vowelArrayCharArray[index] = 'I';\n            }\
    \ else if (messageCharArray[index] == 'o') {\n                vowelArrayCharArray[index]\
    \ = 'O';\n            } else if (messageCharArray[index] == 'u') {\n         \
    \       vowelArrayCharArray[index] = 'U';\n            } else if (messageCharArray[index]\
    \ == 'y') {\n                vowelArrayCharArray[index] = 'Y';\n            }\n\
    \        }\n\n        // Check if there are 2 or more vowels in the message\n\
    \        foreach (char vowel in vowelArrayCharArray) {\n            if (vowelArray.Contains(vowel))\
    \ {\n                int index = vowelArray.IndexOf(vowel);\n                if\
    \ (vowelArrayCharArray[index + 1] == 'a') {\n                    vowelArray[index]\
    \ = vowelArray[index + 1];\n                    vowelArray[index + 1] = 'A';\n\
    \                }\n                if (vowelArrayCharArray[index + 1] == 'e')\
    \ {\n                    vowelArray[index] = vowelArray[index + 1];\n        \
    \            vowelArray[index + 1] = 'E';\n                }\n               \
    \ if (vowelArrayCharArray[index + 1] == 'i') {\n                    vowelArray[index]\
    \ = vowelArray[index + 1];\n                    vowelArray[index + 1] = 'I';\n\
    \                }\n                if (vowelArrayCharArray[index + 1] == 'o')\
    \ {\n                    vowelArray[index] = vowelArray[index + 1];\n        \
    \            vowelArray[index + 1] = 'O';\n                }\n               \
    \ if (vowelArrayCharArray[index + 1] == 'u') {\n                    vowelArray[index]\
    \ = vowelArray[index + 1];\n                    vowelArray[index + 1] = 'U';\n\
    \                }\n                if (vowelArrayCharArray[index + 1] == 'y')\
    \ {\n                    vowelArray[index] = vowelArray[index + 1];\n        \
    \            vowelArray[index + 1] = 'Y';\n                }\n            }\n\
    \        }\n\n        // Check all possible combinations of vowels\n        for\
    \ (int index = 0; index < vowelArray.Length; index++) {\n            if (vowelArray[index])\
    \ {\n                // Check if there are 2 or more letters adjacent to that\
    \ vowel \n", "        string result = \"\";\n        string vowels = \"AEIOUaeiou\"\
    ;\n        string alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        string newAlphabet\
    \ = \"defghjklmnopqrstuvwxyz\";\n        StringBuilder sb = new StringBuilder();\n\
    \        foreach (char c in message) {\n            int idx = alphabet.IndexOf(c);\n\
    \            if (idx != -1) {\n                int next = idx + 1;\n         \
    \       string s = String.Empty;\n                if (next < alphabet.Length &&\
    \ alphabet[next] == c) {\n                    s = newAlphabet[next];\n       \
    \         }\n                sb.Append(s);\n            } else {\n           \
    \     sb.Append(c);\n            }\n        }\n        string newMessage = sb.ToString();\n\
    \        foreach (char c in newMessage) {\n            int idx = vowels.IndexOf(c);\n\
    \            if (idx != -1) {\n                string s = String.Empty;\n    \
    \            int next = idx + 2;\n                if (next < vowels.Length &&\
    \ vowels[next] == c) {\n                    s = newAlphabet[next];\n         \
    \       }\n                sb.Append(s);\n            } else {\n             \
    \   sb.Append(c);\n            }\n        }\n        result = sb.ToString();\n\
    \        return result;", "        var charSet = @\"abcdefghijklmnopqrstuvwxyz\"\
    ;\n        var swapChars = charSet.ToLowerInvariant();\n        var vowels = new\
    \ List<char>();\n\n        foreach (var c in message)\n            if (char.IsLetter(c))\n\
    \                vowels.Add(c);\n\n        var swapped = vowels\n            .GroupBy(c\
    \ => char.IsUpper(c) ? swapChars[vowels.IndexOf(c) + 2] : c)\n            .Select(x\
    \ => x.ToString());\n\n        var result = message.Replace(vowels.ToArray(),\
    \ swapped.ToArray());\n        return result;", "        return message.Select(x\
    \ => char.ToUpper(x))\n            .Aggregate((a, b) => a + b)\n            .Aggregate(new\
    \ StringBuilder(), (current, x) => (current + (x + x.ToString().ToLower())), \"\
    \")\n            .Aggregate(new StringBuilder(), (current, x) => (current + (x\
    \ + x.ToString().ToUpper())), \"\")\n            .Aggregate(new StringBuilder(),\
    \ (current, x) => (current + (x + x.ToString().ToLower())), \"\")\n          \
    \  .Aggregate(new StringBuilder(), (current, x) => (current + (x + x.ToString().ToUpper())),\
    \ \"\")\n            .Aggregate(new StringBuilder(), (current, x) => (current\
    \ + (x + x.ToString().ToLower())), \"\")\n            .Aggregate(new StringBuilder(),\
    \ (current, x) => (current + (x + x.ToString().ToUpper())), \"\")\n          \
    \  .Aggregate(new StringBuilder(), (current, x) => (current + (x + x.ToString().ToLower())),\
    \ \"\")\n            .Aggregate(new StringBuilder(), (current, x) => (current\
    \ + (x + x.ToString().ToUpper())), \"\")\n            .Aggregate(new StringBuilder(),\
    \ (current, x) => (current + (x + x.ToString().ToLower())), \"\")\n          \
    \  .Aggregate(new StringBuilder(), (current, x) => (current + (x + x.ToString().ToUpper())),\
    \ \"\")\n            .Aggregate(new StringBuilder(), (current, x) => (current\
    \ + (x + x.ToString().ToLower())), \"\")\n            .Aggregate(new StringBuilder(),\
    \ (current, x) => (current + (x + x.ToString().ToUpper())), \"\")\n          \
    \  .Aggregate(new StringBuilder(), (current, x) => (current + (x + x.ToString().ToLower())),\
    \ \"\")\n            .Aggregate(new StringBuilder(), (current, x) => (current\
    \ + (x + x.ToString().ToUpper())), \"\")\n            .Aggregate(new StringBuilder(),\
    \ (current, x) => (current + (x + x.ToString().ToLower())), \"\")\n          \
    \  .Aggregate(new StringBuilder(), (current, x) => (current + (x + x.ToString().ToUpper())),\
    \ \"\")\n            .Aggregate(new StringBuilder(), (current, x) => (current\
    \ + (x + x.ToString().ToLower())), \"\")\n            .Aggregate(new StringBuilder(),\
    \ (current, x) => (current + (x + x.ToString().ToUpper())), \"\")\n          \
    \  .Aggregate(new StringBuilder(), (current, x) => (current + (x + x.ToString().ToLower())),\
    \ \"\")\n            .Aggregate(new StringBuilder(), (current, x) => (current\
    \ + (x + x.ToString().ToUpper())), \"\")\n            .Aggregate(new StringBuilder(),\
    \ (current, x) => (current + (x + x.ToString().ToLower())), \"\")\n          \
    \  .Aggregate(new StringBuilder(), (", "        StringBuilder builder = new StringBuilder();\n\
    \        // Replace all vowels\n        string vowels = \"AEIOUaeiou\";\n    \
    \    var v1 = vowels.ToCharArray();\n        foreach (char c1 in message) {\n\
    \            builder.Append(c1);\n        }\n        string v2 = vowels.ToCharArray();\n\
    \        for (int i = 0; i < v2.Length; i++) {\n            char c = v2[i];\n\
    \            int j = (int)(c - 'A');\n            builder.Replace(vowels, v2[j].ToString());\n\
    \        }\n        // Swap case of all letters\n        string v3 = builder.ToString();\n\
    \        for (int i = 0; i < v3.Length; i++) {\n            char c = v3[i];\n\
    \            int j = (int)(c + 32);\n            builder.Replace(v3[i], v2[j].ToString());\n\
    \        }\n        return builder.ToString();", "        bool vowel = true;\n\
    \        char a = 'a';\n        char z = 'z';\n        string vowels = \"AEIOUaeiou\"\
    ;\n        string newmessage = \"\";\n        for (int i = 0; i < message.Length;\
    \ i++) {\n            if (vowel.Equals(true)) {\n                if (vowels.IndexOf(message[i])\
    \ >= 0) {\n                    newmessage += message[i];\n                }\n\
    \                vowel = false;\n            }\n            else {\n         \
    \       if (message[i] == a) {\n                    newmessage += message[i];\n\
    \                }\n                else if (message[i] == z) {\n            \
    \        newmessage += message[i];\n                }\n                else {\n\
    \                    newmessage += (char)(message[i] + 2);\n                }\n\
    \            }\n        }\n        return newmessage;", "        char[] messageCharArray\
    \ = message.ToCharArray();\n        char[] encodedCharArray = new char[messageCharArray.Length];\n\
    \        int currentPosition = 0;\n        for (int i = 0; i < messageCharArray.Length;\
    \ i++) {\n            int letterIndex = 0;\n            bool inVowel = false;\n\
    \            for (int j = 0; j < messageCharArray.Length; j++) {\n           \
    \     if (messageCharArray[i] == messageCharArray[j]) {\n                    letterIndex\
    \ = j;\n                    break;\n                }\n            }\n       \
    \     int vowelIndex = 0;\n            for (int k = i; k < messageCharArray.Length;\
    \ k++) {\n                if (messageCharArray[k] == ' ') {\n                \
    \    vowelIndex = k;\n                    break;\n                }\n        \
    \    }\n            if (letterIndex != vowelIndex) {\n                if (letterIndex\
    \ - vowelIndex > 2) {\n                    inVowel = true;\n                }\
    \ else {\n                    inVowel = false;\n                }\n          \
    \      letterIndex = letterIndex - 1;\n            }\n            if (inVowel)\
    \ {\n                encodedCharArray[currentPosition] = ' ';\n            } else\
    \ {\n                encodedCharArray[currentPosition] = letterIndex.ToString();\n\
    \            }\n            currentPosition++;\n        }\n        return new\
    \ string(encodedCharArray);", "        return message\n            .Select(letter\
    \ => Encode(letter))\n            .Aggregate(new StringBuilder(), (sb, letter)\
    \ => sb.Append(letter))\n            .ToString();", "        if (message == null)\
    \ return null;\n\n        var newMessage = message.Replace(\" \", \"\");\n   \
    \     var chars = newMessage.ToCharArray();\n        var result = new StringBuilder();\n\
    \        var vowels = \"aeiouy\".ToCharArray();\n\n        for (int i = 0; i <\
    \ chars.Length; i++) {\n            if (chars[i] == ' ') continue;\n\n       \
    \     var position = GetPosition(chars[i], vowels);\n            char first =\
    \ chars[i];\n            char second = chars[position + 1];\n\n            chars[i]\
    \ = first;\n            chars[position + 1] = second;\n\n            result +=\
    \ chars[i].ToString();\n        }\n        return result.ToString();", "     \
    \   var newMessage = message.ToLower();\n        \n        var newStringBuilder\
    \ = new StringBuilder();\n        \n        for (int i = 0; i < newMessage.Length;\
    \ i++) {\n            if (newMessage[i] == 'a' || newMessage[i] == 'e' || \n \
    \               newMessage[i] == 'i' || newMessage[i] == 'o' || \n           \
    \     newMessage[i] == 'u' || newMessage[i] == 'y') {\n                newStringBuilder.Append(newMessage[i]);\n\
    \            }\n            else if (newMessage[i] == 'b') {\n               \
    \ var nextChar = newStringBuilder.ToString().ToLower()[i + 1];\n             \
    \   string replacement = newStringBuilder.ToString().ToLower()[i + 2];\n     \
    \           newStringBuilder.Append(nextChar.ToUpper());\n                newStringBuilder.Append(replacement);\n\
    \            }\n            else if (newMessage[i] == 'c') {\n               \
    \ var nextChar = newStringBuilder.ToString().ToLower()[i + 1];\n             \
    \   string replacement = newStringBuilder.ToString().ToLower()[i + 3];\n     \
    \           newStringBuilder.Append(nextChar.ToUpper());\n                newStringBuilder.Append(replacement);\n\
    \            }\n            else if (newMessage[i] == 'd') {\n               \
    \ var nextChar = newStringBuilder.ToString().ToLower()[i + 1];\n             \
    \   string replacement = newStringBuilder.ToString().ToLower()[i + 3];\n     \
    \           newStringBuilder.Append(nextChar.ToUpper());\n                newStringBuilder.Append(replacement);\n\
    \            }\n            else if (newMessage[i] == 'f') {\n               \
    \ var nextChar = newStringBuilder.ToString().ToLower()[i + 1];\n             \
    \   string replacement = newStringBuilder.ToString().ToLower()[i + 3];\n     \
    \           newStringBuilder.Append(nextChar.ToUpper());\n                newStringBuilder.Append(replacement);\n\
    \            }\n            else if (newMessage[i] == 'g') {\n               \
    \ var nextChar = newStringBuilder.ToString().ToLower()[i + 1];\n             \
    \   string replacement = newStringBuilder.ToString().ToLower()[i + 3];\n     \
    \           newStringBuilder.Append(nextChar.ToUpper());\n                newStringBuilder.Append(replacement);\n\
    \            }\n            else if (newMessage[i] == 'h') {\n               \
    \ var nextChar = newStringBuilder.ToString().ToLower()[i + 1];\n             \
    \   string replacement = newStringBuilder.ToString().ToLower()[i + 3];\n     \
    \           newStringBuilder.Append(nextChar.ToUpper());\n                newStringBuilder.Append(replacement);\n\
    \            }\n            else if (newMessage[i] == 'k') {\n               \
    \ var nextChar = newStringBuilder.ToString().ToLower()[i + 1];\n             \
    \   string replacement = newStringBuilder.ToString().ToLower()[i + 3];\n     \
    \           newStringBuilder.Append(nextChar", "        var result = \"\";\n \
    \       foreach (var character in message) {\n            var newChar = character.ToString();\n\
    \            var newIndex = newChar.IndexOfAny(new[] { 'a', 'e', 'i', 'o', 'u'\
    \ });\n            newChar = newChar.Substring(newIndex + 1).ToUpper();\n    \
    \        var prevChar = newChar.Substring(0, newIndex);\n            var prevIndex\
    \ = prevChar.IndexOfAny(new[] { 'a', 'e', 'i', 'o', 'u' });\n            prevChar\
    \ = prevChar.Substring(prevIndex + 1).ToUpper();\n            var index = newChar.IndexOfAny(new[]\
    \ { 'A', 'E', 'I', 'O', 'U' });\n            newChar = newChar.Substring(0, index).ToUpper();\n\
    \            newIndex += 1;\n            newIndex += 2;\n            newIndex\
    \ += newChar.Length;\n            newIndex += prevChar.Length;\n            newIndex\
    \ += newChar.Length;\n            newIndex += newChar.Length;\n            newIndex\
    \ += prevChar.Length;\n            newIndex += newChar.Length;\n            newIndex\
    \ += prevChar.Length;\n            newIndex += prevIndex;\n            newIndex\
    \ += prevIndex;\n            newIndex += prevIndex;\n            newIndex += prevIndex;\n\
    \            newIndex += prevIndex;\n            newIndex += prevIndex;\n    \
    \        newIndex += prevIndex;\n            newIndex += prevIndex;\n        \
    \    newIndex += prevIndex;\n            newIndex += prevIndex;\n            newIndex\
    \ += prevIndex;\n            newIndex += prevIndex;\n            newIndex += prevIndex;\n\
    \            newIndex += prevIndex;\n            newIndex += prevIndex;\n    \
    \        newIndex += prevIndex;\n            newIndex += prevIndex;\n        \
    \    newIndex += prevIndex;\n            newIndex += prevIndex;\n            newIndex\
    \ += prevIndex;\n            newIndex += prevIndex;\n            newIndex += prevIndex;\n\
    \            newIndex += prevIndex;\n            newIndex += prevIndex;\n    \
    \        newIndex += prevIndex;\n            newIndex += prevIndex;\n        \
    \    newIndex += prevIndex;\n            newIndex += prevIndex;\n            newIndex\
    \ += prevIndex;\n            newIndex += prevIndex;\n            newIndex += prevIndex;\n\
    \            newIndex += prevIndex;\n            newIndex += prevIndex;\n    \
    \        newIndex += prevIndex;\n            newIndex += prevIndex;\n        \
    \    newIndex += prevIndex;\n            newIndex += prevIndex;\n            newIndex\
    \ += prevIndex;\n            newIndex += prevIndex;\n            newIndex += prevIndex;\n\
    \            newIndex += prevIndex;\n            newIndex += prevIndex;\n    \
    \        newIndex += prevIndex;\n            newIndex += prevIndex;\n        \
    \    newIndex += prevIndex;\n            newIndex += prevIndex;\n            newIndex\
    \ += prevIndex;\n            newIndex += prevIndex;\n            newIndex += prevIndex;",
  "        var sb = new StringBuilder();\n        \n        var vowels = \"aeiouAEIOU\"\
    ;\n        var diphthongs = \"BCDFGHJKLMNPRSTVXZ\";\n        foreach (var letter\
    \ in message) {\n            var position = vowels.IndexOf(letter);\n        \
    \    if (position > -1) {\n                position = vowels.IndexOf(letter.ToUpper())\
    \ + 1;\n                sb.Append(diphthongs[position]);\n            } else {\n\
    \                position = vowels.IndexOf(letter.ToLower());\n              \
    \  sb.Append(diphthongs[position]);\n            }\n        }\n        return\
    \ sb.ToString();", "        string result = \"\";\n        foreach (char c in\
    \ message) {\n            string s = \"\";\n            if (char.IsLetter(c))\
    \ {\n                s = c;\n            } else if (char.IsUpper(c)) {\n     \
    \           s = s.ToLower();\n                foreach (char c2 in s) {\n     \
    \               int index = c - c2;\n                    if (index >= 65 && index\
    \ <= 90) {\n                        s += (char)(index - 65);\n               \
    \     } else if (index >= 97 && index <= 122) {\n                        s +=\
    \ (char)(index - 97);\n                    } else {\n                        s\
    \ += c2;\n                    }\n                }\n            }\n          \
    \  result += s;\n        }\n        return result;", "        StringBuilder sb\
    \ = new StringBuilder();\n        char[] vowels = \"aeiou\".ToCharArray();\n \
    \       foreach (char c in message) {\n            int index = c - 'a';\n    \
    \        int nextIndex = index + 1;\n            bool nextLetterIsVowel = vowels.Contains(nextIndex);\n\
    \            if (nextLetterIsVowel) {\n                char nextChar = vowels[nextIndex];\n\
    \                sb.Append(nextChar);\n            } else {\n                sb.Append(c);\n\
    \            }\n        }\n        return sb.ToString();", "        var vowels\
    \ = \"aeiouAEIOU\";\n        var newMessage = message.ToLower().Replace(vowels,\
    \ \"\");\n        var newVowels = \"bcdfghjklmnpqrstvwxyz\";\n        var newVowelIndex\
    \ = newVowels.Length - 1;\n        var vowelIndex = newVowels.IndexOf(vowels);\n\
    \        var pairCount = newMessage.Count(c => newVowels.Contains(c.ToString()));\n\
    \        var result = \"\";\n        foreach (char c in newMessage) {\n      \
    \      var firstChar = newVowels.Substring(vowelIndex, 1);\n            var secondChar\
    \ = newVowels.Substring(vowelIndex + 1, 1);\n            var pair = newVowels.Substring(vowelIndex\
    \ + 2, pairCount);\n            result += firstChar + secondChar + pair + c;\n\
    \        }\n        return result;", "        string vowels = \"aeiou\";\n   \
    \     char newChar = ' ';\n        string finalString = \"\";\n        for (int\
    \ i = 0; i < message.Length; i++) {\n            char currentChar = message[i];\n\
    \            if (vowels.IndexOf(currentChar) != -1) {\n                newChar\
    \ = Convert.ToChar((int)((int)currentChar + 2));\n                finalString\
    \ += newChar;\n            } else if (currentChar == ' ') {\n                finalString\
    \ += newChar;\n            }\n        }\n        return finalString;", "     \
    \   // TODO: Complete this method\n\n        char[] vowels = \"AEIOUaeiou\".ToCharArray();\n\
    \n        return string.Empty;", "        var vowels = \"aeiouAEIOU\";\n     \
    \   var messageWithVowels = message;\n        Regex regex = new Regex(\"[\" +\
    \ vowels + \"]\");\n        var newVowels = regex.Replace(message, \"\");\n  \
    \      StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < newVowels.Length;\
    \ i++) {\n            char v = newVowels[i];\n            if (vowels.IndexOf(v)\
    \ != i) {\n                sb.Append(newVowels[i]);\n            }\n        }\n\
    \        sb = new StringBuilder(sb.ToString());\n        Regex regex2 = new Regex(\"\
    [AEIOU]\");\n        var newMessage = regex2.Replace(sb.ToString(), \"\");\n \
    \       StringBuilder sb2 = new StringBuilder();\n        foreach (char c in newMessage)\
    \ {\n            char v2 = newVowels[newVowels.IndexOf(newVowels.ToLower())];\n\
    \            sb2.Append(c);\n            sb2.Append(v2);\n        }\n        sb2\
    \ = new StringBuilder(sb2.ToString());\n        for (int i = 0; i < newVowels.Length;\
    \ i++) {\n            char v2 = newVowels[i];\n            if (vowels.IndexOf(v2)\
    \ != i) {\n                sb2.Append(v2);\n            }\n        }\n       \
    \ sb2 = new StringBuilder(sb2.ToString());\n        for (int i = 0; i < newVowels.Length;\
    \ i++) {\n            char v2 = newVowels[i];\n            if (vowels.IndexOf(v2)\
    \ != i) {\n                sb2.Append(v2);\n            }\n        }\n       \
    \ sb2 = new StringBuilder(sb2.ToString());\n        for (int i = 0; i < newVowels.Length;\
    \ i++) {\n            char v2 = newVowels[i];\n            if (vowels.IndexOf(v2)\
    \ != i) {\n                sb2.Append(v2);\n            }\n        }\n       \
    \ sb2 = new StringBuilder(sb2.ToString());\n        return sb2.ToString();", " \
    \       string result = \"\";\n        int i = 0;\n        char nextChar;\n  \
    \      int numVowels = countVowels(message);\n        char lastVowel = message[numVowels\
    \ - 1];\n        do {\n            nextChar = message[i];\n            result\
    \ += nextChar.ToString();\n            i++;\n        } while (i < message.Length);\n\
    \n        // Swap case\n        result = result.Replace(\"A\", \"a\").Replace(\"\
    b\", \"b\").Replace(\"c\", \"c\")\n            .Replace(\"d\", \"d\").Replace(\"\
    e\", \"e\").Replace(\"f\", \"f\").Replace(\"g\", \"g\")\n            .Replace(\"\
    h\", \"h\").Replace(\"i\", \"i\").Replace(\"j\", \"j\").Replace(\"k\", \"k\")\n\
    \            .Replace(\"l\", \"l\").Replace(\"m\", \"m\").Replace(\"n\", \"n\"\
    ).Replace(\"o\", \"o\")\n            .Replace(\"p\", \"p\").Replace(\"q\", \"\
    q\").Replace(\"r\", \"r\").Replace(\"s\", \"s\")\n            .Replace(\"t\",\
    \ \"t\").Replace(\"u\", \"u\").Replace(\"v\", \"v\").Replace(\"w\", \"w\")\n \
    \           .Replace(\"x\", \"x\").Replace(\"y\", \"y\").Replace(\"z\", \"z\"\
    );\n\n        // Replace vowel\n        result = result.Replace(lastVowel, nextChar.ToString());\n\
    \n        return result;", "        char[] a = message.ToCharArray();\n      \
    \  int v = 0;\n        string s = \"\";\n        foreach (char t in a) {\n   \
    \         switch (t) {\n                case 'a':\n                    s = \"\
    AEIOU\";\n                    break;\n                case 'b':\n            \
    \        s = \"BCDFGHJKLMNPQRSTVWXYZ\";\n                    break;\n        \
    \        case 'c':\n                    s = \"CHDMILKNRS\";\n                \
    \    break;\n                case 'd':\n                    s = \"DHN\";\n   \
    \                 break;\n                case 'e':\n                    s = \"\
    EGY\";\n                    break;\n                case 'f':\n              \
    \      s = \"FYNCXZ\";\n                    break;\n                case 'g':\n\
    \                    s = \"GYZ\";\n                    break;\n              \
    \  case 'h':\n                    s = \"HJP\";\n                    break;\n \
    \               case 'i':\n                    s = \"IILK\";\n               \
    \     break;\n                case 'j':\n                    s = \"JKLM\";\n \
    \                   break;\n                case 'k':\n                    s =\
    \ \"K\";\n                    break;\n                case 'l':\n            \
    \        s = \"LJ\";\n                    break;\n                case 'm':\n\
    \                    s = \"M\";\n                    break;\n                case\
    \ 'n':\n                    s = \"NG\";\n                    break;\n        \
    \        case 'o':\n                    s = \"OE\";\n                    break;\n\
    \                case 'p':\n                    s = \"P\";\n                 \
    \   break;\n                case 'q':\n                    s = \"Q\";\n      \
    \              break;\n                case 'r':\n                    s = \"R\"\
    ;\n                    break;\n                case 's':\n                   \
    \ s = \"SS\";\n                    break;\n                case 't':\n       \
    \             s = \"T\";\n                    break;\n                case 'u':\n\
    \                    s = \"U\";\n                    break;\n                case\
    \ 'v':\n                    s = \"VWY\";\n                    break;\n       \
    \         case 'w':\n                    s = \"W\";\n                    break;\n\
    \                case 'x':\n                    s = \"X\";\n                 \
    \   break;\n                case 'y':\n                    s = \"Y\";\n      \
    \              break;\n                case 'z':\n                    s = \"Z\"\
    ;\n                    break;\n            }\n            if (s.Contains(t.ToString())\
    \ == false) {\n                for (int z = 0; z < s.Length; z++) {\n        \
    \            if (s[z].ToString() == t.ToString()) {\n                        v\
    \ = z;\n                        break;\n                    }\n              \
    \  }\n            }\n            s = s.Replace(t.ToString(), s[v].ToString());\n\
    \        }\n        return s;", "        // TODO: write your code\n        string\
    \ result;\n        char vowel = 'a';\n        char vowel2 = 'e';\n        char\
    \ vowel3 = 'i';\n        char vowel4 = 'o';\n        char vowel5 = 'u';\n    \
    \    string englishLetters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        char englishLetters1\
    \ = 'a';\n        char englishLetters2 = 'b';\n        char englishLetters3 =\
    \ 'c';\n        char englishLetters4 = 'd';\n        char englishLetters5 = 'e';\n\
    \        char englishLetters6 = 'f';\n        char englishLetters7 = 'g';\n  \
    \      char englishLetters8 = 'h';\n        char englishLetters9 = 'i';\n    \
    \    char englishLetters10 = 'j';\n        char englishLetters11 = 'k';\n    \
    \    char englishLetters12 = 'l';\n        char englishLetters13 = 'm';\n    \
    \    char englishLetters14 = 'n';\n        char englishLetters15 = 'o';\n    \
    \    char englishLetters16 = 'p';\n        char englishLetters17 = 'q';\n    \
    \    char englishLetters18 = 'r';\n        char englishLetters19 = 's';\n    \
    \    char englishLetters20 = 't';\n        char englishLetters21 = 'u';\n    \
    \    char englishLetters22 = 'v';\n        char englishLetters23 = 'w';\n    \
    \    char englishLetters24 = 'x';\n        char englishLetters25 = 'y';\n    \
    \    char englishLetters26 = 'z';\n        char englishLetters27 = '1';\n    \
    \    char englishLetters28 = '2';\n        char englishLetters29 = '3';\n    \
    \    char englishLetters30 = '4';\n        char englishLetters31 = '5';\n    \
    \    char englishLetters32 = '6';\n        char englishLetters33 = '7';\n    \
    \    char englishLetters34 = '8';\n        char englishLetters35 = '9';\n    \
    \    char englishLetters36 = '0';\n        char englishLetters37 = 'A';\n    \
    \    char englishLetters38 = 'B';\n        char englishLetters39 = 'C';\n    \
    \    char englishLetters40 = 'D';\n        char englishLetters41 = 'E';\n    \
    \    char englishLetters42 = 'F';\n        char englishLetters43 = 'G';\n    \
    \    char englishLetters44 = 'H';\n        char englishLetters45 = '", "     \
    \   if (message == null) return null;\n        char[] letters = message.ToCharArray();\n\
    \        string result = \"\";\n        for (int i = 0; i < letters.Length; i++)\
    \ {\n            char letter = letters[i];\n            if (Char.IsLetter(letter))\
    \ {\n                result += Char.ToUpper(letter);\n            }\n        \
    \    else {\n                result += letter;\n            }\n        }\n   \
    \     for (int i = 0; i < result.Length; i++) {\n            char letter = result[i];\n\
    \            int index = i;\n            while (true) {\n                index\
    \ = result.IndexOf(letter, index + 1);\n                if (index < 0) break;\n\
    \                char previous = result[i - 1];\n                char next = result[index\
    \ + 1];\n                if (Char.IsUpper(previous) && !Char.IsUpper(next)) {\n\
    \                    char swap = Char.ToUpper(letter);\n                    result[index]\
    \ = swap;\n                    result[i-1] = swap;\n                }\n      \
    \          else {\n                    char swap = Char.ToLower(letter);\n   \
    \                 result[index] = swap;\n                    result[i-1] = swap;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   int vowelCount = 0;\n        List<char> vowels = new List<char>();\n     \
    \   foreach(char c in message) {\n            switch(c) {\n                case\
    \ 'a' : case 'e' : case 'i' : case 'o' : case 'u' : vowels.Add(c); break;\n  \
    \              case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : vowels.Add(c);\
    \ break;\n            }\n        }\n\n        string messageWithoutVowels = new\
    \ string(message.Where(c => !vowels.Contains(c)).ToArray());\n        char[] sortedChars\
    \ = messageWithoutVowels.ToCharArray().OrderBy(c => c).ToArray();\n\n        List<char>\
    \ codes = new List<char>();\n        for (int i = 0; i < sortedChars.Length; i++)\
    \ {\n            if (vowels.Contains(sortedChars[i])) {\n                vowelCount++;\n\
    \                codes.Add(sortedChars[i]);\n            } else {\n          \
    \      codes.Add(sortedChars[i]);\n            }\n        }\n\n        char[]\
    \ sortedCodes = codes.OrderBy(c => c).ToArray();\n        int codeCount = 0;\n\
    \        for(int i = 0; i < sortedChars.Length; i++) {\n            if (vowels.Contains(sortedChars[i]))\
    \ {\n                codes.RemoveAt(i);\n                codeCount++;\n      \
    \      }\n        }\n        string result = new string(sortedCodes.Reverse().ToArray());\n\
    \        return result;", "        string returnMessage = \"\";\n        foreach(char\
    \ c in message) {\n            int firstLetter = c - 'a';\n            int secondLetter\
    \ = c - 'a' + 1;\n            if(firstLetter >= 0 && secondLetter >= 0 && firstLetter\
    \ <= 26 && secondLetter <= 26) {\n                if(firstLetter < secondLetter)\
    \ {\n                    returnMessage += Convert.ToChar((int)firstLetter + 'a');\n\
    \                } else {\n                    returnMessage += Convert.ToChar((int)secondLetter\
    \ + 'a');\n                }\n            } else if(firstLetter >= 0 && secondLetter\
    \ >= 0 && firstLetter <= 25 && secondLetter <= 25) {\n                if(firstLetter\
    \ < secondLetter) {\n                    returnMessage += Convert.ToChar((int)firstLetter\
    \ + 'a' + 1);\n                } else {\n                    returnMessage +=\
    \ Convert.ToChar((int)secondLetter + 'a' + 1);\n                }\n          \
    \  } else if(firstLetter >= 0 && secondLetter >= 0 && firstLetter <= 24 && secondLetter\
    \ <= 24) {\n                if(firstLetter < secondLetter) {\n               \
    \     returnMessage += Convert.ToChar((int)firstLetter + 'a' + 2);\n         \
    \       } else {\n                    returnMessage += Convert.ToChar((int)secondLetter\
    \ + 'a' + 2);\n                }\n            } else if(firstLetter >= 0 && secondLetter\
    \ >= 0 && firstLetter <= 23 && secondLetter <= 23) {\n                if(firstLetter\
    \ < secondLetter) {\n                    returnMessage += Convert.ToChar((int)firstLetter\
    \ + 'a' + 3);\n                } else {\n                    returnMessage +=\
    \ Convert.ToChar((int)secondLetter + 'a' + 3);\n                }\n          \
    \  } else if(firstLetter >= 0 && secondLetter >= 0 && firstLetter <= 22 && secondLetter\
    \ <= 22) {\n                if(firstLetter < secondLetter) {\n               \
    \     returnMessage += Convert.ToChar((int)firstLetter + 'a' + 4);\n         \
    \       } else {\n                    returnMessage += Convert.ToChar((int)secondLetter\
    \ + 'a' + 4);\n                }\n            } else if(firstLetter >= 0 && secondLetter\
    \ >= 0 && firstLetter <= 21 && secondLetter <= 21) {\n                if(firstLetter\
    \ < secondLetter) {\n                    returnMessage += Convert.ToChar((int)firstLetter\
    \ + 'a' + 5);\n                } else {\n                    returnMessage +=\
    \ Convert.ToChar((int)secondLetter + 'a' + 5);\n                }\n          \
    \  } else if(firstLetter >= 0 && secondLetter >= 0 && firstLetter <= 20 && secondLetter\
    \ <= 20) {\n                if(firstLetter < secondLetter) {\n               \
    \     returnMessage += Convert.ToChar((int)firstLetter + 'a' + 6);\n         \
    \       } else {\n                    returnMessage ", "        return message.ToUpperInvariant().ToCharArray()\n\
    \                       .Select((c, i) => \n                           {\n   \
    \                            var v = (char)((int)c ^ 2);\n                   \
    \            return i == 0\n                                       ? c\n     \
    \                                  : \n                                      \
    \  (v.Equals((char)65)\n                                         ? c\n       \
    \                                  : \n                                      \
    \     (v.Equals((char)97)\n                                           ? c \n \
    \                                          : \n                              \
    \                (v.Equals((char)98)\n                                       \
    \        ? c \n                                               : \n           \
    \                                       (v.Equals((char)123)\n               \
    \                                    ? c \n                                  \
    \                 : \n                                                    (v.Equals((char)58)\n\
    \                                                     ? c \n                 \
    \                                   : \n                                     \
    \                 (v.Equals((char)90)\n                                      \
    \                 ? c \n                                                     \
    \  : \n                                                        (v.Equals((char)122)\n\
    \                                                       ? c \n               \
    \                                        : \n                                \
    \                          (v.Equals((char)96)\n                             \
    \                              ? c \n                                        \
    \                   : \n                                                     \
    \       (v.Equals((char)121)\n                                               \
    \            ? c \n                                                          \
    \ : \n                                                            (v.Equals((char)47)\n\
    \                                                           ? c \n           \
    \                                                : \n                        \
    \                                    (v.Equals((char)104)\n                  \
    \                                         ? c \n                             \
    \                              : \n                                          \
    \                  (v.Equals((char)105)\n                                    \
    \                       ? c \n                                               \
    \            : \n                                                            \
    \  (v.Equals((char)114)\n                                                    \
    \          ? c \n                                                            \
    \  : \n                                                                (v.Equals((char)115)\n\
    \                                                                ? c \n      \
    \                                                          : \n              \
    \                                                    (v.Equals((char)112)\n  \
    \                                                                ? c \n      \
    \                                                            : \n            \
    \                                                        (v.Equals((char)49)\n\
    \                                                                    ? c \n  \
    \                                                                  : \n      \
    \                                                              (v.Equals((char)50)\n\
    \                                                                    ? c \n  \
    \                                                                  : \n      \
    \                                                                (v.Equals((char)51)\n\
    \                                                                          ? c\
    \ \n                                                                         \
    \ : \n                                            (v.Equals((char)52)\n      \
    \                                                                    ? c \n  \
    \                                                                        : \n\
    \                                                              (v.Equals((char)91)\n\
    \                                                              ? c \n        \
    \                                                      : \n                  \
    \                                              (v.Equals((char)92)\n         \
    \                                                       ? c \n               \
    \                                                 : \n                       \
    \                                           (v.Equals((char)82)\n            \
    \                                                      ? c \n                \
    \                                                  : \n                      \
    \                                              (v.Equals((char)83)\n         \
    \                                                           ? c \n           \
    \                                                         : \n               \
    \                                                     (v.Equals((char)71)\n  \
    \                                                                  ? c \n    \
    \                                                                : \n        \
    \                                                              (v.Equals((char)72)\n\
    \                                                                          ? c\
    \ \n                                                                         \
    \ : \n                                            (v.Equals((char)73)\n      \
    \                                                                    ? c \n  \
    \                                                                        : \n\
    \                                                              (v.Equals((char)78)\n\
    \                                                              ? c \n        \
    \                                                      : \n                  \
    \                                              (v.Equals((char)79)\n         \
    \                                                       ? c \n               \
    \                                                 : \n                       \
    \                                           ", "        if (string.IsNullOrEmpty(message))\
    \ {\n            throw new ArgumentException(\"Cannot encode an empty string.\"\
    );\n        }\n        string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n   \
    \     string vowels = \"aeiou\";\n        string swappedAlphabet = \"\";\n   \
    \     List<string> letters = new List<string>();\n        foreach (char c in message.ToCharArray())\
    \ {\n            if (alphabet.IndexOf(c) != -1) {\n                letters.Add(c);\n\
    \            }\n        }\n        foreach (char c in message.ToCharArray()) {\n\
    \            if (vowels.IndexOf(c) != -1) {\n                swappedAlphabet =\
    \ swappedAlphabet + alphabet.IndexOf(c) + 1;\n                letters.Add(swappedAlphabet.ToCharArray()[c]);\n\
    \            }\n        }\n        string encoded = \"\";\n        int i = 0;\n\
    \        foreach (char c in letters) {\n            if (i == 0 && i % 2 == 0)\
    \ {\n                encoded = c + swappedAlphabet.ToCharArray()[alphabet.IndexOf(c)\
    \ + 1];\n            } else {\n                encoded = c + swappedAlphabet.ToCharArray()[alphabet.IndexOf(c)\
    \ - 1];\n            }\n            i++;\n        }\n        return encoded;",
  "        // TODO: \n        // Write your answer here\n        // Make sure you\
    \ call ToLower on both sides of the operation\n        return null;", "      \
    \  var result = new StringBuilder();\n\n        // Write your code here\n    \
    \    for (int i = 0; i < message.Length; i++) {\n            char c = message[i];\n\
    \            if (char.IsLetter(c)) {\n                result.Append(ToLowerChar(c));\n\
    \            } else {\n                result.Append(c);\n            }\n    \
    \    }\n        return result.ToString();", "        if (message == null || message.Length\
    \ == 0) {\n            return message;\n        }\n        // TODO: Replace the\
    \ following with your own implementation\n        string vowels = \"aeiouAEIOU\"\
    ;\n        string replacements = \"BCDFGHJKLMNPQRTSUVWXY\";\n        string vowelIndex\
    \ = \"\";\n        string replacementIndex = \"\";\n        string result = \"\
    \";\n        for (int i = 0; i < message.Length; i++) {\n            if (vowels.IndexOf(message[i])\
    \ != -1) {\n                vowelIndex += message[i];\n            }\n       \
    \     else {\n                replacementIndex += message[i];\n            }\n\
    \        }\n        for (int i = 0; i < vowelIndex.Length; i++) {\n          \
    \  result += replacements[vowelIndex.IndexOf(vowels[i], 1) + replacementIndex.IndexOf(vowels[i],\
    \ 1)];\n        }\n        return result;", "        // Your code here\n     \
    \   var englishLetters = new char[] {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', \n\
    \                                        'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\
    \ \n                                        'Q', 'R', 'S', 'T', 'U', 'V', 'W',\
    \ 'X', \n                                        'Y', 'Z'};\n        var letterCount\
    \ = message.Count(c => c == ' ');\n        var vowels = \"aeiouAEIOU\".ToCharArray();\n\
    \        var replacedMessage = message.ToCharArray();\n\n        var replacementDict\
    \ = new Dictionary<char, char>();\n        var replacementCount = englishLetters.Count();\n\
    \        foreach (var e in vowels)\n        {\n            var index = englishLetters.IndexOf(e);\n\
    \            replacementDict.Add(e, letterCount+index);\n        }\n\n       \
    \ for (int i = message.Length-1; i >= 0; i--)\n        {\n            var c =\
    \ message[i];\n            var letter = c;\n            var index = englishLetters.IndexOf(letter);\n\
    \            replacementDict[letter] = (replacementDict[letter] == letterCount)\
    \ ? \n                englishLetters[index+1] : replacementDict[letter];\n   \
    \         replacedMessage[i] = replacementDict[letter];\n        }\n        return\
    \ new string(replacedMessage);", "        //Your code here\n        char[] vowels\
    \ = new char[]{'a', 'e', 'i', 'o', 'u'};\n        char[] letters = new char[]{'a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};\n        char[] noVowels = new\
    \ char[]{'A', 'E', 'I', 'O', 'U'};\n        Dictionary<char, char> dict = new\
    \ Dictionary<char, char>();\n\n        foreach (char c in letters) {\n       \
    \     dict[c] = c;\n        }\n        foreach (char c in noVowels) {\n      \
    \      dict[c] = c;\n        }\n        foreach (char c in vowels) {\n       \
    \     dict.Add(c, c);\n        }\n        foreach (char c in message)\n      \
    \  {\n            string newMessage = string.Empty;\n            if (dict.ContainsKey(c))\n\
    \            {\n                newMessage = dict[c];\n            }\n       \
    \     else\n            {\n                foreach (KeyValuePair<char, char> kvp\
    \ in dict)\n                {\n                    if (kvp.Value == c)\n     \
    \               {\n                        newMessage = kvp.Key;\n           \
    \             break;\n                    }\n                }\n            }\n\
    \            message += newMessage;\n        }\n        char[] message = message.ToCharArray();\n\
    \        StringBuilder sb = new StringBuilder();\n        int x = 1;\n       \
    \ int y = 1;\n        for (int i = 0; i < message.Length; i++)\n        {\n  \
    \          if (message[i] == 'A')\n            {\n                if (y % 2 ==\
    \ 0)\n                {\n                    sb.Append('1');\n               \
    \ }\n                else\n                {\n                    sb.Append('2');\n\
    \                }\n                y++;\n            }\n            else if (message[i]\
    \ == 'E')\n            {\n                if (x % 2 == 0)\n                {\n\
    \                    sb.Append('1');\n                }\n                else\n\
    \                {\n                    sb.Append('2');\n                }\n \
    \               x++;\n            }\n            else if (message[i] == 'O')\n\
    \            {\n                if (x % 2 == 0)\n                {\n         \
    \           sb.Append('1');\n                }\n                else\n       \
    \         {\n                    sb.Append('2');\n                }\n        \
    \        x++;\n            }\n            else if (message[i] == 'U')\n      \
    \      {\n                if (y % 2 == 0)\n                {\n               \
    \     sb.Append('1');\n                }\n                else\n             \
    \   {\n                    sb.Append('2');\n                }\n              \
    \  y++;\n            }\n            else if (message[i] == 'I')\n            {\n\
    \                if (x % 2 == 0)\n                {\n                    sb.Append('1');\n\
    \                }\n                else\n                {\n                \
    \    sb.Append('2');\n                }\n                x++;\n            }\n\
    \        }", "        string result = \"\";\n        // Write your logic here\n\
    \        char[] vowels = { 'a', 'e', 'i', 'o', 'u' };\n        char alphabet[]\
    \ = { ' ', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\
    \ 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };\n        char[]\
    \ message = message.ToCharArray();\n        Array.Sort(message);\n        for\
    \ (int i = 0; i < message.Length; i++) {\n            if (((int)message[i] + 1)\
    \ < 65 && \n            ((int)message[i] + 1) >= 97) {\n                result\
    \ += alphabet[(message[i] + 1) - (97)];\n            }\n            else if (message[i]\
    \ == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i]\
    \ == 'u') {\n                result += alphabet[(message[i] + 1) - (65)];\n  \
    \          }\n            else {\n                result += message[i];\n    \
    \        }\n        }\n        return result;", "        string[] vowels = new\
    \ string[] { \"a\", \"e\", \"i\", \"o\", \"u\" };\n        Dictionary<char, int>\
    \ letters = new Dictionary<char, int>();\n        for (int i = 0; i < vowels.Length;\
    \ i++) {\n            letters.Add(vowels[i], i);\n        }\n        char[] letterArray\
    \ = message.ToCharArray();\n        char[] newLetterArray = new char[letterArray.Length];\n\
    \        for (int i = 0; i < letterArray.Length; i++) {\n            char letter\
    \ = letterArray[i];\n            if (letters.ContainsKey(letter)) {\n        \
    \        newLetterArray[i] = letters[letter];\n            }\n            else\
    \ {\n                newLetterArray[i] = letter;\n            }\n        }\n \
    \       return new string(newLetterArray);", "        string alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n        string vowels = \"AEIOU\";\n        string newmessage = \"\";\n   \
    \     for(int i = 0; i < message.Length; i++) {\n            newmessage += message[i].ToUpper();\n\
    \        }\n        for(int i = 0; i < message.Length; i++) {\n            if(message[i]\
    \ == \" \") {\n                newmessage += \" \";\n            } else {\n  \
    \              for(int j = 0; j < alphabet.Length; j++) {\n                  \
    \  if(alphabet[j] == message[i]) {\n                        newmessage += alphabet[j\
    \ + 1];\n                        break;\n                    }\n             \
    \   }\n                for(int j = 0; j < vowels.Length; j++) {\n            \
    \        if(vowels[j] == message[i]) {\n                        newmessage +=\
    \ alphabet[j + 1];\n                        break;\n                    }\n  \
    \              }\n            }\n        }\n        return newmessage;", "   \
    \     var vowels = new[] { 'a', 'e', 'i', 'o', 'u' };\n        var newMessage\
    \ = \"\";\n        var index = -1;\n        foreach (var letter in message) {\n\
    \            index += 1;\n            newMessage += letter;\n            if (vowels.Contains(letter)\
    \ && index == 2) {\n                var nextIndex = message.IndexOf(letter, index\
    \ + 1);\n                var nextLetter = message.Substring(nextIndex + 1, 1);\n\
    \                newMessage += nextLetter;\n                index = -1;\n    \
    \        }\n        }\n        return newMessage;", "        // TODO: complete\
    \ this function\n        return \"\";", "        // code goes here\n        var\
    \ newMessage = message.ToUpper();\n        var newArray = new string[newMessage.Length];\n\
    \        var vowels = \"AEIOUaeiou\".ToUpper();\n        foreach (var s in newMessage)\
    \ {\n            var index = newArray.IndexOf(s);\n            if (index != -1)\
    \ {\n                index = Array.IndexOf(newArray, s);\n                newArray[index]\
    \ = vowels[(index + 1) % (vowels.Length - 1)];\n            } else {\n       \
    \         newArray.Add(s);\n            }\n        }\n        return new string(newArray);",
  "        // Create a StringBuilder object to hold our result\n        StringBuilder\
    \ result = new StringBuilder();\n        // Iterate through the string and replace\
    \ all the vowels \n        // in the message with the letter that appears 2 places\
    \ \n        // ahead of that vowel in the english alphabet.\n        foreach (char\
    \ letter in message) {\n            if (letter == 'A' || letter == 'E' || letter\
    \ == 'I' || letter == 'O' || letter == 'U') {\n                result.Append(Convert.ToChar(letter\
    \ + 2));\n            } else {\n                result.Append(letter);\n     \
    \       }\n        }\n        return result.ToString();"]
stop_tokens:
- "\n    }\n"
