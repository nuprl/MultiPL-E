language: cs
name: HumanEval_61_correct_bracketing
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int openBrackets = 0;\n      \
    \  int closingBrackets = 0;\n        foreach (char c in brackets) {\n        \
    \    if (c == '(') openBrackets++;\n            if (c == ')') closingBrackets++;\n\
    \        }\n        if (openBrackets != closingBrackets)\n            return false;\n\
    \        return true;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fdb41333d0724fed93e831195dc701c9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fdb41333d0724fed93e831195dc701c9>:0 \n"
  stdout: ''
  timestamp: 1660008853
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return\
    \ false;\n        var stack = new Stack<string>();\n        bool found = false;\n\
    \        var openCount = new Dictionary<char, int>();\n        for (int i = 0;\
    \ i < brackets.Length; i++) {\n            var char = brackets[i];\n         \
    \   if (openCount.ContainsKey(char)) {\n                openCount[char]++;\n \
    \           }\n            else {\n                openCount[char] = 1;\n    \
    \            stack.Push(char);\n            }\n            if (openCount.ContainsKey(char)\
    \ && openCount[char] == 1) {\n                found = true;\n            }\n \
    \           else if (openCount.ContainsKey(char)) {\n                openCount[char]--;\n\
    \                if (openCount[char] == 0) {\n                    found = true;\n\
    \                }\n            }\n            else {\n                if (openCount[char]\
    \ == 0) {\n                    found = true;\n                }\n            }\n\
    \            if (stack.Count == 0) {\n                return found;\n        \
    \    }\n        }\n        // fail\n        Debug.Assert(stack.Count == 0);\n\
    \        return found;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoqeeevyz.cs(25,17): error CS1002: ; expected

    /tmp/tmpoqeeevyz.cs(25,22): error CS1001: Identifier expected

    /tmp/tmpoqeeevyz.cs(26,39): error CS1525: Invalid expression term ''char''

    /tmp/tmpoqeeevyz.cs(27,27): error CS1525: Invalid expression term ''char''

    /tmp/tmpoqeeevyz.cs(30,27): error CS1525: Invalid expression term ''char''

    /tmp/tmpoqeeevyz.cs(31,28): error CS1525: Invalid expression term ''char''

    /tmp/tmpoqeeevyz.cs(33,39): error CS1525: Invalid expression term ''char''

    /tmp/tmpoqeeevyz.cs(33,58): error CS1525: Invalid expression term ''char''

    /tmp/tmpoqeeevyz.cs(36,44): error CS1525: Invalid expression term ''char''

    /tmp/tmpoqeeevyz.cs(37,27): error CS1525: Invalid expression term ''char''

    /tmp/tmpoqeeevyz.cs(38,31): error CS1525: Invalid expression term ''char''

    /tmp/tmpoqeeevyz.cs(43,31): error CS1525: Invalid expression term ''char''

    '
  timestamp: 1660008852
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var openBrackets = brackets.Split('(');\n\
    \        var closeBrackets = brackets.Split(')');\n\n        // Check all opening\
    \ brackets\n        var openingBracketsCount = openBrackets.Count();\n       \
    \ for (int i = 0; i < openingBracketsCount; i++) {\n            if (closeBrackets.Contains(openBrackets[i]))\
    \ {\n                // Found the closing bracket\n                return false;\n\
    \            }\n        }\n\n        // If we get to here, we found no closing\
    \ brackets.\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fc85b35b7e774349b570ebd1dff9d236>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fc85b35b7e774349b570ebd1dff9d236>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008852
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var count = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                count++;\n\
    \            }\n            if (c == ')') {\n                count--;\n      \
    \      }\n        }\n        return count == 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <32637f0036294004855dd1de224995c9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <32637f0036294004855dd1de224995c9>:0 \n"
  stdout: ''
  timestamp: 1660008852
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var stack = new Stack<string>();\n\
    \        for (int i = 0; i < brackets.Length; ++i) {\n            if (brackets[i]\
    \ == '(') {\n                if (!stack.Any()) {\n                    return false;\n\
    \                }\n                string s = stack.Pop();\n                if\
    \ (s != \"(\") {\n                    return false;\n                }\n     \
    \           stack.Push(brackets[i]);\n            } else {\n                string\
    \ s = stack.Peek();\n                if (s != brackets[i]) {\n               \
    \     return false;\n                }\n                stack.RemoveAt(0);\n \
    \           }\n        }\n        return stack.Count == 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptjdmnfrr.cs(30,28): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmptjdmnfrr.cs(33,21): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''string'' and ''char''

    /tmp/tmptjdmnfrr.cs(36,23): error CS1061: ''Stack<string>'' does not contain a
    definition for ''RemoveAt'' and no accessible extension method ''RemoveAt'' accepting
    a first argument of type ''Stack<string>'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1660008852
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var openingBracketCount = brackets.Count(x\
    \ => x == '(');\n        var closingBracketCount = brackets.Count(x => x == ')');\n\
    \        return openingBracketCount == closingBracketCount;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cf6650a32bb142d7ab89b07d0b871acb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cf6650a32bb142d7ab89b07d0b871acb>:0 \n"
  stdout: ''
  timestamp: 1660008853
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int openCount = 0;\n        foreach\
    \ (char bracket in brackets) {\n            if (bracket == '(')\n            \
    \    ++openCount;\n            if (bracket == ')')\n                --openCount;\n\
    \            if (openCount == 0)\n                return false;\n        }\n \
    \       return true;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <599c29fe01044dcea9d2a41e8f10b205>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <599c29fe01044dcea9d2a41e8f10b205>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008852
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var stack = new Stack<string>();\n\
    \        foreach (var c in brackets) {\n            switch (c) {\n           \
    \ case '(':\n                stack.Push(c);\n                break;\n        \
    \    case ')':\n                var openBracket = stack.Pop();\n             \
    \   if (openBracket != c) {\n                    return false;\n             \
    \   }\n                break;\n            default:\n                return false;\n\
    \            }\n        }\n        return stack.Count == 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzvmpnjuq.cs(24,28): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpzvmpnjuq.cs(28,21): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''string'' and ''char''

    '
  timestamp: 1660008852
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var builder = new StringBuilder(brackets);\n\
    \        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i]\
    \ == '(') {\n                if (builder.Length == 0) return true;\n         \
    \       if (builder[builder.Length - 1] != ')') return false;\n              \
    \  builder.Remove(builder.Length - 1, 1);\n            } else if (brackets[i]\
    \ == '(') {\n                if (builder.Length == 0) return false;\n        \
    \        if (builder[builder.Length - 1] != ')') return false;\n             \
    \   builder.Remove(builder.Length - 1, 1);\n            } else break;\n      \
    \  }\n        return builder.Length == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <53221f2e4267427b995c8aee32652ffd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <53221f2e4267427b995c8aee32652ffd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008852
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Stack<char> stack = new Stack<char>();\n\
    \        foreach (char c in brackets) {\n            if (c == '(') {\n       \
    \         stack.push('(');\n            } else if (c == '[') {\n             \
    \   stack.push('[');\n            } else if (c == '{') {\n                stack.push('{');\n\
    \            } else if (c == '+') {\n                stack.push('+');\n      \
    \      } else if (c == '-') {\n                stack.pop();\n            } else\
    \ if (c == '|') {\n                stack.push('|');\n            } else if (c\
    \ == '}') {\n                stack.pop();\n            } else if (c == ']') {\n\
    \                stack.pop();\n            } else if (c == '}') {\n          \
    \      stack.pop();\n            } else if (c == ')') {\n                stack.pop();\n\
    \            } else {\n                Debug.Assert(false);\n                return\
    \ false;\n            }\n        }\n        // return true if all brackets are\
    \ balanced.\n        if (stack.Count < 1)\n            return true;\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpts9fpeww.cs(23,23): error CS1061: ''Stack<char>'' does not contain a definition
    for ''push'' and no accessible extension method ''push'' accepting a first argument
    of type ''Stack<char>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpts9fpeww.cs(25,23): error CS1061: ''Stack<char>'' does not contain a definition
    for ''push'' and no accessible extension method ''push'' accepting a first argument
    of type ''Stack<char>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpts9fpeww.cs(27,23): error CS1061: ''Stack<char>'' does not contain a definition
    for ''push'' and no accessible extension method ''push'' accepting a first argument
    of type ''Stack<char>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpts9fpeww.cs(29,23): error CS1061: ''Stack<char>'' does not contain a definition
    for ''push'' and no accessible extension method ''push'' accepting a first argument
    of type ''Stack<char>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpts9fpeww.cs(31,23): error CS1061: ''Stack<char>'' does not contain a definition
    for ''pop'' and no accessible extension method ''pop'' accepting a first argument
    of type ''Stack<char>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpts9fpeww.cs(33,23): error CS1061: ''Stack<char>'' does not contain a definition
    for ''push'' and no accessible extension method ''push'' accepting a first argument
    of type ''Stack<char>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpts9fpeww.cs(35,23): error CS1061: ''Stack<char>'' does not contain a definition
    for ''pop'' and no accessible extension method ''pop'' accepting a first argument
    of type ''Stack<char>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpts9fpeww.cs(37,23): error CS1061: ''Stack<char>'' does not conta'
  timestamp: 1660008852
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null)\n      \
    \      return false;\n        int openBracketCount = 0;\n        int closedBracketCount\
    \ = 0;\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i]\
    \ == '(')\n                openBracketCount++;\n            else if (brackets[i]\
    \ == '{')\n                openBracketCount++;\n            else if (brackets[i]\
    \ == '[')\n                openBracketCount++;\n            else if (brackets[i]\
    \ == '(') {\n                if (brackets[i + 1] != ')')\n                   \
    \ return false;\n                else\n                    closedBracketCount++;\n\
    \            }\n            else if (brackets[i] == '{')\n            {\n    \
    \            if (brackets[i + 1] != '}')\n                    return false;\n\
    \                else\n                    closedBracketCount++;\n           \
    \ }\n            else if (brackets[i] == '[')\n            {\n               \
    \ if (brackets[i + 1] != ']')\n                    return false;\n           \
    \     else\n                    closedBracketCount++;\n            }\n       \
    \ }\n        if (closedBracketCount != openBracketCount)\n            return false;\n\
    \        else\n            return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0f1862d0fba54769b5aedd0e9394c63c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0f1862d0fba54769b5aedd0e9394c63c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008853
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if(brackets == null) return false;\n\
    \        string openings = \"\";\n        int count = 0;\n        for(int i =\
    \ 0; i < brackets.Length; i++) {\n            if(brackets[i] == '(') openings\
    \ += \"(\";\n            else if(brackets[i] == '[') openings += \"[\";\n    \
    \        else if(brackets[i] == '{') openings += \"{\";\n            else if(brackets[i]\
    \ == '(') openings += \")\";\n            else if(brackets[i] == '[') openings\
    \ += \"]\";\n            else if(brackets[i] == '{') openings += \"}\";\n    \
    \        else {\n                if((openings.Length - 2) > count) return false;\n\
    \            }\n            count++;\n        }\n        return (openings.Length\
    \ - 2) == count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7e20f0d2ad6a4690a7083643c0991da3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7e20f0d2ad6a4690a7083643c0991da3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008852
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var stack = new Stack<char>();\n\
    \        foreach (var char in brackets) {\n            if (char == '(') {\n  \
    \              stack.Push('(');\n            } else if (char == ')') {\n     \
    \           if (stack.Count > 0) {\n                    var openingChar = stack.Pop();\n\
    \                    if (openingChar == '(')\n                        stack.Push(openingChar);\n\
    \                    else if (openingChar == ')')\n                        return\
    \ false;\n                }\n            }\n        }\n        return stack.Count\
    \ == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd_b7o_5c.cs(21,22): error CS1515: ''in'' expected

    /tmp/tmpd_b7o_5c.cs(21,22): error CS0230: Type and identifier are both required
    in a foreach statement

    /tmp/tmpd_b7o_5c.cs(21,22): error CS1525: Invalid expression term ''char''

    /tmp/tmpd_b7o_5c.cs(21,27): error CS1026: ) expected

    /tmp/tmpd_b7o_5c.cs(21,27): error CS1525: Invalid expression term ''in''

    /tmp/tmpd_b7o_5c.cs(21,27): error CS1002: ; expected

    /tmp/tmpd_b7o_5c.cs(21,27): error CS1513: } expected

    /tmp/tmpd_b7o_5c.cs(21,38): error CS1002: ; expected

    /tmp/tmpd_b7o_5c.cs(21,38): error CS1513: } expected

    /tmp/tmpd_b7o_5c.cs(22,17): error CS1525: Invalid expression term ''char''

    /tmp/tmpd_b7o_5c.cs(24,24): error CS1525: Invalid expression term ''char''

    '
  timestamp: 1660008852
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        List<char> openingBrackets = new\
    \ List<char>();\n        List<char> closingBrackets = new List<char>();\n    \
    \    foreach (char openingBracket in brackets) {\n            if (openingBracket\
    \ == '(') {\n                openingBrackets.Add('(');\n                closingBrackets.Add(')');\n\
    \            } else if (openingBracket == ')') {\n                openingBrackets.Add(')');\n\
    \                closingBrackets.Add('(');\n            } else {\n           \
    \     throw new Exception(\"Invalid bracket.\");\n            }\n        }\n\n\
    \        if (openingBrackets.Count != closingBrackets.Count) {\n            return\
    \ false;\n        }\n\n        foreach (char openingBracket in openingBrackets)\
    \ {\n            char closingBracket = closingBrackets[openingBrackets.IndexOf(openingBracket)];\n\
    \            if (openingBracket != closingBracket) {\n                return false;\n\
    \            }\n        }\n\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1e0cce897c2d4096bfce99a26e96c927>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1e0cce897c2d4096bfce99a26e96c927>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008852
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        List<string> openBrackets = new\
    \ List<string>();\n        List<string> closeBrackets = new List<string>();\n\n\
    \        // Open brackets are \"(\" and \")\"\n        foreach (char c in brackets)\
    \ {\n            if (c == '(') {\n                openBrackets.Add('(');\n   \
    \         }\n            if (c == ')') {\n                closeBrackets.Add(')');\n\
    \            }\n        }\n\n        foreach (string s in openBrackets) {\n  \
    \          if (closeBrackets.Contains(s)) {\n                return false;\n \
    \           }\n        }\n\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt5j6zg_t.cs(26,34): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpt5j6zg_t.cs(29,35): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1660008852
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var bracketCounts = brackets.ToCharArray().Select(x\
    \ => (int?)x.ToString().Length).ToArray();\n        Array.Sort(bracketCounts);\n\
    \        return bracketCounts.All(x => x == 1);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b5da6b81cc7e478cba1dd78bd2174909>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b5da6b81cc7e478cba1dd78bd2174909>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008853
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // We start at the first bracket\
    \ and work our way out.\n        // The brackets string is \"(\" and \")\".\n\
    \        // Each time we encounter a bracket, we add the next character to the\
    \ brackets string.\n        // When we encounter \")\", we decrement the brackets\
    \ string by 1.\n        // If we go too far, we return false.\n        int i =\
    \ 0;\n        bool result = true;\n\n        while (i < brackets.Length) {\n \
    \           switch (brackets[i]) {\n                case '(':\n              \
    \  case '[':\n                    brackets = brackets.Insert(++i, \"(\");\n  \
    \                  break;\n                case ')':\n                case ']':\n\
    \                    brackets = brackets.Insert(i, \")\");\n                 \
    \   break;\n                default:\n                    brackets = brackets.Insert(i,\
    \ \"(\");\n                    brackets = brackets.Insert(i, \")\");\n       \
    \             break;\n            }\n            i++;\n            if (brackets.Length\
    \ < i + 1)\n                return false;\n        }\n        return brackets.Length\
    \ == brackets.Count(c => c == ')');\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1660008858
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        List<char> openingBrackets = new\
    \ List<char>();\n        List<char> closingBrackets = new List<char>();\n    \
    \    bool success = false;\n        // Split brackets into lists of opening brackets\
    \ and closing brackets.\n        for (int i = 0; i < brackets.Length; i++) {\n\
    \            char c = brackets[i];\n            if (c == '(') {\n            \
    \    openingBrackets.Add(c);\n            }\n            else {\n            \
    \    closingBrackets.Add(c);\n            }\n        }\n        // Check the opening\
    \ brackets.\n        for (int i = 0; i < openingBrackets.Count; i++) {\n     \
    \       if (closingBrackets.Contains(openingBrackets[i])) {\n                success\
    \ = true;\n                break;\n            }\n        }\n        // Check\
    \ the closing brackets.\n        for (int i = 0; i < closingBrackets.Count; i++)\
    \ {\n            if (!openingBrackets.Contains(closingBrackets[i])) {\n      \
    \          success = true;\n                break;\n            }\n        }\n\
    \        return success;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3aca436b6b454f5aae30e74912db1261>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3aca436b6b454f5aae30e74912db1261>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008853
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        foreach (char c in brackets) {\n\
    \            switch (c) {\n                case ')':\n                    int\
    \ openBracketCount = brackets.Count(c => c == '(');\n                    if (openBracketCount\
    \ > 0) {\n                        for (int i = 0; i < openBracketCount; ++i) {\n\
    \                            if (brackets[i] != c)\n                         \
    \       return false;\n                        }\n                    }\n    \
    \                break;\n                case '(':\n                    int closeBracketCount\
    \ = brackets.Count(c => c == ')');\n                    if (closeBracketCount\
    \ > 0) {\n                        for (int i = 0; i < closeBracketCount; ++i)\
    \ {\n                            if (brackets[i] != c)\n                     \
    \           return false;\n                        }\n                    }\n\
    \                    break;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c54a11695319443dac7d91027ce0c6d0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c54a11695319443dac7d91027ce0c6d0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008853
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        bool result = false;\n       \
    \ // Remove all brackets from brackets\n        string bracketedBrackets = brackets.Replace(\"\
    (\", string.Empty).Replace(\")\", string.Empty);\n        List<int> openBrackets\
    \ = new List<int>();\n        List<int> closeBrackets = new List<int>();\n   \
    \     foreach (char c in bracketedBrackets) {\n            // If character is\
    \ opening, add to the list\n            if (c == '(') {\n                openBrackets.Add(brackets.IndexOf(c));\n\
    \            }\n            // If character is closing, remove from list\n   \
    \         if (c == ')') {\n                closeBrackets.Remove(bracketedBrackets.IndexOf(c));\n\
    \            }\n        }\n        // If no brackets are open, false\n       \
    \ if (openBrackets.Count == 0) {\n            result = true;\n        }\n    \
    \    // If all brackets are closed, true\n        if (closeBrackets.Count == 0)\
    \ {\n            result = true;\n        }\n        // If either open brackets\
    \ or close brackets are in the wrong order, false\n        if (openBrackets.Count\
    \ != closeBrackets.Count) {\n            result = false;\n        }\n        //\
    \ If two brackets are open, they are the same bracket\n        if (openBrackets.Count\
    \ == 2 && closeBrackets.Contains(openBrackets[0]) && closeBrackets.Contains(openBrackets[1]))\
    \ {\n            Debug.Assert(openBrackets[0] == openBrackets[1]);\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <806979ff471e4e6bb2a241b4dec402ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <806979ff471e4e6bb2a241b4dec402ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008852
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        char[] bracket = brackets.ToCharArray();\n\
    \        Array.Sort(bracket);\n        bool result = false;\n        for (int\
    \ i = 0; i < bracket.Length; i++) {\n            if (bracket[i] == '(' && bracket[i\
    \ + 1] == '(') {\n                result |= true;\n            }\n           \
    \ else if (bracket[i] == '(' && bracket[i + 1] == ')') {\n                result\
    \ |= false;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ed270d9c8e0a4d918181dbcd1f2848b5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ed270d9c8e0a4d918181dbcd1f2848b5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008852
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var isMatch = true;\n        var\
    \ stack = new Stack<string>();\n        foreach (var item in brackets) {\n   \
    \         if (item == \"(\") {\n                stack.Push(item);\n          \
    \  } else if (item == \")\") {\n                var peek = stack.Peek();\n   \
    \             if (!stack.Any())\n                    isMatch = false;\n      \
    \          else if (peek == \"(\")\n                    stack.Pop();\n       \
    \         else\n                    stack.Pop();\n            } else if (item\
    \ == \")(\") {\n                var peek = stack.Peek();\n                if (!stack.Any())\n\
    \                    isMatch = false;\n                else if (peek == \"(\"\
    )\n                    stack.Pop();\n                else if (peek == \")\")\n\
    \                    stack.Pop();\n                else\n                    stack.Pop();\n\
    \                stack.Push(item);\n            } else {\n                var\
    \ peek = stack.Peek();\n                if (!stack.Any())\n                  \
    \  isMatch = false;\n                else if (peek != item)\n                \
    \    isMatch = false;\n                else\n                    stack.Pop();\n\
    \            }\n        }\n        return isMatch;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd70ta5qy.cs(23,17): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmpd70ta5qy.cs(24,28): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpd70ta5qy.cs(25,24): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmpd70ta5qy.cs(33,24): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmpd70ta5qy.cs(43,28): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpd70ta5qy.cs(48,26): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''string'' and ''char''

    '
  timestamp: 1660008852
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // A stack is used to keep track\
    \ of which opening brackets have\n        // been closed last. \n        Stack<Character>\
    \ bracketStack = new Stack<Character>();\n\n        // If the string is empty,\
    \ no brackets have been opened.\n        if (brackets == null) return true;\n\n\
    \        // Iterate through the string one character at a time, and check\n  \
    \      // whether or not the current character is a closing bracket (e.g.,\n \
    \       // \")\"). \n        foreach (char c in brackets) {\n            // If\
    \ the character is a closing bracket (e.g., \"}\"), and no opening\n         \
    \   // bracket has been closed, return false.\n            if (c == ')' && !bracketStack.Any())\
    \ {\n                return false;\n            }\n\n            // Otherwise,\
    \ if the current character is an opening bracket (e.g.,\n            // \"(\"\
    ), push the current character onto the stack.\n            if (c == '(') {\n \
    \               bracketStack.Push(c);\n            }\n\n            // Otherwise,\
    \ if the current character is a closing bracket (e.g.,\n            // \")\"),\
    \ pop an opening bracket off the stack (e.g., \")\").\n            if (c == ')'\
    \ && bracketStack.Pop() != '(') {\n                return false;\n           \
    \ }\n        }\n\n        // If the string contains no closing brackets, return\
    \ true.\n        return bracketStack.Count == 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7ac509wc.cs(22,15): error CS0246: The type or namespace name ''Character''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmp7ac509wc.cs(22,51): error CS0246: The type or namespace name ''Character''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmp7ac509wc.cs(40,35): error CS1503: Argument 1: cannot convert from ''char''
    to ''Character''

    '
  timestamp: 1660008852
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null || brackets.Length\
    \ == 0) {\n            return true;\n        }\n        List<int> indexes = new\
    \ List<int>();\n        for (int i = 0; i < brackets.Length; i++) {\n        \
    \    if (brackets[i] == '(') indexes.Add(i);\n            if (brackets[i] == ')')\
    \ indexes.Add(i);\n        }\n        if (indexes.Count != brackets.Length) {\n\
    \            return false;\n        }\n        for (int i = 0; i < indexes.Count;\
    \ i++) {\n            if (indexes.Count > 1) {\n                indexes.RemoveAt(i);\n\
    \            }\n        }\n        return indexes.Count == 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <00349ac887964ef3b15d513161bc2d15>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <00349ac887964ef3b15d513161bc2d15>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008853
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var stack = new Stack<string>();\n\
    \        for (int i = 0; i < brackets.Length; i++) {\n            var b = brackets[i];\n\
    \            switch (b) {\n                case \")\":\n                    if\
    \ (!stack.Any()) {\n                        return false;\n                  \
    \  }\n                    stack.Pop();\n                    break;\n         \
    \       case \"(\":\n                    if (stack.Any()) {\n                \
    \        return false;\n                    }\n                    stack.Add(b);\n\
    \                    break;\n                default:\n                    if\
    \ (!stack.Any()) {\n                        return false;\n                  \
    \  }\n                    var s = stack.Peek();\n                    if (s !=\
    \ b) {\n                        return false;\n                    }\n       \
    \             stack.Pop();\n                    break;\n            }\n      \
    \  }\n        return stack.Count == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqb9dxt_x.cs(24,22): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpqb9dxt_x.cs(30,22): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpqb9dxt_x.cs(34,27): error CS1061: ''Stack<string>'' does not contain a
    definition for ''Add'' and no accessible extension method ''Add'' accepting a
    first argument of type ''Stack<string>'' could be found (are you missing a using
    directive or an assembly reference?)

    /tmp/tmpqb9dxt_x.cs(41,25): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''string'' and ''char''

    '
  timestamp: 1660008853
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        List<Character> openBrackets =\
    \ new List<Character>();\n        List<Character> closedBrackets = new List<Character>();\n\
    \        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i]\
    \ == '(') {\n                openBrackets.Add(brackets[i]);\n            }\n \
    \           if (brackets[i] == ')') {\n                closedBrackets.Add(brackets[i]);\n\
    \            }\n        }\n        if (openBrackets.Count == closedBrackets.Count)\
    \ {\n            return true;\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg4w04s0c.cs(20,14): error CS0246: The type or namespace name ''Character''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpg4w04s0c.cs(20,49): error CS0246: The type or namespace name ''Character''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpg4w04s0c.cs(21,14): error CS0246: The type or namespace name ''Character''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpg4w04s0c.cs(21,51): error CS0246: The type or namespace name ''Character''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpg4w04s0c.cs(24,34): error CS1503: Argument 1: cannot convert from ''char''
    to ''Character''

    /tmp/tmpg4w04s0c.cs(27,36): error CS1503: Argument 1: cannot convert from ''char''
    to ''Character''

    '
  timestamp: 1660008853
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if ((brackets == null) || brackets.Length\
    \ == 0)\n            return false;\n        var bracketedCount = brackets.Count(x\
    \ => x == '(');\n        var totalCount = brackets.Length - bracketedCount;\n\
    \        for (int i = 0; i < totalCount; i++) {\n            if (brackets[brackets.Length\
    \ - 1 - i] != '(')\n                return false;\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9018d602f3d24ddf85d8ffe08a598349>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9018d602f3d24ddf85d8ffe08a598349>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008853
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        string chars = \"(){}[]\";\n \
    \       string[] arr = brackets.Split(' ');\n        if (arr.Length > 100) return\
    \ false;\n        foreach (string a in arr) {\n            if (!chars.Contains(a))\
    \ return false;\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b4fafbd05d4a9590ca424d54423934>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b4fafbd05d4a9590ca424d54423934>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008853
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Debug.Assert(brackets.Length >\
    \ 0);\n        for (int i = 0; i < brackets.Length; i++) {\n            char nextBracket\
    \ = brackets[i];\n            if (nextBracket != '(' && nextBracket != ')') {\n\
    \                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d5633f294ae0480c9570cc72c980d00b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d5633f294ae0480c9570cc72c980d00b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008853
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var result = new List<String>();\n\
    \        foreach (var openingBracket in brackets.Split(new char[] { '(', ')' },\
    \ StringSplitOptions.RemoveEmptyEntries)) {\n            var isOpen = false;\n\
    \            foreach (var closingBracket in brackets.Split(new char[] { '(', ')'\
    \ }, StringSplitOptions.RemoveEmptyEntries)) {\n                if (openingBracket\
    \ == closingBracket) {\n                    continue;\n                }\n   \
    \             if (openingBracket == closingBracket && openingBracket == brackets.Substring(0,\
    \ brackets.Length - 1)) {\n                    isOpen = true;\n              \
    \  }\n            }\n            if (!isOpen) {\n                return false;\n\
    \            }\n            result.Add(openingBracket);\n        }\n        return\
    \ result.Count == 0;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ded7dc04c0c04eb192926e22a3de8bbd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ded7dc04c0c04eb192926e22a3de8bbd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008853
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // Initialize a stack that will\
    \ keep track of the number of opening brackets\n        // that have been seen\
    \ in the string. We start with the number 0.\n        Stack<int> counts = new\
    \ Stack<int>(new int[0]);\n\n        // Iterate through all the characters in\
    \ the string and add 1 to the number\n        // of opening brackets. This is\
    \ done because we want the counter to increase\n        // by 1 for each opening\
    \ bracket in the string.\n        foreach (char c in brackets) {\n           \
    \ switch (c) {\n                case '(':\n                    counts.Push(1);\n\
    \                    break;\n                case ')':\n                    counts.Pop();\n\
    \                    break;\n                default:\n                    break;\n\
    \            }\n        }\n\n        // If all the opening brackets are equal,\
    \ return true.\n        return counts.Count == 1;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d5e4fd6466934a71a76168de0dbcf4f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d5e4fd6466934a71a76168de0dbcf4f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008853
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var openBrackets = new Stack<string>();\n\
    \        var closeBrackets = new Stack<string>();\n        foreach (char c in\
    \ brackets) {\n            if (c == '(') {\n                if (openBrackets.Count\
    \ == 0) {\n                    return false;\n                }\n            \
    \    openBrackets.Push(string.Empty);\n            } else if (c == ')') {\n  \
    \              if (closeBrackets.Count == 0) {\n                    return false;\n\
    \                }\n                closeBrackets.Push(string.Empty);\n      \
    \      } else {\n                string current = string.Empty;\n            \
    \    while (openBrackets.Count > 0) {\n                    current += openBrackets.Pop();\n\
    \                    if (current != string.Empty) {\n                        closeBrackets.Push(current);\n\
    \                    } else {\n                        openBrackets.Pop();\n \
    \                   }\n                }\n                openBrackets.Push(c);\n\
    \            }\n        }\n        while (openBrackets.Count > 0) {\n        \
    \    string current = string.Empty;\n            while (closeBrackets.Count >\
    \ 0) {\n                current += closeBrackets.Pop();\n                if (current\
    \ != string.Empty) {\n                    openBrackets.Push(current);\n      \
    \          } else {\n                    closeBrackets.Pop();\n              \
    \  }\n            }\n            closeBrackets.Push(string.Empty);\n        }\n\
    \        if (openBrackets.Count != closeBrackets.Count) {\n            return\
    \ false;\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqbr88m2_.cs(43,35): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1660008853
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // split brackets into an array\n\
    \        string[] bracketArray = brackets.Split(new char[] { '(', ')' }); // split\
    \ brackets into an array\n        StringBuilder bracketsBuilder = new StringBuilder();\
    \ // build the brackets\n        bool allMatch = true; // flag for whether all\
    \ brackets match\n        foreach (string bracket in bracketArray) {\n       \
    \     // if the brackets don't match\n            if (bracket != \"()\" && bracket\
    \ != \"()()\" && bracket != \"(()\") {\n                allMatch = false;\n  \
    \              break;\n            }\n            bracketsBuilder.Append(bracket);\
    \ // build the brackets\n        }\n        return allMatch;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfb9c59e8ba441df8a89ec536524857a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfb9c59e8ba441df8a89ec536524857a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008853
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        List<int> openingBrackets = new\
    \ List<int>();\n        List<int> closingBrackets = new List<int>();\n       \
    \ for (int i = 0; i < brackets.Length; i++) {\n            char c = brackets[i];\n\
    \            if (c == '(') {\n                if (openingBrackets.Contains(i))\
    \ {\n                    return false;\n                }\n                openingBrackets.Add(i);\n\
    \            }\n            else if (c == ')') {\n                if (!closingBrackets.Contains(i))\
    \ {\n                    return false;\n                }\n                closingBrackets.Add(i);\n\
    \            }\n        }\n        if (openingBrackets.Count == closingBrackets.Count)\
    \ {\n            return true;\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d3b31a0fb8954269baea118b0996a20d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d3b31a0fb8954269baea118b0996a20d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008853
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int openBracketsCounter = 0;\n\
    \        int closeBracketsCounter = 0;\n        bool valid = false;\n\n      \
    \  for (int i = 0; i < brackets.Length; i++) {\n            switch (brackets[i])\
    \ {\n                case \"(\":\n                    openBracketsCounter++;\n\
    \                    break;\n                case \")\":\n                   \
    \ closeBracketsCounter++;\n                    break;\n                default:\n\
    \                    valid = false;\n                    break;\n            }\n\
    \        }\n        if (openBracketsCounter != closeBracketsCounter) {\n     \
    \       valid = false;\n        }\n        return valid;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcdb_7mmw.cs(26,22): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpcdb_7mmw.cs(29,22): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    '
  timestamp: 1660008853
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets.Length % 2 != 0)\
    \ {\n            return false;\n        }\n        var stack = new Stack<char>();\n\
    \        var stackString = new StringBuilder();\n        foreach (var c in brackets)\
    \ {\n            if (c == '(') {\n                stack.Push(c);\n           \
    \     stackString.Append(c);\n            }\n            else if (c == ')') {\n\
    \                if (stack.Count > 0 && stack.Pop() == '(') {\n              \
    \      stackString.Append(c);\n                }\n                else {\n   \
    \                 return false;\n                }\n            }\n          \
    \  else {\n                if (stack.Count != 0) {\n                    var opening\
    \ = stack.Pop();\n                    if (stackString.ToString() == opening) {\n\
    \                        stackString.Append(c);\n                    }\n     \
    \               else {\n                        return false;\n              \
    \      }\n                }\n                else {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.Count\
    \ == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd1wccyw1.cs(41,25): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''string'' and ''char''

    '
  timestamp: 1660008853
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // get an array of the opening\
    \ brackets\n        var openingBrackets = brackets.ToCharArray().Where(c => c\
    \ == '(').ToArray();\n        // get an array of the closing brackets\n      \
    \  var closingBrackets = brackets.ToCharArray().Where(c => c == ')').ToArray();\n\
    \        // if the opening brackets are all closed then there is no match\n  \
    \      if (openingBrackets.All(c => closingBrackets.Contains(c))) { return false;\
    \ }\n        // if the closing brackets are all open then there is no match\n\
    \        if (closingBrackets.All(c => openingBrackets.Contains(c))) { return false;\
    \ }\n        // else we have an open bracket, and no matching close bracket\n\
    \        return true;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e80b36dc1c74bd99d222aa82ee18d1b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e80b36dc1c74bd99d222aa82ee18d1b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008853
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Stack<char> stack = new Stack<char>();\n\
    \        foreach (char c in brackets) {\n            if (c == '(')\n         \
    \       stack.Push('(');\n            else if (c == ')')\n                while\
    \ (stack.Count > 0 && stack.Peek() != '(')\n                    stack.Pop();\n\
    \            else\n                return false;\n        }\n        return stack.Count\
    \ == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ad0a95f2e364a56887537bc32672ef1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ad0a95f2e364a56887537bc32672ef1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008853
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null) {\n    \
    \        throw new ArgumentNullException(\"brackets\");\n        }\n        string\
    \ lastBracket = null;\n        bool result = true;\n        foreach (char bracket\
    \ in brackets) {\n            if (bracket == '(') {\n                if (lastBracket\
    \ == null)\n                    result = false;\n                else {\n    \
    \                if (lastBracket != '(')\n                        result = false;\n\
    \                }\n                lastBracket = bracket;\n            }\n  \
    \          else if (bracket == ')') {\n                if (lastBracket != null)\n\
    \                    result = false;\n                lastBracket = null;\n  \
    \          }\n            else {\n                if (lastBracket == null)\n \
    \                   result = false;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzyo5f3vh.cs(30,25): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''string'' and ''char''

    /tmp/tmpzyo5f3vh.cs(33,31): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1660008853
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.Length; i++) {\n            char c = brackets[i];\n    \
    \        if (c == '(') count++;\n            if (c == ')') count--;\n        \
    \    if (count < 0) {\n                return false;\n            }\n        }\n\
    \        if (count == 0) {\n            return true;\n        }\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008853
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        foreach (var c in brackets) {\n\
    \            if ((c != '(') && (c != ')')) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <605df351f40c4603880c6308e1453f8f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <605df351f40c4603880c6308e1453f8f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008853
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var openingBrackets = new List<string>();\n\
    \        var closingBrackets = new List<string>();\n        var pairs = new List<KeyValuePair<string,\
    \ string>>();\n        for (int i = 0; i < brackets.Length; i++) {\n         \
    \   if (brackets[i] == '(') {\n                openingBrackets.Add(brackets[i]);\n\
    \            }\n            else if (brackets[i] == ')') {\n                closingBrackets.Add(brackets[i]);\n\
    \                pairs.Add(new KeyValuePair<string, string>(openingBrackets[openingBrackets.Count\
    \ - 1], closingBrackets[closingBrackets.Count - 1]));\n                openingBrackets.RemoveAt(openingBrackets.Count\
    \ - 1);\n                closingBrackets.RemoveAt(closingBrackets.Count - 1);\n\
    \            }\n        }\n        if (openingBrackets.Count == 0) {\n       \
    \     return false;\n        }\n        for (int i = 0; i < openingBrackets.Count;\
    \ i++) {\n            if (pairs.First(x => x.Key == openingBrackets[i]).Value\
    \ != closingBrackets[i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmu4028b7.cs(25,37): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpmu4028b7.cs(28,37): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1660008853
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        bool result = true;\n        int\
    \ openbracket = 0;\n        int closebracket = 0;\n        int openbracket_count\
    \ = 0;\n        bool openbrackets_found = false;\n        bool closebrackets_found\
    \ = false;\n        foreach (char character in brackets) {\n            if (openbracket\
    \ == 0 && character == '(') {\n                openbracket++;\n              \
    \  openbracket_count++;\n                if (!openbrackets_found) {\n        \
    \            openbrackets_found = true;\n                }\n            } else\
    \ if (character == ')') {\n                if (openbracket > 0 && openbracket\
    \ == openbracket_count) {\n                    openbracket--;\n              \
    \      openbracket_count--;\n                    if (openbracket == 0) {\n   \
    \                     closebracket++;\n                    } else {\n        \
    \                closebrackets_found = true;\n                    }\n        \
    \        } else {\n                    result = false;\n                }\n  \
    \          } else if (openbracket == 0 && character != '(') {\n              \
    \  result = false;\n            }\n        }\n        return result && openbrackets_found\
    \ && closebrackets_found;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aab6f6b89c9840d98c6bfd90d9073bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aab6f6b89c9840d98c6bfd90d9073bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008853
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        string[] opening = brackets.Split('(');\n\
    \        string[] closing = brackets.Split(')');\n        if (opening.Length !=\
    \ closing.Length)\n            return false;\n        return opening.Zip(closing,\
    \ (a, b) => a == b).All(a => a == true);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa13f4c962424b76a00b4a2bdbfc09eb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa13f4c962424b76a00b4a2bdbfc09eb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008853
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // write your solution here\n\
    \        string input = \"()\";\n        string output = \"\";\n        for (int\
    \ i = 0; i < brackets.Length; i++) {\n            output += brackets[i];\n   \
    \     }\n\n        char[] c = output.ToCharArray();\n        List<char> open =\
    \ new List<char>();\n        List<char> close = new List<char>();\n        List<char>\
    \ final = new List<char>();\n        foreach (char x in c) \n        {\n     \
    \       if (x == '(')\n            {\n                open.Add(x);\n         \
    \   }\n            else if (x == ')')\n            {\n                close.Add(x);\n\
    \            }\n        }\n        if (close.Count != 0)\n        {\n        \
    \    return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a083ca9655634218b68c92ac2a597034>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a083ca9655634218b68c92ac2a597034>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008853
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null || brackets.Length\
    \ < 2) return true;\n        // Use a stack to track brackets.\n        Stack<char>\
    \ stack = new Stack<char>();\n        // Use a boolean to indicate whether brackets\
    \ are correctly nested.\n        bool nested = true;\n        // Use a temporary\
    \ variable to hold opening brackets.\n        string openingBrackets = \"\";\n\
    \        foreach (char c in brackets) {\n            switch (c) {\n          \
    \      case '(':\n                case '[':\n                case '{':\n     \
    \           case '<':\n                    stack.Push(c);\n                  \
    \  break;\n                case ')':\n                    while (stack.Count >\
    \ 0) {\n                        openingBrackets += stack.Pop();\n            \
    \        }\n                    break;\n                case ']':\n          \
    \          while (stack.Count > 0) {\n                        openingBrackets\
    \ += stack.Pop();\n                    }\n                    nested = false;\n\
    \                    break;\n                case '}':\n                    while\
    \ (stack.Count > 0) {\n                        openingBrackets += stack.Pop();\n\
    \                    }\n                    nested = false;\n                \
    \    break;\n                case ')(':\n                    while (stack.Count\
    \ > 0) {\n                        openingBrackets += stack.Pop();\n          \
    \          }\n                    nested = false;\n                    break;\n\
    \                case '}(':\n                    while (stack.Count > 0) {\n \
    \                       openingBrackets += stack.Pop();\n                    }\n\
    \                    nested = false;\n                    break;\n           \
    \     case ')[':\n                    while (stack.Count > 0) {\n            \
    \            openingBrackets += stack.Pop();\n                    }\n        \
    \            nested = false;\n                    break;\n                case\
    \ '}[':\n                    while (stack.Count > 0) {\n                     \
    \   openingBrackets += stack.Pop();\n                    }\n                 \
    \   nested = false;\n                    break;\n                case '](':\n\
    \                    while (stack.Count > 0) {\n                        openingBrackets\
    \ += stack.Pop();\n                    }\n                    nested = false;\n\
    \                    break;\n                case '[':\n                    while\
    \ (stack.Count > 0) {\n                        openingBrackets += stack.Pop();\n\
    \                    }\n                    nested = false;\n                \
    \    break;\n                default:\n                    openingBrackets +=\
    \ c;\n                    break;\n            }\n        }\n        // Return\
    \ whether brackets are correctly nested.\n        return nested && openingBrackets.Length\
    \ == brackets.Length;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphnvdx9m4.cs(52,22): error CS1012: Too many characters in character literal

    /tmp/tmphnvdx9m4.cs(58,22): error CS1012: Too many characters in character literal

    /tmp/tmphnvdx9m4.cs(64,22): error CS1012: Too many characters in character literal

    /tmp/tmphnvdx9m4.cs(70,22): error CS1012: Too many characters in character literal

    /tmp/tmphnvdx9m4.cs(76,22): error CS1012: Too many characters in character literal

    '
  timestamp: 1660008853
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Debug.Assert(brackets.Length >\
    \ 0);\n        Debug.Assert(brackets.Length % 2 == 0);\n        var stack = new\
    \ Stack<string>();\n        foreach (var bracket in brackets) {\n            Debug.Assert(bracket\
    \ == bracket.PadLeft(2, ' '), 'bracket.PadLeft(2, ' ') is required');\n      \
    \      if (stack.Count > 0) {\n                if (bracket == stack.Pop()) {\n\
    \                    Debug.Assert(bracket.Length == 1, 'bracket.PadLeft(2, ' ')\
    \ is required');\n                    Debug.Assert(stack.Peek() == bracket, 'stack.Peek()\
    \ is required');\n                }\n                else {\n                \
    \    return false;\n                }\n            }\n            if (bracket\
    \ == \"(\") {\n                stack.Push(bracket);\n            }\n         \
    \   else if (bracket == \")\") {\n                if (stack.Peek() != \"(\") {\n\
    \                    return false;\n                }\n                stack.RemoveLast();\n\
    \            }\n        }\n        Debug.Assert(stack.Count == 0, 'stack.Count\
    \ is required');\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw4t7u1m0.cs(24,62): error CS1012: Too many characters in character literal

    /tmp/tmpw4t7u1m0.cs(24,84): error CS1003: Syntax error, '','' expected

    /tmp/tmpw4t7u1m0.cs(24,84): error CS1012: Too many characters in character literal

    /tmp/tmpw4t7u1m0.cs(27,55): error CS1012: Too many characters in character literal

    /tmp/tmpw4t7u1m0.cs(27,77): error CS1003: Syntax error, '','' expected

    /tmp/tmpw4t7u1m0.cs(27,77): error CS1012: Too many characters in character literal

    /tmp/tmpw4t7u1m0.cs(28,59): error CS1012: Too many characters in character literal

    /tmp/tmpw4t7u1m0.cs(44,40): error CS1012: Too many characters in character literal

    '
  timestamp: 1660008853
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        bool correct = true;\n       \
    \ string openingBrackets = \"\";\n        string closingBrackets = \"\";\n   \
    \     string openingBracket = \"\";\n        string closingBracket = \"\";\n \
    \       bool first = true;\n        for (int i = 0; i < brackets.Length; i++)\
    \ {\n            string bracket = brackets[i];\n            if (first && bracket.Equals(openingBrackets))\
    \ {\n                closingBracket = bracket;\n                first = false;\n\
    \            } else if (bracket.Equals(closingBrackets)) {\n                openingBracket\
    \ = bracket;\n            } else if (bracket.Equals('(')) {\n                openingBrackets\
    \ += bracket;\n            } else if (bracket.Equals(')')) {\n               \
    \ closingBrackets += bracket;\n            }\n        }\n        correct = brackets.Length\
    \ == openingBrackets.Length;\n        for (int i = 0; i < openingBrackets.Length;\
    \ i++) {\n            if (!openingBracket.Equals(closingBrackets[i])) {\n    \
    \            correct = false;\n                break;\n            }\n       \
    \ }\n        return correct;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcl0zm568.cs(27,30): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1660008853
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null) throw new\
    \ ArgumentNullException(\"brackets\");\n\n        StringBuilder buf = new StringBuilder();\n\
    \n        for (int i = 0; i < brackets.Length; i++) {\n            switch (brackets[i])\
    \ {\n                case '(':\n                    buf.Append('(');\n       \
    \             break;\n                case ')':\n                    if (buf.Length\
    \ > 0)\n                        buf.Append(')');\n                    else\n \
    \                       return false;\n                    break;\n          \
    \      case '[':\n                    buf.Append('[');\n                    break;\n\
    \                case ']':\n                    if (buf.Length > 0)\n        \
    \                buf.Append(']');\n                    else\n                \
    \        return false;\n                    break;\n                default:\n\
    \                    // Handle other brackets.\n                    break;\n \
    \           }\n        }\n\n        if (buf.Length > 0)\n            return false;\n\
    \        else\n            return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9c64e0f4945c4b489accf32f2ce885a9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9c64e0f4945c4b489accf32f2ce885a9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008854
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        return brackets.Replace(\"(\"\
    , \"\").Replace(\")\", \"\").Length == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <401968fa1787468ea80841f9ff008f46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <401968fa1787468ea80841f9ff008f46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008854
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        foreach (char c in brackets) {\n\
    \            if (c == '(') continue;\n            if (c == ')') {\n          \
    \      // keep count how many open brackets are left.\n                int openBrackets\
    \ = brackets.Count(c => c == '(') - 1;\n                if (openBrackets == 0)\n\
    \                    return true;\n                continue;\n            }\n\
    \            return false;\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <da0ca23e734c49aab06e4f0df13a542d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <da0ca23e734c49aab06e4f0df13a542d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008854
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var openingBracketsIndex = brackets.IndexOf('(');\n\
    \        var closingBracketsIndex = brackets.IndexOf(')');\n        if (openingBracketsIndex\
    \ < 0 || closingBracketsIndex < 0)\n            return false;\n\n        var firstOpeningBracketIndex\
    \ = brackets.IndexOf('(', openingBracketsIndex);\n        if (firstOpeningBracketIndex\
    \ < 0)\n            return false;\n\n        var lastClosingBracketIndex = brackets.IndexOf(')',\
    \ closingBracketsIndex);\n        if (lastClosingBracketIndex < 0)\n         \
    \   return false;\n\n        var firstClosingBracketIndex = brackets.IndexOf(')',\
    \ lastClosingBracketIndex);\n        if (firstClosingBracketIndex < 0)\n     \
    \       return false;\n\n        if (closingBracketsIndex <= firstClosingBracketIndex)\n\
    \            return true;\n\n        // The first opening bracket must match the\
    \ closing bracket before a bracket.\n        var openingBracketIsCloser = firstOpeningBracketIndex\
    \ <= closingBracketsIndex;\n        return openingBracketIsCloser && brackets.IndexOf(')',\
    \ firstOpeningBracketIndex) < 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7e26014aeb1d40a0acf50a9e431d2962>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7e26014aeb1d40a0acf50a9e431d2962>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008854
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if(brackets.Length == 0) {\n \
    \           return true;\n        }\n        var counts = new Dictionary<string,\
    \ int>();\n        foreach (var c in brackets) {\n            counts[c] = counts[c]\
    \ + 1;\n        }\n        foreach (var c in counts) {\n            if (c.Value\
    \ < 2) {\n                return false;\n            }\n        }\n        return\
    \ true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp80nejvoa.cs(25,20): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmp80nejvoa.cs(25,32): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1660008854
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        string[] bracketsList = brackets.Split(new\
    \ char[] { '(', ')' }, StringSplitOptions.RemoveEmptyEntries);\n        // a stack\
    \ will keep track of all open brackets \n        Stack<string> openBrackets =\
    \ new Stack<string>();\n\n        foreach (string bracketsItem in bracketsList)\
    \ {\n            // check every open bracket\n            if (bracketsItem ==\
    \ \"(\") {\n                openBrackets.Push(bracketsItem);\n            } else\
    \ if (bracketsItem == \")\") {\n                while (openBrackets.Count > 0)\
    \ {\n                    // if the current open bracket matches the closing bracket\n\
    \                    if (bracketsItem == openBrackets.Pop()) {\n             \
    \           break;\n                    }\n                }\n               \
    \ // if we didn't find any matches, return false\n                if (openBrackets.Count\
    \ == 0) return false;\n            }\n        }\n        // if we got this far,\
    \ every opening bracket has a corresponding closing bracket\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3c42ce8a5e5244c7a6ca2a905ff2075a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3c42ce8a5e5244c7a6ca2a905ff2075a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008854
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets.Length == 0)\n  \
    \          return true;\n        var openBrackets = new Stack<char>();\n     \
    \   var closeBrackets = new Stack<char>();\n        var bracket = brackets[0];\n\
    \        if (bracket == '(')\n            openBrackets.Push(bracket);\n      \
    \  else if (bracket == ')')\n        {\n            closeBrackets.Push(bracket);\n\
    \            return openBrackets.Count == closeBrackets.Count;\n        }\n  \
    \      else if (bracket == '[')\n        {\n            openBrackets.Push(bracket);\n\
    \            closeBrackets.Push(bracket);\n        }\n        else if (bracket\
    \ == ']')\n        {\n            closeBrackets.Push(bracket);\n            return\
    \ openBrackets.Count == closeBrackets.Count;\n        }\n        else\n      \
    \      return false;\n        foreach (var character in brackets)\n        {\n\
    \            while (openBrackets.Count > 0 && character == openBrackets.Peek())\n\
    \            {\n                openBrackets.Pop();\n            }\n         \
    \   while (closeBrackets.Count > 0 && character == closeBrackets.Peek())\n   \
    \         {\n                closeBrackets.Pop();\n            }\n           \
    \ if (openBrackets.Count == 0 && closeBrackets.Count == 0)\n            {\n  \
    \              return true;\n            }\n            if (character == '(')\n\
    \                openBrackets.Push(character);\n            else if (character\
    \ == ')')\n                closeBrackets.Push(character);\n        }\n       \
    \ return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <450497b2e7c74cd0a1a561228b4f5bc0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <450497b2e7c74cd0a1a561228b4f5bc0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008854
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var openingBrackets = new List<char>();\n\
    \        var closingBrackets = new List<char>();\n        var result = false;\n\
    \        foreach (var bracket in brackets) {\n            openingBrackets.Add(bracket);\n\
    \            closingBrackets.Add(bracket);\n        }\n        for (int i = 0;\
    \ i < openingBrackets.Count; i++) {\n            if (openingBrackets[i] == closingBrackets[openingBrackets.Count\
    \ - 1]) {\n                closingBrackets.RemoveAt(closingBrackets.Count - 1);\n\
    \            } else {\n                for (int j = i + 1; j < openingBrackets.Count;\
    \ j++) {\n                    if (openingBrackets[j] == closingBrackets[i]) {\n\
    \                        closingBrackets.RemoveAt(j);\n                      \
    \  break;\n                    }\n                }\n            }\n        }\n\
    \        if (openingBrackets.Count == 0) {\n            result = true;\n     \
    \   }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <78ce19ad0fa8432da1d45692ad1b6340>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative\
    \ and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item\
    \ (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ Problem.CorrectBracketing (System.String brackets) [0x0005a] in <78ce19ad0fa8432da1d45692ad1b6340>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00011] in <78ce19ad0fa8432da1d45692ad1b6340>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CorrectBracketing\
    \ (System.String brackets) [0x0005a] in <78ce19ad0fa8432da1d45692ad1b6340>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00011] in <78ce19ad0fa8432da1d45692ad1b6340>:0\
    \ \n"
  stdout: ''
  timestamp: 1660008854
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int index = 0;\n        bool result\
    \ = true;\n        while ((index < brackets.Length) && (brackets[index] == brackets[index\
    \ + 1])) {\n            index++;\n        }\n        if (index > 0) {\n      \
    \      result = false;\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <44ac5158302340cd9f7c0f85ccfbcc73>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <44ac5158302340cd9f7c0f85ccfbcc73>:0 \n\nUnhandled Exception:\n\
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n\
    \  at Problem.CorrectBracketing (System.String brackets) [0x0001d] in <44ac5158302340cd9f7c0f85ccfbcc73>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00067] in <44ac5158302340cd9f7c0f85ccfbcc73>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Index"
  stdout: ''
  timestamp: 1660008854
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Stack<char> openStack = new Stack<char>();\n\
    \        Stack<char> closedStack = new Stack<char>();\n        foreach(char c\
    \ in brackets) {\n            switch(c) {\n            case '(':\n           \
    \     openStack.Push(c);\n                break;\n            case ')':\n    \
    \            if (!openStack.Any()) {\n                    return false;\n    \
    \            }\n                char open = openStack.Pop();\n               \
    \ if (!closedStack.Contains(open)) {\n                    return false;\n    \
    \            }\n                closedStack.Pop();\n                break;\n \
    \           case ')(':\n                if (!openStack.Any()) {\n            \
    \        return false;\n                }\n                char open = openStack.Pop();\n\
    \                if (!closedStack.Contains(open)) {\n                    return\
    \ false;\n                }\n                if (!openStack.Any()) {\n       \
    \             return false;\n                }\n                char open2 = openStack.Pop();\n\
    \                if (!closedStack.Contains(open2)) {\n                    return\
    \ false;\n                }\n                closedStack.Pop();\n            \
    \    if (!closedStack.Any()) {\n                    return false;\n          \
    \      }\n                char open3 = openStack.Pop();\n                if (!closedStack.Contains(open3))\
    \ {\n                    return false;\n                }\n                closedStack.Pop();\n\
    \                break;\n            case '(':\n                if (!openStack.Any())\
    \ {\n                    return false;\n                }\n                char\
    \ open = openStack.Pop();\n                if (!closedStack.Contains(open)) {\n\
    \                    return false;\n                }\n                if (!openStack.Any())\
    \ {\n                    return false;\n                }\n                char\
    \ open2 = openStack.Pop();\n                if (!closedStack.Contains(open2))\
    \ {\n                    return false;\n                }\n                if\
    \ (!openStack.Any()) {\n                    return false;\n                }\n\
    \                char open3 = openStack.Pop();\n                if (!closedStack.Contains(open3))\
    \ {\n                    return false;\n                }\n                openStack.Push(open2);\n\
    \                openStack.Push(open3);\n                break;\n            }\n\
    \        }\n        bool finished = true;\n        while (openStack.Count > 0\
    \ && !closedStack.Any()) {\n            finished = false;\n            char open\
    \ = openStack.Pop();\n            char open2 = openStack.Pop();\n            char\
    \ open3 = openStack.Pop();\n            if (closedStack.Contains(open) || closedStack.Contains(open2)\
    \ || closedStack.Contains(open3)) {\n                finished = false;\n     \
    \           break;\n            }\n            closedStack.Push(open);\n     \
    \   }\n        return finished;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9xa5vdkr.cs(37,18): error CS1012: Too many characters in character literal

    '
  timestamp: 1660008853
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Stack<char> stack = new Stack<char>();\n\
    \        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i]\
    \ == '(') {\n                stack.Push(brackets[i]);\n            }\n       \
    \     else if (brackets[i] == ')') {\n                if (stack.Pop() != brackets[i])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return stack.Count == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <51d9d987470c40b39676f491af0a7047>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <51d9d987470c40b39676f491af0a7047>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008854
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        bool ans = false;\n        if\
    \ (brackets != null) {\n            for (int i = 0; i < brackets.Length; i++)\
    \ {\n                if (brackets.Length - i < 2) {\n                    return\
    \ ans;\n                }\n                if (brackets[i] == '(') {\n       \
    \             if (brackets[i + 1] != '(') {\n                        return ans;\n\
    \                    }\n                    ans = true;\n                    for\
    \ (int j = i + 2; j < brackets.Length - 1; j++) {\n                        if\
    \ (brackets[j] != ')') {\n                            return ans;\n          \
    \              }\n                        ans = false;\n                     \
    \   i = j;\n                    }\n                }\n            }\n        }\n\
    \        return ans;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0937c59e38014f4f8fbb08975b936d90>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0937c59e38014f4f8fbb08975b936d90>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008854
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // get the number of open brackets\
    \ in the brackets string\n        int open_open_brackets = brackets.Count(c =>\
    \ c == '(');\n        // the new string is the remaining string with open brackets\n\
    \        string brackets_with_open_brackets = brackets.Substring(0, open_open_brackets);\n\
    \        // get the number of closing brackets in the brackets string\n      \
    \  int open_closed_brackets = brackets_with_open_brackets.Count(c => c == ')');\n\
    \        // if there is an open bracket without a closing bracket\n        if\
    \ (open_closed_brackets == 0) {\n            return true;\n        }\n       \
    \ // if there is an open bracket without a closing bracket\n        else if (open_closed_brackets\
    \ == open_open_brackets) {\n            return false;\n        }\n        // if\
    \ there's an open bracket without a closing bracket and\n        // if there is\
    \ an open bracket without a closing bracket and\n        // if there is an open\
    \ bracket without a closing bracket and\n        // if there is an open bracket\
    \ without a closing bracket and\n        // if there is an open bracket without\
    \ a closing bracket and\n        // if there is an open bracket without a closing\
    \ bracket and\n        // if there is an open bracket without a closing bracket\
    \ and\n        // if there is an open bracket without a closing bracket and\n\
    \        // if there is an open bracket without a closing bracket and\n      \
    \  // if there is an open bracket without a closing bracket\n        // then there\
    \ must exist a closing bracket\n        else if (open_closed_brackets == open_open_brackets\
    \ * 7 &&\n                 open_closed_brackets == open_open_brackets * 3 &&\n\
    \                 open_closed_brackets == open_open_brackets * 1 &&\n        \
    \         open_closed_brackets == open_open_brackets * 1 &&\n                \
    \ open_closed_brackets == open_open_brackets * 1 &&\n                 open_closed_brackets\
    \ == open_open_brackets * 1 &&\n                 open_closed_brackets == open_open_brackets\
    \ * 1 &&\n                 open_closed_brackets == open_open_brackets * 1 &&\n\
    \                 open_closed_brackets == open_open_brackets * 1 &&\n        \
    \         open_closed_brackets == open_open_brackets * 1 &&\n                \
    \ open_closed_brackets == open_open_brackets * 1 &&\n                 open_closed_brackets\
    \ == open_open_brackets * 1 &&\n                 open_closed_brackets == open_open_brackets\
    \ * 1 &&\n                 open_closed_brackets == open_open_brackets * 1) {\n\
    \            return true;\n        }\n        // otherwise there must be an open\
    \ bracket without a closing bracket\n        else {\n            throw new ArgumentException(\"\
    Cannot bracket\");\n        }\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Cannot bracket\n  at\
    \ Problem.CorrectBracketing (System.String brackets) [0x000c0] in <746a9754aa4a4afa9997cfe4ee681247>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00011] in <746a9754aa4a4afa9997cfe4ee681247>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Cannot bracket\n\
    \  at Problem.CorrectBracketing (System.String brackets) [0x000c0] in <746a9754aa4a4afa9997cfe4ee681247>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00011] in <746a9754aa4a4afa9997cfe4ee681247>:0\
    \ \n"
  stdout: ''
  timestamp: 1660008854
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // initialize an array to hold\
    \ the characters in the brackets string\n        char[] openingBrackets = new\
    \ char[brackets.Length];\n        // initialize the number of opening brackets\
    \ to 0\n        int openingBracketCount = 0;\n        // initialize an array to\
    \ hold the characters in the brackets string\n        char[] closingBrackets =\
    \ new char[brackets.Length];\n        // initialize the number of closing brackets\
    \ to 0\n        int closingBracketCount = 0;\n        // initialize a counter\n\
    \        int i;\n        // initialize a boolean to false\n        bool foundMatching\
    \ = false;\n        // initialize an array to hold the characters found in the\
    \ brackets\n        char[] foundBrackets = new char[brackets.Length];\n      \
    \  // initialize a counter\n        int j;\n        // initialize a boolean to\
    \ false\n        bool foundMatching2 = false;\n        // initialize an array\
    \ to hold the characters found in the brackets\n        char[] foundBrackets2\
    \ = new char[brackets.Length];\n        // initialize a counter\n        int k;\n\
    \        // initialize a boolean to false\n        bool foundMatching3 = false;\n\
    \        // initialize a boolean to false\n        bool foundMatching4 = false;\n\
    \        // iterate through the brackets\n        for (i = 0; i < brackets.Length;\
    \ i++) {\n            // if the character is equal to '('\n            if (brackets[i]\
    \ == '(') {\n                // increment the number of opening brackets\n   \
    \             openingBracketCount++;\n            }\n            // if the character\
    \ is equal to ')'\n            else if (brackets[i] == ')') {\n              \
    \  // decrement the number of closing brackets\n                closingBracketCount--;\n\
    \            }\n            // if the number of opening brackets is 0\n      \
    \      if (openingBracketCount == 0) {\n                // initialize a boolean\
    \ to true\n                foundMatching = true;\n                // initialize\
    \ a counter\n                j = 0;\n                // iterate through the found\
    \ brackets\n                for (j = 0; j < foundBrackets.Length; j++) {\n   \
    \                 // if the current character matches the found bracket\n    \
    \                if (foundBrackets[j] == brackets[i]) {\n                    \
    \    // increment the found brackets counter\n                        foundBracketCount++;\n\
    \                    }\n                }\n                // if an equal number\
    \ of brackets have been found as in the opening brackets\n                if (foundBracketCount\
    \ == openingBracketCount) {\n                    // iterate through the found\
    \ brackets\n                    for (k = 0; k < foundBrackets2.Length; k++) {\n\
    \                        // if the current character matches the found bracket\n\
    \                        if (foundBrackets2[k] == brackets[i]) {\n           \
    \                 // increment the found brackets counter\n                  \
    \          foundMatching2 = true;\n                        }\n               \
    \     }\n                }\n                // if the number of closing brackets\
    \ is 0\n                if (closingBracketCount == 0) {\n                    //\
    \ initialize a boolean to true\n                    foundMatching3 = true;\n \
    \                   // initialize a counter\n                    k = 0;\n    \
    \                // iterate \n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptrvl9s0z.cs(91,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmptrvl9s0z.cs(106,2): error CS1513: } expected

    '
  timestamp: 1660008853
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // the size of the string is at\
    \ least 1.\n        int size = brackets.Length;\n        if (size < 1) {\n   \
    \         return false;\n        }\n        // the index is at least 1.\n    \
    \    int index = 1;\n        while (index < size) {\n            // if the next\
    \ bracket is not closed or the closing bracket is opened.\n            // the\
    \ index is larger than the size of the string.\n            if (brackets[index]\
    \ == ')') {\n                if (index == size - 1) {\n                    //\
    \ if the closing bracket is opened at the end of the string.\n               \
    \     // then the closing bracket is closed.\n                    return brackets[index]\
    \ == '(';\n                }\n                else {\n                    // otherwise\
    \ the closing bracket is opened.\n                    index++;\n             \
    \   }\n            }\n            else if (brackets[index] == '(') {\n       \
    \         // if the opening bracket is not closed.\n                if (index\
    \ == size - 1) {\n                    // then the opening bracket is closed.\n\
    \                    return brackets[index] == ')';\n                }\n     \
    \           else {\n                    // otherwise the opening bracket is opened.\n\
    \                    index++;\n                }\n            }\n            else\
    \ {\n                // otherwise, the index is equal to the size of the string.\n\
    \                index++;\n            }\n        }\n        // when the loop\
    \ stops, all brackets are closed.\n        // then all brackets are closed.\n\
    \        return true;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2a2e7e8df0fd4f39a38ae487498eeec6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2a2e7e8df0fd4f39a38ae487498eeec6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008854
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var pairs = brackets.Split(new\
    \ char[] { '(', ')' });\n        foreach (var pair in pairs) {\n            if\
    \ (pair.Count(x => x == '(') == pair.Count(x => x == ')'))\n                return\
    \ true;\n        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4aa0dcba5f67477fbad8304cb4d6e3c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4aa0dcba5f67477fbad8304cb4d6e3c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008854
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // TODO: Complete the function\
    \ body\n        //return false;\n        \n        Stack<string> st = new Stack<string>();\n\
    \        foreach(char c in brackets) {\n            switch (c) {\n           \
    \     case '(':\n                    st.Push(c);\n                    break;\n\
    \                case ')':\n                    if(st.Count == 0) {\n        \
    \                return true;\n                    }\n                    if(st.Peek()\
    \ != '(') {\n                        return false;\n                    }\n  \
    \                  st.Pop();\n                    break;\n                default:\n\
    \                    if(c == ',') {\n                        if(st.Count == 0)\
    \ {\n                            return true;\n                        }\n   \
    \                     if(st.Peek() != '(') {\n                            return\
    \ false;\n                        }\n                        st.Pop();\n     \
    \               }\n                    break;\n            }\n        }\n    \
    \    return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp03b81ylk.cs(27,29): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmp03b81ylk.cs(33,24): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''string'' and ''char''

    /tmp/tmp03b81ylk.cs(43,28): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''string'' and ''char''

    '
  timestamp: 1660008854
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Stack<char> stack = new Stack<char>();\n\
    \        foreach (char c in brackets) {\n            if (c == '(') {\n       \
    \         stack.Push(c);\n            } else if (c == ')') {\n               \
    \ if (!stack.Peek().Equals('('))\n                    return false;\n        \
    \        stack.Pop();\n            }\n        }\n        return stack.Count ==\
    \ 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Stack empty.\n\
    \  at System.Collections.Generic.Stack`1[T].Peek () [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CorrectBracketing (System.String brackets) [0x0003a] in <31fd9c20856f4d288229ea2f39c51851>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00041] in <31fd9c20856f4d288229ea2f39c51851>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Stack\
    \ empty.\n  at System.Collections.Generic.Stack`1[T].Peek () [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CorrectBracketing (System.String brackets) [0x0003a] in <31fd9c20856f4d288229ea2f39c51851>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00041] in <31fd9c20856f4d288229ea2f39c51851>:0\
    \ \n"
  stdout: ''
  timestamp: 1660008854
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // The stack is used to keep track\
    \ of the pairs of brackets.\n        Stack<string> stack = new Stack<string>();\n\
    \n        // Iterate through the input string.\n        foreach (char c in brackets)\
    \ {\n            // Push left brackets onto the stack.\n            if (c == '(')\
    \ {\n                stack.Push(c);\n            }\n\n            // Pop right\
    \ brackets off the stack until a matching left bracket is seen.\n            while\
    \ (stack.Count > 0) {\n                if (stack.Pop() != '(') {\n           \
    \         break;\n                }\n            }\n\n            // If the stack\
    \ is empty, no matching bracket was found.\n            if (stack.Count == 0)\
    \ {\n                return false;\n            }\n        }\n\n        // There\
    \ are no unpaired brackets.\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzsyos2ka.cs(27,28): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpzsyos2ka.cs(32,21): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''string'' and ''char''

    '
  timestamp: 1660008854
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        string[] openings = brackets.Split('(');\n\
    \        string[] closings = brackets.Split(')');\n        \n        if (openings.Length\
    \ != closings.Length) {\n            return false;\n        }\n        \n    \
    \    for (int i = 0; i < openings.Length; i++) {\n            if (openings[i]\
    \ == closings[i]) {\n                continue;\n            }\n            \n\
    \            if (openings[i] != closings[i + 1]) {\n                return false;\n\
    \            }\n        }\n        \n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.CorrectBracketing (System.String brackets)\
    \ [0x00045] in <4976fead1bd4430b84bbf49373c6c5c0>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <4976fead1bd4430b84bbf49373c6c5c0>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of\
    \ the array.\n  at Problem.CorrectBracketing (System.String brackets) [0x00045]\
    \ in <4976fead1bd4430b84bbf49373c6c5c0>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <4976fead1bd4430b84bbf49373c6c5c0>:0 \n"
  stdout: ''
  timestamp: 1660008854
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        bool result = true;\n        int\
    \ openBracketsCount = brackets.Count(f => f == '(') - 1;\n        int closeBracketsCount\
    \ = brackets.Count(f => f == ')') - 1;\n\n        if (openBracketsCount != closeBracketsCount)\
    \ {\n            result = false;\n        } else {\n            for (int i = 0;\
    \ i < openBracketsCount; i++) {\n                char openBracket = brackets[i];\n\
    \                if (brackets[i + 1] != '(') {\n                    result = false;\n\
    \                    break;\n                }\n                if (brackets[i\
    \ + 1] != ')') {\n                    result = false;\n                    break;\n\
    \                }\n                i++;\n            }\n        }\n\n       \
    \ return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e03eccc5032c4d4eab83aac22bbb2d84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e03eccc5032c4d4eab83aac22bbb2d84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008854
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var openingBrackets = new List<char>();\n\
    \        var closingBrackets = new List<char>();\n\n        foreach (var i in\
    \ brackets) {\n            if (brackets.IndexOf(i) == brackets.Length - 1) {\n\
    \                closingBrackets.Add(i);\n            }\n            else {\n\
    \                openingBrackets.Add(i);\n            }\n        }\n\n       \
    \ bool areAllOpeningBracketsClosed = !openingBrackets.Except(closingBrackets).Any();\n\
    \        return areAllOpeningBracketsClosed;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0517cecd1cc24559aacdabe9b2a5e981>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0517cecd1cc24559aacdabe9b2a5e981>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008854
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // Use a Stack to hold each open\
    \ bracket as you encounter them.\n        Stack openBrackets = new Stack();\n\
    \        // Use a Dictionary to hold each closing bracket as you encounter them.\n\
    \        Dictionary<char, char> closeBrackets = new Dictionary<char, char>();\n\
    \        // Loop over each bracket in the brackets string, and push it onto the\
    \ stack.\n        foreach (char c in brackets) {\n            openBrackets.Push(c);\n\
    \        }\n        // While the stack is not empty...\n        while (openBrackets.Count\
    \ > 0) {\n            // Pop the top bracket off the stack.\n            char\
    \ c = openBrackets.Pop();\n            // If the closing bracket hasn't been seen\
    \ yet...\n            if (!closeBrackets.ContainsKey(c)) {\n                //\
    \ If the current character is a closing bracket...\n                if (c == '(')\
    \ {\n                    // Push the corresponding opening bracket onto the stack.\n\
    \                    closeBrackets.Push('(');\n                } else {\n    \
    \                // Otherwise, this is a matching open bracket.\n            \
    \        return false;\n                }\n            }\n            // Otherwise,\
    \ if the closing bracket has been seen...\n            else {\n              \
    \  // If the current character is a matching open bracket...\n               \
    \ if (closeBrackets[c] == '(') {\n                    // Pop the corresponding\
    \ closing bracket off the stack and push it on the dictionary so future close\
    \ brackets will be matched to the same open bracket.\n                    closeBrackets[c]\
    \ = ')';\n                } else {\n                    // Otherwise, this is\
    \ a matching close bracket.\n                    return false;\n             \
    \   }\n            }\n        }\n        // If all brackets have been closed,\
    \ then it's valid.\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfyysfx5l.cs(21,9): error CS0305: Using the generic type ''Stack<T>'' requires
    1 type arguments

    /tmp/tmpfyysfx5l.cs(21,34): error CS0305: Using the generic type ''Stack<T>''
    requires 1 type arguments

    /tmp/tmpfyysfx5l.cs(29,16): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''method group'' and ''int''

    /tmp/tmpfyysfx5l.cs(37,35): error CS1061: ''Dictionary<char, char>'' does not
    contain a definition for ''Push'' and no accessible extension method ''Push''
    accepting a first argument of type ''Dictionary<char, char>'' could be found (are
    you missing a using directive or an assembly reference?)

    '
  timestamp: 1660008854
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int bracketCount = 0;\n      \
    \  int openBrackets = 0;\n        foreach (char c in brackets) {\n           \
    \ if (c == '(') {\n                openBrackets++;\n            } else if (c ==\
    \ ')') {\n                bracketCount--;\n            }\n            bracketCount++;\n\
    \        }\n        return openBrackets == bracketCount;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea2673883f754c0eabc06efe85cdd4b0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea2673883f754c0eabc06efe85cdd4b0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008854
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets.Length > 0) {\n \
    \           var bracket = brackets[0];\n            for (int i = 1; i < brackets.Length;\
    \ i++) {\n                if (bracket != brackets[i]) {\n                    return\
    \ false;\n                }\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8cd0a00532c548de90704a2a3178cd41>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8cd0a00532c548de90704a2a3178cd41>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008854
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // find the number of open brackets\n\
    \        int openBrackets = brackets.Count(x => x == '(');\n        // find the\
    \ number of close brackets\n        int closeBrackets = brackets.Count(x => x\
    \ == ')');\n        // find the total number of brackets\n        int totalBrackets\
    \ = openBrackets + closeBrackets;\n        // check if the brackets match up\n\
    \        return openBrackets == closeBrackets;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <615dbba5b1c841f8aa3b21bddfc21e34>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <615dbba5b1c841f8aa3b21bddfc21e34>:0 \n"
  stdout: ''
  timestamp: 1660008855
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // Find the length of the brackets\
    \ string.\n        int len = brackets.Length;\n\n        // We have to have 2\
    \ opening brackets.\n        if (len < 2)\n            return false;\n\n     \
    \   // The first opening bracket must be an opening bracket itself.\n        if\
    \ (!IsBracket(brackets[0]))\n            return false;\n\n        // The first\
    \ opening bracket must be the corresponding closing bracket.\n        if (!IsBracket(brackets[1]))\n\
    \            return false;\n\n        // The second opening bracket must be an\
    \ opening bracket itself.\n        if (!IsBracket(brackets[2]))\n            return\
    \ false;\n\n        // The second opening bracket must be the corresponding closing\
    \ bracket.\n        if (!IsBracket(brackets[3]))\n            return false;\n\n\
    \        // The third opening bracket must be an opening bracket itself.\n   \
    \     if (!IsBracket(brackets[4]))\n            return false;\n\n        // The\
    \ third opening bracket must be the corresponding closing bracket.\n        if\
    \ (!IsBracket(brackets[5]))\n            return false;\n\n        // The forth\
    \ opening bracket must be an opening bracket itself.\n        if (!IsBracket(brackets[6]))\n\
    \            return false;\n\n        // The forth opening bracket must be the\
    \ corresponding closing bracket.\n        if (!IsBracket(brackets[7]))\n     \
    \       return false;\n\n        // The fifth opening bracket must be an opening\
    \ bracket itself.\n        if (!IsBracket(brackets[8]))\n            return false;\n\
    \n        // The fifth opening bracket must be the corresponding closing bracket.\n\
    \        if (!IsBracket(brackets[9]))\n            return false;\n\n        return\
    \ true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphcrxqllr.cs(28,14): error CS0103: The name ''IsBracket'' does not exist
    in the current context

    /tmp/tmphcrxqllr.cs(32,14): error CS0103: The name ''IsBracket'' does not exist
    in the current context

    /tmp/tmphcrxqllr.cs(36,14): error CS0103: The name ''IsBracket'' does not exist
    in the current context

    /tmp/tmphcrxqllr.cs(40,14): error CS0103: The name ''IsBracket'' does not exist
    in the current context

    /tmp/tmphcrxqllr.cs(44,14): error CS0103: The name ''IsBracket'' does not exist
    in the current context

    /tmp/tmphcrxqllr.cs(48,14): error CS0103: The name ''IsBracket'' does not exist
    in the current context

    /tmp/tmphcrxqllr.cs(52,14): error CS0103: The name ''IsBracket'' does not exist
    in the current context

    /tmp/tmphcrxqllr.cs(56,14): error CS0103: The name ''IsBracket'' does not exist
    in the current context

    /tmp/tmphcrxqllr.cs(60,14): error CS0103: The name ''IsBracket'' does not exist
    in the current context

    /tmp/tmphcrxqllr.cs(64,14): error CS0103: The name ''IsBracket'' does not exist
    in the current context

    '
  timestamp: 1660008854
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int openBracketsCounter = 0;\n\
    \        int closeBracketsCounter = 0;\n        int openBracketsNeeded = 0;\n\
    \        int closeBracketsNeeded = 0;\n        foreach (char c in brackets) {\n\
    \            if (c == ')')\n                closeBracketsCounter++;\n        \
    \    if (c == '(')\n                openBracketsCounter++;\n            if (c\
    \ == '(')\n                openBracketsNeeded++;\n            if (c == ')')\n\
    \                closeBracketsNeeded++;\n        }\n        if (openBracketsNeeded\
    \ < closeBracketsNeeded)\n            return false;\n        if (openBracketsNeeded\
    \ > closeBracketsNeeded)\n            openBracketsNeeded = closeBracketsNeeded;\n\
    \        if (openBracketsCounter < openBracketsNeeded)\n            return false;\n\
    \        if (openBracketsNeeded != 0 && openBracketsCounter != openBracketsNeeded)\n\
    \            return false;\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1aeb0c8f98464105a1173ed182f04cea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1aeb0c8f98464105a1173ed182f04cea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008855
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var correct = false;\n       \
    \ foreach (var openingBracket in brackets.Replace(\" \", \"\").Replace(\"(\",\
    \ \"\").Replace(\")\", \"\").ToCharArray()) {\n            correct = correct ||\
    \ (openingBracket == '(' && brackets[brackets.IndexOf(openingBracket) + 1] ==\
    \ ')');\n        }\n        return correct;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ea8b53f0a9d4e52a5df5b35ee880de8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ea8b53f0a9d4e52a5df5b35ee880de8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008855
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null || brackets.Length\
    \ <= 1)\n            return false;\n        StringBuilder buffer = new StringBuilder(brackets);\n\
    \        for (int i = 0; i < brackets.Length; ++i) {\n            switch (buffer[i])\
    \ {\n                case '(':\n                    ++buffer.Length;\n       \
    \             break;\n                case ')':\n                    --buffer.Length;\n\
    \                    break;\n            }\n        }\n        return buffer.ToString().Length\
    \ == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <834de4bb5ad8426d8e32f066034ca045>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <834de4bb5ad8426d8e32f066034ca045>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008855
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        bool result = true;\n        string\
    \ openingBrackets = \"(){}[]\";\n        string closingBrackets = \"(){}[]\";\n\
    \        foreach(char openingBracket in openingBrackets) {\n            foreach(char\
    \ closingBracket in closingBrackets) {\n                if (brackets.Contains(openingBracket))\
    \ {\n                    result = result && (brackets.Contains(closingBracket));\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ef14a08fec44ecd91de0c311f9f242e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ef14a08fec44ecd91de0c311f9f242e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008855
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if(brackets == null) return false;\n\
    \        // For each opening bracket, remove all its corresponding closing brackets.\n\
    \        var openingBrackets = brackets.ToCharArray();\n        var closingBrackets\
    \ = new List<string>();\n        foreach(var openingBracket in openingBrackets)\
    \ {\n            switch(openingBracket) {\n                case '(':\n       \
    \             closingBrackets.Add(')');\n                    break;\n        \
    \        case ')':\n                    closingBrackets.Add('(');\n          \
    \          break;\n                case '[':\n                    closingBrackets.Add(']');\n\
    \                    break;\n                case ']':\n                    closingBrackets.Add('[');\n\
    \                    break;\n                case '{':\n                    closingBrackets.Add('}');\n\
    \                    break;\n                case '}':\n                    closingBrackets.Add('{');\n\
    \                    break;\n            }\n        }\n        if(openingBrackets.Any(c\
    \ => closingBrackets.Contains(c))) return true;\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnkg8n70g.cs(27,41): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpnkg8n70g.cs(30,41): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpnkg8n70g.cs(33,41): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpnkg8n70g.cs(36,41): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpnkg8n70g.cs(39,41): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpnkg8n70g.cs(42,41): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpnkg8n70g.cs(46,62): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1660008855
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // For each bracket in the string:\n\
    \        for (int i = 0; i < brackets.Length; i++) {\n            // If the current\
    \ character is a opening bracket, increment the counter.\n            // If it\
    \ is not, decrement the counter.\n            if (brackets[i] == '(') {\n    \
    \            bracketCount++;\n            }\n            else {\n            \
    \    bracketCount--;\n            }\n            // If the counter is zero, then\
    \ the bracket is missing and we\n            // should return false.\n       \
    \     if (bracketCount == 0) {\n                return false;\n            }\n\
    \        }\n\n        // If all brackets have been found and they are balanced,\
    \ then we\n        // should return true.\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgzlqnsq9.cs(25,17): error CS0103: The name ''bracketCount'' does not exist
    in the current context

    /tmp/tmpgzlqnsq9.cs(28,17): error CS0103: The name ''bracketCount'' does not exist
    in the current context

    /tmp/tmpgzlqnsq9.cs(32,17): error CS0103: The name ''bracketCount'' does not exist
    in the current context

    '
  timestamp: 1660008854
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // We need a stack of pairs (left,\
    \ right).  A pair is a (char, string).\n        Stack<char> stack = new Stack<char>();\n\
    \        stack.Push(Stack.Empty); // push the empty string\n        stack.Push(brackets[0]);\
    \ // push the bracket\n        // Now walk through the string and handle each\
    \ character.\n        for (int i = 1; i < brackets.Length; i++) {\n          \
    \  char c = brackets[i];\n            if (c == '(') {\n                // found\
    \ a left bracket, pop it off the stack and remember it\n                stack.Pop();\n\
    \                stack.Push(c);\n            } else if (c == ')') {\n        \
    \        // found a right bracket, pop it off the stack and remember it\n    \
    \            stack.Pop();\n                // If the stack is empty the string\
    \ was correctly closed\n                if (stack.Count == 0) {\n            \
    \        return true;\n                } else {\n                    string right\
    \ = stack.Pop();\n                    // if the right bracket is equal to the\
    \ left bracket\n                    // then it was not correctly closed\n    \
    \                if (right == c) {\n                        return false;\n  \
    \                  }\n                    // otherwise the string was correctly\
    \ closed\n                    return true;\n                }\n            } else\
    \ {\n                // found a character that is not bracket, push the string\
    \ back onto the stack\n                stack.Push(c);\n            }\n       \
    \ }\n        // We have exited the loop\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcd_9t2m7.cs(22,20): error CS0305: Using the generic type ''Stack<T>''
    requires 1 type arguments

    /tmp/tmpcd_9t2m7.cs(38,36): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpcd_9t2m7.cs(41,25): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''string'' and ''char''

    '
  timestamp: 1660008854
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // find the index of the last\
    \ opening bracket:\n        int lastOpen = brackets.IndexOf('(');\n        if\
    \ (lastOpen < 0) {\n            return false;\n        }\n        // find the\
    \ index of the first closing bracket:\n        int firstClose = brackets.IndexOf(')');\n\
    \        if (firstClose < 0) {\n            return false;\n        }\n       \
    \ // if both brackets are equal, then the string has correct brackets.\n     \
    \   // if not, then it is wrong.\n        if (lastOpen != firstClose) {\n    \
    \        return false;\n        }\n        // if the string is balanced, then\
    \ the brackets are balanced.\n        // if not, then the string is not balanced.\n\
    \        int openCount = 0;\n        int closeCount = 0;\n        foreach (char\
    \ c in brackets) {\n            switch (c) {\n                case '(':\n    \
    \                ++openCount;\n                    break;\n                case\
    \ ')':\n                    ++closeCount;\n                    break;\n      \
    \          default:\n                    throw new ArgumentException(\"Unexpected\
    \ char.\");\n            }\n        }\n        if (openCount > closeCount) {\n\
    \            return false;\n        }\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f4ff922496d147d3b83d10d5da3c98d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f4ff922496d147d3b83d10d5da3c98d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008855
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        List<string> openingBrackets =\
    \ brackets.Split(new char[] { '(', ')' }, StringSplitOptions.RemoveEmptyEntries).ToList();\n\
    \        int openingBracketsLength = openingBrackets.Count;\n        if (openingBracketsLength\
    \ == 0) {\n            // no brackets so it's not a bracket problem\n        \
    \    return false;\n        }\n        List<string> closingBrackets = brackets.Split(new\
    \ char[] { '(', ')' }, StringSplitOptions.RemoveEmptyEntries).Reverse().ToList();\n\
    \        int closingBracketsLength = closingBrackets.Count;\n        if (closingBracketsLength\
    \ != openingBracketsLength) {\n            // not same number of brackets, not\
    \ a bracket problem\n            return false;\n        }\n        foreach (string\
    \ bracket in openingBrackets) {\n            if (!closingBrackets.Contains(bracket))\
    \ {\n                // opening bracket not matching closing bracket\n       \
    \         return false;\n            }\n        }\n        return true;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <113c4138c7f448249949f6e7f12e6feb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <113c4138c7f448249949f6e7f12e6feb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008855
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null) return true;\n\
    \        var openBrackets = new List<char>();\n        var closedBrackets = new\
    \ List<char>();\n        for (var i = 0; i < brackets.Length; i++) {\n       \
    \     var c = brackets[i];\n            if (c == '(') {\n                if (!openBrackets.Contains(c))\
    \ {\n                    openBrackets.Add(c);\n                }\n           \
    \ } else if (c == ')') {\n                if (!closedBrackets.Contains(c)) {\n\
    \                    closedBrackets.Add(c);\n                }\n            }\
    \ else {\n                return false;\n            }\n        }\n        return\
    \ openBrackets.Count == closedBrackets.Count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <190050a73fa64351a65cc80284b19663>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <190050a73fa64351a65cc80284b19663>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008855
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Stack<char> stack = new Stack<char>();\n\
    \        foreach (char bracket in brackets) {\n            if (bracket == '(')\
    \ {\n                stack.push('(');\n            } else if (bracket == ')')\
    \ {\n                if (!stack.IsEmpty() && stack.Peek() == '(') {\n        \
    \            stack.Pop();\n                } else {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.Count\
    \ == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3fhz5hgc.cs(23,23): error CS1061: ''Stack<char>'' does not contain a definition
    for ''push'' and no accessible extension method ''push'' accepting a first argument
    of type ''Stack<char>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmp3fhz5hgc.cs(25,28): error CS1061: ''Stack<char>'' does not contain a definition
    for ''IsEmpty'' and no accessible extension method ''IsEmpty'' accepting a first
    argument of type ''Stack<char>'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1660008855
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        string newBrackets = brackets;\n\
    \        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i]\
    \ == '(')\n                ++newBrackets.Length;\n            else\n         \
    \       if (newBrackets[newBrackets.Length-1] != brackets[i])\n              \
    \      return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0blxci3i.cs(23,19): error CS0200: Property or indexer ''string.Length''
    cannot be assigned to -- it is read only

    '
  timestamp: 1660008855
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var stack = new Stack<char>();\n\
    \        foreach (var c in brackets) {\n            if (c != ')' && c != '(')\
    \ {\n                return false;\n            }\n            stack.Push(c);\n\
    \        }\n        return stack.Peek() == '(' && stack.Pop() == '(';\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <994fc68ec364424aab4de8be81b271ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <994fc68ec364424aab4de8be81b271ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008855
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        bool result = true;\n        foreach\
    \ (char c in brackets.ToLower()) {\n            if ((c == '(') || (c == ')'))\
    \ {\n                result = result && ((c == '(') ? true : false);\n       \
    \     }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a9ea8b6c51db45c1985936b0fcc81b8a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a9ea8b6c51db45c1985936b0fcc81b8a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008855
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int index = 0;\n        int count\
    \ = 1;\n        while (brackets.Length > index) {\n            // Check if next\
    \ char is opening bracket.\n            if (brackets[index] == '(') {\n      \
    \          if (brackets[index + 1] != '(') {\n                    return false;\n\
    \                } else {\n                    index++;\n                    count++;\n\
    \                }\n            }\n            // Check if next char is closing\
    \ bracket.\n            else if (brackets[index] == ')') {\n                if\
    \ (brackets[index + 1] != '(') {\n                    return false;\n        \
    \        } else {\n                    index++;\n                    count--;\n\
    \                }\n            }\n            index++;\n        }\n        return\
    \ (count == 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9f46d2fd0f6048699722872823c76777>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9f46d2fd0f6048699722872823c76777>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008855
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null) throw new\
    \ ArgumentNullException(\"brackets\");\n        Stack<string> stack = new Stack<string>();\n\
    \        string openingBracket = brackets[0];\n        string closingBracket =\
    \ null;\n        if (brackets.Length > 1) {\n            int i;\n            for\
    \ (i = 1; i < brackets.Length; i++) {\n                if (brackets[i] == '(')\
    \ stack.Add(brackets[i]);\n                else { // brackets[i] == ')'\n    \
    \                closingBracket = brackets[i];\n                    while (stack.Count\
    \ > 0 && closingBracket != stack.Pop()) {\n                    }\n           \
    \     }\n            }\n        }\n        bool foundAllBrackets = stack == null\
    \ || stack.Count == 0;\n        return foundAllBrackets;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfqkodvim.cs(22,33): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpfqkodvim.cs(27,47): error CS1061: ''Stack<string>'' does not contain a
    definition for ''Add'' and no accessible extension method ''Add'' accepting a
    first argument of type ''Stack<string>'' could be found (are you missing a using
    directive or an assembly reference?)

    /tmp/tmpfqkodvim.cs(29,38): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1660008855
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null) {\n    \
    \        return false;\n        }\n\n        if (brackets.Length == 0) {\n   \
    \         return true;\n        }\n\n        int openingBracketsCount = brackets.Count(b\
    \ => b == '(');\n        int closingBracketsCount = brackets.Count(b => b == ')');\n\
    \        int sum = (openingBracketsCount + closingBracketsCount);\n\n        if\
    \ (sum != brackets.Length) {\n            return false;\n        }\n\n       \
    \ // If there are less than 3 opening brackets and more than 3 closing\n     \
    \   // brackets, this problem isn't solvable.\n        // For example, the string\
    \ \"(())\" has 4 opening brackets and\n        // no closing brackets, but the\
    \ function returns false.\n        if (openingBracketsCount < 3) {\n         \
    \   return false;\n        }\n\n        if (closingBracketsCount > 3) {\n    \
    \        return false;\n        }\n\n        // If there are 3 or more opening\
    \ brackets, but not more than 3,\n        // then there are an equal number of\
    \ closing brackets.\n        // For example, the string \"()()\" has 3 opening\
    \ brackets and\n        // 2 closing brackets, so the function returns true.\n\
    \        if (openingBracketsCount == 3) {\n            return closingBracketsCount\
    \ == 3;\n        }\n\n        // If there are 2 or more opening brackets and 3\
    \ or more closing\n        // brackets, then there are an equal number of opening\
    \ and\n        // closing brackets.\n        // For example, the string \"(())()\"\
    \ has 2 opening brackets and\n        // 4 closing brackets, so the function returns\
    \ true.\n        if (closingBracketsCount == 2) {\n            return openingBracketsCount\
    \ == closingBracketsCount;\n        }\n\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2a0a9aa9da5741e29df04c3bfa761684>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2a0a9aa9da5741e29df04c3bfa761684>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008855
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var builder = new StringBuilder();\n\
    \        foreach (char c in brackets) {\n            builder.Append(c);\n    \
    \        if (c == ')') {\n                var opening = builder.ToString();\n\
    \                var closing = string.Empty;\n                for (var i = 1;\
    \ i < opening.Length; i++) {\n                    if (opening[i - 1] != opening[i])\
    \ {\n                        closing = opening[i];\n                        break;\n\
    \                    }\n                }\n                if (closing == opening)\
    \ {\n                    return false;\n                }\n                builder.Remove(0,\
    \ opening.Length);\n            }\n        }\n        return true;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0a8d1ho4.cs(28,35): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1660008855
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null)\n      \
    \      return false;\n        Stack<char> opening_bracket = new Stack<char>();\n\
    \        Stack<char> closing_bracket = new Stack<char>();\n        foreach (char\
    \ c in brackets) {\n            opening_bracket.Push(c);\n        }\n        while\
    \ (!opening_bracket.IsEmpty()) {\n            char opening = opening_bracket.Pop();\n\
    \            if (opening == '(')\n                closing_bracket.Push(opening);\n\
    \            else if (closing == '(')\n                return false;\n       \
    \     else {\n                if (opening == closing)\n                    return\
    \ true;\n                else\n                    closing_bracket.Push(closing);\n\
    \            }\n        }\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf8kkxfi_.cs(27,33): error CS1061: ''Stack<char>'' does not contain a definition
    for ''IsEmpty'' and no accessible extension method ''IsEmpty'' accepting a first
    argument of type ''Stack<char>'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpf8kkxfi_.cs(31,22): error CS0103: The name ''closing'' does not exist
    in the current context

    /tmp/tmpf8kkxfi_.cs(34,32): error CS0103: The name ''closing'' does not exist
    in the current context

    /tmp/tmpf8kkxfi_.cs(37,42): error CS0103: The name ''closing'' does not exist
    in the current context

    '
  timestamp: 1660008855
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Dictionary<char, bool> openingToClosing\
    \ = new Dictionary<char, bool>();\n        openingToClosing['('] = false;\n  \
    \      openingToClosing[')'] = false;\n\n        for (int i = 0; i < brackets.Length;\
    \ i++) {\n            if (brackets[i] == '(')\n                openingToClosing['(']\
    \ = true;\n            if (brackets[i] == '(')\n                openingToClosing[')']\
    \ = true;\n\n            if (openingToClosing.ContainsKey(brackets[i]))\n    \
    \            return false;\n        }\n\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac49dace77304717adb74b9450df9c9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac49dace77304717adb74b9450df9c9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008855
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        List<string> openBrackets = new\
    \ List<string>();\n        List<string> closingBrackets = new List<string>();\n\
    \        for(int i = 0; i < brackets.Length; i++) {\n            string character\
    \ = brackets[i];\n            if (character == \"(\") {\n                if (openBrackets.Count\
    \ > 0) {\n                    return false;\n                }\n             \
    \   openBrackets.Add(character);\n            }\n            if (character ==\
    \ \")\") {\n                if (closingBrackets.Count > 0) {\n               \
    \     return false;\n                }\n                closingBrackets.Add(character);\n\
    \            }\n        }\n        if (openBrackets.Count != closingBrackets.Count)\
    \ {\n            return false;\n        }\n        return openBrackets.All(character\
    \ => closingBrackets.Contains(character));\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyc57ukr1.cs(23,32): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1660008855
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        string[] pairs = brackets.Split(new\
    \ char[] { '(', ')' }, StringSplitOptions.RemoveEmptyEntries);\n        for (int\
    \ i = 0; i < pairs.Length; i++)\n        {\n            string s = pairs[i];\n\
    \            if (s.IndexOf(\"(\", StringComparison.Ordinal) != 0)\n          \
    \  {\n                return false;\n            }\n\n            int parensCount\
    \ = 0;\n            for (int j = s.IndexOf(\")\", StringComparison.Ordinal); j\
    \ >= 0; j = s.IndexOf(\")\", StringComparison.Ordinal))\n            {\n     \
    \           parensCount++;\n                s = s.Remove(j, 1);\n            }\n\
    \            if (parensCount != s.Length)\n            {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f00dbc88068145c8a544db12538ee489>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f00dbc88068145c8a544db12538ee489>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008855
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        string[] tokens = brackets.Split('\
    \ ');\n        bool hasCorrectBracket = false;\n        for (int i = 0; i < tokens.Length;\
    \ i++) {\n            string token = tokens[i];\n            if (token.Length\
    \ > 0 && token[0] != ')' && token[0] != '(') {\n                if (tokens[i -\
    \ 1] != null && tokens[i - 1][0] == '(' && token[token.Length - 1] != ')' && token[token.Length\
    \ - 1] != '(') {\n                    hasCorrectBracket = true;\n            \
    \        break;\n                }\n            }\n        }\n        return hasCorrectBracket;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <20705f833e3d40999ab4fb700434cf30>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <20705f833e3d40999ab4fb700434cf30>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008855
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // Check that the brackets string\
    \ is valid.\n        if (String.IsNullOrEmpty(brackets)) {\n            return\
    \ false;\n        }\n        // Count the number of open brackets.\n        int\
    \ openBrackets = brackets.Count(x => x == '(');\n        // Count the number of\
    \ closing brackets.\n        int closingBrackets = brackets.Count(x => x == ')');\n\
    \        // Count the number of matching brackets.\n        int matchingBrackets\
    \ = (openBrackets + closingBrackets) % 2;\n        // If they're not evenly divisible,\
    \ they don't match.\n        if (matchingBrackets != 0) {\n            return\
    \ false;\n        }\n        // Otherwise, they'll match.\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <383956d655dd400d8467f284f570896b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <383956d655dd400d8467f284f570896b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008855
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // Return true if the string brackets\
    \ contains no unpaired brackets.\n        if (brackets.Contains(\")\")) {\n  \
    \          return false;\n        }\n\n        // Return true if the string brackets\
    \ contains no unpaired brackets.\n        if (brackets.Contains(\"(\")) {\n  \
    \          return false;\n        }\n\n        // Return true if the string brackets\
    \ contains no unpaired brackets.\n        if (brackets.Contains(\"()\")) {\n \
    \           return false;\n        }\n\n        // Return true if the string brackets\
    \ contains no unpaired brackets.\n        if (brackets.Contains(\"[\")) {\n  \
    \          return false;\n        }\n\n        // Return true if the string brackets\
    \ contains no unpaired brackets.\n        if (brackets.Contains(\"{\") && !brackets.Contains(\"\
    }\")) {\n            return false;\n        }\n\n        // Return true if the\
    \ string brackets contains no unpaired brackets.\n        if (brackets.Contains(\"\
    }\") && !brackets.Contains(\"}\")) {\n            return false;\n        }\n\n\
    \        // Return true if the string brackets contains no unpaired brackets.\n\
    \        if (brackets.Contains(\"[\")\n            && !brackets.Contains(\"]\"\
    )\n            && !brackets.Contains(\"}\")\n            && !brackets.Contains(\"\
    }\")\n            && !brackets.Contains(\"]\")\n            && !brackets.Contains(\"\
    ]\")) {\n            return false;\n        }\n\n        // Return true if the\
    \ string brackets contains no unpaired brackets.\n        if (brackets.Contains(\"\
    }\")\n            && !brackets.Contains(\"}\")\n            && !brackets.Contains(\"\
    [\")\n            && !brackets.Contains(\"[\")\n            && !brackets.Contains(\"\
    ]\")\n            && !brackets.Contains(\"]\")) {\n            return false;\n\
    \        }\n\n        // Return true if the string brackets contains no unpaired\
    \ brackets.\n        if (brackets.Contains(\"[\")\n            && !brackets.Contains(\"\
    ]\")\n            && !brackets.Contains(\"}\")\n            && !brackets.Contains(\"\
    }\")\n            && !brackets.Contains(\"]\")\n            && !brackets.Contains(\"\
    ]\")) {\n            return false;\n        }\n\n        // Return true if the\
    \ string brackets contains no unpaired brackets.\n        if (brackets.Contains(\"\
    }\")\n            && !brackets.Contains(\"}\")\n            && !brackets.Contains(\"\
    [\")\n            && !brackets.Contains(\"[\")\n            && !brackets.Contains(\"\
    ]\")\n            && !brackets.Contains(\"]\")) {\n            return false;\n\
    \        }\n\n        // Return true if the string brackets contains no unpaired\
    \ brackets.\n        if (brackets.Contains(\"}\")\n            && !brackets.Contains(\"\
    }\")\n            && !brackets.Contains(\"[\")\n            && !brackets.Contains(\"\
    [\")\n            && !brackets.Contain\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvsmtn1ui.cs(95,33): error CS1026: ) expected

    /tmp/tmpvsmtn1ui.cs(95,33): error CS1525: Invalid expression term ''}''

    /tmp/tmpvsmtn1ui.cs(95,33): error CS1002: ; expected

    '
  timestamp: 1660008855
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var openingBrackets = new HashSet<char>(StringComparer.Ordinal);\n\
    \        var closingBrackets = new HashSet<char>(StringComparer.Ordinal);\n  \
    \      foreach (var bracket in brackets) {\n            switch (bracket) {\n \
    \               case '(':\n                    openingBrackets.Add('(');\n   \
    \                 break;\n                case ')':\n                    closingBrackets.Add(')');\n\
    \                    break;\n                case '{':\n                    openingBrackets.Add('{');\n\
    \                    break;\n                case '}':\n                    closingBrackets.Add('}');\n\
    \                    break;\n            }\n        }\n        // Check that every\
    \ opening bracket has a corresponding closing bracket.\n        // If not, return\
    \ false.\n        // If they are all the same, return true.\n        return openingBrackets.Count\
    \ == closingBrackets.Count && openingBrackets.Count > 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9wukiex8.cs(20,49): error CS1503: Argument 1: cannot convert from ''System.StringComparer''
    to ''System.Collections.Generic.IEqualityComparer<char>''

    /tmp/tmp9wukiex8.cs(21,49): error CS1503: Argument 1: cannot convert from ''System.StringComparer''
    to ''System.Collections.Generic.IEqualityComparer<char>''

    '
  timestamp: 1660008855
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if(brackets.Length < 1)\n    \
    \        return false;\n        Stack<Character> stack = new Stack<Character>();\n\
    \        for (int i = 0; i < brackets.Length; i++) {\n            char c = brackets[i];\n\
    \            switch (c) {\n                case '(':\n                    stack.Push(c);\n\
    \                    break;\n                case ')':\n                    char\
    \ c = stack.Pop();\n                    if(!(c == '('))\n                    \
    \    return false;\n                    break;\n                default:\n   \
    \                 continue;\n            }\n        }\n        if(stack.Pop()\
    \ != '(')\n            return false;\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpypek0e91.cs(22,15): error CS0246: The type or namespace name ''Character''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpypek0e91.cs(22,44): error CS0246: The type or namespace name ''Character''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpypek0e91.cs(27,32): error CS0841: Cannot use local variable ''c'' before
    it is declared

    /tmp/tmpypek0e91.cs(30,26): error CS0136: A local or parameter named ''c'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1660008855
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var opening = brackets.Split(new[]\
    \ { '(' }, StringSplitOptions.RemoveEmptyEntries).ToList();\n        var closing\
    \ = brackets.Split(new[] { ')' }, StringSplitOptions.RemoveEmptyEntries).ToList();\n\
    \        return !opening.Except(closing).Any();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d1b07fad34084c5999c3f72484f66dae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d1b07fad34084c5999c3f72484f66dae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008855
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // Count how many \"(\", \")\"\
    \ pairs there are.\n        // Use that count as the index to the array\n    \
    \    // of pairs.\n        int countOpen = 0;\n        int countClose = 0;\n \
    \       for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i]\
    \ == '(') {\n                countOpen++;\n            } else if (brackets[i]\
    \ == ')') {\n                countClose++;\n            }\n        }\n\n     \
    \   // Create an array to store the pairs\n        char[] pairs = new char[countClose\
    \ + 1];\n\n        // Initialize the array to hold pairs\n        for (int i =\
    \ 0; i < countOpen; i++) {\n            pairs[i] = '(';\n        }\n        for\
    \ (int i = countOpen; i < countClose + 1; i++) {\n            pairs[i] = ')';\n\
    \        }\n\n        // Create a string builder to store the results\n      \
    \  StringBuilder sb = new StringBuilder();\n\n        // Go through the pairs\
    \ array\n        for (int i = 0; i < pairs.Length; i++) {\n            // if the\
    \ current character is an opening bracket,\n            // append it to sb\n \
    \           if (pairs[i] == '(') {\n                sb.Append(brackets[i]);\n\
    \            } else {\n                // otherwise, if the current character\
    \ is a closing bracket,\n                // count the number of opening brackets\
    \ that are to the left of\n                // the current index\n            \
    \    int countLeft = 0;\n                for (int j = 0; j < i; j++) {\n     \
    \               if (pairs[j] == '(') {\n                        countLeft++;\n\
    \                    }\n                }\n\n                // If there are one\
    \ or more left brackets,\n                // append the opening bracket to the\
    \ sb\n                if (countLeft > 0) {\n                    sb.Append('(');\n\
    \                }\n\n                // append the current closing bracket to\
    \ the sb\n                sb.Append(brackets[i]);\n            }\n        }\n\n\
    \        // return the resulting string without the last bracket\n        return\
    \ sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfobsnb7d.cs(76,16): error CS0029: Cannot implicitly convert type ''string''
    to ''bool''

    '
  timestamp: 1660008855
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var sb = new StringBuilder();\n\
    \        string current = \"(\";\n        bool flag = false;\n        for (int\
    \ i = 0; i < brackets.Length; ++i) {\n            if (brackets[i] == '(') {\n\
    \                sb.Append(current);\n                current = \"(\";\n     \
    \           flag = true;\n            }\n            else {\n                if\
    \ (flag) {\n                    current = sb.ToString();\n                   \
    \ sb.Clear();\n                    flag = false;\n                }\n        \
    \    }\n            if (brackets[i] == ')') {\n                current = sb.ToString();\n\
    \                sb.Clear();\n            }\n        }\n        return flag;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <24971fffa28b44ab829ecf6236b96439>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <24971fffa28b44ab829ecf6236b96439>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008855
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        string s = brackets;\n       \
    \ StringBuilder sb = new StringBuilder(s);\n        StringBuilder newS = new StringBuilder();\n\
    \        int n = 0;\n        while (n > -1) {\n            newS.Append(\"(\");\n\
    \            n++;\n            while (n > -1) {\n                if (sb[n - 1]\
    \ == '(')\n                    newS.Append(\"(\");\n                else if (sb[n\
    \ - 1] == '[' || sb[n - 1] == '{') {\n                    newS.Append(\"[\");\n\
    \                } else if (sb[n - 1] == '(' || sb[n - 1] == '[') {\n        \
    \            newS.Append(\"{\");\n                }\n                n++;\n  \
    \          }\n            newS.Append(\")\");\n        }\n        return (newS.ToString()\
    \ == s);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at System.Text.StringBuilder.get_Chars (System.Int32\
    \ index) [0x00018] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CorrectBracketing\
    \ (System.String brackets) [0x0002e] in <c8a7aa519147455cb9a7f174846a4111>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <c8a7aa519147455cb9a7f174846a4111>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index\
    \ was outside the bounds of the array.\n  at System.Text.StringBuilder.get_Chars\
    \ (System.Int32 index) [0x00018] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ Problem.CorrectBracketing (System.String brackets) [0x0002e] in <c8a7aa519147455cb9a7f174846a4111>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <c8a7aa519147455cb9a7f174846a4111>:0\
    \ \n"
  stdout: ''
  timestamp: 1660008855
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return\
    \ false;\n        var tokens = brackets.Split(' ');\n        foreach (var token\
    \ in tokens)\n        {\n            if (token.Length == 0) continue;\n      \
    \      char openingToken = token[0];\n            var closes = brackets.Substring(1,\
    \ brackets.Length - 1).Split(' ');\n            if (closes.Length == 0) continue;\n\
    \            char closingToken = closes[0];\n            if (openingToken != closingToken)\
    \ return false;\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjarzrffv.cs(28,33): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    '
  timestamp: 1660008855
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Stack<char> stack = new Stack<char>();\n\
    \        stack.Push(brackets[0]);\n        bool result = true;\n        for (int\
    \ i = 1; i < brackets.Length; i++) {\n            if (stack.Peek() != '(' && stack.Peek()\
    \ != ')') {\n                result = false;\n            }\n            char\
    \ current = brackets[i];\n            stack.Push(current);\n            if (current\
    \ != ')') {\n                result = false;\n            }\n        }\n     \
    \   if (stack.Peek() != '(' && stack.Peek() != ')') {\n            result = false;\n\
    \        }\n        stack.Pop();\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <627f461482da4828a6edb8a7bf70b1aa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <627f461482da4828a6edb8a7bf70b1aa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008855
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        return brackets.Split('(')\n \
    \           .Count(x => x == ')') == brackets.Split(')').Count(x => x == '(');\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpinyftuj8.cs(21,25): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''string'' and ''char''

    /tmp/tmpinyftuj8.cs(21,69): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''string'' and ''char''

    '
  timestamp: 1660008855
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null) {\n    \
    \        throw new ArgumentNullException(\"brackets\");\n        }\n        if\
    \ (brackets.Length < 2) {\n            return false;\n        }\n\n        Stack<string>\
    \ stack = new Stack<string>();\n        foreach (string bracket in brackets) {\n\
    \            if (bracket == '(') {\n                stack.Push(bracket);\n   \
    \         } else if (bracket.Equals(\")\")) {\n                if (stack.Count\
    \ != 0) {\n                    string closing = stack.Pop();\n               \
    \     if (closing == bracket) {\n                        return true;\n      \
    \              }\n                }\n            }\n        }\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps5zwld_j.cs(29,17): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''string'' and ''char''

    /tmp/tmps5zwld_j.cs(28,9): error CS0030: Cannot convert type ''char'' to ''string''

    '
  timestamp: 1660008855
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int i = 0;\n        Stack<string>\
    \ stack = new Stack<string>();\n        // count the number of opening brackets.\n\
    \        foreach (char c in brackets) {\n            if (c == '(') {\n       \
    \         i++;\n            }\n            if (c == ')') {\n                i++;\n\
    \            }\n            if (c == ')' && stack.Count != 0) {\n            \
    \    string top = stack.Pop();\n                if (top.Length > i) {\n      \
    \              stack.Push(top.Substring(0, i));\n                    return true;\n\
    \                }\n            }\n            if (i == 0) {\n               \
    \ return false;\n            }\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9e97ae12c25248848bda1556ad020340>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9e97ae12c25248848bda1556ad020340>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008856
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var openingBrackets = new HashSet<char>();\n\
    \        var closingBrackets = new HashSet<char>();\n        foreach(char c in\
    \ brackets) {\n            if (c == '(') {\n                openingBrackets.Add(c);\n\
    \            }\n            if (c == ')') {\n                closingBrackets.Add(c);\n\
    \            }\n        }\n        if (openingBrackets.Count != closingBrackets.Count)\
    \ {\n            return false;\n        }\n        return !openingBrackets.Except(closingBrackets).Any();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e132fdccd6204c998c3715b2ed1becdb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e132fdccd6204c998c3715b2ed1becdb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008856
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null || brackets.Length\
    \ == 0) {\n            return true;\n        }\n        Stack<char> stack = new\
    \ Stack<char>();\n        bool foundBracket = false;\n        foreach (char bracket\
    \ in brackets) {\n            if (stack.Count == 0 && bracket == '(' || stack.Count\
    \ == 1 && bracket == '[') {\n                stack.Push(bracket);\n          \
    \      foundBracket = true;\n            } else if (stack.Count == 0 && bracket\
    \ == '[' || stack.Count == 1 && bracket == '(') {\n                stack.Push(bracket);\n\
    \                foundBracket = true;\n            } else if (stack.Count == 0\
    \ && bracket == ')' || stack.Count == 1 && bracket == '(') {\n               \
    \ stack.Pop();\n                if (stack.Count == 0 && bracket == '(') {\n  \
    \                  foundBracket = false;\n                }\n            } else\
    \ {\n                stack.Pop();\n                if (stack.Count == 0 && bracket\
    \ == '(') {\n                    foundBracket = false;\n                }\n  \
    \          }\n        }\n        if (foundBracket) {\n            foreach (char\
    \ bracket in brackets) {\n                if (stack.Count == 0 && bracket == '['\
    \ || stack.Count == 1 && bracket == '(') {\n                    foundBracket =\
    \ false;\n                    break;\n                }\n            }\n     \
    \   }\n        return foundBracket;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Stack empty.\n\
    \  at System.Collections.Generic.Stack`1[T].Pop () [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CorrectBracketing (System.String brackets) [0x000d9] in <0657c13b6dbc427b9efe3d02d7a305cf>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00031] in <0657c13b6dbc427b9efe3d02d7a305cf>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Stack\
    \ empty.\n  at System.Collections.Generic.Stack`1[T].Pop () [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CorrectBracketing (System.String brackets) [0x000d9] in <0657c13b6dbc427b9efe3d02d7a305cf>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00031] in <0657c13b6dbc427b9efe3d02d7a305cf>:0\
    \ \n"
  stdout: ''
  timestamp: 1660008855
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var brackCounts = new Stack<string>();\n\
    \        var correct = false;\n        for (int i = 0; i < brackets.Length; i++)\
    \ {\n            brackCounts.Push(brackets[i]);\n        }\n        while (brackCounts.Count\
    \ > 0 && correct) {\n            string currentChar = brackCounts.Pop();\n   \
    \         switch (currentChar) {\n                case '(':\n                case\
    \ ')':\n                    correct = true;\n                    break;\n    \
    \            default:\n                    // the bracket isn't balanced.\n  \
    \                  // add the opening bracket to the stack and try again.\n  \
    \                  brackCounts.Push(currentChar);\n                    continue;\n\
    \            }\n        }\n        return correct;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpexgqye4i.cs(23,30): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpexgqye4i.cs(28,22): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpexgqye4i.cs(29,22): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1660008855
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null)\n      \
    \      return true;\n        if (brackets.Length == 0)\n            return true;\n\
    \        string temp = brackets;\n        bool okay = true;\n        int pos =\
    \ 0;\n        while (pos < temp.Length) {\n            // skip over opening brackets\n\
    \            while (pos < temp.Length && temp[pos] != '(')\n                pos++;\n\
    \            // skip over closing brackets\n            while (pos < temp.Length\
    \ && temp[pos] != ')')\n                pos++;\n            // no open brackets;\
    \ must be unbalanced\n            if (pos == temp.Length)\n                return\
    \ false;\n            while (pos < temp.Length && temp[pos] == '(')\n        \
    \        pos++;\n            // no closed brackets; must be unbalanced\n     \
    \       if (pos == temp.Length)\n                return false;\n            //\
    \ now we know it's balanced. Let's unbalance it!\n            while (pos < temp.Length\
    \ && temp[pos] == ')')\n                pos++;\n            // now we know it's\
    \ unbalanced. Now we know we're good.\n            okay = true;\n            while\
    \ (pos < temp.Length && temp[pos] == ')')\n                pos++;\n          \
    \  while (pos < temp.Length && temp[pos] == '(')\n                pos++;\n   \
    \     }\n        return okay;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a18f3077aa684a20a94b325707b9a7f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a18f3077aa684a20a94b325707b9a7f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008856
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        return brackets.Replace(\"(\"\
    , \"(\").Replace(\")\", \")\").Replace(\"(\", \"(\").Replace(\")\", \"(\").Replace(\"\
    )\", \")\").Replace(\"(\", \"(\").Replace(\")\", \"(\").Replace(\")\", \"(\").Replace(\"\
    )\", \")\").Replace(\")\", \"(\").Replace(\")\", \"(\").Replace(\")\", \"(\").Replace(\"\
    )\", \"(\").Replace(\")\", \"(\").Replace(\")\", \")\").Replace(\"(\", \"(\").Replace(\"\
    )\", \"(\").Replace(\")\", \")\").Replace(\"(\", \"(\").Replace(\")\", \"(\").Replace(\"\
    )\", \")\").Replace(\"(\", \"(\").Replace(\")\", \"(\").Replace(\")\", \")\").Replace(\"\
    )\", \"(\").Replace(\")\", \"(\").Replace(\")\", \"(\").Replace(\")\", \"(\").Replace(\"\
    )\", \"(\").Replace(\")\", \"(\").Replace(\")\", \"(\").Replace(\")\", \"(\").Replace(\"\
    )\", \")\").Replace(\"(\", \"(\").Replace(\")\", \"(\").Replace(\")\", \")\").Replace(\"\
    )\", \"(\").Replace(\")\", \"(\").Replace(\")\", \")\").Replace(\")\", \"(\").Replace(\"\
    )\", \"(\").Replace(\")\", \"(\").Replace(\")\", \"(\").Replace(\")\", \"(\").Replace(\"\
    )\", \"(\").Replace(\")\", \")\").Replace(\"(\", \"(\").Replace(\")\", \"(\").Replace(\"\
    )\", \")\").Replace(\"(\", \"(\").Replace(\")\", \"(\").Replace(\")\", \")\").Replace(\"\
    (\", \"(\").Replace(\")\", \"(\").Replace(\")\", \")\").Replace(\"(\", \"(\").Replace(\"\
    )\", \"(\").Replace(\")\", \")\").Replace(\")\", \"(\").Replace(\")\", \"(\").Replace(\"\
    )\", \")\").Replace(\")\", \"(\").Replace(\")\", \"(\").Replace(\")\", \"(\").Replace(\"\
    )\", \"(\").Replace(\")\", \"(\").Replace(\")\", \"(\").Replace(\")\", \"(\").Replace(\"\
    )\", \"(\").Replace(\")\", \"(\").Replace(\")\", \"(\").Replace(\")\", \"(\").Replace(\"\
    )\", \"(\").Replace(\")\", \"(\").Replace(\")\", \")\").Replace(\"(\", \"(\").Replace(\"\
    )\", \"(\").Replace(\")\", \")\").Replace(\")\", \"(\").Replace(\")\", \"(\").Replace(\"\
    )\", \")\").Replace(\"(\", \"(\").Replace(\")\", \"(\").Replace(\")\", \")\").Replace(\"\
    )\", \"(\"\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps6rese3v.cs(20,1553): error CS1026: ) expected

    /tmp/tmps6rese3v.cs(20,1553): error CS1002: ; expected

    '
  timestamp: 1660008855
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var stack = new Stack<char>();\n\
    \        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i]\
    \ == '(') {\n                stack.Push(brackets[i]);\n            } else if (brackets[i]\
    \ == ')') {\n                if (stack.Count > 0 && stack.Peek() == '(') {\n \
    \                   stack.Pop();\n                }\n            }\n        }\n\
    \        return stack.Count == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e0d6229d6d5c4cdd88918f31e6de7b89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e0d6229d6d5c4cdd88918f31e6de7b89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008856
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null)\n      \
    \      throw new ArgumentNullException(\"brackets\");\n        if (brackets.Length\
    \ < 2)\n            return false;\n\n        var stack = new Stack<char>();\n\
    \        foreach (char c in brackets) {\n            if (c == '(' || c == '['\
    \ || c == '{')\n                stack.Push(c);\n            else if (c == ')'\
    \ || c == ']' || c == '}')\n            {\n                if (!stack.Peek().Equals(c))\n\
    \                    return false;\n            }\n            else\n        \
    \        stack.Pop();\n        }\n        return stack.Count == 0;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4748b17611e54c36843c8a5d1dd5d98a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4748b17611e54c36843c8a5d1dd5d98a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008856
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int openBrackets = 0;\n      \
    \  int closeBrackets = 0;\n        bool result = true;\n        foreach (char\
    \ c in brackets) {\n            if (c == '(') {\n                openBrackets++;\n\
    \            }\n            if (c == ')') {\n                closeBrackets++;\n\
    \            }\n            if (openBrackets != closeBrackets) {\n           \
    \     result = false;\n                break;\n            }\n        }\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e549bf7bfb7453ba7bfffd7fae62085>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e549bf7bfb7453ba7bfffd7fae62085>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008856
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        string s = brackets;\n       \
    \ for(int i = 0, count = s.Length; i < count; i++) {\n            if(!IsBracket(s[i]))\n\
    \                return false;\n        }\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpprgk_hu1.cs(22,17): error CS0103: The name ''IsBracket'' does not exist
    in the current context

    '
  timestamp: 1660008856
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null || brackets.Length\
    \ <= 1) return true;\n        int length = brackets.Length;\n        Stack<string>\
    \ opening = new Stack<string>();\n        for (int i = 0; i < length; ++i) {\n\
    \            char next = brackets[i];\n            if (next == '(') {\n      \
    \          opening.Push(brackets[i]);\n            } else if (next == ')') {\n\
    \                opening.Pop();\n            }\n        }\n        bool allOpen\
    \ = opening.Count == 0;\n        return allOpen;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpapcwu3ss.cs(26,30): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1660008856
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        string openingBrackets = brackets.Replace(\"\
    )\", \"\");\n        string closingBrackets = brackets.Replace(\"(\", \"\");\n\
    \n        return openingBrackets.Contains(closingBrackets);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <018ff170124745aa8daf0a96dba1748e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <018ff170124745aa8daf0a96dba1748e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008856
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        char[] openingBrackets = { '(',\
    \ '{', '[' };\n        char[] closingBrackets = { '}', ']', '}' };\n        char[]\
    \ bracketPairs = { openingBrackets, closingBrackets };\n        int openingBracketsIndex\
    \ = 0;\n        foreach (char bracket in brackets) {\n            // advance the\
    \ index if the current character is neither a opening bracket nor\n          \
    \  // a closing bracket.\n            if (openingBrackets[openingBracketsIndex]\
    \ == bracket) {\n                openingBracketsIndex++;\n            } else if\
    \ (closingBrackets[closingBracketsIndex] == bracket) {\n                openingBracketsIndex--;\n\
    \            }\n            if (openingBracketsIndex < 0) {\n                return\
    \ false;\n            }\n        }\n        // if we get to this point, all opening\
    \ brackets have a corresponding closing bracket\n        return true;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqtifcjpq.cs(22,33): error CS0029: Cannot implicitly convert type ''char[]''
    to ''char''

    /tmp/tmpqtifcjpq.cs(22,50): error CS0029: Cannot implicitly convert type ''char[]''
    to ''char''

    /tmp/tmpqtifcjpq.cs(29,40): error CS0103: The name ''closingBracketsIndex'' does
    not exist in the current context

    '
  timestamp: 1660008856
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int depth = 0;\n        bool foundOpeningBracket\
    \ = false;\n        int openingBracketIndex = -1;\n        int closingBracketIndex\
    \ = -1;\n\n        for (int i = 0; i < brackets.Length; i++) {\n            char\
    \ bracket = brackets[i];\n\n            if (bracket == '(') {\n              \
    \  depth++;\n                if (depth > 1) {\n                    closingBracketIndex\
    \ = i;\n                }\n            }\n            else if (bracket == ')')\
    \ {\n                depth--;\n            }\n            else {\n           \
    \     if (closingBracketIndex != -1) {\n                    if (openingBracketIndex\
    \ == closingBracketIndex) {\n                        foundOpeningBracket = true;\n\
    \                        openingBracketIndex = -1;\n                        closingBracketIndex\
    \ = -1;\n                    }\n                    else if (openingBracketIndex\
    \ > closingBracketIndex) {\n                        openingBracketIndex = -1;\n\
    \                        closingBracketIndex = -1;\n                    }\n  \
    \                  else {\n                        openingBracketIndex = -1;\n\
    \                        closingBracketIndex = -1;\n                    }\n  \
    \              }\n            }\n        }\n\n        return foundOpeningBracket;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4f777b72fa86486ab68a2750025c790d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4f777b72fa86486ab68a2750025c790d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008856
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        bool result = true;\n        var\
    \ currentOpeningBracket = string.Empty;\n        var currentClosingBracket = string.Empty;\n\
    \        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i]\
    \ == '(') {\n                currentOpeningBracket = brackets[i];\n          \
    \  } else if (brackets[i] == '[') {\n                currentOpeningBracket = brackets[i];\n\
    \            } else if (brackets[i] == '{') {\n                currentOpeningBracket\
    \ = brackets[i];\n            } else if (brackets[i] == '(') {\n             \
    \   currentClosingBracket = brackets[i];\n            } else if (brackets[i] ==\
    \ '}') {\n                currentClosingBracket = brackets[i];\n            }\
    \ else if (brackets[i] == ')') {\n                currentClosingBracket = brackets[i];\n\
    \            } else {\n                result = false;\n                break;\n\
    \            }\n        }\n        if (currentOpeningBracket == currentClosingBracket)\
    \ {\n            result = true;\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi8cawpx0.cs(25,41): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpi8cawpx0.cs(27,41): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpi8cawpx0.cs(29,41): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpi8cawpx0.cs(31,41): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpi8cawpx0.cs(33,41): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpi8cawpx0.cs(35,41): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1660008856
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null)\n      \
    \      return false;\n        Stack<char> stack = new Stack<char>();\n       \
    \ foreach (char c in brackets) {\n            if (c == '(')\n                stack.push(')');\n\
    \            else if (c == ')')\n                if (stack.Count > 0 && stack.Peek()\
    \ != '(')\n                    return false;\n                stack.Pop();\n \
    \           else\n                return false;\n        }\n        return stack.Count\
    \ == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpukc2_0tj.cs(29,29): error CS8641: ''else'' cannot start a statement.

    /tmp/tmpukc2_0tj.cs(29,29): error CS1003: Syntax error, ''('' expected

    /tmp/tmpukc2_0tj.cs(29,29): error CS1525: Invalid expression term ''else''

    /tmp/tmpukc2_0tj.cs(29,29): error CS1026: ) expected

    /tmp/tmpukc2_0tj.cs(29,29): error CS1002: ; expected

    '
  timestamp: 1660008856
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if ((brackets.Length & 1) == 0)\
    \ {\n            // no opening brackets\n            return false;\n        }\n\
    \        bool open = false;\n        string openBracket = brackets[0];\n     \
    \   // if brackets[0] has a closing bracket, it's opening.\n        if (brackets.Length\
    \ > 1 && brackets[1] == openBracket) {\n            open = true;\n        }\n\
    \        // if brackets[0] has no closing bracket, it's closing\n        else\
    \ if (brackets.Length > 1 && brackets[1] != openBracket) {\n            return\
    \ false;\n        }\n        // if not opening, then it's closing\n        else\
    \ if (brackets[0] != openBracket) {\n            return false;\n        }\n  \
    \      // for all brackets in the string:\n        for (int i = 0; i < brackets.Length;\
    \ ++i) {\n            bool newOpen = brackets[i+1] == openBracket;\n         \
    \   if (open == newOpen) {\n                continue;\n            }\n       \
    \     return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps2n09d7m.cs(25,30): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmps2n09d7m.cs(27,36): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmps2n09d7m.cs(31,41): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmps2n09d7m.cs(35,18): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmps2n09d7m.cs(40,28): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    '
  timestamp: 1660008856
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Stack<String> stack = new Stack<string>();\n\
    \        for (int i = 0; i < brackets.Length; i++) {\n            switch (brackets[i])\
    \ {\n                case '(':\n                    stack.Add(brackets[i]);\n\
    \                    break;\n                case ')':\n                    if\
    \ (!stack.TryPop(brackets[i], out string popped))\n                        return\
    \ false;\n                    if (popped != '(')\n                        return\
    \ false;\n                    break;\n            }\n        }\n        if (stack.Count\
    \ == 0)\n            return true;\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbru9a3s2.cs(24,27): error CS1061: ''Stack<string>'' does not contain a
    definition for ''Add'' and no accessible extension method ''Add'' accepting a
    first argument of type ''Stack<string>'' could be found (are you missing a using
    directive or an assembly reference?)

    /tmp/tmpbru9a3s2.cs(27,32): error CS1501: No overload for method ''TryPop'' takes
    2 arguments

    /tmp/tmpbru9a3s2.cs(29,25): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''string'' and ''char''

    '
  timestamp: 1660008856
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Debug.Assert(brackets.Length >\
    \ 0);\n        string bracketsStr = \"\";\n        for(int i = 0; i < brackets.Length;\
    \ ++i) {\n            if(brackets[i] == '(')\n                ++bracketsStr.Length;\n\
    \            else\n                --bracketsStr.Length;\n        }\n        int\
    \ bracketsCount = bracketsStr.Length;\n        Debug.Assert(bracketsCount >= 0);\n\
    \        string bracketsArr[] = brackets.ToCharArray();\n        for(int i = 0;\
    \ i < bracketsArr.Length; ++i) {\n            if(bracketsArr[i] == '(')\n    \
    \            ++bracketsCount;\n            else\n                --bracketsCount;\n\
    \        }\n        bool validBrackets = bracketsCount == 0;\n        return validBrackets;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjn4v7ej4.cs(30,27): error CS0650: Bad array declarator: To declare a managed
    array the rank specifier precedes the variable''s identifier. To declare a fixed
    size buffer field, use the fixed keyword before the field type.

    '
  timestamp: 1660008856
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null) return false;\n\
    \        var openingBrackets = new HashSet<string>();\n        var closingBrackets\
    \ = new HashSet<string>();\n        // for each open bracket, add the closing\
    \ bracket to the set.\n        // if the set already contains the closing bracket,\
    \ we're done.\n        foreach (var item in brackets) {\n            if (item\
    \ == \"(\") {\n                openingBrackets.Add(\")\");\n            } else\
    \ if (item == \")\") {\n                closingBrackets.Add(\"(\");\n        \
    \    }\n        }\n        // for each closing bracket, remove the opening bracket\
    \ from the set.\n        // if the set is now empty, we're done.\n        foreach\
    \ (var item in closingBrackets) {\n            if (openingBrackets.Contains(\"\
    (\" + item + \")\")) {\n                openingBrackets.Remove(\"(\" + item +\
    \ \")\");\n            }\n        }\n        return openingBrackets.Count == 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp99efcsr1.cs(26,17): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmp99efcsr1.cs(28,24): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    '
  timestamp: 1660008856
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int numOpeningBrackets = brackets.Count(c\
    \ => c == '(');\n        int numClosingBrackets = brackets.Count(c => c == ')');\n\
    \        if (numOpeningBrackets != numClosingBrackets)\n            return false;\n\
    \        int i = 0;\n        while (i < brackets.Length) {\n            if (brackets[i]\
    \ == '(')\n                i++;\n            else if (brackets[i] == ')')\n  \
    \              i++;\n            else\n                return false;\n       \
    \ }\n        return true;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b54bd4148490476aa0acb782e5c1d973>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b54bd4148490476aa0acb782e5c1d973>:0 \n"
  stdout: ''
  timestamp: 1660008856
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var braket = brackets.ToCharArray();\n\
    \        bool ok = true;\n        foreach (char brak in braket) {\n          \
    \  // Look at all the previous characters.\n            for (int i = brak; i <\
    \ braket.Length; i++) {\n                switch (braket[i]) {\n              \
    \  case '(':\n                    if (braket.Length - i >= 2) {\n            \
    \            if (braket[i + 1] == ')') {\n                            if (braket.Length\
    \ - i <= 2) {\n                                ok = false;\n                 \
    \           }\n                        }\n                    }\n            \
    \        break;\n                case ')':\n                    if (braket.Length\
    \ - i >= 2) {\n                        if (braket[i - 1] == '(') {\n         \
    \                   if (braket.Length - i <= 2) {\n                          \
    \      ok = false;\n                            }\n                        }\n\
    \                    }\n                    break;\n                }\n      \
    \      }\n        }\n        return ok;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a27c32df2bb24d73b7481795129e9eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a27c32df2bb24d73b7481795129e9eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008856
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int i = 0;\n        foreach (char\
    \ c in brackets) {\n            if (c == '(') i++;\n            if (c == ')')\
    \ i--;\n            if (i == 0) return false;\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9c1e4c1f404d4f5fa5cec6c56181f52a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9c1e4c1f404d4f5fa5cec6c56181f52a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008856
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        return brackets.Count(bracket\
    \ => bracket == '(') == brackets.Count(bracket => bracket == ')');\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65c9fc8a45ba45f2a071aa7d8a04564f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65c9fc8a45ba45f2a071aa7d8a04564f>:0 \n"
  stdout: ''
  timestamp: 1660008856
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (string.IsNullOrEmpty(brackets))\
    \ return false;\n        \n        // for each closing bracket, make sure there\
    \ is an opening bracket.\n        // and make sure they are in order.\n      \
    \  char[] openingBrackets = new char[brackets.Length];\n        for (int i = 0;\
    \ i < brackets.Length; i++) {\n            openingBrackets[i] = brackets[i];\n\
    \        }\n        int closeBracket = -1;\n        bool isLastBracket = true;\n\
    \        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i]\
    \ == '(') {\n                closeBracket = i;\n            } else if (brackets[i]\
    \ == ')') {\n                if (!isLastBracket) {\n                    return\
    \ false;\n                }\n                isLastBracket = false;\n        \
    \    }\n        }\n        // there should always be a closing bracket for the\
    \ last bracket.\n        if (!isLastBracket) return false;\n        \n       \
    \ if (closeBracket == brackets.Length - 1) return true;\n        \n        //\
    \ there should be an opening bracket for every closing bracket.\n        bool\
    \ allOpen = true;\n        for (int i = 0; i < brackets.Length; i++) {\n     \
    \       if (brackets[i] == openingBrackets[closeBracket]) {\n                allOpen\
    \ = false;\n            }\n        }\n        \n        return allOpen;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2082ca53ea4e415da16787b0295ab51e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2082ca53ea4e415da16787b0295ab51e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008856
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        List<char> openingBrackets = new\
    \ List<char>();\n        List<char> closingBrackets = new List<char>();\n\n  \
    \      foreach(char bracket in brackets) {\n            if (bracket == '(') openingBrackets.Add(bracket);\n\
    \            if (bracket == ')') closingBrackets.Add(bracket);\n        }\n\n\
    \        if (openingBrackets.Count == closingBrackets.Count) {\n            return\
    \ true;\n        }\n\n        foreach (char openingBracket in openingBrackets)\
    \ {\n            if (closingBrackets.Contains(openingBracket)) {\n           \
    \     return false;\n            }\n        }\n\n        return true;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef47fac788c34068951499bc04378d2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef47fac788c34068951499bc04378d2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008856
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        string current = \"\";\n     \
    \   bool closed = false;\n        foreach (char c in brackets) {\n           \
    \ if (closed) current += c;\n            else if (c == '(') {\n              \
    \  current = \"\";\n                closed = true;\n            }\n          \
    \  else if (c == ')') {\n                if (!closed) return false; // no closing\
    \ bracket\n                closed = false;\n            }\n        }\n       \
    \ return !closed; // must be closed\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <071094ee75f448b48c472c1c3e81dd4b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <071094ee75f448b48c472c1c3e81dd4b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008856
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Stack<string> stack = new Stack<string>();\n\
    \        foreach (char ch in brackets) {\n            if (ch == '(') stack.push(')');\n\
    \            else if (ch == '[') stack.push(']');\n            else if (ch ==\
    \ '{') stack.push('}');\n            else if (ch == ')') if (stack.Count > 0 &&\
    \ stack.Pop() == '(') stack.Clear();\n            else return false;\n       \
    \     else if (ch == ']') if (stack.Count > 0 && stack.Pop() == '[') stack.Clear();\n\
    \            else return false;\n            else if (ch == '}') if (stack.Count\
    \ > 0 && stack.Pop() == '{') stack.Clear();\n            else return false;\n\
    \        }\n        return stack.Count == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkpsktfot.cs(22,34): error CS1061: ''Stack<string>'' does not contain a
    definition for ''push'' and no accessible extension method ''push'' accepting
    a first argument of type ''Stack<string>'' could be found (are you missing a using
    directive or an assembly reference?)

    /tmp/tmpkpsktfot.cs(23,39): error CS1061: ''Stack<string>'' does not contain a
    definition for ''push'' and no accessible extension method ''push'' accepting
    a first argument of type ''Stack<string>'' could be found (are you missing a using
    directive or an assembly reference?)

    /tmp/tmpkpsktfot.cs(24,39): error CS1061: ''Stack<string>'' does not contain a
    definition for ''push'' and no accessible extension method ''push'' accepting
    a first argument of type ''Stack<string>'' could be found (are you missing a using
    directive or an assembly reference?)

    /tmp/tmpkpsktfot.cs(25,56): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''string'' and ''char''

    /tmp/tmpkpsktfot.cs(27,56): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''string'' and ''char''

    /tmp/tmpkpsktfot.cs(29,56): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''string'' and ''char''

    '
  timestamp: 1660008856
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null || !brackets.Contains(\"\
    (\"))\n            return false;\n        if (brackets.Contains(\")\"))\n    \
    \        return false;\n        // the algorithm works because of the rules.\n\
    \        var opening = brackets.Split('(')\n            .SelectMany(x => x.Reverse())\n\
    \            .TakeWhile(x => !string.IsNullOrEmpty(x))\n            .ToArray();\n\
    \        var closing = brackets.Split(')')\n            .SelectMany(x => x.Reverse())\n\
    \            .TakeWhile(x => !string.IsNullOrEmpty(x))\n            .ToArray();\n\
    \n        var correct = true;\n        for (var i = 1; i < opening.Length; i++)\
    \ {\n            var openingItem = opening[i];\n            if (closing != null)\
    \ {\n                var closingItem = closing[opening.Length - i];\n        \
    \        if (openingItem != closingItem)\n                    correct = false;\n\
    \            }\n        }\n        return correct;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp63u_28v3.cs(27,51): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmp63u_28v3.cs(31,51): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1660008856
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var openingBrackets = brackets.ToCharArray().Where(c\
    \ => c == '(');\n        var closingBrackets = brackets.ToCharArray().Where(c\
    \ => c == ')');\n        return openingBrackets.Count() == closingBrackets.Count();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <afea87b1c1ae481b8557f71ed444d711>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <afea87b1c1ae481b8557f71ed444d711>:0 \n"
  stdout: ''
  timestamp: 1660008856
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (string.IsNullOrEmpty(brackets))\
    \ return true;\n        var firstChar = brackets.Substring(0, 1);\n        var\
    \ secondChar = brackets.Substring(1, 1);\n        bool result = false;\n     \
    \   if (firstChar == firstChar.ToString()) result = true;\n        if (firstChar\
    \ == secondChar.ToString()) result = true;\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <28e042dd4689480daa913e3e85d768f3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <28e042dd4689480daa913e3e85d768f3>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Index and length must refer to a location\
    \ within the string.\nParameter name: length\n  at System.String.Substring (System.Int32\
    \ startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CorrectBracketing (System.String brackets) [0x00019] in <28e04"
  stdout: ''
  timestamp: 1660008856
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var closingBrackets = brackets.Replace(\"\
    (\", string.Empty).Replace(\")\", string.Empty);\n        return closingBrackets.Split('(').All(s\
    \ => s.Length > 0) && (closingBrackets.Length % 2) == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0c97e2f48a554171b6b623681051d2ef>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0c97e2f48a554171b6b623681051d2ef>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008857
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var closingBracket = brackets.IndexOf(\"\
    )\", 1);\n        if (closingBracket < 0)\n            return false;\n       \
    \ int openingBracketCount = 0;\n        for (int i = 0; i < brackets.Length &&\
    \ openingBracketCount < closingBracket; i++)\n            if (brackets[i] == \"\
    (\") openingBracketCount++;\n        return openingBracketCount == closingBracket;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwigj7uhj.cs(25,17): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    '
  timestamp: 1660008856
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        foreach (char c in brackets) {\n\
    \            if (c == '(') {\n                bool found = false;\n          \
    \      for (int i = 1; i < brackets.Length; i++) {\n                    if (brackets[i\
    \ - 1] != '(') {\n                        break;\n                    }\n    \
    \                if (brackets[i] == '(') {\n                        found = true;\n\
    \                        break;\n                    }\n                }\n  \
    \              if (!found) {\n                    return false;\n            \
    \    }\n            }\n            if (c == ')') {\n                bool found\
    \ = false;\n                for (int i = 1; i < brackets.Length; i++) {\n    \
    \                if (brackets[i - 1] != ')') {\n                        break;\n\
    \                    }\n                    if (brackets[i] == ')') {\n      \
    \                  found = true;\n                        break;\n           \
    \         }\n                }\n                if (!found) {\n              \
    \      return false;\n                }\n            }\n        }\n        return\
    \ true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4e9e31c50c2040e89576ef921c37af23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4e9e31c50c2040e89576ef921c37af23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008857
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var inBrackets = new HashSet<char>();\n\
    \        var current = 0;\n        foreach (var c in brackets) {\n           \
    \ if (!inBrackets.Contains(c)) {\n                inBrackets.Add(c);\n       \
    \         current = c;\n            }\n        }\n        if (current != 0)\n\
    \            return false;\n        current = inBrackets.Count - 1;\n        foreach\
    \ (var c in brackets) {\n            if (inBrackets.Contains(c))\n           \
    \     inBrackets.Remove(c);\n            else\n                return false;\n\
    \        }\n        return inBrackets.Count == 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <278d8af1876a4449a90cc6d4517ffa04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <278d8af1876a4449a90cc6d4517ffa04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008857
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var stack = new Stack<Stack<char>>();\n\
    \        var results = new Stack<char>();\n        var openingBrackets = new HashSet<char>();\n\
    \        for (int i = 0; i < brackets.Length; i++) {\n            var ch = brackets[i];\n\
    \            if (openingBrackets.Contains(ch)) {\n                openingBrackets.Remove(ch);\n\
    \                stack.Push(stack.Pop());\n            } else {\n            \
    \    if (results.Count == 0 || !stack.Peek().Contains(ch)) {\n               \
    \     results.Push(ch);\n                }\n                openingBrackets.Add(ch);\n\
    \            }\n        }\n        return results.Count == 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Stack empty.\n\
    \  at System.Collections.Generic.Stack`1[T].Peek () [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CorrectBracketing (System.String brackets) [0x00052] in <60e148bb27514e4fba7375df1aa99039>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <60e148bb27514e4fba7375df1aa99039>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Stack\
    \ empty.\n  at System.Collections.Generic.Stack`1[T].Peek () [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CorrectBracketing (System.String brackets) [0x00052] in <60e148bb27514e4fba7375df1aa99039>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <60e148bb27514e4fba7375df1aa99039>:0\
    \ \n"
  stdout: ''
  timestamp: 1660008856
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (string.IsNullOrEmpty(brackets))\n\
    \            return false;\n        int open = 0;\n        int close = 0;\n  \
    \      foreach (var c in brackets) {\n            switch (c) {\n             \
    \   case \")\": close++; break;\n                case \"(\": open++; break;\n\
    \            }\n        }\n        return open == close;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe_jeco5t.cs(26,22): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpe_jeco5t.cs(27,22): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    '
  timestamp: 1660008856
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null) {\n    \
    \        return false;\n        }\n\n        var openingBrackets = brackets.Replace(\"\
    (\", string.Empty).Replace(\")\", string.Empty);\n\n        // Remove all brackets\
    \ from the string\n        string newBrackets = string.Empty;\n        for (int\
    \ i = 0; i < openingBrackets.Length; i++) {\n            if (openingBrackets[i]\
    \ == '(') {\n                newBrackets = newBrackets + openingBrackets[i];\n\
    \            }\n            if (openingBrackets[i] == ')') {\n               \
    \ newBrackets = newBrackets + openingBrackets[i];\n            }\n        }\n\n\
    \        // Remove all brackets from the string\n        string newBracketsNoBrackets\
    \ = newBrackets.Replace(\"(\", string.Empty).Replace(\")\", string.Empty);\n\n\
    \        bool result = newBracketsNoBrackets.Trim().Length == 0;\n\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8c47626cf4a34a8a8321cad47bd96188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8c47626cf4a34a8a8321cad47bd96188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008857
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        return brackets.Replace(\"(\"\
    , \"(\")\n            .Replace(\")\", \"(\")\n            .Replace(\"(\", \"(\"\
    )\n            .Replace(\")\", \")\")\n            .Replace(\"(\", \"(\")\n  \
    \          .Replace(\")\", \")\")\n            .Replace(\"(\", \"(\")\n      \
    \      .Replace(\")\", \")\")\n            .Replace(\"(\", \"(\")\n          \
    \  .Replace(\")\", \")\")\n            .Replace(\"(\", \"(\")\n            .Replace(\"\
    )\", \")\")\n            .Replace(\"(\", \"(\")\n            .Replace(\")\", \"\
    )\")\n            .Replace(\"(\", \"(\")\n            .Replace(\")\", \")\")\n\
    \            .Replace(\"(\", \"(\")\n            .Replace(\")\", \")\")\n    \
    \        .Replace(\"(\", \"(\")\n            .Replace(\")\", \")\")\n        \
    \    .Replace(\"(\", \"(\")\n            .Replace(\")\", \")\")\n            .Replace(\"\
    (\", \"(\")\n            .Replace(\")\", \")\")\n            .Replace(\"(\", \"\
    (\")\n            .Replace(\")\", \")\")\n            .Replace(\"(\", \"(\")\n\
    \            .Replace(\")\", \")\")\n            .Replace(\"(\", \"(\")\n    \
    \        .Replace(\")\", \")\")\n            .Replace(\"(\", \"(\")\n        \
    \    .Replace(\")\", \")\")\n            .Replace(\"(\", \"(\")\n            .Replace(\"\
    )\", \")\")\n            .Replace(\"(\", \"(\")\n            .Replace(\")\", \"\
    )\")\n            .Replace(\"(\", \"(\")\n            .Replace(\")\", \")\")\n\
    \            .Replace(\"(\", \"(\")\n            .Replace(\")\", \")\")\n    \
    \        .Replace(\"(\", \"(\")\n            .Replace(\")\", \")\")\n        \
    \    .Replace(\"(\", \"(\")\n            .Replace(\")\", \")\")\n            .Replace(\"\
    (\", \"(\")\n            .Replace(\")\", \")\")\n            .Replace(\"(\", \"\
    (\")\n            .Replace(\")\", \")\")\n            .Replace(\"(\", \"(\")\n\
    \            .Replace(\")\", \")\")\n            .Replace(\"(\", \"(\")\n    \
    \        .Replace(\")\", \")\")\n            .Replace(\"(\", \"(\")\n        \
    \    .Replace(\")\", \")\")\n            .Replace(\"(\", \"(\")\n            .Replace(\"\
    )\", \")\")\n            .Replace(\"(\", \"(\")\n            .Replace(\")\", \"\
    )\")\n            .Replace(\"(\", \"(\")\n            .Replace(\")\", \")\")\n\
    \            .Replace(\"(\", \"(\")\n            .Replace(\")\", \")\")\n    \
    \        .Replace(\"(\", \"(\")\n            .Replace(\")\", \")\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptj8x3rmm.cs(83,27): error CS1010: Newline in constant

    /tmp/tmptj8x3rmm.cs(83,29): error CS1026: ) expected

    /tmp/tmptj8x3rmm.cs(83,29): error CS1002: ; expected

    '
  timestamp: 1660008856
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var openingBrackets = new List<char>();\n\
    \        var closingBrackets = new List<char>();\n        foreach (var bracket\
    \ in brackets) {\n            switch (bracket) {\n                case '(':\n\
    \                    openingBrackets.Add('(');\n                    closingBrackets.Add(')');\n\
    \                    break;\n                case ')':\n                    openingBrackets.Add(')');\n\
    \                    closingBrackets.Add('(');\n                    break;\n \
    \               default:\n                    openingBrackets.Add(bracket);\n\
    \                    closingBrackets.Add(bracket);\n                    break;\n\
    \            }\n        }\n        if (openingBrackets.Count == closingBrackets.Count\
    \ &&\n            openingBrackets.Count == openingBrackets.Distinct().Count())\
    \ {\n            return true;\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <71aacd4eee5b42908af096fec3aaa848>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <71aacd4eee5b42908af096fec3aaa848>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008857
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // The first index of the brackets\
    \ string must be the opening bracket.\n        if (brackets.Length == 0) return\
    \ false;\n        // The closing bracket must follow the opening bracket.\n  \
    \      else if (brackets[brackets.Length - 1] != ')') return false;\n\n      \
    \  var openBrackets = brackets.Substring(0, brackets.Length - 1);\n        var\
    \ closeBrackets = brackets.Substring(brackets.Length - 1, 1);\n\n        if (openBrackets\
    \ != closeBrackets) return false;\n\n        // Every pair of brackets are \"\
    balanced\", but only if the first is \"open\" and last is \"closed\".\n      \
    \  // >>> CorrectBracketing((\"(\"))\n        // (false)\n        // >>> CorrectBracketing((\"\
    ()\"))\n        // (true)\n        // >>> CorrectBracketing((\"(()())\"))\n  \
    \      // (true)\n        // >>> CorrectBracketing((\")(()\"))\n        // (false)\n\
    \        var openBracket = openBrackets.IndexOf('(');\n        var closeBracket\
    \ = closeBrackets.IndexOf(')');\n        if (openBracket < 0 || closeBracket <\
    \ 0) return false;\n\n        var openBracketPosition = openBracket;\n       \
    \ var closeBracketPosition = closeBracket;\n        // The open bracket is found\
    \ one position prior to the opening bracket.\n        while (openBracketPosition\
    \ > -1 && closeBracketPosition < openBracketPosition)\n        {\n           \
    \ if (openBrackets.Substring(openBracketPosition, 1) != closeBrackets.Substring(closeBracketPosition,\
    \ 1)) return false;\n            openBracketPosition--;\n            closeBracketPosition++;\n\
    \        }\n\n        // The closing bracket is found one position after the closing\
    \ bracket.\n        while (openBracketPosition < closeBracketPosition)\n     \
    \   {\n            if (openBrackets.Substring(openBracketPosition, 1) != closeBrackets.Substring(closeBracketPosition,\
    \ 1)) return false;\n            openBracketPosition++;\n            closeBracketPosition++;\n\
    \        }\n\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a336f9da6808478bb7c4cbe17234bfca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a336f9da6808478bb7c4cbe17234bfca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008857
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Stack<string> stack = new Stack<string>();\n\
    \        bool result = true;\n        foreach (string s in brackets.Split('('))\
    \ {\n            string openingBracket = s;\n            if (openingBracket ==\
    \ \"()\")\n                openingBracket = \"()\";\n            else if (openingBracket\
    \ == \"[]\")\n                openingBracket = \"[]\";\n            else if (openingBracket\
    \ == \"{}\")\n                openingBracket = \"{}\";\n            else if (openingBracket\
    \ == \"([])\")\n                openingBracket = \"([])\";\n            else if\
    \ (openingBracket == \"({})\")\n                openingBracket = \"({})\";\n \
    \           else if (openingBracket == \"{([])}\")\n                openingBracket\
    \ = \"{([])}\";\n            else if (openingBracket == \"{({})}\")\n        \
    \        openingBracket = \"{({})}\";\n            else if (openingBracket ==\
    \ \"({})[]\")\n                openingBracket = \"({})[]\";\n            else\
    \ if (openingBracket == \"([]){}\")\n                openingBracket = \"([]){}\"\
    ;\n            else if (openingBracket == \"({}){}\")\n                openingBracket\
    \ = \"({}){}\";\n            else if (openingBracket == \"{({})[]}\")\n      \
    \          openingBracket = \"{({})[]}\";\n            else if (openingBracket\
    \ == \"{([]){}}\")\n                openingBracket = \"{([]){}}\";\n         \
    \   else if (openingBracket == \"{({}){}}\")\n                openingBracket =\
    \ \"{({}){}}\";\n            else if (openingBracket == \"{([]){}[]}\")\n    \
    \            openingBracket = \"{([]){}[]}\";\n            else if (openingBracket\
    \ == \"{([]){}{}}\")\n                openingBracket = \"{([]){}{}}\";\n     \
    \       else if (openingBracket == \"{({})[][]}\")\n                openingBracket\
    \ = \"{({})[][]}\";\n            else if (openingBracket == \"{({})[]{}}\")\n\
    \                openingBracket = \"{({})[]{}}\";\n            else if (openingBracket\
    \ == \"{({}){}[]}\")\n                openingBracket = \"{({}){}[]}\";\n     \
    \       else if (openingBracket == \"{({}){}{}}\")\n                openingBracket\
    \ = \"{({}){}{}}\";\n            else if (openingBracket == \"{({}){}[][]}\")\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfz1rrd_p.cs(62,55): error CS1525: Invalid expression term ''}''

    /tmp/tmpfz1rrd_p.cs(62,55): error CS1002: ; expected

    /tmp/tmpfz1rrd_p.cs(64,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpfz1rrd_p.cs(79,2): error CS1513: } expected

    '
  timestamp: 1660008856
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        string s = brackets;\n       \
    \ var stack = new Stack<char>();\n        foreach (char c in s) {\n          \
    \  if (c == '(') {\n                stack.Push(c);\n            }\n          \
    \  else if (c == ')') {\n                if (stack.Peek() != '(') {\n        \
    \            return false;\n                }\n                stack.Pop();\n\
    \            }\n        }\n        return stack.Count == 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Stack empty.\n\
    \  at System.Collections.Generic.Stack`1[T].Peek () [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CorrectBracketing (System.String brackets) [0x00040] in <736048b7bdcb4e388e5eb62b474dd79c>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00041] in <736048b7bdcb4e388e5eb62b474dd79c>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Stack\
    \ empty.\n  at System.Collections.Generic.Stack`1[T].Peek () [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CorrectBracketing (System.String brackets) [0x00040] in <736048b7bdcb4e388e5eb62b474dd79c>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00041] in <736048b7bdcb4e388e5eb62b474dd79c>:0\
    \ \n"
  stdout: ''
  timestamp: 1660008857
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets.Length <= 1)\n  \
    \          return false;\n        Stack<char> openStack = new Stack<char>();\n\
    \        Stack<char> closeStack = new Stack<char>();\n        for (int i = 1;\
    \ i < brackets.Length; i++) {\n            char current = brackets[i];\n     \
    \       if (current == '(') {\n                openStack.Push(current);\n    \
    \        } else if (current == ')') {\n                if (openStack.Count !=\
    \ 0) {\n                    char opening = openStack.Pop();\n                \
    \    if (opening != '(')\n                        return false;\n            \
    \        closeStack.Push(current);\n                }\n            } else { //\
    \ brackets are always in pairs unless they are empty\n                if (openStack.Count\
    \ != 0) {\n                    char opening = openStack.Pop();\n             \
    \       if (opening != '(')\n                        return false;\n         \
    \           openStack.Push(current);\n                } else {\n             \
    \       return false;\n                }\n            }\n        }\n        //\
    \ if the stack contains closing brackets, but no opening brackets, \n        //\
    \ then we haven't found all the brackets in the string.\n        if (closeStack.Count\
    \ != openStack.Count)\n            return false;\n        // if we haven't made\
    \ it this far, then we have an opening and a closing \n        // bracket in the\
    \ string. Now the fun part, if we have multiple \n        // opening brackets,\
    \ then we can just keep popping them off the stack, \n        // until we run\
    \ into a different opening bracket.\n        string currentString = openStack.Pop()\
    \ + \"(\" + closeStack.Pop();\n        while (openStack.Count > 0) {\n       \
    \     currentString += openStack.Pop() + \"(\" + closeStack.Pop();\n        }\n\
    \        if (currentString != brackets)\n            return false;\n        return\
    \ true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Stack empty.\n\
    \  at System.Collections.Generic.Stack`1[T].Pop () [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CorrectBracketing (System.String brackets) [0x00119] in <600577b2dce14850ac72744432585848>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <600577b2dce14850ac72744432585848>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Stack\
    \ empty.\n  at System.Collections.Generic.Stack`1[T].Pop () [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CorrectBracketing (System.String brackets) [0x00119] in <600577b2dce14850ac72744432585848>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <600577b2dce14850ac72744432585848>:0\
    \ \n"
  stdout: ''
  timestamp: 1660008857
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Stack<char> stack = new Stack<char>();\n\
    \        StringBuilder sb = new StringBuilder(brackets);\n        while (sb.Length\
    \ > 0) {\n            char c = sb.Remove(0, 1).ToString();\n            if (stack.Count\
    \ == 0 || (c == ')' && stack.Peek() != '(')) {\n                stack.Push(c);\n\
    \            }\n            else if (c == '(' && stack.Count > 0) {\n        \
    \        stack.Pop();\n            }\n            else {\n                return\
    \ false;\n            }\n        }\n        return stack.Count == 0;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj7ynum1b.cs(23,22): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    '
  timestamp: 1660008857
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null || !brackets.Any())\
    \ {\n            return false;\n        }\n        var openBrackets = brackets.Where(x\
    \ => x == '(').ToList();\n        var closeBrackets = brackets.Where(x => x ==\
    \ ')').ToList();\n        if (openBrackets.Count != closeBrackets.Count) {\n \
    \           return false;\n        }\n        var stack = new Stack<bool>();\n\
    \        foreach (var openBracket in openBrackets) {\n            if (!stack.Push(openBracket))\
    \ {\n                return false;\n            }\n        }\n        foreach\
    \ (var closeBracket in closeBrackets) {\n            if (!stack.TryPop(closeBracket))\
    \ {\n                return false;\n            }\n        }\n        return stack.Count\
    \ == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppk8qayar.cs(30,29): error CS1503: Argument 1: cannot convert from ''char''
    to ''bool''

    /tmp/tmppk8qayar.cs(30,17): error CS0023: Operator ''!'' cannot be applied to
    operand of type ''void''

    /tmp/tmppk8qayar.cs(35,31): error CS1620: Argument 1 must be passed with the ''out''
    keyword

    '
  timestamp: 1660008857
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null) {\n    \
    \        throw new ArgumentNullException(\"brackets\");\n        }\n        if\
    \ (brackets.Length == 0) {\n            return false;\n        }\n        Stack<char>\
    \ stack = new Stack<char>();\n        Stack<char> openingStack = new Stack<char>();\n\
    \        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i]\
    \ == '(') {\n                openingStack.Push(brackets[i]);\n            } else\
    \ {\n                while (openingStack.Count > 0) {\n                    if\
    \ (brackets[i] == ')') {\n                        char lastChar = openingStack.Pop();\n\
    \                        if (lastChar == ')') {\n                            if\
    \ (openingStack.Count == 0) {\n                                return true;\n\
    \                            }\n                            break;\n         \
    \               }\n                    } else {\n                        stack.Push(brackets[i]);\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbf201d8722a479eb82e73a12a7cc2aa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbf201d8722a479eb82e73a12a7cc2aa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008857
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // For each opening bracket\n\
    \        foreach (char openingBracket in brackets.Where(char.IsLetter)) {\n  \
    \          // Get the corresponding closing bracket.\n            char correspondingClosingBracket\
    \ = brackets[brackets.IndexOf(openingBracket) + 1];\n            // If the brackets\
    \ don't match\n            if (openingBracket != correspondingClosingBracket)\
    \ {\n                // then return false\n                return false;\n   \
    \         }\n        }\n        // If it got here then brackets are okay\n   \
    \     return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ec4aaba5fc774660bc4d2a8100db706b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ec4aaba5fc774660bc4d2a8100db706b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008857
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets.Length <= 1)\n  \
    \          return true;\n        \n        int openBracket = 1;\n        int closeBracket\
    \ = 0;\n        int opened = 0;\n        int closed = 0;\n        int i = 0;\n\
    \        while (i < brackets.Length) {\n            char c = brackets[i];\n  \
    \          i++;\n            if (c == '(')\n                openBracket++;\n \
    \           else if (c == ')')\n                closeBracket++;\n            else\
    \ if (c == '(')\n                openBracket++;\n            else if (c == ')')\n\
    \                closeBracket++;\n            else if (c == '(') {\n         \
    \       opened++;\n            } else if (c == ')') {\n                closed++;\n\
    \            }\n            \n            if (opened != closed || (opened == 0\
    \ && closeBracket == 0)) {\n                return false;\n            }\n   \
    \     }\n        \n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <91833c115dd94cbbab815ffb20a23b82>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <91833c115dd94cbbab815ffb20a23b82>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008857
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Stack<char> openingBrackets =\
    \ new Stack<char>();\n        Stack<char> closingBrackets = new Stack<char>();\n\
    \        foreach (char c in brackets) {\n            if (c == '(')\n         \
    \       openingBrackets.Push(c);\n            else if (c == ')')\n           \
    \     closingBrackets.Push(c);\n            else if (openingBrackets.Count > 0)\n\
    \                if (c == openingBrackets.Peek())\n                    openingBrackets.Pop();\n\
    \                else\n                    return false;\n            else if\
    \ (closingBrackets.Count > 0)\n                if (c == closingBrackets.Peek())\n\
    \                    closingBrackets.Pop();\n                else\n          \
    \          return false;\n            else\n                return false;\n  \
    \      }\n        return openingBrackets.Count == closingBrackets.Count;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d3326c1123e34c21948e7b16dffd3320>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d3326c1123e34c21948e7b16dffd3320>:0 \n"
  stdout: ''
  timestamp: 1660008857
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // we start by counting how many\
    \ brackets are in the string, then\n        // iterate over each bracket, checking\
    \ to see if it matches the string length\n        int count = brackets.Length;\n\
    \        for (int i = 0; i < count; i++) {\n            // check if i'th char\
    \ is the same as the ith opening bracket\n            if (brackets[i] == '(')\
    \ {\n                if (brackets[i + 1] == '(') {\n                    count--;\n\
    \                }\n            }\n            // check if i'th char is the same\
    \ as the ith closing bracket\n            if (brackets[i] == ')') {\n        \
    \        if (brackets[i + 1] == ')') {\n                    count--;\n       \
    \         }\n            }\n        }\n        // if we counted the number of\
    \ open brackets, it must be zero\n        return count == 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.CorrectBracketing (System.String brackets)\
    \ [0x00047] in <fa1411f26fa749ddae46c65f53284c13>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <fa1411f26fa749ddae46c65f53284c13>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of\
    \ the array.\n  at Problem.CorrectBracketing (System.String brackets) [0x00047]\
    \ in <fa1411f26fa749ddae46c65f53284c13>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <fa1411f26fa749ddae46c65f53284c13>:0 \n"
  stdout: ''
  timestamp: 1660008857
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Stack<string> stack = new Stack<string>();\n\
    \n        for (int i = 0; i < brackets.Length; i++) {\n            // if brackets[i]\
    \ is a left bracket, push it onto the stack.\n            if (brackets[i] == \"\
    (\") stack.Push(brackets.Substring(i + 1, 1));\n\n            // if brackets[i]\
    \ is a right bracket, pop from the stack.\n            if (brackets[i] == \")\"\
    ) if (!stack.Any()) return false;\n\n            // if brackets[i] is a left bracket\
    \ at the top of the stack, pop the\n            // stack.\n            if (brackets[i]\
    \ == \"(\" && stack.Count > 0) {\n                string popped = stack.Pop();\n\
    \                if (popped != brackets[i])\n                    return false;\n\
    \            }\n\n            // if brackets[i] is a right bracket at the top\
    \ of the stack,\n            // push the stack.\n            if (brackets[i] ==\
    \ \")\" && stack.Count > 0) {\n                string pushed = stack.Pop();\n\
    \                stack.Add(pushed);\n            }\n\n            // if brackets[i]\
    \ is a left bracket in the stack, but no right bracket,\n            // return\
    \ false.\n            if (brackets[i] == \"(\" && stack.Count == 0) {\n      \
    \          return false;\n            }\n\n            // if brackets[i] is a\
    \ right bracket in the stack, but no left bracket,\n            // return false.\n\
    \            if (brackets[i] == \")\" && stack.Count == 0) {\n               \
    \ return false;\n            }\n        }\n\n        // if every opening bracket\
    \ has a corresponding closing bracket, return true.\n        if (stack.Any())\
    \ return true;\n        else return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj1j9rj6p.cs(24,17): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmpj1j9rj6p.cs(27,17): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmpj1j9rj6p.cs(31,17): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmpj1j9rj6p.cs(33,21): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''string'' and ''char''

    /tmp/tmpj1j9rj6p.cs(39,17): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmpj1j9rj6p.cs(41,23): error CS1061: ''Stack<string>'' does not contain a
    definition for ''Add'' and no accessible extension method ''Add'' accepting a
    first argument of type ''Stack<string>'' could be found (are you missing a using
    directive or an assembly reference?)

    /tmp/tmpj1j9rj6p.cs(46,17): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmpj1j9rj6p.cs(52,17): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    '
  timestamp: 1660008857
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Regex r = new Regex(\"[(]+\");\n\
    \        return brackets.Count(x => r.IsMatch(x)) == brackets.Count(x => r.IsMatch(x)\
    \ == false);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfj8tr7vm.cs(20,9): error CS0246: The type or namespace name ''Regex''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpfj8tr7vm.cs(20,23): error CS0246: The type or namespace name ''Regex''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660008857
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // find all the brackets in the\
    \ string.\n        List<char> openingBrackets = new List<char>();\n        foreach\
    \ (var c in brackets) {\n            if (c == '(') {\n                openingBrackets.Add('(');\n\
    \            }\n            else if (c == ')') {\n                if (openingBrackets.Count\
    \ == 0) {\n                    return false;\n                }\n            \
    \    else {\n                    openingBrackets.RemoveAt(openingBrackets.Count\
    \ - 1);\n                }\n            }\n            else {\n              \
    \  if (openingBrackets.Count > 0) {\n                    return false;\n     \
    \           }\n            }\n        }\n        if (openingBrackets.Count !=\
    \ 0) {\n            return false;\n        }\n        else {\n            return\
    \ true;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008857
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Debug.Assert(!string.IsNullOrWhiteSpace(brackets));\n\
    \        foreach (char c in brackets) {\n            if (c != '(' && c != ')')\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4e36d49d5101480896079b32e9271c88>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4e36d49d5101480896079b32e9271c88>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008857
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int openingBracketCount = 0;\n\
    \        int closingBracketCount = 0;\n        foreach (char c in brackets) {\n\
    \            switch (c) {\n            case '(':\n                openingBracketCount++;\n\
    \                break;\n            case ')':\n                closingBracketCount++;\n\
    \                break;\n            case '(':\n            case ')':\n      \
    \          break;\n            default:\n                return false;\n     \
    \       }\n        }\n        return closingBracketCount - openingBracketCount\
    \ == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2pchqvpe.cs(30,13): error CS0152: The switch statement contains multiple
    cases with the label value ''(''

    /tmp/tmp2pchqvpe.cs(31,13): error CS0152: The switch statement contains multiple
    cases with the label value '')''

    '
  timestamp: 1660008857
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // For every opening bracket,\
    \ find its corresponding closing bracket.\n        foreach (var openBracket in\
    \ brackets.Substring(0, brackets.IndexOf(\"(\")))\n        {\n            if (brackets.IndexOf(openBracket)\
    \ == -1)\n                return false;\n        }\n        // For every closing\
    \ bracket, find its corresponding opening bracket.\n        foreach (var closeBracket\
    \ in brackets.Substring(brackets.IndexOf(\"(\") + 1, brackets.IndexOf(\")\") -\
    \ 1))\n        {\n            if (brackets.IndexOf(closeBracket) == -1)\n    \
    \            return false;\n        }\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <248874484cdd46fba84c6205fb73fd4a>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Length cannot be less than zero.\nParameter\
    \ name: length\n  at System.String.Substring (System.Int32 startIndex, System.Int32\
    \ length) [0x00031] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CorrectBracketing\
    \ (System.String brackets) [0x0005d] in <248874484cdd46fba84c6205fb73fd4a>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00054] in <248874484cdd46fba84c6205fb73fd4a>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Length\
    \ cannot be less than zero.\nParameter name: length\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x00031] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CorrectBracketing (System.String brackets) [0x0005d] in <248874484cdd46fba84c6205fb73fd4a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00054] in <248874484cdd46fba84c6205fb73fd4a>:0\
    \ \n"
  stdout: ''
  timestamp: 1660008857
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if(brackets.Length < 1) return\
    \ false;\n        HashSet<char> openingBrackets = new HashSet<char>();\n     \
    \   foreach(char c in brackets) {\n            if(openingBrackets.Contains(c))\
    \ return false;\n            openingBrackets.Add(c);\n        }\n        for(int\
    \ i = brackets.Length-1; i >= 0; i--) {\n            char c = brackets[i];\n \
    \           if(!openingBrackets.Contains(c)) return false;\n            openingBrackets.Remove(c);\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ca5c2880074f452a9a6d300a65c8f7f3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ca5c2880074f452a9a6d300a65c8f7f3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008857
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // If the string has zero length,\
    \ then it is not bracketed.\n        if (brackets == null)\n            return\
    \ false;\n\n        // Convert string to a list of characters.\n        var chars\
    \ = brackets.ToCharArray();\n\n        // Loop through the characters.\n     \
    \   for (var index = 0; index < chars.Length; ++index) {\n\n            // If\
    \ the current character is not a bracket (i.e., is the opening bracket),\n   \
    \         // then return false.\n            if (chars[index] != '(')\n      \
    \          return false;\n\n            // If the current character is the opening\
    \ bracket, then increment the index\n            // by one. Otherwise, decrement\
    \ the index by one.\n            ++index;\n            --index;\n\n          \
    \  // If index is zero, then we've found the closing bracket.\n            if\
    \ (index == 0)\n                return true;\n        }\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe35f85838ab4c0482d76187a335ce32>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe35f85838ab4c0482d76187a335ce32>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008857
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        List<char> list = brackets.ToList();\n\
    \        StringBuilder newlist = new StringBuilder();\n        foreach (char c\
    \ in list) {\n            if (c == ')')\n                newlist.Append(')');\n\
    \            if (c == '(')\n                newlist.Append('(');\n        }\n\
    \        if (newlist.ToString() == brackets)\n            return true;\n     \
    \   else\n            return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <711539f3d8934caa8d8afc15425080e9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <711539f3d8934caa8d8afc15425080e9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008857
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var openingBrackets = new Stack<string>();\n\
    \        var closingBrackets = new Stack<string>();\n        string unbracketedString\
    \ = brackets;\n\n        foreach (char bracketChar in unbracketedString) {\n \
    \           switch (bracketChar) {\n                case '(':\n              \
    \      if (openingBrackets.Count != 0) {\n                        return false;\n\
    \                    }\n                    openingBrackets.Push(bracketChar);\n\
    \                    break;\n                case ')':\n                    if\
    \ (closingBrackets.Count != 0) {\n                        return false;\n    \
    \                }\n                    closingBrackets.Push(bracketChar);\n \
    \                   break;\n                default:\n                    if (openingBrackets.Count\
    \ != 0 && closingBrackets.Count != 0) {\n                        if (openingBrackets.Peek()\
    \ != closingBrackets.Peek()) {\n                            return false;\n  \
    \                      }\n                        openingBrackets.Pop();\n   \
    \                     closingBrackets.Pop();\n                    }\n        \
    \            break;\n            }\n        }\n        if (openingBrackets.Count\
    \ != 0) {\n            return false;\n        }\n        return true;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph6vqe6ty.cs(30,42): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmph6vqe6ty.cs(36,42): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1660008857
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int openingCount = brackets.Count(x\
    \ => x == '(');\n        for (int i = 0; i < openingCount; i++) {\n          \
    \  int closingCount = brackets.Count(x => x == ')');\n            if (i != closingCount)\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <973e2540319940be978b050a0e534845>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <973e2540319940be978b050a0e534845>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008858
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (string.IsNullOrEmpty(brackets))\n\
    \            return true;\n\n        int leftCount = 0;\n        for (int i =\
    \ 0; i < brackets.Length; i++) {\n            if (brackets[i] == '(')\n      \
    \          leftCount++;\n            else if (brackets[i] == ')')\n          \
    \      leftCount--;\n            else\n                return false;\n       \
    \     if (leftCount <= 0)\n                return true;\n        }\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <07e9c6497be34181a94bbca52d0c9101>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <07e9c6497be34181a94bbca52d0c9101>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008857
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        HashSet<string> openingBrackets\
    \ = new HashSet<string>();\n        HashSet<string> closingBrackets = new HashSet<string>();\n\
    \        foreach (char c in brackets) {\n            if ('(' == c) {\n       \
    \         openingBrackets.Add(c.ToString());\n            } else if (')' == c)\
    \ {\n                closingBrackets.Add(c.ToString());\n            }\n     \
    \   }\n        if (openingBrackets.Count != closingBrackets.Count) {\n       \
    \     return false;\n        }\n        // the closing brackets don't count for\
    \ the total number of opening brackets\n        if (openingBrackets.Count < closingBrackets.Count)\
    \ {\n            for (int i = 0; i < openingBrackets.Count; i++) {\n         \
    \       string openingBracket = openingBrackets.ElementAt(i);\n              \
    \  string closingBracket = closingBrackets.ElementAt(i);\n                if (!closingBracket.StartsWith(openingBracket))\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <99bc932cb0554eef955dd12bfab75776>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <99bc932cb0554eef955dd12bfab75776>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008858
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Stack<string> stack = new Stack<string>();\n\
    \        bool ret = true;\n        foreach (var symbol in brackets) {\n      \
    \      switch (symbol) {\n                case \"(\":\n                    stack.Push(symbol);\n\
    \                    break;\n                case \")\":\n                   \
    \ stack.Pop();\n                    break;\n                default:\n       \
    \             // not a left bracket.\n                    if (stack.Count > 0)\
    \ {\n                        // a right bracket.\n                        ret\
    \ = !ret; // true iff not all left brackets have been closed.\n              \
    \      }\n                    break;\n            }\n        }\n        return\
    \ ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf19efg2q.cs(24,22): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpf19efg2q.cs(25,32): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpf19efg2q.cs(27,22): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    '
  timestamp: 1660008857
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // Return false if there is no\
    \ opening bracket.\n        if (string.IsNullOrEmpty(brackets)) {\n          \
    \  return false;\n        }\n        // Count the number of opening brackets.\n\
    \        int openingBrackets = brackets.Count(c => c == '(');\n        // Count\
    \ the number of closing brackets.\n        int closingBrackets = brackets.Count(c\
    \ => c == ')');\n        // If the number of opening brackets is greater than\
    \ the number of closing brackets, return false.\n        if (openingBrackets >\
    \ closingBrackets) {\n            return false;\n        }\n        // Otherwise,\
    \ return true.\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <72513acc3a244b22918ce64914581646>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <72513acc3a244b22918ce64914581646>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008858
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var bracketsCounter = 0;\n   \
    \     for(int i = 0; i < brackets.Length; i++) {\n            if (brackets[i]\
    \ == '(') {\n                bracketsCounter++;\n            }\n            if\
    \ (brackets[i] == ')') {\n                bracketsCounter--;\n            }\n\
    \        }\n        return bracketsCounter == 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <86d08287f9b342e08dbaaa511ef7dd5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <86d08287f9b342e08dbaaa511ef7dd5f>:0 \n"
  stdout: ''
  timestamp: 1660008858
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var openingBrackets = brackets.Split('(');\n\
    \        if (openingBrackets.Length != 2) return false;\n\n        var closingBrackets\
    \ = openingBrackets[1].Split(')');\n        if (closingBrackets.Length != 2) return\
    \ false;\n\n        if (openingBrackets[0] != closingBrackets[0]) return false;\n\
    \n        // if every opening bracket has a corresponding closing bracket.\n \
    \       // >>> ((\"(\", \"(\"))\n        // false\n        // >>> ((\"(\", \"\
    ()\"))\n        // true\n        // >>> ((\"(\", \"(()())\"))\n        // true\n\
    \        // >>> ((\"(\", \"(())\"))\n        // false\n        var opening = openingBrackets[0];\n\
    \        var closing = closingBrackets[0];\n        for (int i = 1; i < opening.Length;\
    \ i++) {\n            if (opening != closing) return false;\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <033ab34f8df5481685db80fef7b131d0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <033ab34f8df5481685db80fef7b131d0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008858
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        bool isCorrect = true;\n     \
    \   for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] !=\
    \ '(') {\n                isCorrect = false;\n            }\n            if (brackets[i]\
    \ == ')' && brackets[i + 1] != ')') {\n                isCorrect = false;\n  \
    \          }\n            if (brackets[i] == ')') {\n                i++;\n  \
    \          }\n        }\n        return isCorrect;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.CorrectBracketing (System.String brackets)\
    \ [0x00029] in <63c018ed2f03439fb050c1e6b22b6ee2>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <63c018ed2f03439fb050c1e6b22b6ee2>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of\
    \ the array.\n  at Problem.CorrectBracketing (System.String brackets) [0x00029]\
    \ in <63c018ed2f03439fb050c1e6b22b6ee2>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <63c018ed2f03439fb050c1e6b22b6ee2>:0 \n"
  stdout: ''
  timestamp: 1660008858
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var opening = brackets.Split('(');\n\
    \        var closing = brackets.Split(')');\n        if (opening.Length == 0)\
    \ return false;\n        if (closing.Length == 0) return true;\n        var openingCount\
    \ = opening.Length;\n        var closingCount = closing.Length;\n\n        var\
    \ currentOpening = 0;\n        var currentClosing = 0;\n        for (int i = 0;\
    \ i < opening.Length; i++) {\n            int next = opening[i];\n           \
    \ if (next == '(') {\n                currentOpening++;\n            }\n     \
    \       else if (next == ')') {\n                currentClosing++;\n         \
    \   }\n\n            if (currentClosing != currentOpening) {\n               \
    \ return false;\n            }\n        }\n        for (int i = 0; i < closing.Length;\
    \ i++) {\n            int next = closing[i];\n            if (next == '(') {\n\
    \                currentClosing++;\n            }\n            else if (next ==\
    \ ')') {\n                currentOpening++;\n            }\n            if (currentOpening\
    \ != currentClosing) {\n                return false;\n            }\n       \
    \ }\n\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqx4j9_go.cs(30,24): error CS0029: Cannot implicitly convert type ''string''
    to ''int''

    /tmp/tmpqx4j9_go.cs(43,24): error CS0029: Cannot implicitly convert type ''string''
    to ''int''

    '
  timestamp: 1660008857
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int open = 0;\n        int close\
    \ = 0;\n        foreach (char c in brackets) {\n            if (c == '(') {\n\
    \                open += 1;\n            } else if (c == ')') {\n            \
    \    close += 1;\n            } else {\n                if (open > close) return\
    \ false;\n                open = 0;\n                close = 0;\n            }\n\
    \        }\n        return open == close;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8c59ad17b5354293a419fef1d78ab88c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8c59ad17b5354293a419fef1d78ab88c>:0 \n"
  stdout: ''
  timestamp: 1660008858
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        List<string> openingBrackets =\
    \ brackets.Split('(', '\\\\').ToList();\n        List<string> closingBrackets\
    \ = brackets.Split('\\\\', ')').ToList();\n        return openingBrackets.All(openingBracket\
    \ => closingBrackets.Contains(openingBracket));\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <445e662d4acf4a09b319fe964e5b84b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <445e662d4acf4a09b319fe964e5b84b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008858
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets.Length <= 1) return\
    \ true;\n        int openings = 0;\n        int closings = 0;\n        for(int\
    \ i = 0; i < brackets.Length; i++) {\n            char c = brackets[i];\n    \
    \        switch (c) {\n                case '(':\n                    openings++;\n\
    \                    break;\n                case ')':\n                    closings++;\n\
    \                    break;\n                case '{':\n                case '}':\n\
    \                case '[':\n                case ']':\n                    openings++;\n\
    \                    break;\n                case ',':\n                    closings++;\n\
    \                    break;\n                default:\n                    break;\n\
    \            }\n        }\n        if (openings != closings) return false;\n \
    \       return true;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c44b965d54be42fea3a0c330030f6815>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c44b965d54be42fea3a0c330030f6815>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008858
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Debug.Assert(brackets.Length >\
    \ 0);\n        Debug.Assert(brackets[0] == '(');\n        Debug.Assert(brackets[brackets.Length\
    \ - 1] == ')');\n        Debug.Assert(brackets.Length % 2 == 1);\n        Debug.Assert(brackets.Length\
    \ <= 256);\n\n        int count = 0;\n        bool inBrackets = false;\n     \
    \   for (int i = 0; brackets[i] != '\\0'; i++) {\n            int j = i;\n   \
    \         while (j < brackets.Length && brackets[j] == brackets[i]) j++;\n   \
    \         if (j == brackets.Length) break;\n\n            bool isOpen = brackets[i]\
    \ == '(';\n            bool isClose = brackets[i] == ')';\n            if (isOpen\
    \ && !inBrackets) {\n                inBrackets = true;\n                count++;\n\
    \            }\n            if (isClose && !inBrackets) {\n                inBrackets\
    \ = false;\n                count++;\n            }\n            if (isOpen &&\
    \ isClose) {\n                Debug.Assert(count == 1);\n            }\n     \
    \   }\n        return count == brackets.Length / 2;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.CorrectBracketing (System.String\
    \ brackets) [0x00000] in <24b66fbca9904fddb77143b864703c44>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00000] in <24b66fbca9904fddb77143b864703c44>:0 \n\
    Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,\
    \ System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.CorrectBracketing (System.String\
    \ brackets) [0x00000] in <24b66fbca9904fddb77143b864703c44>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00000] in <24b66fbca9904fddb77143b864703c44>:0 \n\
    Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,\
    \ System.String detailMessage) [0x00000] in <4932fe"
  stdout: ''
  timestamp: 1660008858
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        return (brackets != null) && brackets.Trim().Count()\
    \ > (int)brackets.Trim().Length/2;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14f98e240680453ca4a97936768749d8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14f98e240680453ca4a97936768749d8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008858
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // The stack is used to track\
    \ the current position in the string.\n        Stack<char> opening = new Stack<char>();\n\
    \        // The stack is used to track the current position in the string.\n \
    \       Stack<char> closing = new Stack<char>();\n        // Keep track of the\
    \ length of the string.\n        int length = 0;\n        for (int i = 0; i <\
    \ brackets.Length; i++) {\n            // If the string is empty, return true.\n\
    \            if (length == 0) {\n                return true;\n            }\n\
    \            // If the current character is the closing bracket.\n           \
    \ if (brackets[i] == '(') {\n                // Add the opening bracket to the\
    \ stack.\n                opening.Push(brackets[i]);\n                // Increment\
    \ the length of the string by 1.\n                length++;\n                //\
    \ If the stack is now empty, return false.\n                if (closing.Count\
    \ == 0) {\n                    return false;\n                }\n            }\n\
    \            // If the current character is the opening bracket.\n           \
    \ else if (brackets[i] == ')') {\n                // If the closing bracket is\
    \ still in the stack...\n                if (closing.Contains(brackets[i + 1]))\
    \ {\n                    // Remove the opening bracket from the stack.\n     \
    \               closing.Pop();\n                    // Decrement the length of\
    \ the string by 1.\n                    length--;\n                    // If the\
    \ stack is now empty, return false.\n                    if (closing.Count ==\
    \ 0) {\n                        return false;\n                    }\n       \
    \         }\n                // If the closing bracket is no longer in the stack...\n\
    \                else {\n                    // Return false.\n              \
    \      return false;\n                }\n            }\n        }\n        //\
    \ If we reach this point and all of the brackets are in the stack...\n       \
    \ if (opening.Count == 0 && closing.Count == 0) {\n            // Return true.\n\
    \            return true;\n        }\n        // If neither bracket is in the\
    \ stack then return false.\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4da0970dadbb48a396761245afce55c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4da0970dadbb48a396761245afce55c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008858
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        bool result = true;\n        if\
    \ (brackets == null || !brackets.Any()) return result;\n        foreach (char\
    \ c in brackets) {\n            if (c == '(') result = result && (!brackets.IndexOf('(',\
    \ brackets.IndexOf(c) + 1) || CorrectBracketing(brackets.Substring(brackets.IndexOf(c)\
    \ + 1)));\n            if (c == ')') result = result && (!brackets.IndexOf(')',\
    \ brackets.IndexOf(c) + 1) || CorrectBracketing(brackets.Substring(brackets.IndexOf(c)\
    \ + 1)));\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph06kgdlx.cs(23,47): error CS0023: Operator ''!'' cannot be applied to
    operand of type ''int''

    /tmp/tmph06kgdlx.cs(24,47): error CS0023: Operator ''!'' cannot be applied to
    operand of type ''int''

    '
  timestamp: 1660008858
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets.Length < 1)\n   \
    \         return true;\n        int openBracketIndex = brackets.IndexOf(\"(\"\
    );\n        int closedBracketIndex = brackets.IndexOf(\")\");\n        if (openBracketIndex\
    \ == -1 || closedBracketIndex == -1 || openBracketIndex >= closedBracketIndex)\n\
    \            return true;\n        int openBracketSize = brackets.Count(ch =>\
    \ ch == '(') - 1;\n        int closedBracketSize = brackets.Count(ch => ch ==\
    \ ')') - 1;\n        if (openBracketSize != closedBracketSize)\n            return\
    \ false;\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0c20009041934d368a6c8e33683db169>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0c20009041934d368a6c8e33683db169>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008858
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        char[] bracketArray = brackets.ToCharArray();\n\
    \        foreach (char bracket in bracketArray) {\n            if (bracket ==\
    \ '(') {\n                bool found = false;\n                for (int i = 0;\
    \ i < bracketArray.Length; i++) {\n                    if (bracketArray[i] ==\
    \ ')' && bracketArray[i - 1] != '(') {\n                        bracketArray[i\
    \ - 1] = ')';\n                        found = true;\n                       \
    \ break;\n                    }\n                }\n                if (!found)\n\
    \                    return false;\n            }\n        }\n        return bracketArray.Length\
    \ == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <42a0bc83003a4a499617d7b4c1f487b3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <42a0bc83003a4a499617d7b4c1f487b3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008858
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Stack<string> stack = new Stack<string>();\n\
    \        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i]\
    \ == '(') {\n                stack.Push(brackets[i]);\n            }\n       \
    \     if (brackets[i] == ')') {\n                if (!stack.Any())\n         \
    \           return false;\n                string top = stack.Pop();\n       \
    \         if (top != brackets[i])\n                    return false;\n       \
    \     }\n        }\n        return stack.Count == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf8tarraz.cs(23,28): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpf8tarraz.cs(29,21): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''string'' and ''char''

    '
  timestamp: 1660008858
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets.Length == 0)\n  \
    \          return true;\n        if (brackets.Length == 1)\n            return\
    \ false;\n        int leftCount = 0, rightCount = 0;\n        for (int index =\
    \ 0; index < brackets.Length; index++) {\n            char c = brackets[index];\n\
    \            switch (c) {\n            case '(':\n                leftCount++;\n\
    \                break;\n            case ')':\n                rightCount++;\n\
    \                break;\n            }\n        }\n        if (leftCount == rightCount)\n\
    \            return true;\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f6d7cad49fa484fa7ad1d52e04e9678>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f6d7cad49fa484fa7ad1d52e04e9678>:0 \n"
  stdout: ''
  timestamp: 1660008858
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        return (brackets.Split('(')\n\
    \                        .SelectMany(bracket => bracket.Split(')'))\n        \
    \                .Count() > 1);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bbe5f16de6f042ffb053597a8b299c41>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bbe5f16de6f042ffb053597a8b299c41>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008858
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        List<char> chars = new List<char>();\n\
    \        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i]\
    \ == '(') {\n                chars.Add('(');\n            } else {\n         \
    \       if (!chars.Contains('(')) {\n                    return false;\n     \
    \           }\n            }\n            if (brackets[i] == ')') {\n        \
    \        if (chars.Count > 1) {\n                    if (!chars.Contains(')'))\
    \ {\n                        return false;\n                    }\n          \
    \      } else {\n                    return false;\n                }\n      \
    \      }\n            chars.Add(brackets[i]);\n        }\n        return chars.Count\
    \ == brackets.Length;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <55ebca3b61d14d35a14e4a84cf3b7ed2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <55ebca3b61d14d35a14e4a84cf3b7ed2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008858
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        string left = \"(\";\n       \
    \ string right = \")\";\n        Stack<string> stack = new Stack<string>();\n\
    \        bool ok = true;\n\n        foreach (char c in brackets) {\n         \
    \   if (left == c)\n                stack.Add(left);\n            if (right ==\
    \ c)\n                stack.Add(right);\n            if (stack.Count > 1) {\n\
    \                if (left != stack.Peek()) {\n                    ok = false;\n\
    \                    break;\n                }\n                if (right != stack.Peek())\
    \ {\n                    ok = false;\n                    break;\n           \
    \     }\n            }\n        }\n\n        return ok;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm67qrpvs.cs(26,17): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''string'' and ''char''

    /tmp/tmpm67qrpvs.cs(27,23): error CS1061: ''Stack<string>'' does not contain a
    definition for ''Add'' and no accessible extension method ''Add'' accepting a
    first argument of type ''Stack<string>'' could be found (are you missing a using
    directive or an assembly reference?)

    /tmp/tmpm67qrpvs.cs(28,17): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''string'' and ''char''

    /tmp/tmpm67qrpvs.cs(29,23): error CS1061: ''Stack<string>'' does not contain a
    definition for ''Add'' and no accessible extension method ''Add'' accepting a
    first argument of type ''Stack<string>'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1660008858
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Debug.Assert(brackets.Length %\
    \ 2 == 0);\n        List<char> openings = new List<char>();\n        List<char>\
    \ closings = new List<char>();\n        for (int i = 0; i < brackets.Length; i\
    \ += 2) {\n            char open = brackets[i];\n            char close = brackets[i\
    \ + 1];\n            if (!openings.Contains(open)) {\n                openings.Add(open);\n\
    \            }\n            if (!closings.Contains(close)) {\n               \
    \ closings.Add(close);\n            }\n        }\n        if (openings.Count !=\
    \ closings.Count) {\n            return false;\n        }\n        for (int i\
    \ = 0; i < brackets.Length; i += 2) {\n            char open = brackets[i];\n\
    \            char close = brackets[i + 1];\n            if (open != close) {\n\
    \                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e3a4eec80e41412aa552d9498e98bef4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e3a4eec80e41412aa552d9498e98bef4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008858
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int openBrackets = brackets.Count(char\
    \ => char == '(');\n        int closedBrackets = brackets.Count(char => char ==\
    \ ')');\n        if (openBrackets == closedBrackets) return true;\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnxaxo2ej.cs(20,43): error CS1525: Invalid expression term ''char''

    /tmp/tmpnxaxo2ej.cs(20,48): error CS1003: Syntax error, '','' expected

    /tmp/tmpnxaxo2ej.cs(20,51): error CS1003: Syntax error, '','' expected

    /tmp/tmpnxaxo2ej.cs(20,51): error CS1525: Invalid expression term ''char''

    /tmp/tmpnxaxo2ej.cs(21,45): error CS1525: Invalid expression term ''char''

    /tmp/tmpnxaxo2ej.cs(21,50): error CS1003: Syntax error, '','' expected

    /tmp/tmpnxaxo2ej.cs(21,53): error CS1003: Syntax error, '','' expected

    /tmp/tmpnxaxo2ej.cs(21,53): error CS1525: Invalid expression term ''char''

    '
  timestamp: 1660008858
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        string input = brackets;\n   \
    \     int openBrackets = 0;\n        string openBracketString = \"()\";\n    \
    \    int closingBrackets = 0;\n        string closingBracketString = \"()\";\n\
    \        bool allBracketsMatch = true;\n        int lastOpeningBracket;\n    \
    \    int lastClosingBracket;\n        foreach (char currentChar in input) {\n\
    \            if (openBrackets != closingBrackets) {\n                if (currentChar\
    \ == openBracketString) {\n                    openBrackets++;\n             \
    \   }\n                else {\n                    if (openBracketString == \"\
    ()\") {\n                        allBracketsMatch = false;\n                 \
    \   }\n                    lastOpeningBracket = openBrackets;\n              \
    \      openBrackets = 0;\n                    lastClosingBracket = closingBrackets;\n\
    \                    closingBrackets = 0;\n                }\n            }\n\
    \            else {\n                if (currentChar == closingBracketString)\
    \ {\n                    closingBrackets++;\n                }\n             \
    \   else {\n                    if (closingBracketString == \"()\") {\n      \
    \                  allBracketsMatch = false;\n                    }\n        \
    \            lastOpeningBracket = openBrackets;\n                    openBrackets\
    \ = 0;\n                    lastClosingBracket = closingBrackets;\n          \
    \          closingBrackets = 0;\n                }\n            }\n        }\n\
    \        if (openBrackets != closingBrackets) {\n            allBracketsMatch\
    \ = false;\n        }\n        return allBracketsMatch;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5o7x5tlh.cs(30,21): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmp5o7x5tlh.cs(44,21): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    '
  timestamp: 1660008858
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        string result = \"\";\n      \
    \  int count = 0;\n        foreach (char c in brackets) {\n            result\
    \ += c;\n            if (c == '(') {\n                count++;\n            }\n\
    \            else {\n                count--;\n            }\n            if (count\
    \ == 0) {\n                return result == \"()\";\n            }\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b89a4dfdcfc14cabad8b3bc8764bd7d6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b89a4dfdcfc14cabad8b3bc8764bd7d6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008859
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var result = new bool[brackets.Length];\n\
    \        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i]\
    \ != brackets[brackets.Length - 1 - i]) {\n                result[i] = false;\n\
    \            }\n        }\n        for (int i = 0; i < brackets.Length; i++) {\n\
    \            result[i] = result[i] || brackets[i] == '(' && brackets[brackets.Length\
    \ - 1 - i] == ')';\n        }\n        return result.All(x => x);\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d5ebb907a60840d4890019b5f09680f0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d5ebb907a60840d4890019b5f09680f0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008859
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var openings = new List<string>();\n\
    \        var closings = new List<string>();\n        for (int i = 0; i < brackets.Length;\
    \ i++) {\n            switch (brackets[i]) {\n                case ')':\n    \
    \                closings.Add(brackets.Substring(i + 1, 1));\n               \
    \     break;\n                case '(':\n                    openings.Add(brackets.Substring(i\
    \ + 1, 1));\n                    break;\n                default:\n          \
    \          return false;\n            }\n        }\n        Debug.Assert(openings.Count\
    \ == closings.Count);\n        bool allEqual = openings.All(c => closings.Contains(c));\n\
    \        Debug.Assert(allEqual);\n        return allEqual;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length\
    \ must refer to a location within the string.\nParameter name: length\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CorrectBracketing (System.String brackets) [0x0003a] in <384b49af0c8a4749b4980906664ff8fc>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <384b49af0c8a4749b4980906664ff8fc>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ and length must refer to a location within the string.\nParameter name: length\n\
    \  at System.String.Substring (System.Int32 startIndex, System.Int32 length) [0x0004c]\
    \ in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CorrectBracketing (System.String\
    \ brackets) [0x0003a] in <384b49af0c8a4749b4980906664ff8fc>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <384b49af0c8a4749b4980906664ff8fc>:0 \n"
  stdout: ''
  timestamp: 1660008858
