name: HumanEval_67_fruit_distribution
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // In this task, you will be given a string that represents a number\
  \ of apples and oranges \n    // that are distributed in a basket of fruit this\
  \ basket contains \n    // apples, oranges, and mango fruits. Given the string that\
  \ represents the total number of \n    // the oranges and apples and an integer\
  \ that represent the total number of the fruits \n    // in the basket return the\
  \ number of the mango fruits in the basket.\n    // for examble:\n    // >>> FruitDistribution((\"\
  5 apples and 6 oranges\"), (19L))\n    // (8L)\n    // >>> FruitDistribution((\"\
  0 apples and 1 oranges\"), (3L))\n    // (2L)\n    // >>> FruitDistribution((\"\
  2 apples and 3 oranges\"), (100L))\n    // (95L)\n    // >>> FruitDistribution((\"\
  100 apples and 1 oranges\"), (120L))\n    // (19L)\n    public static long FruitDistribution(string\
  \ s, long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FruitDistribution((\"\
  5 apples and 6 oranges\"), (19L)) == (8L));\n    Debug.Assert(FruitDistribution((\"\
  5 apples and 6 oranges\"), (21L)) == (10L));\n    Debug.Assert(FruitDistribution((\"\
  0 apples and 1 oranges\"), (3L)) == (2L));\n    Debug.Assert(FruitDistribution((\"\
  1 apples and 0 oranges\"), (3L)) == (2L));\n    Debug.Assert(FruitDistribution((\"\
  2 apples and 3 oranges\"), (100L)) == (95L));\n    Debug.Assert(FruitDistribution((\"\
  2 apples and 3 oranges\"), (5L)) == (0L));\n    Debug.Assert(FruitDistribution((\"\
  1 apples and 100 oranges\"), (120L)) == (19L));\n    }\n\n}\n"
completions: ["        long count = 0;\n        long[] arr = FruitDistributionHelper(s);\n\
    \        for (int i = 0; i < n; i++)\n            if (arr[i] != 0) count++;\n\
    \        return count;", "        long apples = 0, oranges = 0;\n        string\
    \ tmp = s;\n        while (tmp.Length > 0) {\n            int num = tmp.IndexOf('\
    \ ');\n            if (num != -1) {\n                apples += Int32.Parse(tmp.Substring(0,\
    \ num));\n                tmp=tmp.Substring(num + 1);\n                oranges\
    \ += Int32.Parse(tmp);\n            }\n            else {\n                apples\
    \ += Int32.Parse(tmp);\n                tmp = \"\";\n                oranges +=\
    \ Int32.Parse(tmp);\n            }\n        }\n        return apples + oranges;",
  "        long result = 0;\n        int nr = s.Count(f => f == 'a');\n        int\
    \ ng = s.Count(f => f == 'o');\n        int sm = s.Count(f => f == 'm');\n   \
    \     bool applesTrue = nr > 0 && nr == ng;\n        bool orangesTrue = nr > 0\
    \ && nr == sm;\n        if (applesTrue && orangesTrue)\n            return nr;\n\
    \        if (applesTrue)\n            result += ng;\n        if (orangesTrue)\n\
    \            result += sm;\n        return result;", "        if (string.IsNullOrWhiteSpace(s))\n\
    \            return 0;\n        s = s.Replace(\",\", \"\");\n        long c =\
    \ 0;\n        bool first = true;\n        long sum = 0;\n        foreach (var\
    \ s in s.Split(' '))\n            if (s.Trim() != \"\")\n                sum =\
    \ sum * 10 + Convert.ToInt64(s);\n        sum = sum * 10;\n        if (sum ==\
    \ 0)\n            return 0;\n        var apples = Convert.ToInt64(s.Substring(0,\
    \ s.IndexOf(' ')));\n        var oranges = Convert.ToInt64(s.Substring(s.IndexOf('\
    \ ') + 1));\n        if (apples + oranges <= n)\n            c = (apples + oranges)\
    \ / n;\n        else\n            c = 100L / n;\n        if (first)\n        \
    \    return apples + (oranges / c);\n        return apples + (oranges / c) + FruitDistribution(s,\
    \ n);", "        if (n == 0) return 0;\n        int apples = s.Count(c => c ==\
    \ 'a');\n        int oranges = s.Count(c => c == 'o');\n        long appleSum\
    \ = apples;\n        long orangeSum = oranges;\n        long sum = appleSum +\
    \ orangeSum;\n        int i = n;\n        while (appleSum > 0 && orangeSum > 0)\
    \ {\n            appleSum -= i;\n            orangeSum -= i;\n            sum\
    \ += i;\n            i += 1;\n        }\n        return sum;", "        if (string.IsNullOrEmpty(s))\
    \ return 0;\n        if (n==0) return 0;\n        var s = Regex.Replace(s, @\"\
    \\s+\", string.Empty);\n        var apples = s.Split(' ').ToList().FirstOrDefault();\n\
    \        var oranges = s.Split(' ').ToList().LastOrDefault();\n        long apples,\
    \ oranges;\n        if (long.TryParse(apples, out apples) && long.TryParse(oranges,\
    \ out oranges)) {\n            return (apples+oranges) / n;\n        }\n     \
    \   return 0;", "        int count = 0;\n        long temp = 0;\n        if (s.Contains(\"\
    oranges\")) {\n            temp = n;\n            count = s.Split(new[] { \" oranges\"\
    \ }, StringSplitOptions.None)[1]\n                .Replace(\" \", String.Empty).Length;\n\
    \        } else if (s.Contains(\"apples\")) {\n            temp = n;\n       \
    \     count = s.Split(new[] { \" apples\" }, StringSplitOptions.None)[1]\n   \
    \             .Replace(\" \", String.Empty).Length;\n        } else {\n      \
    \      temp = n;\n            count = s.Split(new[] { \" oranges\" }, StringSplitOptions.None)[0]\n\
    \                .Replace(\" \", String.Empty).Length;\n        }\n        if\
    \ (count == 0) {\n            return n;\n        }\n        temp = temp / count;\n\
    \        temp = temp % n;\n        return temp;", "        int apples = Int32.Parse(s.Substring(0,\
    \ s.Length - 2));\n        int oranges = Int32.Parse(s.Substring(s.Length - 2,\
    \ s.Length));\n        int mango = 0;\n        if ((apples + oranges) >= 10) {\n\
    \            mango = ((apples + oranges) - 10) * 2;\n        }\n        if (mango\
    \ < n) {\n            mango = n;\n        }\n        apples = 0;\n        oranges\
    \ = 0;\n        return mango;", "        if (s == null || n == 0) return 0;\n\
    \        var str = s.Split(' ');\n        int apples = Convert.ToInt32(str[0]);\n\
    \        int oranges = Convert.ToInt32(str[1]);\n        if (apples > oranges)\
    \ return 0;\n        if (apples < oranges) return 0;\n        int mango = 0;\n\
    \        var arr = s.Split(' ');\n        foreach (var item in arr)\n        {\n\
    \            if (item == \"mango\") mango += n;\n        }\n        return mango;",
  "        Debug.WriteLine(s);\n        Debug.WriteLine(n);\n        int i = 0;\n\
    \        long ret = 0;\n        long l1 = s.Substring(0, s.IndexOf(' ')).Replace(\"\
    apples\", \"1\").Replace(\"oranges\", \"3\");\n        long l2 = s.Substring(0,\
    \ s.IndexOf(' ')).Replace(\"apples\", \"3\").Replace(\"oranges\", \"1\");\n  \
    \      long l3 = s.Substring(0, s.IndexOf(' ')).Replace(\"apples\", \"3\").Replace(\"\
    oranges\", \"3\");\n        long l4 = s.Substring(0, s.IndexOf(' ')).Replace(\"\
    apples\", \"5\").Replace(\"oranges\", \"6\");\n        if (l1.Length >= l2.Length\
    \ && l1.Length >= l3.Length && l1.Length >= l4.Length)\n            return (long)(l1.Length);\n\
    \        if (l2.Length >= l1.Length && l2.Length >= l3.Length && l2.Length >=\
    \ l4.Length)\n            return (long)(l2.Length);\n        if (l3.Length >=\
    \ l1.Length && l3.Length >= l2.Length && l3.Length >= l4.Length)\n           \
    \ return (long)(l3.Length);\n        if (l4.Length >= l1.Length && l4.Length >=\
    \ l2.Length && l4.Length >= l3.Length)\n            return (long)(l4.Length);\n\
    \        if (l1.Length >= l2.Length && l1.Length >= l3.Length && l1.Length >=\
    \ l4.Length)\n            i = 1;\n        if (l2.Length >= l1.Length && l2.Length\
    \ >= l3.Length && l2.Length >= l4.Length)\n            i = 2;\n        if (l3.Length\
    \ >= l1.Length && l3.Length >= l2.Length && l3.Length >= l4.Length)\n        \
    \    i = 3;\n        if (l4.Length >= l1.Length && l4.Length >= l2.Length && l4.Length\
    \ >= l3.Length)\n            i = 4;\n        switch (i) {\n            case 1:\n\
    \                if (n < 50000L)\n                    return (long)(l1.Length);\n\
    \                break;\n            case 2:\n                if (n < 100000L)\n\
    \                    return (long)(l2.Length);\n                break;\n     \
    \       case 3:\n                if (n < 150000L)\n                    return\
    \ (long)(l3.Length);\n                break;\n            case 4:\n          \
    \      if (n < 200000L)\n                    return (long)(l4.Length);\n     \
    \           break;\n        }\n        ret = (n * 3L) - i;\n        return (long)ret;",
  "        long count = 0;\n        string fruits = s.Split(' ');\n        var uniqueFruits\
    \ = fruits.Distinct().ToArray();\n        foreach(var fruit in uniqueFruits) {\n\
    \            foreach(var part in fruit) {\n                if(part == \"a\") {\n\
    \                    count += n;\n                }\n                else if(part\
    \ == \"o\") {\n                    count -= n;\n                }\n          \
    \  }\n        }\n        return count;", "        int count = 0;\n        foreach\
    \ (string fruit in s.Split(' ')) {\n            if (fruit == \"apples\")\n   \
    \             count += n;\n            if (fruit == \"oranges\")\n           \
    \     count -= n;\n        }\n        return count;", "        long sum = 0;\n\
    \        long totalFruits = n;\n        // remove space from string\n        s\
    \ = s.Replace(\" \", \"\");\n        // split string in array by empty space\n\
    \        string[] nums = s.Split(new char[] { ' ' });\n        // check if array\
    \ contain only number\n        if (nums.Length == 2) {\n            // convert\
    \ string to number\n            long numOne = Convert.ToInt64(nums[0]);\n    \
    \        long numTwo = Convert.ToInt64(nums[1]);\n            // check if number\
    \ is positive\n            if (numOne > 0 && numTwo > 0) {\n                //\
    \ calculate number of apples and oranges\n                long sumOfApples = numOne\
    \ - 1;\n                long sumOfOranges = numTwo - 1;\n                // check\
    \ if sum is multiple of 3\n                if (sumOfApples % 3 == 0 && sumOfOranges\
    \ % 3 == 0) {\n                    long totalApples = sumOfApples * 3 + 1;\n \
    \                   long totalOranges = sumOfOranges * 3 + 1;\n              \
    \      // check if sum of apples and oranges is even\n                    if ((totalApples\
    \ + totalOranges) % 2 == 0) {\n                        // check if total number\
    \ of fruits is even\n                        if ((totalApples + totalOranges)\
    \ % 3 == 0) {\n                            // check if total number of fruits\
    \ is greater than number of apples and oranges\n                            if\
    \ (totalFruits > totalApples && totalFruits > totalOranges) {\n              \
    \                  // check if number of apples and oranges add to number of fruits\n\
    \                                if (totalApples + totalOranges == totalFruits)\
    \ {\n                                    sum = totalApples * 2 + totalOranges\
    \ * 2;\n                                    if (sum > totalFruits) {\n       \
    \                                 sum = totalFruits;\n                       \
    \             }\n                                }\n                         \
    \   }\n                        }\n                    }\n                }\n \
    \           }\n        }\n        return sum;", "        long apples = 0;\n  \
    \      long oranges = 0;\n        long mango = 0;\n        if (s.Contains(\"apples\"\
    )) apples = Convert.ToInt64(s.Split(' ')[0]);\n        if (s.Contains(\"oranges\"\
    )) oranges = Convert.ToInt64(s.Split(' ')[0]);\n        if (s.Contains(\"mango\"\
    )) mango = Convert.ToInt64(s.Split(' ')[0]);\n        return apples + (oranges\
    \ / n);", "        HashSet<long> fruits = new HashSet<long>();\n        foreach\
    \ (string fruit in s.Split(' and '))\n        {\n            if (string.IsNullOrEmpty(fruit))\n\
    \            {\n                continue;\n            }\n            long.TryParse(fruit,\
    \ out long tmp);\n            fruits.Add(tmp);\n        }\n        return fruits.Count(n\
    \ => n % fruits.Count() == 0);", "        long apples = 0;\n        long oranges\
    \ = 0;\n        long mango = 0;\n        long count = 0;\n        foreach (string\
    \ line in s.Split()) {\n            string[] words = line.Split(' ');\n      \
    \      apples += long.Parse(words[0]);\n            oranges += long.Parse(words[1]);\n\
    \            count += long.Parse(words[1]);\n        }\n        mango = (oranges\
    \ * 6L) / count; \n        return (apples * 2L + mango) * n; ", "        // your\
    \ code here\n        string[] fruits = s.Split(' ');\n        long sum = 0; \n\
    \        long sum1 = 0;\n        long[] fruitsInt = fruits.Select(x => Convert.ToInt64(x)).ToArray();\n\
    \        foreach (long i in fruitsInt.Where(i => i >= 0 && i <= n)) {\n      \
    \      sum += i;\n        }\n        foreach (long i in fruitsInt.Where(i => i\
    \ <= n)) {\n            sum1 += i;\n        }\n        sum += sum1;\n        return\
    \ sum;", "        string word = \"apples\";\n        string word2 = \"oranges\"\
    ;\n        string word3 = \"mango\";\n\n        string[] words = s.Split(' ');\n\
    \        long numOranges = 0;\n        long numApples = 0;\n        long numMango\
    \ = 0;\n        long numCount = 0;\n        long sum = 0;\n\n        foreach (string\
    \ item in words) {\n            if (item == word) {\n                numApples++;\n\
    \            }\n            else if (item == word2) {\n                numOranges++;\n\
    \            }\n            else if (item == word3) {\n                numMango++;\n\
    \            }\n        }\n\n        long apples = numApples;\n        long oranges\
    \ = numOranges;\n        long mango = numMango;\n        long count = numApples\
    \ + numOranges + numMango;\n\n        sum = apples + oranges + mango;\n      \
    \  if (sum > n) {\n            return count;\n        }\n        long apple =\
    \ apples / count;\n        long mango = mango / count;\n        long orange =\
    \ oranges / count;\n        long result = (apples + oranges) % count;\n\n    \
    \    if (result != 0) {\n            return result;\n        }\n\n        return\
    \ mango;", "        long result = 0;\n        var nums = s.Split(' ')\n      \
    \      .Select(item => item.Split(' '))\n            .Where(items => items.Length\
    \ == 2 && int.TryParse(items[0], out long n) && int.TryParse(items[1], out long\
    \ m))\n            .Select(items => new { apples = items[0], oranges = items[1],\
    \ m = m })\n            .Select(item => new { Apples = item.apples, Oranges =\
    \ item.oranges, M = item.m })\n            .ToList();\n        var counts = new\
    \ Dictionary<long, long>();\n        foreach (var num in nums) {\n           \
    \ long apples = num.Apples, oranges = num.Oranges, m = num.M;\n            counts.Add(apples,\
    \ oranges);\n            result += apples * oranges * m;\n        }\n        foreach\
    \ (var kvp in counts) {\n            result += kvp.Value * n;\n        }\n   \
    \     return result;", "        long total = 0;\n        var inputArray = s.Split('\
    \ ')\n            .Select(x => Convert.ToInt64(x));\n        foreach (var i in\
    \ inputArray)\n        {\n            total += i;\n        }\n        var apples\
    \ = total / n; \n        total = total % n;\n        var oranges = total / n;\n\
    \        return apples + oranges;", "        Dictionary<string,long> apples =\
    \ new Dictionary<string,long>();\n        Dictionary<string,long> oranges = new\
    \ Dictionary<string,long>();\n        string fruits = s.Split(' ')[0];\n     \
    \   string fruit1 = s.Split(' ')[1];\n        string fruit2 = s.Split(' ')[2];\n\
    \        string fruit3 = s.Split(' ')[3];\n        string fruit4 = s.Split(' ')[4];\n\
    \        string fruit5 = s.Split(' ')[5];\n        string fruit6 = s.Split(' ')[6];\n\
    \        string fruit7 = s.Split(' ')[7];\n        string fruit8 = s.Split(' ')[8];\n\
    \        string fruit9 = s.Split(' ')[9];\n        string fruit10 = s.Split('\
    \ ')[10];\n        string fruit11 = s.Split(' ')[11];\n        string fruit12\
    \ = s.Split(' ')[12];\n        string fruit13 = s.Split(' ')[13];\n        string\
    \ fruit14 = s.Split(' ')[14];\n        string fruit15 = s.Split(' ')[15];\n  \
    \      string fruit16 = s.Split(' ')[16];\n        string fruit17 = s.Split('\
    \ ')[17];\n        string fruit18 = s.Split(' ')[18];\n        string fruit19\
    \ = s.Split(' ')[19];\n        string fruit20 = s.Split(' ')[20];\n        string\
    \ fruit21 = s.Split(' ')[21];\n        string fruit22 = s.Split(' ')[22];\n  \
    \      string fruit23 = s.Split(' ')[23];\n        string fruit24 = s.Split('\
    \ ')[24];\n        string fruit25 = s.Split(' ')[25];\n        string fruit26\
    \ = s.Split(' ')[26];\n        string fruit27 = s.Split(' ')[27];\n        string\
    \ fruit28 = s.Split(' ')[28];\n        string fruit29 = s.Split(' ')[29];\n  \
    \      string fruit30 = s.Split(' ')[30];\n        string fruit31 = s.Split('\
    \ ')[31];\n        string fruit32 = s.Split(' ')[32];\n        string fruit33\
    \ = s.Split(' ')[33];\n        string fruit34 = s.Split(' ')[34];\n        string\
    \ fruit35 = s.Split(' ')[35];\n        string fruit36 = s.Split(' ')[36];\n  \
    \      string fruit37 = s.Split(' ')[37];\n        string fruit38 = s.Split('\
    \ ')[38];\n        string fruit39 = s.Split(' ')", "        int count = 0;\n \
    \       var splitted = s.Split(' ');\n        if (splitted.Length < 2) {\n   \
    \         throw new ArgumentOutOfRangeException(\"the split string must contain\
    \ at least 2 parts\");\n        }\n\n        foreach (var item in splitted) {\n\
    \            int i = Convert.ToInt32(item);\n            count += i;\n       \
    \ }\n\n        return FruitDistribution(count, n);", "        long result = 0;\n\
    \        int count = 0;\n        foreach (var fruit in s.Split(' '))\n       \
    \ {\n            if (fruit == \"apples\") {\n                count += 1;\n   \
    \         }\n            else if (\"oranges\".Contains(fruit)) {\n           \
    \     count += 1;\n            }\n            else {\n                count +=\
    \ 0;\n            }\n        }\n        long a = (long.Parse(s.Split(' ')[1]));\n\
    \        result = n - (2 * a + 2 * count - n);\n        return result;", "   \
    \     string tmp = s;\n        string tmp2 = tmp;\n        long apple = 0;\n \
    \       long orange = 0;\n        long mango = 0;\n\n        if (tmp.Contains(\"\
    apple\") || tmp.Contains(\"apples\") || tmp.Contains(\"A\")) {\n            apple\
    \ = Convert.ToInt64(s.Split(' ')[0]);\n        } else {\n            apple = 0;\n\
    \        }\n\n        if (tmp.Contains(\"orange\") || tmp.Contains(\"oranges\"\
    ) || tmp.Contains(\"O\")) {\n            orange = Convert.ToInt64(s.Split(' ')[0]);\n\
    \        } else {\n            orange = 0;\n        }\n\n        if (tmp.Contains(\"\
    mango\") || tmp.Contains(\"mangos\") || tmp.Contains(\"M\")) {\n            mango\
    \ = Convert.ToInt64(s.Split(' ')[0]);\n        } else {\n            mango = 0;\n\
    \        }\n\n        if (orange + apple + mango == n) {\n            return mango;\n\
    \        } else if (orange == 0 && apple == 0 && mango == 0 && n == 0) {\n   \
    \         return 0;\n        }\n\n        if (orange == 1 && apple == 1 && mango\
    \ == 0 && n == 1) {\n            return 1;\n        } else if (orange == 1 &&\
    \ apple == 0 && mango == 1 && n == 1) {\n            return 2;\n        } else\
    \ if (orange == 0 && apple == 1 && mango == 1 && n == 1) {\n            return\
    \ 3;\n        } else if (orange == 0 && apple == 0 && mango == 1 && n == 1) {\n\
    \            return 4;\n        } else if (orange == 1 && apple == 0 && mango\
    \ == 1 && n == 0) {\n            return 5;\n        } else if (orange == 0 &&\
    \ apple == 1 && mango == 0 && n == 0) {\n            return 6;\n        } else\
    \ if (orange == 1 && apple == 1 && mango == 0 && n == 0) {\n            return\
    \ 7;\n        } else if (orange == 0 && apple == 0 && mango == 0 && n == 0) {\n\
    \            return 8;\n        } else if (orange == 1 && apple == 0 && mango\
    \ == 0 && n == 0) {\n            return 9;\n        }\n\n        long num = 0;\n\
    \        if (orange == 0 && apple == 0 && mango == 0 && n == 0) {\n          \
    \  num = 0;\n        } else if (orange == 0 && apple == 1 && mango == 0 && n ==\
    \ 1) {\n            num = 1;\n        } else if (orange == 0 && apple == 0 &&\
    \ mango == 1 && n == 1) {\n            num = 2;\n        } else if (orange ==\
    \ 0 && apple == 1 && mango == 1 && n == 1) {\n            num = 3;\n        }\
    \ else if (orange == 0 && apple == 0 && mango == 1 && n == 0) {\n            num\
    \ = 4;\n        } else if (orange == 0 && apple == 1 && mango == 0 && n == 0)\
    \ {\n            num = 5;\n        } else if (orange == 0 && apple == 0 && mango\
    \ == 0 && n == 0) {\n            num = 6;\n        } else if (orange == 1 && apple\
    \ == ", "        char[] arr = s.ToCharArray();\n        int[] nums = new int[arr.Length];\n\
    \n        for(int i = 0; i < arr.Length; i++) {\n            if(arr[i] == 'o')\
    \ nums[i] = n + 1;\n            if(arr[i] == 'a') nums[i] = 1;\n            if(arr[i]\
    \ == 'm') nums[i] = n + 1;\n        }\n\n        return nums.Aggregate(0, (curr,\
    \ num) => curr + num);", "        // write your code here\n        long[] arr1\
    \ = new long[s.Length];\n        long[] arr2 = new long[s.Length];\n        long[]\
    \ arr3 = new long[s.Length];\n        long[] arr4 = new long[s.Length];\n    \
    \    long max1 = s.Replace(\"apples\", String.Empty).Replace(\"oranges\", String.Empty).Length;\n\
    \        long max2 = s.Replace(\"apples\", String.Empty).Replace(\"mango\", String.Empty).Length;\n\
    \        int count = 0;\n        for (int i = 0; i < s.Length; i++) {\n      \
    \      arr1[i] = Convert.ToInt64(s.Substring(0, i + 1).Trim());\n            arr2[i]\
    \ = Convert.ToInt64(s.Substring(i + 1, i + 2).Trim());\n            arr3[i] =\
    \ Convert.ToInt64(s.Substring(i + 2, i + 3).Trim());\n            arr4[i] = Convert.ToInt64(s.Substring(i\
    \ + 3, i + 4).Trim());\n        }\n        long sum1 = arr1.Where(n => n == max1).Sum();\n\
    \        long sum2 = arr2.Where(n => n == max2).Sum();\n        for (int i = 0;\
    \ i < s.Length; i++) {\n            if (max1 == arr1[i] && max2 == arr2[i] ||\
    \ max2 == arr2[i] && max1 == arr1[i])\n                count++;\n        }\n \
    \       long sum3 = arr3.Where(n => n == max1).Sum();\n        long sum4 = arr4.Where(n\
    \ => n == max2).Sum();\n        return count + sum3 + sum4;", "        //  Write\
    \ your code here.\n        long apple = 0, orange = 0, mango = 0;\n        foreach\
    \ (string fruits in s.Split(' ')) \n        {\n            int count = Convert.ToInt32(fruits);\n\
    \            if (count == 0)\n                mango += count;\n            else\
    \ if (count == 1)\n                orange += count;\n            else apple +=\
    \ count;\n        }\n        return (apple*2)+(orange*3)+mango;", "        int\
    \ applesCount = 0, orangesCount = 0, mangoCount = 0, sum = 0;\n\n        foreach\
    \ (string fruitValue in s.Split(' ')){\n            int fruitCount = Convert.ToInt32(fruitValue);\n\
    \            if (fruitCount > 0){\n                sum += fruitCount;\n      \
    \      }\n            if(fruitCount == 2){\n                mangoCount += 1;\n\
    \            }\n            if(fruitCount == 3){\n                sum += 2;\n\
    \            }\n            if(fruitCount == 4){\n                sum += 3;\n\
    \            }\n            if(fruitCount == 5){\n                sum += 4;\n\
    \            }\n        }\n        long applesFruits = sum / (n * (double)3);\n\
    \        long orangesFruits = sum / n;\n        return (long) mangoCount;", " \
    \       bool isSum = false;\n        long sum = 0;\n        int count = 0;\n \
    \       foreach (char item in s)\n            if (int.TryParse(item.ToString(),\
    \ out int intValue))\n                sum += intValue;\n            if (item ==\
    \ ' ') {\n                if (isSum) {\n                    if (sum == n) {\n\
    \                        count = count + 1;\n                    }\n         \
    \       }\n                isSum = false;\n            }\n            else {\n\
    \                isSum = true;\n            }\n        return count;", "     \
    \   long[] arr = new long[s.Length];\n        int i;\n        long sum = 0;\n\
    \        long sumOfProduct = 0;\n        long total = 0;\n        foreach (string\
    \ item in s.Split(' and ')) {\n            i = Int32.Parse(item);\n          \
    \  arr[i] = Int64.Parse(item);\n        }\n        long totalApple = arr[0] +\
    \ arr[1];\n        long totalOrange = arr[2];\n        long totalMango = arr[3];\n\
    \        if (sumOfProduct == 0) {\n            sumOfProduct = totalApple * totalOrange;\n\
    \            total = totalMango;\n        }\n        else {\n            sumOfProduct\
    \ += totalApple * totalOrange;\n            sumOfProduct += totalApple * totalMango;\n\
    \            sumOfProduct += totalOrange * totalMango;\n            total = sumOfProduct\
    \ / 2;\n        }\n        return (sumOfProduct + total);", "        List<string>\
    \ tokens = s.Split(' and ').ToList();\n        long result = 1;\n        foreach(string\
    \ s in tokens) {\n            long count = Convert.ToInt64(s);\n            result\
    \ *= count;\n        }\n        return result;", "        long apples = 0, oranges\
    \ = 0, mango = 0;\n\n        string fruits = s.Split(' ')[0];\n        string\
    \ fruitType = s.Split(' ')[1];\n\n        string[] fruitsArray = fruits.Split('\
    \ ');\n        int[] numArray = fruitType.Split(' ');\n        long totalApples\
    \ = 0, totalOranges = 0;\n\n        for (int i = 0; i < fruitsArray.Length; i++)\
    \ {\n            int n = numArray[i];\n            switch (n) {\n            \
    \    case 1:\n                    totalApples += 1;\n                    break;\n\
    \                case 2:\n                    totalOranges += 1;\n           \
    \         break;\n                case 3:\n                    mango += 1;\n \
    \                   break;\n                case 4:\n                    break;\n\
    \                case 5:\n                    break;\n                case 6:\n\
    \                    break;\n                case 7:\n                    break;\n\
    \                case 8:\n                    break;\n                case 9:\n\
    \                    break;\n                case 10:\n                    break;\n\
    \                case 11:\n                    break;\n                case 12:\n\
    \                    break;\n                case 13:\n                    break;\n\
    \                case 14:\n                    break;\n                case 15:\n\
    \                    break;\n                case 16:\n                    break;\n\
    \                case 17:\n                    break;\n                case 18:\n\
    \                    break;\n                default:\n                    break;\n\
    \            }\n        }\n\n        apples = totalApples;\n        oranges =\
    \ totalOranges;\n        mango = apples - oranges;\n\n        return mango;",
  "        string[] tokens = s.Split(' ');\n        int sum = 0;\n        foreach\
    \ (string t in tokens)\n            sum += int.Parse(t);\n\n        int i = 1;\n\
    \        while (sum <= n) {\n            sum += i;\n            i += 2;\n    \
    \    }\n\n        return i - 1;", "        long[] numbers = new long[s.Length];\n\
    \        string[] words = s.Split(' ');\n        int sumOfNumbers = 0;\n     \
    \   for (int i = 0; i < s.Length; i++) {\n            numbers[i] = Convert.ToInt64(words[i].Substring(0,\
    \ words[i].Length - 1));\n            sumOfNumbers += numbers[i];\n        }\n\
    \n        long[] sums = new long[s.Length];\n        for (int i = 0; i < s.Length;\
    \ i++) {\n            sums[i] = sumOfNumbers - numbers[i];\n        }\n\n    \
    \    long[] counts = new long[s.Length];\n        for (int i = 0; i < s.Length;\
    \ i++) {\n            if (numbers[i] != 0) {\n                int index = i;\n\
    \                while (index != 0) {\n                    int remainder = numbers[index]\
    \ % sums[index];\n                    if (remainder != 0) {\n                \
    \        counts[index]++;\n                    }\n                    index /=\
    \ sums[index];\n                }\n            }\n        }\n\n        int sum\
    \ = 0;\n        for (int i = 0; i < s.Length; i++) {\n            if (counts[i]\
    \ > 0) sum += sums[i];\n        }\n        return sum;", "        var total =\
    \ 0;\n        foreach (var s in s.Split(' '))\n        {\n            string fruit\
    \ = s.Remove(0, 1).ToLower();\n            if (fruit == \"apples\") total += n;\n\
    \            else if (fruit == \"oranges\") total -= n;\n            else throw\
    \ new Exception(\"Incorrect fruit name\");\n        }\n        return total;",
  "        List<int> fruits = new List<int>();\n        string fruit;\n        int\
    \ count = 0;\n        foreach (string line in s.Split(' '))\n        {\n     \
    \       fruits = line.Split(' ');\n            foreach (string fruit in fruits)\n\
    \            {\n                fruit = fruit.ToLower();\n                if (fruit\
    \ == \"apples\")\n                {\n                    count++;\n          \
    \      }\n                else if (fruit == \"oranges\")\n                {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \       return count;", "        var apples = long.Parse(s);\n        var oranges\
    \ = apples % 3;\n        if (oranges == 0)\n            return apples / 3;\n \
    \       else\n            return (apples / 3 + (apples % 3) * 2);", "        long\
    \ count = 0;\n        string pattern = @\"\\d+\\s+apples?\\s+and\\s+\\d+\\s+oranges?\"\
    ;\n        var matches = Regex.Matches(s, pattern);\n        string pattern2 =\
    \ @\"\\d+\\s+mangoes\";\n        var matches2 = Regex.Matches(s, pattern2);\n\
    \        if (matches.Count == 1 && matches2.Count == 0)\n            count = Convert.ToInt64(matches[0].Value);\n\
    \        else\n            foreach (Match match in matches) {\n              \
    \  string s = match.Groups[0].Value;\n                long i = Convert.ToInt64(s);\n\
    \                count = (count + i) / n;\n            }\n        return count;",
  "        long sum = 0;\n        Dictionary<string, long> map = new Dictionary<string,\
    \ long>();\n        foreach (string fruit in s.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries))\
    \ {\n            if (map.ContainsKey(fruit)) {\n                map[fruit] = map[fruit]\
    \ + 1;\n            } else {\n                map.Add(fruit, 1);\n           \
    \ }\n        }\n        foreach (string fruit in map.Keys) {\n            sum\
    \ += (long)Math.Pow(map[fruit], n);\n        }\n        return sum;", "      \
    \  var x = s.Split(' ');\n        long apples = s.Split(' ');\n        long oranges\
    \ = s.Split(' ');\n\n        long m = long.Parse(x[0]);\n        apples = apples.Sum(n\
    \ => n * m);\n        oranges = oranges.Sum(n => n * m);\n        var apple =\
    \ apples.Sum(n => n * n);\n        var orange = oranges.Sum(n => n * n);\n\n \
    \       var result = long.Parse(x[1]) / apple;\n\n        var applesCount = apples.TakeWhile(x\
    \ => x <= apple).Count();\n        var orangesCount = oranges.TakeWhile(x => x\
    \ <= orange).Count();\n        var mIndex = apples.Count(x => x <= apple);\n\n\
    \        if (applesCount > orangesCount) {\n            var orangesCount = oranges.TakeWhile(x\
    \ => x <= apple).Count();\n            mIndex = apples.Count(x => x <= apple);\n\
    \        }\n\n        mIndex = mIndex - orangesCount;\n\n        var result =\
    \ apples.Take(apples.TakeWhile(x => x <= apple).Count() + mIndex).Sum(n => n *\
    \ m);\n\n        return result;", "        int a = 0;\n        int b = 0;\n  \
    \      int c = 0;\n        int d = 0;\n        foreach (var n in s.Trim().Split(\"\
    \ \")) {\n            switch (n) {\n                case \"apples\":\n       \
    \             a++;\n                    break;\n                case \"oranges\"\
    :\n                    b++;\n                    break;\n                case\
    \ \"mango\":\n                    c++;\n                    break;\n         \
    \   }\n        }\n        return (long)(a * n + b * n + c * n);", "        List<string>\
    \ s = splitString(s);\n        long numApples = Convert.ToInt64(s[0]);\n     \
    \   long numOranges = Convert.ToInt64(s[1]);\n        long numFruits = numApples\
    \ + numOranges;\n        long totalFruits = numFruits;\n        long mango = 0;\n\
    \        long totalApples = 0;\n        List<long> nums = new List<long>();\n\
    \        for (int i = 2; i < s.Count(); i++) {\n            if (s[i-2] == \"apples\"\
    )\n                totalApples += Convert.ToInt64(s[i]);\n            else\n \
    \               totalFruits += Convert.ToInt64(s[i]);\n            if (totalFruits\
    \ >= n)\n                mango += Convert.ToInt64(s[i]);\n        }\n        return\
    \ mango;", "        // your code\n        var res = new List<long>();\n      \
    \  \n        var numApples = 1;\n        var numOranges = 1;\n        var numMangoFruits\
    \ = 1;\n        \n        foreach (var l in s.Split(' ')) {\n            if (l.Equals(\"\
    apples\")) {\n                numApples += 1;\n            } else if (l.Equals(\"\
    oranges\")) {\n                numOranges += 1;\n            } else if (l.Equals(\"\
    mango\")) {\n                numMangoFruits += 1;\n            }\n        }\n\
    \        \n        bool isTrue = true;\n        for (int i = 0; i < n; i++) {\n\
    \            if (isTrue) {\n                res.Add(numApples%10);\n         \
    \       numApples /= 10;\n            } else {\n                res.Add(numOranges%10);\n\
    \                numOranges /= 10;\n            }\n            \n            isTrue\
    \ = !isTrue;\n        }\n        res.Add(numMangoFruits);\n        \n        return\
    \ res.Sum();", "        // Write your code here\n        long result = 0;\n  \
    \      string str = s;\n        string temp = str.Substring(0, str.IndexOf(\"\
    and\"));\n        string resultTemp = str.Substring(str.IndexOf(\"and\") + 3);\n\
    \        string subTemp = str.Substring(str.IndexOf(\"and\") + 2, str.IndexOf(\"\
    and\") - str.IndexOf(\"and\") + 2);\n        long tempValue = 0;\n        if (!long.TryParse(temp,\
    \ subTemp, out tempValue)) {\n            resultTemp = resultTemp.Replace(\"apples\"\
    , \"\");\n            resultTemp = resultTemp.Replace(\"oranges\", \"\");\n  \
    \          if (resultTemp.Equals(\"0\")) {\n                tempValue = 0;\n \
    \           }\n            if (resultTemp.Equals(\"1\")) {\n                tempValue\
    \ = 1;\n            }\n            if (resultTemp.Equals(\"2\")) {\n         \
    \       tempValue = 2;\n            }\n            if (resultTemp.Equals(\"3\"\
    )) {\n                tempValue = 3;\n            }\n            if (resultTemp.Equals(\"\
    4\")) {\n                tempValue = 4;\n            }\n            if (resultTemp.Equals(\"\
    5\")) {\n                tempValue = 5;\n            }\n            if (resultTemp.Equals(\"\
    6\")) {\n                tempValue = 6;\n            }\n        }\n        temp\
    \ = temp.Remove(resultTemp.IndexOf(\"oranges\"), resultTemp.Length - resultTemp.IndexOf(\"\
    oranges\"));\n        temp = temp.Remove(temp.IndexOf(\"apples\"), temp.Length\
    \ - temp.IndexOf(\"apples\"));\n        string[] temp = temp.Split(' ');\n   \
    \     if (temp.Length < 2) {\n            temp = temp.Concat(temp).ToArray();\n\
    \        }\n        string[] temp2 = temp.OrderBy(x => x).ToArray();\n       \
    \ for (int i = 0; i < temp.Length; i++) {\n            long temp1 = Convert.ToInt64(temp2[i]);\n\
    \            result += temp1 * n;\n        }\n        return result;", "     \
    \   var ns = n.ToString(CultureInfo.InvariantCulture);\n        var ns = ns.Replace(\"\
    ,\", \"\");\n        var s = Convert.ToInt64(s);\n        return (((long) (s.ToString(\"\
    0000000000\"))).ToString().Length - ns.Length) + (s.ToString().Length - ns.Length);",
  "        // Initialize your solution here\n        string fruit = \"apple\";\n \
    \       int nFruit = 0; // the number of fruit\n        string nfruits = string.Empty;\
    \ // the number of the fruit\n        bool firstTry = true;\n        bool apple\
    \ = false;\n        bool orange = false;\n        bool mango = false;\n      \
    \  bool appleOrOrange = false; // the result\n        bool appleOrOrangeOrMango\
    \ = false; // the result\n        bool appleOrOrangeOrMangoOrAppleOrOrange = false;\
    \ // the result\n        bool appleOrOrangeOrMangoOrAppleOrOrangeOrMango = false;\
    \ // the result\n\n        string[] apples = new string[] { \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"", "        long count = 0;\n\
    \        foreach (string fruit in s.Split(' '))\n        {\n            if (fruit\
    \ == \"apples\") \n                count += n;\n            if (fruit == \"oranges\"\
    )\n                count += n;\n            if (fruit == \"mango\")\n        \
    \        count += n;\n        }\n        return count;", "        string input\
    \ = s.Trim();\n        long apples = Int64.Parse(input.Split(' ')[0]);\n     \
    \   long oranges = Int64.Parse(input.Split(' ')[1]);\n        long mangos = apples\
    \ - oranges;\n        return mangos;", "        var fruits = new List<string>()\
    \ { \"apples\", \"oranges\", \"mango\" };\n        var apples = 0, oranges = 0,\
    \ mangos = 0;\n        var items = s.Split(' ');\n        var totalApples = items.ToList().Where(n\
    \ => n != \"and\").Count();\n        var totalOranges = items.ToList().Where(n\
    \ => n == \"and\").Count();\n        if (totalApples > 0 || totalOranges > 0)\n\
    \        {\n            apples = totalApples;\n            oranges = totalOranges;\n\
    \        }\n        else\n        {\n            var lastItem = items.Last();\n\
    \            if (lastItem.Contains(\"and\"))\n            {\n                items\
    \ = items.Take(items.Count() - 1).ToList();\n                apples = items.ToList().Where(n\
    \ => n == \"and\").Count();\n                oranges = items.ToList().Where(n\
    \ => n != \"and\").Count();\n            }\n            else\n            {\n\
    \                oranges = items.ToList().Where(n => n != \"and\").Count();\n\
    \                apples = items.ToList().Where(n => n == \"and\").Count();\n \
    \           }\n        }\n        var totalFruits = apples + oranges + mangos;\n\
    \        var fruitsPerDay = totalFruits / (n / 365);\n        var totalFruitsPerDay\
    \ = fruitsPerDay * (n / 365);\n        var result = apples * fruitsPerDay;\n \
    \       if (totalOranges > 0)\n        {\n            result += oranges * fruitsPerDay;\n\
    \        }\n        if (totalMangos > 0)\n        {\n            result += mangos\
    \ * fruitsPerDay;\n        }\n        return result;", "        var fruits = s.Split('\
    \ ')\n            .Where(x => !string.IsNullOrEmpty(x))\n            .ToList();\n\
    \        var applesAndOranges = fruits.Skip(1);\n        var applesAndOrangesCount\
    \ = applesAndOranges.Count();\n        long mangoNumbers = 0;\n        while (applesAndOranges.Sum()\
    \ == n) {\n            if (applesAndOranges.Any(x => x % 2 == 0)) {\n        \
    \        mangoNumbers += (long)Math.Floor(applesAndOranges.Sum() /\n         \
    \           applesAndOranges.Count(x => x % 2 == 0));\n            }\n       \
    \     applesAndOranges = applesAndOranges.Skip(1).Take(applesAndOrangesCount -\
    \ 1);\n            applesAndOrangesCount = applesAndOranges.Count();\n       \
    \ }\n        return mangoNumbers;", "        // your code here\n        \n   \
    \     long[] basket = new long[n];\n        string input = s.Replace(\"apples\"\
    , \"L\").Replace(\"oranges\", \"E\").Replace(\"mango\", \"M\");\n        long\
    \ l = 0;\n        int x = 0;\n        foreach(char x in input){\n            switch\
    \ (x){\n                case 'L':\n                    basket[x] += (long)(decimal.Parse(s.Substring(0,\
    \ x)));\n                    l++;\n                    break;\n              \
    \  case 'E':\n                    basket[x] += (long)(decimal.Parse(s.Substring(0,\
    \ x)));\n                    l--;\n                    break;\n              \
    \  case 'M':\n                    basket[x] += (long)(decimal.Parse(s.Substring(0,\
    \ x)));\n                    break;\n                default:\n              \
    \      basket[x] += (long)(decimal.Parse(s.Substring(0, x)));\n              \
    \      break;\n            }\n            x++;\n        }\n        return basket[0];",
  "        // Your code here\n        // Write your code here\n        int apples\
    \ = 0, oranges = 0, mangos = 0;\n        foreach (string str in s.Split(' '))\n\
    \        {\n            switch (str)\n            {\n                case \"apples\"\
    :\n                    apples++;\n                    break;\n               \
    \ case \"oranges\":\n                    oranges++;\n                    break;\n\
    \                case \"mangos\":\n                    mangos++;\n           \
    \         break;\n            }\n        }\n        int total = apples + oranges\
    \ + mangos;\n        int totalApple = apples;\n        int totalOranges = oranges;\n\
    \        int totalMangos = mangos;\n        long totalApples = 0;\n        long\
    \ totalOranges = 0;\n        long totalMangos = 0;\n        long apples = 0;\n\
    \        long oranges = 0;\n        long mangos = 0;\n        long total = 0;\n\
    \        foreach (string str in s.Split(' '))\n        {\n            switch (str)\n\
    \            {\n                case \"apples\":\n                    apples++;\n\
    \                    break;\n                case \"oranges\":\n             \
    \       oranges++;\n                    break;\n                case \"mangos\"\
    :\n                    mangos++;\n                    break;\n            }\n\
    \        }\n        total = apples + oranges + mangos;\n        totalApple = apples;\n\
    \        totalOranges = oranges;\n        totalMangos = mangos;\n        totalApples\
    \ = apples;\n        totalOranges = oranges;\n        totalMangos = mangos;\n\
    \        apples = 0;\n        oranges = 0;\n        mangos = 0;\n        total\
    \ = 0;\n        foreach (string str in s.Split(' '))\n        {\n            switch\
    \ (str)\n            {\n                case \"apples\":\n                   \
    \ apples++;\n                    break;\n                case \"oranges\":\n \
    \                   oranges++;\n                    break;\n                case\
    \ \"mangos\":\n                    mangos++;\n                    break;\n   \
    \         }\n        }\n        long totalApples = 0;\n        long totalOranges\
    \ = 0;\n        long totalMangos = 0;\n        apples = 0;\n        oranges =\
    \ 0;\n        mangos = 0;\n        total = 0;\n        foreach (string str in\
    \ s.Split(' '))\n        {\n            switch (str)\n            {\n        \
    \        case \"apples\":\n                    apples++;\n                   \
    \ break;\n                case \"oranges\":\n                    oranges++;\n\
    \                    break;\n                case \"mangos\":\n              \
    \      mangos++;\n                    break;\n            }\n        }\n     \
    \   total = apples + oranges + mangos;\n        totalApple = apples;\n       \
    \ totalOranges = oranges;\n        totalMangos = mangos;\n        totalApples\
    \ = apples;\n        totalOranges = oranges;\n        totalMangos = mangos;\n\
    \        apples = 0;", "        long apples = 0, oranges = 0, mango = 0;\n   \
    \     long n = n%3;\n        if (n > 0) mango += n;\n        foreach(string element\
    \ in s.Split(' '))\n            if(element.StartsWith(\"apples\")) apples += int.Parse(element.Substring(4));\n\
    \            else if(element.StartsWith(\"oranges\")) oranges += int.Parse(element.Substring(4));\n\
    \            else mango += int.Parse(element.Substring(4));\n        return apples\
    \ + oranges + mango;", "        string pattern = \"([\\\\d]+)\\\\s+apples[\\\\\
    s+and\\\\s+]+oranges[\\\\s+and\\\\s+]+\";\n        Regex re = new Regex(pattern);\n\
    \        MatchCollection mc = re.Matches(s);\n        long[] numbers = new long[mc.Count];\n\
    \        for (int i = 0; i < mc.Count; i++) {\n            Match m = mc[i];\n\
    \            numbers[i] = long.Parse(m.Groups[1].Value, NumberStyles.AllowHexSpecifier);\n\
    \        }\n        long m = 0;\n        for (int i = 0; i < numbers.Length; i++)\
    \ {\n            m += numbers[i];\n            if (m >= n) break;\n        }\n\
    \        return m+1;", "        long[] arr = new long[1000];\n        long count\
    \ = 0;\n        string[] tmp = s.Split(' ');\n        foreach (string s in tmp)\
    \ {\n            int x = int.Parse(s);\n            if (x == 9) {\n          \
    \      arr[x] = 1;\n            } else {\n                arr[x] = arr[x] + 1;\n\
    \            }\n        }\n        foreach (int n in arr) {\n            count\
    \ = count + n;\n        }\n        if (count == 0) return 0;\n        int max\
    \ = 0;\n        int index = 0;\n        for (int i = 0; i < 100; i++) {\n    \
    \        index = i;\n            if (arr[i] > max) {\n                max = arr[i];\n\
    \            }\n        }\n        long sum = 0;\n        for (int i = 0; i <\
    \ max; i++) {\n            if (arr[index] > 0) {\n                sum = sum +\
    \ arr[index];\n            }\n            index++;\n        }\n        return\
    \ sum;", "        string temp = s.Replace(\" \", string.Empty);\n        long\
    \ total = 0;\n        for (int i = 0; i < temp.Length; i++) {\n            string\
    \ item = temp.Substring(i, 1);\n            if (item.Equals(\"a\")) {\n      \
    \          total += n;\n            } else if (item.Equals(\"o\")) {\n       \
    \         total -= n;\n            } else if (item.Equals(\"m\")) {\n        \
    \        total = n * 2;\n            }\n        }\n        return total;", " \
    \       string input = s;\n        string apples = \"apples\";\n        string\
    \ oranges = \"oranges\";\n        string mango = \"mango\";\n        string fruits\
    \ = \"fruits\";\n\n        long result = 0;\n        string pattern = \"(( ?\"\
    \ + apples + \") (\" + apples + \") (\" + apples + \")|(\" + oranges + \") (\"\
    \ + oranges + \") (\" + oranges + \")|(\" + mango + \") (\" + mango + \") (\"\
    \ + mango + \"))\";\n\n        MatchCollection matches = Regex.Matches(input,\
    \ pattern);\n\n        foreach (Match match in matches) {\n            foreach\
    \ (Capture capture in match.Captures) {\n                result += Convert.ToInt64(capture.Value);\n\
    \            }\n        }\n\n        if (result.Equals(n)) {\n            return\
    \ 1;\n        }\n\n        return 0;", "        long[] nums = new long[n];\n \
    \       foreach (string item in s.Split(' ')){\n            int num = int.Parse(item);\n\
    \            nums[nums-1] += num;\n        }\n        return nums[nums.Length-1];",
  "        Dictionary<string, long> dict = new Dictionary<string, long>();\n     \
    \   long[] apples = new long[10];\n        long[] oranges = new long[10];\n  \
    \      long[] mango = new long[10];\n        string[] words = s.Split(' ');\n\
    \        foreach (string word in words) {\n            dict.Add(word, 0);\n  \
    \      }\n        foreach (string word in words) {\n            if (dict.ContainsKey(word))\
    \ {\n                dict[word]++;\n            }\n        }\n        Array.Sort(dict.Keys);\n\
    \        foreach (string word in dict) {\n            if (dict.ContainsKey(\"\
    mango\")) {\n                mango[Convert.ToInt64(word)] = dict[word];\n    \
    \        }\n            if (dict.ContainsKey(\"apples\")) {\n                apples[Convert.ToInt64(word)]\
    \ = dict[word];\n            }\n            if (dict.ContainsKey(\"oranges\"))\
    \ {\n                oranges[Convert.ToInt64(word)] = dict[word];\n          \
    \  }\n        }\n        int appleNum = 0;\n        int orangeNum = 0;\n     \
    \   int mangoNum = 0;\n        foreach (long item in apples) {\n            if\
    \ (item == 0)\n                continue;\n            appleNum++;\n        }\n\
    \        foreach (long item in oranges) {\n            if (item == 0)\n      \
    \          continue;\n            orangeNum++;\n        }\n        foreach (long\
    \ item in mango) {\n            if (item == 0)\n                continue;\n  \
    \          mangoNum++;\n        }\n        long result = mangoNum;\n        long\
    \ total = 0;\n        long temp;\n        foreach (long item in apples) {\n  \
    \          temp = appleNum;\n            appleNum = item;\n            if (appleNum\
    \ == temp) {\n                total += 1;\n            }\n        }\n        foreach\
    \ (long item in oranges) {\n            temp = orangeNum;\n            orangeNum\
    \ = item;\n            if (orangeNum == temp) {\n                total += 1;\n\
    \            }\n        }\n        foreach (long item in mango) {\n          \
    \  temp = mangoNum;\n            mangoNum = item;\n            if (mangoNum ==\
    \ temp) {\n                total += 1;\n            }\n        }\n        Debug.WriteLine(\"\
    Total apples: {0}\", appleNum);\n        Debug.WriteLine(\"Total oranges: {0}\"\
    , orangeNum);\n        Debug.WriteLine(\"Total mangos: {0}\", mangoNum);\n   \
    \     Debug.WriteLine(\"Total: {0}\", total);\n        return total;", "     \
    \   string result = \"\";\n        string[] words = s.Split(' ');\n        long\
    \ temp = 0;\n        foreach (string word in words) {\n            if (word.ToLower()\
    \ == \"apples\")\n                temp += long.Parse(word);\n            else\
    \ if (word.ToLower() == \"oranges\")\n                temp -= long.Parse(word);\n\
    \            else\n                temp += long.Parse(word);\n        }\n    \
    \    temp = temp % n;\n        result = temp.ToString();\n        return Convert.ToInt64(result);",
  "        long sum = 0;\n        long apples = 0;\n        long oranges = 0;\n\n\
    \        foreach (string fruit in s.Split(' ')) \n            if (fruit == \"\
    apples\") {\n                apples++;\n            } else if (fruit == \"oranges\"\
    ) {\n                oranges++;\n            } else if (fruit == \"mango\") {\n\
    \                // mango fruit only in the basket if the number of oranges and\
    \ apples\n                // is greater than 0\n                if ((apples >\
    \ 0) && (oranges > 0)) {\n                    sum += apples * oranges;\n     \
    \           }\n            }\n\n        // Mango fruit only in the basket if the\
    \ number of apples and oranges is \n        // greater than 0 \n        if (apples\
    \ > 0) && (oranges > 0) {\n            sum += apples * oranges;\n        }\n \
    \       \n        return sum;", "        // write your code in c# 6.0 syntax\n\
    \        var result = s.Split(' ')\n            .Select(x => x.Split(' '))\n \
    \           .Select(x => new { Apples = x[0], Oranges = x[1], Mangos = x[2] })\n\
    \            .Aggregate(new { Apples = 0, Oranges = 0, Mangos = 0 }, (sum, x)\
    \ => { sum.Apples += x.Apples; sum.Oranges += x.Oranges; sum.Mangos += x.Mangos;\
    \ return sum; });\n\n        long resultNum = result.Apples + result.Oranges +\
    \ result.Mangos;\n        if (resultNum > n) {\n            return 0;\n      \
    \  }\n        return n % resultNum;", "        var numbers = s.Replace(\" apples\"\
    , \"\").Replace(\" oranges\", \"\").Replace(\" mangos\", \"\").Split(' ');\n \
    \       return numbers.Sum(item => Convert.ToInt32(item)) / (long)n;", "     \
    \   long total = 0;\n        var fruits = s.Split(new[]{' and '}).Select(x =>\
    \ x.Split(new[]{' '}).First()).ToList();\n        foreach (var fruit in fruits)\
    \ {\n            if (fruit == \"apples\") {\n                total += n;\n   \
    \         }\n            else if (fruit == \"oranges\") {\n                total\
    \ -= n;\n            }\n            else {\n                if (fruits.Contains(\"\
    mango\")) {\n                    total += n;\n                }\n            \
    \    else {\n                    total -= n;\n                }\n            }\n\
    \        }\n        return total;", "        int[] counts = new int[10];\n   \
    \     long sum = 0;\n        for (int i = 0; i < s.Length; i++) {\n          \
    \  counts[s[i] - '0']++;\n            sum += counts[s[i] - '0'];\n        }\n\n\
    \        int sum2 = 0;\n        for (int i = 0; i < counts.length; i++) {\n  \
    \          if (counts[i] > 1) {\n                sum2 += counts[i] * i;\n    \
    \        }\n        }\n        sum += (n - sum2);\n\n        return sum;", " \
    \       long sum = 0;\n        long n = Convert.ToInt64(s);\n        sum = Enumerable.Range(0,\
    \ n + 1).Sum(i => (long) (Math.Pow(2.0, i)));\n        return sum;", "       \
    \ // Your code goes here\n        string s1;\n        long n1;\n        long n2\
    \ = 0;\n        long n3 = 0;\n        long n4 = 0;\n        int i = 0;\n     \
    \   bool flag = true;\n        string[] arr1 = s.Split(' ');\n        Array.Sort(arr1,\
    \ (x, y) => { \n            if (x.Length != y.Length) return x.Length - y.Length;\
    \ \n            return x.CompareTo(y); \n        });\n        string x = \"apples\
    \ \";\n        string y = \"oranges \";\n        string z = \"mango \";\n    \
    \    string t1 = x + arr1[0];\n        string t2 = y + arr1[1];\n        string\
    \ t3 = z + arr1[2];\n        n1 = long.Parse(t1, out i);\n        n2 = long.Parse(t2,\
    \ out i);\n        n3 = long.Parse(t3, out i);\n        if (n1 == 0 || n1 == 1)\
    \ {\n            return n1;\n        }\n        if (flag) {\n            flag\
    \ = false;\n            n4 = n1 * n2;\n        }\n        else {\n           \
    \ flag = true;\n            n4 = n1 * n3;\n        }\n        long x = n2 - n3;\n\
    \        long y = n4 - (x + n3);\n        return y;", "        // Write your code\
    \ here\n        string strs = s.Split(' ')[0];\n        int m = Convert.ToInt32(strs);\n\
    \        long c = 0;\n        long sum = 0;\n        foreach (var item in s.Split('\
    \ '))\n        {\n            if(item.Trim().Equals(\"apples\")) c+=1;\n     \
    \       else if(item.Trim().Equals(\"oranges\")) c+=1;\n            else if(item.Trim().Equals(\"\
    mango\")) c+=1;\n            sum += (int)Convert.ToInt32(item);\n        }\n \
    \       string str = String.Format(\"{0:00}\", c).Replace(\"00\", \"\");\n   \
    \     long num = (long)(Convert.ToInt64(Math.Truncate((Convert.ToDouble(str) *\
    \ m / 100)) + (long)Math.Truncate((Convert.ToDouble(str) * m / 100))));\n    \
    \    long a = Math.Truncate((Convert.ToDouble(sum) * m / 100));\n        long\
    \ b = Math.Truncate((Convert.ToDouble(str) * m / 100));\n        long c = Math.Truncate((Convert.ToDouble(str)\
    \ * m / 100));\n        long d = Math.Truncate((Convert.ToDouble(str) * m / 100));\n\
    \        long e = Math.Truncate((Convert.ToDouble(str) * m / 100));\n        long\
    \ f = Math.Truncate((Convert.ToDouble(str) * m / 100));\n        long g = Math.Truncate((Convert.ToDouble(str)\
    \ * m / 100));\n        long h = Math.Truncate((Convert.ToDouble(str) * m / 100));\n\
    \        long i = (long)Math.Round((Convert.ToDouble(str) * m / 100));\n     \
    \   return num - a - b - c - d - e - f - g - h - i;", "        long[] result =\
    \ new long[3];\n        long totalNumber = 0;\n        string[] words = s.Split('\
    \ ');\n        int numberOfApples = Convert.ToInt32(words[0]);\n        int numberOfOranges\
    \ = Convert.ToInt32(words[1]);\n        for (int i = 0; i < numberOfApples + numberOfOranges;\
    \ i++) {\n            if (i % 2 == 0 && numberOfApples > 0) {\n              \
    \  totalNumber = totalNumber + i;\n                numberOfApples = numberOfApples\
    \ - 1;\n            }\n            else if (i % 2 != 0 && numberOfOranges > 0)\
    \ {\n                totalNumber = totalNumber + i;\n                numberOfOranges\
    \ = numberOfOranges - 1;\n            }\n            else {\n                continue;\n\
    \            }\n        }\n        result[0] = totalNumber % n;\n        if (numberOfApples\
    \ > 0) {\n            result[1] = numberOfApples / n;\n        }\n        if (numberOfOranges\
    \ > 0) {\n            result[2] = numberOfOranges / n;\n        }\n        return\
    \ (long)Math.Ceiling(Math.Sqrt(result[0]) * Math.Sqrt(result[1]) * Math.Sqrt(result[2]));",
  "        long apples = long.Parse(s.Split(' ')[0]);\n        long oranges = long.Parse(s.Split('\
    \ ')[1]);\n        long totalOranges = apples + oranges;\n        if (totalOranges\
    \ > n) {\n            throw new Exception(\"Number of oranges must be less than\
    \ or equal to the number of apples.\");\n        }\n        long totalApples =\
    \ apples;\n        long countOfMango = 0;\n        while (totalApples < n) {\n\
    \            while (totalApples > 0 && totalOranges > 0) {\n                long\
    \ countOfApple = totalApples - apples;\n                long countOfOrange = totalOranges\
    \ - oranges;\n                if (((countOfApple % 2) == 0) && (countOfOrange\
    \ % 2) == 0) {\n                    countOfMango = countOfMango + countOfApple;\n\
    \                    totalApples += countOfApple;\n                    totalOranges\
    \ -= countOfOrange;\n                } else if (countOfApple % 2 == 1) {\n   \
    \                 countOfMango = countOfMango + countOfOrange;\n             \
    \       totalApples += countOfApple;\n                    totalOranges -= countOfOrange;\n\
    \                } else if (countOfOrange % 2 == 1) {\n                    countOfMango\
    \ = countOfMango + countOfApple;\n                    totalApples += countOfOrange;\n\
    \                    totalOranges -= countOfApple;\n                } else {\n\
    \                    throw new Exception(\"Invalid fruit distribution\");\n  \
    \              }\n            }\n        }\n        return countOfMango;", " \
    \       long sum = 0;\n        Regex re = new Regex(@\"\\d+\");\n        Match\
    \ mat = re.Match(s);\n        int[] vals = new int[mat.Groups.Count];\n      \
    \  for (int i = 0; i < vals.Length; i++) {\n            vals[i] = Convert.ToInt32(mat.Groups[i].Value);\n\
    \        }\n        Console.WriteLine(\"Number of apples: {0}\", vals[0]);\n \
    \       Console.WriteLine(\"Number of oranges: {0}\", vals[1]);\n        long\
    \ apples = (long)vals[0];\n        long oranges = (long)vals[1];\n        long\
    \ fruits = apples + oranges;\n        if (apples == 0)\n            sum += oranges;\n\
    \        else if (oranges == 0)\n            sum += apples;\n        else {\n\
    \            long[] weights = new long[] { apples, oranges, 1 };\n           \
    \ long total = 0;\n            for (int i = 0; i < weights.Length; i++)\n    \
    \            total += weights[i];\n            double percentage = double(total)\
    \ / fruits;\n            sum += (long)Math.Round(percentage * fruits);\n     \
    \   }\n        Console.WriteLine(\"Number of fruits: {0}\", sum);\n        return\
    \ sum;", "        string input = s;\n        List<long> numbers = new List<long>();\n\
    \        string[] split = s.Split(' ');\n        foreach (string element in split)\n\
    \        {\n            numbers.Add(long.Parse(element));\n        }\n       \
    \ int x = numbers.Count;\n        long totalOrangesAndApples = numbers[0];\n \
    \       long totalFruitsInBasket = numbers[x-1];\n        int index = 0;\n   \
    \     long mango = 0;\n        long apple = 0;\n        while (index < x)\n  \
    \      {\n            totalOrangesAndApples += numbers[index];\n            totalFruitsInBasket\
    \ -= numbers[index+1];\n            index += 2;\n        }\n        if (totalFruitsInBasket\
    \ > 0)\n        {\n            mango = totalOrangesAndApples / totalFruitsInBasket;\n\
    \            apple = totalOrangesAndApples % totalFruitsInBasket;\n        }\n\
    \        return mango;", "        long[] fruits = { 0, 0 };\n        long[] apples\
    \ = { 0, 0 };\n        long[] oranges = { 0, 0 };\n        long[] mangos = { 0,\
    \ 0 };\n        string[] splits = s.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n\
    \        foreach (string split in splits)\n        {\n            string[] parts\
    \ = split.Split(' ');\n            switch (parts[0].ToLower())\n            {\n\
    \                case \"apples\": apples = long.Parse(parts[1]); break;\n    \
    \            case \"oranges\": oranges = long.Parse(parts[1]); break;\n      \
    \          case \"mango\": mangos = long.Parse(parts[1]); break;\n           \
    \ }\n        }\n        long[] fruitsCount = new long[2];\n        fruits[0] =\
    \ apples[0] + oranges[0] + mangos[0]; fruitsCount[0] = (apples[0] + oranges[0]\
    \ + mangos[0]) * n;\n        fruits[1] = apples[1] + oranges[1] + mangos[1]; fruitsCount[1]\
    \ = (apples[1] + oranges[1] + mangos[1]) * n;\n        long sum = 0;\n       \
    \ for (int i = 0; i < fruitsCount[0].ToString().Length; i++)\n        {\n    \
    \        if (fruitsCount[0].ToString()[i] == '0') sum += fruitsCount[0].ToString().Where(c\
    \ => c == '0').Count();\n            if (fruitsCount[0].ToString()[i] == '1')\
    \ sum += fruitsCount[0].ToString().Where(c => c == '1').Count();\n        }\n\
    \        return sum;", "        int[] a = new int[s.Length];\n        int[] b\
    \ = new int[s.Length];\n        foreach (char c in s) {\n            int index\
    \ = -1;\n            switch (c) {\n                case 'a':\n               \
    \     index = 0;\n                    break;\n                case 'e':\n    \
    \                index = -1;\n                    break;\n                case\
    \ 'l':\n                    index = 1;\n                    break;\n         \
    \       case 'o':\n                    index = 2;\n                    break;\n\
    \                case 'r':\n                    index = 3;\n                 \
    \   break;\n                case 'b':\n                    index = 4;\n      \
    \              break;\n            }\n            if (index != -1) {\n       \
    \         a[index] = a[index] + 1;\n            } else {\n                index\
    \ = 0;\n                switch (c) {\n                    case 'l':\n        \
    \                index = 1;\n                        break;\n                \
    \    case 'o':\n                        index = 2;\n                        break;\n\
    \                    case 'r':\n                        index = 3;\n         \
    \               break;\n                    case 'b':\n                      \
    \  index = 4;\n                        break;\n                }\n           \
    \     b[index] = b[index] + 1;\n            }\n        }\n        long num = 0;\n\
    \        int[] c = new int[s.Length];\n        for (int i = 0; i < s.Length; i++)\
    \ {\n            if (a[i] > 1) {\n                c[i] = a[i] - 1;\n         \
    \       num = num + b[i] * c[i];\n            } else {\n                c[i] =\
    \ 1;\n                num = num + b[i] * c[i];\n            }\n        }\n   \
    \     if (num > n) {\n            return num - n;\n        } else {\n        \
    \    return 0;\n        }", "        // (5) The fruits can be distributed uniformly\
    \ in any basket \n        // Fruits are distributed uniformly randomly in the\
    \ basket\n        // There will be a total of n fruits in the basket\n       \
    \ // If the total number of apples and oranges are 0 then return zero and output\
    \ 1\n        if (s.Count() != \"5 apples and 6 oranges\".Length)\n           \
    \ return 0;\n        // (4) There are 4 possible distributions:\n        //  \
    \   1. apples, oranges and mango\n        //     2. apples and mango\n       \
    \ //     3. oranges and mango\n        //     4. apples and oranges\n        //\
    \ (3) If the total of apples and oranges in the basket is 0 then output 0 and\
    \ output 1\n        if (s.Count() != \"0 apples and 1 oranges\".Length)\n    \
    \        return 0;\n        // (2) There are only 2 distributions:\n        //\
    \     1. apples and mango\n        //     2. oranges and mango\n        // (1)\
    \ If the total of apples and oranges in the basket is 0 then output 0 and output\
    \ 1\n        if (s.Count() != \"2 apples and 3 oranges\".Length)\n           \
    \ return 0;\n        // (2) There are only 2 distributions:\n        //     1.\
    \ apples and mango\n        //     2. oranges and mango\n        // (1) If the\
    \ total of apples and oranges in the basket is 0 then output 0 and output 1\n\
    \        if (s.Count() != \"100 apples and 1 oranges\".Length)\n            return\
    \ 0;\n        // (3) There are 3 distributions:\n        //     1. apples, oranges\
    \ and mango\n        //     2. apples and mango\n        //     3. oranges and\
    \ mango\n        // (2) If the total of apples and oranges in the basket is 0\
    \ then output 0 and output 1\n        if (s.Count() != \"120 apples and 1 oranges\"\
    .Length)\n            return 0;\n\n        // Fruit distribution\n        // Step\
    \ 1. Count the number of oranges \n        long o = 0;\n        long b = 0;\n\
    \        int s = Convert.ToInt32(s);\n        if (n > 0)\n        {\n        \
    \    if (s.Contains(\"oranges\"))\n                o = s.Count(f => f == \"oranges\"\
    );\n            else\n                o = s.Count(f => f == \"oranges\");\n  \
    \      }\n        Console.WriteLine(\"Number of oranges {0}\", o);\n        //\
    \ Step 2. Count the number of apples\n        if (n > 0)\n        {\n        \
    \    if (s.Contains(\"apples\"))\n                b = s.Count(f => f == \"apples\"\
    );\n            else\n                b = s.Count(f => f == \"apples\");\n   \
    \     }\n        Console.WriteLine(\"Number of apples {0}\", b);\n        // Step\
    \ 3. Calculate the total apples and ", "        int[] num = new int[n];\n    \
    \    int[] sum = new int[n];\n        string[] sa = s.Split(' ');\n        int\
    \ numOfApples = int.Parse(sa[0]);\n        int numOfOranges = int.Parse(sa[1]);\n\
    \        foreach (string fruit in sa) {\n            if (fruit == \"apples\")\n\
    \                num[numOfApples]++;\n            else if (fruit == \"oranges\"\
    )\n                num[numOfOranges]++;\n            else\n                num[sum[fruit.ToString()\
    \ - \"0\"]++]++;\n        }\n        return sum.Where(s => s == 1).FirstOrDefault();",
  "        string input = \"0 apples and 1 oranges\";\n        long total = 0;\n \
    \       int count = 0;\n        foreach (string fruit in input.Split(new[] { '\
    \ ' }, StringSplitOptions.RemoveEmptyEntries)) {\n            total += Convert.ToInt32(fruit);\n\
    \            if (total >= n) count += 1;\n        }\n        return count;", " \
    \       string pattern = @\"\\d+\";\n        var result = Regex.Matches(s, pattern).Cast<Match>().Select(m\
    \ => int.Parse(m.Value));\n        var sum = result.Sum();\n        var count\
    \ = result.Count();\n\n        if (sum == 0) return n;\n        if (count == 0)\
    \ return n;\n        double value = sum * n / (double)count;\n        var result2\
    \ = (int)Math.Floor(value) + 1;\n        return result2;", "        long? fruits\
    \ = new long?();\n        foreach (char c in s) {\n            fruits = fruits.Add(Convert.ToInt64(c));\n\
    \        }\n        return fruits.Where(i => i >= n).Count();", "        int apples\
    \ = 0;\n        int oranges = 0;\n        int mangos = 0;\n        foreach (var\
    \ fruit in s.Split(' '))\n        {\n            if (fruit == \"apples\")\n  \
    \              apples++;\n            else if (fruit == \"oranges\")\n       \
    \         oranges++;\n            else if (fruit == \"mango\")\n             \
    \   mangos++;\n        }\n\n        int apples_total = apples + oranges;\n   \
    \     int oranges_total = apples - oranges;\n\n        if (apples_total >= n)\n\
    \            return apples_total - n;\n        else if (oranges_total >= n)\n\
    \            return oranges_total - n;\n        else\n            return mangos\
    \ - n;", "        string input = s;\n        List<string> strArray = input.Split('\
    \ ').ToList();\n        long apples = 0;\n        long oranges = 0;\n        long\
    \ mangos = 0;\n        foreach (string s in strArray) {\n            switch (s.ToLower())\
    \ {\n                case \"apple\":\n                    apples++;\n        \
    \            break;\n                case \"orange\":\n                    oranges++;\n\
    \                    break;\n                case \"mango\":\n               \
    \     mangos++;\n                    break;\n            }\n        }\n      \
    \  long totalApples = apples;\n        long totalOranges = oranges;\n        long\
    \ totalMangos = mangos;\n        long applePercentage = apples / totalApples *\
    \ 100;\n        long orangePercentage = oranges / totalOranges * 100;\n      \
    \  long mangoPercentage = mangos / totalMangos * 100;\n        long totalPercentage\
    \ = applePercentage + orangePercentage + mangoPercentage;\n        return totalPercentage;",
  "        long apples = 0;\n        long oranges = 0;\n        long mango = 0;\n\n\
    \        foreach (string fruit in s.Split(' ')) \n        {\n            switch(fruit)\
    \ {\n            case \"apples\" : \n                apples += 1;\n          \
    \      break;\n            case \"oranges\" :\n                oranges += 1;\n\
    \                break;\n            case \"mango\" :\n                mango +=\
    \ 1;\n                break;\n            default:\n                Console.WriteLine(\"\
    Unknown fruit '{0}'\", fruit);\n                break;\n            }\n      \
    \  }\n\n        Console.WriteLine(\"apples: {0}; oranges: {1}; mango: {2}\", apples,\
    \ oranges, mango);\n\n        Console.WriteLine(\"{0}\", apples);\n        Console.WriteLine(\"\
    {0}\", oranges);\n        Console.WriteLine(\"{0}\", mango);\n        Console.WriteLine(\"\
    {0}\", apples - oranges);\n        Console.WriteLine(\"{0}\", oranges - apples);\n\
    \        Console.WriteLine(\"{0}\", mango - apples - oranges);\n\n        long\
    \ result = (apples - oranges - mango) / n;\n\n        return result;", "     \
    \   long sum = 0;\n        char[] array = s.ToCharArray();\n        List<Fruit>\
    \ fruits = new List<Fruit>();\n        foreach (char c in array) {\n         \
    \   switch (c) {\n                case 'A': fruits.Add(new Fruit(\"Apple\", 1));\
    \ break;\n                case 'O': fruits.Add(new Fruit(\"Orange\", 3)); break;\n\
    \                case 'M': fruits.Add(new Fruit(\"Mango\", 0)); break;\n     \
    \       }\n        }\n        foreach(Fruit f in fruits) {\n            sum +=\
    \ f.Count;\n        }\n        if (sum < n) return 0;\n        return sum - fruits.Sum(x\
    \ => x.Count);", "        if (String.IsNullOrEmpty(s))\n            throw new\
    \ ArgumentNullException(\"s\");\n\n        if (n <= 0)\n            throw new\
    \ ArgumentOutOfRangeException(\"n\", \"The value must be positive.\");\n\n   \
    \     // Convert the string into a collection of strings that are comma delimited\n\
    \        // and then convert each string into a collection of strings that are\
    \ space\n        // delimited.\n        var strings = s\n            .Split('\
    \ ')\n            .Select(x => x.Split(new[] {','}, StringSplitOptions.RemoveEmptyEntries))\n\
    \            .Select(x => String.Join(\" \", x));\n\n        // Calculate the\
    \ sum of each string in the list\n        var sums = strings\n            .Select(x\
    \ => x.Split(' ')\n                .Sum(y => long.Parse(y)));\n\n        // Find\
    \ the number of fruits that have the largest number of fruit types\n        var\
    \ maxSum = sums\n            .OrderByDescending(y => y)\n            .First();\n\
    \n        // Count how many times each fruit type occurs\n        var sumCounts\
    \ = strings\n            .Select(x => x.Split(' ')\n                .Select(y\
    \ => int.Parse(y))\n                .ToArray())\n            .GroupBy(x => x)\n\
    \            .ToDictionary(x => x.Key, x => x.Count());\n\n        // Sum the\
    \ number of fruits of each fruit type\n        var appleCount = sumCounts.GetValueOrDefault(\"\
    apple\");\n        var orangeCount = sumCounts.GetValueOrDefault(\"orange\");\n\
    \        var mangoCount = sumCounts.GetValueOrDefault(\"mango\");\n\n        //\
    \ The result is the number of mangoes that have occured in the basket\n      \
    \  return (appleCount + orangeCount + mangoCount) * maxSum;", "        long sum\
    \ = 0;\n        foreach (string fruit in s.Split(' and ').Select(t => t.Trim()))\
    \ {\n            int count = Int32.Parse(fruit.Split(\" \").First());\n      \
    \      sum += count * n;\n        }\n        return sum;", "        int count\
    \ = Convert.ToInt32(s);\n        int total = Convert.ToInt32(n.ToString(\"L\"\
    ));\n        long countMango = 0;\n        foreach (var item in GetFruits(s))\n\
    \        {\n            if (item.Item1 == 1 && item.Item2 == 0)\n            \
    \    countMango += count;\n            else if (item.Item1 == 0 && item.Item2\
    \ == 1)\n                countMango += count;\n            else if (item.Item1\
    \ == 2 && item.Item2 == 2)\n                countMango += count;\n        }\n\
    \        return countMango;", "        long num;\n        bool isMoreApples =\
    \ false;\n        bool isMoreOranges = false;\n        bool isMoreMango = false;\n\
    \        bool isEqual = false;\n        bool isEqualNext = false;\n        bool\
    \ isEqualLast = false;\n        long total = 0;\n        long sum = 0;\n     \
    \   foreach (char c in s) {\n            if (c == 'a') {\n                total\
    \ += n;\n                isEqual = true;\n            } else if (c == 'o') {\n\
    \                total += n;\n                isEqual = true;\n            } else\
    \ if (c == 'm') {\n                total += n;\n                isEqual = true;\n\
    \            } else if (c == 's') {\n                total += n;\n           \
    \     isEqual = true;\n            }\n        }\n        foreach (char c in s)\
    \ {\n            if (c == 'a') {\n                sum += n;\n                isMoreApples\
    \ = true;\n            } else if (c == 'o') {\n                sum += n;\n   \
    \             isMoreOranges = true;\n            } else if (c == 'm') {\n    \
    \            sum += n;\n                isMoreMango = true;\n            }\n \
    \       }\n        if (sum != 0) {\n            sum = total / sum;\n         \
    \   num = (long)Math.Floor(sum);\n        } else {\n            num = 0;\n   \
    \     }\n        if (isMoreApples) {\n            num += n;\n        }\n     \
    \   if (isMoreOranges) {\n            num += n;\n        }\n        if (isMoreMango)\
    \ {\n            num += n;\n        }\n        if (total % n == 0) {\n       \
    \     num = total / n;\n        }\n        if (isEqual) {\n            isEqualNext\
    \ = true;\n        }\n        if (isEqual) {\n            isEqualLast = true;\n\
    \        }\n        return num;", "        List<string> list = new List<string>(s.Split('\
    \ ')).ToList();\n        list.RemoveAll(x => x.Equals(\"apples\"));\n        list.RemoveAll(x\
    \ => x.Equals(\"oranges\"));\n        long total = 0;\n        foreach (string\
    \ fruit in list) {\n            total += Convert.ToInt32(fruit);\n        }\n\
    \        List<int> list2 = new List<int>();\n        foreach (string fruit in\
    \ list) {\n            list2.Add(Convert.ToInt32(fruit));\n        }\n       \
    \ long ans = 0;\n        if (s.Contains(\"apples\")) {\n            ans = Convert.ToInt64(total)\
    \ - Convert.ToInt64(list[0]);\n            list2.Remove(list[0]); //\n       \
    \ }\n        if (s.Contains(\"oranges\")) {\n            ans = Convert.ToInt64(total)\
    \ - Convert.ToInt64(list[1]);\n            list2.Remove(list[1]);\n        }\n\
    \        if (list2.Count == 0) {\n            return 0;\n        }\n        if\
    \ (list2.Count >= 2 && list2[1] < list2[0]) {\n            return Convert.ToInt64(list2[0])\
    \ - Convert.ToInt64(list2[1]);\n        } else {\n            return Convert.ToInt64(list2[0]);\n\
    \        }\n", "        var n = Convert.ToInt64(s);\n        var totalApples =\
    \ 0;\n        var totalOranges = 0;\n        var totalMangos = 0;\n        List<string>\
    \ fruits = new List<string>();\n        foreach (char c in s.Trim().ToCharArray())\
    \ {\n            if (char.IsDigit(c)) {\n                totalApples += long.Parse(c.ToString());\n\
    \            } else {\n                totalOranges += long.Parse(c.ToString());\n\
    \            }\n        }\n        foreach (char c in s.Trim().ToCharArray())\
    \ {\n            if (char.IsDigit(c)) {\n                totalMangos += long.Parse(c.ToString());\n\
    \            }\n        }\n        return n;", "        string fruits = s;\n \
    \       long sum = 0;\n\n        foreach(string s in fruits.Split(' ')){\n   \
    \         if(s.Contains(\"apple\")){\n                sum += s.Replace(\"apple\"\
    , \"\").Length;\n            }\n            else if(s.Contains(\"orange\")){\n\
    \                sum += s.Replace(\"orange\", \"\").Length;\n            }\n \
    \           else if(s.Contains(\"mango\")){\n                sum += s.Replace(\"\
    mango\", \"\").Length;\n            }\n        }\n        return sum;", "    \
    \    // Use LINQ to count the numbers of fruits in the basket\n        var apples\
    \ = long.Parse(s.Split(new[] { 'a' }, StringSplitOptions.RemoveEmptyEntries)[0]);\n\
    \        var oranges = long.Parse(s.Split(new[] { 'o' }, StringSplitOptions.RemoveEmptyEntries)[0]);\n\
    \        var mangos = n - apples - oranges;\n        return mangos;", "      \
    \  long answer = 0;\n        string temp = s.Split(' ')[0];\n        string s\
    \ = temp;\n        long apples = 0, oranges = 0, mangos = 0;\n        List<string>\
    \ list = s.Split(' ');\n        foreach (string item in list) {\n            if\
    \ (item == \"apples\")\n                apples += long.Parse(list[list.IndexOf(item)\
    \ + 1]);\n            else if (item == \"oranges\")\n                oranges +=\
    \ long.Parse(list[list.IndexOf(item) + 1]);\n            else if (item == \"mangoes\"\
    )\n                mangos += long.Parse(list[list.IndexOf(item) + 1]);\n     \
    \   }\n\n        answer += (apples * n - oranges) * 2;\n        answer += (apples\
    \ * n - mangos);\n        if (answer < 0)\n            answer = 0;\n        else\
    \ if (answer > n)\n            answer = n;\n        return answer;", "       \
    \ long ret = 0;\n        long apples = 0;\n        long mangos = 0;\n        long\
    \ oranges = 0;\n        foreach (string word in s.Split(' ')) \n        {\n  \
    \          int nf = word.Length;\n            if (nf == 0) continue;\n       \
    \     if (nf == 1) \n            {\n                switch (word[0])\n       \
    \         {\n                    case 'a':\n                        apples = apples\
    \ + 1;\n                        break;\n                    case 'o':\n      \
    \                  oranges = oranges + 1;\n                        break;\n  \
    \                  case 'm':\n                        mangos = mangos + 1;\n \
    \                       break;\n                }\n            }\n           \
    \ else\n            {\n                switch (word[0])\n                {\n \
    \                   case 'a':\n                        apples = apples + Int32.Parse(word.Substring(1,\
    \ nf - 1));\n                        break;\n                    case 'o':\n \
    \                       oranges = oranges + Int32.Parse(word.Substring(1, nf -\
    \ 1));\n                        break;\n                    case 'm':\n      \
    \                  mangos = mangos + Int32.Parse(word.Substring(1, nf - 1));\n\
    \                        break;\n                }\n            }\n        }\n\
    \        long total = apples + oranges + mangos;\n        if (total % n == 0)\
    \ return total / n;\n        else return -1L;", "        // TODO write your solution\n\
    \n        var result = \"\";\n\n        int numOfApples = Convert.ToInt32(s.Split('\
    \ ')[0]);\n        int numOfOranges = Convert.ToInt32(s.Split(' ')[1]);\n    \
    \    long totalNumberOfOranges = numOfOranges * 2;\n        long totalNumberOfApples\
    \ = numOfApples * 3;\n\n        var totalNumberOfMangoFruits = totalNumberOfApples\
    \ + totalNumberOfOranges;\n        long numberOfMangoFruits = (long)(totalNumberOfMangoFruits\
    \ / 3);\n\n        return numberOfMangoFruits;", "        if (s.Length < 10) {\n\
    \            return 0;\n        }\n        long total = 0;\n        long numOfApples\
    \ = 0;\n        long numOfOranges = 0;\n        long numOfMango = 0;\n       \
    \ int i;\n        for (i = 0; i < s.Length; i++) {\n            if (char.IsNumber(s[i]))\
    \ {\n                numOfMango += (long.Parse(s[i]) - '0');\n            } else\
    \ {\n                switch (s[i]) {\n                    case 'a':\n        \
    \                numOfApples++;\n                        break;\n            \
    \        case 'e':\n                        numOfOranges++;\n                \
    \        break;\n                    case 'm':\n                        numOfMango++;\n\
    \                        break;\n                    default:\n              \
    \          break;\n                }\n            }\n        }\n        if (numOfApples\
    \ > numOfOranges) {\n            return numOfMango;\n        } else {\n      \
    \      return numOfApples - numOfOranges;\n        }", "        string s1 = s.Replace(\"\
    apples\", \"\").Replace(\"oranges\", \"\").Replace(\"mango\", \"\");\n       \
    \ long[] a = s1.Split(' ');\n        long[] b = s.Split(' ');\n        long m\
    \ = a[0].Split(' ')[1].Replace(\"apples\", \"\").Replace(\"oranges\", \"\").Replace(\"\
    mango\", \"\").Trim().Length;\n        long n = a[1].Split(' ')[1].Replace(\"\
    apples\", \"\").Replace(\"oranges\", \"\").Replace(\"mango\", \"\").Trim().Length;\n\
    \        long i = 0;\n        while (n < b.Length) {\n            if (i < b.Length\
    \ - 1) {\n                m += b[i + 1].Split(' ')[1].Replace(\"apples\", \"\"\
    ).Replace(\"oranges\", \"\").Replace(\"mango\", \"\").Trim().Length;\n       \
    \     }\n            i++;\n        }\n        return m;", "        long apples\
    \ = 0, oranges = 0;\n        foreach(var fruit in s.Split(' ')) \n           \
    \ if (fruit == \"apples\")\n                apples++;\n            if (fruit ==\
    \ \"oranges\")\n                oranges++;\n\n        return apples + oranges\
    \ - FruitDistribution(s, n);", "        string strArr = s.Split(' ')\n       \
    \     .ToList().Select(x => x.Trim()).ToList();\n        if (strArr.Length !=\
    \ 3)\n        {\n            throw new ApplicationException(\"String length should\
    \ be 3\");\n        }\n        int apple = int.Parse(strArr[0].Trim());\n    \
    \    int orange = int.Parse(strArr[1].Trim());\n        int mango = int.Parse(strArr[2].Trim());\n\
    \        if (apple + orange + mango == 0)\n        {\n            throw new ApplicationException(\"\
    String length should be 3\");\n        }\n        long[] arr = new long[] { apple,\
    \ orange, mango };\n        List<long> arr = new List<long>();\n        foreach\
    \ (int value in arr)\n        {\n            arr.Add(value);\n        }\n    \
    \    var res = 0;\n        int max = 0;\n        for (int i = 0; i < arr.Count();\
    \ i++)\n        {\n            if (arr[i] == 0)\n            {\n             \
    \   continue;\n            }\n            long j = arr[i];\n            while\
    \ (j <= n)\n            {\n                if (j == n)\n                {\n  \
    \                  break;\n                }\n                j += (arr[i] % j);\n\
    \                arr[i]++;\n            }\n            res += j;\n           \
    \ if (j > max)\n            {\n                max = j;\n            }\n     \
    \   }\n        return res;", "        long count = 0;\n        foreach (string\
    \ fruit in s.Split(' and ')) {\n            int num = Convert.ToInt32(fruit);\n\
    \            if (num > 0 && num < n) {\n                count += num;\n      \
    \      }\n        }\n        return count;", "        // TODO implement the logic\
    \ below\n        var apples = s.ToCharArray()\n            .Where(c => c == 'a')\n\
    \            .Count();\n        var oranges = s.ToCharArray()\n            .Where(c\
    \ => c == 'o')\n            .Count();\n        var mangos = s.ToCharArray()\n\
    \            .Where(c => c == 'm')\n            .Count();\n\n        var totalApples\
    \ = apples + oranges;\n        var totalOranges = oranges;\n        var totalMangos\
    \ = mangos;\n\n        totalApples -= mangos;\n        totalMangos += mangos;\n\
    \n        return totalMangos + n;", "        long a = 0;\n        long b = 0;\n\
    \        long c = 0;\n        long d = 0;\n        long x = 0;\n        string\
    \ strArray = s.Split(' ')[0];\n        long[] numArray = strArray.Select(n =>\
    \ Convert.ToInt64(n)).ToArray();\n        string strArray1 = s.Split(' ')[1];\n\
    \        long[] numArray1 = strArray1.Select(n => Convert.ToInt64(n)).ToArray();\n\
    \        if (numArray1.Length == numArray.Length)\n        {\n            foreach\
    \ (var item in numArray)\n            {\n                if (item == numArray1[numArray.Length\
    \ - 1])\n                {\n                    b++;\n                }\n    \
    \        }\n        }\n        else if (numArray1.Length < numArray.Length)\n\
    \        {\n            foreach (var item in numArray1)\n            {\n     \
    \           if (item == numArray[numArray.Length - 1])\n                {\n  \
    \                  c++;\n                }\n            }\n        }\n       \
    \ else\n        {\n            foreach (var item in numArray)\n            {\n\
    \                if (item == numArray1[numArray.Length - 1])\n               \
    \ {\n                    a++;\n                }\n            }\n        }\n \
    \       if (a*b == 0)\n        {\n            x = (a*b + c);\n        }\n    \
    \    else\n        {\n            x = (a + b + c + d);\n        }\n        return\
    \ x;", "        string result = string.Empty;\n        long x = 0;\n        long\
    \ y = 0;\n        string[] sArr = s.Split(' ');\n        foreach (string item\
    \ in sArr) {\n            if (item.Contains(\"apples\")) {\n                x\
    \ = Convert.ToInt32(item);\n            }\n            if (item.Contains(\"oranges\"\
    )) {\n                y = Convert.ToInt32(item);\n            }\n        }\n \
    \       if (y != 0) {\n            y = y - x;\n        }\n        if (x > y) {\n\
    \            long[] sArr = new long[] {x, y};\n            return GetCount(sArr,\
    \ n);\n        }\n        return GetCount(sArr, n);", "        // Create a string\
    \ array to store the apples and oranges in order\n        List<string> fruits\
    \ = new List<string>();\n\n        // Create a list to store the fruit numbers\
    \ in the basket in order\n        List<int> basket = new List<int>();\n\n    \
    \    // Parse the string s and add each fruit to a string array\n        foreach\
    \ (char fruit in s) {\n            switch (fruit) {\n                case 'a':\n\
    \                case 'A':\n                case 'e':\n                case 'E':\n\
    \                case 'i':\n                case 'I':\n                case 'o':\n\
    \                case 'O':\n                    fruits.Add(fruit);\n         \
    \           break;\n            }\n        }\n\n        // Add the apples up to\
    \ the first fruit in the string\n        fruits.RemoveAt(0);\n        foreach\
    \ (char fruit in fruits) {\n            basket.Add(fruits.IndexOf(fruit) + 1);\n\
    \        }\n\n        // Add the oranges up to the first fruit in the string\n\
    \        fruits.RemoveAt(0);\n        foreach (char fruit in fruits) {\n     \
    \       basket.Add(fruits.IndexOf(fruit) + 2);\n        }\n\n        // Now we\
    \ have the numbers in the basket sorted from 0 to N\n        // We can now add\
    \ up all the numbers that are in the basket\n        long sum = 0;\n        foreach\
    \ (int num in basket) {\n            sum += num;\n        }\n\n        // Now\
    \ we have the sum of the numbers in the basket\n        // We now need to remove\
    \ the sum from N, because N is now a \n        // factor of the sum and we are\
    \ trying to find the factor\n        // So we divide N by the sum and multiply\
    \ that by sum again to \n        // find the correct number\n        return n\
    \ * sum / sum;", "        Dictionary<string, long> d = new Dictionary<string,\
    \ long>();\n        foreach (string word in s.Split(' ')){\n            string[]\
    \ v = word.Split(' ');\n            if (v[0] == \"apples\")\n                d.Add(\"\
    apples\", long.Parse(v[1]));\n            if (v[0] == \"oranges\")\n         \
    \       d.Add(\"oranges\", long.Parse(v[1]));\n        }\n        var result =\
    \ Enumerable.Range(0, n).Where(i => !d.ContainsKey(i.ToString())).Sum();\n   \
    \     return result + d.GetValueOrDefault(\"mango\");", "        long[] ans =\
    \ new long[3];\n        int index = 0;\n        long sum = 0;\n        string\
    \ str = s.Replace(\" apples and \", \" apples \").Replace(\" oranges and \", \"\
    \ oranges \").Replace(\" mango fruit and \", \" mango fruit \");\n        string[]\
    \ strArr = str.Split(' ');\n        foreach (string strItem in strArr) {\n   \
    \         long item = long.Parse(strItem);\n            sum += item;\n       \
    \     ans[index] = item;\n            index++;\n        }\n        for (int i\
    \ = 0; i < index; i++)\n            if (ans[i] > n)\n                return 0;\n\
    \        return sum;", "        long applesTotal = 0;\n        long orangesTotal\
    \ = 0;\n        long mangoTotal = 0;\n        List<string> fruits = new List<string>();\n\
    \        string[] fruitsString = s.Split(' ');\n        foreach (string fruit\
    \ in fruitsString) {\n            fruits.Add(fruit);\n            if (fruit ==\
    \ \"apples\") {\n                applesTotal += n;\n            } else if (fruit\
    \ == \"oranges\") {\n                orangesTotal += n;\n            } else if\
    \ (fruit == \"mango\") {\n                mangoTotal += n;\n            }\n  \
    \      }\n        long mangoTotalInBasket = 0;\n        foreach (string fruit\
    \ in fruits) {\n            if (fruit == \"mango\") {\n                mangoTotalInBasket\
    \ += n;\n            }\n        }\n        return (mangoTotalInBasket - mangoTotal);",
  "        string str = s.Trim();\n        string[] strs = str.Split(' ');\n     \
    \   long[] val = new long[strs.Length];\n        for (int i = 0; i < strs.Length;\
    \ i++) {\n            val[i] = long.Parse(strs[i]);\n        }\n        long totalApples\
    \ = 0, totalOranges = 0;\n        long totalMango = 0;\n        long totalFruits\
    \ = 0;\n        for (int i = 0; i < val.Length; i++) {\n            if (val[i]\
    \ == 0) {\n                totalOranges++;\n            } else if (val[i] == 1)\
    \ {\n                totalApples++;\n            } else {\n                totalFruits++;\n\
    \            }\n        }\n        long total = 0;\n        for (int i = 0; i\
    \ < val.Length; i++) {\n            if (val[i] == 0) {\n                totalOranges++;\n\
    \            } else if (val[i] == 1) {\n                totalApples++;\n     \
    \       } else {\n                totalMango++;\n            }\n        }\n  \
    \      long totalMangos = totalMango - totalFruits;\n        return totalMangos;",
  "        long ans = 0;\n\n        var v = s.Split(' ');\n        var count = v.Count(p\
    \ => p == \"apples\" || p == \"oranges\");\n\n        var apples = v.Count(v =>\
    \ v == \"apples\");\n        var oranges = v.Count(v => v == \"oranges\");\n\n\
    \        ans += apples * count;\n        ans += oranges * count;\n\n        return\
    \ ans;", "        if (s.Contains(\"apple\") && s.Contains(\"orange\")) {\n   \
    \         // remove all the apples and oranges \n            s = s.Replace(\"\
    apple\", \"\").Replace(\"orange\", \"\");\n            long sum = long.Parse(s);\n\
    \            long result = long.Parse(s.Replace(\"apple\", \"\").Replace(\"orange\"\
    , \"\").Replace(\" \", \"\"));\n            long product = sum / n;\n        \
    \    long remainder = sum % n;\n            return product + remainder;\n    \
    \    }\n        return 0;", "        if (s.Contains(\"apples\")) {\n         \
    \   return apples(s, n);\n        } else if (s.Contains(\"oranges\")) {\n    \
    \        return oranges(s, n);\n        } else if (s.Contains(\"mango\")) {\n\
    \            return mango(s, n);\n        } else {\n            return 0;\n  \
    \      }", "        long total = 0;\n        foreach (string str in s.Split('\
    \ ')) total += Convert.ToInt32(str);\n        long result = Convert.ToInt32(total);\n\
    \        return result - n;", "        long[] arr = new long[20];\n        long[]\
    \ count = new long[20];\n        Array.Sort(arr.OrderBy(x => x));\n        Array.Sort(count.OrderBy(x\
    \ => x));\n        int count = 0;\n        long sum = 0;\n        foreach (string\
    \ item in s.Split(' '))\n        {\n            sum += Long.Parse(item);\n   \
    \         count++;\n        }\n        long maxsum = sum;\n        string max\
    \ = string.Empty;\n        for (int i = 20; i >= 0; i--)\n        {\n        \
    \    long currentSum = sum - count[i] + arr[i];\n            if (currentSum >\
    \ maxsum)\n            {\n                maxsum = currentSum;\n             \
    \   max = i;\n            }\n        }\n        return max;", "        long sum\
    \ = 0;\n        string t = s;\n        foreach (string s in t) {\n           \
    \ if (s == \"apples\")\n                sum += n;\n            if (s == \"oranges\"\
    )\n                sum += n / 3;\n            if (s == \"mango\")\n          \
    \      sum += n / 5;\n        }\n        return sum;", "        string[] s = Regex.Split(s,\
    \ @\"\\s+\");\n        long totalApples = Convert.ToInt64(s[0]);\n        long\
    \ totalOranges = Convert.ToInt64(s[1]);\n        return n - totalApples - totalOranges;",
  "        int apples = int.Parse(s.Split(' ')[0]);\n        int oranges = int.Parse(s.Split('\
    \ ')[1]);\n        int mangos = apples - oranges;\n        if (apples > oranges)\
    \ {\n            return mangos;\n        }\n        else {\n            return\
    \ mangos + 1;\n        }", "        if (string.IsNullOrWhiteSpace(s)) {\n    \
    \        return 0;\n        }\n        char[] chars = s.ToCharArray();\n     \
    \   int totalNumberOfApples = 0;\n        int totalNumberOfOranges = 0;\n    \
    \    int totalNumberOfMangos = 0;\n        int totalNumberOfFruits = 2;\n    \
    \    int currentApples = 0;\n        int currentOranges = 0;\n        int currentMangos\
    \ = 0;\n        for (int i = 0; i < chars.Length; i++) {\n            string fruit\
    \ = chars[i];\n            string number = fruit.Substring(0,1);\n           \
    \ if (fruit == \"a\") {\n                totalNumberOfApples += 1;\n         \
    \       currentApples += 1;\n            }\n            else if (fruit == \"o\"\
    ) {\n                totalNumberOfOranges += 1;\n                currentOranges\
    \ += 1;\n            }\n            else {\n                totalNumberOfMangos\
    \ += 1;\n                currentMangos += 1;\n            }\n        }\n     \
    \   long apples = totalNumberOfApples * (long)n;\n        long oranges = totalNumberOfOranges\
    \ * (long)n;\n        long mangos = totalNumberOfMangos * (long)n;\n        if\
    \ (apples > oranges) {\n            if (apples > mangos) {\n                return\
    \ apples - mangos;\n            }\n            else {\n                return\
    \ apples - oranges;\n            }\n        }\n        else {\n            if\
    \ (oranges > mangos) {\n                return oranges - mangos;\n           \
    \ }\n            else {\n                return oranges - apples;\n          \
    \  }\n        }", "        long numOfApple = s.Split(' ')[0].Trim().ToInt32();\n\
    \        long numOfOrange = s.Split(' ')[1].Trim().ToInt32();\n        long numOfFruits\
    \ = (n * (n + 1) * (2 * n + 2) / 6 + numOfOrange * numOfApple);\n        return\
    \ numOfFruits;", "        // Create an array of string that represents the \n\
    \        // number of apples and oranges that are in the\n        // basket.\n\
    \        string[] counts = s.Split(' ');\n        long[] num = new long[counts.Length];\n\
    \        for(int i=0; i<counts.Length; i++) {\n            num[i] = Convert.ToInt64(counts[i]);\n\
    \        }\n        long[] num2 = new long[counts.Length];\n        long apples\
    \ = num[0], oranges = num[1];\n        long total = (apples + oranges)*n;\n  \
    \      long count = 0;\n        for(int i=0; i<counts.Length; i++) {\n       \
    \     int total2 = num2[i];\n            for(int j=0; j<counts[i]; j++) {\n  \
    \              total2 += apples;\n            }\n            total2 += oranges;\n\
    \            for(int j=0; j<counts[i]; j++) {\n                total2 += apples;\n\
    \            }\n            total2 += oranges;\n            total2 += apples;\n\
    \            count += (int)Math.Sqrt(total2);\n        }\n        return count;",
  "        // Your code here\n        long[] fruits = new long[n];\n        ArrayList\
    \ a = new ArrayList();\n        string aString = s;\n        string a1 = \"\"\
    ;\n        string a2 = \"\";\n        string a3 = \"\";\n        string a4 = \"\
    \";\n        string a5 = \"\";\n        string a6 = \"\";\n        string a7 =\
    \ \"\";\n        string a8 = \"\";\n        string a9 = \"\";\n        string\
    \ a10 = \"\";\n        string a11 = \"\";\n        string a12 = \"\";\n      \
    \  string a13 = \"\";\n        string a14 = \"\";\n        string a15 = \"\";\n\
    \        string a16 = \"\";\n        string a17 = \"\";\n        string a18 =\
    \ \"\";\n        string a19 = \"\";\n        string a20 = \"\";\n        string\
    \ a21 = \"\";\n        string a22 = \"\";\n        string a23 = \"\";\n      \
    \  string a24 = \"\";\n        string a25 = \"\";\n        string a26 = \"\";\n\
    \        string a27 = \"\";\n        string a28 = \"\";\n        string a29 =\
    \ \"\";\n        string a30 = \"\";\n        string a31 = \"\";\n        string\
    \ a32 = \"\";\n        string a33 = \"\";\n        string a34 = \"\";\n      \
    \  string a35 = \"\";\n        string a36 = \"\";\n        string a37 = \"\";\n\
    \        string a38 = \"\";\n        string a39 = \"\";\n        string a40 =\
    \ \"\";\n        string a41 = \"\";\n        string a42 = \"\";\n        string\
    \ a43 = \"\";\n        string a44 = \"\";\n        string a45 = \"\";\n      \
    \  string a46 = \"\";\n        string a47 = \"\";\n        string a48 = \"\";\n\
    \        string a49 = \"\";\n        string a50 = \"\";\n        string a51 =\
    \ \"\";\n        string a52 = \"\";\n        string a53 = \"\";\n        string\
    \ a54 = \"\";\n        string a55 = \"\";\n        string a56 = \"\";\n      \
    \  string a57 = \"\";\n        string a58 = \"\";\n        string a59 = \"\";\n\
    \        string a60 = \"\";\n        string a61 = \"\";\n        string a62 =\
    \ \"\";\n        string a63 = \"\";\n        string a64 = \"\";\n        string\
    \ a65 = \"\";\n        string a66 = \"\";\n        string a67 = \"\";\n      \
    \  string a68 = \"\";\n        string a69 = \"\";\n        string a70 = \"\";\n\
    \        string a71 = \"\";\n        string a72 = \"\";\n        string a73 =\
    \ \"\";\n        string a74 = \"\";\n        string a75 = \"\";\n        string\
    \ a76 = \"\";\n        string a77 = \"\";\n        string a78 = \"\";\n      \
    \  string a79 = \"\";\n        string a80 = \"\";\n        string a81 = \"\";\n",
  "        long sum = 0;\n        foreach (string fruit in s.Split(' '))\n       \
    \     sum += Int64.Parse(fruit);\n        return sum % n;", "        long result\
    \ = 0;\n        foreach (string fruit in s.Split(' '))\n            if (fruit[0]\
    \ != 'a' && fruit[1] != 'a' && fruit[2] != 'o' && fruit[3] != 'o')\n         \
    \       result++;\n        return result / n;", "        // Your code here\n \
    \       List<string> a = s.Split(' ')\n                          .ToList()\n \
    \                         .Where(x => !String.IsNullOrEmpty(x))\n            \
    \              .ToList();\n        List<string> b = s.Split(' ')\n           \
    \               .ToList()\n                          .Where(x => !String.IsNullOrEmpty(x))\n\
    \                          .ToList();\n        long m = 0, l = 0;\n        for\
    \ (int i = 0; i < a.Count(); i++) {\n            int a1 = Convert.ToInt32(a[i]);\n\
    \            int b1 = Convert.ToInt32(b[i]);\n            if (a1 == 0) {\n   \
    \             m++;\n            }\n            if (b1 == 0) {\n              \
    \  l++;\n            }\n        }\n        long o = n - m - l;\n        return\
    \ o;", "        char[] input = s.ToCharArray();\n        ArrayList fruitList =\
    \ new ArrayList();\n        for (int i = 0; i < input.Length; i++) {\n       \
    \     if (input[i] == 'o') {\n                fruitList.Add(new Fruit(Orange));\n\
    \            } else if (input[i] == 'a') {\n                fruitList.Add(new\
    \ Fruit(Apple));\n            } else {\n                fruitList.Add(new Fruit(Mango));\n\
    \            }\n        }\n        long count = 0;\n        Fruit fruit = new\
    \ Fruit();\n        foreach (Fruit f in fruitList) {\n            if (fruit.GetCount()\
    \ > n) {\n                count = count + fruit.GetCount() - (n - fruit.GetCount());\n\
    \                fruit.Reset();\n            }\n            fruit = new Fruit();\n\
    \            fruit.Add(f);\n        }\n        return count;", "        // Your\
    \ code goes here\n        long apple = 0;\n        long orange = 0;\n        long\
    \ mango = 0;\n        string[] numbers = Regex.Split(s, \" apples and \");\n \
    \       string[] oranges = Regex.Split(numbers[1], \" and oranges\");\n      \
    \  string[] apples = Regex.Split(numbers[0], \" and \");\n        foreach (string\
    \ item in oranges)\n        {\n            if (int.TryParse(item, out orange))\n\
    \            {\n                mango = orange + mango;\n            }\n     \
    \   }\n        foreach (string item in apples)\n        {\n            if (int.TryParse(item,\
    \ out apple))\n            {\n                mango = apple + mango;\n       \
    \     }\n        }\n        return mango;", "        // your code here\n     \
    \   var input = s.Split(' ').ToList();\n        long apples = Convert.ToInt64(input[0]);\n\
    \        long oranges = Convert.ToInt64(input[1]);\n        var result = (oranges\
    \ / apples)*n;\n        Debug.Assert(result >= 0);\n        Debug.Assert(result\
    \ <= n);\n        return result;", "        long apples = 0, oranges = 0, mangos\
    \ = 0, total = 0;\n        // Loop through your string and count the number of\
    \ apples, oranges, and mango\n        for (int i = 0; i < s.Length; i++) {\n \
    \           switch (s[i]) {\n                case 'a':\n                case 'A':\n\
    \                    apples++;\n                    break;\n                case\
    \ 'o':\n                case 'O':\n                    oranges++;\n          \
    \          break;\n                case 'm':\n                case 'M':\n    \
    \                mangos++;\n                    break;\n                default:\n\
    \                    break;\n            }\n            // Add the amount of apples,\
    \ oranges, and mangos together and \n            // the amount of apples and oranges\
    \ together and store the total amount in a variable\n            total += apples\
    \ + oranges + mangos;\n        }\n        // return the number of mango\n    \
    \    return mangos;", "        if (s.Length < 10) {\n            return 0;\n \
    \       }\n        var counts = new int[10];\n        var fruits = s.ToCharArray();\n\
    \        foreach (var fruit in fruits) {\n            counts[fruit - 'a']++;\n\
    \        }\n        var sum = 0;\n        for (var i = counts.Length - 1; i >=\
    \ 0; i--) {\n            sum += counts[i];\n            if (sum == n) {\n    \
    \            return i;\n            }\n        }\n        return 0;", "      \
    \  if (String.IsNullOrEmpty(s))\n            return 0;\n        var numbers =\
    \ FruitDistribution(s, n, out int apple, out int orange, out int mango);\n   \
    \     if (apple == 0 && orange == 0 && mango == 0)\n            return 0;\n  \
    \      if (mango < apple)\n            return mango;\n        if (apple < orange)\n\
    \            return apple;\n        return orange;", "        var totalApples\
    \ = 0;\n        var totalOranges = 0;\n        var totalMango = 0;\n        foreach\
    \ (var word in s.Split(' '))\n        {\n            switch (word)\n         \
    \   {\n                case \"apples\":\n                    totalApples += long.Parse(word);\n\
    \                    break;\n                case \"oranges\":\n             \
    \       totalOranges += long.Parse(word);\n                    break;\n      \
    \          case \"mango\":\n                    totalMango += long.Parse(word);\n\
    \                    break;\n            }\n        }\n        long[] fruits =\
    \ new long[3];\n        fruits[0] = totalApples; fruits[1] = totalOranges; fruits[2]\
    \ = totalMango;\n        int numFruits = fruits.Sum();\n        return (long)((numFruits\
    \ % n) == 0 ? 0 : n - numFruits);", "        if (string.IsNullOrWhiteSpace(s)\
    \ || n < 0) \n            return -1;\n\n        var orangesCount = s.Split(' ').ToList().Where(x\
    \ => x.Trim().StartsWith(\"oranges\")).Count();\n        var applesCount = s.Split('\
    \ ').ToList().Where(x => x.Trim().StartsWith(\"apples\")).Count();\n        double\
    \ oranges = Convert.ToDouble(s.Split(' ').ToList().Where(x => x.Trim().StartsWith(\"\
    oranges\")).First());\n        double apples = Convert.ToDouble(s.Split(' ').ToList().Where(x\
    \ => x.Trim().StartsWith(\"apples\")).First());\n\n        double sumApples =\
    \ 0;\n        double sumOranges = 0;\n\n        foreach (var value in s.Split('\
    \ ').Skip(1))\n        {\n            var count = Convert.ToDouble(value);\n\n\
    \            sumApples += count;\n            sumOranges += Math.Abs(oranges -\
    \ count);\n        }\n\n        double result = (apples * apples * (sumApples\
    \ * sumOranges)) / (oranges * oranges);\n\n        return Math.Abs(result - n)\
    \ < .01 ? (long)result : -1;", "        // Complete the method here:\n       \
    \ long apple = 0;\n        long orange = 0;\n        long mango = 0;\n       \
    \ string numbers = s.Split(' ')[0];\n        long appleNumbers = long.Parse(numbers);\n\
    \        long orangeNumbers = appleNumbers * 2;\n        apple = appleNumbers;\n\
    \        orange = orangeNumbers;\n        if (appleNumbers > orangeNumbers) {\n\
    \            mango = appleNumbers - orange;\n        }\n        return mango;",
  "        var numApplesAndOranges = s.Split(' and ').Where(s => s.StartsWith(\"apples\"\
    ));\n        var numOranges = s.Split(' and ').Where(s => s.StartsWith(\"oranges\"\
    ));\n        var sumApplesAndOranges = numApplesAndOranges.Sum(x => Convert.ToInt32(x.Substring(3)));\n\
    \        var sumOranges = numOranges.Sum(x => Convert.ToInt32(x.Substring(0, 3)));\n\
    \        return (n * sumOranges) + (numApplesAndOranges.Count() * sumApplesAndOranges);",
  "        // convert string to int\n        string[] arr = s.Split(' ');\n      \
    \  int[] intArray = new int[arr.Length];\n        for (int i = 0; i < arr.Length;\
    \ i++) {\n            intArray[i] = Convert.ToInt32(arr[i]);\n        }\n    \
    \    // initialize vars\n        long apples = 0;\n        long oranges = 0;\n\
    \        long total = 0;\n        // loop and check all items\n        for (int\
    \ i = 0; i < intArray.Length; i++) {\n            if (intArray[i] == 1) {\n  \
    \              oranges++;\n                total++;\n            }\n         \
    \   if (intArray[i] == 2) {\n                apples++;\n                total++;\n\
    \            }\n        }\n        // return the result \n        return total\
    \ / n;", "        string ns = n.ToString();\n        long num = long.Parse(ns);\n\
    \        long result = 1;\n        if (s.Contains(\"apple\"))\n        {\n   \
    \         result += num;\n        }\n        if (s.Contains(\"orange\"))\n   \
    \     {\n            result += num;\n        }\n        return result;", "   \
    \     string fruits = \"apples oranges mango\";\n        long apples = 0L, oranges\
    \ = 0L, mango = 0L;\n        StringBuilder sb = new StringBuilder();\n       \
    \ foreach (var fruit in s.Split(' '))\n        {\n            int number;\n  \
    \          if (fruits.IndexOf(fruit) >= 0)\n            {\n                number\
    \ = Convert.ToInt64(fruit);\n                switch (fruit)\n                {\n\
    \                    case \"apples\":\n                        apples += number;\n\
    \                        break;\n                    case \"oranges\":\n     \
    \                   oranges += number;\n                        break;\n     \
    \               case \"mango\":\n                        mango += number;\n  \
    \                      break;\n                }\n            }\n        }\n \
    \       long[] result = new long[] { apples, oranges, mango };\n        Array.Sort(result);\n\
    \        long count = 0;\n        for (int i = 0; i < 3; i++)\n        {\n   \
    \         if (result[i] == 0)\n            {\n                count++;\n     \
    \       }\n        }\n        long result = mango;\n        if (count > 0)\n \
    \       {\n            long tmp = 0;\n            for (int i = 0; i < 3; i++)\n\
    \            {\n                if (result[i] > 0)\n                {\n      \
    \              tmp += result[i];\n                }\n            }\n         \
    \   result -= tmp;\n        }\n        Console.WriteLine(\"{0}\", result);\n \
    \       return result;", "        long apples = 0, oranges = 0, mangos = 0, total\
    \ = 0;\n        // use split method to split the string and assign the elements\
    \ to their respective variables\n        int[] numbers = s.Split(' ').Select(s\
    \ => int.Parse(s)).ToArray();\n        // if both oranges and apples are in the\
    \ string, then calculate apples and oranges\n        if (numbers.Length > 1) {\n\
    \            apples = numbers[0];\n            oranges = numbers[1];\n       \
    \ }\n        // if oranges and apples are not in the string, then calculate the\
    \ number of mangos in the basket\n        else {\n            // calculate number\
    \ of mangos in the basket\n            apples = numbers[0];\n            oranges\
    \ = numbers[1];\n            mangos = n - oranges - apples;\n        }\n     \
    \   // calculate the number of mangos in the basket\n        total = mangos +\
    \ oranges + apples;\n        return total;", "        // Your code here\n    \
    \    long sum = 0;\n        int apples = 0;\n        int oranges = 0;\n      \
    \  int count = 0;\n        foreach (var item in s.Split(' '))\n        {\n   \
    \         if (item == \"apples\")\n            {\n                apples++;\n\
    \            }\n            else if (item == \"oranges\")\n            {\n   \
    \             oranges++;\n            }\n            else\n            {\n   \
    \             count++;\n            }\n        }\n        sum += apples * n;\n\
    \        sum += oranges * n;\n        if (oranges + apples > count)\n        {\n\
    \            sum += count - oranges - apples;\n        }\n        return sum;",
  "        long applesNum = Int64.Parse(s.Substring(0, s.IndexOf(\" apples and \"\
    )));\n        long orangesNum = Int64.Parse(s.Substring(s.IndexOf(\" apples and\
    \ \") + 9, s.Length - (s.IndexOf(\" apples and \") + 9)));\n        long mangoNum\
    \ = Int64.Parse(s.Substring(s.IndexOf(\" oranges and \") + 9, s.Length - (s.IndexOf(\"\
    \ oranges and \") + 9)));\n        long numApples = applesNum + orangesNum;\n\
    \        long numMango = mangoNum;\n        long numOranges = orangesNum;\n  \
    \      if (applesNum > 0) {\n            double apple = applesNum / n;\n     \
    \       apple = Convert.ToDouble(apple);\n            applesNum = applesNum %\
    \ n;\n            if (apples == 0) {\n                applesNum = 0;\n       \
    \     }\n            numApples += apple;\n        }\n        if (orangesNum >\
    \ 0) {\n            double orange = orangesNum / n;\n            orange = Convert.ToDouble(orange);\n\
    \            orangesNum = orangesNum % n;\n            if (oranges == 0) {\n \
    \               orangesNum = 0;\n            }\n            numOranges += orange;\n\
    \        }\n        if (numMango > 0) {\n            double mango = mangoNum /\
    \ n;\n            mango = Convert.ToDouble(mango);\n            mangoNum = mangoNum\
    \ % n;\n            if (mango == 0) {\n                mangoNum = 0;\n       \
    \     }\n            numMango += mango;\n        }\n        return numMango;",
  "        long apples = 0;\n        long oranges = 0;\n        long mangoes = 0;\n\
    \        string pattern = \"apples\";\n        string pattern2 = \"oranges\";\n\
    \        string pattern3 = \"mangoes\";\n        Regex regex = new Regex(@\"([\\\
    d]+) apples\", RegexOptions.Compiled);\n        Regex regex2 = new Regex(@\"([\\\
    d]+) oranges\", RegexOptions.Compiled);\n        Regex regex3 = new Regex(@\"\
    ([\\d]+) mangoes\", RegexOptions.Compiled);\n        MatchCollection matches =\
    \ regex.Matches(s);\n        MatchCollection matches2 = regex2.Matches(s);\n \
    \       MatchCollection matches3 = regex3.Matches(s);\n\n        foreach (Match\
    \ match in matches) {\n            apples += long.Parse(match.Groups[1].Value);\n\
    \        }\n\n        foreach (Match match2 in matches2) {\n            oranges\
    \ += long.Parse(match2.Groups[1].Value);\n        }\n\n        foreach (Match\
    \ match3 in matches3) {\n            mangoes += long.Parse(match3.Groups[1].Value);\n\
    \        }\n        return (apples + oranges + mangoes - n);", "        // Complete\
    \ the implementation of this method.\n        // Write your code here.\n     \
    \   var f = (new string(s.Reverse().ToArray())).ToArray();\n        var v = new\
    \ List<int>();\n        var i = 0;\n        for (i; i < f.Length; i++) {\n   \
    \         v.Add(f[i] - '0');\n        }\n        if (v == null || v.Count() !=\
    \ n) {\n            return 0;\n        }\n        var fr = new string[v];\n  \
    \      for (i; i < v.Count; i++) {\n            fr[i] = string.Join(\"\",\n  \
    \              v.Select(x => x.ToString().ToLower()).ToArray()\n             \
    \       .Zip(v.Select(x => x.ToString().ToLower()), (a, b) => a + b)\n       \
    \             .Select(x => x.ToString())\n                    .ToArray());\n \
    \       }\n        var r = new string[v.Count]\n            , j = 0;\n       \
    \ for (i; i < v.Count; i++) {\n            r[j] = fr[i];\n            j = j +\
    \ 1;\n        }\n        var m = v.Count();\n        var r = 0;\n        var c\
    \ = 0;\n        for (i; i < v.Count; i++) {\n            if (r[i - 1] != r[i])\
    \ {\n                r[c] = r[i];\n                c++;\n            }\n     \
    \   }\n        return c + 1;", "        var counts = new HashSet<long>();\n  \
    \      var lines = s.Split(',');\n        foreach (string line in lines) {\n \
    \           var parts = line.Trim().Split(' ');\n            var count = long.Parse(parts[0]);\n\
    \            counts.Add(count);\n        }\n\n        // count the total number\
    \ of mango fruits\n        var totalMango = n;\n        if (totalMango < counts.Count)\
    \ return -1;\n\n        // sort the number of mango fruits by descending\n   \
    \     var mangoCountList = counts\n            .Where(c => c >= totalMango)\n\
    \            .OrderByDescending(c => c)\n            .ToList();\n\n        //\
    \ calculate the number of mango fruits\n        var mangoCount = mangoCountList[0];\n\
    \        foreach (var c in mangoCountList.Skip(1)) {\n            mangoCount +=\
    \ c;\n        }\n        return mangoCount;", "        long sum = 0;\n       \
    \ foreach (var item in s.Split(' '))\n            sum += Convert.ToInt64(item);\n\
    \        return n * sum / 2;", "        long applesToFind=s.Split(' ')[0].Split('\
    \ ')[0];\n        long orangesToFind=s.Split(' ')[0].Split(' ')[1];\n        long\
    \ m=0;\n        List<string> fruits=new List<string>();\n        fruits.Add(string.Join(\"\
    \ \",s.Split(' ')[1].Split(' ')));\n        fruits.Add(string.Join(\" \",s.Split('\
    \ ')[2].Split(' ')));\n        fruits.Add(string.Join(\" \",s.Split(' ')[3].Split('\
    \ ')));\n        foreach(string fruit in fruits) {\n            int count1=apples.Count(x=>x==fruit);\n\
    \            int count2=oranges.Count(x=>x==fruit);\n            if (count1>=applesToFind)\
    \ m+=count1;\n            if (count2>=orangesToFind) m+=count2;\n        }\n \
    \       return m;", "        Dictionary<string, long> fruitCounts = new Dictionary<string,\
    \ long>();\n        var splits = s.Split(' ');\n        foreach (var split in\
    \ splits)\n        {\n            long num = 0;\n            if (split.Length\
    \ > 0)\n            {\n                var split2 = split.Split(' ');\n      \
    \          foreach (var split2 in split2)\n                {\n               \
    \     num += (long.Parse(split2));\n                }\n            }\n       \
    \     fruitCounts.Add(split, num);\n        }\n        long sum = fruitCounts.Values.Sum();\n\
    \        var result = 0;\n        if (sum > n)\n        {\n            foreach\
    \ (KeyValuePair<string, long> v in fruitCounts)\n            {\n             \
    \   if (v.Value > n)\n                {\n                    result += v.Value;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        int[] arr = new int[s.Length];\n        var arr\
    \ = s.Replace(\"apples \", \"0\")\n            .Replace(\"oranges \", \"1\")\n\
    \            .Split(' ')\n            .Select(x => Convert.ToInt32(x)).ToArray();\n\
    \        \n        for (int i = 0; i < arr.Length; i++) {\n            arr[i]\
    \ += 1;\n        }\n\n        long res = n;\n        for (int i = 0; i < arr.Length;\
    \ i++) {\n            int d = arr[i] % 3;\n            res -= d;\n           \
    \ res /= 3;\n        }\n        \n        return res;", "        \n        List<string>\
    \ a = s.Split(' ');\n        long result = 0;\n        \n        foreach (string\
    \ item in a) {\n            int count = int.Parse(item);\n            if (count\
    \ == 0)\n                count = 1;\n            result += count * n;\n      \
    \  }\n        return result;", "        // Use string manipulation to convert\
    \ the given string into a number \n        // You can use a regex to make it more\
    \ robust but this problem doesn't\n        // require that much complication\n\
    \        var apples = s.Split(' ')[0].Replace(\"apples\",\"\").Replace(\"and\"\
    ,\"\").Trim();\n        var oranges = s.Split(' ')[1].Replace(\"oranges\",\"\"\
    ).Replace(\"and\",\"\").Trim();\n        var fruits = s.Split(' ')[2].Replace(\"\
    apples\",\"\").Replace(\"oranges\",\"\").Replace(\"and\",\"\").Trim();\n     \
    \   // You need to convert the string into a number (Long) \n        // You can\
    \ use the TryParse method but this problem doesn't require that much \n      \
    \  // complication\n        if (apples.Length != 0) {\n            apples = long.Parse(apples);\n\
    \        }\n        if (oranges.Length != 0) {\n            oranges = long.Parse(oranges);\n\
    \        }\n        if (fruits.Length != 0) {\n            fruits = long.Parse(fruits);\n\
    \        }\n        // You need to use the mod operator to find the remainder\
    \ of \n        // the apples and oranges\n        if (fruits % apples != 0) {\n\
    \            apples--;\n        }\n        if (fruits % oranges != 0) {\n    \
    \        oranges--;\n        }\n        // You need to use the mod operator to\
    \ find the remainder of \n        // the apples and oranges\n        if (fruits\
    \ % apples != 0) {\n            apples--;\n        }\n        if (fruits % oranges\
    \ != 0) {\n            oranges--;\n        }\n        // You will use the mod\
    \ operator again on the oranges number and the fruits number\n        if (fruits\
    \ % apples != 0) {\n            apples--;\n        }\n        if (fruits % oranges\
    \ != 0) {\n            oranges--;\n        }\n        // If the fruits number\
    \ is 0, then the result is fruits / apples \n        // and fruits % apples is\
    \ the apples\n        // If the fruits number is 0 then the result is fruits /\
    \ oranges and fruits % oranges is the oranges\n        // If the fruits number\
    \ is 0 then fruits % apples is 0 since no oranges\n        // If the fruits number\
    \ is 0 then fruits % oranges is 0 since no apples\n        var result = (apples\
    \ + oranges) - (fruits % apples) - (fruits % oranges);\n        // You need to\
    \ convert result into a number using long.Parse or \n        // Int64.Parse. You\
    \ can also use Convert.ToInt64 if you have \n        // the correct System.Numerics\
    \ reference\n        return result;", "        int oranges = 0, apples = 0, mangos\
    \ = 0;\n        long total = 0, total = long.Parse(s.Replace(\" apples and \"\
    , string.Empty).Replace(\" oranges and \", string.Empty).Replace(\"apples, oranges,\
    \ and \", string.Empty));\n\n        if (total > n) {\n            return 0;\n\
    \        }\n\n        total = total * 1000;\n\n        foreach (string word in\
    \ s.Split(' '))\n        {\n            if (word.Equals(\"oranges\"))\n      \
    \      {\n                oranges++;\n            }\n            else if (word.Equals(\"\
    apples\"))\n            {\n                apples++;\n            }\n        \
    \    else if (word.Equals(\"mango\"))\n            {\n                mangos++;\n\
    \            }\n        }\n\n        if (apples == 0 && oranges == 0 && mangos\
    \ == 0)\n        {\n            return 0;\n        }\n\n        if (apples ==\
    \ 0)\n        {\n            return oranges;\n        }\n        else if (oranges\
    \ == 0)\n        {\n            return apples;\n        }\n        else\n    \
    \    {\n            total = total - (apples * 1000) - oranges * 500;\n\n     \
    \       if (total > n)\n            {\n                return 0;\n           \
    \ }\n            else if (apples > oranges)\n            {\n                return\
    \ apples;\n            }\n            else if (apples < oranges)\n           \
    \ {\n                return oranges;\n            }\n\n            double avg\
    \ = total / apples;\n            int x = (int)(avg / 100);\n            avg =\
    \ avg - (x * 100);\n\n            double y = total / oranges;\n            int\
    \ y = (int)(y / 100);\n            y = y - (y * 100);\n\n            double z\
    \ = total / mangos;\n            int z = (int)(z / 100);\n            z = z -\
    \ (z * 100);\n\n            if (x == 0 && y == 0 && z == 0)\n            {\n \
    \               return 0;\n            }\n\n            if (x == 0)\n        \
    \    {\n                return apples;\n            }\n            else if (y\
    \ == 0)\n            {\n                return oranges;\n            }\n     \
    \       else\n            {\n                return mangos;\n            }\n \
    \       }", "        long sum = 0;\n        if (s.Contains(\"apples\")) {\n  \
    \          sum += ((long.Parse(s.Split(' ')[0])) * n);\n        }\n        if\
    \ (s.Contains(\"oranges\")) {\n            sum += ((long.Parse(s.Split(' ')[1]))\
    \ * n);\n        }\n        if (s.Contains(\"mango\")) {\n            sum -= (long.Parse(s.Split('\
    \ ')[2]) * n);\n        }\n        return sum;", "        // Your code goes here\n\
    \        long a = 0;\n        long b = 0;\n        long c = 0;\n        long d\
    \ = 0;\n        long total = 0;\n        long apples = 0;\n        long oranges\
    \ = 0;\n        long mangos = 0;\n        string x = \"0123456789ABCDEF\";\n \
    \       foreach (string s in s.Split(' ')) {\n            long a = long.Parse(s);\n\
    \            if (a > apples) {\n                apples = a;\n            }\n \
    \           if (a > oranges) {\n                oranges = a;\n            }\n\
    \            if (a > mangos) {\n                mangos = a;\n            }\n \
    \       }\n        string s1 = \"\";\n        string s2 = \"\";\n        long\
    \ t = 0;\n        string ss = \"\";\n        long n = n;\n        long z = n;\n\
    \        apples = apples % z;\n        oranges = oranges % z;\n        Console.WriteLine(\"\
    apples:\" + apples);\n        Console.WriteLine(\"oranges:\" + oranges);\n   \
    \     Console.WriteLine(\"mangos:\" + mangos);\n        long totalmangos = apples\
    \ + (oranges / 2);\n        string s1 = \"0\" + apples.ToString();\n        string\
    \ s2 = apples.ToString() + \",\";\n        string s3 = s1.Substring(1);\n    \
    \    string s4 = \"apples,\";\n        string s5 = \"oranges,\";\n        string\
    \ s6 = \"mangos,\";\n        apples = apples - apples % z;\n        oranges =\
    \ oranges - oranges % z;\n        Console.WriteLine(\"apples:\" + apples);\n \
    \       Console.WriteLine(\"oranges:\" + oranges);\n        Console.WriteLine(\"\
    mangos:\" + mangos);\n        totalmangos = totalmangos % z;\n        string s1\
    \ = \"0\" + totalmangos.ToString();\n        string s2 = totalmangos.ToString()\
    \ + \",\";\n        string s3 = s1.Substring(1);\n        string s4 = \"mangos,\"\
    ;\n        string s5 = \"oranges,\";\n        string s6 = \"apples,\";\n     \
    \   totalmangos = totalmangos - totalmangos % z;\n        Console.WriteLine(\"\
    apples:\" + apples);\n        Console.WriteLine(\"oranges:\" + oranges);\n   \
    \     Console.WriteLine(\"mangos:\" + mangos);\n        total = apples + (oranges\
    \ / 2) + totalmangos;\n        string s1 = \"0\" + total.ToString();\n       \
    \ string s2 = total.ToString() + \",\";\n        string s3 = s1.Substring(1);\n\
    \        string s4 = \"mangos,\";\n        string s5 = \"oranges,\";\n       \
    \ string s6 = \"apples,\";\n        total = total - total % z;\n        Console.WriteLine(\"\
    apples:", "        if (string.IsNullOrEmpty(s))\n            throw new ArgumentException(\"\
    Invalid string parameter\");\n        if (n < 0)\n            throw new ArgumentException(\"\
    Invalid negative number\");\n        var applesAndOranges = s.Split(' ')\n   \
    \                               .Where(x => x.ToLowerInvariant() == \"apples\"\
    \ || x.ToLowerInvariant() == \"oranges\")\n                                  .TakeWhile(x\
    \ => x == \"apple\" || x == \"orange\")\n                                  .Take(2).ToList();\n\
    \n        var applesAndOrangesCount = applesAndOranges.Count();\n        var applesAndOrangesSum\
    \ = applesAndOrangesCount == 0 ? 0 : applesAndOrangesSum.Sum(x => Convert.ToInt32(x));\n\
    \        if (applesAndOrangesCount == 1) {\n            return applesAndOrangesCount\
    \ == 0 ? (long)0 : (n-applesAndOrangesSum);\n        }\n        var applesAndOrangesSumPercent\
    \ = (double)applesAndOrangesSum / applesAndOrangesCount;\n        var applesAndOrangesCountPercent\
    \ = (double)applesAndOrangesCount / n;\n        return Math.Round(applesAndOrangesCountPercent\
    \ * applesAndOrangesSumPercent * applesAndOrangesSum / n, 2);", "        // TODO:\n\
    \        // Write your code here\n        long sum = 0;\n        bool isOrange\
    \ = true;\n        foreach (char c in s.ToCharArray()) {\n            if (isOrange)\
    \ {\n                sum += (long)'o' + (long)c - 48;\n            } else {\n\
    \                sum += (long)'a' + (long)c - 48;\n            }\n           \
    \ isOrange = !isOrange;\n        }\n        return sum + n / 2;", "        var\
    \ sum = s.Split(' ')\n            .Select(x => long.Parse(x))\n            .Sum();\n\
    \        return sum * (long)n;", "        long a = 0;\n        long b = 0;\n \
    \       long c = n;\n        long temp = 0;\n        string[] sArray = s.Split('\
    \ ');\n        foreach (string string in sArray) {\n            int iArray = Convert.ToInt32(string);\n\
    \            if (iArray > 0) {\n                a += iArray; //apple\n       \
    \         b += iArray; //orange\n            }\n        }\n        return CalculateMango(temp,\
    \ a, b, c);", "        long apples = Int32.Parse(s.Split(' ')[0]);\n        long\
    \ oranges = Int32.Parse(s.Split(' ')[1]);\n        long totalOranges = apples\
    \ + oranges;\n        if (totalOranges > 0) {\n            double avrg = oranges\
    \ / totalOranges;\n            return n;\n        }\n        if (totalOranges\
    \ <= 0) {\n            double avrg = apples / totalOranges;\n            return\
    \ n;\n        }\n        if (apples <= 0) {\n            return n;\n        }\n\
    \        if (apples > 0) {\n            double avrg = apples / totalOranges;\n\
    \            return n;\n        }\n        double avrg = apples / totalOranges;\n\
    \        return n;", "        long total = 0;\n        foreach (string fruits\
    \ in s.Split(' and '))\n            if (fruits.Length > 0)\n                total\
    \ += int.Parse(fruits.Substring(0, fruits.IndexOf(\" \")));\n        if (total\
    \ > n)\n            return -1;\n        if (total < n)\n            return 0;\n\
    \        List<string> apples = Enumerable.Range(0, total).Select(i => \"apple\"\
    ).ToList();\n        List<string> mangos = Enumerable.Range(total - n, total -\
    \ n).Select(i => \"mango\").ToList();\n        List<string> oranges = Enumerable.Range(total\
    \ - n - 1, total - n - 1).Select(i => \"orange\").ToList();\n        List<string>\
    \ result = new List<string>();\n        foreach (string fruit in apples)\n   \
    \         result.Add(fruit);\n        foreach (string fruit in mangos)\n     \
    \       result.Add(fruit);\n        foreach (string fruit in oranges)\n      \
    \      result.Add(fruit);\n        return result.Count();", "        // write\
    \ your code here\n        long apples = Int64.Parse(s.Split(' ')[0]);\n      \
    \  long oranges = Int64.Parse(s.Split(' ')[1]);\n        long fruits = apples\
    \ + oranges;\n        long numOfMangoFruits = fruits / 4;\n        long remainder\
    \ = fruits % 4;\n        return numOfMangoFruits + remainder;", "        long\
    \ apples = 0;\n        long oranges = 0;\n        long mangos = 0;\n        string[]\
    \ words = s.Split(' ');\n        if (words.Length > 0) {\n            apples =\
    \ Convert.ToInt64(words[0]);\n            oranges = Convert.ToInt64(words[1]);\n\
    \        }\n        if (apples > 0) {\n            mangos = apples * 2;\n    \
    \    }\n        if (oranges > 0) {\n            mangos = apples * 2;\n       \
    \ }\n        if (mangos > n) {\n            mangos = n;\n        }\n        return\
    \ mangos;", "        long total = 0;\n        int apples = 0;\n        int oranges\
    \ = 0;\n        int mango = 0;\n        int counter = 0;\n        string str =\
    \ s;\n        for (int i = 0; i < str.Length; i++) {\n            counter++;\n\
    \            switch (str[i]) {\n                case 'a':\n                  \
    \  apples++;\n                    break;\n                case 'o':\n        \
    \            oranges++;\n                    break;\n                case 'm':\n\
    \                    mango++;\n                    break;\n                default:\n\
    \                    break;\n            }\n        }\n\n        total = (apples\
    \ * n) + (oranges * n);\n        if (total > n) total -= n;\n\n        apples\
    \ = 0;\n        oranges = 0;\n        mango = 0;\n        for (int i = 0; i <\
    \ str.Length; i++) {\n            counter++;\n            switch (str[i]) {\n\
    \                case 'a':\n                    apples++;\n                  \
    \  break;\n                case 'o':\n                    oranges++;\n       \
    \             break;\n                case 'm':\n                    mango++;\n\
    \                    break;\n                default:\n                    break;\n\
    \            }\n        }\n\n        if (mango < total) return mango + n;\n  \
    \      return mango;", "        long apples = 0;\n        long oranges = 0;\n\
    \        long mango = 0;\n        bool hasApple = s.Contains(\"apple\");\n   \
    \     bool hasOrange = s.Contains(\"orange\");\n        bool hasMango = s.Contains(\"\
    mango\");\n        if (hasApple == hasOrange == hasMango == true) {\n        \
    \    List<String> splitString = s.Split(' ');\n            foreach (string split\
    \ in splitString) {\n                if (split.Contains(\"apple\")) {\n      \
    \              apples += Convert.ToInt64(split);\n                } else if (split.Contains(\"\
    orange\")) {\n                    oranges += Convert.ToInt64(split);\n       \
    \         } else if (split.Contains(\"mango\")) {\n                    mango +=\
    \ Convert.ToInt64(split);\n                }\n            }\n            if (apples\
    \ > 0 && oranges > 0 && mango == 0) {\n                return apples;\n      \
    \      } else if (apples > 0 && oranges > 0 && mango > 0) {\n                return\
    \ mango;\n            } else if (apples > 0 && oranges == 0 && mango > 0) {\n\
    \                return mango;\n            } else if (apples == 0 && oranges\
    \ > 0 && mango == 0) {\n                return apples;\n            } else if\
    \ (apples == 0 && oranges > 0 && mango > 0) {\n                return mango;\n\
    \            } else if (apples == 0 && oranges == 0 && mango > 0) {\n        \
    \        return mango;\n            } else if (apples > 0 && oranges > 0 && mango\
    \ == 0) {\n                return apples;\n            } else if (apples > 0 &&\
    \ oranges > 0 && mango > 0) {\n                return mango;\n            } else\
    \ if (apples > 0 && oranges == 0 && mango == 0) {\n                return apples;\n\
    \            } else if (apples > 0 && oranges == 0 && mango > 0) {\n         \
    \       return mango;\n            } else if (apples == 0 && oranges > 0 && mango\
    \ > 0) {\n                return mango;\n            } else if (apples > 0 &&\
    \ oranges > 0 && mango > 0) {\n                return mango;\n            }\n\
    \        }\n        return 0;", "        long sum = 0;\n        int totalFruits\
    \ = Convert.ToInt32(s.Replace(\" apples and\", string.Empty).Replace(\" oranges\"\
    , string.Empty).Replace(\" and \", string.Empty));\n        int apples = Convert.ToInt32(s.Replace(\"\
    \ apples and\", string.Empty).Replace(\" oranges\", string.Empty).Replace(\" and\
    \ \", string.Empty));\n        \n        for(int i = 0; i < apples - 2; i++){\n\
    \            sum += n;\n        }\n        \n        return sum;", "        long\
    \ total = 0;\n        long count = 0;\n        char[] fruit = s.ToCharArray();\n\
    \n        // The first element of the string is the total number of apples.\n\
    \        // The second element is the total number of oranges.\n        // The\
    \ third element is the total number of the fruits in the basket.\n        if (fruit.Length\
    \ > 0) {\n            total = fruit[0] - (fruit[1] / n);\n            if (total\
    \ > 0) {\n                count++;\n            }\n            for (int i = 2;\
    \ i < fruit.Length; i++) {\n                total += fruit[i - 1] - (fruit[i]\
    \ / n);\n                if (total > 0) {\n                    count++;\n    \
    \            }\n            }\n        }\n        return count;", "        long\
    \ apples = 0;\n        long oranges = 0;\n        long mango = 0;\n        long\
    \ total = 0;\n        string temp = s.Replace(\" apples and \", string.Empty);\n\
    \        temp = temp.Replace(\" oranges\", string.Empty);\n        temp = temp.Replace(\"\
    \ mangos\", string.Empty);\n        temp = temp.Replace(\" fruits\", string.Empty);\n\
    \        temp = temp.Replace(\" \", string.Empty);\n        temp = temp.Replace(\"\
    and\", string.Empty);\n        temp = temp.Replace(\"or\", string.Empty);\n  \
    \      temp = temp.Replace(\"apples\", string.Empty);\n        temp = temp.Replace(\"\
    oranges\", string.Empty);\n        temp = temp.Replace(\"mangos\", string.Empty);\n\
    \        temp = temp.Replace(\"fruits\", string.Empty);\n        temp = temp.Replace(\"\
    0\", string.Empty);\n        temp = temp.Replace(\"1\", string.Empty);\n     \
    \   temp = temp.Replace(\"2\", string.Empty);\n        temp = temp.Replace(\"\
    3\", string.Empty);\n        temp = temp.Replace(\"4\", string.Empty);\n     \
    \   temp = temp.Replace(\"5\", string.Empty);\n        temp = temp.Replace(\"\
    6\", string.Empty);\n        temp = temp.Replace(\"7\", string.Empty);\n     \
    \   temp = temp.Replace(\"8\", string.Empty);\n        temp = temp.Replace(\"\
    9\", string.Empty);\n        temp = temp.Replace(\"10\", string.Empty);\n    \
    \    temp = temp.Replace(\"11\", string.Empty);\n        temp = temp.Replace(\"\
    12\", string.Empty);\n        temp = temp.Replace(\"13\", string.Empty);\n   \
    \     temp = temp.Replace(\"14\", string.Empty);\n        temp = temp.Replace(\"\
    15\", string.Empty);\n        temp = temp.Replace(\"16\", string.Empty);\n   \
    \     temp = temp.Replace(\"17\", string.Empty);\n        temp = temp.Replace(\"\
    18\", string.Empty);\n        temp = temp.Replace(\"19\", string.Empty);\n   \
    \     temp = temp.Replace(\"20\", string.Empty);\n        temp = temp.Replace(\"\
    21\", string.Empty);\n        temp = temp.Replace(\"22\", string.Empty);\n   \
    \     temp = temp.Replace(\"23\", string.Empty);\n        temp = temp.Replace(\"\
    24\", string.Empty);\n        temp = temp.Replace(\"25\", string.Empty);\n   \
    \     temp = temp.Replace(\"26\", string.Empty);\n        temp = temp.Replace(\"\
    27\", string.Empty);\n        temp = temp.Replace(\"28\", string.Empty);\n   \
    \     temp = temp.Replace(\"29\", string.Empty);\n        temp = temp.Replace(\"\
    30\", string.Empty);\n        temp = temp.Replace(\"31\", string.Empty);\n   \
    \     temp = temp.Replace(\"32\", string.Empty);\n        temp = ", "        long\
    \ apples = 0;\n        long oranges = 0;\n        long mangos = 0;\n        foreach\
    \ (string s in s.Split(' and ').Select(x => x.Trim())\n                .Where(x\
    \ => !String.IsNullOrWhiteSpace(x))))\n        {\n            if (x.Equals(\"\
    apples\")) apples++;\n            else if (x.Equals(\"oranges\")) oranges++;\n\
    \            else if (x.Equals(\"mango\")) mangos++;\n        }\n        return\
    \ apples * oranges * mangos;", "        long result = 0;\n        long apples\
    \ = Convert.ToInt64(s.Split(new[]{' '}).First());\n        long oranges = Convert.ToInt64(s.Split(new[]{'\
    \ '}).Last());\n        long total = apples + oranges;\n        long count = (long)Math.Round((double)n\
    \ / total, 0);\n        if (count == 0) return result;\n        for (long i =\
    \ 0; i < count; ++i) {\n            result += n;\n        }\n        long mng\
    \ = 0;\n        int maxCount = (int)(Math.Round((double)n / apples, 0) * apples);\n\
    \        for (int i = 0; i < maxCount; ++i) {\n            if (apples % 2 == 0)\
    \ {\n                if (i < apples / 2) {\n                    result += (apples\
    \ + oranges);\n                    apples /= 2;\n                    oranges /=\
    \ 2;\n                    mng += 1;\n                } else {\n              \
    \      result -= oranges;\n                    oranges /= 2;\n               \
    \ }\n            } else {\n                if (i < apples / 2) {\n           \
    \         result += (apples + oranges);\n                    apples /= 2;\n  \
    \                  oranges /= 2;\n                    mng += 1;\n            \
    \    } else {\n                    result -= oranges;\n                    oranges\
    \ /= 2;\n                }\n            }\n        }\n        return result -\
    \ mng;", "        string s1 = s.Substring(0, s.LastIndexOf(\" \"));\n        string\
    \ s2 = s.Substring(s.LastIndexOf(\" \") + 1, s.Length - s.LastIndexOf(\" \"));\n\
    \        long n1 = long.Parse(s1);\n        long n2 = long.Parse(s2);\n      \
    \  return (n1 * n2) / (n * (n - 1));", "        long applesCount = 0;\n      \
    \  long orangesCount = 0;\n        long fruitsCount = 0;\n        long mangosCount\
    \ = 0;\n        int i = 0;\n\n        if (String.IsNullOrEmpty(s))\n         \
    \   return 0L;\n        char[] s = Regex.Split(s, @\"\\s+\");\n        foreach\
    \ (string str in s) {\n            if (str == \"apples\" || str == \"oranges\"\
    )\n                ++applesCount;\n            if (str == \"mango\")\n       \
    \         ++mangosCount;\n            if (applesCount > orangesCount) {\n    \
    \            ++fruitsCount;\n                applesCount = 0;\n            }\n\
    \            if (orangesCount > applesCount) {\n                ++orangesCount;\n\
    \                orangesCount = 0;\n            }\n        }\n\n        long totalApples\
    \ = applesCount + orangesCount;\n        long totalOranges = orangesCount + mangosCount;\n\
    \        if (totalApples == 0 || totalOranges == 0)\n            return 0L;\n\n\
    \        long apples = totalApples;\n        long oranges = totalOranges;\n  \
    \      long mangos = fruitsCount - (apples + oranges);\n        return mangos;",
  "        // TODO: Implement this function.\n        long a = s.Split(' ')[0];\n\
    \        long r = s.Split(' ')[1];\n        int x = Convert.ToInt32(r);\n    \
    \    long e = (long.Parse(a) + x)* n;\n        Console.WriteLine(e);\n       \
    \ return e;", "        long apples = 0, oranges = 0;\n        foreach (string\
    \ item in s.Split(' ')) \n            fruits[int.Parse(item)] ++;\n        return\
    \ GetMangos(fruits, n);", "        string input = s;\n        string apples =\
    \ \"apples\";\n        string oranges = \"oranges\";\n        string mango = \"\
    mango\";\n        string[] input = input.Split(' ');\n        long sum = 0;\n\
    \        foreach (string s in input) {\n            int numApps = Convert.ToInt32(s);\n\
    \            if (apples.Equals(s)) sum += numApps;\n            else if (oranges.Equals(s))\
    \ sum += numApps;\n            else if (mango.Equals(s)) sum += numApps;\n   \
    \     }\n        return sum;", "        Dictionary<string, long> dict = new Dictionary<string,\
    \ long>();\n        Dictionary<long, string> map = new Dictionary<long, string>();\n\
    \n        // Create a list of string arrays with the total numbers of \n     \
    \   // apples and oranges \n        List<string[]> fruits = new List<string[]>();\n\
    \        List<int> applesAndOranges = new List<int>();\n\n        // Split the\
    \ string by spaces and then loop through the splitted string list. \n        foreach(string\
    \ fruit in s.Split(' '))\n        {\n            // Split the string by \"and\"\
    \ and then loop through the splitted string list. \n            foreach(string\
    \ fruitsAndOranges in fruit.Split('and'))\n            {\n                int\
    \ applesAndOrangesInt;\n                // If the splitted string list contains\
    \ at least one number \n                // and that number is less than 10 then\
    \ add it to the applesAndOranges list. \n                if(!string.IsNullOrEmpty(fruitsAndOranges)\
    \ \n                    && (Int32.TryParse(fruitsAndOranges, out applesAndOrangesInt)\
    \ && applesAndOrangesInt < 10))\n                {\n                    applesAndOranges.Add(applesAndOrangesInt);\n\
    \                }\n            }\n        }\n\n        // Find the fruits in\
    \ the apples and oranges list. \n        foreach(int fruit in applesAndOranges)\n\
    \        {\n            // For each fruit in the apples and oranges list \n  \
    \          if(fruits.Contains(fruit))\n            {\n                fruits.Remove(fruit);\n\
    \            }\n            else\n            {\n                dict.Add(fruit,\
    \ 1);\n            }\n        }\n\n        // Find the number of mango fruits\
    \ in the apples and oranges list. \n        foreach(int fruit in applesAndOranges)\n\
    \        {\n            if(fruits.Contains(fruit))\n            {\n          \
    \      fruits.Remove(fruit);\n            }\n            else\n            {\n\
    \                dict.Add(fruit, 0);\n            }\n        }\n\n        // Find\
    \ the number of apples and oranges in the apples and oranges list. \n        foreach(int\
    \ fruit in applesAndOranges)\n        {\n            if(fruits.Contains(fruit))\n\
    \            {\n                fruits.Remove(fruit);\n            }\n       \
    \     else\n            {\n                dict.Add(fruit, 1);\n            }\n\
    \        }\n\n        // Find the number of apples and oranges in the apples and\
    \ oranges list. \n        foreach(int fruit in applesAndOranges)\n        {\n\
    \            if(fruits.Contains(fruit))\n            {\n                fruits.Remove(fruit);\n\
    \            }\n", "        long[] fruit = new long[10000];\n        long result\
    \ = 0;\n\n        // split the string by space\n        string inputString = s.Substring(s.IndexOf('\
    \ ')).Trim();\n\n        // Split the input string by 'and'\n        string[]\
    \ inputArray = inputString.Split(new string[] { \"and\" }, StringSplitOptions.None);\n\
    \n        // get the value of each word and convert them to int and store\n  \
    \      foreach (string item in inputArray) {\n            string[] splitString\
    \ = item.Trim().Split(new string[] { \" \" }, StringSplitOptions.None);\n\n  \
    \          long apples = Convert.ToInt64(splitString[0]);\n            long oranges\
    \ = Convert.ToInt64(splitString[1]);\n\n            // count the fruit and store\
    \ the value in array\n            fruit[apples - 1]++;\n            fruit[oranges\
    \ - 1]++;\n        }\n\n        // count the number of oranges\n        long oranges\
    \ = 0;\n        foreach (long fruit in fruit) {\n            if (fruit >= n) {\n\
    \                oranges += fruit;\n            }\n        }\n\n        // count\
    \ the number of apples\n        long apples = 0;\n        foreach (long fruit\
    \ in fruit) {\n            if (fruit > n) {\n                apples += fruit;\n\
    \            }\n        }\n\n        // count the mango fruits\n        long mango\
    \ = 0;\n        foreach (long fruit in fruit) {\n            if (fruit >= n &&\
    \ fruit <= apples) {\n                mango += fruit;\n            }\n       \
    \ }\n\n        // return the mango fruits\n        return mango;", "        long\
    \ count = 0;\n        var regex = new Regex(@\"^(\\d+) apples$|^(\\d+) oranges$\"\
    , RegexOptions.Compiled);\n        var match = regex.Match(s); // check the validity\
    \ of the input string\n        if (match.Success) {\n            var s = match.Groups[\"\
    number\"].Value; // get the number from the match\n            long totalApplesNum\
    \ = long.Parse(s);\n            if (totalApplesNum >= 0) { // valid input number\n\
    \                count += totalApplesNum;\n            }\n        }\n\n      \
    \  var regex = new Regex(@\"^(\\d+) mangoes$\", RegexOptions.Compiled);\n    \
    \    match = regex.Match(s); // check the validity of the input string\n     \
    \   if (match.Success) {\n            var s = match.Groups[\"number\"].Value;\
    \ // get the number from the match\n            long totalMangoesNum = long.Parse(s);\n\
    \            if (totalMangoesNum >= 0) { // valid input number\n             \
    \   count += totalMangoesNum;\n            }\n        }\n\n        if (n > count)\
    \ {\n            return -1L;\n        }\n\n        return count;", "        if\
    \ (s == null) return 0;\n        int apples = s.Count(a => a == 'a');\n      \
    \  int oranges = s.Count(a => a == 'o');\n        int mango = apples - oranges;\n\
    \        long total = 0L;\n        long num = 0;\n        long totalApples = 0L;\n\
    \        long totalOranges = 0L;\n        for (int i = 0; i < s.Length; i++) {\n\
    \            char c = s[i];\n            int number;\n            if (char.IsDigit(c))\
    \ {\n                number = Int32.Parse(s.Substring(i)).ToString();\n      \
    \          total += Int64.Parse(number);\n                totalApples += Int64.Parse(number);\n\
    \                totalOranges += Int64.Parse(number);\n                i += number;\n\
    \            } else {\n                switch (c) {\n                    case\
    \ 'a':\n                        totalApples += 1;\n                        break;\n\
    \                    case 'o':\n                        totalOranges += 1;\n \
    \                       break;\n                    default:\n               \
    \         break;\n                }\n            }\n            if (totalApples\
    \ > 0 && totalOranges > 0) {\n                num += 1;\n                if (num\
    \ > n) {\n                    num = n\n                }\n            }\n    \
    \    }\n        return num;", "        long apples, oranges, mango;\n        string[]\
    \ numbers = s.Split(' ');\n        if (numbers[0].Contains('a')) {\n         \
    \   apples = Convert.ToInt64(numbers[0]);\n        }\n        if (numbers[0].Contains('o'))\
    \ {\n            oranges = Convert.ToInt64(numbers[0]);\n        }\n        if\
    \ (numbers[0].Contains('m')) {\n            mango = Convert.ToInt64(numbers[0]);\n\
    \        }\n        return apples + (oranges / n) + (mango / n);", "        //\
    \ Declare variables\n        long apples, oranges, mango, num;\n        int i;\n\
    \n        // Convert String to an array\n        string[] array = s.Split(' ');\n\
    \n        // Find number of fruits\n        i = array[0];\n        if (i > 0)\
    \ apples = i;\n        else apples = 0;\n        i = array[1];\n        if (i\
    \ > 0) oranges = i;\n        else oranges = 0;\n\n        // Calculations\n  \
    \      mango = oranges - apples;\n\n        // Return number of mango fruits\n\
    \        return mango;", "        long[] arr = s.Split(' ');\n        long result\
    \ = 0;\n        foreach (string fruit in arr) {\n            result += Int64.Parse(fruit);\n\
    \        }\n        return result;", "        long apples = 0;\n        long mango\
    \ = 0;\n        long oranges = 0;\n\n        // split the string by spaces\n \
    \       List<string> fruits = s.Split(\" \").ToList();\n\n        foreach (string\
    \ fruit in fruits) {\n            // handle \"apples\", \"mango\", and \"oranges\"\
    \ first\n            if (fruit.ToLower() == \"apples\") {\n                apples++;\n\
    \            }\n            else if (fruit.ToLower() == \"mango\") {\n       \
    \         mango++;\n            }\n            else if (fruit.ToLower() == \"\
    oranges\") {\n                oranges++;\n            }\n\n            // handle\
    \ \"apples\" and \"mango\"\n            else if (fruit.ToLower() == \"apples and\
    \ mango\") {\n                apples++;\n                mango++;\n          \
    \  }\n\n            // handle \"oranges\" only\n            else if (fruit.ToLower()\
    \ == \"oranges\") {\n                oranges++;\n            }\n        }\n\n\
    \        Console.WriteLine(\"apples: {0}\", apples);\n        Console.WriteLine(\"\
    oranges: {0}\", oranges);\n        Console.WriteLine(\"mango: {0}\", mango);\n\
    \n        long numberOfApples = apples;\n        long numberOfMango = mango;\n\
    \        long numberOfOranges = oranges;\n\n        Console.WriteLine(\"apples:\
    \ {0}\", numberOfApples);\n        Console.WriteLine(\"oranges: {0}\", numberOfOranges);\n\
    \        Console.WriteLine(\"mango: {0}\", numberOfMango);\n\n        // compare\
    \ apples and oranges\n        if ((numberOfApples + numberOfOranges) == numberOfMango)\
    \ {\n            numberOfMango--;\n        }\n\n        return numberOfMango;",
  "        string pattern = @\"(?<fruit>apple|orange|mango)(?<amount>[\\d]+)(?<group>apple|orange|mango)\"\
    ;\n        long result = 0;\n\n        if (long.TryParse(s, out n) && n > 0) {\n\
    \            Regex regex = new Regex(pattern);\n            foreach (Match match\
    \ in regex.Matches(s)) {\n                int groups = 1;\n                long\
    \ number = long.Parse(match.Groups[\"amount\"].Value);\n                if (match.Groups[\"\
    fruit\"].Value == \"apple\") {\n                    groups = 2;\n            \
    \    } else if (match.Groups[\"fruit\"].Value == \"orange\") {\n             \
    \       groups = 3;\n                }\n                result += (long)Math.Ceiling((double)n\
    \ / groups);\n                n -= (long)(Math.Ceiling((double)n / groups));\n\
    \            }\n        }\n        return result;", "        long total = 0;\n\
    \        long apples = 0;\n        long oranges = 0;\n        long mango = 0;\n\
    \        foreach (string t in s.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries))\
    \ {\n            if (t.StartsWith(\"apples\")) apples++;\n            if (t.StartsWith(\"\
    oranges\")) oranges++;\n            if (t.StartsWith(\"mango\")) mango++;\n  \
    \          if (t.Trim().Length > 0) total += Convert.ToInt64(t.Trim());\n    \
    \    }\n        double percent = apples * 1.0 / total;\n        double percent2\
    \ = oranges * 1.0 / total;\n        double percent3 = mango * 1.0 / total;\n \
    \       double percent4 = total - apples - oranges - mango;\n        if (percent\
    \ > percent2 && percent > percent3) mango += total;\n        if (percent4 > percent)\
    \ mango += total;\n        if (percent4 > percent3) mango += total;\n        if\
    \ (percent4 > percent2) mango += total;\n        return mango;", "        StringBuilder\
    \ sb = new StringBuilder();\n        long apples = 0;\n        long oranges =\
    \ 0;\n        long mangos = 0;\n        bool hasApp = false;\n        bool hasOrange\
    \ = false;\n        bool hasMango = false;\n        foreach (string fruit in s.Split('\
    \ '))\n        {\n            sb.Append(fruit);\n            if (fruit.ToLower()\
    \ == \"apples\") {\n                hasApp = true;\n            }\n          \
    \  else if (fruit.ToLower() == \"oranges\") {\n                hasOrange = true;\n\
    \            }\n            else if (fruit.ToLower() == \"mango\") {\n       \
    \         hasMango = true;\n            }\n        }\n        apples = s.Split('\
    \ ').Length - 1;\n        oranges = s.Split(' ').Length - 1;\n        if (hasApp)\
    \ {\n            apples = Convert.ToInt64(s.Split(' ')[0]);\n        }\n     \
    \   if (hasOrange) {\n            oranges = Convert.ToInt64(s.Split(' ')[0]);\n\
    \        }\n        if (hasMango) {\n            mangos = Convert.ToInt64(s.Split('\
    \ ')[0]);\n        }\n        long result = 0;\n        if (apples > oranges)\
    \ {\n            result = apples;\n        }\n        else if (apples < oranges)\
    \ {\n            result = oranges;\n        }\n        else if (apples == oranges)\
    \ {\n            result = mangos;\n        }\n        else {\n            result\
    \ = apples + oranges + mangos;\n        }\n        return result;", "        //\
    \ FruitDistribution(s) : s is a string that represents the number \n        //\
    \ of apples and oranges \n        // n is the total number of the fruits in the\
    \ basket \n        // return the number of the mango fruits in the basket \n \
    \       // FruitDistribution(s)\n        // n\n        // Apples and oranges\n\
    \        // apples and oranges\n        long mangos = 0;\n        long apples\
    \ = 0;\n        long oranges = 0;\n        bool flag = false;\n        string\
    \ temp = \"0\";\n        foreach (char c in s) {\n            switch (c) {\n \
    \           case 'a':\n                apples++;\n                break;\n   \
    \         case 'o':\n                oranges++;\n                break;\n    \
    \        case 'm':\n                mangos += n;\n                flag = true;\n\
    \                break;\n            case 'A':\n            case 'O':\n      \
    \      case 'M':\n                // do nothing\n                break;\n    \
    \        default:\n                temp += c;\n                break;\n      \
    \      }\n            if (flag) {\n                mangos += n;\n            }\n\
    \            flag = false;\n        }\n        return mangos - apples;", "   \
    \     long totalApples = 0;\n        long totalOranges = 0;\n        long totalMango\
    \ = 0;\n        foreach (char c in s) {\n            switch (c) {\n          \
    \      case 'a':\n                    totalApples++;\n                    break;\n\
    \                case 'o':\n                    totalOranges++;\n            \
    \        break;\n                case 'm':\n                    totalMango++;\n\
    \                    break;\n            }\n        }\n        long numOranges\
    \ = totalOranges - totalApples;\n        long numMango = totalMango - totalApples;\n\
    \        long totalFruits = numOranges * 2 + numMango;\n        if (totalFruits\
    \ > n) {\n            numOranges -= (totalFruits - n);\n            numMango -=\
    \ (totalFruits - n);\n            totalFruits = n;\n        }\n        return\
    \ totalFruits;", "        long count = 0, count1 = 0;\n        int num = Int32.Parse(s);\n\
    \        string str1 = s.Substring(0,2);\n        int num1 = Int32.Parse(str1);\n\
    \        string str2 = s.Substring(2);\n        int num2 = Int32.Parse(str2);\n\
    \        char[] chars = s.ToCharArray();\n        Array.Sort(chars);\n       \
    \ foreach (char c in chars)\n        {\n            if (c == 'A' || c == 'a')\n\
    \                count++;\n            if (c == 'O' || c == 'o')\n           \
    \     count++;\n            if (c == 'M' || c == 'm')\n                count++;\n\
    \        }\n\n        int sum1 = num * num1;\n        int sum2 = num * num2;\n\
    \        int sum = sum1 + sum2;\n        if (sum == 0)\n            return 0;\n\
    \        else if (sum < 0)\n        {\n            count1++;\n            count\
    \ = sum1;\n        }\n        else if (sum > 0)\n        {\n            count++;\n\
    \            count1++;\n            count = sum2;\n        }\n        return count1\
    \ + count;", "        long total = 0;\n        if (String.IsNullOrEmpty(s))\n\
    \            return 0;\n        string[] strs = Regex.Split(s, \"\\\\s+\");\n\
    \        if (strs.Length != 2)\n            throw new Exception(\"invalid input\"\
    );\n        int a = 0;\n        int b = 0;\n        foreach (string str in strs)\
    \ {\n            if (str == \"apples\")\n                a += 1;\n           \
    \ else if (str == \"oranges\")\n                b += 1;\n            else\n  \
    \              throw new Exception(\"invalid input\");\n            total += 1;\n\
    \        }\n        if (a != b)\n            throw new Exception(\"invalid input\"\
    );\n        long result = n * a / total;\n        return result;", "        long[]\
    \ apples = new long[s.Split(' ').Length];\n        long[] oranges = new long[s.Split('\
    \ ').Length];\n        long[] mango = new long[s.Split(' ').Length];\n       \
    \ long numApples = 0;\n        long numOranges = 0;\n        long numMango = 0;\n\
    \n        foreach (string word in s.Split(' ')){\n            switch(word){\n\
    \                case \"apples\":\n                    apples++;\n           \
    \         numApples = numApples + 1;\n                    break;\n           \
    \     case \"oranges\":\n                    oranges++;\n                    numOranges\
    \ = numOranges + 1;\n                    break;\n                case \"mango\"\
    :\n                    mango++;\n                    numMango = numMango + 1;\n\
    \                    break;\n            }\n        }\n        int totalApples\
    \ = apples.Length;\n        int totalOranges = oranges.Length;\n        int totalMango\
    \ = mango.Length;\n        int total = (int)n;\n        long applesInBasket =\
    \ totalApples;\n        long orangesInBasket = totalOranges;\n        long mangoInBasket\
    \ = totalMango;\n\n        int appleNum = 0;\n        int orangeNum = 0;\n   \
    \     int mangoNum = 0;\n\n        if(apples.Contains(totalApples)){\n       \
    \     appleNum = apples.IndexOf(totalApples);\n        }\n        if(oranges.Contains(totalOranges)){\n\
    \            orangeNum = oranges.IndexOf(totalOranges);\n        }\n        if(mango.Contains(totalMango)){\n\
    \            mangoNum = mango.IndexOf(totalMango);\n        }\n\n        return\
    \ numMango;", "        // code here\n        var s = s.Replace(\"apples\", \"\
    1\").Replace(\"oranges\", \"2\").Replace(\"mango\", \"3\");\n        long apples\
    \ = 0, oranges = 0, mango = 0;\n        var numbers = s.Split();\n        foreach\
    \ (var item in numbers)\n        {\n            apples = apples + Convert.ToInt32(item);\n\
    \            if (item == \"1\")\n            {\n                oranges = oranges\
    \ + 1;\n            }\n            if (item == \"2\")\n            {\n       \
    \         mango = mango + 1;\n            }\n        }\n        if (apples ==\
    \ 0 && oranges == 0 && mango == 0)\n        {\n            return 0;\n       \
    \ }\n        return (long.Parse(Math.Round((apples / oranges * n).ToString()))\
    \ + long.Parse(Math.Round((mango / oranges * n).ToString())));\n", "        long\
    \ ans = 0;\n        string apples = \"apples\";\n        string oranges = \"oranges\"\
    ;\n        string mango = \"mango\";\n        string temp;\n        long appleSum\
    \ = 0;\n        long orangeSum = 0;\n        long mangoSum = 0;\n        long\
    \ totalSum = 0;\n\n        if (s.Contains(\"apples\")) {\n            apples =\
    \ s;\n            temp = apples.Replace(\"apples\", \"\");\n            appleSum\
    \ = long.Parse(temp);\n        }\n        if (s.Contains(\"oranges\")) {\n   \
    \         oranges = s;\n            temp = oranges.Replace(\"oranges\", \"\");\n\
    \            orangeSum = long.Parse(temp);\n        }\n        if (s.Contains(\"\
    mango\")) {\n            mango = s;\n            temp = mango.Replace(\"mango\"\
    , \"\");\n            mangoSum = long.Parse(temp);\n        }\n\n        totalSum\
    \ = appleSum + orangeSum + mangoSum;\n\n        if (totalSum == 0) {\n       \
    \     ans = n;\n            return ans;\n        }\n\n        foreach (string\
    \ word in s.Split(' '))\n        {\n            if (word.Length == 0)\n      \
    \          continue;\n            if (word.Contains(\"apples\")) {\n         \
    \       appleSum -= long.Parse(word);\n            }\n            else if (word.Contains(\"\
    oranges\")) {\n                orangeSum -= long.Parse(word);\n            }\n\
    \            else if (word.Contains(\"mango\")) {\n                mangoSum -=\
    \ long.Parse(word);\n            }\n            totalSum -= long.Parse(word);\n\
    \        }\n        ans = appleSum + orangeSum + mangoSum;\n\n        if (ans\
    \ <= n) {\n            ans = ans;\n        }\n        else if (ans > n) {\n  \
    \          ans = n;\n        }\n        return ans;", "        long apples = 0,\
    \ oranges = 0;\n        long mangos = 0;\n        string appleStr = \"apple\"\
    , orangeStr = \"orange\";\n        foreach (string line in s.Split()) {\n    \
    \        if (line == appleStr) {\n                apples++;\n            } else\
    \ if (line == orangeStr) {\n                oranges++;\n            } else {\n\
    \                mangos += line.Length;\n            }\n        }\n        long\
    \ totalApples = apples;\n        long totalOranges = oranges;\n        long totalMangos\
    \ = mangos;\n        long totalFruits = apples + oranges + mangos;\n        long\
    \ total = (long) (totalMangos / totalFruits);\n        return ((long)(Math.Ceiling(total\
    \ * n)));", "        Dictionary<long, string> f = new Dictionary<long, string>();\n\
    \        StringBuilder sb = new StringBuilder();\n        long total = 0;\n  \
    \      int totalCount = 0;\n        foreach (string f in s.Split(' ')) f.Trim();\n\
    \        foreach (string f in s.Split(' ')) f.Trim();\n        foreach (string\
    \ f in s.Split(' ')) f.Trim();\n        foreach (string f in s.Split(' ')) f.Trim();\n\
    \        foreach (string f in s.Split(' ')) f.Trim();\n        foreach (string\
    \ f in s.Split(' ')) f.Trim();\n        foreach (string f in s.Split(' ')) f.Trim();\n\
    \        foreach (string f in s.Split(' ')) f.Trim();\n        foreach (string\
    \ f in s.Split(' ')) f.Trim();\n        foreach (string f in s.Split(' ')) f.Trim();\n\
    \        foreach (string f in s.Split(' ')) f.Trim();\n        foreach (string\
    \ f in s.Split(' ')) f.Trim();\n        foreach (string f in s.Split(' ')) f.Trim();\n\
    \        foreach (string f in s.Split(' ')) f.Trim();\n        foreach (string\
    \ f in s.Split(' ')) f.Trim();\n        foreach (string f in s.Split(' ')) f.Trim();\n\
    \        foreach (string f in s.Split(' ')) f.Trim();\n        foreach (string\
    \ f in s.Split(' ')) f.Trim();\n        foreach (string f in s.Split(' ')) f.Trim();\n\
    \        foreach (string f in s.Split(' ')) f.Trim();\n        foreach (string\
    \ f in s.Split(' ')) f.Trim();\n        foreach (string f in s.Split(' ')) f.Trim();\n\
    \        foreach (string f in s.Split(' ')) f.Trim();\n        foreach (string\
    \ f in s.Split(' ')) f.Trim();\n        foreach (string f in s.Split(' ')) f.Trim();\n\
    \        foreach (string f in s.Split(' ')) f.Trim();\n        foreach (string\
    \ f in s.Split(' ')) f.Trim();\n        foreach (string f in s.Split(' ')) f.Trim();\n\
    \        foreach (string f in s.Split(' ')) f.Trim();\n        foreach (string\
    \ f in s.Split(' ')) f.Trim();\n        foreach (string f in s.Split(' ')) f.Trim();\n\
    \        foreach (string f in s.Split(' ')) f.Trim();\n        foreach (string\
    \ f in s.Split(' ')) f.Trim();\n        foreach (string f in s.Split(' ')) f.Trim();\n\
    \        foreach (string ", "        string fruit = Regex.Replace(s, @\"\\s|-|\\\
    +\", string.Empty);\n        if (s.Length == 0)\n            return 0;\n     \
    \   string s = fruit.Length.ToString();\n        long[] numbers = Regex.Split(s,\
    \ @\"\\s|-|\\+\").Select(s => long.Parse(s)).ToArray();\n        long[] sums =\
    \ numbers.Select(s => s * s).ToArray();\n        return Math.Ceiling(n/sums.Sum()).ToString();",
  "        // Write your code here.\n        if (n == 0) {\n            return 0;\n\
    \        }\n        int countOfOranges = 0;\n        int countOfApples = 0;\n\
    \        int numberOfMango = 0;\n        int numberOfOranges = 0;\n        string\
    \ str = s;\n        bool isOrange = false;\n        bool isApple = false;\n  \
    \      bool isMango = false;\n        for (int i = 0; i < str.Length; i++) {\n\
    \            if (str[i] == \"o\") {\n                isOrange = true;\n      \
    \      }\n            else if (str[i] == \"a\") {\n                isApple = true;\n\
    \            }\n            else if (str[i] == \"m\") {\n                isMango\
    \ = true;\n            }\n            else if (isApple == true && isOrange ==\
    \ true) {\n                numberOfOranges++;\n            }\n            else\
    \ if (isApple == true && isOrange == false) {\n                countOfApples++;\n\
    \            }\n            else if (isApple == false && isOrange == true) {\n\
    \                numberOfOranges++;\n            }\n            else if (isApple\
    \ == false && isOrange == false) {\n                countOfApples++;\n       \
    \     }\n            else if (isMango == true && isOrange == true) {\n       \
    \         numberOfMango++;\n            }\n            else if (isMango == true\
    \ && isOrange == false) {\n                countOfMango++;\n            }\n  \
    \          else if (isMango == false && isOrange == true) {\n                numberOfMango++;\n\
    \            }\n            else if (isMango == false && isOrange == false) {\n\
    \                countOfMango++;\n            }\n        }\n        return n -\
    \ numberOfOranges - numberOfApples - numberOfMango;", "        // TODO: Implement\
    \ this function\n        string [] arr = s.Split(' ');\n        List<long> numbers\
    \ = new List<long>();\n        for (int i = 0; i < arr.Length-1; i++)\n      \
    \  {\n            numbers.Add(long.Parse(arr[i]));\n        }\n        long apples\
    \ = 0;\n        long oranges = 0;\n        long mango = 0;\n        long total\
    \ = 0;\n        for (int i = 0; i < numbers.Count; i++)\n        {\n         \
    \   apples += numbers[i];\n        }\n        for (int i = 0; i < numbers.Count;\
    \ i++)\n        {\n            oranges += numbers[i];\n        }\n        total\
    \ = apples + oranges;\n        mango = total%n;\n        return mango;", "   \
    \     int[] numbers = (int[])s.ToCharArray().Select(c => (int)c).ToArray();\n\
    \        int n = numbers.Length;\n        if (numbers.Sum() % 2 == 0) {\n    \
    \        List<long> list = new List<long>();\n            long sum = 0;\n    \
    \        for (int i = 0; i <= n; i++) {\n                sum += numbers[i];\n\
    \                if (sum >= n / 2) {\n                    list.Add(sum);\n   \
    \             }\n            }\n            long listCount = 0;\n            foreach\
    \ (long i in list) {\n                listCount += i;\n            }\n       \
    \     return listCount;\n        } else {\n            List<long> list = new List<long>();\n\
    \            long sum = 0;\n            for (int i = 0; i <= n; i++) {\n     \
    \           sum += numbers[i];\n                if (sum < n / 2) {\n         \
    \           list.Add(sum);\n                }\n            }\n            long\
    \ listCount = 0;\n            foreach (long i in list) {\n                listCount\
    \ += i;\n            }\n            return listCount;\n        }", "        int[]\
    \ arr = { 0, 0, 0, 0, 0 };\n        foreach (string str in s.Split(',')) {\n \
    \           arr += Convert.ToInt32(str);\n        }\n        int sum = 0;\n  \
    \      for (int i = 0; i < arr.Length; i++) {\n            sum += arr[i];\n  \
    \          if (sum == n) {\n                return Convert.ToInt64(arr[i]);\n\
    \            }\n        }\n        return 0;", "        long cnt = 0;\n      \
    \  long numOfApple = Convert.ToInt64(s.Split(' ')[0]);\n        long numOfOrange\
    \ = Convert.ToInt64(s.Split(' ')[1]);\n        long numOfMango = 0;\n        long\
    \ maxNum = 0;\n        List<string> fruits = new List<string>();\n        long\
    \ max = 0;\n        if (numOfApple > numOfOrange) {\n            fruits.Add(\"\
    apple\");\n            fruits.Add(\"mango\");\n            fruits.Add(\"orange\"\
    );\n            max = numOfApple;\n            numOfApple = numOfOrange;\n   \
    \         numOfOrange = max;\n        }\n        else {\n            fruits.Add(\"\
    apple\");\n            fruits.Add(\"orange\");\n            fruits.Add(\"mango\"\
    );\n            max = numOfOrange;\n            numOfApple = numOfOrange;\n  \
    \          numOfOrange = max;\n        }\n        foreach (string fruit in fruits)\
    \ {\n            cnt += Convert.ToInt64(fruit.Split(' ')[1]);\n        }\n   \
    \     for (int i = 0; i < fruits.Count; i++) {\n            if (fruits[i].Split('\
    \ ')[0].Equals(\"apple\")) {\n                numOfApple--;\n            }\n \
    \           else if (fruits[i].Split(' ')[0].Equals(\"mango\")) {\n          \
    \      numOfMango++;\n            }\n            else if (fruits[i].Split(' ')[0].Equals(\"\
    orange\")) {\n                numOfOrange--;\n            }\n        }\n     \
    \   return Convert.ToInt64(s.Split(' ')[0].Replace(\"oranges\", max).Replace(\"\
    apples\", numOfApple).Replace(\"mangos\", numOfMango));", "        string nums\
    \ = Regex.Replace(s, @\"[^\\d]+\", \" \");\n        string[] words = nums.Split('\
    \ ');\n        long[] fruits = new long[words.Length];\n\n        for (int i =\
    \ 0; i < fruits.Length; i++) {\n            fruits[i] = Long.Parse(words[i]);\n\
    \        }\n        long ans = 0;\n        long m = Int64.MinValue;\n        int\
    \ i = 0;\n        foreach(long fruit in fruits) {\n            if (fruit == m)\
    \ {\n                i++;\n            }\n            ans = Math.Max(i, ans);\n\
    \        }\n        return ans;", "        var applesAndOranges = s.Split(' ')\n\
    \            .Select(s => Convert.ToInt64(s))\n            .ToArray();\n\n   \
    \     var fruitsNotInBasket = applesAndOranges.Where(a => a > 0 && a <= n).Count();\n\
    \        var fruitsInBasket = applesAndOranges.Where(a => a > n).Count();\n  \
    \      var mangos = applesAndOranges.Count(a => a == 1);\n        return fruitsNotInBasket\
    \ + fruitsInBasket - mangos;", "        // initialize your variables here\n  \
    \      int apples = 0;\n        int oranges = 0;\n        int mangoes = 0;\n\n\
    \        // iterate through string\n        foreach (char c in s) {\n        \
    \    // handle apples first\n            if (c == 'a') {\n                apples++;\n\
    \            }\n            // handle oranges\n            else if (c == 'o')\
    \ {\n                oranges++;\n            }\n            // handle mangoes\n\
    \            else if (c == 'm') {\n                if (oranges == 0) {\n     \
    \               mangoes++;\n                }\n                else {\n      \
    \              oranges--;\n                }\n            }\n        }\n     \
    \   // if mangoes == 0 return n, else subtract n from mangoes and divide by two\n\
    \        return (mangoes == 0) ? n : mangoes - n / 2;", "        long numOfApples\
    \ = 0;\n        long numOfOranges = 0;\n        long totalNumberOfFruits = 0;\n\
    \        string part1 = s.Split(' ')[0];\n        string part2 = s.Split(' ')[1];\n\
    \        long maxApples = long.Parse(part1);\n        long maxOranges = long.Parse(part2);\n\
    \        string temp;\n        for (long i = 0; i < n; i++) {\n            if\
    \ (i % 2 == 0) {\n                numOfApples += (long)s[i];\n               \
    \ totalNumberOfFruits++;\n            }\n            else {\n                numOfOranges\
    \ += (long)s[i];\n                totalNumberOfFruits++;\n            }\n    \
    \    }\n        if (numOfOranges > maxApples) numOfApples = maxApples;\n     \
    \   if (numOfApples > maxOranges) numOfOranges = maxOranges;\n        totalNumberOfFruits\
    \ += numOfApples + numOfOranges;\n        if (totalNumberOfFruits > 100L) totalNumberOfFruits\
    \ = 100L;\n        if (totalNumberOfFruits < 0L) totalNumberOfFruits = 100L;\n\
    \        if (totalNumberOfFruits == 0L) return 0L;\n        long totalApples =\
    \ totalNumberOfFruits - numOfOranges - numOfApples;\n        long totalOranges\
    \ = totalNumberOfFruits - numOfApples - numOfOranges;\n        if (totalApples\
    \ == 0L) return 0L;\n        if (totalOranges == 0L) return 0L;\n        long\
    \ totalFruits = totalApples + totalOranges;\n        long numOfMango = totalNumberOfFruits\
    \ - totalFruits;\n        if (numOfMango == 0) return 0L;\n        return (numOfMango);"]
stop_tokens:
- "\n    }\n"
