language: cs
name: HumanEval_25_factorize
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        // Generate\
    \ list of prime numbers for n.\n        List<long> primes = new List<long>();\n\
    \        long n = n;\n        for (long i = 2; i <= Math.Sqrt(n); i++) {\n   \
    \         if (n % i == 0)\n                primes.Add(i);\n        }\n\n     \
    \   List<long> factors = new List<long>();\n        for (long prime : primes)\
    \ {\n            while (n % prime == 0) {\n                factors.Add(prime);\n\
    \                n /= prime;\n            }\n        }\n\n        if (n > 1) {\n\
    \            factors.Add(n);\n        }\n        return factors;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbmx2bzi8.cs(28,25): error CS1002: ; expected

    /tmp/tmpbmx2bzi8.cs(28,25): error CS1525: Invalid expression term '':''

    /tmp/tmpbmx2bzi8.cs(28,25): error CS1001: Identifier expected

    '
  timestamp: 1659976322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        // Loop through the primes below n, testing\
    \ them for factors.\n        for (int i = 3; i <= n / i; i++) {\n            if\
    \ (n % i == 0) {\n                factors.Add(i);\n                // If this\
    \ factor appears more than once, then it cannot be prime, break from loop.\n \
    \               if (factors.Count(x => x == i) > 1) break;\n            }\n  \
    \      }\n        return factors;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <72737b3e016c4eccafef85dd773acc99>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <72737b3e016c4eccafef85dd773acc99>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976323
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        long\
    \ highestFactor = 1;\n        long factor = 2;\n        List<long> factors = new\
    \ List<long>();\n\n        do {\n            if (n % factor == 0) {\n        \
    \        factors.Add(factor);\n                n /= factor;\n            }\n \
    \           factor *= 2;\n        } while (n > 1);\n\n        while (n > 1) {\n\
    \            while (n % factor == 0) {\n                factors.Add(factor);\n\
    \                n /= factor;\n            }\n            factor *= 2;\n     \
    \   }\n        highestFactor = 1;\n        for (long factor in factors) {\n  \
    \          highestFactor *= factor;\n        }\n        factors.Sort();\n    \
    \    return factors;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_oi799mg.cs(39,9): error CS1003: Syntax error, ''foreach'' expected

    '
  timestamp: 1659976322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        Debug.Assert(n\
    \ >= 2L);\n        List<long> result = new List<long>();\n        var primes =\
    \ new List<long>(new long[]{2L});\n        // find all prime numbers larger than\
    \ or equal to n\n        for (var i = 2; i <= Math.Sqrt(n); i++) {\n         \
    \   if (n % i == 0) {\n                primes.Add(i);\n            }\n       \
    \ }\n        // find all factors of n\n        while (n % primes.Count > 0) {\n\
    \            var prime = primes[primes.Count - 1];\n            if (n % prime\
    \ == 0) {\n                result.Add(prime);\n                n = n / prime;\n\
    \            } else {\n                primes.RemoveAt(primes.Count - 1);\n  \
    \          }\n        }\n        // add remaining prime factors of n\n       \
    \ while (n % primes.Count > 0) {\n            result.Add(primes[primes.Count -\
    \ 1]);\n            n = n / primes[primes.Count - 1];\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <34c2f64156c94ca0ba312445a0637b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <34c2f64156c94ca0ba312445a0637b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976323
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        var factors\
    \ = new List<long>();\n        \n        BigInteger original = BigInteger.ValueOf(n);\n\
    \        var factorsCount = 1;\n        \n        while (original.Divide(2, BigIntegerDivide.RoundDown)\
    \ == 0) {\n            factorsCount++;\n            \n            if (factorsCount\
    \ > 1000) {\n                factors.Add(original);\n                return factors;\n\
    \            }\n            \n            factors.Add(original.Divide(2, BigIntegerDivide.RoundDown));\n\
    \            \n            original = original.Divide(2, BigIntegerDivide.RoundDown);\n\
    \        }\n        \n        factors.Add(original);\n        return factors;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpewg1h3tg.cs(21,42): error CS0117: ''BigInteger'' does not contain a definition
    for ''ValueOf''

    /tmp/tmpewg1h3tg.cs(24,35): error CS0103: The name ''BigIntegerDivide'' does not
    exist in the current context

    /tmp/tmpewg1h3tg.cs(28,29): error CS1503: Argument 1: cannot convert from ''System.Numerics.BigInteger''
    to ''long''

    /tmp/tmpewg1h3tg.cs(32,44): error CS0103: The name ''BigIntegerDivide'' does not
    exist in the current context

    /tmp/tmpewg1h3tg.cs(34,43): error CS0103: The name ''BigIntegerDivide'' does not
    exist in the current context

    /tmp/tmpewg1h3tg.cs(37,21): error CS1503: Argument 1: cannot convert from ''System.Numerics.BigInteger''
    to ''long''

    '
  timestamp: 1659976323
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        bool\
    \ isPrime = true;\n        List<long> factors = new List<long>();\n        long\
    \ p = 2L;\n        while (p <= n) {\n            bool checkPrime = true;\n   \
    \         for (long i = 0; i < factors.Count; i++) {\n                if (n %\
    \ p == 0) checkPrime = false;\n            }\n            if (checkPrime) {\n\
    \                factors.Add(p);\n                if (p * p > n) break;\n    \
    \        }\n            p++;\n        }\n        if (isPrime && factors.Count\
    \ > 2) {\n            factors.RemoveAt(1);\n        }\n        return factors;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d13eaa83a7e949f2a8cc263816eea459>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d13eaa83a7e949f2a8cc263816eea459>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976323
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n\n        // This could be done faster if we could\
    \ get all factors simultaneously\n        // For now we go through every number\
    \ from 2 up to half of the number\n        for (long i = 1; i <= n / 2; i++) {\n\
    \            // If we divided this number by each of its factors\n           \
    \ // we also add it to our list of factors\n            if (n % i == 0) {\n  \
    \              factors.Add(i);\n                // and remove it from the number\
    \ (because we divided it)\n                n /= i;\n            }\n        }\n\
    \n        // We need to remove any remainders and add the number itself to our\
    \ list if it was a factor\n        if (n > 1) { factors.Add(n); }\n\n        return\
    \ factors;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26a0d5f713cc4c318d1c95277b7b23f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26a0d5f713cc4c318d1c95277b7b23f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976323
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        bool\
    \ flag = false;\n        long p = n;\n        List<long> factors = new List<long>();\n\
    \        while (p > 1) {\n            long q = p / 2;\n            if (flag) {\n\
    \                p = q;\n                factors.Add(p);\n            }\n    \
    \        if (p == q) {\n                factors.Add(p);\n                p = q;\n\
    \                flag = false;\n            } else {\n                flag = true;\n\
    \            }\n        }\n        return factors;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <baf1f8c741374060ba460850f77230c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <baf1f8c741374060ba460850f77230c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976323
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        bool\
    \ isPrime = true;\n        long factor = 2L;\n        List<long> result = new\
    \ List<long>(new long[]{2L});\n        while (factor < n) {\n            isPrime\
    \ = true;\n            for (long i = 3L; i <= Math.Sqrt(factor); i += 2L) {\n\
    \                if ((factor % i) == 0)\n                    isPrime = false;\n\
    \            }\n            if (isPrime)\n                result.Add(factor);\n\
    \            factor = factor * 2L;\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c42027f9e63744f4b546c8a5fb3b65ba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c42027f9e63744f4b546c8a5fb3b65ba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976323
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        if (n\
    \ < 2L) {\n            return new List<long>(new long[] { 2L });\n        }\n\
    \        List<long> factors = new List<long>();\n        int div = 2;\n      \
    \  while (n >= div) {\n            while (n % div == 0) {\n                factors.Add(div);\n\
    \                n /= div;\n            }\n            div++;\n        }\n   \
    \     factors.Reverse();\n        return factors;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad855b601f134426884dac5d1de4483e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad855b601f134426884dac5d1de4483e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976323
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        long\
    \ factorizationCount = 0;\n        long next = 1;\n        long i = 1;\n     \
    \   long maxFactorizationCount = Math.Sqrt(n) + 1;\n\n        while (true) {\n\
    \            factorizationCount = factorizationCount + next;\n\n            //\
    \ This should never happen since we should be checking that next*next is less\
    \ than n\n            if (factorizationCount > maxFactorizationCount) {\n    \
    \            Debug.Assert(false);\n                return null;\n            }\n\
    \n            next = 2;\n            i = 2;\n\n            // Only need to factor\
    \ upto sqrt(n) to find factors of length 2\n            // i.e. no more than sqrt(n)\
    \ factors\n            while (factorizationCount < maxFactorizationCount &&\n\
    \                   n / i != factorizationCount) {\n                next = next\
    \ * i;\n                i = i + 2;\n                factorizationCount = factorizationCount\
    \ + next;\n            }\n\n            if (next == 1) {\n                Debug.Assert(i\
    \ == n);\n                Debug.Assert(next*next <= n);\n                return\
    \ new List<long>();\n            }\n\n            // Add the current factor to\
    \ the list\n            List<long> factors = new List<long>(new long[]{n, i});\n\
    \            return factors;\n        }\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpehx8cg3v.cs(22,38): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        while (n != 1L) {\n            long m =\
    \ n % 2L;\n            if (m == 0L)\n                return factors;\n       \
    \     factors.Add(2L * m);\n            n /= 2L;\n        }\n        return factors;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2b65864096874a2bb91bd49c9d33c86e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2b65864096874a2bb91bd49c9d33c86e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976323
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        long\
    \ fact = n;\n        long[] primes = new long[8];\n        fact = fact - 1;\n\
    \        // Sieve of Eratosthenes\n        long limit = fact / 2;\n        long[]\
    \ primeFactors = new long[8];\n        primeFactors[0] = 1;\n        while (limit\
    \ < Math.Sqrt(fact)) {\n            primeFactors[limit] = 1;\n            limit\
    \ = limit + limit;\n            while (limit < Math.Sqrt(fact)) {\n          \
    \      fact = fact - limit;\n                limit = limit + limit;\n        \
    \    }\n        }\n        primeFactors[limit - 1] = factor(fact);\n        primeFactors\
    \ = Arrays.ConvertAll(primeFactors, n => n * n);\n        primeFactors = primeFactors.Distinct().ToArray();\n\
    \        List<long> factors = new List<long>();\n        foreach (long prime in\
    \ primeFactors) {\n            for (int i = 2; i <= prime; i++) {\n          \
    \      if (prime % i == 0) {\n                    factors.Add(i);\n          \
    \          for (int j = prime - 1; j > primeFactors[i - j - 1]; j--) {\n     \
    \                   if (j % i == 0) {\n                            factors.Add(i);\n\
    \                            factors.Add(j);\n                            break;\n\
    \                        }\n                    }\n                    break;\n\
    \                }\n            }\n        }\n        return factors;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxl6tauvt.cs(34,35): error CS0103: The name ''factor'' does not exist in
    the current context

    /tmp/tmpxl6tauvt.cs(35,24): error CS0103: The name ''Arrays'' does not exist in
    the current context

    /tmp/tmpxl6tauvt.cs(42,34): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976323
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        // Using\
    \ this instead of BigInteger allows us to handle very large numbers (without catastrophic\
    \ performance degradation)\n        long product = 1;\n        List<long> factorization\
    \ = new List<long>();\n        while (product != n) {\n            long temp =\
    \ product;\n            int divisor = 1;\n            while (temp % divisor !=\
    \ 0) {\n                divisor += 1;\n            }\n            temp /= divisor;\n\
    \            factorization.Add(divisor);\n            product *= divisor;\n  \
    \      }\n        return factorization;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659976328
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        // Sort\
    \ all factors\n        List<long> factors = FactorizeRecursive(n);\n        return\
    \ factors.OrderBy(d => d).ToList();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplq0aeraa.cs(20,30): error CS0103: The name ''FactorizeRecursive'' does
    not exist in the current context

    '
  timestamp: 1659976323
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        long\
    \ factorization[] = new long[(int)Math.Sqrt(n) + 1];\n        for (int i = 1;\
    \ i <= Math.Sqrt(n); i++) {\n            for (int j = 0; j < i; j++) {\n     \
    \           if (n % i == 0) {\n                    factorization[i] = factorization[i]\
    \ + 1;\n                    n = n / i;\n                }\n            }\n   \
    \     }\n        factorization[(int)Math.Sqrt(n)] = 1;\n        return new List<long>(factorization.OrderBy(x=>x).ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn9tioyee.cs(19,27): error CS0650: Bad array declarator: To declare a managed
    array the rank specifier precedes the variable''s identifier. To declare a fixed
    size buffer field, use the fixed keyword before the field type.

    '
  timestamp: 1659976322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        int k\
    \ = Math.Sqrt(n);\n        List<long> factors = new List<long>();\n\n        for\
    \ (int i = 2; i <= k; i++) {\n            if (n % i == 0) {\n                int\
    \ count = 0;\n                while (n % i == 0) {\n                    n /= i;\n\
    \                    count++;\n                }\n                factors.Add(new\
    \ long[] { i, count });\n            }\n        }\n\n        if (n > 1) factors.Add(new\
    \ long[] { n, 1 });\n\n        return factors;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_g11hdea.cs(19,17): error CS0266: Cannot implicitly convert type ''double''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp_g11hdea.cs(29,29): error CS1503: Argument 1: cannot convert from ''long[]''
    to ''long''

    /tmp/tmp_g11hdea.cs(33,32): error CS1503: Argument 1: cannot convert from ''long[]''
    to ''long''

    '
  timestamp: 1659976322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        if (n\
    \ == 1)\n            return new List<long>(new long[]{1});\n        List<long>\
    \ factors = new List<long>();\n        long[] factorization = GetFactors(n);\n\
    \        foreach (long factor in factorization) {\n            factors.Add(factor);\n\
    \            factors = Factorize(factor);\n        }\n        return factors;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6m4ub_ea.cs(22,32): error CS0103: The name ''GetFactors'' does not exist
    in the current context

    '
  timestamp: 1659976323
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ res = new List<long>();\n\n        long base;\n        long maxBase = n % 2\
    \ == 1 ? 3L * n : n; // First prime candidate is 3.\n        long maxBase3 = maxBase;\n\
    \        while (maxBase3 >= 3L) {\n            long maxBase2 = maxBase3 / 2L;\n\
    \            long maxBase1 = maxBase2 - maxBase3;\n            long maxBase5 =\
    \ maxBase1 + maxBase2;\n            maxBase3 = maxBase5;\n            long maxBase7\
    \ = maxBase3 + maxBase4;\n            long maxBase11 = maxBase7 + maxBase8;\n\
    \            maxBase7 = maxBase11;\n            maxBase11 = maxBase11;\n     \
    \       maxBase8 = maxBase8;\n            maxBase2 = maxBase2;\n            maxBase1\
    \ = maxBase1;\n            maxBase = maxBase1;\n        }\n\n        long maxBase2\
    \ = maxBase * 2L;\n        long maxBase5 = maxBase2 * 2L;\n        maxBase3 =\
    \ maxBase5;\n        long maxBase7 = maxBase3 + maxBase4;\n        long maxBase11\
    \ = maxBase7 + maxBase8;\n        maxBase7 = maxBase11;\n        maxBase11 = maxBase11;\n\
    \        maxBase8 = maxBase8;\n        maxBase2 = maxBase2;\n        maxBase1\
    \ = maxBase1;\n        maxBase = maxBase1;\n\n        if (n == 1L)\n         \
    \   return new List<long>(new long[] { 1L });\n        while (n > 1L) {\n    \
    \        if (n % maxBase == 0) {\n                res.Add(maxBase);\n        \
    \        n /= maxBase;\n            }\n            if (n % maxBase3 == 0)\n  \
    \          {\n                res.Add(maxBase3);\n                n /= maxBase3;\n\
    \            }\n            if (n % maxBase2 == 0)\n            {\n          \
    \      res.Add(maxBase2);\n                n /= maxBase2;\n            }\n   \
    \         if (n % maxBase5 == 0)\n            {\n                res.Add(maxBase5);\n\
    \                n /= maxBase5;\n            }\n            if (n % maxBase7 ==\
    \ 0)\n            {\n                res.Add(maxBase7);\n                n /=\
    \ maxBase7;\n            }\n            if (n % maxBase11 == 0)\n            {\n\
    \                res.Add(maxBase11);\n                n /= maxBase11;\n      \
    \      }\n            if (n % maxBase8 == 0)\n            {\n                res.Add(maxBase8);\n\
    \                n /= maxBase8;\n            }\n            if (n % maxBase2 ==\
    \ 0)\n            {\n                res.Add(maxBase2);\n                n /=\
    \ maxBase2;\n            }\n            if (n % maxBase1 == 0)\n            {\n\
    \                res.Add(maxBase1);\n                n /= maxBase\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf_69_l0c.cs(21,14): error CS1001: Identifier expected

    /tmp/tmpf_69_l0c.cs(21,14): error CS1002: ; expected

    /tmp/tmpf_69_l0c.cs(96,29): error CS1002: ; expected

    /tmp/tmpf_69_l0c.cs(98,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpf_69_l0c.cs(109,2): error CS1513: } expected

    '
  timestamp: 1659976322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        var result\
    \ = new List<long>();\n        Factorize(n, result);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_f5zx6wb.cs(20,9): error CS1501: No overload for method ''Factorize''
    takes 2 arguments

    '
  timestamp: 1659976323
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>(n.ToString().ToCharArray().Select(c => (long)Math.Pow(10,(int)c)-1));\n\
    \        List<long> primes = new List<long>();\n\n        for(int i = 0; i < factors.Count;\
    \ i++) {\n            for(int j = 0; j < factors.Count; j++) {\n             \
    \   if(i != j) {\n                    if(factors[i] * factors[j] == n) {\n   \
    \                     factors[i] += 1L;\n                        factors[j] -=\
    \ 1L;\n                        i = j;\n                    }\n               \
    \ }\n            }\n        }\n\n        for(int i = 0; i < factors.Count; i++)\
    \ {\n            if(factors[i] == 1) {\n                primes.Add(1L);\n    \
    \        }\n            else if(primes.Count > 0) {\n                if(factors[i]\
    \ > primes[primes.Count - 1]) {\n                    primes.Add(factors[i]);\n\
    \                }\n                else {\n                    primes[primes.Count\
    \ - 1] = factors[i];\n                }\n            }\n            else {\n \
    \               primes.Add(factors[i]);\n            }\n        }\n\n        return\
    \ primes;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4abf1fd23e3549b69e3b5a18d8580238>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4abf1fd23e3549b69e3b5a18d8580238>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976323
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        if (n == 1)\n            factors.Add(1);\n\
    \        else {\n            long m = Math.Sqrt(n);\n            long g = Primes.GetNext(n);\n\
    \            while (n % g == 0) {\n                factors.Add(g);\n         \
    \       n = n / g;\n                g = Primes.GetNext(n);\n            }\n  \
    \          while (n % g != 0) {\n                factors.Add(g);\n           \
    \     n = n / g;\n            }\n        }\n        return factors;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsayhmekb.cs(23,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpsayhmekb.cs(24,22): error CS0103: The name ''Primes'' does not exist in
    the current context

    /tmp/tmpsayhmekb.cs(28,21): error CS0103: The name ''Primes'' does not exist in
    the current context

    '
  timestamp: 1659976323
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        long\
    \ m = n;\n        List<long> factors = new List<long>();\n        while (m !=\
    \ 1) {\n            m = m / 2;\n            factors.Add(m);\n        }\n     \
    \   return factors;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b98fdf2ec81434e9ea4cb8afa3a83cc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b98fdf2ec81434e9ea4cb8afa3a83cc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976323
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ list = new List<long>();\n\n        // Use Sieve of Atkin\n        bool isPrime\
    \ = false;\n        long prime = 2;\n        while (true) {\n            isPrime\
    \ = true;\n            for (int i = 2; i * i <= n; i++) {\n                if\
    \ (n % i == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  list.Add(prime);\n                prime++;\n                if (prime > Math.Sqrt(n))\n\
    \                    break;\n            }\n        }\n\n        return list;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e51884dfa1b94b1ab37da8dfc83d2eab>:0 \n"
  stdout: None
  timestamp: 1659976328
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        var factorization\
    \ = new List<long>();\n        double d = (double)n;\n        for (int i = 1;\
    \ i <= (int)Math.Sqrt(d); i++) {\n            while (n % i == 0) {\n         \
    \       factorization.Add((long)i);\n                n = n / i;\n            }\n\
    \        }\n        if (n != 1) factorization.Add((long)n);\n        return factorization;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659976328
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        long\
    \ result = 1;\n        long p = 2;\n        while (n > 1) {\n            if (n\
    \ % p == 0) result *= p;\n            n /= p;\n            p++;\n        }\n \
    \       return new List<long>(new long[] { result });\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f6d2f2ffbc849dfa9a8ffe3227df1c7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f6d2f2ffbc849dfa9a8ffe3227df1c7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976323
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        factors.AddRange(Factorize2(n));\n    \
    \    factors.AddRange(Factorize3(n));\n        return factors;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppvcqg7xx.cs(20,26): error CS0103: The name ''Factorize2'' does not exist
    in the current context

    /tmp/tmppvcqg7xx.cs(21,26): error CS0103: The name ''Factorize3'' does not exist
    in the current context

    '
  timestamp: 1659976323
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        var factors\
    \ = new List<long>();\n        if (n < 2) {\n            factors.Add(n);\n   \
    \         return factors;\n        }\n        var root = (int)Math.Sqrt(n);\n\
    \        while (n % 2 == 0) {\n            factors.Add(2);\n            n /= 2;\n\
    \        }\n        var i = 2;\n        do {\n            while ((n % i) == 0)\
    \ {\n                factors.Add(i);\n                n /= i;\n            }\n\
    \            i += 2;\n        } while (i < root);\n        return factors;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d0f69740eea453285e6da82e5c41bcb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d0f69740eea453285e6da82e5c41bcb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976323
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        long\
    \ product = (long) Math.Sqrt(n);\n        List<long> factors = new List<long>();\n\
    \        while (n % product != 0) {\n            while (n % product != 0) {\n\
    \                product = product / 2;\n            }\n            factors.Add(product);\n\
    \            n = product * product;\n        }\n        factors.Add(n);\n    \
    \    return factors;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <55197ba384434d2d9533cfda969d9b29>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <55197ba384434d2d9533cfda969d9b29>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976323
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        // Step\
    \ 1: get factors of n\n        List<long> factors = new List<long>();\n      \
    \  long next, curr = n, prev;\n        while (curr != 1) {\n            next =\
    \ curr / 2;\n            while (next != 1) {\n                prev = next;\n \
    \               next = next * prev;\n            }\n            factors.Add(prev);\n\
    \            curr = prev;\n        }\n\n        // Step 2: convert factors to\
    \ primes, starting from smallest factor to largest\n        List<long> primes\
    \ = new List<long>();\n        factors.Reverse();\n        for (int i = 0; i <\
    \ factors.Count; i++) {\n            long factor = factors[i];\n            while\
    \ (factor != 1) {\n                if (primes.Contains(factor)) {\n          \
    \          break;\n                } else {\n                    primes.Add(factor);\n\
    \                }\n                factor = factor * factor;\n            }\n\
    \        }\n        return primes;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmqsea8ev.cs(28,25): error CS0165: Use of unassigned local variable ''prev''

    '
  timestamp: 1659976323
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        // Prime\
    \ numbers <= 32 have no factors\n        if (n < 2) return new List<long>();\n\
    \        // List of factors found\n        List<long> factors = new List<long>();\n\
    \        // Use Sieve of Eratosthenes\n        // http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n\
    \        // http://blogs.msdn.com/b/ericlippert/archive/2011/02/28/gimvy-why-is-100-000-faster-than-general-prime-tests-part-three.aspx\n\
    \        List<bool> primes = new List<bool>();\n        primes.Add(true);\n  \
    \      primes.AddRange(new bool[(int)((double)n + 1) / 2]);\n        primes.Add(true);\n\
    \        for (int i = 2; i <= n; i+=2) {\n            if (primes[i]) factors.Add(i);\n\
    \            for (int j = i * i; j < n; j += i) {\n                primes[j] =\
    \ false;\n            }\n        }\n        return factors;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <85fcb031ef214a8fa8b6fdafb92b0e3d>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative\
    \ and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item\
    \ (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ Problem.Factorize (System.Int64 n) [0x00052] in <85fcb031ef214a8fa8b6fdafb92b0e3d>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00023] in <85fcb031ef214a8fa8b6fdafb92b0e3d>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Factorize\
    \ (System.Int64 n) [0x00052] in <85fcb031ef214a8fa8b6fdafb92b0e3d>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00023] in <85fcb031ef214a8fa8b6fdafb92b0e3d>:0 \n"
  stdout: ''
  timestamp: 1659976324
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        if (n\
    \ < 2) return new List<long>();\n        List<long> result = new List<long>();\n\
    \        long a = n;\n        long b = 2;\n        while (a != 0) {\n        \
    \    while (a % b == 0) {\n                result.Add(b);\n                a /=\
    \ b;\n            }\n            b <<= 1;\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.DivideByZeroException: Attempted to divide\
    \ by zero.\n  at Problem.Factorize (System.Int64 n) [0x00031] in <f5c93c037f854e48b65a27f19c8a2ea8>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <f5c93c037f854e48b65a27f19c8a2ea8>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.DivideByZeroException: Attempted\
    \ to divide by zero.\n  at Problem.Factorize (System.Int64 n) [0x00031] in <f5c93c037f854e48b65a27f19c8a2ea8>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <f5c93c037f854e48b65a27f19c8a2ea8>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976323
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        var factors\
    \ = new List<long>();\n        factors.Add(2);\n\n        // Add only factors\
    \ of prime numbers larger than n.\n        factors.AddRange(factorsOfPrimes(n,\
    \ factors));\n\n        // Add the number itself if it is a factor.\n        if\
    \ (n != 1) {\n            factors.Add(n);\n        }\n\n        return factors;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_hz1zcd6.cs(23,26): error CS0103: The name ''factorsOfPrimes'' does not
    exist in the current context

    '
  timestamp: 1659976323
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        if (n\
    \ == 1) return new List<long>(new long[] {n});\n        var primes = new List<long>();\n\
    \        primes.AddRange(Factorize(n, new long[]{0}));\n        if (primes.Count\
    \ == 0) { return new List<long>(new long[]{n}); }\n        primes.Sort();\n  \
    \      var newPrimes = new List<long>();\n        bool isPrime = true;\n     \
    \   long divisor = 1;\n        for (int i = 0; i < primes.Count; i++) {\n    \
    \        if (primes[i] == 1) {\n                divisor = n;\n               \
    \ isPrime = false;\n            }\n            while (divisor <= n && isPrime)\
    \ {\n                if (n % divisor == 0) {\n                    isPrime = false;\n\
    \                    break;\n                }\n                divisor++;\n \
    \           }\n            if (isPrime)\n                newPrimes.Add(divisor);\n\
    \        }\n        newPrimes.Sort();\n        return newPrimes;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy15yv7yf.cs(21,25): error CS1501: No overload for method ''Factorize''
    takes 2 arguments

    '
  timestamp: 1659976323
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        var q\
    \ = new Queue<long>();\n        var r = new Queue<long>();\n        var s = new\
    \ Queue<long>();\n        var t = 0;\n        while (n != 1) {\n            while\
    \ (n % 2 == 0) {\n                q.Enqueue(2);\n                n /= 2;\n   \
    \         }\n            while (n % 3 == 0) {\n                q.Enqueue(3);\n\
    \                n /= 3;\n            }\n            while (n % 5 == 0) {\n  \
    \              q.Enqueue(5);\n                n /= 5;\n            }\n       \
    \     while (n % 7 == 0) {\n                q.Enqueue(7);\n                n /=\
    \ 7;\n            }\n            while (n % 11 == 0) {\n                q.Enqueue(11);\n\
    \                n /= 11;\n            }\n            while (n % 13 == 0) {\n\
    \                q.Enqueue(13);\n                n /= 13;\n            }\n   \
    \         while (n % 17 == 0) {\n                q.Enqueue(17);\n            \
    \    n /= 17;\n            }\n            while (n % 19 == 0) {\n            \
    \    q.Enqueue(19);\n                n /= 19;\n            }\n            if (n\
    \ > 1) {\n                q.Enqueue(n);\n            }\n            while (q.Count\
    \ != 0) {\n                r = new Queue<long>();\n                while (q.Count\
    \ != 0) {\n                    t = q.Dequeue();\n                    if (t.IsPrime())\n\
    \                    {\n                        r.Enqueue(t);\n              \
    \          break;\n                    }\n                    else\n         \
    \           {\n                        r.Enqueue(t);\n                    }\n\
    \                }\n                s = r.Distinct();\n                if (s.Count\
    \ != 0) {\n                    n /= s.First();\n                }\n          \
    \  }\n        }\n        return q.ToList();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpot660mrg.cs(62,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpot660mrg.cs(63,27): error CS1061: ''int'' does not contain a definition
    for ''IsPrime'' and no accessible extension method ''IsPrime'' accepting a first
    argument of type ''int'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpot660mrg.cs(73,21): error CS0266: Cannot implicitly convert type ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.Queue<long>''. An explicit conversion exists (are
    you missing a cast?)

    '
  timestamp: 1659976323
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        var factorization\
    \ = Factorization(n);\n        if (factorization.Count() == 0)\n            return\
    \ new List<long>();\n        factorization.Sort();\n        var result = new List<long>();\n\
    \        var factors = new long[factorization.Count()];\n        var index = 0;\n\
    \        for (int i = 1; i < factorization.Count(); i++) {\n            var f\
    \ = factorization[i];\n            if (factors[index] == 0) {\n              \
    \  factors[index] = f;\n                index++;\n            }\n            else\n\
    \                factors[index] += f;\n        }\n        for (int i = 0; i <\
    \ factors.Length; i++) {\n            if (factors[i] == 0)\n                result.Add(0);\n\
    \            else\n                result.Add(factors[i]);\n        }\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcrv3ksl6.cs(19,29): error CS0103: The name ''Factorization'' does not
    exist in the current context

    '
  timestamp: 1659976323
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        long i = 2;\n        while (n % i != 0)\
    \ {\n            factors.Add(i);\n            n = n / i;\n        }\n        while\
    \ (n > 2) {\n            factors.Add(n);\n            n = n / 2;\n        }\n\
    \        return factors;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ef9ddac67bf428e8b741f916a3e2cb3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ef9ddac67bf428e8b741f916a3e2cb3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976324
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        long[] factorization = new long[n];\n \
    \       for (int i = 1; i < factorization.Length; i++) {\n            if (n %\
    \ i == 0) {\n                factorization[i] = i;\n                while (n %\
    \ i == 0) {\n                    factors.Add(i);\n                    n /= i;\n\
    \                }\n            }\n        }\n        return factors;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659976329
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        // TODO:\
    \ implement me\n        return new List<long>();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5279170b94f340b4afe487394c274b43>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5279170b94f340b4afe487394c274b43>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976324
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        long\
    \ largestFactor = n; //(Math.Sqrt(n) + 1);\n        List<long> primeFactors =\
    \ new List<long>();\n        long factor = 2;\n        while (factor < largestFactor)\
    \ {\n            while (n % factor == 0) {\n                n /= factor;\n   \
    \             primeFactors.Add(factor);\n            }\n            factor++;\n\
    \        }\n        return primeFactors;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7b45fbb36ce4fe5b90edf5eaa22e450>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7b45fbb36ce4fe5b90edf5eaa22e450>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976324
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        long\
    \ s = n;\n        long t = 0;\n        List<long> factors = new List<long>();\n\
    \        while (s % 2 == 0) {\n            factors.Add(2);\n            s /= 2;\n\
    \        }\n        int counter = 1;\n        while (s > 1) {\n            t =\
    \ s;\n            while (t % 2 == 0) {\n                factors.Add(2);\n    \
    \            t /= 2;\n            }\n            s /= 2;\n            counter++;\n\
    \        }\n        return factors;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f8bb1cccbfad46fcb661c7751501cf61>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f8bb1cccbfad46fcb661c7751501cf61>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976324
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        // Calculate\
    \ prime factorization\n        long factorization = factorization(n);\n      \
    \  // Find the primes\n        return primes(factorization).OrderByDescending(x\
    \ => x).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpohpb5zhg.cs(20,30): error CS0149: Method name expected

    /tmp/tmpohpb5zhg.cs(22,16): error CS0103: The name ''primes'' does not exist in
    the current context

    /tmp/tmpohpb5zhg.cs(20,30): error CS0165: Use of unassigned local variable ''factorization''

    '
  timestamp: 1659976324
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        // Primes\
    \ are represented as a collection of distinct prime factors, \n        // sorted\
    \ by whether they are larger than n (the least positive).\n        // The smallest\
    \ prime (2) is represented by 2 and all of its prime factors, \n        // 3 is\
    \ represented by 3 and all of its prime factors, and so forth.\n        // In\
    \ fact, the largest prime (10) is represented by 10 and all of its prime factors.\n\
    \        // For instance, the prime factorization of 10 is [2, 5] and [2, 10].\n\
    \        List<long> factors = new List<long>();\n        bool isPrime = true;\n\
    \        int i = 2;\n        while (i < n && isPrime) {\n            isPrime =\
    \ IsPrime(i);\n            factors.Add(i);\n            i += isPrime;\n      \
    \  }\n        Debug.Assert(n >= 2); // Should only be called for non-negative\
    \ integers\n        return factors;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ska6y_h.cs(29,23): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    /tmp/tmp0ska6y_h.cs(31,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''int'' and ''bool''

    '
  timestamp: 1659976324
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        if (n\
    \ < 2L) return new List<long>(new long[]{2L});\n        var f = new List<long>();\n\
    \        long a = n + 1L;\n        while (a != 1L) {\n            if (a % 2L ==\
    \ 0) return new List<long>(new long[]{2L});\n            long s = a;\n       \
    \     a = s / 2L;\n            while (s != 1L) {\n                if (s % 2L ==\
    \ 0) return new List<long>(new long[]{s});\n                s = s / 2L;\n    \
    \        }\n            f.Add(a);\n        }\n        return f;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <98bc781f40224a95bdbdd32181587845>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <98bc781f40224a95bdbdd32181587845>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976324
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        BigInteger i = BigInteger.DivideByOne(n);\n\
    \        BigInteger p = BigInteger.DivideByInt(n);\n        while (p.CompareTo(BigInteger.One)\
    \ >= 0) {\n            BigInteger temp = i;\n            BigInteger pDiv = p;\n\
    \            while (temp.CompareTo(pDiv) >= 0) {\n                if (temp.Multiply(temp).CompareTo(n)\
    \ == 0) {\n                    factors.Add(temp);\n                }\n       \
    \         temp = temp.Multiply(temp);\n            }\n            pDiv = pDiv.Add(BigInteger.One);\n\
    \            i = i.Add(BigInteger.One);\n            p = p.Add(BigInteger.One);\n\
    \        }\n        return factors;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1z5b1ii2.cs(20,35): error CS0117: ''BigInteger'' does not contain a definition
    for ''DivideByOne''

    /tmp/tmp1z5b1ii2.cs(21,35): error CS0117: ''BigInteger'' does not contain a definition
    for ''DivideByInt''

    /tmp/tmp1z5b1ii2.cs(26,26): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''right'' of ''BigInteger.Multiply(BigInteger,
    BigInteger)''

    /tmp/tmp1z5b1ii2.cs(27,33): error CS1503: Argument 1: cannot convert from ''System.Numerics.BigInteger''
    to ''long''

    /tmp/tmp1z5b1ii2.cs(29,29): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''right'' of ''BigInteger.Multiply(BigInteger,
    BigInteger)''

    /tmp/tmp1z5b1ii2.cs(31,25): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''right'' of ''BigInteger.Add(BigInteger, BigInteger)''

    /tmp/tmp1z5b1ii2.cs(32,19): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''right'' of ''BigInteger.Add(BigInteger, BigInteger)''

    /tmp/tmp1z5b1ii2.cs(33,19): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''right'' of ''BigInteger.Add(BigInteger, BigInteger)''

    '
  timestamp: 1659976324
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        long factor = 1;\n        while (n > 1)\
    \ {\n            factor = 2;\n            while (n == factor * factor) {\n   \
    \             factor++;\n            }\n            factors.Add(factor);\n   \
    \         n /= factor;\n        }\n        return factors;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9886085857b14a928d35e369ad78f922>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9886085857b14a928d35e369ad78f922>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976324
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        var primes\
    \ = new List<long>();\n        for (int i = 2; i <= Math.Sqrt(n); i++)\n     \
    \       if (n % i == 0) {\n                while (n % i == 0)\n              \
    \      n /= i;\n                primes.Add(i);\n            }\n        return\
    \ new List<long>(primes);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e2650e650d4462ca4e6ba50717d3b24>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e2650e650d4462ca4e6ba50717d3b24>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976324
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        if (n == 1L) return factors;\n        if\
    \ (n % 2 == 0L) {\n            factors.Add(2L);\n        }\n        long sqrtn\
    \ = Math.Sqrt(n);\n        long n1 = (long)sqrtn;\n        long n2 = n - 1;\n\
    \        for (long m = 2; m <= n2; m++) {\n            if (n % m == 0L) {\n  \
    \              factors.Add(m);\n                n = n / m;\n                long\
    \ n11 = n % m;\n                long n12 = n - n11;\n                if (n12 ==\
    \ m) {\n                    factors.Add(n11);\n                }\n           \
    \ }\n        }\n        return factors;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1sfx2l2l.cs(24,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976324
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        long\
    \ maxFactor = 2;\n        long factor = 1;\n        long fact = n;\n        while\
    \ (fact != 1) {\n            while (fact % maxFactor == 0) {\n               \
    \ fact = fact / maxFactor;\n                factor++;\n            }\n       \
    \     maxFactor *= factor;\n        }\n        List<long> result = new List<long>(new\
    \ long[] { maxFactor });\n        while (fact != 1) {\n            if (fact %\
    \ maxFactor == 0) {\n                fact = fact / maxFactor;\n              \
    \  result.Add(maxFactor);\n            }\n            maxFactor *= factor;\n \
    \       }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <537f4e8de23f4ef9aea4d658c1e6e9b7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <537f4e8de23f4ef9aea4d658c1e6e9b7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: None
  timestamp: 1659976329
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        if (n\
    \ == 1L) {\n            return new List<long>(new long[] { n });\n        }\n\
    \        List<long> factors = new List<long>();\n        long maxFactor = n;\n\
    \        for (long i = 2; i <= maxFactor; i++) {\n            if (n % i == 0)\
    \ {\n                maxFactor = i + (n - i) / i;\n                factors.Add(i);\n\
    \            }\n        }\n        if (factors.Count != 1) {\n            factors.Add(n);\n\
    \        }\n        return factors;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <53b7839c847144e5823960ecd50764dd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <53b7839c847144e5823960ecd50764dd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976324
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        var isPrime\
    \ = new bool[n - 1];\n\n        // Generate array of prime numbers from 1 to n\n\
    \        for (int i = 0; i < isPrime.Length; i++) {\n            if (n % i ==\
    \ 0) {\n                isPrime[i] = false;\n            }\n            else {\n\
    \                isPrime[i] = true;\n            }\n        }\n\n        var primes\
    \ = new List<long>();\n        // Generate the array of factors by using Sieve\
    \ of Eratosthenes algorithm\n        for (int i = 2; i <= n; i++) {\n        \
    \    if (isPrime[i]) {\n                primes.Add(i);\n                int j\
    \ = i;\n                while (!isPrime[j]) {\n                    j += i;\n \
    \               }\n                isPrime[j] = false;\n            }\n      \
    \  }\n        return primes;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.DivideByZeroException: Attempted to divide\
    \ by zero.\n  at Problem.Factorize (System.Int64 n) [0x00011] in <237504dc9c584af9a96182da68f16c1e>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <237504dc9c584af9a96182da68f16c1e>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.DivideByZeroException: Attempted\
    \ to divide by zero.\n  at Problem.Factorize (System.Int64 n) [0x00011] in <237504dc9c584af9a96182da68f16c1e>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <237504dc9c584af9a96182da68f16c1e>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976324
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        long\
    \ factorization = 1;\n        long factorization2 = 2;\n        bool isPrime;\n\
    \        List<long> factors = new List<long>();\n        while (factorization\
    \ <= n) {\n            isPrime = true;\n            factorization2 = factorization;\n\
    \            while (factorization % factorization2 != 0) {\n                isPrime\
    \ = false;\n                factorization2 += factorization2;\n            }\n\
    \            if (isPrime) {\n                factors.Add(factorization2);\n  \
    \              factorization += factorization2;\n            }\n        }\n  \
    \      return factors;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <706081737ec446f78d71cf6dfb3486c6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <706081737ec446f78d71cf6dfb3486c6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976324
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        var factors\
    \ = new List<long>();\n        var factorization = Factorization(n);\n       \
    \ foreach (var f in factorization) {\n            for (int i = 0; i < factors.Count;\
    \ ++i) {\n                if (factors[i] == f) {\n                    factors.RemoveAt(i);\n\
    \                    break;\n                }\n            }\n            factors.Add(f);\n\
    \        }\n        return factors;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp39bnj7ue.cs(20,29): error CS0103: The name ''Factorization'' does not
    exist in the current context

    '
  timestamp: 1659976324
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        bool\
    \ isPrime = true;\n        List<long> result = new List<long>();\n        for\
    \ (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n           \
    \     isPrime = false;\n                break;\n            }\n        }\n   \
    \     if (isPrime) {\n            result.Add(n);\n            int limit = n /\
    \ 2;\n            while (limit > 1) {\n                if (n % limit == 0) {\n\
    \                    result.Add(limit);\n                    limit /= 2;\n   \
    \             } else {\n                    break;\n                }\n      \
    \      }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjntt0bt6.cs(29,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976324
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        if (n\
    \ < 2L) {\n            return new List<long>();\n        }\n        var factors\
    \ = new List<long>();\n        Factorize(n, 2L, factors);\n        return factors;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe7q9t9dd.cs(23,9): error CS1501: No overload for method ''Factorize''
    takes 3 arguments

    '
  timestamp: 1659976324
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factorization = new List<long>();\n        long smallestFactor = 2 L;\n    \
    \    long factor = 1;\n        long smallestFactor2 = 2 L;\n        long factor2\
    \ = 1;\n        do {\n            factorization = new List<long>();\n        \
    \    if (n % factor == 0)\n            {\n                factorization = new\
    \ List<long>();\n                factorization.Add(factor);\n                factor2\
    \ = n / factor;\n            }\n            while (n % factor == 0 && n % factor2\
    \ == 0) {\n                factor2 = n / factor2;\n                factorization.Add(factor2);\n\
    \                factor *= factor2;\n            }\n            smallestFactor2\
    \ = smallestFactor;\n            smallestFactor = factorization[factorization.Count\
    \ - 1]; \n        } while (factor != smallestFactor);\n        return factorization;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsc96apul.cs(20,33): error CS1002: ; expected

    /tmp/tmpsc96apul.cs(22,34): error CS1002: ; expected

    '
  timestamp: 1659976324
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        factors.Add(2);\n        for (long d =\
    \ 2; d * d <= n; d += 2) {\n            for (int i = 2; i <= n / d; i++) {\n \
    \               if (n % i == 0) {\n                    long j = (long) Math.Floor(n\
    \ / i);\n                    while (j % d == 0) {\n                        factors.Add(j);\n\
    \                        n /= i;\n                    }\n                }\n \
    \           }\n        }\n        return factors;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppf8bu6ji.cs(24,42): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Floor(decimal)'' and ''Math.Floor(double)''

    '
  timestamp: 1659976324
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        long factor = 1;\n        while (n > 1)\
    \ {\n            factor = 1;\n            long i = 0;\n            while (n %\
    \ factor == 0) {\n                n /= factor;\n                i++;\n       \
    \     }\n            factors.Add(factor);\n            if (i != 1) factors.Add(i);\n\
    \        }\n        return factors;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659976329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        long squareRoot = n.Sqrt(n);\n        while\
    \ (squareRoot != 1) {\n            long r = squareRoot;\n            long g =\
    \ n - r;\n            squareRoot = g.Sqrt(g);\n            if (g > 1) {\n    \
    \            factors.Add(r);\n                factors.Add(g);\n            }\n\
    \            n = r;\n        }\n        return factors;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4dy3fbay.cs(20,29): error CS1061: ''long'' does not contain a definition
    for ''Sqrt'' and no accessible extension method ''Sqrt'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmp4dy3fbay.cs(24,28): error CS1061: ''long'' does not contain a definition
    for ''Sqrt'' and no accessible extension method ''Sqrt'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659976324
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        long[]\
    \ factors = new long[(int) Math.Sqrt(n)];\n        long sq = n * n;\n        long\
    \ limit = BigInteger.Sqrt(sq);\n        \n        for (int i = 1; i <= limit;\
    \ i++)\n        {\n            while (sq > i * i)\n            {\n           \
    \     sq -= i * i;\n            }\n\n            if (sq == i)\n            {\n\
    \                factors[(int) i] = (long) i;\n            }\n        }\n    \
    \    \n        List<long> list = new List<long>(factors.Length);\n        for\
    \ (int i = 0; i < factors.Length; i++)\n        {\n            list.Add(factors[i]);\n\
    \        }\n        return list;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprk51mzf7.cs(21,33): error CS0117: ''BigInteger'' does not contain a definition
    for ''Sqrt''

    '
  timestamp: 1659976324
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        int n = GetFactorization(n);\n        bool\
    \ flag = true;\n        long i = 2;\n        while (flag) {\n            if (n\
    \ % i == 0) {\n                factors.Add(i);\n                n /= i;\n    \
    \            flag = false;\n                i++;\n            } else {\n     \
    \           flag = true;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpreb2vx8z.cs(20,13): error CS0136: A local or parameter named ''n'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpreb2vx8z.cs(20,17): error CS0103: The name ''GetFactorization'' does not
    exist in the current context

    /tmp/tmpreb2vx8z.cs(26,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpreb2vx8z.cs(20,34): error CS0165: Use of unassigned local variable ''n''

    '
  timestamp: 1659976324
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        // Sieve\
    \ of Eratosthenes\n        long[] primes = new long[(int) Math.Sqrt(n + 1)];\n\
    \        // Fill with 2\n        primes[0] = 2;\n        // Fill with remaining\
    \ odd numbers\n        for (int i = 3; i <= Math.Sqrt(n); i += 2)\n          \
    \  primes[i] = (long) i;\n        // Cycle through primes testing if each is divisible\
    \ by any larger prime\n        for (int prime = primes.Length - 1; prime >= 1;\
    \ prime--) {\n            if (primes[prime] % prime == 0) {\n                for\
    \ (int test = (prime << 1) + 1; test <= prime; test += prime) {\n            \
    \        if (test > prime)\n                        continue;\n              \
    \      if (primes[test] % prime == 0)\n                        primes[prime] =\
    \ test;\n                }\n            }\n        }\n        // Get factors of\
    \ n that are greater than 1 and in ascending order of frequency\n        List<long>\
    \ factors = new List<long>();\n        while (n > 1) {\n            if (n % 2\
    \ == 0)\n                factors.Add(2);\n            while (n > 2) {\n      \
    \          if (n % prime == 0)\n                    factors.Add(prime * 2);\n\
    \                n /= prime;\n            }\n        }\n        // Sort factors\
    \ in descending order of frequency\n        factors.Sort((a, b) => b - a);\n \
    \       return factors;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ws4ry6g.cs(43,25): error CS0103: The name ''prime'' does not exist in
    the current context

    /tmp/tmp0ws4ry6g.cs(44,33): error CS0103: The name ''prime'' does not exist in
    the current context

    /tmp/tmp0ws4ry6g.cs(45,22): error CS0103: The name ''prime'' does not exist in
    the current context

    /tmp/tmp0ws4ry6g.cs(49,32): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp0ws4ry6g.cs(49,32): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659976325
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        double d = (int)Math.Sqrt(n);\n       \
    \ for(int x = 2; x <= (int)Math.Floor(d); x++) {\n            if(n % x == 0) {\n\
    \                factors.Add(x);\n                n /= x;\n            }\n   \
    \     }\n        factors.Add(n);\n        return factors;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3826b3f167cf489c978251177454cd5a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3826b3f167cf489c978251177454cd5a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        long\
    \ fact = 1;\n        bool isPrime = true;\n        List<long> factors = new List<long>();\n\
    \n        for (long i = 1; i < n; i++)\n        {\n            if (n % i == 0)\n\
    \            {\n                isPrime = false;\n                fact = fact\
    \ * i;\n            }\n        }\n\n        if (isPrime)\n        {\n        \
    \    factors.Add(fact);\n        }\n\n        factors = FactorizePrimes(factors);\n\
    \n        return factors;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz_2z7qab.cs(37,19): error CS0103: The name ''FactorizePrimes'' does not
    exist in the current context

    '
  timestamp: 1659976325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        bool\
    \ check = true;\n        long n = n;\n        int count = 1;\n        List<long>\
    \ result = new List<long>();\n        for (int i = 1; i < Math.Sqrt(n); i++) {\n\
    \            while (n % i == 0) {\n                if (check) {\n            \
    \        count++;\n                }\n                else {\n               \
    \     break;\n                }\n            }\n            if (count == 2) {\n\
    \                result.Add(i);\n                n = n / i;\n                count\
    \ = 0;\n            }\n            else if (count == 1) {\n                result.Add(i);\n\
    \                n = n / i;\n                count = 0;\n            }\n     \
    \   }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyq_2e7uf.cs(20,14): error CS0136: A local or parameter named ''n'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpyq_2e7uf.cs(20,18): error CS0165: Use of unassigned local variable ''n''

    '
  timestamp: 1659976325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        BigInteger\
    \ bi = new BigInteger(n.ToString());\n        List<long> result = new List<long>();\n\
    \        List<long> factors = BigInteger.Factorize(bi);\n        foreach (var\
    \ item in factors) {\n            int count = 1;\n            BigInteger temp\
    \ = item;\n            while (temp.ToString().Contains(\"0\")) {\n           \
    \     count++;\n                temp = temp.Divide(BigInteger.Pow(2, count));\n\
    \            }\n            result.Add(temp);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvznr64c2.cs(19,40): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    /tmp/tmpvznr64c2.cs(21,41): error CS0117: ''BigInteger'' does not contain a definition
    for ''Factorize''

    /tmp/tmpvznr64c2.cs(27,29): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''divisor'' of ''BigInteger.Divide(BigInteger,
    BigInteger)''

    /tmp/tmpvznr64c2.cs(29,24): error CS1503: Argument 1: cannot convert from ''System.Numerics.BigInteger''
    to ''long''

    '
  timestamp: 1659976325
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        long factor = 2;\n        while (factor\
    \ <= n) {\n            if (n % factor == 0) {\n                factors.Add(factor);\n\
    \                while (factor <= n / factor) {\n                    factor *=\
    \ factor;\n                    if (n % factor == 0) {\n                      \
    \  factors.Add(factor);\n                        factor++;\n                 \
    \   }\n                }\n                n = n / factor;\n            }\n   \
    \         factor++;\n        }\n        return factors;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7913a15816274e7aba2a44988a78312a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7913a15816274e7aba2a44988a78312a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ result = new List<long>();\n        long maxFactor = n; // initial candidate\n\
    \        while (maxFactor >= 2) {\n            // If divisor is 2, skip\n    \
    \        if (maxFactor % 2 == 0) {\n                maxFactor = maxFactor / 2;\n\
    \                result.Add(maxFactor);\n                continue;\n         \
    \   }\n            \n            // Try all odd divisors from 2 to sqrt(maxFactor)\n\
    \            long next = 2;\n            int prime = 1;\n            long factor\
    \ = maxFactor;\n            while (next <= maxFactor) {\n                prime++;\n\
    \                long temp = (long)Math.Sqrt(maxFactor);\n                if (temp\
    \ % next == 0) {\n                    factor = maxFactor;\n                  \
    \  break;\n                }\n                next++;\n            }\n       \
    \     \n            // Check if current divisor is prime\n            while (factor\
    \ * factor < maxFactor) {\n                long temp = maxFactor;\n          \
    \      while (temp % factor != 0) {\n                    temp--;\n           \
    \     }\n                if (temp >= 2) {\n                    result.Add(factor);\n\
    \                    factor++;\n                }\n                maxFactor =\
    \ temp;\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5824a13acb2b428a85df1c8fc216dc58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5824a13acb2b428a85df1c8fc216dc58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: None
  timestamp: 1659976330
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        if (n\
    \ % 2 == 0) {\n            Factorize(n * 2);\n        } else {\n            long\
    \ m = n / 2;\n            long[] factors = Factorize(m);\n            for (int\
    \ i = 0; i < factors.Length; i++) {\n                if (m % factors[i] == 0)\
    \ {\n                    factors[i] = factors[i] + 1;\n                    break;\n\
    \                }\n            }\n            factors[factors.Length - 1] = n;\n\
    \            return factors;\n        }\n        return new List<long>();\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp53z2_s99.cs(23,30): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long[]''

    /tmp/tmp53z2_s99.cs(31,20): error CS0029: Cannot implicitly convert type ''long[]''
    to ''System.Collections.Generic.List<long>''

    '
  timestamp: 1659976325
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ list = new List<long>();\n        if (n == 1) {\n            return list;\n\
    \        }\n        list.Add(1);\n        for (int i = 2; i <= n; i++) {\n   \
    \         while (n % i == 0) {\n                list.Add(i);\n               \
    \ n /= i;\n            }\n        }\n        if (n != 1) {\n            list.Add(n);\n\
    \        }\n        return list;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e0072d9a3bbe4e2a9713bd765c469ea5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e0072d9a3bbe4e2a9713bd765c469ea5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976325
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        bool\
    \ isPrime = true;\n        long numFactor = 1;\n        List<long> factors = new\
    \ List<long>();\n        for (long factor = 2; factor <= Math.Sqrt(n); factor++)\
    \ {\n            if (n % factor == 0) {\n                factors.Add(factor);\n\
    \                n /= factor;\n            } else {\n                isPrime =\
    \ false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            factors.Add(n);\n        }\n        return factors;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4c2c783e25a949edb90b9adcedcf9864>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4c2c783e25a949edb90b9adcedcf9864>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        // Prime\
    \ factorization of number must not contain number itself (otherwise it's trivial\
    \ factorization)\n        List<long> factors = new List<long>();\n        BigInteger\
    \ number = new BigInteger(n);\n        BigInteger number = new BigInteger(n);\n\
    \        BigInteger one = new BigInteger(1);\n        // Iterate over all prime\
    \ factors of number until it cannot be divided by all remaining factors\n    \
    \    while (number.Divide(one) != one) {\n            // Add this prime factor\
    \ to list of factors\n            factors.Add(number.Divide(one));\n         \
    \   number = number.Divide(one);\n        }\n        // Return list of factors\n\
    \        return factors;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpetjm9dzv.cs(22,20): error CS0128: A local variable or function named ''number''
    is already defined in this scope

    /tmp/tmpetjm9dzv.cs(25,23): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''divisor'' of ''BigInteger.Divide(BigInteger,
    BigInteger)''

    /tmp/tmpetjm9dzv.cs(27,32): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''divisor'' of ''BigInteger.Divide(BigInteger,
    BigInteger)''

    /tmp/tmpetjm9dzv.cs(28,29): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''divisor'' of ''BigInteger.Divide(BigInteger,
    BigInteger)''

    '
  timestamp: 1659976325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        // Find\
    \ prime factorization of given number\n        int[] primes = { 2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53 };\n        int[] factors = { 1,\
    \ 1, 1, 3 };\n        long factorization = n;\n        List<long> factorizations\
    \ = new List<long>();\n        BigInteger bigFactor = new BigInteger(factorization);\n\
    \        for (int i = 0; i < factors.Length; i++) {\n            BigInteger bigFactorMinusRemainder\
    \ = new BigInteger(factorization).Subtract(BigInteger.Divide(bigFactor, primes[i]));\n\
    \            if (bigFactorMinusRemainder < 1) {\n                factors.RemoveAt(i);\n\
    \                factorizations.Add(BigInteger.Divide(bigFactor, primes[i]));\n\
    \            }\n        }\n        factorizations.Add(BigInteger.Divide(bigFactor,\
    \ primes[factors.Length]));\n        return factorizations;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt4i0vv2z.cs(26,80): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''right'' of ''BigInteger.Subtract(BigInteger,
    BigInteger)''

    /tmp/tmpt4i0vv2z.cs(28,25): error CS1061: ''int[]'' does not contain a definition
    for ''RemoveAt'' and no accessible extension method ''RemoveAt'' accepting a first
    argument of type ''int[]'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpt4i0vv2z.cs(29,36): error CS1503: Argument 1: cannot convert from ''System.Numerics.BigInteger''
    to ''long''

    /tmp/tmpt4i0vv2z.cs(32,28): error CS1503: Argument 1: cannot convert from ''System.Numerics.BigInteger''
    to ''long''

    '
  timestamp: 1659976325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        Factorise(factors, n, new long[0]);\n \
    \       return factors;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7y9m19ov.cs(20,9): error CS0103: The name ''Factorise'' does not exist
    in the current context

    '
  timestamp: 1659976325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        // Initialize\
    \ factorization result list\n        List<long> result = new List<long>();\n \
    \       // Initialize list of factors\n        long[] factors = new long[(int)Math.Ceiling(Math.Log(n,\
    \ 2)) + 1];\n        // Enumerate all prime factors\n        double factor = 1;\n\
    \        for (int i = 2; i <= Math.Sqrt(n); i++) {\n            // If current\
    \ factor is less than or equal to square root of current number\n            //\
    \ then only current number is prime factor\n            if (factor <= Math.Sqrt(n))\
    \ {\n                // If current factor is equal to square root of current number\n\
    \                // then current number is a prime number\n                if\
    \ (Math.Sqrt(n) % i == 0) {\n                    // Add to factorization list\n\
    \                    factors[(int)factor]++;\n                }\n            }\n\
    \            // Update current factor\n            factor++;\n        }\n    \
    \    // Add number as factor to factorization list\n        factors[(int)factor]++;\n\
    \        // Iterate through factorization list and add to result list\n      \
    \  for (int i = 0; i < factors.Length; i++) {\n            result.Add((long)factors[i]);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ec000bc159b43dc8dad616f8902fb94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ec000bc159b43dc8dad616f8902fb94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        // Factor\
    \ number\n        long factor = n;\n        // Factor number by 2\n        while\
    \ (factor > 1) {\n            factor /= 2;\n        }\n        // Calculate prime\
    \ factorization of number\n        long[] factorization = Factorization(factor);\n\
    \        // Remove factors from factorization until they become equal to the number\
    \ itself\n        List<long> result = new List<long>();\n        while (factorization.Contains(factor))\
    \ {\n            factorization.Remove(factor);\n            result.Add(factor);\n\
    \            factor = n / factor;\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmputw6lmhm.cs(26,32): error CS0103: The name ''Factorization'' does not
    exist in the current context

    /tmp/tmputw6lmhm.cs(30,27): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''value'' of ''CollectionExtensions.Remove<TKey,
    TValue>(IDictionary<TKey, TValue>, TKey, out TValue)''

    '
  timestamp: 1659976325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        Debug.Assert(n\
    \ != 0);\n        List<long> res = new List<long>();\n        long sqrt = Math.Sqrt(n);\n\
    \        while (n > 0) {\n            long factor = ((n - 1) % sqrt + 1) / sqrt;\n\
    \            long p = Math.Floor(factor);\n            if (p != factor)\n    \
    \            res.Add(p);\n            n = (n - p * sqrt) / sqrt;\n        }\n\
    \        return res;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4o6ig1w3.cs(21,21): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp4o6ig1w3.cs(24,27): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Floor(decimal)'' and ''Math.Floor(double)''

    '
  timestamp: 1659976325
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        var factors\
    \ = new List<long>();\n        long factor = 0;\n        for (long i = 1; i <=\
    \ n; i++) {\n            while (n % i == 0) {\n                factor++;\n   \
    \             n /= i;\n            }\n            factors.Add(factor);\n     \
    \   }\n        return factors;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659976330
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        long max = 2;\n        long m = 2;\n  \
    \      while (n % m != 0) {\n            if (n % m == 0) {\n                factors.Add(m);\n\
    \                n /= m;\n            } else {\n                factors.Add(m);\n\
    \                m = m * 2;\n            }\n        }\n        if (n != 1) {\n\
    \            factors.Add(n);\n        }\n        return factors;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <41d5c7314e844e7a9fc8e6d980236fea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <41d5c7314e844e7a9fc8e6d980236fea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        // If\
    \ n is even, no need to factorize\n        if (n & 1L == 0) {\n            return\
    \ new List<long>(new long[] { (long)n });\n        }\n\n        // Find prime\
    \ factors up to sqrt(n)\n        List<long> factors = new List<long>();\n    \
    \    while (n > 0) {\n            long p = 2;\n            long q = 1;\n     \
    \       long r = n;\n\n            while (r > 0) {\n                long r = r\
    \ >> 1;\n                if ((n & r) == 0L) {\n                    q *= p;\n \
    \                   n /= r;\n                }\n                p++;\n       \
    \     }\n            factors.Add(q);\n        }\n        return factors;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm1o61_25.cs(20,13): error CS0019: Operator ''&'' cannot be applied to
    operands of type ''long'' and ''bool''

    /tmp/tmpm1o61_25.cs(32,22): error CS0136: A local or parameter named ''r'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpm1o61_25.cs(32,26): error CS0165: Use of unassigned local variable ''r''

    '
  timestamp: 1659976325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ f = new List<long>();\n        List<long> p = new List<long>();\n        p.Add(1);\n\
    \        long sq = n;\n        long factor = 1;\n        bool check = false;\n\
    \        while (sq != 1) {\n            if (sq % factor == 0) {\n            \
    \    sq /= factor;\n                p.Add(factor);\n                if (factor\
    \ == 2) {\n                    check = true;\n                    f.Add(2);\n\
    \                }\n            } else {\n                sq /= 2;\n         \
    \   }\n            factor++;\n        }\n        if (check) {\n            f.Add(sq);\n\
    \        }\n        foreach (long a in p) {\n            p.Remove(a);\n      \
    \      f.Add(a);\n        }\n        return f;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Collection was\
    \ modified; enumeration operation may not execute.\n  at System.Collections.Generic.List`1+Enumerator[T].MoveNextRare\
    \ () [0x00013] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.List`1+Enumerator[T].MoveNext\
    \ () [0x0004a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Factorize\
    \ (System.Int64 n) [0x000ac] in <e3ee2a2bbd514c38b60313e7f72409c7>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e3ee2a2bbd514c38b60313e7f72409c7>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Collection\
    \ was modified; enumeration operation may not execute.\n  at System.Collections.Generic.List`1+Enumerator[T].MoveNextRare\
    \ () [0x00013] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.List`1+Enumerator[T].MoveNext\
    \ () [0x0004a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Factorize\
    \ (System.Int64 n) [0x000ac] in <e3ee2a2bbd514c38b60313e7f72409c7>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e3ee2a2bbd514c38b60313e7f72409c7>:0 \n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        var factors\
    \ = new List<long>();\n        var divisors = Divisors(n);\n        foreach (var\
    \ d in divisors) {\n            if (n % d == 0) {\n                factors.Add(d);\n\
    \                n /= d;\n            }\n        }\n        factors.Add(n);\n\
    \        return factors;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkns2fx9a.cs(20,24): error CS0103: The name ''Divisors'' does not exist
    in the current context

    '
  timestamp: 1659976325
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        Debug.Assert(n\
    \ > 1);\n        Debug.Assert(n % 2 == 0);\n\n        // Factor by squaring n\n\
    \        long square = n * n;\n        Debug.Assert(square % 2 == 0);\n      \
    \  Debug.Assert(square % 3 != 0);\n        Debug.Assert(square % 5 == 0);\n  \
    \      Debug.Assert(square % 7 == 0);\n\n        // Factor by dividing by 3 5\
    \ 7 -> 2 5 2\n        long count = 3;\n        long last = 2; \n        long squareSqrt\
    \ = square * square;\n        long lastHalf = squareSqrt - square;\n        long\
    \ half = lastHalf / 2;\n\n        // factor by dividing by 5\n        while (half\
    \ != lastHalf) {\n            if (square % last % 2 == 0) {\n                count++;\n\
    \            }\n\n            last += 2;\n            lastHalf = squareSqrt -\
    \ square;\n            half = lastHalf / 2;\n        }\n\n        // factor by\
    \ dividing by 7\n        while (half != lastHalf) {\n            if (square %\
    \ last % 5 == 0) {\n                count++;\n            }\n\n            last\
    \ += 5;\n            lastHalf = squareSqrt - square;\n            half = lastHalf\
    \ / 2;\n        }\n\n        return new List<long>() { count, last };\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Factorize (System.Int64\
    \ n) [0x00000] in <bdeb79f515174ae6bbb6d9c1741ef565>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bdeb79f515174ae6bbb6d9c1741ef565>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Factorize (System.Int64\
    \ n) [0x00000] in <bdeb79f515174ae6bbb6d9c1741ef565>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bdeb79f515174ae6bbb6d9c1741ef565>:0 \n"
  stdout: None
  timestamp: 1659976330
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        bool\
    \ isPrime = true;\n        long lastDivisor = n;\n        List<long> factors =\
    \ new List<long>();\n        while (isPrime) {\n            isPrime = false;\n\
    \            long nextDivisor = 1;\n            for (long divisor = lastDivisor;\
    \ divisor != 1; divisor = nextDivisor) {\n                if (n % divisor == 0)\
    \ {\n                    nextDivisor = divisor * 2;\n                    isPrime\
    \ = true;\n                    break;\n                }\n            }\n    \
    \        if (isPrime)\n                factors.Add(lastDivisor);\n           \
    \ lastDivisor = nextDivisor;\n        }\n        return factors;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <94f18910dcd542ccba85ab2d4c347203>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <94f18910dcd542ccba85ab2d4c347203>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976326
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n\n        while (n > 1) {\n            long m =\
    \ n % 10;\n            while (m != 0) {\n                if (m % 2 == 0) break;\n\
    \                m /= 2;\n            }\n            if (m == 1) factors.Add(m);\n\
    \            n /= 10;\n        }\n\n        return factors;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4608341bef9846688ef7c617545ec0b4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4608341bef9846688ef7c617545ec0b4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976326
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        int i\
    \ = 0;\n        List<long> factors = new List<long>();\n        long sq = n;\n\
    \        bool isPrime = true;\n        while (sq > 1) {\n            while (sq\
    \ % 2 == 0) {\n                factors.Add(2);\n                sq /= 2;\n   \
    \         }\n            while (sq % 3 == 0) {\n                factors.Add(3);\n\
    \                sq /= 3;\n            }\n            while (sq % 5 == 0) {\n\
    \                factors.Add(5);\n                sq /= 5;\n            }\n  \
    \          while (sq % 7 == 0) {\n                factors.Add(7);\n          \
    \      sq /= 7;\n            }\n            while (sq % 11 == 0) {\n         \
    \       factors.Add(11);\n                sq /= 11;\n            }\n         \
    \   while (sq % 13 == 0) {\n                factors.Add(13);\n               \
    \ sq /= 13;\n            }\n            while (sq % 17 == 0) {\n             \
    \   factors.Add(17);\n                sq /= 17;\n            }\n            while\
    \ (sq % 19 == 0) {\n                factors.Add(19);\n                sq /= 19;\n\
    \            }\n            while (sq % 23 == 0) {\n                factors.Add(23);\n\
    \                sq /= 23;\n            }\n            while (sq % 29 == 0) {\n\
    \                factors.Add(29);\n                sq /= 29;\n            }\n\
    \            while (sq % 37 == 0) {\n                factors.Add(37);\n      \
    \          sq /= 37;\n            }\n            while (sq % 53 == 0) {\n    \
    \            factors.Add(53);\n                sq /= 53;\n            }\n    \
    \        while (sq % 59 == 0) {\n                factors.Add(59);\n          \
    \      sq /= 59;\n            }\n            while (sq % 67 == 0) {\n        \
    \        factors.Add(67);\n                sq /= 67;\n            }\n        \
    \    while (sq % 71 == 0) {\n                factors.Add(71);\n              \
    \  sq /= 71;\n            }\n            while (sq % 79 == 0) {\n            \
    \    factors.Add(79);\n                sq /= 79;\n            }\n            while\
    \ (sq % 89 == 0) {\n                factors.Add(89);\n                sq /= 89;\n\
    \            }\n            while (sq % 97 == 0) {\n                factors.Add(97);\n\
    \                sq /= 97;\n            }\n            while (sq % 105 == 0) {\n\
    \                factors.Add(105);\n                sq /= 105;\n            }\n\
    \            while (sq % 111 == 0) {\n                factors.Add(111);\n    \
    \            sq /= 111;\n            }\n            while (sq % 121 == 0) {\n\
    \                factors.Add(121);\n                sq /= 121;\n            }\n\
    \            while (sq % 131 == 0) {\n                \n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcpfxi7kz.cs(111,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpcpfxi7kz.cs(122,2): error CS1513: } expected

    '
  timestamp: 1659976325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        // Compute\
    \ factorization for n.\n        var factorization = Enumerable.Range(1, int.MaxValue).Where(x\
    \ => n%x == 0).ToList();\n\n        // Compute prime factors.\n        var primeFactors\
    \ = factorization.Select(x => 2).Where(x => factorization.Contains(x)).ToList();\n\
    \n        // Filter out repeated factors.\n        factorization.RemoveAll(x =>\
    \ factorization.Contains(x));\n\n        // Sort factors.\n        factorization.Sort();\n\
    \n        // Return list of prime factors.\n        return primeFactors;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp87muhrhn.cs(32,16): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<int>''
    to ''System.Collections.Generic.List<long>''

    '
  timestamp: 1659976326
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        long\
    \ product = n;\n        List<long> factors = new List<long>();\n        while\
    \ (true) {\n            long fact = GetFact(product);\n            if (fact ==\
    \ 1) {\n                factors.Add(1);\n                break;\n            }\n\
    \            if (product % fact == 0) {\n                product /= fact;\n  \
    \              factors.Add(fact);\n            } else {\n                break;\n\
    \            }\n        }\n        return factors;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6utqxwpd.cs(22,25): error CS0103: The name ''GetFact'' does not exist
    in the current context

    '
  timestamp: 1659976326
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        if (n\
    \ < 2)\n            return new List<long>(new long[]{1L});\n        long factor\
    \ = 2;\n        List<long> factors = new List<long>();\n        while (true) {\n\
    \            if (n / factor >= 2)\n                factors.Add(factor);\n    \
    \        else\n                break;\n            factor = factor * 2;\n    \
    \    }\n        if (factors.Count == 0)\n            factors.Add(1);\n       \
    \ return factors;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <08a8af3b849f4b00b5d1dafa50b13cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <08a8af3b849f4b00b5d1dafa50b13cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976326
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        Debug.Assert(n\
    \ > 0);\n        long factorization[] = new long[n + 1];\n        factorization[0]\
    \ = 1L;\n        long i = 2L;\n        while (i <= n) {\n            for (; i\
    \ <= n / i; i++) {\n                factorization[i] = factorization[i - 1] *\
    \ i;\n            }\n            i = i + 2;\n        }\n        return factorization.Take(factorization.Length\
    \ - 1).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpav3ttfkm.cs(20,27): error CS0650: Bad array declarator: To declare a managed
    array the rank specifier precedes the variable''s identifier. To declare a fixed
    size buffer field, use the fixed keyword before the field type.

    '
  timestamp: 1659976325
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        int factor\
    \ = 0;\n        List<long> result = new List<long>();\n        bool isPrime =\
    \ true;\n        long prime = 3L;\n        while (factor < Math.Sqrt(n)) {\n \
    \           while (n % prime == 0) {\n                if (prime != n) {\n    \
    \                isPrime = false;\n                    break;\n              \
    \  }\n                prime++;\n            }\n            if (isPrime) {\n  \
    \              result.Add(prime);\n                n /= prime;\n            }\n\
    \            factor++;\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4147b7350a104b529607307ead508edb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4147b7350a104b529607307ead508edb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976326
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factorization = new List<long>();\n        double divisor = Double.PositiveInfinity;\n\
    \        while (n % 2 == 0) {\n            divisor = 2;\n            factorization.Add(2);\n\
    \            while (n % divisor == 0) {\n                factorization.Add(divisor);\n\
    \                n /= divisor;\n            }\n            if (n != 1) { divisor\
    \ = 2; factorization.Add(2); }\n        }\n\n        if (n > 1) { divisor = 3;\
    \ factorization.Add(3); }\n        while (n % 3 == 0) {\n            factorization.Add(3);\n\
    \            n /= 3;\n        }\n\n        if (n > 1) { divisor = 4; factorization.Add(4);\
    \ }\n        while (n % 4 == 0) {\n            factorization.Add(4);\n       \
    \     n /= 4;\n        }\n\n        if (n > 1) { divisor = 5; factorization.Add(5);\
    \ }\n        while (n % 5 == 0) {\n            factorization.Add(5);\n       \
    \     n /= 5;\n        }\n\n        if (n > 1) { divisor = 6; factorization.Add(6);\
    \ }\n        while (n % 6 == 0) {\n            factorization.Add(6);\n       \
    \     n /= 6;\n        }\n\n        if (n > 1) { divisor = 7; factorization.Add(7);\
    \ }\n        while (n % 7 == 0) {\n            factorization.Add(7);\n       \
    \     n /= 7;\n        }\n\n        if (n > 1) { divisor = 8; factorization.Add(8);\
    \ }\n        while (n % 8 == 0) {\n            factorization.Add(8);\n       \
    \     n /= 8;\n        }\n\n        if (n > 1) { divisor = 9; factorization.Add(9);\
    \ }\n        while (n % 9 == 0) {\n            factorization.Add(9);\n       \
    \     n /= 9;\n        }\n\n        if (n > 1) { divisor = 10; factorization.Add(10);\
    \ }\n        while (n % 10 == 0) {\n            factorization.Add(10);\n     \
    \       n /= 10;\n        }\n\n        if (n > 1) { divisor = 11; factorization.Add(11);\
    \ }\n        while (n % 11 == 0) {\n            factorization.Add(11);\n     \
    \       n /= 11;\n        }\n\n        if (n > 1) { divisor = 12; factorization.Add(12);\
    \ }\n        while (n % 12 == 0) {\n            factorization.Add(12);\n     \
    \       n /= 12;\n        }\n\n        if (n > 1) { divisor = 13; factorization.Add(13);\
    \ }\n        while (n % 13 == 0) {\n            factorization.Add(13);\n     \
    \       n /= 13;\n        }\n\n        if (n > 1) { divisor = 14; factorization.Add(14);\
    \ }\n        while (n % 14 == 0) {\n            factorization.Add(14);\n     \
    \       n /= 14;\n        }\n\n        if (n > 1) { divisor = 15; factorization.Add(15);\
    \ }\n        while (n % 15 == 0) {\n            factorization.Add(15);\n     \
    \       n /= 15;\n        }\n\n        if (n > 1) { divisor = 16; factorization.Add(16);\
    \ }\n        while (n % 16 == 0) {\n            factorization.Add(16);\n     \
    \       n /= 16;\n        }\n\n        if (\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn8dni__n.cs(115,13): error CS1525: Invalid expression term ''}''

    /tmp/tmpn8dni__n.cs(115,13): error CS1026: ) expected

    /tmp/tmpn8dni__n.cs(115,13): error CS1002: ; expected

    '
  timestamp: 1659976325
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ result = new List<long>();\n        long number = n;\n        long factor =\
    \ 1;\n        while (number > 1) {\n            while (number % factor == 0) {\n\
    \                result.Add(factor);\n                number /= factor;\n    \
    \        }\n            factor++;\n        }\n        if (number > 1) {\n    \
    \        result.Add(number);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659976331
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        if (n\
    \ == 1 || n == 2) {\n            return new List<long>(new long[]{1L});\n    \
    \    }\n\n        HashSet<long> p = new HashSet<long>();\n        p.Add(2);\n\
    \        long x = n;\n\n        for (int i = 3; i * i <= n; i = i + 2) {\n   \
    \         while (n % i == 0) {\n                if (p.Contains(i)) {\n       \
    \             p.Add(i);\n                    x = x / i;\n                    p.Remove(i);\n\
    \                }\n            }\n        }\n        return new List<long>(p);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d72cb6c361864038b60765a675f89cdd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d72cb6c361864038b60765a675f89cdd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: None
  timestamp: 1659976331
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        factors.Add(1);\n        long factor =\
    \ n;\n        while(true) {\n            while(factor % 2 == 0) {\n          \
    \      factors.Add(2);\n                factor /= 2;\n            }\n        \
    \    while(factor % 3 == 0) {\n                factors.Add(3);\n             \
    \   factor /= 3;\n            }\n            while(factor % 5 == 0) {\n      \
    \          factors.Add(5);\n                factor /= 5;\n            }\n    \
    \        while(factor % 7 == 0) {\n                factors.Add(7);\n         \
    \       factor /= 7;\n            }\n            if(factor == 1)\n           \
    \     break;\n        }\n        return factors;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f37cbdadfcb94e1496215a3a17842dbc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f37cbdadfcb94e1496215a3a17842dbc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: None
  timestamp: 1659976331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        bool\
    \ foundPrime = true;\n        long factor = 2;\n\n        List<long> factors =\
    \ new List<long>();\n        while (foundPrime) {\n            foundPrime = false;\n\
    \            while (n % factor == 0) {\n                if (factor > 2) {\n  \
    \                  factors.Add(factor);\n                }\n                n\
    \ = n / factor;\n                foundPrime = true;\n                factor =\
    \ 2;\n            }\n            if (factor == 2) {\n                factors.Add(factor);\n\
    \            }\n            factor++;\n        }\n\n        return factors;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cb3b68acaeab455aa4210279d27face1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cb3b68acaeab455aa4210279d27face1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976326
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        // Create\
    \ array to hold factors (factors repeated multiple times count as multiple factors)\n\
    \        List<long> factors = new List<long>();\n        // If number n is 1,\
    \ return 1 factor\n        if (n == 1) {\n            factors.Add(1);\n      \
    \      return factors;\n        }\n        // Find prime factors of n\n      \
    \  List<long> primeFactors = BigInteger.Sieve.PrimeFactors(n);\n        // Go\
    \ through every prime factor and multiply it by every power of that factor\n \
    \       foreach (long p in primeFactors) {\n            // If this factor hasn't\
    \ been seen yet, add it as the first factor\n            if (factors.IndexOf(p)\
    \ == -1) {\n                factors.Add(p);\n            }\n            // If\
    \ this factor has been seen before, add it to the list of factors repeated as\
    \ many times as its been seen before\n            else if (factors.Count(p / p)\
    \ == factors.IndexOf(p)) {\n                factors[factors.IndexOf(p)] += p;\n\
    \            }\n        }\n        // Return factors\n        return factors;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpze6ryfos.cs(27,46): error CS0117: ''BigInteger'' does not contain a definition
    for ''Sieve''

    /tmp/tmpze6ryfos.cs(35,36): error CS1503: Argument 2: cannot convert from ''long''
    to ''System.Func<long, bool>''

    '
  timestamp: 1659976326
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        int[]\
    \ factors = new int[n - 1];\n        int i = 2;\n        while (i < n) {\n   \
    \         while (n % i == 0) {\n                factors[i++] = i;\n          \
    \      n /= i;\n            }\n            i++;\n        }\n        if (n > 1)\
    \ {\n            factors[n - 1] = n;\n        }\n        return new List<long>(factors);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt12gu_qa.cs(29,30): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpt12gu_qa.cs(31,31): error CS1503: Argument 1: cannot convert from ''int[]''
    to ''int''

    '
  timestamp: 1659976326
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        // Store\
    \ factorization for number n, to avoid redoing it every time.\n        List<long>\
    \ factorization = new List<long>();\n        factorization.Add(n);\n        //\
    \ Find prime factors.\n        long product = n;\n        factorization.RemoveAll(p\
    \ => p <= product);\n        while (factorization.Any()) {\n            factorization.RemoveAll(p\
    \ => p == 1);\n            long factor = 1;\n            foreach (long p in factorization)\
    \ {\n                if (product % p == 0) {\n                    factor *= p;\n\
    \                    product /= p;\n                }\n            }\n       \
    \     factorization.Add(factor);\n        }\n        return factorization;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11585c46f01740158400231726a07eda>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11585c46f01740158400231726a07eda>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976326
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        // Initialize list of prime numbers. To\
    \ increase speed of algorithm,\n        // we should store prime numbers in some\
    \ data structure (instead of searching them over and over again).\n        List<long>\
    \ primes = new List<long>() { 2, 3 };\n        // Compute factorization of given\
    \ number in loop\n        for (long current = 2; current <= Math.Sqrt(n); current++)\
    \ {\n            bool isPrime = true;\n            // Compute prime factorization\
    \ of current number\n            int num = 0;\n            for (int i = 0; i <\
    \ primes.Count; i++) {\n                if (current % primes[i] == 0) {\n    \
    \                isPrime = false;\n                    break;\n              \
    \  }\n            }\n            // If number is prime, add it to the list of\
    \ factors\n            if (isPrime) {\n                factors.Add(current);\n\
    \            }\n            // If current number is smaller than the smallest\
    \ possible factor,\n            // remove smallest factor (if any) to keep list\
    \ size as small as possible.\n            if (current < factors.Min()) {\n   \
    \             factors.Remove(factors.Min());\n            }\n            // If\
    \ current number is greater than the largest possible factor,\n            //\
    \ remove largest factor (if any) to keep list size as small as possible.\n   \
    \         if (current > factors.Max()) {\n                factors.Remove(factors.Max());\n\
    \            }\n        }\n        return factors;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b18678ed79443608f939c21225e2448>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Factorize (System.Int64 n) [0x00074] in <6b18678ed79443608f939c21225e2448>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00023] in <6b18678ed79443608f939c21225e2448>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.Min (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Factorize\
    \ (System.Int64 n) [0x00074] in <6b18678ed79443608f939c21225e2448>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00023] in <6b18678ed79443608f939c21225e2448>:0 \n"
  stdout: ''
  timestamp: 1659976326
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        int bitCount\
    \ = 0;\n        long max = (long)Math.Sqrt(n) + 1;\n        List<long> factors\
    \ = new List<long>();\n        for (long i = 2; i <= max; i++) {\n           \
    \ while (n % i == 0) {\n                factors.Add(i);\n                n /=\
    \ i;\n                bitCount++;\n            }\n        }\n        if (bitCount\
    \ == 0) factors.Add(1L);\n        return factors;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <73b32239fcae4d2985e9ee9d7bbb9822>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <73b32239fcae4d2985e9ee9d7bbb9822>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976326
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        if (n\
    \ < 2)\n            return new List<long>(new long[]{(long)2L});\n        long\
    \ m = n;\n        List<long> primes = new List<long>();\n        List<long> factors\
    \ = new List<long>();\n        while (m) {\n            long f = 2;\n        \
    \    while ((f <= m) && ((n % f) == 0))\n                f *= 2;\n           \
    \ if (f > m) break;\n            factors.Add(f);\n            n /= f;\n      \
    \  }\n        primes.AddRange(factors);\n        return primes;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaeu7o1hb.cs(24,16): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    '
  timestamp: 1659976326
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        long\
    \ factors[] = Factorize(n);\n        List<long> factorsL = new List<long>(factors);\n\
    \        factorsL.Sort();\n        return factorsL;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo0fjprf6.cs(19,21): error CS0650: Bad array declarator: To declare a managed
    array the rank specifier precedes the variable''s identifier. To declare a fixed
    size buffer field, use the fixed keyword before the field type.

    '
  timestamp: 1659976326
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        long i = 1;\n        long limit = n;\n\
    \        while (i <= limit) {\n            long temp = i;\n            i = i *\
    \ 2;\n            if (temp <= limit) {\n                while (i <= limit) {\n\
    \                    if (n % i == 0) {\n                        factors.Add(i);\n\
    \                        break;\n                    }\n                    i\
    \ += 2;\n                }\n            }\n        }\n        return factors;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <91d568b133114cb8bcbeba57676b65de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <91d568b133114cb8bcbeba57676b65de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        Debug.Assert(n\
    \ % 2 == 0, \"Input number should be even\");\n\n        long limit = (long)Math.Sqrt(n);\n\
    \        long[] primes = new long[limit];\n        long[] factors = new long[limit\
    \ + 1];\n\n        // Sieve of Erastosthenes: finding first prime > sqrt(n)\n\
    \        int limit2 = (int)limit;\n        for (int i = 3; i <= limit2; i += 2)\
    \ {\n            long f = i;\n            while (f < limit) {\n              \
    \  if (n % f == 0) {\n                    f++;\n                    break;\n \
    \               }\n                else {\n                    f++;\n        \
    \        }\n            }\n            if (f > limit) {\n                break;\n\
    \            }\n            primes[(int)f] = 1;\n        }\n\n        // Prime\
    \ numbers, if possible\n        for (int i = 3; i <= limit; i += 2) {\n      \
    \      if (primes[i] == 0) {\n                for (int j = i + i; j <= limit;\
    \ j += i) {\n                    primes[j] = 1;\n                }\n         \
    \   }\n        }\n\n        // Calculate factors\n        for (int i = 3; i <=\
    \ limit; i++) {\n            if (primes[i] == 0) {\n                factors[(int)i]\
    \ = 1;\n                for (int j = i + i; j <= limit; j += i) {\n          \
    \          factors[(int)j] = i * factors[(int)i];\n                }\n       \
    \     }\n        }\n\n        return new List<long>(factors);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a136710ee4494784b1aacae4d8413d6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a136710ee4494784b1aacae4d8413d6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        var factors\
    \ = new List<long>();\n        factors.Add(n);\n        long current = n;\n  \
    \      while (current != 1) {\n            current = current / 2;\n          \
    \  if (current != 1)\n                factors.Add(current);\n        }\n     \
    \   while (factors.Count != 2) {\n            factors.Remove(factors.Last());\n\
    \        }\n        while (factors.Count > 2) {\n            var product = factors.Aggregate(1,\
    \ (a, b) => a * b); // (a * b) is equivalent of (a * b) + a\n            for (int\
    \ i = 0; i < factors.Count; i++) {\n                factors.Remove(product);\n\
    \            }\n        }\n        return factors;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6g6etdxx.cs(31,58): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp6g6etdxx.cs(31,58): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659976327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        if (n\
    \ <= 1) return new List<long>(new long[]{n});\n        long[] primes = new long[(int)\
    \ Math.Floor((double) Math.Sqrt(n) + 0.5D)];\n        primes[0] = n;\n       \
    \ for (int i = 1; i < primes.Length; i++) {\n            for (int j = i; j < primes.Length;\
    \ j++)\n                if (primes[j] * primes[i] == n)\n                    break;\n\
    \            if (j == primes.Length)\n                primes[i] = (int)Math.Floor((double)\
    \ Math.Sqrt(n) + 0.5D);\n            else j++;\n        }\n        return new\
    \ List<long>(primes.Where((prime) => prime > 1).OrderByDescending(prime => prime).ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnz33un9_.cs(26,17): error CS0103: The name ''j'' does not exist in the
    current context

    /tmp/tmpnz33un9_.cs(28,18): error CS0103: The name ''j'' does not exist in the
    current context

    '
  timestamp: 1659976327
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        long factorsCount = 1;\n        long lastFactor\
    \ = n;\n        long previousFactor = 1;\n        while (lastFactor != 1) {\n\
    \            bool isPrime = true;\n            long nextFactor = lastFactor;\n\
    \            while (true) {\n                if (n % nextFactor == 0) {\n    \
    \                isPrime = false;\n                    break;\n              \
    \  }\n                nextFactor++;\n            }\n            if (isPrime) {\n\
    \                factorsCount *= previousFactor;\n                factors.Add(previousFactor);\n\
    \                lastFactor = nextFactor;\n            }\n            else {\n\
    \                previousFactor++;\n            }\n        }\n        if (factors.Count\
    \ != 1) {\n            factors.Add(factorsCount);\n        }\n        factors.Reverse();\n\
    \        return factors;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659976332
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ primes = new List<long>();\n        List<long> factors = new List<long>();\n\
    \        primes.Add(1);\n        while (n > 1) {\n            long product = n\
    \ * primes[0];\n            primes.RemoveAt(0);\n            while (product %\
    \ primes[0] == 0) {\n                product /= primes[0];\n                factors.Add(primes[0]);\n\
    \                primes.RemoveAt(0);\n            }\n            primes.Add(product);\n\
    \            n = product;\n        }\n        return factors;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Factorize\
    \ (System.Int64 n) [0x0004f] in <e01a3530d4a441f7b7ae63db5804258e>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e01a3530d4a441f7b7ae63db5804258e>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Factorize\
    \ (System.Int64 n) [0x0004f] in <e01a3530d4a441f7b7ae63db5804258e>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e01a3530d4a441f7b7ae63db5804258e>:0 \n"
  stdout: ''
  timestamp: 1659976327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ result = new List<long>();\n        while (n % 2 == 0) {\n            result.Add(2);\n\
    \            n /= 2;\n        }\n        int k = Math.Floor(Math.Log(n, 2)) +\
    \ 1;\n        while (k >= 2) {\n            if (n % k == 0) {\n              \
    \  result.Add(k);\n                n /= k;\n            }\n            k--;\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz2hmrgeq.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        DivideAndConquer(n,\
    \ 2);\n        return new List<long>(factorizations);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5r7wk_r4.cs(19,9): error CS0103: The name ''DivideAndConquer'' does not
    exist in the current context

    /tmp/tmp5r7wk_r4.cs(20,31): error CS0103: The name ''factorizations'' does not
    exist in the current context

    '
  timestamp: 1659976327
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        while (n > 0) {\n            long factor\
    \ = 1;\n            while (n % factor == 0) {\n                factor *= factor;\n\
    \                factor++;\n            }\n            factors.Add(factor);\n\
    \            n /= factor;\n        }\n        return factors;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <36ea4ed4148045ca84411b0b7ac60df2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <36ea4ed4148045ca84411b0b7ac60df2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976327
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        var factorization\
    \ = new List<long>();\n        bool isPrime = true;\n        long factor = 2;\n\
    \        while (factor <= n) {\n            if (n % factor == 0) {\n         \
    \       isPrime = false;\n                break;\n            }\n            factorization.Add(factor);\n\
    \            factor++;\n        }\n        if (isPrime)\n            factorization.Add(n);\n\
    \        return factorization;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <197826b11ac54a5ea59438b5075bdd58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <197826b11ac54a5ea59438b5075bdd58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976327
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        List<long> primes = new List<long>();\n\
    \        // Find all prime numbers <= given number\n        for (int i = 3; i\
    \ <= Math.Sqrt(n); i += 2) {\n            if (n % i == 0) {\n                primes.Add(i);\n\
    \                while (n % i == 0) {\n                    n = n / i;\n      \
    \              factors.Add(i);\n                }\n            }\n        }\n\
    \        if (n > 1) {\n            primes.Add(n);\n            while (n > 1) {\n\
    \                n = n / 2;\n                factors.Add(n);\n            }\n\
    \        }\n        return factors;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2300420423e74e20adaae5961909f710>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2300420423e74e20adaae5961909f710>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        long x = n;\n        long factor = x;\n\
    \        while (factor != 1) {\n            factor *= x;\n            x = 1 /\
    \ x;\n            if (x != 1) {\n                factor++;\n                x\
    \ = x / factor;\n            }\n        }\n        factors.Add(factor);\n    \
    \    return factors;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.DivideByZeroException: Attempted to divide\
    \ by zero.\n  at Problem.Factorize (System.Int64 n) [0x00012] in <a88d61b6003b4a7f898744ffb7668c3c>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <a88d61b6003b4a7f898744ffb7668c3c>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.DivideByZeroException: Attempted\
    \ to divide by zero.\n  at Problem.Factorize (System.Int64 n) [0x00012] in <a88d61b6003b4a7f898744ffb7668c3c>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <a88d61b6003b4a7f898744ffb7668c3c>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976327
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        Debug.Assert(n\
    \ > 0);\n        List<long> result = new List<long>();\n        for (long i =\
    \ 1; i <= n; i++)\n        {\n            if (n % i == 0)\n            {\n   \
    \             result.Add(i);\n                n /= i;\n            }\n       \
    \ }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dca11050e1244188222f603e3120555>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dca11050e1244188222f603e3120555>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        factors.Add(2);\n        factors.Add(1);\n\
    \        \n        int sqrt_n = Math.Sqrt(n);\n        \n        while (n > 2)\
    \ {\n            if (n % 2 == 0) {\n                factors.Add(2);\n        \
    \    }\n            else {\n                for (int i = 3; i <= sqrt_n; i = i\
    \ * 2 + 1) {\n                    if (n % i == 0) {\n                        factors.Add(i);\n\
    \                        n = n / i;\n                        break;\n        \
    \            }\n                }\n            }\n        }\n        \n      \
    \  return factors;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp56r4hm7_.cs(23,22): error CS0266: Cannot implicitly convert type ''double''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        if (n\
    \ == 1)\n            return new List<long>(new long[]{1L});\n        List<long>\
    \ factors = new List<long>();\n        factors.AddRange(FactorizeFloor(n));\n\
    \        factors.AddRange(FactorizeCeiling(n));\n        return factors;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7i5uwa74.cs(22,26): error CS0103: The name ''FactorizeFloor'' does not
    exist in the current context

    /tmp/tmp7i5uwa74.cs(23,26): error CS0103: The name ''FactorizeCeiling'' does not
    exist in the current context

    '
  timestamp: 1659976327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        // Compute\
    \ and store factors of n\n        List<long> factors = new List<long>(new long[(int)\
    \ Math.Floor(Math.Sqrt(n) + 1)]);\n        long curr = n;\n        int i = 1;\
    \ // Index in factors list\n        while (curr != 1) {\n            long p =\
    \ curr / 2;\n            factors[i++] = p;\n            if (p != 1 && n % (long)\
    \ p != 0) {\n                factors[++i] = 1;\n            }\n            curr\
    \ = p;\n        }\n        // Remove factors of n from factors list\n        while\
    \ (n > 1 && factors[0] == n) {\n            factors.RemoveAt(0);\n           \
    \ n = n / 2;\n        }\n        // Return factors\n        return factors;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <004e17ff4c0a47248ed192bb16c06442>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <004e17ff4c0a47248ed192bb16c06442>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative\
    \ and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].set_Item\
    \ (System.Int32 index, T value) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.Factorize (System.Int64 n) [0x00"
  stdout: ''
  timestamp: 1659976328
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        BigInteger\
    \ bigInt = BigInteger.ValueOf(n);\n        List<BigInteger> factors = new List<BigInteger>();\n\
    \        Factorize(bigInt, factors);\n        return factors;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgtejus8n.cs(19,40): error CS0117: ''BigInteger'' does not contain a definition
    for ''ValueOf''

    /tmp/tmpgtejus8n.cs(21,9): error CS1501: No overload for method ''Factorize''
    takes 2 arguments

    /tmp/tmpgtejus8n.cs(22,16): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<System.Numerics.BigInteger>''
    to ''System.Collections.Generic.List<long>''

    '
  timestamp: 1659976327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        BigInteger\
    \ i = BigInteger.ValueOf(n);\n        List<long> factors = new List<long>();\n\
    \        factors.Add(BigInteger.ValueOf(2));\n        BigInteger i0 = i;\n   \
    \     BigInteger i1 = BigInteger.ValueOf(n);\n        BigInteger j = 0;\n    \
    \    for (BigInteger k = BigInteger.ValueOf(2); k <= i1; k = k.Multiply(BigInteger.ValueOf(2)))\
    \ {\n            if (i0.Divide(k).Equals(BigInteger.ValueOf(0)) || i0.Multiply(k).Equals(BigInteger.ValueOf(0)))\
    \ continue;\n            if (k.Divide(i0).Equals(BigInteger.ValueOf(0))) continue;\n\
    \            if (i1.Multiply(k).Equals(i0)) break;\n            for (j = k.Divide(i0).Add(BigInteger.ValueOf(1));\
    \ j.CompareTo(i1) <= 0; j = j.Add(BigInteger.ValueOf(1))) {\n                i0\
    \ = i0.Multiply(k).Divide(i0);\n                factors.Add(j.Value);\n      \
    \      }\n        }\n        return factors;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6fbseyul.cs(19,35): error CS0117: ''BigInteger'' does not contain a definition
    for ''ValueOf''

    /tmp/tmp6fbseyul.cs(21,32): error CS0117: ''BigInteger'' does not contain a definition
    for ''ValueOf''

    /tmp/tmp6fbseyul.cs(23,36): error CS0117: ''BigInteger'' does not contain a definition
    for ''ValueOf''

    /tmp/tmp6fbseyul.cs(25,40): error CS0117: ''BigInteger'' does not contain a definition
    for ''ValueOf''

    /tmp/tmp6fbseyul.cs(25,87): error CS0117: ''BigInteger'' does not contain a definition
    for ''ValueOf''

    /tmp/tmp6fbseyul.cs(26,20): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''divisor'' of ''BigInteger.Divide(BigInteger,
    BigInteger)''

    /tmp/tmp6fbseyul.cs(26,48): error CS0117: ''BigInteger'' does not contain a definition
    for ''ValueOf''

    /tmp/tmp6fbseyul.cs(26,66): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''right'' of ''BigInteger.Multiply(BigInteger,
    BigInteger)''

    /tmp/tmp6fbseyul.cs(26,96): error CS0117: ''BigInteger'' does not contain a definition
    for ''ValueOf''

    /tmp/tmp6fbseyul.cs(27,19): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''divisor'' of ''BigInteger.Divide(BigInteger,
    BigInteger)''

    /tmp/tmp6fbseyul.cs(27,48): error CS0117: ''BigInteger'' does not contain a definition
    for ''ValueOf''

    /tmp/tmp6fbseyul.cs(28,20): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''right'' of ''BigInteger.Multiply(BigInteger,
    BigInteger)''

    /tmp/tmp6fbseyul.cs(29,24): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''divisor'' of ''BigInteger.Divide(BigInteger,
    BigInteger)''

    /tmp/tmp6fbseyul.cs(29,50): error CS0117: ''BigInteger'' does not contain a definition
    for ''ValueOf''

    /tmp/tmp6fbseyul.cs(29,106): error CS0117: ''BigInteger'' does not contain a definition
    for ''ValueOf''

    /tmp/tmp6fbseyul.cs(30,25): error CS7036: There is'
  timestamp: 1659976327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        long[]\
    \ primeFactorization = new long[n + 1];\n        long sqrtN = Convert.ToInt64((long)Math.Sqrt(n));\n\
    \        primeFactorization[0] = n;\n        primeFactorization[1] = 1;\n    \
    \    primeFactorization[2] = 2;\n        long j = 3;\n        while (j < sqrtN)\
    \ {\n            long k = j + 2;\n            while (k < sqrtN && n % k == 0)\
    \ {\n                k = k + 1;\n            }\n            primeFactorization[j]\
    \ = k;\n            j = k;\n        }\n        List<long> factors = new List<long>();\n\
    \        for (int i = 2; i <= n; i++) {\n            bool isPrime = true;\n  \
    \          for (int j = 2; j < primeFactorization[i]; j++) {\n               \
    \ if (i % primeFactorization[j] == 0) {\n                    isPrime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isPrime)\n                factors.Add(i);\n        }\n        return factors;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgu1n_8x8.cs(36,22): error CS0136: A local or parameter named ''j'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659976328
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        // Sieve\
    \ of Atkin\n        var primes = new List<long>();\n        for (int p = 2; p\
    \ < n; p++)\n        {\n            if (primes.Contains(p)) continue;\n      \
    \      if (n % p == 0) {\n                for (int i = p * p; i <= n; i += p)\n\
    \                    primes.Add(i);\n            }\n        }\n        return\
    \ primes.Select(p => p).ToList();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e318ddec6be460ea04dac0e6a0ec90b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e318ddec6be460ea04dac0e6a0ec90b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: None
  timestamp: 1659976333
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        // Get\
    \ prime factors of given number.\n        // Return empty list if given number\
    \ is prime number.\n        List<long> factors = new List<long>();\n        double\
    \ sqrtOfN = Math.Sqrt(n);\n        int sqrtOfN2 = (int)sqrtOfN;\n\n        //\
    \ Find factors of given number.\n        for (int i = 0; i <= sqrtOfN2; i++) {\n\
    \            while (n % i == 0) {\n                factors.Add(i);\n         \
    \       n /= i;\n            }\n        }\n\n        // If number is not prime,\
    \ add it to the list.\n        if (n == 1) {\n            factors.Add(1);\n  \
    \      }\n\n        // Add 1 to final list if number is not prime.\n        if\
    \ (sqrtOfN != 1) {\n            factors.Add(sqrtOfN);\n        }\n\n        return\
    \ factors;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4xp7bp72.cs(40,25): error CS1503: Argument 1: cannot convert from ''double''
    to ''long''

    '
  timestamp: 1659976328
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        // Sieve of Eratosthenes\n        // http://www.maths.surrey.ac.uk/hosted-sites/R.Knott/Fibonacci/sievingEratothenes.html\n\
    \        long[] primes = new long[] { 1, 1 };\n        long n = n; // for debugging\n\
    \        for (long p = 2; p <= Math.Sqrt(n); p++) {\n            // Skip even\
    \ numbers\n            if (n % p == 0) {\n                continue;\n        \
    \    }\n            for (long q = 0; q * p <= n; q++) {\n                if (n\
    \ % q == 0) {\n                    break;\n                }\n               \
    \ // Found factor\n                factors.Add(p);\n                n /= p;\n\
    \            }\n            // Update list of primes\n            primes[p / 2]\
    \ = primes[p / 2] + 1;\n        }\n        return factors;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp37k7w4ps.cs(23,14): error CS0136: A local or parameter named ''n'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp37k7w4ps.cs(23,18): error CS0165: Use of unassigned local variable ''n''

    '
  timestamp: 1659976328
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        Debug.Assert(n>0);\n\
    \        List<long> f = new List<long>();\n        while (true) {\n          \
    \  long p = 2L;\n            int n1 = (int)n;\n            if (n1 < (1L<<32))\
    \ {\n                while (p < (1L<<32) && (n%p) == 0) {\n                  \
    \  n1 /= p;\n                }\n                f.Add(p);\n            }\n   \
    \         if (n1 == (long)n) break;\n            for (int c = 1; c < 32; c++)\
    \ {\n                p *= (1L<<c);\n                if (n%p == 0) {\n        \
    \            f.Add(p);\n                    n /= p;\n                }\n     \
    \       }\n        }\n        return f;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0epoo2v9.cs(26,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp0epoo2v9.cs(24,17): warning CS0652: Comparison to integral constant is
    useless; the constant is outside the range of type ''int''

    '
  timestamp: 1659976328
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        factors.AddRange(new List<long>(new long[]\
    \ { 2L }));\n        while (n > 1L) {\n            factors.AddRange(new List<long>(factors.TakeWhile(f\
    \ => f <= n).Select(f => n * f)));\n            n /= 2L;\n        }\n        return\
    \ factors;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <262dd12fc23340b6b3c2b706c07733bf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <262dd12fc23340b6b3c2b706c07733bf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976328
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        var ret\
    \ = new List<long>();\n\n        var small = Divisors(n);\n        var big = new\
    \ List<long>();\n\n        // Prime factorizations will use two types of primes:\n\
    \        // - Largest prime factors -- those smaller than current number\n   \
    \     // - Smaller prime factors -- those larger than current number\n       \
    \ foreach (var prime in small) {\n            foreach (var f in big) {\n     \
    \           if (prime > f)\n                    big.Add(prime);\n            \
    \    else\n                    ret.Add(prime);\n            }\n        }\n\n \
    \       foreach (var f in big)\n            ret.Add(f);\n\n        return ret;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprs0er_c5.cs(21,21): error CS0103: The name ''Divisors'' does not exist
    in the current context

    '
  timestamp: 1659976328
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        var primes\
    \ = new List<long>();\n        var factors = new List<long>();\n        var primeFactors\
    \ = new List<long>();\n        // Initialize prime list.\n        for (var i =\
    \ 2; i <= Math.Sqrt(n); i++)\n            if (n % i == 0)\n                primes.Add(i);\n\
    \        // Initialize factor list.\n        for (var i = 2; i <= n; i++)\n  \
    \          if (!primes.Contains(i))\n                factors.Add(i);\n       \
    \ // Find prime factorization.\n        for (var i = 0; i < factors.Count; i++)\n\
    \            for (var j = i + 1; j < factors.Count; j++)\n                if (factors[i]\
    \ * factors[j] == n) {\n                    primeFactors.Add(factors[i]);\n  \
    \                  primeFactors.Add(factors[j]);\n                    factors.Remove(factors[j]);\n\
    \                    break;\n                }\n        // Check factors of prime\
    \ factorization.\n        for (var i = primeFactors.Count - 1; i >= 0; i--)\n\
    \            for (var j = 0; j < factors.Count; j++) {\n                var p\
    \ = factors.ElementAt(j);\n                if (p * primeFactors[i] == n) {\n \
    \                   primes.Add(primeFactors[i]);\n                    factors.Remove(p);\n\
    \                    break;\n                }\n            }\n        return\
    \ primes.Count == 0 ? factors : new List<long>(primes.ToArray());\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4785ad6b561439a9180640e0ff6b37e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4785ad6b561439a9180640e0ff6b37e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: None
  timestamp: 1659976333
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        var factors\
    \ = new List<long>();\n        while (n > 1) {\n            factors.Add(1);\n\
    \            while (n % 2 == 0) {\n                factors.Add(2);\n         \
    \       n /= 2;\n            }\n            while (n % 3 == 0) {\n           \
    \     factors.Add(3);\n                n /= 3;\n            }\n            while\
    \ (n % 5 == 0) {\n                factors.Add(5);\n                n /= 5;\n \
    \           }\n            while (n % 7 == 0) {\n                factors.Add(7);\n\
    \                n /= 7;\n            }\n        }\n        return factors.Reverse().ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdnzn8h89.cs(39,33): error CS0023: Operator ''.'' cannot be applied to
    operand of type ''void''

    '
  timestamp: 1659976328
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        var factors\
    \ = new List<long>();\n\n        // Compute factors recursively\n        var x\
    \ = Factors(n);\n\n        // Sort factors by decreasing power\n        // i.e.\
    \ x[0] = n! / (n! * n! * n!)\n        Array.Reverse(x.ToArray());\n        factors\
    \ = x.Select(p => new long[] { p, n}).ToList();\n\n        // Filter out factors\
    \ whose powers equal to their multiples\n        return factors.Where(p => Factorize(p[0]).SequenceEqual(p)).ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphbpw44m1.cs(22,17): error CS0103: The name ''Factors'' does not exist
    in the current context

    /tmp/tmphbpw44m1.cs(30,45): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659976328
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        for (int i = 2; i <= Math.Sqrt(n); i++)\
    \ {\n            while (n % i == 0) {\n                factors.Add(i);\n     \
    \           n /= i;\n            }\n        }\n        return factors;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <971ff7d8c06b4fa8bd60f9943506af24>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <971ff7d8c06b4fa8bd60f9943506af24>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        foreach (long factor in Factorization(n))\
    \ {\n            factors.Add(factor);\n        }\n        return factors;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplk_oqn9i.cs(20,33): error CS0103: The name ''Factorization'' does not
    exist in the current context

    '
  timestamp: 1659976329
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        long\
    \ number = n;\n        bool isPrime;\n        bool hasFactor = false;\n      \
    \  List<long> factors = new List<long>();\n\n        while(number > 1) {\n   \
    \         isPrime = true;\n            foreach (long f in factors)\n         \
    \       if (number % f == 0)\n                    isPrime = false;\n         \
    \   if (isPrime)\n                factors.Add(number);\n            else\n   \
    \             number = number / 2;\n        }\n        return factors;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ffcfe83a9d2249f082fac952b7f9ff82>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ffcfe83a9d2249f082fac952b7f9ff82>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976329
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ ret = new List<long>();\n        List<long> factors = new List<long>();\n  \
    \      while (n != 1) {\n            while (n % 2 == 0) {\n                factors.Add(2);\n\
    \                n /= 2;\n            }\n            while (n % 3 == 0) {\n  \
    \              factors.Add(3);\n                n /= 3;\n            }\n     \
    \       while (n % 5 == 0) {\n                factors.Add(5);\n              \
    \  n /= 5;\n            }\n            if (n > 1) {\n                factors.Add(n);\n\
    \                n = 1;\n            }\n            ret.AddRange(factors);\n \
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9bebf50f6e624036bba77284da53db61>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9bebf50f6e624036bba77284da53db61>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        Debug.Assert(n\
    \ > 1);\n        List<long> factorization = new List<long>();\n        BigInteger\
    \ p = BigInteger.ValueOf(1);\n        do {\n            BigInteger q = p.Multiply(p);\n\
    \            factorization.Add(q);\n            p = q.Multiply(p);\n        }\
    \ while (p * p < n);\n        return factorization;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj_vbn1qg.cs(21,35): error CS0117: ''BigInteger'' does not contain a definition
    for ''ValueOf''

    /tmp/tmpj_vbn1qg.cs(23,30): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''right'' of ''BigInteger.Multiply(BigInteger,
    BigInteger)''

    /tmp/tmpj_vbn1qg.cs(24,31): error CS1503: Argument 1: cannot convert from ''System.Numerics.BigInteger''
    to ''long''

    /tmp/tmpj_vbn1qg.cs(25,19): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''right'' of ''BigInteger.Multiply(BigInteger,
    BigInteger)''

    '
  timestamp: 1659976329
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        bool\
    \ prime = true;\n        List<long> factors = new List<long>();\n        long\
    \ current = n;\n        while (current > 1) {\n            for (int i = 0; prime\
    \ && (i < factors.Count); i++) {\n                current /= factors[i];\n   \
    \             prime = (current == 1);\n            }\n            factors.Add(current);\n\
    \        }\n        return factors;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <900913d20bb34d1289624d7347f29dc3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <900913d20bb34d1289624d7347f29dc3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976329
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        var factors\
    \ = new List<long>();\n        for (long i = 2; i <= n; i++) {\n            long\
    \ j = 1;\n            while (j <= n / i) {\n                if (n % i == 0) {\n\
    \                    factors.Add(i);\n                    n /= i;\n          \
    \          break;\n                }\n                j++;\n            }\n  \
    \      }\n        if (n > 1) factors.Add(n);\n        return factors;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fb3815a5180c46d787ad91d2f272b141>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fb3815a5180c46d787ad91d2f272b141>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        long\
    \ factor = 1;\n        List<long> factors = new List<long>(new long[]{1});\n \
    \       while (n > 1) {\n            factor = 2;\n            while (factor <=\
    \ n / 2) {\n                if (n % factor == 0) {\n                    factor\
    \ = (n/divisorFactor(factor));\n                    break;\n                }\n\
    \                factor++;\n            }\n            factors.Add(factor);\n\
    \            n--;\n        }\n        return factors;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7ljaizfd.cs(25,33): error CS0103: The name ''divisorFactor'' does not
    exist in the current context

    '
  timestamp: 1659976329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        if (n\
    \ == 1) return new List<long>(new long[]{n});\n        List<long> primeFactors\
    \ = new List<long>();\n        var maxFactor = n;\n        foreach (var f in Factors(maxFactor))\
    \ {\n            long factor = f;\n            while (factor != 1) {\n       \
    \         if (n % factor == 0) {\n                    maxFactor = n / factor;\n\
    \                    break;\n                }\n                factor++;\n  \
    \          }\n            if (factor == 1) primeFactors.Add(factor);\n       \
    \ }\n        return primeFactors;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1t7x_hxb.cs(22,27): error CS0103: The name ''Factors'' does not exist
    in the current context

    '
  timestamp: 1659976329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        bool isPrime = true;\n        bool isDivisor\
    \ = true;\n        bool isMultiple = false;\n        bool isPowerOfTwo = true;\n\
    \        long current;\n        long count;\n        for (int i = 2; i <= Math.Floor(Math.Sqrt(n));\
    \ i++) {\n            current = i;\n            while (current % 2 == 0) {\n \
    \               current /= 2;\n            }\n            while (current % 3 ==\
    \ 0) {\n                current /= 3;\n            }\n            while (current\
    \ % 5 == 0) {\n                current /= 5;\n            }\n            while\
    \ (current % 7 == 0) {\n                current /= 7;\n            }\n       \
    \     while (current % 11 == 0) {\n                current /= 11;\n          \
    \  }\n            while (current % 13 == 0) {\n                current /= 13;\n\
    \            }\n            while (current % 17 == 0) {\n                current\
    \ /= 17;\n            }\n            while (current % 19 == 0) {\n           \
    \     current /= 19;\n            }\n            if (current == 1) {\n       \
    \         isPrime = false;\n                break;\n            }\n          \
    \  isDivisor = true;\n            while (current % 2 == 0) {\n               \
    \ current /= 2;\n                isDivisor = false;\n            }\n         \
    \   while (current % 3 == 0) {\n                current /= 3;\n              \
    \  isDivisor = false;\n            }\n            while (current % 5 == 0) {\n\
    \                current /= 5;\n                isDivisor = false;\n         \
    \   }\n            while (current % 7 == 0) {\n                current /= 7;\n\
    \                isDivisor = false;\n            }\n            while (current\
    \ % 11 == 0) {\n                current /= 11;\n                isDivisor = false;\n\
    \            }\n            while (current % 13 == 0) {\n                current\
    \ /= 13;\n                isDivisor = false;\n            }\n            while\
    \ (current % 17 == 0) {\n                current /= 17;\n                isDivisor\
    \ = false;\n            }\n            while (current % 19 == 0) {\n         \
    \       current /= 19;\n                isDivisor = false;\n            }\n  \
    \          if (current == 1) {\n                isPrime = false;\n           \
    \     break;\n            }\n            isMultiple = true;\n            while\
    \ (current % 2 == 0) {\n                current /= 2;\n                isMultiple\
    \ = false;\n            }\n            while (current % 3 == 0) {\n          \
    \      current /= 3;\n                isMultiple = false;\n            }\n   \
    \         while (current % 5 == 0) {\n                current /= 5;\n        \
    \        isMultiple = false;\n            }\n            while (current % 7 ==\
    \ 0) {\n                current /= 7;\n                isMultiple = false;\n \
    \           }\n            while (current % 11 == 0) {\n                current\
    \ /= 11;\n                isMultiple = false;\n            }\n            while\
    \ (current % 13 == 0) {\n                current /= 13;\n                isMultiple\
    \ = false;\n            }\n            while (current % 17 == 0) {\n         \
    \       current /= 17;\n                isMultiple = false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmodd1wy.cs(122,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpfmodd1wy.cs(133,2): error CS1513: } expected

    '
  timestamp: 1659976329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        long numOfFactors = FactorizeHelper(n,\
    \ factors, factors.Count);\n        return factors;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa_usoa_s.cs(20,29): error CS0103: The name ''FactorizeHelper'' does not
    exist in the current context

    '
  timestamp: 1659976329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        long\
    \ m = n; //(long)Math.Sqrt(n);\n        List<long> factors = new List<long>();\
    \ // list of factors found\n        long[] factorization = new long[] {1};\n \
    \       \n        List<long> primes = new List<long>() { 2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101,\
    \ 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181,\
    \ 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271,\
    \ 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373,\
    \ 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463,\
    \ 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577,\
    \ 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673,\
    \ 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787,\
    \ 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887,\
    \ 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997});\n  \
    \      \n        while (m < n) {\n            factorization[0] *= m; //long m\
    \ = n * m;\n            long a = factorization[0]; //long a = n;\n           \
    \ long d = 1; //long d = 1;\n            long m = n; //long m = n;\n         \
    \   \n            for (int i = 1; i < factorization.Length; i++) {\n         \
    \       long tmp = factorization[i];\n                factorization[i] = m * tmp;\n\
    \                m = tmp;\n            }\n            \n            for (int i\
    \ = 0; i < factorization.Length; i++) {\n                long tmp = factorization[i];\n\
    \                while (tmp % a == 0) {\n                    factors.Add(tmp /\
    \ a);\n                    tmp += a;\n                }\n            }\n     \
    \       \n            for (int i = 0; i < primes.Count; i++) {\n             \
    \   long tmp = factor\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo14klcy0.cs(23,858): error CS1002: ; expected

    /tmp/tmpo14klcy0.cs(23,858): error CS1513: } expected

    /tmp/tmpo14klcy0.cs(46,34): error CS1002: ; expected

    /tmp/tmpo14klcy0.cs(48,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpo14klcy0.cs(59,2): error CS1513: } expected

    '
  timestamp: 1659976329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        if (n\
    \ < 2)\n            throw new ArgumentOutOfRangeException(\"Factorize\", \"n should\
    \ be greater than 2\");\n        long maxFactor = 1;\n        long minFactor =\
    \ Long.MaxValue;\n        for (long f = 2; f <= Math.Sqrt(n); f++) {\n       \
    \     if (n % f == 0) {\n                maxFactor = f;\n                minFactor\
    \ = f;\n            }\n            if (maxFactor == minFactor)\n             \
    \   break;\n        }\n        var factors = new List<long>();\n        for (long\
    \ f = 2; f <= maxFactor; f++) {\n            if (n % f == 0) {\n             \
    \   factors.Add(f);\n                while (n % f == 0) {\n                  \
    \  n /= f;\n                    factors.Add(f);\n                }\n         \
    \   }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n\
    \        Debug.Assert(n == 1L || n > 1L);\n        return factors;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5ieffkgw.cs(22,26): error CS0103: The name ''Long'' does not exist in
    the current context

    '
  timestamp: 1659976329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        if (n < 2) {\n            factors.Add(1);\n\
    \            return factors;\n        }\n        BigInteger bigN = new BigInteger(n.ToString());\n\
    \        BigInteger bigSqr = bigN.Sqrt(BigInteger.One);\n        BigInteger bigM\
    \ = new BigInteger(bigSqr.ToString());\n        int stepCount = bigN.Divide(bigM).ToInt();\n\
    \        int start = 2;\n        while (step < stepCount) {\n            BigInteger\
    \ factor = bigN.Multiply(start).Divide(bigM);\n            factors.Add(factor);\n\
    \            start = factor + 1;\n            step++;\n        }\n        return\
    \ factors;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf73wg90q.cs(24,42): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    /tmp/tmpf73wg90q.cs(25,34): error CS1061: ''BigInteger'' does not contain a definition
    for ''Sqrt'' and no accessible extension method ''Sqrt'' accepting a first argument
    of type ''BigInteger'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpf73wg90q.cs(26,42): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    /tmp/tmpf73wg90q.cs(27,30): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''divisor'' of ''BigInteger.Divide(BigInteger,
    BigInteger)''

    /tmp/tmpf73wg90q.cs(29,16): error CS0103: The name ''step'' does not exist in
    the current context

    /tmp/tmpf73wg90q.cs(30,38): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''right'' of ''BigInteger.Multiply(BigInteger,
    BigInteger)''

    /tmp/tmpf73wg90q.cs(30,54): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''divisor'' of ''BigInteger.Divide(BigInteger,
    BigInteger)''

    /tmp/tmpf73wg90q.cs(31,25): error CS1503: Argument 1: cannot convert from ''System.Numerics.BigInteger''
    to ''long''

    /tmp/tmpf73wg90q.cs(32,21): error CS0266: Cannot implicitly convert type ''System.Numerics.BigInteger''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpf73wg90q.cs(33,13): error CS0103: The name ''step'' does not exist in
    the current context

    '
  timestamp: 1659976329
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ primeFactors = new List<long>();\n        primeFactors.Add(2);\n\n        //\
    \ For each possible prime factor, test if n has that factor.\n        // If it\
    \ does not, add it to the list of factors.\n        for (int i = 3; i <= Math.Sqrt(n);\
    \ i += 2) {\n            if (n % i == 0) {\n                primeFactors.Add(i);\n\
    \                n /= i;\n            }\n        }\n        primeFactors.Add(n);\n\
    \        return primeFactors;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <95124ed3539642fab8b5a6161f36687a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <95124ed3539642fab8b5a6161f36687a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976330
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        // Initialise\
    \ factorization\n        var factorization = new List<long>();\n        var isPrime\
    \ = new bool[(int)Math.Sqrt(n)];\n\n        // Scan factorization for all divisors\
    \ of n\n        for (int d = 0; d < (int)Math.Sqrt(n); d++) {\n            var\
    \ i = (int)Math.Floor(d / n);\n\n            // If divisor is primeness, add it\
    \ to the factorization\n            if (n % i == 0) {\n                factorization.Add(i);\n\
    \                isPrime[(int)i] = true;\n            }\n        }\n\n       \
    \ // Return factorization sorted by how many times it appears in factorization\n\
    \        return factorization.OrderBy(d => factorization.IndexOf(d)).Select(d\
    \ => new long() {\n            Fact = d,\n            Count = factorization.Count(f\
    \ => f == d)\n        }).ToList();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1ltkk43c.cs(25,31): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Floor(decimal)'' and ''Math.Floor(double)''

    /tmp/tmp1ltkk43c.cs(36,13): error CS0117: ''long'' does not contain a definition
    for ''Fact''

    /tmp/tmp1ltkk43c.cs(37,13): error CS0117: ''long'' does not contain a definition
    for ''Count''

    '
  timestamp: 1659976330
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        long\
    \ m = n;\n        if (m == 1) return (new List<long>(new long[]{m}));\n      \
    \  if (m % 2 == 0) return Factorize((m >> 1L)); else return Factorize(m >> 1L);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqwp2lltu.cs(21,43): error CS0019: Operator ''>>'' cannot be applied to
    operands of type ''long'' and ''long''

    /tmp/tmpqwp2lltu.cs(21,76): error CS0019: Operator ''>>'' cannot be applied to
    operands of type ''long'' and ''long''

    '
  timestamp: 1659976330
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        long\
    \ factorization = (long)Math.Sqrt(n);\n        long factors = factorization;\n\
    \        long[] factorizations = new long[factors+1];\n        factorizations[0]\
    \ = 1;\n        for (int i = 1; i <= factors; i++) {\n            factorizations[i]\
    \ = factorization/i;\n        }\n        List<long> result = new List<long>();\n\
    \        for (int i = 0; i <= factors; i++) {\n            if (factorizations[i]\
    \ > 0) {\n                long p = i;\n                long q = 1;\n         \
    \       while (q*i <= factorizations[i]) {\n                    q++;\n       \
    \         }\n                result.Add(p);\n                result.AddRange(Factorize(factorizations[i]/q));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659976335
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n\n        // Check if given number is a prime number\n\
    \        if (n <= 1)\n            return factors;\n        if (n == 2)\n     \
    \       factors.Add(2);\n        else if (n % 2 == 0)\n            factors.Add(2);\n\
    \        else {\n            // Iterate through all possible factors of given\
    \ number\n            for (int i = 3; i <= Math.Sqrt(n); i += 2) {\n         \
    \       if (n % i == 0) {\n                    factors.Add(i);\n             \
    \       n /= i;\n                    break;\n                }\n            }\n\
    \        }\n\n        // If the number is still not prime then try to go up to\
    \ 10^8\n        long limit = (long)Math.Pow(10, 9L);\n        while (n > limit)\
    \ {\n            factors.Add(1);\n            n /= 1;\n        }\n\n        return\
    \ factors;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <befbd24625404778a7ee251fe3de31c6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <befbd24625404778a7ee251fe3de31c6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976330
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        if (n\
    \ == 1)\n            return new List<long>(new long[]{n});\n        long result\
    \ = n;\n        List<long> primes = new List<long>();\n        for (long factor\
    \ = 2; factor <= n; factor++) {\n            if ((n % factor) == 0) {\n      \
    \          long divisor = n / factor;\n                primes.Add((long)factor);\n\
    \                result += divisor;\n                while ((n % divisor) == 0)\
    \ {\n                    result += divisor;\n                    n /= divisor;\n\
    \                }\n            }\n        }\n        if (n == 1)\n          \
    \  return new List<long>(new long[]{n});\n        primes.Add((long)n);\n     \
    \   long product = result;\n        while (primes.Count != 0) {\n            if\
    \ (primes.First() == result)\n                break;\n            product = product;\n\
    \            primes.RemoveAt(0);\n        }\n        return new List<long>(new\
    \ long[]{product});\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659976335
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ result = new List<long>();\n        // Create all prime numbers less than or\
    \ equal to n\n        long largest = Math.Sqrt(n);\n        BigInteger factorization\
    \ = new BigInteger(n.ToString());\n        while (true) {\n            if (factorization.IsPrime)\
    \ {\n                result.Add(factorization.ToString());\n                factorization\
    \ = new BigInteger(factorization.ToString());\n            } else {\n        \
    \        factorization = new BigInteger(factorization.ToString()+1);\n       \
    \     }\n            if (factorization.ToString() == largest.ToString()) {\n \
    \               break;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpctbeznh0.cs(21,24): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpctbeznh0.cs(22,51): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    /tmp/tmpctbeznh0.cs(24,31): error CS1061: ''BigInteger'' does not contain a definition
    for ''IsPrime'' and no accessible extension method ''IsPrime'' accepting a first
    argument of type ''BigInteger'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpctbeznh0.cs(25,28): error CS1503: Argument 1: cannot convert from ''string''
    to ''long''

    /tmp/tmpctbeznh0.cs(26,48): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    /tmp/tmpctbeznh0.cs(28,48): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    '
  timestamp: 1659976330
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ result = new List<long>();\n        long product = n; \n        long max = n\
    \ / 2L; \n        bool prime = true; \n\n        while (prime) {\n           \
    \ result.Clear();\n            List<long> factors = new List<long>();\n      \
    \      while (n > max) {\n                long factor = product / max;\n     \
    \           if (factors.Contains(factor)) factors.Remove(factor);\n          \
    \      else factors.Add(factor);\n                n /= max;\n            }\n \
    \           if (factors.Count > 0) {\n                prime = false;\n       \
    \         foreach (long factor in factors) {\n                    result.Add(factor);\n\
    \                }\n                product = factors.Sum(x => (long) (x * x));\
    \ // product of factors\n            }\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659976335
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        // Set up array to store factors while\
    \ factoring\n        long[] factored = new long[n];\n        // Keep track of\
    \ factors while factoring\n        long factor = 1;\n        // Test all factors\
    \ of given number\n        while (factor < n) {\n            // If the number\
    \ is divisible by factor\n            if (n % factor == 0) {\n               \
    \ // Add factor to list if its not yet in list and is not already in list\n  \
    \              if (!factors.Contains(factor) || factors.Contains(factors, factor))\
    \ {\n                    factors.Add(factor);\n                }\n           \
    \     // Add factor to array as it is already in array\n                factored[factors.Count\
    \ - 1]++;\n            }\n            // Add factor\n            factor++;\n \
    \       }\n        // Return list of factors\n        return factors;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppvv2k9zq.cs(29,58): error CS1501: No overload for method ''Contains''
    takes 2 arguments

    '
  timestamp: 1659976330
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        long factorization, prime;\n        //\
    \ Set up initial factorization to largest prime factor\n        factorization\
    \ = n;\n        while(true) {\n            prime = 2;\n            // Set up boolean\
    \ array of which factors to check\n            bool[] factorArray = new bool[100];\n\
    \            // Set up boolean flag for whether number is prime or not (for speed)\n\
    \            bool primeFlag = false;\n            // Set up boolean flag for whether\
    \ number is divisible by any prime numbers (for speed)\n            bool divisorFlag\
    \ = false;\n            // Set up boolean flag for whether number is divisible\
    \ by any composite numbers (for speed)\n            bool compositeFlag = false;\n\
    \            // Set up boolean flag for whether number is divisible by any composite\
    \ numbers (for speed)\n            bool compositeFlag2 = false;\n            //\
    \ Set up boolean flag for whether number is divisible by any composite numbers\
    \ (for speed)\n            bool compositeFlag3 = false;\n            while(prime\
    \ <= factorization) {\n                // Set up boolean array of which factors\
    \ to check\n                factorArray[prime-1] = true;\n                // Set\
    \ up boolean flag for whether number is prime or not (for speed)\n           \
    \     primeFlag = true;\n                while(prime * prime <= factorization)\
    \ {\n                    if(prime * prime == factorization) {\n              \
    \          primeFlag = false;\n                        break;\n              \
    \      }\n                    if(factorization%prime == 0) {\n               \
    \         factorization = factorization / prime;\n                        factors.Add(prime);\n\
    \                        factorArray[prime-1] = false;\n                     \
    \   primeFlag = true;\n                        break;\n                    }\n\
    \                    prime++;\n                }\n                if(primeFlag\
    \ == false) {\n                    factorization = factorization / prime;\n  \
    \                  factors.Add(prime);\n                    factorArray[prime-1]\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if(factorization%2 == 0 && factorization%3 == 0) {\n               \
    \ factorization = factorization / 2;\n                factors.Add(2);\n      \
    \      }\n            if(factorization%5 == 0 && factorization%7 == 0) {\n   \
    \             factorization = factorization / 5;\n                factors.Add(5);\n\
    \            }\n            if(factorization%2 == 0 && factorization%5 == 0) {\n\
    \                factorization = factorization / 2;\n                factors.Add(2);\n\
    \            }\n            if(factorization%7 == 0 && factorization%11 == 0)\
    \ {\n                factorization = factorization / 7;\n                factors.Add(7);\n\
    \            }\n            if(factorization%11 == 0 && factorization%17 == 0)\
    \ {\n                factorization = factorization / 11;\n                factors.Add(11);\n\
    \            }\n            if(factorization%17 == 0 && factorization%23\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwoqburw6.cs(83,57): error CS1026: ) expected

    /tmp/tmpwoqburw6.cs(83,57): error CS1525: Invalid expression term ''}''

    /tmp/tmpwoqburw6.cs(83,57): error CS1002: ; expected

    /tmp/tmpwoqburw6.cs(85,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpwoqburw6.cs(96,2): error CS1513: } expected

    '
  timestamp: 1659976329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        if (n\
    \ < 2) return new List<long>();\n        long sqr = Math.Sqrt(n);\n        if\
    \ (sqr == n || sqr == n-1) return new List<long>();\n        List<long> factors\
    \ = new List<long>();\n        while (sqr > 1) {\n            if (n % sqr != 0)\
    \ {\n                factors.Add(sqr);\n                n /= sqr;\n          \
    \  }\n            else {\n                long q = (long) (Math.Floor(sqr / 2.0));\n\
    \                long r = sqr - q;\n                if (r > 2) {\n           \
    \         long qq = q * q;\n                    if (qq >= n && qq <= sqr) {\n\
    \                        factors.Add(q);\n                        n -= qq;\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ factors;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpisb872wm.cs(20,20): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976330
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        // Initialization\n\
    \        bool isPrime = true;\n        long factor = 1;\n        List<long> factors\
    \ = new List<long>();\n        long sqroot = Math.Sqrt(n);\n        long half\
    \ = (int)Math.Floor(sqroot + 0.5);\n        long sqrtn = Math.Sqrt(n);\n     \
    \   bool even = true;\n\n        while (isPrime) {\n            // Prime check\n\
    \            for (int i = 2; i <= sqrtn; i++) {\n                if (n % i ==\
    \ 0) {\n                    isPrime = false;\n                    break;\n   \
    \             }\n            }\n\n            // If it is not prime, check if\
    \ it can be evenly divided by all numbers up to half of the number\n         \
    \   if (!isPrime) {\n                if (sqrtn == half) {\n                  \
    \  for (int i = 2; i <= sqrtn; i++) {\n                        if (n % i == 0)\
    \ {\n                            even = false;\n                            break;\n\
    \                        }\n                    }\n                } else {\n\
    \                    for (int i = (int)half; i > 1; i--) {\n                 \
    \       if (n % i == 0) {\n                            even = false;\n       \
    \                     break;\n                        }\n                    }\n\
    \                }\n            }\n\n            // Factorization\n          \
    \  if (even) {\n                while (n % 2 == 0) {\n                    factor\
    \ = 2;\n                    n /= 2;\n                    factors.Add(factor);\n\
    \                }\n            } else {\n                while (n % 3 == 0) {\n\
    \                    factor = 3;\n                    n /= 3;\n              \
    \      factors.Add(factor);\n                }\n            }\n        }\n   \
    \     return factors;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9n3913g6.cs(23,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp9n3913g6.cs(25,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976330
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        var result\
    \ = new List<long>();\n\n        if (n == 1L)\n            result.Add(n);\n\n\
    \        var d = 2;\n        var q = n;\n\n        while (q > d) {\n         \
    \   if (n % d == 0) {\n                if (q % d == 0)\n                    result.Add(d);\n\
    \                else {\n                    result.Add(d + (q % d));\n      \
    \              q = q / d;\n                }\n            }\n            d++;\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <27e9dae659824856b9c9a53d468b471a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <27e9dae659824856b9c9a53d468b471a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976330
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        if (n\
    \ == 0 || n == 1) return new List<long>(new long[]{n});\n        var factors =\
    \ FactorizeHelper(n, 1);\n        return factors.Count == 0 ? new List<long>(new\
    \ long[]{n}) : factors;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk7onocby.cs(20,23): error CS0103: The name ''FactorizeHelper'' does not
    exist in the current context

    /tmp/tmpk7onocby.cs(21,16): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''method group'' and ''int''

    '
  timestamp: 1659976330
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        if (n\
    \ <= 1) return new List<long>();\n        long[] factors = new long[n + 1];\n\
    \        factors[0] = 1;\n        factors[1] = 1;\n        // Sieve of Eratosthenes\n\
    \        for (int i = 2; i <= Math.Sqrt(n); i++) {\n            if (factors[i\
    \ >> 1] != 0) continue;\n            for (int j = i * i; j <= n; j += i) {\n \
    \               factors[j / i] = 1;\n            }\n        }\n        List<long>\
    \ result = new List<long>();\n        for (int i = 2; i <= n; i++) {\n       \
    \     if (factors[i] == 0) result.Add(i);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d321caa9d40e497aac19d46dd27fb244>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d321caa9d40e497aac19d46dd27fb244>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976330
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        List<long> factorList = Factorize(n);\n\
    \        // Find first factor\n        long firstFactor = factorList.FirstOrDefault();\n\
    \        // Find first factor - for now only first factor is needed\n        factors.Add(firstFactor);\n\
    \        // Add all other factors\n        foreach (long f in factorList) {\n\
    \            if (f != firstFactor) {\n                factors.Add(f);\n      \
    \      }\n        }\n        return factors;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659976335
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ result = new List<long>();\n        for (long divisor = 2L; divisor <= n; divisor++)\
    \ {\n            if (n % divisor == 0L) {\n                while (n % divisor\
    \ == 0L) {\n                    n = n / divisor;\n                    result.Add(divisor);\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <561028e89ed5442591d1f82e3d770142>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <561028e89ed5442591d1f82e3d770142>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976330
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        var result\
    \ = new List<long>();\n        var divisor = 2;\n        while (divisor < n /\
    \ 2) {\n            // skip even numbers\n            if (n % divisor == 0) divisor++;\n\
    \            else {\n                var count = 0;\n                while (n\
    \ % divisor == 0) {\n                    count += 1;\n                    n =\
    \ n / divisor;\n                }\n                if (count > 1) {\n        \
    \            result.Add((long)divisor);\n                    while (n > 0) {\n\
    \                        result.Add((long)n);\n                        n = n /\
    \ divisor;\n                    }\n                    break;\n              \
    \  }\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <020a95c107a945f682c9f7b3b8bc75bf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <020a95c107a945f682c9f7b3b8bc75bf>:0 \n"
  stdout: None
  timestamp: 1659976336
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        double d = n / 2;\n        long i = 2;\n\
    \        while (d * i <= n) {\n            while (d * i <= n && i * d < n) {\n\
    \                factors.Add(i * d);\n                i += 1;\n              \
    \  d *= i;\n            }\n            i++;\n            d = n / i;\n        }\n\
    \        return factors;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8ye97cku.cs(24,29): error CS1503: Argument 1: cannot convert from ''double''
    to ''long''

    '
  timestamp: 1659976330
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        if (n\
    \ == 1L)\n            return new List<long>() { n };\n\n        var factors =\
    \ new List<long>(); // List of factors of given number.\n        var factorization\
    \ = Factorization(factors, n, 1L, 1L);\n        if (factorization.Count > 1) {\n\
    \            for (var i = 0; i < factorization.Count; i++)\n                factors.Add(factorization[i]);\
    \ // Add factors to list of factors\n            return factors;\n        }\n\
    \        return new List<long>() { n };\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_d2nwlix.cs(23,29): error CS0103: The name ''Factorization'' does not
    exist in the current context

    /tmp/tmp_d2nwlix.cs(24,13): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''method group'' and ''int''

    /tmp/tmp_d2nwlix.cs(25,29): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''int'' and ''method group''

    '
  timestamp: 1659976330
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        List<long> factorization = FactorizeSieve(n);\n\
    \        for (int i = 0; i < factorization.Count; i++) {\n            factors.Add(factorization[i]);\n\
    \        }\n        return factors;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0wvshs_h.cs(20,36): error CS0103: The name ''FactorizeSieve'' does not
    exist in the current context

    '
  timestamp: 1659976330
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        long\
    \ factorization = 1;\n        long limit = (long)Math.Sqrt(n) + 1;\n        long\
    \ counter = 1;\n        while (factorization <= limit) {\n            if (n %\
    \ factorization == 0) {\n                counter++;\n                factorization\
    \ = n * counter;\n            }\n            else {\n                factorization\
    \ = factorization + 1;\n            }\n        }\n        List<long> primes =\
    \ new List<long>();\n        long currentLimit = factorization;\n        while\
    \ (currentLimit <= limit) {\n            while (n % currentLimit == 0) {\n   \
    \             primes.Add(currentLimit);\n                n = n / currentLimit;\n\
    \            }\n            currentLimit = currentLimit + 1;\n        }\n    \
    \    return primes;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4162e05b7a39493787a38d289040ed32>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4162e05b7a39493787a38d289040ed32>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        var factors\
    \ = new List<long>();\n        for (int i = 2; i <= Math.Sqrt(n); ++i)\n     \
    \       if (n % i == 0) {\n                factors.Add(i);\n                n\
    \ /= i;\n            }\n\n        if (n > 1)\n            factors.Add(n);\n\n\
    \        return factors;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d612c1080c1472cb6452659514fc4d0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d612c1080c1472cb6452659514fc4d0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976331
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        BigInteger\
    \ bigN = BigInteger.Abs(n);\n        BigInteger bigP = BigInteger.ValueOf(2);\n\
    \        BigInteger bigDivisor;\n        BigInteger bigFactors;\n        BigInteger\
    \ bigNumberToDivisor;\n        BigInteger bigRemainder;\n        List<long> factors\
    \ = new List<long>();\n        BigInteger bigFactorsCount = BigInteger.One;\n\
    \        bool bigIsPrime = false;\n        while (n != 0) {\n            bigDivisor\
    \ = BigInteger.Divide(bigN, bigP);\n            bigRemainder = BigInteger.Mod(bigN,\
    \ BigInteger.ValueOf(bigDivisor));\n            if (bigRemainder.Equals(BigInteger.Zero))\
    \ {\n                factors.Add(bigDivisor.ToString());\n                n =\
    \ BigInteger.Subtract(n, BigInteger.ValueOf(bigDivisor));\n            } else\
    \ {\n                bigIsPrime = true;\n                bigFactors = BigInteger.ValueOf(bigDivisor).ToString();\n\
    \                while (bigRemainder != BigInteger.Zero) {\n                 \
    \   bigNumberToDivisor = BigInteger.Divide(bigN, bigDivisor);\n              \
    \      bigFactorsCount = BigInteger.Add(bigFactorsCount, BigInteger.ValueOf(Math.Pow(bigNumberToDivisor,\
    \ bigRemainder)));\n                    bigRemainder = BigInteger.Mod(bigN, BigInteger.ValueOf(bigNumberToDivisor));\n\
    \                }\n                if (bigIsPrime) {\n                    factors.Add(bigFactors);\n\
    \                    n = BigInteger.Subtract(n, BigInteger.ValueOf(bigDivisor));\n\
    \                } else {\n                    factors.Add(bigFactors);\n    \
    \            }\n            }\n        }\n        return factors;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqnp36il_.cs(20,38): error CS0117: ''BigInteger'' does not contain a definition
    for ''ValueOf''

    /tmp/tmpqnp36il_.cs(30,39): error CS0117: ''BigInteger'' does not contain a definition
    for ''Mod''

    /tmp/tmpqnp36il_.cs(30,60): error CS0117: ''BigInteger'' does not contain a definition
    for ''ValueOf''

    /tmp/tmpqnp36il_.cs(32,29): error CS1503: Argument 1: cannot convert from ''string''
    to ''long''

    /tmp/tmpqnp36il_.cs(33,55): error CS0117: ''BigInteger'' does not contain a definition
    for ''ValueOf''

    /tmp/tmpqnp36il_.cs(36,41): error CS0117: ''BigInteger'' does not contain a definition
    for ''ValueOf''

    /tmp/tmpqnp36il_.cs(39,82): error CS0117: ''BigInteger'' does not contain a definition
    for ''ValueOf''

    /tmp/tmpqnp36il_.cs(39,99): error CS1503: Argument 1: cannot convert from ''System.Numerics.BigInteger''
    to ''double''

    /tmp/tmpqnp36il_.cs(39,119): error CS1503: Argument 2: cannot convert from ''System.Numerics.BigInteger''
    to ''double''

    /tmp/tmpqnp36il_.cs(40,47): error CS0117: ''BigInteger'' does not contain a definition
    for ''Mod''

    /tmp/tmpqnp36il_.cs(40,68): error CS0117: ''BigInteger'' does not contain a definition
    for ''ValueOf''

    /tmp/tmpqnp36il_.cs(43,33): error CS1503: Argument 1: cannot convert from ''System.Numerics.BigInteger''
    to ''long''

    /tmp/tmpqnp36il_.cs(44,59): error CS0117: ''BigInteger'' does not contain a definition
    for ''ValueOf''

    /tmp/tmpqnp36il_.cs(46,33): error CS1503: Argument 1: cannot convert from ''System.Numerics.BigInteger''
    to ''long''

    '
  timestamp: 1659976331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        while (n > 0) {\n            factors.Add(n\
    \ % 10);\n            n /= 10;\n        }\n        factors.Reverse();\n      \
    \  return factors;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <02d4dddbe2154f3d9834462709d32a96>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <02d4dddbe2154f3d9834462709d32a96>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976331
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        if (n\
    \ < 1) {\n            throw new ArgumentOutOfRangeException(\"Number must be greater\
    \ than 0\");\n        }\n        // find prime factors\n        var factors =\
    \ new List<long>();\n        var smallPrimes = Primes(n / 2);\n        var bigPrimes\
    \ = Primes(n - smallPrimes.Count() - 1);\n        if (n < 4) {\n            //\
    \ if input is less than 4 then there are 2 cases:\n            // a) input is\
    \ 1\n            // b) input is bigger that 2 ^ 2 * 5 ^ 7\n            return\
    \ new List<long>() { (long)n };\n        }\n\n        // case a) input is 1\n\
    \        if (n == 1)\n            return new List<long>() { (long)n };\n\n   \
    \     // case b) input is bigger that 2 ^ 2 * 5 ^ 7\n        if (n > 70) {\n \
    \           // we cannot calculate factorization for number that big\n       \
    \     throw new ArgumentException(\"Number too big!\");\n        }\n        //\
    \ find factors of n\n        foreach (var s in smallPrimes) {\n            if\
    \ (n % s == 0) {\n                var fs = Factorize(s);\n                foreach\
    \ (var b in bigPrimes) {\n                    if (n % b == 0) {\n            \
    \            var fb = Factorize(b);\n                        foreach (var f in\
    \ fs) {\n                            if (f != fb)\n                          \
    \      factors.Add(f);\n                        }\n                    }\n   \
    \             }\n            }\n        }\n        return factors;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp56fz2vfw.cs(24,27): error CS0103: The name ''Primes'' does not exist in
    the current context

    /tmp/tmp56fz2vfw.cs(25,25): error CS0103: The name ''Primes'' does not exist in
    the current context

    /tmp/tmp56fz2vfw.cs(50,33): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''long'' and ''List<long>''

    '
  timestamp: 1659976331
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        long n = n;\n        long counter = 1;\n\
    \        while (n > 2) {\n            // If factorization hasn't reached limit\
    \ and n is prime\n            if (factors.Count == 1000) {\n                factors.Add(n);\n\
    \                factors.Add(1);\n                factors.Add(2);\n          \
    \      return factors;\n            }\n            // If factorization hasn't\
    \ reached limit and n isn't prime\n            if (factors.Count == 1000) {\n\
    \                factors.Add(n);\n                return factors;\n          \
    \  }\n            // Find next prime factor of n\n            long k = n;\n  \
    \          for (int i = 0; i < 3; i++) {\n                if (k%2 == 0) {\n  \
    \                  k /= 2;\n                }\n                else {\n      \
    \              k = (long) Math.Sqrt(k);\n                }\n                if\
    \ (k == 1) {\n                    break;\n                }\n                counter++;\n\
    \            }\n            factors.Add(n);\n            factors.Add(counter);\n\
    \            n /= counter;\n        }\n        return factors;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_g8sbr9_.cs(20,14): error CS0136: A local or parameter named ''n'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp_g8sbr9_.cs(20,18): error CS0165: Use of unassigned local variable ''n''

    '
  timestamp: 1659976331
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        var factorization\
    \ = new List<long>();\n        // Generate prime factorization for given number\n\
    \        long primeFactorization = GCD(n, 2);\n        // Iteration through primeFactorization\
    \ starting from 2\n        for (long x = 2; x < primeFactorization; x++) {\n \
    \           // If n divided by any prime number from primeFactorization is equal\
    \ to 1\n            if (n % x == 0) {\n                // We have found a factor\n\
    \                factorization.Add(x);\n                // We divide n by each\
    \ prime from prime factorization\n                n /= x;\n                //\
    \ If n is now equal to 1 then stop\n                if (n == 1) break;\n     \
    \       }\n        }\n        // If we reached this point then n is prime\n  \
    \      factorization.Add(n);\n        // Return list of prime factors\n      \
    \  return factorization;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptypr2ae4.cs(21,35): error CS0103: The name ''GCD'' does not exist in the
    current context

    '
  timestamp: 1659976331
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        if (n\
    \ == 1L)\n            return new List<long>();\n        if (n % 2L == 1L)\n  \
    \          return Factorize(n / 2L);\n        if (n % 3L == 1L)\n            return\
    \ Factorize(n / 3L);\n        if (n % 5L == 1L)\n            return Factorize(n\
    \ / 5L);\n        List<long> factors = new List<long>();\n        for (int i =\
    \ 7; i <= Math.Sqrt(n); i += 7) {\n            if ((n % i) == 0L)\n          \
    \      continue;\n            long tmp = Math.Floor(n / i);\n            if (tmp\
    \ == i)\n                tmp++;\n            factors.Add(tmp);\n            if\
    \ (tmp > 1L)\n                factors.Add(tmp);\n        }\n        if (factors.Count\
    \ > 1)\n            factors.Add(factors.Count);\n        return factors;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4aar21gs.cs(31,29): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Floor(decimal)'' and ''Math.Floor(double)''

    '
  timestamp: 1659976331
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        if (n\
    \ < 2) {\n            return new List<long>();\n        }\n        var factorization\
    \ = new List<long>();\n        var factors = FactorizeHelper(n);\n        factorization.AddRange(factors);\n\
    \        return factorization;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp911t_kiv.cs(23,23): error CS0103: The name ''FactorizeHelper'' does not
    exist in the current context

    '
  timestamp: 1659976331
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        Debug.Assert(n>0,\
    \ \"n can't be zero.\");\n        List<long> factors = new List<long>();\n   \
    \     factors.Add((long)n);\n        while (n > 1) {\n            long a = n;\n\
    \            long b = n % a;\n            if (b > 0) {\n                factors.Add(b);\n\
    \                n = a / b;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659976336
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        long n = Math.Abs(n);\n        // Start\
    \ from 1 to sqrt(n)\n        long r = 1;\n        while (Math.Sqrt(r) < n) {\n\
    \            if (n % r == 0) {\n                factors.Add(r);\n            \
    \    n /= r;\n            }\n            r++;\n        }\n        return factors;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp21khg7qn.cs(20,14): error CS0136: A local or parameter named ''n'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp21khg7qn.cs(20,27): error CS0165: Use of unassigned local variable ''n''

    '
  timestamp: 1659976331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        long\
    \ factor = 2L;\n        var result = new List<long>();\n        while (factor\
    \ <= n) {\n            if (n % factor == 0) {\n                result.Add(factor);\n\
    \                n /= factor;\n            }\n            else {\n           \
    \     if (n % 2 == 0) {\n                    result.Add(2);\n                \
    \    n /= 2;\n                }\n                else {\n                    result.Add(1);\n\
    \                    n /= 2;\n                }\n            }\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a102db86b2724d6bade4d1020dea1dbc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a102db86b2724d6bade4d1020dea1dbc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        bool\
    \ isPrime = true;\n        List<long> result = new List<long>();\n        for\
    \ (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n           \
    \     isPrime = false;\n                break;\n            }\n        }\n   \
    \     if (isPrime) {\n            result.Add(n);\n        }\n        for (long\
    \ i = 3; i <= Math.Sqrt(n); i += 2) {\n            if (n % i == 0) {\n       \
    \         long p = i;\n                for (long j = 2; j <= (n / i); j++) {\n\
    \                    if (n % p == 0) {\n                        isPrime = false;\n\
    \                        break;\n                    }\n                    p++;\n\
    \                }\n                if (isPrime) {\n                    result.Add(i);\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <78e46eb340dd40e2979d288db01ef6d8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <78e46eb340dd40e2979d288db01ef6d8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976332
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        long[]\
    \ factorization = new long[n];\n        // First loop finds factorization\n  \
    \      for (long i = 3; i <= n; i += 2) {\n            while (n % i == 0) {\n\
    \                factorization[i / 2] = i;\n                n /= i;\n        \
    \    }\n        }\n        // Second loop counts how many times each of the factors\
    \ appeared in factorization\n        long nFactor = 1;\n        for (long i =\
    \ 0; i < n; i++) {\n            nFactor *= factorization[i];\n        }\n    \
    \    List<long> result = new List<long>(new long[nFactor]);\n        for (long\
    \ i = 0; i < nFactor; i++) {\n            result.Add(n);\n            n /= factorization[i];\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <808e4d4b9a8a43ee92e58719315f418a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <808e4d4b9a8a43ee92e58719315f418a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976332
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ result = new List<long>();\n        long p = 1;\n        long q = n;\n\n   \
    \     while (q > p) {\n            for (; p <= q; p++) {\n                bool\
    \ isPrime = true;\n                for (; q % p == 0; q/= p) {\n             \
    \       isPrime = false;\n                }\n                if (isPrime)\n  \
    \                  result.Add(p);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659976337
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        if (n <= 1)\n            return factors;\n\
    \        long div = n;\n        while (n % div == 0)\n            div = div /\
    \ 2;\n        int count = 1;\n        while (n % div != 0) {\n            factors.Add(div);\n\
    \            count++;\n            div = div / 2;\n        }\n        return factors;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.DivideByZeroException: Attempted to divide\
    \ by zero.\n  at Problem.Factorize (System.Int64 n) [0x00021] in <c737d46e519c49ec8c9eb86100226d53>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <c737d46e519c49ec8c9eb86100226d53>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.DivideByZeroException: Attempted\
    \ to divide by zero.\n  at Problem.Factorize (System.Int64 n) [0x00021] in <c737d46e519c49ec8c9eb86100226d53>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <c737d46e519c49ec8c9eb86100226d53>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976332
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        int divisor\
    \ = 2, count = 0;\n        int sqrt_divisor = MathHelper.Sqrt(divisor);\n    \
    \    List<long> factorization = new List<long>();\n        while ((n % divisor)\
    \ != 0) {\n            divisor++;\n            count += 1;\n            sqrt_divisor\
    \ = MathHelper.Sqrt(divisor);\n        }\n        if (sqrt_divisor != divisor)\
    \ {\n            factorization.Add(divisor);\n            factorization.Add(sqrt_divisor);\n\
    \        }\n        while ((n % sqrt_divisor) != 0) {\n            sqrt_divisor++;\n\
    \            count += 1;\n            divisor = sqrt_divisor;\n            sqrt_divisor\
    \ = MathHelper.Sqrt(divisor);\n        }\n        if (sqrt_divisor != divisor)\
    \ {\n            factorization.Add(divisor);\n            factorization.Add(sqrt_divisor);\n\
    \        }\n        if (n < divisor) {\n            factorization.Add(divisor);\n\
    \        }\n        return factorization.OrderBy(f => f).ToList();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn5s1yoo6.cs(20,28): error CS0103: The name ''MathHelper'' does not exist
    in the current context

    /tmp/tmpn5s1yoo6.cs(25,28): error CS0103: The name ''MathHelper'' does not exist
    in the current context

    /tmp/tmpn5s1yoo6.cs(35,28): error CS0103: The name ''MathHelper'' does not exist
    in the current context

    '
  timestamp: 1659976332
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        long\
    \ num = 1;\n        List<long> factors = new List<long>();\n\n        while (n\
    \ > 1) {\n            while (n % num != 0) {\n                factors.Add(num);\n\
    \            }\n\n            n = n / num;\n            num++;\n        }\n\n\
    \        return factors;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <53c55f7ba0f94b049576e026abc0cb9e>:0 \n"
  stdout: None
  timestamp: 1659976337
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ result = new List<long>();\n        long factor = 1;\n        while (factor\
    \ != 1 && n != 1) {\n            if (n % factor == 0) {\n                n /=\
    \ factor;\n                result.Add(factor);\n            } else {\n       \
    \         factor++;\n            }\n        }\n        if (n != 1) {\n       \
    \     result.Add(n);\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7c7836f64f624a5ca945ea78d24ced74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7c7836f64f624a5ca945ea78d24ced74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976332
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        // Calculate\
    \ primes up to sqrt(n) using Sieve of Eratosthenes\n        // Sieve of Eratosthenes\
    \ is O(n) time and O(n) space\n        BitArray sieve = new BitArray(Primes.Sieve.Count);\n\
    \        for (int i = 0; Primes.Sieve.Length > i; i++) {\n            sieve[i]\
    \ = Primes.Sieve[i];\n        }\n        int primeFactorCount = 1;\n        for\
    \ (int i = 0; i <= n / Primes.Sieve.Count; i++) {\n            if (!sieve[i])\
    \ {\n                primeFactorCount *= i;\n                for (long j = i *\
    \ i; j < n / i; j += i) {\n                    sieve[j] = true;\n            \
    \    }\n            }\n        }\n        List<long> primeFactors = new List<long>(Primes.Sieve.Count\
    \ - primeFactorCount);\n        for (int i = 0; Primes.Sieve.Count > i; i++) {\n\
    \            long primeFactor = Primes.Sieve[i];\n            if (primeFactorCount\
    \ % primeFactor == 0) {\n                primeFactors.Add(primeFactor);\n    \
    \        }\n        }\n        return primeFactors;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8ves802w.cs(21,9): error CS0246: The type or namespace name ''BitArray''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmp8ves802w.cs(21,30): error CS0246: The type or namespace name ''BitArray''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmp8ves802w.cs(21,39): error CS0103: The name ''Primes'' does not exist in
    the current context

    /tmp/tmp8ves802w.cs(22,25): error CS0103: The name ''Primes'' does not exist in
    the current context

    /tmp/tmp8ves802w.cs(23,24): error CS0103: The name ''Primes'' does not exist in
    the current context

    /tmp/tmp8ves802w.cs(26,34): error CS0103: The name ''Primes'' does not exist in
    the current context

    /tmp/tmp8ves802w.cs(34,50): error CS0103: The name ''Primes'' does not exist in
    the current context

    /tmp/tmp8ves802w.cs(35,25): error CS0103: The name ''Primes'' does not exist in
    the current context

    /tmp/tmp8ves802w.cs(36,32): error CS0103: The name ''Primes'' does not exist in
    the current context

    '
  timestamp: 1659976332
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        long p = n;\n        while (n > 1) {\n\
    \            while (n % 2 == 0) {\n                n = n / 2;\n              \
    \  factors.Add(2L);\n            }\n            long q = 3;\n            while\
    \ (q <= n / 3) {\n                if (n % q == 0) {\n                    n = n\
    \ / q;\n                    factors.Add(q);\n                }\n             \
    \   q++;\n            }\n            long t = q;\n            while (t <= n) {\n\
    \                if (n % t == 0) {\n                    n = n / t;\n         \
    \           factors.Add(t);\n                }\n                t++;\n       \
    \     }\n        }\n        return factors;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <066c97b47fd74f028c3a6741b40587a6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <066c97b47fd74f028c3a6741b40587a6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976332
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        if (n\
    \ % 2 == 0) return new List<long>(new long[] { n / 2 });\n        if (n < 2) return\
    \ new List<long>(new long[] { 2 });\n        long p = 2, q = (long) (Math.Sqrt(n));\n\
    \        while (p <= q) {\n            bool isPrime = true;\n            long\
    \ i = p;\n            while ((i + (q / i)) <= q && isPrime) {\n              \
    \  isPrime = ((n % i) == 0);\n                i++;\n            }\n          \
    \  if (isPrime)\n                return new List<long>(new long[] { p });\n  \
    \          p++;\n        }\n        return new List<long>(new long[] { n });\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5731e4cba8b84b5ab2c1ccced264fc0d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5731e4cba8b84b5ab2c1ccced264fc0d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976332
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        var factors\
    \ = new List<long>();\n        var factorsCount = 2;\n        while (n % 2 ==\
    \ 0) {\n            factors.Add(2);\n            factorsCount++;\n           \
    \ n /= 2;\n        }\n        while (factorsCount < 2) {\n            if (factorsCount\
    \ < 2) {\n                factorsCount = 2;\n            }\n            for (int\
    \ i = 3; i <= Math.Sqrt(n); i += 2) {\n                if (n % i == 0) {\n   \
    \                 factors.Add(i);\n                    factorsCount += 1;\n  \
    \                  n /= i;\n                }\n            }\n        }\n    \
    \    factors.Add(n);\n        return factors;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a6f41e223fb4a33b3a829aac4158ff7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a6f41e223fb4a33b3a829aac4158ff7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976332
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        if (n < 0) {\n            throw new ArgumentException(\"\
    Given number should be non-negative.\");\n        }\n        long factorization\
    \ = 1;\n        long lastFactor = n - 1;\n        while (n > 1) {\n          \
    \  while (n % factorization == 0) {\n                factors.Add(factorization);\n\
    \                lastFactor = factorization;\n                n /= factorization;\n\
    \            }\n            factorization++;\n        }\n        factors.Add(lastFactor);\n\
    \        return factors;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659976337
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n        // Create an array to store found factors.\n\
    \        long[] factorization = new long[long.MaxValue + 1];\n        // Create\
    \ an array to store found factorization's factors multiple.\n        long[] factorizationMulti\
    \ = new long[long.MaxValue + 1];\n        // Create an array to store found factorization's\
    \ factors multiple.\n        long[] product = new long[long.MaxValue + 1];\n \
    \       // Generate factorization array from given number.\n        long nFactorization\
    \ = CalculateFactorization(n);\n        // Copy factorization array into new array.\n\
    \        long[] factorizationCopy = factorization.Clone() as long[];\n       \
    \ // Create variable for counting number to be tested for factors.\n        long\
    \ factorsTested = nFactorization;\n        // Count factors of original number.\n\
    \        for (long i = 2; i <= nFactorization; i++) {\n            if (n % i ==\
    \ 0) {\n                factorsTested = i;\n                factorization[factorizationCopy.Length]\
    \ = i;\n                // Calculate factor multiplication array for each found\
    \ factor.\n                factorizationMulti[factorizationCopy.Length] = CalculateFactorMultiplication(i,\
    \ factorsTested);\n                // Calculate product array for each found factor.\n\
    \                product[factorizationCopy.Length] = CalculateProduct(i, factorsTested);\n\
    \                // Increase factorizationCopy array length.\n               \
    \ factorizationCopy.Length++;\n            }\n        }\n        // Return factors.\n\
    \        return factors;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplkpb3w1d.cs(21,41): error CS0220: The operation overflows at compile time
    in checked mode

    /tmp/tmplkpb3w1d.cs(23,46): error CS0220: The operation overflows at compile time
    in checked mode

    /tmp/tmplkpb3w1d.cs(25,35): error CS0220: The operation overflows at compile time
    in checked mode

    /tmp/tmplkpb3w1d.cs(27,31): error CS0103: The name ''CalculateFactorization''
    does not exist in the current context

    /tmp/tmplkpb3w1d.cs(38,64): error CS0103: The name ''CalculateFactorMultiplication''
    does not exist in the current context

    /tmp/tmplkpb3w1d.cs(40,53): error CS0103: The name ''CalculateProduct'' does not
    exist in the current context

    /tmp/tmplkpb3w1d.cs(42,17): error CS0200: Property or indexer ''Array.Length''
    cannot be assigned to -- it is read only

    '
  timestamp: 1659976332
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ result = new List<long>();\n        if (n == 1) {\n            long f = 3L;\n\
    \            result.Add((long)f);\n            return result;\n        }\n   \
    \     long f = 2L;\n        while (f * f <= n) {\n            while (n % f ==\
    \ 0) {\n                result.Add((long) f);\n                n /= f;\n     \
    \       }\n            if (n > 1) {\n                long g = 2L;\n          \
    \      while ((n / g) * g <= f) {\n                    if (n % g == 0) {\n   \
    \                     result.Add((long) g);\n                        n /= g;\n\
    \                    }\n                    g++;\n                }\n        \
    \    }\n            f++;\n        }\n        if (n > 1) {\n            long g\
    \ = 2L;\n            while ((n / g) * g <= f) {\n                if (n % g ==\
    \ 0) {\n                    result.Add((long) g);\n                    n /= g;\n\
    \                }\n                g++;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpinizbvo5.cs(21,18): error CS0136: A local or parameter named ''f'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659976332
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ factors = new List<long>();\n\n        // Factor out first half of number\n\
    \        for (long i = 2; i <= n; i += 2) {\n            if (n % i == 0) {\n \
    \               factors.Add(i);\n                n /= i;\n            }\n    \
    \    }\n\n        // If remainder is not zero, add 1 to factors and divide by\
    \ it\n        if (n != 1) factors.Add(n);\n\n        return factors;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bac3b2aea14440f6b864875bcc53129e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bac3b2aea14440f6b864875bcc53129e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976333
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        // Use\
    \ prime numbers to find factorization\n        var p = new List<long>() { 2 };\n\
    \        foreach (var s in Divisors(n)) {\n            while (n % s == 0) {\n\
    \                p.Add(s);\n                n /= s;\n            }\n        }\n\
    \        p.Reverse();\n        n.ToList().ForEach(x => { Console.WriteLine(x);\
    \ });\n        return p;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n\
    \    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdzxe8b1z.cs(21,27): error CS0103: The name ''Divisors'' does not exist
    in the current context

    /tmp/tmpdzxe8b1z.cs(28,11): error CS1061: ''long'' does not contain a definition
    for ''ToList'' and no accessible extension method ''ToList'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659976332
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ result = new List<long>();\n        List<long> primes = new List<long>() { 2L,\
    \ 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L,\
    \ 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L, 103L, 107L, 109L, 111L, 113L,\
    \ 127L };\n        List<long> factorization = new List<long>();\n        while\
    \ (n > 1) {\n            factorization.Add(n);\n            n = n / primes.SingleOrDefault(x\
    \ => n % x == 0);\n        }\n        result = factorization.Zip(factorization.Skip(1),\
    \ (x, y) => x * y).ToList();\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aef22c77ea0f4d23beefe0a7c4c2075f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aef22c77ea0f4d23beefe0a7c4c2075f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976333
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        var factors\
    \ = new List<long>();\n        var factorization = Factorization(n);\n       \
    \ factors.AddRange(factorization.Select(f => (long)f));\n        return factors;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppi91vebp.cs(20,29): error CS0103: The name ''Factorization'' does not
    exist in the current context

    '
  timestamp: 1659976333
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        long\
    \ a = 1;\n        long b = n;\n        int counter = 0;\n\n        while (b !=\
    \ 1) {\n            // If number is divisable by 2, then check if dividing by\
    \ 3 gives\n            // a smaller number than dividing by 2\n            if\
    \ (b % 2 == 0) {\n                if (b % 3 == 0)\n                    counter++;\n\
    \                // If divisable by 2, but dividing by 3 gives a number less\n\
    \                // than 2, then check if dividing by 5 gives a smaller number\n\
    \                // than dividing by 2\n                else\n               \
    \     counter++;\n            }\n            // If number is divisable by 3, then\
    \ check if dividing by 5 gives\n            // a smaller number than dividing\
    \ by 3\n            else {\n                if (b % 5 == 0)\n                \
    \    counter++;\n                // If divisable by 3, but dividing by 5 gives\
    \ a number less\n                // than 3, then check if dividing by 7 gives\
    \ a smaller number\n                // than dividing by 3\n                else\n\
    \                    counter++;\n            }\n            // If number is divisable\
    \ by 5, then check if dividing by 7 gives\n            // a smaller number than\
    \ dividing by 5\n            else {\n                if (b % 7 == 0)\n       \
    \             counter++;\n                // If divisable by 5, but dividing by\
    \ 7 gives a number less\n                // than 5, then check if dividing by\
    \ 11 gives a smaller number\n                // than dividing by 5\n         \
    \       else\n                    counter++;\n            }\n            b = b\
    \ / 2;\n            a++;\n        }\n        List<long> primes = new List<long>();\n\
    \        for (int i = 1; i < counter; i++)\n            primes.Add(a);\n     \
    \   return primes;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzif1z52j.cs(45,14): error CS8641: ''else'' cannot start a statement.

    /tmp/tmpzif1z52j.cs(45,14): error CS1003: Syntax error, ''('' expected

    /tmp/tmpzif1z52j.cs(45,14): error CS1525: Invalid expression term ''else''

    /tmp/tmpzif1z52j.cs(45,14): error CS1026: ) expected

    /tmp/tmpzif1z52j.cs(45,14): error CS1002: ; expected

    '
  timestamp: 1659976332
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        long\
    \ factorization = n;\n        List<long> primeFactors = new List<long>();\n\n\
    \        while (true) {\n            while (factorization % 2 == 0) {\n      \
    \          factorization /= 2;\n                primeFactors.Add(2);\n       \
    \     }\n\n            long r = Math.Sqrt(factorization);\n            bool isPrime\
    \ = true;\n\n            for (long i = 2; i <= r; i++) {\n                if (factorization\
    \ == i) {\n                    break;\n                }\n\n                if\
    \ (factorization % i == 0) {\n                    isPrime = false;\n         \
    \           break;\n                }\n            }\n\n            if (isPrime)\
    \ {\n                primeFactors.Add(factorization);\n                factorization\
    \ = 1;\n            } else {\n                factorization /= 2;\n          \
    \  }\n        }\n\n        return primeFactors;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo43ofm3y.cs(28,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpo43ofm3y.cs(50,9): warning CS0162: Unreachable code detected

    '
  timestamp: 1659976333
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long>\
    \ result = new List<long>();\n        long largest = n;\n        while (n > 1)\
    \ {\n            while (n % 2 == 0) n /= 2;\n            while (n % 3 == 0) n\
    \ /= 3;\n            while (n % 5 == 0) n /= 5;\n            while (n % 7 == 0)\
    \ n /= 7;\n            while (n % 11 == 0) n /= 11;\n            result.Add(n);\n\
    \            largest = n;\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a802f1b286904b778a26d361646f2cc7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a802f1b286904b778a26d361646f2cc7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: None
  timestamp: 1659976338
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>>\
    \ Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n\
    \    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L,\
    \ (long)7L}))\n    public static List<long> Factorize(long n) {\n        // Generate\
    \ factorization for all numbers from 2 to sqrt(n)\n        // We don't need to\
    \ check numbers from 1 to n since they are degenerate from 2\n        List<long>\
    \ factors = new List<long>();\n        long factor = 1;\n        long limit =\
    \ (long)Math.Sqrt(n);\n        for (long i = 2; i <= limit; i++) {\n         \
    \   if (n % i == 0) {\n                factor *= i;\n                while (n\
    \ % i == 0) {\n                    n /= i;\n                }\n              \
    \  factors.Add(factor);\n                factor = 1;\n            }\n        }\n\
    \        // Return factors in order from smallest to largest\n        return factors;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
    \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
    \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4423527920f4586bbf4349a2828f8a8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4423527920f4586bbf4349a2828f8a8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976333
