{
  "name": "mbpp_131_reverse_vowels",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a shthon function to reverse only the vowels of a given string (where y is not a vowel).\n#\n# $1 is a string\nreverse_vowels() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_131_reverse_vowels.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    reverse_vowels \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python\") = \"Python\" ]]\n    [[ $(candidate \"USA\") = \"ASU\" ]]\n    [[ $(candidate \"ab\") = \"ab\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local string=\"$1\"\n    local vowels=\"$(echo \"$string\" | grep -o '[aeiouAEIOU]' | rev)\"\n    local i=0\n    echo \"$string\" | sed 's/[aeiouAEIOU]/\\\n&/g' | sed \"s/[aeiouAEIOU]/${vowels:$i:1}/g; $((i++))\"",
    "    local str=\"$1\"\n    local vowels=\"$(echo \"$str\" | grep -o '[aeiouAEIOU]' | tr -d '\\n')\"\n    local reversed_vowels=\"$(echo \"$vowels\" | rev | tr -d '\\n')\"\n    local i=0\n    echo \"$str\" | sed \"s/[aeiouAEIOU]/$(echo \"$reversed_vowels\" | cut -c $((++i)))/g\"",
    "    local vowels=\"aeiouAEIOU\"\n    local string=\"$1\"\n    local result=\"\"\n    local i=0\n    local j=$(( ${#string} - 1 ))\n    local tmp\n\n    while [ $i -le $j ]; do\n        if [[ \"${vowels}\" =~ \"${string:$i:1}\" ]]; then\n            while [ $j -ge $i ]; do\n                if [[ \"${vowels}\" =~ \"${string:$j:1}\" ]]; then\n                    tmp=\"${string:$i:1}\"\n                    result=\"${result}${string:$j:1}\"\n                    string=\"${string:0:$i}${string:$(( $i + 1 ))}\"\n                    string=\"${string:0:$j}${tmp}${string:$(( $j + 1 ))}\"\n                    break\n                fi\n                j=$(( $j - 1 ))\n            done\n        else\n            result=\"${result}${string:$i:1}\"\n        fi\n        i=$(( $i + 1 ))\n    done\n\n    echo \"$result\"",
    "    local string=\"$1\"\n    local vowels=\"$(echo \"$string\" | grep -o '[aeiouAEIOU]' | rev)\"\n    local i=0\n    local result=\"\"\n\n    for (( j=0; j<${#string}; j++ )); do\n        if [[ \"${string:$j:1}\" =~ [aeiouAEIOU] ]]; then\n            result+=\"${vowels:$i:1}\"\n            ((i++))\n        else\n            result+=\"${string:$j:1}\"\n        fi\n    done\n\n    echo \"$result\"",
    "    local string=\"$1\"\n    local vowels=\"$(echo \"$string\" | grep -o '[aeiouAEIOU]' | rev)\"\n    local i=0\n    echo \"$string\" | sed -e \"s/[aeiouAEIOU]/$(echo \"$vowels\" | cut -c $((++i))-)/g\"",
    "    local string=$1\n    local vowels=$(echo $string | sed -e 's/[^aeiou]//g')\n    local reversed_vowels=$(echo $vowels | rev)\n    echo $string | sed -e \"s/[aeiou]/$reversed_vowels/g\"",
    "    local string=\"$1\"\n    local vowels=$(echo \"$string\" | grep -o \"[aeiou]\" | tr -d \"\\n\")\n    local reversed_vowels=$(echo \"$vowels\" | rev)\n    echo \"$string\" | sed \"s/[aeiou]/$reversed_vowels/g\"",
    "  local string=$1\n  local vowels=\"aeiouAEIOU\"\n  local reversed_vowels=\"\"\n  local i=0\n\n  for (( i=0; i<${#string}; i++ )); do\n    if [[ \"${vowels}\" =~ \"${string:$i:1}\" ]]; then\n      reversed_vowels=\"${string:$i:1}${reversed_vowels}\"\n    fi\n  done\n\n  local j=0\n  local result=\"\"\n\n  for (( i=0; i<${#string}; i++ )); do\n    if [[ \"${vowels}\" =~ \"${string:$i:1}\" ]]; then\n      result=\"${result}${reversed_vowels:$j:1}\"\n      j=$(( j + 1 ))\n    else\n      result=\"${result}${string:$i:1}\"\n    fi\n  done\n\n  echo \"${result}\"",
    "    # TODO: implement this function\n    # Hint: use the following command to get the vowels of a string:\n    # echo $1 | sed -e 's/[^aeiou]//g'\n    #\n    # Hint: use the following command to reverse a string:\n    # echo $1 | rev\n    #\n    # Hint: use the following command to replace a string with another string:\n    # echo $1 | sed -e \"s/$2/$3/g\"\n    #\n    # Hint: use the following command to get the length of a string:\n    # echo $1 | wc -c\n    #\n    # Hint: use the following command to get the nth character of a string:\n    # echo $1 | cut -c$n\n    #\n    # Hint: use the following command to get the first n characters of a string:\n    # echo $1 | cut -c1-$n\n    #\n    # Hint: use the following command to get the last n characters of a string:\n    # echo $1 | cut -c$((`echo $1 | wc -c` - $n + 1))-\n    #\n    # Hint: use the following command to get the substring of a string:\n    # echo $1 | cut -c$n-$m\n    #\n    # Hint: use the following command to get the index of a character in a string:\n    # echo $1 | grep -b -o $2 | cut -d: -f1\n    #\n    # Hint: use the following command to get the index of the last occurrence of a character in a string:\n    # echo $1 | grep -b -o $2 | cut -d: -f1 | tail -n1\n    #\n    # Hint: use the following command to get the index of the first occurrence of a character in a string:\n    # echo $1 | grep -b -o $2 | cut -d: -f1 | head -n1\n    #\n    # Hint: use the following command to get the index of the last occurrence of a substring in a string:\n    # echo $1 | grep -b -o $2 | cut -d: -",
    "    local string=$1\n    local vowels=\"aeiouAEIOU\"\n    local -a vowel_array=()\n    local -a string_array=()\n    local -i i=0\n    local -i j=0\n    local -i len=0\n    local -i len_vowels=0\n    local -i len_string=0\n    local -i k=0\n\n    len_vowels=${#vowels}\n    len_string=${#string}\n\n    for ((i=0; i<len_string; i++)); do\n        string_array[i]=${string:$i:1}\n        for ((j=0; j<len_vowels; j++)); do\n            if [[ ${string_array[i]} == ${vowels:$j:1} ]]; then\n                vowel_array[k]=${string_array[i]}\n                ((k++))\n            fi\n        done\n    done\n\n    len=${#vowel_array[@]}\n    for ((i=0; i<len_string; i++)); do\n        for ((j=0; j<len_vowels; j++)); do\n            if [[ ${string_array[i]} == ${vowels:$j:1} ]]; then\n                string_array[i]=${vowel_array[len-1]}\n                ((len--))\n            fi\n        done\n    done\n\n    echo \"${string_array[@]}\"",
    "    local string=$1\n    local vowels=\"aeiouAEIOU\"\n    local new_string=\"\"\n    local i=0\n    local j=0\n    local tmp=\"\"\n    local tmp_char=\"\"\n    local tmp_vowel=\"\"\n\n    for ((i=0; i<${#string}; i++)); do\n        tmp_char=${string:$i:1}\n        if [[ $vowels =~ $tmp_char ]]; then\n            tmp=\"$tmp_char$tmp\"\n        fi\n    done\n\n    for ((i=0; i<${#string}; i++)); do\n        tmp_char=${string:$i:1}\n        if [[ $vowels =~ $tmp_char ]]; then\n            tmp_vowel=${tmp:$j:1}\n            new_string=\"$new_string$tmp_vowel\"\n            j=$((j+1))\n        else\n            new_string=\"$new_string$tmp_char\"\n        fi\n    done\n\n    echo $new_string",
    "    local s=$1\n    local vowels=\"aeiou\"\n    local rev_vowels=\"uoiea\"\n    local rev_s=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n\n    for (( i=0; i<${#s}; i++ )); do\n        if [[ ${s:$i:1} =~ [$vowels] ]]; then\n            (( j++ ))\n            rev_s=\"${s:$i:1}$rev_s\"\n        else\n            rev_s=\"${s:$i:1}$rev_s\"\n        fi\n    done\n\n    for (( k=0; k<${#s}; k++ )); do\n        if [[ ${s:$k:1} =~ [$vowels] ]]; then\n            (( l++ ))\n            echo -n \"${rev_s:$l:1}\"\n        else\n            echo -n \"${s:$k:1}\"\n        fi\n    done\n    echo",
    "    local -a vowels=('a' 'e' 'i' 'o' 'u' 'A' 'E' 'I' 'O' 'U')\n    local -a vowels_in_string=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i len=0\n    local -i len_vowels=0\n    local -i len_vowels_in_string=0\n    local -i len_vowels_in_string_minus_one=0\n    local -i len_minus_one=0\n    local -i len_vowels_minus_one=0\n    local -i len_vowels_in_string_minus_one=0\n    local -i len_vowels_in_string_minus_one=0\n    local -i len_vowels_in_string_minus_one=0\n    local -i len_vowels_in_string_minus_one=0\n    local -i len_vowels_in_string_minus_one=0\n    local -i len_vowels_in_string_minus_one=0\n    local -i len_vowels_in_string_minus_one=0\n    local -i len_vowels_in_string_minus_one=0\n    local -i len_vowels_in_string_minus_one=0\n    local -i len_vowels_in_string_minus_one=0\n    local -i len_vowels_in_string_minus_one=0\n    local -i len_vowels_in_string_minus_one=0\n    local -i len_vowels_in_string_minus_one=0\n    local -i len_vowels_in_string_minus_one=0\n    local -i len_vowels_in_string_minus_one=0\n    local -i len_vowels_in_string_minus_one=0\n    local -i len_vowels_in_string_minus_one=0\n    local -i len_vowels_in_",
    "    local -a vowels=(a e i o u)\n    local -a string_array=()\n    local -a vowels_array=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i length=0\n    local -i length_vowels=0\n    local -i length_string=0\n    local -i length_string_array=0\n    local -i length_vowels_array=0\n    local -i length_vowels_array_minus_one=0\n    local -i length_string_array_minus_one=0\n    local -i length_vowels_array_minus_two=0\n    local -i length_string_array_minus_two=0\n    local -i length_vowels_array_minus_three=0\n    local -i length_string_array_minus_three=0\n    local -i length_vowels_array_minus_four=0\n    local -i length_string_array_minus_four=0\n    local -i length_vowels_array_minus_five=0\n    local -i length_string_array_minus_five=0\n    local -i length_vowels_array_minus_six=0\n    local -i length_string_array_minus_six=0\n    local -i length_vowels_array_minus_seven=0\n    local -i length_string_array_minus_seven=0\n    local -i length_vowels_array_minus_eight=0\n    local -i length_string_array_minus_eight=0\n    local -i",
    "    local str=\"$1\"\n    local vowels=\"$(echo \"$str\" | grep -o '[aeiouAEIOU]' | tr -d '\\n')\"\n    local reversed=\"$(echo \"$vowels\" | rev)\"\n    local i=0\n    echo \"$str\" | sed -r \"s/[aeiouAEIOU]/$(echo \"$reversed\" | cut -c \"$((++i))\")/g\"",
    "  local string=$1\n  local vowels=\"aeiouAEIOU\"\n  local result=\"\"\n  local i=0\n  local j=0\n  local len=${#string}\n  local vowel_stack=()\n\n  for ((i=0; i<len; i++)); do\n    if [[ \"${vowels}\" =~ \"${string:$i:1}\" ]]; then\n      vowel_stack+=(\"${string:$i:1}\")\n    fi\n  done\n\n  for ((i=0; i<len; i++)); do\n    if [[ \"${vowels}\" =~ \"${string:$i:1}\" ]]; then\n      result+=\"${vowel_stack[$((len-i-1))]}\"\n    else\n      result+=\"${string:$i:1}\"\n    fi\n  done\n\n  echo \"${result}\"",
    "    local string=\"$1\"\n    local vowels=\"$(echo \"$string\" | grep -o '[aeiouAEIOU]' | tr -d '\\n')\"\n    local reversed_vowels=\"$(echo \"$vowels\" | rev)\"\n    local i=0\n    echo \"$string\" | sed \"s/[aeiouAEIOU]/$(echo \"$reversed_vowels\" | cut -c \"$((++i))\")/g\"",
    "    local string=\"$1\"\n    local vowels=\"aAeEiIoOuU\"\n    local reversed_vowels=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j",
    "  local str=\"$1\"\n  local vowels=\"aAeEiIoOuU\"\n  local new_str=\"\"\n  local i=0\n  local j=0\n  local len=${#str}\n  local vowel_positions=()\n  local vowel_values=()\n\n  # find the positions of the vowels\n  for (( i=0; i<len; i++ )); do\n    for (( j=0; j<${#vowels}; j++ )); do\n      if [[ \"${str:$i:1}\" == \"${vowels:$j:1}\" ]]; then\n        vowel_positions+=($i)\n        vowel_values+=(${str:$i:1})\n        break\n      fi\n    done\n  done\n\n  # build the new string\n  for (( i=0; i<len; i++ )); do\n    if [[ \" ${vowel_positions[@]} \" =~ \" ${i} \" ]]; then\n      new_str+=\"${vowel_values[${#vowel_values[@]}-1]}\"\n      unset vowel_values[${#vowel_values[@]}-1]\n    else\n      new_str+=\"${str:$i:1}\"\n    fi\n  done\n\n  echo \"$new_str\"",
    "    local str=\"$1\"\n    local vowels=\"aeiouAEIOU\"\n    local i=0\n    local j=${#str}\n    local tmp\n\n    while (( i < j )); do\n        if [[ \"${vowels}\" =~ \"${str:i:1}\" ]]; then\n            while [[ ! \"${vowels}\" =~ \"${str:j:1}\" ]]; do\n                (( j-- ))\n            done\n            tmp=\"${str:i:1}\"\n            str=\"${str:0:i}${str:j:1}${str:i+1:j-i-1}${tmp}${str:j+1}\"\n            (( j-- ))\n        fi\n        (( i++ ))\n    done\n\n    echo \"$str\""
  ]
}