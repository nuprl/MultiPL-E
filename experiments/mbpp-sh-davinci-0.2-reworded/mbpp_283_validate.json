{
  "name": "mbpp_283_validate",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a shthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n#\n# $1 is an integer\nvalidate() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    validate \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1234\") = \"true\" ]]\n    [[ $(candidate \"51241\") = \"false\" ]]\n    [[ $(candidate \"321\") = \"true\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  local num=$1\n  local digit\n  local count\n  for (( digit=0; digit<=9; digit++ )); do\n    count=$(echo \"$num\" | grep -o \"$digit\" | wc -l)\n    if [[ $count -gt $digit ]]; then\n      return 1\n    fi\n  done\n  return 0",
    "  local -i num=$1\n  local -i digit\n  local -i freq\n  local -i result=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n  local -i h=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n  local -i mmm=0\n  local -i n",
    "    local n=$1\n    local digit\n    local freq\n    local freq_max=0\n    local freq_max_digit\n    local freq_max_digit_count=0\n    local freq_max_digit_count_max=0\n    local freq_max_digit_count_max_digit\n\n    for digit in {0..9}; do\n        freq=$(echo $n | tr -d -c $digit | wc -c)\n        if [ $freq -gt $freq_max ]; then\n            freq_max=$freq\n            freq_max_digit=$digit\n        fi\n        if [ $freq -eq $digit ]; then\n            freq_max_digit_count=$((freq_max_digit_count + 1))\n            if [ $freq_max_digit_count -gt $freq_max_digit_count_max ]; then\n                freq_max_digit_count_max=$freq_max_digit_count\n                freq_max_digit_count_max_digit=$digit\n            fi\n        else\n            freq_max_digit_count=0\n        fi\n    done\n\n    if [ $freq_max -gt $freq_max_digit ]; then\n        echo \"Frequency of $freq_max_digit is $freq_max, which is greater than $freq_max_digit\"\n        return 1\n    fi\n    if [ $freq_max_digit_count_max -eq 0 ]; then\n        echo \"No digit has frequency equal to itself\"\n        return 1\n    fi\n    echo \"Frequency of $freq_max_digit_count_max_digit is $freq_max_digit_count_max, which is equal to $freq_max_digit_count_max_digit\"\n    return 0",
    "    local num=$1\n    local digits=()\n    local freq=()\n    local digit\n    local i\n    local j\n    local k\n    local count\n\n    # Extract digits into an array\n    while [ $num -gt 0 ]; do\n        digits+=($((num % 10)))\n        num=$((num / 10))\n    done\n\n    # Sort digits\n    for ((i = 0; i < ${#digits[@]}; i++)); do\n        for ((j = i + 1; j < ${#digits[@]}; j++)); do\n            if [ ${digits[i]} -gt ${digits[j]} ]; then\n                digit=${digits[i]}\n                digits[i]=${digits[j]}\n                digits[j]=$digit\n            fi\n        done\n    done\n\n    # Count frequency of each digit\n    for ((i = 0; i < ${#digits[@]}; i++)); do\n        count=0\n        for ((j = 0; j < ${#digits[@]}; j++)); do\n            if [ ${digits[i]} -eq ${digits[j]} ]; then\n                count=$((count + 1))\n            fi\n        done\n        freq+=($count)\n    done\n\n    # Compare frequency with digit\n    for ((i = 0; i < ${#digits[@]}; i++)); do\n        if [ ${freq[i]} -gt ${digits[i]} ]; then\n            return 1\n        fi\n    done\n\n    return 0",
    "  local integer=$1\n  local digits=$(echo $integer | grep -o .)\n  local digit\n  local count\n  for digit in $digits; do\n    count=$(echo $digits | grep -o $digit | wc -l)\n    if [ $count -gt $digit ]; then\n      return 1\n    fi\n  done\n  return 0",
    "    local number=$1\n    local digit\n    local frequency\n    for digit in {0..9}; do\n        frequency=$(echo \"$number\" | grep -o \"$digit\" | wc -l)\n        if [[ $frequency -gt $digit ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"",
    "    local -i n=$1\n    local -i digit\n    local -i freq\n    local -i max_freq\n    local -i max_digit\n    local -i i\n    local -i j\n    local -i k\n\n    for (( i=0; i<10; i++ )); do\n        freq=0\n        for (( j=0; j<${#n}; j++ )); do\n            digit=${n:$j:1}\n            if (( digit == i )); then\n                (( freq++ ))\n            fi\n        done\n        if (( freq > i )); then\n            return 1\n        fi\n    done\n\n    return 0",
    "    local -i number=$1\n    local -i digit\n    local -i frequency\n    local -i max_frequency=0\n    local -i max_digit=0\n    local -i max_frequency_digit=0\n    local -i max_frequency_digit_frequency=0\n\n    while (( number > 0 )); do\n        digit=$(( number % 10 ))\n        frequency=$(echo \"$1\" | grep -o \"$digit\" | wc -l)\n        if (( frequency > max_frequency )); then\n            max_frequency=$frequency\n            max_digit=$digit\n        fi\n        if (( frequency == max_frequency_digit_frequency )); then\n            max_frequency_digit=$digit\n        fi\n        if (( frequency > max_frequency_digit_frequency )); then\n            max_frequency_digit_frequency=$frequency\n            max_frequency_digit=$digit\n        fi\n        number=$(( number / 10 ))\n    done\n\n    if (( max_frequency > max_digit )); then\n        echo \"Invalid\"\n    else\n        echo \"Valid\"\n    fi",
    "  local -i n=$1\n  local -i digit\n  local -i freq\n  local -i max_freq=0\n  local -i max_digit=0\n\n  while (( n > 0 )); do\n    (( digit = n % 10 ))\n    (( n /= 10 ))\n    (( freq = n % 10 ))\n    (( n /= 10 ))\n    if (( freq > digit )); then\n      return 1\n    fi\n    if (( freq > max_freq )); then\n      (( max_freq = freq ))\n      (( max_digit = digit ))\n    elif (( freq == max_freq && digit > max_digit )); then\n      (( max_digit = digit ))\n    fi\n  }\n\n  if (( max_freq == 0 )); then\n    return 1\n  fi\n\n  return 0",
    "    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n",
    "    local n=$1\n    local digit\n    local freq\n    local -A freq_map\n    while [ $n -gt 0 ]; do\n        digit=$((n % 10))\n        freq_map[$digit]=$((freq_map[$digit] + 1))\n        n=$((n / 10))\n    done\n    for digit in ${!freq_map[@]}; do\n        freq=${freq_map[$digit]}\n        if [ $freq -gt $digit ]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -i num=$1\n    local -i digit\n    local -i freq\n    local -i count\n    local -i result=1\n    local -i i\n\n    for ((i=0; i<10; i++))\n    do\n        count=0\n        while ((num > 0))\n        do\n            digit=$((num % 10))\n            if ((digit == i))\n            then\n                ((count++))\n            fi\n            num=$((num / 10))\n        done\n        if ((count > i))\n        then\n            result=0\n            break\n        fi\n        num=$1\n    done\n\n    echo $result",
    "  local -i num=$1\n  local -i digit\n  local -i freq\n  local -i i\n  local -i j\n  local -i k\n  local -i l\n  local -i m\n  local -i n\n  local -i o\n  local -i p\n  local -i q\n  local -i r\n  local -i s\n  local -i t\n  local -i u\n  local -i v\n  local -i w\n  local -i x\n  local -i y\n  local -i z\n  local -i aa\n  local -i bb\n  local -i cc\n  local -i dd\n  local -i ee\n  local -i ff\n  local -i gg\n  local -i hh\n  local -i ii\n  local -i jj\n  local -i kk\n  local -i ll\n  local -i mm\n  local -i nn\n  local -i oo\n  local -i pp\n  local -i qq\n  local -i rr\n  local -i ss\n  local -i tt\n  local -i uu\n  local -i vv\n  local -i ww\n  local -i xx\n  local -i yy\n  local -i zz\n  local -i aaa\n  local -i bbb\n  local -i ccc\n  local -i ddd\n  local -i eee\n  local -i fff\n  local -i ggg\n  local -i hhh\n  local -i iii\n  local -i jjj\n  local -i kkk\n  local -i lll\n  local -i mmm\n  local -i nnn\n  local -i ooo\n  local -i ppp\n  local -i qqq\n  local -i rrr\n  local -i sss\n  local -i ttt\n  local -i uuu\n  local -i vvv\n  local -i www\n  local -i xxx\n  local -i yyy\n  local -i zzz\n  local -i aaaa\n  local -i bbbb\n  local -i cccc\n  local -i ddd",
    "    local -i n=$1\n    local -i digit\n    local -i freq\n    local -i max_freq=0\n    local -i digit_freq=0\n    local -i digit_freq_array=()\n    local -i digit_array=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n\n    while [ $n -gt 0 ]; do\n        digit=$(( n % 10 ))\n        n=$(( n / 10 ))\n        case $digit in\n            0)\n                (( digit_array[i++] = digit ))\n                (( digit_freq_array[i++] = ++z ))\n                ;;\n            1)\n                (( digit_array[i++] = digit ))\n                (( digit_freq_array[i++] = ++y ))\n                ;;\n            2)\n                (( digit_array[i++] = digit ))\n                (( digit_freq_array[i++] = ++x ))\n                ;;\n            3)\n                (( digit_array[i++] = digit ))\n                (( digit_freq_array[i++] = ++w ))\n                ;;\n            4)\n                (( digit_array[i++] = digit ))\n                (( digit_freq_array[i++] = ++v ))\n                ;;\n            5)\n                (( digit_array[i++] = digit ))\n                (( digit_freq_array[i++] = ++u ))\n                ;;\n            6)\n                (( digit_array[i++] = digit ))\n                (( digit_freq_array[i++] = ++t ))\n                ;;\n            7)\n                (( digit",
    "  # Write your code here\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n",
    "  local -i num=$1\n  local -i digit\n  local -i count\n  local -i result=1\n  while (( num > 0 )); do\n    digit=$(( num % 10 ))\n    num=$(( num / 10 ))\n    count=0\n    while (( num > 0 )); do\n      if (( num % 10 == digit )); then\n        (( count++ ))\n      fi\n      num=$(( num / 10 ))\n    done\n    if (( count > digit )); then\n      result=0\n      break\n    fi\n  done\n  echo $result",
    "    local -i num=$1\n    local -i digit\n    local -i freq\n    local -i max_freq=0\n    local -i max_digit=0\n    local -i max_digit_freq=0\n    local -i max_digit_freq_digit=0\n    local -i max_digit_freq_freq=0\n    local -i max_digit_freq_digit_freq=0\n    local -i max_digit_freq_digit_freq_digit=0\n    local -i max_digit_freq_digit_freq_freq=0\n    local -i max_digit_freq_digit_freq_digit_freq=0\n    local -i max_digit_freq_digit_freq_digit_freq_digit=0\n    local -i max_digit_freq_digit_freq_digit_freq_freq=0\n    local -i max_digit_freq_digit_freq_digit_freq_digit_freq=0\n    local -i max_digit_freq_digit_freq_digit_freq_digit_freq_digit=0\n    local -i max_digit_freq_digit_freq_digit_freq_digit_freq_freq=0\n    local -i max_digit_freq_digit_freq_digit_freq_digit_freq_digit_freq=0\n    local -i max_digit_freq_digit_freq_digit_freq_digit_freq_digit_freq_digit=0\n    local -i max_digit_freq_digit_freq_digit_freq_digit_freq_digit_freq_freq=0\n    local -i max_digit_freq_digit_freq_digit_freq_digit_freq_digit_freq_digit_freq=0\n    local -i max_digit_freq_digit_freq_digit_freq_digit_freq_digit_freq_digit_freq_digit=0\n    local -i max_digit_freq_digit_freq_digit_freq_",
    "  local -i num=$1\n  local -i digit=0\n  local -i freq=0\n  local -i freq_digit=0\n  local -i freq_digit_count=0\n  local -i freq_digit_freq=0\n  local -i freq_digit_freq_count=0\n  local -i freq_digit_freq_digit=0\n  local -i freq_digit_freq_digit_count=0\n  local -i freq_digit_freq_digit_freq=0\n  local -i freq_digit_freq_digit_freq_count=0\n  local -i freq_digit_freq_digit_freq_digit=0\n  local -i freq_digit_freq_digit_freq_digit_count=0\n  local -i freq_digit_freq_digit_freq_digit_freq=0\n  local -i freq_digit_freq_digit_freq_digit_freq_count=0\n  local -i freq_digit_freq_digit_freq_digit_freq_digit=0\n  local -i freq_digit_freq_digit_freq_digit_freq_digit_count=0\n  local -i freq_digit_freq_digit_freq_digit_freq_digit_freq=0\n  local -i freq_digit_freq_digit_freq_digit_freq_digit_freq_count=0\n  local -i freq_digit_freq_digit_freq_digit_freq_digit_freq_digit=0\n  local -i freq_digit_freq_digit_freq_digit_freq_digit_freq_digit_count=0\n  local -i freq_digit_freq_digit_freq_digit_freq_digit_freq_digit_freq=0\n  local -i freq_digit_freq_digit_freq_digit_freq_digit_freq_digit_freq_count=0\n  local -i freq_digit_freq_digit_freq",
    "    local num=$1\n    local digits=()\n    local freq=()\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local digit=0\n    local freq_digit=0\n    local valid=1\n\n    while [ $num -gt 0 ]; do\n        digit=$((num % 10))\n        num=$((num / 10))\n        digits[$i]=$digit\n        ((i++))\n    done\n\n    for ((j=0; j<${#digits[@]}; j++)); do\n        digit=${digits[$j]}\n        case $digit in\n            0)\n                ((freq[0]++))\n                ;;\n            1)\n                ((freq[1]++))\n                ;;\n            2)\n                ((freq[2]++))\n                ;;\n            3)\n                ((freq[3]++))\n                ;;\n            4)\n                ((freq[4]++))\n                ;;\n            5)\n                ((freq[5]++))\n                ;;\n            6)\n                ((freq[6]++))\n                ;;\n            7)\n                ((freq[7]++))\n                ;;\n            8)\n                ((freq[8]++))\n                ;;\n            9)\n                ((freq[9]++))\n                ;;\n        esac\n    done\n\n    for ((k=0; k<${#freq[@]}; k++)); do\n        freq_digit=${freq[$k]}\n        if [ $freq_digit -gt $k ]; then\n            valid=0\n            break\n        fi\n    done\n\n    echo $valid",
    "  local num=$1\n  local digits=($(echo $num | sed 's/./& /g'))\n  local counts=($(echo ${digits[@]} | tr ' ' '\\n' | sort | uniq -c | awk '{print $1}'))\n  local digits_sorted=($(echo ${digits[@]} | tr ' ' '\\n' | sort -n))\n  local digits_sorted_uniq=($(echo ${digits_sorted[@]} | tr ' ' '\\n' | uniq))\n\n  for i in ${!digits_sorted_uniq[@]}; do\n    if [[ ${counts[$i]} -gt ${digits_sorted_uniq[$i]} ]]; then\n      echo \"false\"\n      return\n    fi\n  done\n  echo \"true\""
  ]
}