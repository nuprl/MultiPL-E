{
  "name": "mbpp_296_get_Inv_Count",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_296_get_Inv_Count.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i j inv_count=0\n\n    for ((i=0; i<len-1; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((inv_count++))\n            fi\n        done\n    done\n\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -a arr_sorted=(\"$@\")\n    local -i inv_count=0\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n\n    # sort the array\n    for ((i=0; i<n-1; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr_sorted[i]} -gt ${arr_sorted[j]} ]]; then\n                # swap\n                local tmp=${arr_sorted[i]}\n                arr_sorted[i]=${arr_sorted[j]}\n                arr_sorted[j]=$tmp\n            fi\n        done\n    done\n\n    # count inversions\n    for ((i=0; i<n-1; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                inv_count=$((inv_count+1))\n            fi\n        done\n    done\n\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n  local -a arr=(\"$@\")\n  local -i i j inv_count=0\n  for ((i=0; i<${#arr[@]}; i++)); do\n    for ((j=i+1; j<${#arr[@]}; j++)); do\n      if ((arr[i] > arr[j])); then\n        ((inv_count++))\n      fi\n    done\n  done\n  echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -n arr=$1\n    local -i i j count=0\n    for (( i = 0; i < ${#arr[@]} - 1; i++ )); do\n        for (( j = i + 1; j < ${#arr[@]}; j++ )); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                (( count++ ))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmped_yvuor.sh: line 6: local: `1 20 6 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i i j count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[$i]} -gt ${arr[$j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local n=${#arr[@]}\n    local inv_count=0\n    for ((i=0; i<n-1; i++))\n    do\n        for ((j=i+1; j<n; j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i i j count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local arr=($1)\n    local len=${#arr[@]}\n    local inv_count=0\n    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n        do\n            if [ ${arr[i]} -gt ${arr[j]} ]\n            then\n                inv_count=$((inv_count + 1))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr\n    local -i i j k inv_count=0\n    arr=($1)\n    for ((i=0; i<${#arr[@]}; i++))\n    do\n        for ((j=i+1; j<${#arr[@]}; j++))\n        do\n            if ((${arr[i]} > ${arr[j]}))\n            then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n  local -a arr=(\"$@\")\n  local -i i j count=0\n  for ((i=0; i<${#arr[@]}; i++)); do\n    for ((j=i+1; j<${#arr[@]}; j++)); do\n      if ((arr[i] > arr[j])); then\n        ((count++))\n      fi\n    done\n  done\n  echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i len=${#arr[@]}\n    local -i i j count=0\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if ((arr[i] > arr[j])); then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i j inv_count=0\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if ((arr[i] > arr[j])); then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i j count=0\n    for ((i=0; i<n-1; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if (( arr[i] > arr[j] )); then\n                (( count++ ))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n  local -a arr=($1)\n  local -i n=${#arr[@]}\n  local -i i=0\n  local -i j=0\n  local -i inv_count=0\n\n  for ((i=0; i<n-1; i++))\n  do\n    for ((j=i+1; j<n; j++))\n    do\n      if ((${arr[i]} > ${arr[j]}))\n      then\n        ((inv_count++))\n      fi\n    done\n  done\n\n  echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i count=0\n    local -i i=0\n    local -i j=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr\n    local -i i j k\n    local -i inv_count=0\n    arr=($1)\n    for ((i=0;i<${#arr[@]};i++))\n    do\n        for ((j=i+1;j<${#arr[@]};j++))\n        do\n            if ((arr[i]>arr[j]))\n            then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i j count=0\n\n    for ((i=0; i<len-1; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            (( arr[i] > arr[j] )) && ((count++))\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local arr=($1)\n    local len=${#arr[@]}\n    local inv_count=0\n    for ((i=0; i<len-1; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -n arr=$1\n    local -i inv_count=0\n    for ((i=0; i<${#arr[@]}; i++))\n    do\n        for ((j=i+1; j<${#arr[@]}; j++))\n        do\n            if [[ ${arr[$i]} -gt ${arr[$j]} ]]\n            then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpjl6rrib_.sh: line 6: local: `1 20 6 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i i j count=0\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if ((arr[i] > arr[j])); then\n                ((count++))\n            fi\n        done\n    done\n\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i j count=0\n\n    for ((i=0; i<n-1; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            (( ${arr[i]} > ${arr[j]} )) && ((count++))\n        done\n    done\n\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local len=${#arr[@]}\n    local inv_count=0\n    for ((i=0; i<len-1; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                inv_count=$((inv_count+1))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i j count=0\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if (( arr[i] > arr[j] )); then\n                (( count++ ))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i count=0\n    local -i i j\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i i j count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if ((arr[i] > arr[j])); then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n\tlocal -a arr=(\"$@\")\n\tlocal -i count=0\n\tfor ((i=0; i<${#arr[@]}; i++)); do\n\t\tfor ((j=i+1; j<${#arr[@]}; j++)); do\n\t\t\tif (( arr[i] > arr[j] )); then\n\t\t\t\t(( count++ ))\n\t\t\tfi\n\t\tdone\n\tdone\n\techo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i i j inv_count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if ((arr[i] > arr[j])); then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo \"$inv_count\"\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i j k inv_count=0\n\n    for ((i=0; i<n-1; i++))\n    do\n        for ((j=i+1; j<n; j++))\n        do\n            if ((arr[i] > arr[j]))\n            then\n                ((inv_count++))\n            fi\n        done\n    done\n\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i n=${#arr[@]}\n    local -i i j inv_count=0\n\n    for ((i=0; i<n-1; i++))\n    do\n        for ((j=i+1; j<n; j++))\n        do\n            if (( arr[i] > arr[j] ))\n            then\n                (( inv_count++ ))\n            fi\n        done\n    done\n\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i j inv_count=0\n\n    for ((i=0; i<n-1; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if (( arr[i] > arr[j] )); then\n                (( inv_count++ ))\n            fi\n        done\n    done\n\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i inv_count=0\n    local -i i j\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n  local arr=($1)\n  local count=0\n  for ((i=0; i<${#arr[@]}; i++)); do\n    for ((j=i+1; j<${#arr[@]}; j++)); do\n      if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n        count=$((count+1))\n      fi\n    done\n  done\n  echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i i j count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr\n    local -i i j k n\n    local -i inv_count=0\n\n    arr=($1)\n    n=${#arr[@]}\n    for ((i=0; i<n-1; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i arr_len=${#arr[@]}\n    local -i i j inv_count=0\n    for ((i=0; i<arr_len; i++)); do\n        for ((j=i+1; j<arr_len; j++)); do\n            (( ${arr[i]} > ${arr[j]} )) && (( inv_count++ ))\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i i j count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if (( arr[i] > arr[j] )); then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr\n    local -i i j k\n    local -i inv_count=0\n    arr=($1)\n    for ((i=0; i<${#arr[@]}; i++))\n    do\n        for ((j=i+1; j<${#arr[@]}; j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i j k inv_count=0\n    for ((i=0; i<n-1; i++))\n    do\n        for ((j=i+1; j<n; j++))\n        do\n            if (( arr[i] > arr[j] ))\n            then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i i j count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if ((arr[i] > arr[j])); then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i len=${#arr[@]}\n    local -i i j count=0\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if ((arr[i] > arr[j])); then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n  local -a arr\n  local -i i j count\n  arr=($1)\n  count=0\n  for ((i=0; i<${#arr[@]}; i++)); do\n    for ((j=i+1; j<${#arr[@]}; j++)); do\n      if ((arr[i] > arr[j])); then\n        ((count++))\n      fi\n    done\n  done\n  echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i count=0\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i j=0\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n  local -a arr=(\"$@\")\n  local -i i j inv_count=0\n  for ((i=0; i<${#arr[@]}; i++)); do\n    for ((j=i+1; j<${#arr[@]}; j++)); do\n      if (( arr[i] > arr[j] )); then\n        (( inv_count++ ))\n      fi\n    done\n  done\n  echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr\n    IFS=' ' read -r -a arr <<< \"$1\"\n    local -i count=0\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    for ((i=0; i<n-1; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr\n    arr=($1)\n    local len=${#arr[@]}\n    local count=0\n    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n                count=$((count+1))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i count=0\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n\n    for ((i=0; i<n-1; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i i j inv_count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i n=${#arr[@]}\n    local -i i j count=0\n    for ((i=0; i<n-1; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if ((arr[i] > arr[j])); then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i j inv_count=0\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i count=0\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n\n    for ((i=0; i<n; i++))\n    do\n        for ((j=i+1; j<n; j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n                ((count++))\n            fi\n        done\n    done\n\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i i=0 j=0 inv_count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i count=0\n    local -i i=0\n    local -i j=0\n    local -i len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n  local array=($1)\n  local inv_count=0\n  local i=0\n  local j=0\n  local len=${#array[@]}\n  for ((i=0; i<len; i++)); do\n    for ((j=i+1; j<len; j++)); do\n      if [[ ${array[i]} -gt ${array[j]} ]]; then\n        ((inv_count++))\n      fi\n    done\n  done\n  echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i i j inv_count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if (( arr[i] > arr[j] )); then\n                (( inv_count++ ))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i len=${#arr[@]}\n    local -i i j count=0\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if ((arr[i] > arr[j])); then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n  local -a arr\n  local -i i j k count\n  arr=($1)\n  count=0\n  for ((i=0; i<${#arr[@]}; i++))\n  do\n    for ((j=i+1; j<${#arr[@]}; j++))\n    do\n      if [[ ${arr[i]} -gt ${arr[j]} ]]\n      then\n        ((count++))\n      fi\n    done\n  done\n  echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i i j inv_count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if ((arr[i] > arr[j])); then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local inv_count=0\n    local i j\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if ((${arr[i]} > ${arr[j]})); then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local count=0\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        for (( j=i+1; j<${#arr[@]}; j++ )); do\n            if [[ ${arr[$i]} -gt ${arr[$j]} ]]; then\n                (( count++ ))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n  local -a arr=($1)\n  local -i n=${#arr[@]}\n  local -i i j count=0\n  for ((i=0; i<n-1; i++)); do\n    for ((j=i+1; j<n; j++)); do\n      (( arr[i] > arr[j] )) && (( count++ ))\n    done\n  done\n  echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr\n    local -i i j k\n    local -i inv_count=0\n\n    arr=($1)\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((inv_count++))\n            fi\n        done\n    done\n\n    echo \"$inv_count\"\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i count=0\n    local -i i=0\n    local -i j=0\n    local -i len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if (( arr[i] > arr[j] )); then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -i i j k\n    local -a A\n    local -i inv_count=0\n    A=($1)\n    for ((i=0; i<${#A[@]}; i++)); do\n        for ((j=i+1; j<${#A[@]}; j++)); do\n            if [[ ${A[$i]} -gt ${A[$j]} ]]; then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i i j count=0\n    for (( i=0; i<${#arr[@]}-1; i++ )); do\n        for (( j=i+1; j<${#arr[@]}; j++ )); do\n            if (( arr[i] > arr[j] )); then\n                (( count++ ))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i j count=0\n    for ((i=0; i<n-1; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if ((arr[i] > arr[j])); then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n  local -a arr=($1)\n  local -i i j inv_count=0\n  for ((i=0; i<${#arr[@]}; i++)); do\n    for ((j=i+1; j<${#arr[@]}; j++)); do\n      if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n        ((inv_count++))\n      fi\n    done\n  done\n  echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n  local -a arr\n  local -i i j k\n  local -i inv_count=0\n  arr=($1)\n  for ((i=0; i<${#arr[@]}; i++))\n  do\n    for ((j=i+1; j<${#arr[@]}; j++))\n    do\n      if [[ ${arr[i]} -gt ${arr[j]} ]]\n      then\n        ((inv_count++))\n      fi\n    done\n  done\n  echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n  local -a array=($1)\n  local -i count=0\n  local -i i=0\n  local -i j=0\n  local -i len=${#array[@]}\n\n  for ((i=0; i<len; i++)); do\n    for ((j=i+1; j<len; j++)); do\n      if [[ ${array[i]} -gt ${array[j]} ]]; then\n        ((count++))\n      fi\n    done\n  done\n\n  echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i i j count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if ((arr[i] > arr[j])); then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i j k inv_count=0\n    for ((i=0;i<n-1;i++))\n    do\n        for ((j=i+1;j<n;j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i i j inv_count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n  local -a arr\n  local -i i j k\n  local -i inv_count=0\n  arr=($1)\n  for ((i=0; i<${#arr[@]}; i++))\n  do\n    for ((j=i+1; j<${#arr[@]}; j++))\n    do\n      if ((arr[i] > arr[j]))\n      then\n        ((inv_count++))\n      fi\n    done\n  done\n  echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr\n    local -i i j k n\n    local -i inv_count=0\n    arr=($1)\n    n=${#arr[@]}\n    for ((i=0; i<n; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i count=0\n    local -i i=0\n    local -i j=0\n    local -i len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i n=${#arr[@]}\n    local -i i j count=0\n    for ((i=0; i<n-1; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if ((arr[i] > arr[j])); then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i i j count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i len=${#arr[@]}\n    local -i i j count=0\n    for (( i=0; i<len; i++ )); do\n        for (( j=i+1; j<len; j++ )); do\n            if (( arr[i] > arr[j] )); then\n                (( count++ ))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n  local -a arr=($1)\n  local -i n=${#arr[@]}\n  local -i i=0\n  local -i j=0\n  local -i inv_count=0\n  for ((i=0; i<n-1; i++))\n  do\n    for ((j=i+1; j<n; j++))\n    do\n      if ((arr[i] > arr[j]))\n      then\n        ((inv_count++))\n      fi\n    done\n  done\n  echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n  local -i inv_count=0\n  local -i i=0\n  local -i j=0\n  local -i len=0\n  local -a arr=()\n  local -i tmp=0\n\n  arr=($1)\n  len=${#arr[@]}\n\n  for ((i=0; i<len; i++)); do\n    for ((j=i+1; j<len; j++)); do\n      if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n        ((inv_count++))\n      fi\n    done\n  done\n\n  echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i j count=0\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr\n    local i j k\n    local count=0\n    arr=($1)\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i count=0\n    local -i i j\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if (( arr[i] > arr[j] )); then\n                (( count++ ))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i i j inv_count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if (( arr[i] > arr[j] )); then\n                (( inv_count++ ))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -a arr_sorted=($(echo ${arr[@]} | tr ' ' '\\n' | sort -n))\n    local -a arr_sorted_rev=($(echo ${arr_sorted[@]} | tr ' ' '\\n' | tac))\n    local -a arr_sorted_rev_str=($(echo ${arr_sorted_rev[@]} | tr ' ' '\\n' | tr '\\n' ' '))\n    local -a arr_sorted_str=($(echo ${arr_sorted[@]} | tr ' ' '\\n' | tr '\\n' ' '))\n    local -a arr_str=($(echo ${arr[@]} | tr ' ' '\\n' | tr '\\n' ' '))\n    local -i count=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i inv_count=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i temp=0\n    local -i l=0\n    local -i m=0\n    local -i r=0\n    local -i n1=0\n    local -i n2=0\n    local -i L=0\n    local -i R=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i temp=0\n    local -i l=0\n    local -i m=0\n    local -i r=0\n    local -i n1=0\n    local -i n2=0\n    local -i L=0\n    local -i R=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i temp=0\n    local -i l=0\n    local -i m=0\n    local -i r=0\n    local -i n1=0\n    local -i n2=0\n    local -i L=0\n    local -i R=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i temp=0\n    local -i l=0\n    local -i m=0\n    local -i r=0\n    local -i n1=0\n    local -i n2=0\n    local -i L=0\n    local -i R=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i temp=0\n    local -i l=0\n    local -i m=0\n    local -i r=0\n    local -i n1=0\n    local -i n2=0\n    local -i L=0\n    local -i R=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i=0\n    local -i j=0\n    local -i inv_count=0\n    for ((i=0; i<n-1; i++))\n    do\n        for ((j=i+1; j<n; j++))\n        do\n            if (( arr[i] > arr[j] ))\n            then\n                (( inv_count++ ))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local arr=($1)\n    local len=${#arr[@]}\n    local inv_count=0\n    for (( i=0; i<len-1; i++ ))\n    do\n        for (( j=i+1; j<len; j++ ))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n                (( inv_count++ ))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i count=0\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    for ((i=0; i<n; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n  local -a arr=(\"$@\")\n  local -i n=${#arr[@]}\n  local -i i j count\n  for ((i=0; i<n-1; i++)); do\n    for ((j=i+1; j<n; j++)); do\n      if ((arr[i] > arr[j])); then\n        ((count++))\n      fi\n    done\n  done\n  echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i j inv_count=0\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n  local -i i j k\n  local -i inv_count=0\n  local -a arr\n  local -a temp\n  arr=($1)\n  for ((i=0; i<${#arr[@]}; i++))\n  do\n    for ((j=i+1; j<${#arr[@]}; j++))\n    do\n      if [[ ${arr[$i]} -gt ${arr[$j]} ]]\n      then\n        inv_count=$((inv_count+1))\n      fi\n    done\n  done\n  echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr\n    local -i i j count\n    arr=($1)\n    count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if ((arr[i] > arr[j])); then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n\tlocal -a arr\n\tIFS=' ' read -r -a arr <<< \"$1\"\n\tlocal -i count=0\n\tfor ((i=0; i<${#arr[@]}; i++)); do\n\t\tfor ((j=i+1; j<${#arr[@]}; j++)); do\n\t\t\tif ((arr[i] > arr[j])); then\n\t\t\t\t((count++))\n\t\t\tfi\n\t\tdone\n\tdone\n\techo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n  local -a arr=(\"$@\")\n  local -i len=${#arr[@]}\n  local -i i j count=0\n  for ((i=0; i<len; i++)); do\n    for ((j=i+1; j<len; j++)); do\n      if (( arr[i] > arr[j] )); then\n        ((count++))\n      fi\n    done\n  done\n  echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n  local -a arr\n  arr=($1)\n  local n=${#arr[@]}\n  local inv_count=0\n  for ((i=0; i<n-1; i++))\n  do\n    for ((j=i+1; j<n; j++))\n    do\n      if [[ ${arr[i]} -gt ${arr[j]} ]]\n      then\n        inv_count=$((inv_count+1))\n      fi\n    done\n  done\n  echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i j inv_count=0\n    for ((i=0; i<n-1; i++))\n    do\n        for ((j=i+1; j<n; j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i i j count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if ((arr[i] > arr[j])); then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i n=${#arr[@]}\n    local -i i j count\n    for ((i=0; i<n; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i j inv_count=0\n    for ((i=0; i<len-1; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if ((arr[i] > arr[j])); then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i i j inv_count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if (( arr[i] > arr[j] )); then\n                (( inv_count++ ))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i count=0\n    local -i i=0\n    local -i j=0\n    local -i len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n  local -a array=($1)\n  local -i count=0\n  local -i i=0\n  local -i j=0\n  for ((i=0; i<${#array[@]}; i++)); do\n    for ((j=i+1; j<${#array[@]}; j++)); do\n      if [[ ${array[i]} -gt ${array[j]} ]]; then\n        ((count++))\n      fi\n    done\n  done\n  echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i count=0\n    local -i i j\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if (( arr[i] > arr[j] )); then\n                (( count++ ))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i j inv_count=0\n\n    for ((i=0; i<len-1; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if ((arr[i] > arr[j])); then\n                ((inv_count++))\n            fi\n        done\n    done\n\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i i j count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i i j count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n  local -a arr=($1)\n  local -i i j count=0\n  for ((i=0; i<${#arr[@]}; i++)); do\n    for ((j=i+1; j<${#arr[@]}; j++)); do\n      (( arr[i] > arr[j] )) && (( count++ ))\n    done\n  done\n  echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i len=${#arr[@]}\n    local -i i j inv_count=0\n\n    for ((i=0; i<len-1; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if ((arr[i] > arr[j])); then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr\n    arr=($1)\n    local i j count\n    count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a array=($1)\n    local -i i j count=0\n    for ((i=0; i<${#array[@]}; i++)); do\n        for ((j=i+1; j<${#array[@]}; j++)); do\n            ((array[i] > array[j])) && ((count++))\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -n arr=$1\n    local -i i j k count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp0s1eg344.sh: line 6: local: `1 20 6 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i count=0\n\n    for (( i = 0; i < ${#arr[@]}; i++ )); do\n        for (( j = i + 1; j < ${#arr[@]}; j++ )); do\n            if (( arr[i] > arr[j] )); then\n                (( count++ ))\n            fi\n        done\n    done\n\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr\n    local -i i j k inv_count=0\n    arr=($1)\n    for ((i=0; i<${#arr[@]}; i++))\n    do\n        for ((j=i+1; j<${#arr[@]}; j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n  local -a arr=($1)\n  local -i i j count=0\n  for ((i=0; i<${#arr[@]}; i++)); do\n    for ((j=i+1; j<${#arr[@]}; j++)); do\n      (( arr[i] > arr[j] )) && (( count++ ))\n    done\n  done\n  echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local arr=($1)\n    local len=${#arr[@]}\n    local count=0\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[$i]} -gt ${arr[$j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i j count=0\n    for ((i=0; i<len-1; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i i j inv_count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if ((${arr[i]} > ${arr[j]})); then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr\n    local -i i j k\n    local -i inv_count=0\n    arr=($1)\n    for ((i=0; i<${#arr[@]}; i++))\n    do\n        for ((j=i+1; j<${#arr[@]}; j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n  local -a arr=($1)\n  local -i len=${#arr[@]}\n  local -i i j inv_count=0\n  for ((i=0; i<len; i++)); do\n    for ((j=i+1; j<len; j++)); do\n      ((arr[i] > arr[j])) && ((inv_count++))\n    done\n  done\n  echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i count=0\n    local -i i j\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n  local -a arr\n  local -i i j k\n  local -i inv_count=0\n  local -i n=0\n  local -i arr_len=0\n  local -i arr_len_1=0\n  local -i arr_len_2=0\n  local -i arr_len_3=0\n  local -i arr_len_4=0\n  local -i arr_len_5=0\n  local -i arr_len_6=0\n  local -i arr_len_7=0\n  local -i arr_len_8=0\n  local -i arr_len_9=0\n  local -i arr_len_10=0\n  local -i arr_len_11=0\n  local -i arr_len_12=0\n  local -i arr_len_13=0\n  local -i arr_len_14=0\n  local -i arr_len_15=0\n  local -i arr_len_16=0\n  local -i arr_len_17=0\n  local -i arr_len_18=0\n  local -i arr_len_19=0\n  local -i arr_len_20=0\n  local -i arr_len_21=0\n  local -i arr_len_22=0\n  local -i arr_len_23=0\n  local -i arr_len_24=0\n  local -i arr_len_25=0\n  local -i arr_len_26=0\n  local -i arr_len_27=0\n  local -i arr_len_28=0\n  local -i arr_len_29=0\n  local -i arr_len_30=0\n  local -i arr_len_31=0\n  local -i arr_len_32=0\n  local -i arr_len_33=0\n  local -i arr_len_34=0\n  local -i arr_len_35=0\n  local -i arr_len_36=0\n  local -i arr_len_37=0\n  local -i arr_len_38=0\n  local -i arr_len_39=0\n \n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i i j count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i len=${#arr[@]}\n    local -i i j count=0\n    for ((i=0; i<len-1; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if ((arr[i] > arr[j])); then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i i j count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if ((arr[i] > arr[j])); then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n  local -a arr=($1)\n  local -i len=${#arr[@]}\n  local -i i j count=0\n  for ((i=0; i<len-1; i++)); do\n    for ((j=i+1; j<len; j++)); do\n      if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n        ((count++))\n      fi\n    done\n  done\n  echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i i j inv_count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if ((arr[i] > arr[j])); then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -n arr=$1\n    local -i len=${#arr[@]}\n    local -i i j count=0\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if (( arr[i] > arr[j] )); then\n                (( count++ ))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp_q4xlcyf.sh: line 6: local: `1 20 6 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i j count=0\n    for ((i=0; i<n-1; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if ((arr[i] > arr[j])); then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i i j count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            (( arr[i] > arr[j] )) && (( count++ ))\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local arr=($1)\n    local len=${#arr[@]}\n    local count=0\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if ((arr[i] > arr[j])); then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr\n    local -i i j k inv_count=0\n    arr=($1)\n    for ((i=0; i<${#arr[@]}; i++))\n    do\n        for ((j=i+1; j<${#arr[@]}; j++))\n        do\n            if [[ ${arr[$i]} -gt ${arr[$j]} ]]\n            then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n  local -a arr=($1)\n  local -i i j count=0\n  for ((i=0; i<${#arr[@]}; i++)); do\n    for ((j=i+1; j<${#arr[@]}; j++)); do\n      if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n        ((count++))\n      fi\n    done\n  done\n  echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i i j count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            (( arr[i] > arr[j] )) && (( count++ ))\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i count=0\n    local -i i j\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if ((arr[i] > arr[j])); then\n                ((count++))\n            fi\n        done\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i i j count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if (( arr[i] > arr[j] )); then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i i j count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if ((arr[i] > arr[j])); then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i len=${#arr[@]}\n    local -i i j inv_count=0\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n  local -a arr=(\"$@\")\n  local -i i j count=0\n  for ((i=0; i<${#arr[@]}; i++)); do\n    for ((j=i+1; j<${#arr[@]}; j++)); do\n      if ((arr[i] > arr[j])); then\n        ((count++))\n      fi\n    done\n  done\n  echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr\n    local -i i j k count\n    arr=($1)\n    count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n  local -a arr=(\"$@\")\n  local -i len=${#arr[@]}\n  local -i i=0 j=0 inv_count=0\n  for ((i=0; i<len; i++)); do\n    for ((j=i+1; j<len; j++)); do\n      if ((arr[i] > arr[j])); then\n        ((inv_count++))\n      fi\n    done\n  done\n  echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i j inv_count=0\n\n    for ((i=0; i<len-1; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((inv_count++))\n            fi\n        done\n    done\n\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i count=0\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n\n    for ((i=0; i<n; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if ((arr[i] > arr[j])); then\n                count=$((count+1))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i j count=0\n    for ((i=0; i<len-1; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -n arr=$1\n    local -i i j count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmptj8wkmd1.sh: line 6: local: `1 20 6 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -i count=0\n    local -a arr=($1)\n    local -i i j\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if ((arr[i] > arr[j])); then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i n=${#arr[@]}\n    local -i i=0 j=0 inv_count=0\n    for ((i=0; i<n-1; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i n=${#arr[@]}\n    local -i i j count=0\n    for ((i=0; i<n-1; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if ((arr[i] > arr[j])); then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i count=0\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    for ((i=0; i<n; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n  local -a arr=($1)\n  local -i len=${#arr[@]}\n  local -i i j inv_count=0\n\n  for ((i=0; i<len-1; i++)); do\n    for ((j=i+1; j<len; j++)); do\n      if (( arr[i] > arr[j] )); then\n        (( inv_count++ ))\n      fi\n    done\n  done\n\n  echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr\n    local -i i j k inv_count=0\n    arr=($1)\n    for ((i=0; i<${#arr[@]}; i++))\n    do\n        for ((j=i+1; j<${#arr[@]}; j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr\n    arr=($1)\n    local -i i j count\n    count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n  local -a arr=(\"$@\")\n  local -i len=${#arr[@]}\n  local -i i j inv_count=0\n  for ((i=0; i<len-1; i++)); do\n    for ((j=i+1; j<len; j++)); do\n      (( arr[i] > arr[j] )) && (( inv_count++ ))\n    done\n  done\n  echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i i j count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if ((arr[i] > arr[j])); then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n  local -a arr=(\"$@\")\n  local -i i j inv_count=0\n  for ((i=0; i<${#arr[@]}; i++)); do\n    for ((j=i+1; j<${#arr[@]}; j++)); do\n      if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n        ((inv_count++))\n      fi\n    done\n  done\n  echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i count=0\n    local -i i=0\n    local -i j=0\n    local -i len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i n=${#arr[@]}\n    local -i i j count=0\n    for ((i=0; i<n-1; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i i j inv_count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                (( inv_count++ ))\n            fi\n        done\n    done\n    echo \"$inv_count\"\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr\n    local -i i j k count\n    arr=($1)\n    count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if (( arr[i] > arr[j] )); then\n                (( count++ ))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n  local -a arr=($1)\n  local -i len=${#arr[@]}\n  local -i i=0\n  local -i j=0\n  local -i inv_count=0\n  for ((i=0; i<len; i++)); do\n    for ((j=i+1; j<len; j++)); do\n      if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n        ((inv_count++))\n      fi\n    done\n  done\n  echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i count=0\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    for ((i=0; i<n; i++))\n    do\n        for ((j=i+1; j<n; j++))\n        do\n            if [[ ${arr[$i]} -gt ${arr[$j]} ]]\n            then\n                count=$((count+1))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i j=0\n    local -i inv_count=0\n    for ((i=0; i<len-1; i++))\n    do\n        for ((j=i+1; j<len; j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i count=0\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    for ((i=0; i<n; i++))\n    do\n        for ((j=i+1; j<n; j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i n=${#arr[@]}\n    local -i i j count=0\n    for ((i=0; i<n-1; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr\n    local -i i j k\n    local -i inv_count=0\n    arr=($1)\n    for ((i=0; i<${#arr[@]}; i++))\n    do\n        for ((j=i+1; j<${#arr[@]}; j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i count=0\n    local -i i=0\n    local -i j=0\n    local -i len=${#arr[@]}\n\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if ((arr[i] > arr[j])); then\n                ((count++))\n            fi\n        done\n    done\n\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a array=(\"$@\")\n    local -i count=0\n    local -i i=0\n    local -i j=0\n    local -i len=${#array[@]}\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if (( array[i] > array[j] )); then\n                (( count++ ))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i i j count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            ((arr[i] > arr[j])) && ((count++))\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr\n    local -i i j k\n    local -i count=0\n    arr=($1)\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i j count=0\n    for ((i=0; i<len-1; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr\n    local -i i j k\n    local -i count=0\n    arr=($1)\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i i=0 j=0 inv_count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a array=(\"$@\")\n    local -i n=${#array[@]}\n    local -i i j count=0\n    for ((i=0; i<n-1; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${array[i]} -gt ${array[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i i j count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n\tlocal arr=($1)\n\tlocal n=${#arr[@]}\n\tlocal i=0\n\tlocal j=0\n\tlocal count=0\n\tfor ((i=0; i<n-1; i++))\n\tdo\n\t\tfor ((j=i+1; j<n; j++))\n\t\tdo\n\t\t\tif [[ ${arr[$i]} -gt ${arr[$j]} ]]\n\t\t\tthen\n\t\t\t\tcount=$((count+1))\n\t\t\tfi\n\t\tdone\n\tdone\n\techo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i i j inv_count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if (( arr[i] > arr[j] )); then\n                (( inv_count++ ))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a array=($1)\n    local -i count=0\n    local -i i=0\n    local -i j=0\n    local -i len=${#array[@]}\n\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${array[i]} -gt ${array[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -n arr=$1\n    local -i len=${#arr[@]}\n    local -i i j count=0\n\n    for ((i=0; i<len-1; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if (( arr[i] > arr[j] )); then\n                (( count++ ))\n            fi\n        done\n    done\n\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpl2bo6nwj.sh: line 6: local: `1 20 6 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr\n    local -i i j k\n    local -i inv_count=0\n    arr=($1)\n    for ((i=0; i<${#arr[@]}; i++))\n    do\n        for ((j=i+1; j<${#arr[@]}; j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i i j count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if (( arr[i] > arr[j] )); then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i i j count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if ((arr[i] > arr[j])); then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i j=0\n    local -i count=0\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                count=$((count+1))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i i j inv_count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i inv_count=0\n    local -i i j\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if ((arr[i] > arr[j])); then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n  local -a arr=($1)\n  local -i len=${#arr[@]}\n  local -i i j inv_count=0\n\n  for ((i=0; i<len-1; i++)); do\n    for ((j=i+1; j<len; j++)); do\n      if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n        ((inv_count++))\n      fi\n    done\n  done\n\n  echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n  local -i inv_count=0\n  local -i i\n  local -i j\n  local -a arr=($1)\n  local -i len=${#arr[@]}\n  for ((i=0; i<len; i++)); do\n    for ((j=i+1; j<len; j++)); do\n      if ((arr[i] > arr[j])); then\n        ((inv_count++))\n      fi\n    done\n  done\n  echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i i j count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if (( arr[i] > arr[j] )); then\n                (( count++ ))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n  local -a arr=(\"$@\")\n  local -i i j count=0\n  for ((i=0; i<${#arr[@]}; i++)); do\n    for ((j=i+1; j<${#arr[@]}; j++)); do\n      if ((arr[i] > arr[j])); then\n        ((count++))\n      fi\n    done\n  done\n  echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i len=${#arr[@]}\n    local -i i j inv_count=0\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if (( arr[i] > arr[j] )); then\n                (( inv_count++ ))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local arr=($1)\n    local n=${#arr[@]}\n    local i=0\n    local j=0\n    local count=0\n    for ((i=0; i<n; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i count=0\n    local -i i=0\n    local -i j=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if ((arr[i] > arr[j])); then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n  local -a arr=(\"$@\")\n  local -i i j count=0\n  for ((i=0; i<${#arr[@]}; i++)); do\n    for ((j=i+1; j<${#arr[@]}; j++)); do\n      if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n        ((count++))\n      fi\n    done\n  done\n  echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i j count=0\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if ((arr[i] > arr[j])); then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i j inv_count=0\n    for ((i=0; i<len-1; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if ((${arr[i]} > ${arr[j]})); then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -i count=0\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i count=0\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n\n    for ((i=0; i<n; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i i j count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if ((arr[i] > arr[j])); then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190777,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i inv_count=0\n    for ((i=0; i<n-1; i++))\n    do\n        for ((j=i+1; j<n; j++))\n        do\n            if ((arr[i] > arr[j]))\n            then\n                ((inv_count++))\n            fi\n        done\n    done\n    echo $inv_count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n    local -a arr=(\"$@\")\n    local -i len=${#arr[@]}\n    local -i i j count=0\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test",
      "timestamp": 1667190778,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}