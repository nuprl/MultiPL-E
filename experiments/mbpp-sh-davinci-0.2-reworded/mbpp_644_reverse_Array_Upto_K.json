{
  "name": "mbpp_644_reverse_Array_Upto_K",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a shthon function to reverse an array upto a given position.\n#\n# $1 is a space-separated list\n# $2 is an integer\nreverse_Array_Upto_K() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_644_reverse_Array_Upto_K.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    reverse_Array_Upto_K \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6\" \"4\") = \"4 3 2 1 5 6\" ]]\n    [[ $(candidate \"4 5 6 7\" \"2\") = \"5 4 6 7\" ]]\n    [[ $(candidate \"9 8 7 6 5\" \"3\") = \"7 8 9 6 5\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  local -a array=(\"${!1}\")\n  local k=$2\n  local -a reversed_array=()\n  local i=0\n  local j=0\n  for ((i=0; i<k; i++)); do\n    reversed_array[$i]=${array[$((k-i-1))]}\n  done\n  for ((j=k; j<${#array[@]}; j++)); do\n    reversed_array[$j]=${array[$j]}\n  done\n  echo \"${reversed_array[@]}\"",
    "    local -n arr=\"$1\"\n    local k=\"$2\"\n    local i=0\n    local j=0\n    local temp=0\n    for ((i=0; i<k; i++))\n    do\n        for ((j=i; j<k; j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n                temp=${arr[i]}\n                arr[i]=${arr[j]}\n                arr[j]=$temp\n            fi\n        done\n    done",
    "    local array=($1)\n    local k=$2\n    local i=0\n    local j=0\n    local temp=0\n    local length=${#array[@]}\n    if [ $k -gt $length ]\n    then\n        echo \"k is greater than length of array\"\n        return\n    fi\n    for (( i=0; i<k/2; i++ ))\n    do\n        temp=${array[i]}\n        array[i]=${array[k-i-1]}\n        array[k-i-1]=$temp\n    done\n    echo ${array[@]}",
    "    local -a array=(\"$@\")\n    local -i k=\"$2\"\n    local -i i=0\n    local -i j=0\n    local -i n=${#array[@]}\n\n    if (( k >= n )); then\n        echo \"Error: k must be less than the length of the array\"\n        return 1\n    fi\n\n    while (( i < k )); do\n        j=$(( n - i - 1 ))\n        if (( i < j )); then\n            array[i]=$(( array[i] + array[j] ))\n            array[j]=$(( array[i] - array[j] ))\n            array[i]=$(( array[i] - array[j] ))\n        fi\n        (( i++ ))\n    done\n\n    echo \"${array[@]}\"",
    "    local -a array=(\"$@\")\n    local -i k=$2\n    local -i i=0\n    local -i j=$k\n    local -i tmp=0\n    while (( i < j )) ; do\n        tmp=${array[i]}\n        array[i]=${array[j]}\n        array[j]=$tmp\n        (( i++, j-- ))\n    done\n    echo \"${array[@]}\"",
    "    local -n array=$1\n    local k=$2\n    local i=0\n    local j=$((k-1))\n    while ((i < j)); do\n        local temp=${array[i]}\n        array[i]=${array[j]}\n        array[j]=$temp\n        ((i++))\n        ((j--))\n    done",
    "    local -a array=(\"$@\")\n    local -i k=${array[-1]}\n    local -i i=0\n    local -i j=${#array[@]}-2\n\n    while (( i < j )); do\n        if (( i < k )); then\n            local tmp=${array[i]}\n            array[i]=${array[j]}\n            array[j]=$tmp\n        fi\n        (( i++ ))\n        (( j-- ))\n    done\n    echo \"${array[@]}\"",
    "    local -a array\n    local -i k\n    local -i i\n    local -i j\n    local -i len\n    local -i mid\n    local -i tmp\n\n    array=($1)\n    k=$2\n    len=${#array[@]}\n    mid=$((k / 2))\n\n    for ((i=0; i<mid; i++)); do\n        j=$((k - i - 1))\n        tmp=${array[i]}\n        array[i]=${array[j]}\n        array[j]=$tmp\n    done\n\n    echo \"${array[@]}\"",
    "    local -a array=(\"${!1}\")\n    local k=$2\n    local -i i=0\n    local -i j=0\n    local -i n=${#array[@]}\n    local -i mid=0\n    local -i temp=0\n\n    if [ $k -gt $n ]; then\n        k=$n\n    fi\n\n    mid=$((k/2))\n\n    for ((i=0; i<mid; i++)); do\n        j=$((k-i-1))\n        temp=${array[i]}\n        array[i]=${array[j]}\n        array[j]=$temp\n    done\n\n    echo \"${array[@]}\"",
    "    local -a array=(\"$@\")\n    local k=\"$2\"\n    local -a reversed_Array=()\n    local i=0\n    local j=0\n    local length=${#array[@]}\n    if [[ $k -gt $length ]]; then\n        k=$length\n    fi\n    for ((i=0; i<k; i++)); do\n        reversed_Array[j]=${array[$((k-i-1))]}\n        j=$((j+1))\n    done\n    for ((i=k; i<length; i++)); do\n        reversed_Array[j]=${array[i]}\n        j=$((j+1))\n    done\n    echo \"${reversed_Array[@]}\"",
    "    local -a array\n    local -i k\n    IFS=' ' read -r -a array <<< \"$1\"\n    k=$2\n    for ((i=0; i<k; i++)) {\n        echo -n \"${array[k-i-1]} \"\n    }\n    echo",
    "    local -a array\n    local -i k\n    IFS=' ' read -r -a array <<< \"$1\"\n    k=$2\n    for ((i=k; i>=0; i--)); do\n        echo -n \"${array[i]} \"\n    done\n    echo",
    "    local -a array=(\"$@\")\n    local -i k=$2\n    local -i i=0\n    local -i j=$((k-1))\n    local -i n=${#array[@]}\n    local -i temp\n    while (( i < j )); do\n        temp=${array[i]}\n        array[i]=${array[j]}\n        array[j]=$temp\n        ((i++))\n        ((j--))\n    done\n    echo \"${array[@]}\"",
    "    local -n arr=$1\n    local k=$2\n    local i=0\n    local j=$((k-1))\n    while [[ $i -lt $j ]]; do\n        local tmp=${arr[$i]}\n        arr[$i]=${arr[$j]}\n        arr[$j]=$tmp\n        i=$((i+1))\n        j=$((j-1))\n    done",
    "    local -a array=(\"$@\")\n    local -i k=$2\n    local -i i=0\n    local -i j=k\n    local -i temp=0\n\n    while (( i < j ))\n    do\n        temp=${array[i]}\n        array[i]=${array[j]}\n        array[j]=$temp\n        (( i++ ))\n        (( j-- ))\n    done\n\n    echo \"${array[@]}\"",
    "    local -a array=(\"$@\")\n    local -i k=$2\n    local -i i=0\n    local -i j=0\n    local -i len=${#array[@]}\n    local -i mid=$((k/2))\n    local -i temp=0\n    if [[ $k -gt $len ]]; then\n        echo \"K is greater than the length of the array\"\n        exit 1\n    fi\n    for ((i=0; i<mid; i++)); do\n        temp=${array[i]}\n        array[i]=${array[k-i-1]}\n        array[k-i-1]=$temp\n    done\n    echo \"${array[@]}\"",
    "    local -a array=(\"$@\")\n    local -i k=$2\n    local -i i=0\n    local -i j=${#array[@]}\n    local -i mid=$((k / 2))\n    local -i tmp\n    if ((k > j)); then\n        k=$j\n    fi\n    while ((i < mid)); do\n        tmp=${array[i]}\n        array[i]=${array[k - i - 1]}\n        array[k - i - 1]=$tmp\n        ((i++))\n    done\n    echo \"${array[@]}\"",
    "    local -a array=(\"$@\")\n    local -i k=$2\n    local -i i=0\n    local -i j=0\n    local -i n=${#array[@]}\n    local -i m=$((k/2))\n    local -i p=$((k%2))\n    local -i t=0\n    if [ $k -gt $n ]; then\n        k=$n\n    fi\n    while [ $i -lt $m ]; do\n        t=${array[$i]}\n        array[$i]=${array[$((k-1-i))]}\n        array[$((k-1-i))]=$t\n        ((i++))\n    done\n    if [ $p -eq 1 ]; then\n        ((i++))\n    fi\n    while [ $i -lt $n ]; do\n        array[$j]=${array[$i]}\n        ((i++))\n        ((j++))\n    done\n    array[$j]=${array[$i]}\n    echo \"${array[@]}\"",
    "    local -a array=(\"$@\")\n    local -i k=$2\n    local -i i=0\n    local -i j=$((k-1))\n    local -i temp\n\n    while ((i < j))\n    do\n        temp=${array[i]}\n        array[i]=${array[j]}\n        array[j]=$temp\n        ((i++))\n        ((j--))\n    done\n\n    echo \"${array[@]}\"",
    "    local array=($1)\n    local k=$2\n    local i=0\n    local j=$((k-1))\n    local temp=0\n    while [ $i -lt $j ]\n    do\n        temp=${array[$i]}\n        array[$i]=${array[$j]}\n        array[$j]=$temp\n        ((i++))\n        ((j--))\n    done\n    echo ${array[@]}"
  ]
}