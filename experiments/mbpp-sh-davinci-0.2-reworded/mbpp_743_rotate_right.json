{
  "name": "mbpp_743_rotate_right",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/shthon-program-right-rotate-list-n/\n#\n# $1 is a space-separated list\n# $2 is an integer\nrotate_right() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    rotate_right \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\" \"3\") = \"8 9 10 1 2 3 4 5 6 7\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\" \"2\") = \"9 10 1 2 3 4 5 6 7 8\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\" \"5\") = \"6 7 8 9 10 1 2 3 4 5\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a array\n    local i\n    local j\n\n    # Convert the list to an array\n    array=($list)\n\n    # Rotate the array\n    for ((i=0; i<n; i++)); do\n        # Copy the last element to a temporary variable\n        local temp=\"${array[-1]}\"\n\n        # Shift all elements to the right\n        for ((j=${#array[@]}-1; j>0; j--)); do\n            array[j]=\"${array[j-1]}\"\n        done\n\n        # Copy the temporary variable to the first element\n        array[0]=\"$temp\"\n    done\n\n    # Convert the array back to a list\n    echo \"${array[*]}\"",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local list_len=${#list}\n    local n_mod=$((n % list_len))\n\n    if [ $n_mod -eq 0 ]; then\n        echo \"$list\"\n    else\n        local first_part=\"${list: -n_mod}\"\n        local second_part=\"${list: 0: list_len - n_mod}\"\n        echo \"$first_part $second_part\"\n    fi",
    "    local list=$1\n    local n=$2\n    local i=0\n    local new_list=\"\"\n    for item in $list; do\n        if [ $i -ge $n ]; then\n            new_list=\"$new_list $item\"\n        fi\n        i=$((i+1))\n    done\n    for item in $list; do\n        if [ $i -lt $n ]; then\n            new_list=\"$new_list $item\"\n        fi\n        i=$((i+1))\n    done\n    echo $new_list",
    "    local list=$1\n    local n=$2\n    local list_len=${#list}\n    local new_list=\"\"\n    local i=0\n\n    while [ $i -lt $list_len ]; do\n        new_list=\"$new_list ${list:$(((i + n) % list_len)):1}\"\n        i=$((i + 1))\n    done\n\n    echo \"$new_list\"",
    "    local list=$1\n    local n=$2\n    local len=${#list}\n    local i=0\n    local result=\"\"\n\n    while [ $i -lt $len ]; do\n        result=\"$result ${list:$(((i + n) % len)):1}\"\n        i=$((i + 1))\n    done\n\n    echo \"$result\"",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local list_len=\"$(echo \"$list\" | wc -w)\"\n    local new_list=\"\"\n    local i=0\n    while [ $i -lt $list_len ]; do\n        local item=\"$(echo \"$list\" | cut -d' ' -f$((i+1)))\"\n        new_list=\"$new_list $(echo \"$list\" | cut -d' ' -f$(((i+n)%list_len+1))) $item\"\n        i=$((i+1))\n    done\n    echo \"$new_list\"",
    "  local list=\"$1\"\n  local n=\"$2\"\n  local -a array=()\n  local -a rotated=()\n  local i=0\n  local j=0\n  local k=0\n  local len=0\n\n  # Convert the list to an array\n  array=($list)\n  len=${#array[@]}\n\n  # Rotate the array\n  for ((i=0; i<n; i++)); do\n    rotated[$i]=${array[$((len-n+i))]}\n  done\n  for ((i=n; i<len; i++)); do\n    rotated[$i]=${array[$((i-n))]}\n  done\n\n  # Convert the rotated array back to a list\n  for ((i=0; i<len; i++)); do\n    if [ $i -eq 0 ]; then\n      list=\"${rotated[$i]}\"\n    else\n      list=\"$list ${rotated[$i]}\"\n    fi\n  done\n\n  echo \"$list\"",
    "    local list=$1\n    local n=$2\n    local len=$(echo $list | wc -w)\n    local i=0\n    local new_list=''\n    while [ $i -lt $len ]; do\n        local index=$((($i + $n) % $len))\n        new_list=\"$new_list $(echo $list | cut -d' ' -f$((index + 1)))\"\n        i=$((i + 1))\n    done\n    echo $new_list",
    "    local list=$1\n    local n=$2\n    local len=$(echo $list | wc -w)\n    local i=0\n    local j=0\n    local tmp_list=\"\"\n    local tmp=\"\"\n    while [ $i -lt $n ]; do\n        tmp=$(echo $list | cut -d \" \" -f $len)\n        tmp_list=\"$tmp_list $tmp\"\n        list=$(echo $list | cut -d \" \" -f 1-$(($len-1)))\n        i=$(($i+1))\n    done\n    echo $list $tmp_list",
    "  local list=\"$1\"\n  local n=\"$2\"\n  local list_len=\"$(echo \"$list\" | wc -w)\"\n  local new_list=\"\"\n  local i=0\n  while [ $i -lt $list_len ]; do\n    local item=\"$(echo \"$list\" | cut -d' ' -f$((i + 1)))\"\n    local new_index=$(((i + n) % list_len))\n    new_list=\"$new_list $(echo \"$list\" | cut -d' ' -f$((new_index + 1)))\"\n    i=$((i + 1))\n  done\n  echo \"$new_list\"",
    "    local list=$1\n    local n=$2\n    local list_len=$(echo $list | wc -w)\n    local new_list=$(echo $list | cut -d ' ' -f $n-$list_len)\n    new_list=\"$new_list $(echo $list | cut -d ' ' -f 1-$((n-1)))\"\n    echo $new_list",
    "    local list=$1\n    local n=$2\n\n    local list_len=$(echo $list | wc -w)\n    local new_list=$(echo $list | cut -d \" \" -f $(seq $((list_len - n + 1)) $list_len))\n    new_list=\"$new_list $(echo $list | cut -d \" \" -f $(seq 1 $((list_len - n))))\"\n    echo $new_list",
    "    local list=$1\n    local n=$2\n    local list_len=$(echo \"$list\" | wc -w)\n    local new_list=\"\"\n    for i in $(seq 1 $list_len); do\n        local new_index=$(((i + n - 1) % list_len + 1))\n        local item=$(echo \"$list\" | cut -d ' ' -f $i)\n        new_list=\"$new_list $(echo \"$list\" | cut -d ' ' -f $new_index)\"\n    done\n    echo \"$new_list\"",
    "    local list=$1\n    local n=$2\n    local len=$(echo $list | wc -w)\n    local i=1\n    local new_list=''\n    while [ $i -le $len ]; do\n        local item=$(echo $list | cut -d ' ' -f $i)\n        local new_index=$((($i + $n - 1) % $len + 1))\n        new_list=$(echo $new_list | sed \"s/$/ $item/\")\n        i=$((i + 1))\n    done\n    echo $new_list",
    "    local -a list\n    local -i n\n    local -i i\n    local -i j\n    local -i k\n    local -i len\n    local -i temp\n    list=($1)\n    n=$2\n    len=${#list[@]}\n    for ((i=0; i<n; i++))\n    do\n        temp=${list[len-1]}\n        for ((j=len-1; j>0; j--))\n        do\n            list[j]=${list[j-1]}\n        done\n        list[0]=$temp\n    done\n    for ((k=0; k<len; k++))\n    do\n        echo -n \"${list[k]} \"\n    done\n    echo",
    "    local list=$1\n    local n=$2\n    local len=${#list}\n    local new_list=\"\"\n    for ((i=0; i<len; i++)); do\n        local index=$(((i + n) % len))\n        new_list+=\"${list:$index:1}\"\n    done\n    echo \"$new_list\"",
    "    local list=$1\n    local n=$2\n    local list_length=$(echo $list | wc -w)\n    local new_list=$(echo $list | cut -d \" \" -f $((list_length - n + 1))-$list_length)\n    new_list=\"$new_list $(echo $list | cut -d \" \" -f 1-$((list_length - n)))\"\n    echo $new_list",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a array\n    local -i i=0\n    local -i len=0\n    local -i n_mod=0\n    local -i index=0\n    local -i j=0\n\n    # Convert the list to an array\n    array=($list)\n    len=${#array[@]}\n    n_mod=$((n % len))\n\n    # Rotate the array\n    for ((i=0; i<n_mod; i++)); do\n        index=$((len - 1))\n        for ((j=index; j>0; j--)); do\n            array[$j]=${array[$((j - 1))]}\n        done\n        array[0]=${array[$index]}\n    done\n\n    # Convert the array back to a list\n    list=\"\"\n    for ((i=0; i<len; i++)); do\n        list=\"$list ${array[$i]}\"\n    done\n    echo \"$list\"",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local result=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local len=0\n    local temp=0\n    local temp2=0\n    local temp3=0\n\n    len=${#list}\n    temp=$((len - n))\n    temp2=$((len - 1))\n    temp3=$((len - n - 1))\n\n    for ((i=0; i<n; i++)); do\n        result=\"$result ${list:$temp2:1}\"\n        temp2=$((temp2 - 1))\n    done\n\n    for ((j=0; j<temp; j++)); do\n        result=\"$result ${list:$temp3:1}\"\n        temp3=$((temp3 - 1))\n    done\n\n    echo \"$result\"",
    "    local list=$1\n    local n=$2\n    local list_len=${#list}\n    local result=\"\"\n    for ((i=0; i<list_len; i++)); do\n        result=\"$result ${list:((i+n)%list_len):1}\"\n    done\n    echo \"$result\""
  ]
}