{
  "name": "mbpp_802_count_rotation",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    local -i min=0\n    local -i count=0\n    local -i min_index=0\n\n    for ((i=0; i<n-1; i++)); do\n        if [[ ${arr[i]} -gt ${arr[i+1]} ]]; then\n            min=${arr[i+1]}\n            min_index=$i+1\n            break\n        fi\n    done\n\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    local -i len=${#arr[@]}\n    for ((i=1; i<len; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    for ((i=0; i<len; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=0\n    local -i min=0\n    local -i min_index=0\n    local -i count=0\n    local -i flag=0\n    arr=($1)\n    n=${#arr[@]}\n    min=${arr[0]}\n    min_index=0\n    for ((i=0; i<n; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    local -i min=0\n    local -i min_index=0\n    local -i count=0\n\n    for ((i=0; i<n-1; i++)); do\n        min=${arr[i]}\n        min_index=$i\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[j]} -lt $min ]]; then\n                min=${arr[j]}\n                min_index=$j\n            fi\n        done\n        if [[ $min_index -ne $i ]]; then\n            count=$((count+1))\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    local -i min=0\n    local -i min_index=0\n\n    for ((i=0; i<n-1; i++)); do\n        min=${arr[i]}\n        min_index=i\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[j]} -lt $min ]]; then\n                min=${arr[j]}\n                min_index=$j\n            fi\n        done\n        if [[ $min_index -ne $i ]]; then\n            echo $min_index\n            return\n        fi\n    done\n    echo 0\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n\n    for (( i=1; i<len; i++ )); do\n        if [[ ${arr[i]} -lt min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    while [ $i -lt $n ]; do\n        if [ ${arr[$i]} -lt $min ]; then\n            min=${arr[$i]}\n            min_index=$i\n        fi\n        ((i++))\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    while (( i < len )); do\n        if (( arr[i] < min )); then\n            min=${arr[i]}\n            min_index=$i\n        fi\n        (( i++ ))\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i\n    local -i min=${arr[0]}\n    local -i min_index=0\n    for ((i=1; i<len; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr\n    local -i i\n    local -i j\n    local -i min\n    local -i min_index\n    local -i n\n    local -i rotations\n\n    arr=($1)\n    n=${#arr[@]}\n    min=${arr[0]}\n    min_index=0\n    for ((i=1; i<n; i++)); do\n        if ((arr[i] < min)); then\n            min=${arr[i]}\n            min_index=i\n        fi\n    done\n    rotations=$((n - min_index))\n    echo $rotations\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i start=0\n    local -i end=${#arr[@]}-1\n    local -i mid=0\n    local -i n=${#arr[@]}\n    local -i i=0\n    local -i min_index=0\n\n    while [[ $start -le $end ]]; do\n        mid=$(( (start+end)/2 ))\n        if [[ $mid -eq 0 ]]; then\n            min_index=$mid\n            break\n        fi\n        if [[ ${arr[$mid]} -lt ${arr[$((mid-1))]} ]]; then\n            min_index=$mid\n            break\n        fi\n        if [[ ${arr[$mid]} -ge ${arr[$start]} ]]; then\n            start=$((mid+1))\n        else\n            end=$((mid-1))\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i j=0\n    local -i min=0\n    local -i min_index=0\n    local -i count=0\n\n    for ((i=0; i<len; i++))\n    do\n        min=${arr[i]}\n        min_index=$i\n        for ((j=i+1; j<len; j++))\n        do\n            if [[ ${arr[j]} -lt $min ]]\n            then\n                min=${arr[j]}\n                min_index=$j\n            fi\n        done\n        if [[ $min_index -ne $i ]]\n        then\n            count=$((count+1))\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i=0\n    local -i min=0\n    local -i min_index=0\n    local -i j=0\n\n    for ((i=0; i<n; i++)); do\n        if [[ ${arr[i]} -lt ${arr[min_index]} ]]; then\n            min_index=$i\n        fi\n    done\n\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    for ((i=0; i<len; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=0\n    local -i min_index=0\n\n    for ((i=0; i<len; i++)); do\n        if [[ ${arr[i]} -lt ${arr[min_index]} ]]; then\n            min_index=$i\n        fi\n    done\n\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n  local -a arr=($1)\n  local -i len=${#arr[@]}\n  local -i i=0\n  local -i min=${arr[0]}\n  local -i min_index=0\n\n  for ((i=0; i<len; i++)); do\n    if [[ ${arr[i]} -lt $min ]]; then\n      min=${arr[i]}\n      min_index=$i\n    fi\n  done\n\n  echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    local -i min=0\n    local -i count=0\n    local -i min_index=0\n    for ((i=0; i<n-1; i++))\n    do\n        min=${arr[i]}\n        min_index=$i\n        for ((j=i+1; j<n; j++))\n        do\n            if [ ${arr[j]} -lt $min ]\n            then\n                min=${arr[j]}\n                min_index=$j\n            fi\n        done\n        if [ $min_index -ne $i ]\n        then\n            count=$((count+1))\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    for ((i=0; i<n; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr\n    local -i i\n    local -i j\n    local -i min\n    local -i min_index\n    local -i count\n    local -i n\n\n    arr=($1)\n    n=${#arr[@]}\n    min=${arr[0]}\n    min_index=0\n    count=0\n\n    for ((i=0; i<n; i++)); do\n        if ((min > arr[i])); then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n\n    for ((i=min_index; i<n; i++)); do\n        if ((arr[i] > arr[i+1])); then\n            count=$i\n            break\n        fi\n    done\n\n    for ((i=0; i<min_index; i++)); do\n        if ((arr[i] > arr[i+1])); then\n            count=$i\n            break\n        fi\n    done\n\n    echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n  local -a arr=($1)\n  local -i n=${#arr[@]}\n  local -i low=0\n  local -i high=$((n-1))\n  local -i mid\n  local -i result=-1\n  local -i i\n\n  while [ $low -le $high ]; do\n    mid=$((low + (high - low) / 2))\n    if [ $mid -eq $((n-1)) ]; then\n      result=$mid\n      break\n    elif [ $mid -eq 0 ]; then\n      if [ ${arr[$mid]} -gt ${arr[$((mid+1))]} ]; then\n        result=$((mid+1))\n        break\n      else\n        result=$mid\n        break\n      fi\n    elif [ ${arr[$mid]} -gt ${arr[$((mid+1))]} ] && [ ${arr[$mid]} -gt ${arr[$((mid-1))]} ]; then\n      result=$mid\n      break\n    elif [ ${arr[$mid]} -lt ${arr[$high]} ]; then\n      high=$((mid-1))\n    elif [ ${arr[$mid]} -gt ${arr[$low]} ]; then\n      low=$((mid+1))\n    fi\n  done\n\n  echo $result\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191428,
      "stdout": "<_io.BufferedReader name=5>",
      "stderr": "<_io.BufferedReader name=9>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr\n    local -i i j\n    local -i n\n    local -i min\n    local -i min_index\n    local -i count\n    local -i first\n    local -i last\n\n    arr=($1)\n    n=${#arr[@]}\n    count=0\n    first=0\n    last=$((n-1))\n\n    while ((first<=last))\n    do\n        if ((arr[first]<=arr[last]))\n        then\n            echo $count\n            return\n        fi\n\n        min=arr[first]\n        min_index=$first\n        for ((i=first+1;i<=last;i++))\n        do\n            if ((arr[i]<min))\n            then\n                min=arr[i]\n                min_index=$i\n            fi\n        done\n        count=$((count+min_index-first))\n        first=$((first+1))\n    done\n    echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    for ((i=1; i<len; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr\n    local -i i j\n    local -i n\n    local -i min\n    local -i min_index\n    local -i count\n    local -i flag\n    local -i temp\n\n    arr=($1)\n    n=${#arr[@]}\n    min=${arr[0]}\n    min_index=0\n    count=0\n    flag=0\n    for ((i=0; i<n; i++))\n    do\n        if [[ ${arr[i]} -lt $min ]]\n        then\n            min=${arr[i]}\n            min_index=$i\n            count=$i\n            flag=1\n        fi\n    done\n\n    if [[ $flag -eq 0 ]]\n    then\n        echo \"Array is already sorted\"\n        return\n    fi\n\n    for ((i=0; i<n; i++))\n    do\n        if [[ $min_index -eq $i ]]\n        then\n            continue\n        fi\n        if [[ ${arr[i]} -gt $min ]]\n        then\n            count=$((count+1))\n        fi\n    done\n\n    echo \"Minimum number of rotations required is $count\"\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i i=0\n    local -i j=0\n    local -i min=0\n    local -i n=${#arr[@]}\n    for ((i=0; i<n-1; i++)); do\n        min=i\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[j]} -lt ${arr[min]} ]]; then\n                min=j\n            fi\n        done\n        if [[ $min -ne $i ]]; then\n            break\n        fi\n    done\n    echo $min\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    for ((i=0; i<len; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr\n    local -i i=0\n    local -i j=0\n    local -i min=0\n    local -i n=0\n    local -i min_index=0\n    local -i count=0\n    local -i result=0\n\n    arr=($1)\n    n=${#arr[@]}\n\n    for ((i=0; i<n-1; i++)); do\n        min=${arr[i]}\n        min_index=$i\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[j]} -lt $min ]]; then\n                min=${arr[j]}\n                min_index=$j\n            fi\n        done\n        if [[ $min_index -ne $i ]]; then\n            count=$((count+1))\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i i=0\n    local -i j=0\n    local -i min=0\n    local -i count=0\n    local -i n=${#arr[@]}\n\n    for ((i=0; i<n-1; i++))\n    do\n        min=i\n        for ((j=i+1; j<n; j++))\n        do\n            if [[ ${arr[j]} -lt ${arr[min]} ]]\n            then\n                min=$j\n            fi\n        done\n        if [[ $min -ne $i ]]\n        then\n            count=$((count+1))\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n\n    for ((i=0; i<len; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr\n    local -i i j k\n    arr=($1)\n    i=0\n    j=${#arr[@]}-1\n    while ((i<=j)); do\n        k=$(((i+j)/2))\n        if ((arr[k]>arr[k+1])); then\n            echo $((k+1))\n            return\n        elif ((arr[k]<arr[i])); then\n            j=$k-1\n        elif ((arr[k]>arr[j])); then\n            i=$k+1\n        else\n            echo 0\n            return\n        fi\n    done\n    echo 0\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n  local -a arr\n  local -i i j k\n  local -i n\n  local -i min\n  local -i min_index\n  local -i count\n  local -i l\n  local -i r\n  local -i m\n  local -i mid\n\n  arr=($1)\n  n=${#arr[@]}\n  min=${arr[0]}\n  min_index=0\n  count=0\n\n  for ((i=0; i<n; i++)); do\n    if [[ ${arr[i]} -lt $min ]]; then\n      min=${arr[i]}\n      min_index=$i\n    fi\n  done\n\n  if [[ $min_index -eq 0 ]]; then\n    echo $count\n    return\n  fi\n\n  count=$min_index\n\n  l=0\n  r=$((n-1))\n  while [[ $l -le $r ]]; do\n    m=$(((l+r)/2))\n    mid=${arr[m]}\n    if [[ $mid -gt ${arr[$((m+1))]} ]]; then\n      echo $((m+1))\n      return\n    elif [[ $mid -gt ${arr[$l]} ]]; then\n      l=$((m+1))\n    else\n      r=$((m-1))\n    fi\n  done\n\n  echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a array=($1)\n    local -i i=0\n    local -i j=0\n    local -i min=0\n    local -i min_index=0\n    local -i n=${#array[@]}\n    local -i rotations=0\n\n    for ((i=0; i<n; i++)); do\n        min=${array[$i]}\n        min_index=$i\n        for ((j=$i+1; j<n; j++)); do\n            if [[ ${array[$j]} -lt $min ]]; then\n                min=${array[$j]}\n                min_index=$j\n            fi\n        done\n        if [[ $min_index -ne $i ]]; then\n            rotations=$((rotations+min_index-i))\n            array[$i]=${array[$min_index]}\n            array[$min_index]=$min\n        fi\n    done\n    echo $rotations\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    for ((i=0; i<len; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local list=\"$1\"\n    local count=0\n    local sorted_list=$(echo \"$list\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ')\n    local sorted_list_length=$(echo \"$sorted_list\" | wc -w)\n    local list_length=$(echo \"$list\" | wc -w)\n    local i=0\n    while [ $i -lt $list_length ]; do\n        local j=0\n        while [ $j -lt $sorted_list_length ]; do\n            if [ \"$(echo \"$list\" | cut -d ' ' -f $((i+1)))\" == \"$(echo \"$sorted_list\" | cut -d ' ' -f $((j+1)))\" ]; then\n                if [ $j -eq 0 ]; then\n                    echo $count\n                    return\n                else\n                    count=$((count+1))\n                    list=$(echo \"$list\" | cut -d ' ' -f $((i+1))-$list_length)\n                    list=\"$list $(echo \"$list\" | cut -d ' ' -f 1-$((i+1)))\"\n                    i=0\n                    break\n                fi\n            fi\n            j=$((j+1))\n        done\n        i=$((i+1))\n    done\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    for ((i=0; i<n; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr\n    local -i i j k\n    local -i min min_index\n    arr=($1)\n    min=${arr[0]}\n    min_index=0\n    for ((i=1; i<${#arr[@]}; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n\n    for ((i=0; i<n; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    while [[ $i -lt $len ]]; do\n        if [[ ${arr[$i]} -lt $min ]]; then\n            min=${arr[$i]}\n            min_index=$i\n        fi\n        ((i++))\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    while [ $i -lt $n ]; do\n        if [ ${arr[$i]} -lt $min ]; then\n            min=${arr[$i]}\n            min_index=$i\n        fi\n        ((i++))\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    local -i min=0\n    local -i min_index=0\n    local -i count=0\n\n    for ((i=0; i<n-1; i++)); do\n        min=${arr[i]}\n        min_index=$i\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[j]} -lt $min ]]; then\n                min=${arr[j]}\n                min_index=$j\n            fi\n        done\n        if [[ $min_index -ne $i ]]; then\n            count=$((count+1))\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr\n    local -i i j\n    local -i min_index\n    local -i min_value\n    local -i n\n    local -i rotations\n\n    arr=($1)\n    n=${#arr[@]}\n\n    min_index=0\n    min_value=${arr[0]}\n\n    for ((i=1; i<n; i++)); do\n        if ((min_value > arr[i])); then\n            min_index=$i\n            min_value=${arr[i]}\n        fi\n    done\n\n    rotations=$min_index\n\n    echo $rotations\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a array\n    local -i i j\n    local -i len=0\n    local -i min=0\n    local -i min_index=0\n    local -i rotation=0\n\n    array=($1)\n    len=${#array[@]}\n\n    for ((i=0; i<len; i++)); do\n        min=${array[$i]}\n        min_index=$i\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${array[$j]} -lt $min ]]; then\n                min=${array[$j]}\n                min_index=$j\n            fi\n        done\n        if [[ $min_index -ne $i ]]; then\n            rotation=$i\n            break\n        fi\n    done\n    echo $rotation\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n  local -a arr=($1)\n  local -i n=${#arr[@]}\n  local -i i=0\n  local -i min=${arr[0]}\n  local -i min_index=0\n\n  for ((i=0; i<n; i++)); do\n    if [[ ${arr[$i]} -lt $min ]]; then\n      min=${arr[$i]}\n      min_index=$i\n    fi\n  done\n\n  echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a array\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n    local -i nnn=0\n    local -i ooo=0\n    local\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    while (( i < len )); do\n        if (( arr[i] < min )); then\n            min=${arr[i]}\n            min_index=$i\n        fi\n        (( i++ ))\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr\n    local -i i j k\n    local -i n\n    local -i low high mid\n    local -i result\n\n    arr=($1)\n    n=${#arr[@]}\n    low=0\n    high=$((n-1))\n    while [[ low -le high ]]; do\n        mid=$(((low+high)/2))\n        if [[ $mid -eq 0 ]]; then\n            if [[ ${arr[$mid]} -le ${arr[$((mid+1))]} ]]; then\n                result=$mid\n                break\n            else\n                result=$((mid+1))\n                break\n            fi\n        elif [[ $mid -eq $((n-1)) ]]; then\n            if [[ ${arr[$mid]} -ge ${arr[$((mid-1))]} ]]; then\n                result=$mid\n                break\n            else\n                result=$((mid-1))\n                break\n            fi\n        elif [[ ${arr[$mid]} -le ${arr[$((mid-1))]} ]] && [[ ${arr[$mid]} -le ${arr[$((mid+1))]} ]]; then\n            result=$mid\n            break\n        elif [[ ${arr[$mid]} -ge ${arr[$low]} ]]; then\n            low=$((mid+1))\n        else\n            high=$((mid-1))\n        fi\n    done\n    echo $result\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    for ((i=0; i<len; i++)); do\n        if [[ ${arr[$i]} -lt $min ]]; then\n            min=${arr[$i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a array=($1)\n    local -i len=${#array[@]}\n    local -i i=0\n    local -i min=${array[0]}\n    local -i min_index=0\n    for (( i=1; i<len; i++ )); do\n        if [[ ${array[i]} -lt $min ]]; then\n            min=${array[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n  local -i i\n  local -i min\n  local -i min_index\n  local -i n\n  local -i rotation\n  local -i sorted\n  local -i temp\n  local -i value\n\n  n=\"$#\"\n  min=\"$1\"\n  min_index=0\n  sorted=1\n  rotation=0\n\n  for (( i=1; i<n; i++ )); do\n    value=\"${!i}\"\n    if (( value < min )); then\n      min=\"$value\"\n      min_index=\"$i\"\n      sorted=0\n    fi\n  done\n\n  if (( sorted )); then\n    echo \"0\"\n    return\n  fi\n\n  if (( min_index == n-1 )); then\n    echo \"1\"\n    return\n  fi\n\n  temp=\"${!min_index}\"\n  for (( i=min_index; i<n-1; i++ )); do\n    value=\"${!i+1}\"\n    if (( value < temp )); then\n      rotation=\"$(( rotation + 1 ))\"\n    fi\n  done\n\n  echo \"$rotation\"\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp25pxgee0.sh: line 16: 3 2 1: syntax error in expression (error token is \"2 1\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr\n    local -i i j\n    local -i min min_index\n    local -i n\n    local -i rotation\n    arr=($1)\n    n=${#arr[@]}\n    min=${arr[0]}\n    min_index=0\n    for ((i=1; i<n; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    rotation=$((n - min_index))\n    echo $rotation\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i low=0\n    local -i high=$((len-1))\n    local -i mid\n    local -i min_index\n    local -i count\n\n    while [[ $low -le $high ]]; do\n        if [[ ${arr[$low]} -le ${arr[$high]} ]]; then\n            min_index=$low\n            break\n        fi\n        mid=$((low + (high-low)/2))\n        next=$((mid+1))\n        prev=$((mid-1))\n        if [[ ${arr[$mid]} -le ${arr[$next]} ]] && [[ ${arr[$mid]} -le ${arr[$prev]} ]]; then\n            min_index=$mid\n            break\n        elif [[ ${arr[$mid]} -le ${arr[$high]} ]]; then\n            high=$mid-1\n        elif [[ ${arr[$mid]} -ge ${arr[$low]} ]]; then\n            low=$mid+1\n        fi\n    done\n    count=$((len-min_index))\n    echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191428,
      "stdout": "<_io.BufferedReader name=10>",
      "stderr": "<_io.BufferedReader name=13>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    for ((i=0; i<n; i++)); do\n        if [[ ${arr[$i]} -lt $min ]]; then\n            min=${arr[$i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a array=($1)\n    local -i len=${#array[@]}\n    local -i i\n    local -i min=${array[0]}\n    local -i min_index=0\n    for ((i=1; i<len; i++)); do\n        if ((array[i] < min)); then\n            min=${array[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=(\"$@\")\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=0\n    local -i min_index=0\n\n    for (( i=0; i<len; i++ )); do\n        if [[ ${arr[$i]} -lt ${arr[$min_index]} ]]; then\n            min_index=$i\n        fi\n    done\n\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpn382h63a.sh: line 13: [[: 3 2 1: syntax error in expression (error token is \"2 1\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n  local -a arr\n  local -i i=0\n  local -i min=0\n  local -i min_index=0\n  local -i n=0\n  local -i rotation=0\n\n  arr=($1)\n  n=${#arr[@]}\n\n  for ((i=0; i<n; i++)); do\n    if [[ ${arr[i]} -lt ${arr[min_index]} ]]; then\n      min_index=$i\n    fi\n  done\n\n  rotation=$min_index\n  if [[ $rotation -eq 0 ]]; then\n    rotation=$n\n  fi\n\n  echo $rotation\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    for ((i=0; i<n; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr\n    local -i i j\n    local -i min min_idx\n    local -i n\n    local -i rotation\n\n    arr=($1)\n    n=${#arr[@]}\n    min=${arr[0]}\n    min_idx=0\n    rotation=0\n\n    for ((i=1; i<n; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_idx=$i\n        fi\n    done\n\n    if [[ $min_idx -gt 0 ]]; then\n        rotation=$((n - min_idx))\n    fi\n\n    echo $rotation\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a array=($1)\n    local -i i=0\n    local -i j=0\n    local -i min=0\n    local -i n=${#array[@]}\n    for ((i=0; i<n; i++)); do\n        min=i\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${array[j]} -lt ${array[min]} ]]; then\n                min=$j\n            fi\n        done\n        if [[ $min -ne $i ]]; then\n            echo $min\n            return\n        fi\n    done\n    echo 0\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n  local -a arr=($1)\n  local -a sorted=($(echo \"${arr[*]}\" | tr ' ' '\\n' | sort -n | tr '\\n' ' '))\n  local -a rotated=($(echo \"${arr[*]}\" | tr ' ' '\\n' | sort -n | tr '\\n' ' '))\n  local i=0\n  while [[ \"${rotated[*]}\" != \"${sorted[*]}\" ]]; do\n    rotated=(${rotated[@]:1} ${rotated[0]})\n    ((i++))\n  done\n  echo $i\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n  local -a arr=($1)\n  local -i i=0\n  local -i j=0\n  local -i n=${#arr[@]}\n  local -i min=${arr[0]}\n  local -i min_index=0\n  for ((i=0; i<n; i++)); do\n    if [[ ${arr[$i]} -lt $min ]]; then\n      min=${arr[$i]}\n      min_index=$i\n    fi\n  done\n  echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr\n    local -i i\n    local -i j\n    local -i min\n    local -i min_index\n    local -i n\n    local -i rotation_count\n    local -i temp\n\n    arr=($1)\n    n=${#arr[@]}\n    min=${arr[0]}\n    min_index=0\n    rotation_count=0\n\n    for ((i=0; i<n; i++)); do\n        if [[ ${arr[i]} -lt min ]]; then\n            min=${arr[i]}\n            min_index=i\n            rotation_count=i\n        fi\n    done\n\n    echo $rotation_count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n  local -a arr\n  local i\n  local n\n  local min\n  local min_index\n  local count\n  arr=($1)\n  n=${#arr[@]}\n  min=${arr[0]}\n  min_index=0\n  for ((i=1;i<n;i++)); do\n    if [[ ${arr[i]} -lt $min ]]; then\n      min=${arr[i]}\n      min_index=$i\n    fi\n  done\n  count=$((n - min_index))\n  echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local list=($1)\n    local min=${list[0]}\n    local min_index=0\n    for (( i=0; i<${#list[@]}; i++ )); do\n        if [[ ${list[$i]} -lt $min ]]; then\n            min=${list[$i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr\n    local -i i\n    local -i j\n    local -i min\n    local -i min_idx\n    local -i n\n    local -i rotations\n\n    arr=($1)\n    n=${#arr[@]}\n    min=${arr[0]}\n    min_idx=0\n    rotations=0\n\n    for ((i=0; i<n; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_idx=$i\n        fi\n    done\n\n    if [[ $min_idx -eq 0 ]]; then\n        rotations=$((n-1))\n    else\n        rotations=$((n-min_idx))\n    fi\n\n    echo $rotations\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a array=($1)\n    local -i len=${#array[@]}\n    local -i i=0\n    local -i min=${array[0]}\n    local -i min_index=0\n    for (( i=1; i<len; i++ )); do\n        if [[ ${array[i]} -lt min ]]; then\n            min=${array[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    for ((i=0; i<n; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n\n    for ((i=0; i<len; i++)); do\n        if [[ ${arr[$i]} -lt $min ]]; then\n            min=${arr[$i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_idx=0\n    for ((i=1; i<len; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_idx=$i\n        fi\n    done\n    echo $min_idx\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=0\n    local -i min_idx=0\n    local -i rot=0\n\n    for ((i=0; i<len; i++)); do\n        if [[ ${arr[$i]} -lt ${arr[$min_idx]} ]]; then\n            min_idx=$i\n        fi\n    done\n\n    if [[ $min_idx -eq 0 ]]; then\n        echo \"0\"\n    else\n        echo \"$min_idx\"\n    fi\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i min=${arr[0]}\n    local -i min_index=0\n    local -i i=0\n    for ((i=0; i<len; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n  local -a arr=($1)\n  local -i i=0\n  local -i min=0\n  local -i n=${#arr[@]}\n  local -i min_index=0\n  local -i rotation_count=0\n\n  for ((i=0; i<n; i++)); do\n    if ((arr[i] < arr[min_index])) ; then\n      min_index=$i\n    fi\n  done\n\n  rotation_count=$min_index\n  if ((rotation_count > 0)) ; then\n    rotation_count=$((n - rotation_count))\n  fi\n\n  echo $rotation_count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr\n    local -i i j\n    local -i min_idx\n    local -i min_val\n    local -i n\n    local -i rot_count\n    local -i tmp\n    local -i x\n\n    arr=($1)\n    n=${#arr[@]}\n    min_idx=0\n    min_val=${arr[0]}\n    for ((i=1; i<n; i++)); do\n        if [[ ${arr[i]} -lt $min_val ]]; then\n            min_idx=$i\n            min_val=${arr[i]}\n        fi\n    done\n    echo $min_idx\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n\tlocal -a arr=($1)\n\tlocal -i len=${#arr[@]}\n\tlocal -i i=0\n\tlocal -i min=${arr[0]}\n\tlocal -i min_index=0\n\twhile [ $i -lt $len ]; do\n\t\tif [ ${arr[$i]} -lt $min ]; then\n\t\t\tmin=${arr[$i]}\n\t\t\tmin_index=$i\n\t\tfi\n\t\t((i++))\n\tdone\n\techo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    local -i count=0\n\n    while [ $i -lt $len ]; do\n        if [ ${arr[$i]} -lt $min ]; then\n            min=${arr[$i]}\n            min_index=$i\n        fi\n        ((i++))\n    done\n\n    if [ $min_index -eq 0 ]; then\n        count=0\n    else\n        count=$min_index\n    fi\n\n    echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a array=($1)\n    local -i i=0\n    local -i j=0\n    local -i n=${#array[@]}\n    local -i min=${array[0]}\n    local -i min_index=0\n    for ((i=0; i<n; i++)); do\n        if [[ ${array[i]} -lt $min ]]; then\n            min=${array[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a list=($1)\n    local -i n=${#list[@]}\n    local -i i=0\n    local -i min=${list[0]}\n    local -i min_index=0\n    local -i rotation=0\n\n    for ((i=0; i<n; i++)); do\n        if [[ ${list[$i]} -lt $min ]]; then\n            min=${list[$i]}\n            min_index=$i\n        fi\n    done\n\n    if [[ $min_index -eq 0 ]]; then\n        rotation=$n\n    else\n        rotation=$min_index\n    fi\n\n    echo $rotation\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a array\n    local -i i=0\n    local -i j=0\n    local -i min=0\n    local -i n=0\n    local -i rotation=0\n    array=($1)\n    n=${#array[@]}\n    min=${array[0]}\n    for ((i=0; i<n; i++)); do\n        if [[ ${array[$i]} -lt $min ]]; then\n            min=${array[$i]}\n            rotation=$i\n        fi\n    done\n    echo $rotation\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    for ((i=0; i<len; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr\n    local -i i\n    local -i j\n    local -i min\n    local -i min_idx\n    local -i n\n    local -i rotations\n    local -i tmp\n\n    arr=( $1 )\n    n=${#arr[@]}\n    min=${arr[0]}\n    min_idx=0\n    for (( i = 1; i < n; i++ )); do\n        if (( arr[i] < min )); then\n            min=${arr[i]}\n            min_idx=$i\n        fi\n    done\n    rotations=$(( n - min_idx ))\n    echo \"rotations: $rotations\"\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    local -i min=${arr[0]}\n    local -i min_index=0\n    local -i count=0\n\n    for ((i=0; i<n; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n\n    if [[ $min_index -eq 0 ]]; then\n        count=0\n    elif [[ $min_index -eq $((n-1)) ]]; then\n        count=$((n-1))\n    else\n        count=$min_index\n    fi\n\n    echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i j=0\n    local -i min=0\n    local -i min_index=0\n    local -i count=0\n\n    for ((i=0; i<len; i++)); do\n        min=${arr[i]}\n        min_index=$i\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[j]} -lt $min ]]; then\n                min=${arr[j]}\n                min_index=$j\n            fi\n        done\n        if [[ $min_index -ne $i ]]; then\n            count=$((count+1))\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr\n    local -i i=0\n    local -i min=0\n    local -i n=0\n    local -i rotations=0\n    local -i tmp=0\n\n    arr=($1)\n    n=${#arr[@]}\n\n    for ((i=0; i<n; i++)); do\n        if [[ ${arr[$i]} -lt ${arr[$min]} ]]; then\n            min=$i\n        fi\n    done\n\n    if [[ $min -eq 0 ]]; then\n        rotations=$((n-1))\n    else\n        rotations=$((min-1))\n    fi\n\n    echo $rotations\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i i=0\n    local -i j=0\n    local -i min=0\n    local -i count=0\n    local -i n=${#arr[@]}\n\n    for ((i=0; i<n-1; i++)); do\n        min=i\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[j]} -lt ${arr[min]} ]]; then\n                min=$j\n            fi\n        done\n        if [[ $min -ne $i ]]; then\n            count=$((count+1))\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=0\n    local -i min_i=0\n    local -i rotation=0\n\n    for i in $(seq 0 $((len-1))); do\n        if [[ ${arr[$i]} -lt $min ]]; then\n            min=${arr[$i]}\n            min_i=$i\n        fi\n    done\n\n    if [[ $min_i -eq 0 ]]; then\n        rotation=$((len-1))\n    else\n        rotation=$((min_i-1))\n    fi\n\n    echo $rotation\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=(\"$@\")\n    local -i low=0\n    local -i high=${#arr[@]}-1\n    local -i mid\n    local -i n=${#arr[@]}\n    while [ $low -le $high ]; do\n        if [ ${arr[$low]} -le ${arr[$high]} ]; then\n            echo $low\n            return\n        fi\n        mid=$((($low+$high)/2))\n        next=$((($mid+1)%$n))\n        prev=$((($mid+$n-1)%$n))\n        if [ ${arr[$mid]} -le ${arr[$next]} ] && [ ${arr[$mid]} -le ${arr[$prev]} ]; then\n            echo $mid\n            return\n        elif [ ${arr[$mid]} -le ${arr[$high]} ]; then\n            high=$mid-1\n        else\n            low=$mid+1\n        fi\n    done\n    echo 0\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp3mol4bp6.sh: line 12: [: too many arguments\\n/tmp/tmp3mol4bp6.sh: line 19: [: too many arguments\\n/tmp/tmp3mol4bp6.sh: line 22: [: too many arguments\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a array\n    local -i i=0\n    local -i min=0\n    local -i min_index=0\n    local -i n=0\n    local -i rotation=0\n    local -i tmp=0\n\n    array=($1)\n    n=${#array[@]}\n\n    min=${array[0]}\n    min_index=0\n\n    for ((i=1; i<n; i++)); do\n        if [[ ${array[i]} -lt $min ]]; then\n            min=${array[i]}\n            min_index=$i\n        fi\n    done\n\n    rotation=$((n - min_index))\n    echo $rotation\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a array\n    local -i i\n    local -i min\n    local -i min_index\n    local -i n\n    local -i rotation\n\n    array=($1)\n    n=${#array[@]}\n    min=${array[0]}\n    min_index=0\n    for ((i=1; i<n; i++)); do\n        if [[ ${array[i]} -lt $min ]]; then\n            min=${array[i]}\n            min_index=$i\n        fi\n    done\n    rotation=$((n - min_index))\n    echo $rotation\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_idx=0\n\n    for ((i=0; i<len; i++)); do\n        if ((arr[i] < min)); then\n            min=${arr[i]}\n            min_idx=$i\n        fi\n    done\n\n    echo $min_idx\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr\n    local -i i=0 j=0\n    local -i min=0 min_index=0\n    local -i n=0\n    local -i rotation=0\n    local -i tmp=0\n    local -i x=0\n\n    arr=($1)\n    n=${#arr[@]}\n    min=${arr[0]}\n    min_index=0\n    for ((i=0; i<n; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    for ((i=0; i<len; i++)); do\n        if [[ ${arr[i]} -lt min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    local -i len=${#arr[@]}\n    while [ $i -lt $len ]; do\n        if [ ${arr[$i]} -lt $min ]; then\n            min=${arr[$i]}\n            min_index=$i\n        fi\n        ((i++))\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -a sorted=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n | tr '\\n' ' '))\n    local -a arr_len=${#arr[@]}\n    local -a sorted_len=${#sorted[@]}\n    local -a i=0\n    local -a j=0\n    local -a count=0\n    local -a first=${arr[0]}\n    local -a last=${arr[arr_len-1]}\n    local -a first_sorted=${sorted[0]}\n    local -a last_sorted=${sorted[sorted_len-1]}\n\n    if [ $first -eq $first_sorted ] && [ $last -eq $last_sorted ]\n    then\n        echo 0\n        return 0\n    fi\n\n    while [ $i -lt $arr_len ]\n    do\n        if [ ${arr[$i]} -eq ${sorted[$j]} ]\n        then\n            i=$((i+1))\n            j=$((j+1))\n            count=$((count+1))\n        else\n            i=$((i+1))\n        fi\n    done\n\n    echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i min=${arr[0]}\n    local -i min_index=0\n    local -i i=0\n    for ((i=1; i<len; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i i=0\n    local -i j=0\n    local -i min=0\n    local -i min_idx=0\n    local -i n=${#arr[@]}\n    local -i rot=0\n\n    for ((i=0; i<n; i++)); do\n        min=${arr[i]}\n        min_idx=$i\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[j]} -lt $min ]]; then\n                min=${arr[j]}\n                min_idx=$j\n            fi\n        done\n        if [[ $min_idx -ne $i ]]; then\n            rot=$i\n            break\n        fi\n    done\n    echo $rot\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=arr[0]\n    local -i min_index=0\n    for ((i=0; i<len; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr\n    local -i i\n    local -i j\n    local -i min\n    local -i min_index\n    local -i n\n\n    arr=($1)\n    n=${#arr[@]}\n\n    min=${arr[0]}\n    min_index=0\n\n    for ((i=0; i<n; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i min=0\n    local -i max=${#arr[@]}\n    local -i mid=0\n    local -i rot=0\n    while (( min < max )); do\n        mid=$(( (min + max) / 2 ))\n        if (( arr[mid] > arr[max] )); then\n            min=$(( mid + 1 ))\n        else\n            max=$(( mid ))\n        fi\n    done\n    rot=$min\n    echo $rot\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n  local -a a=($1)\n  local -i n=${#a[@]}\n  local -i i=0\n  local -i j=0\n  local -i min=0\n  local -i count=0\n  local -i min_index=0\n  while [ $i -lt $n ]\n  do\n    min=$i\n    j=$i+1\n    while [ $j -lt $n ]\n    do\n      if [ ${a[$j]} -lt ${a[$min]} ]\n      then\n        min=$j\n      fi\n      ((j++))\n    done\n    if [ $min -ne $i ]\n    then\n      ((count++))\n    fi\n    ((i++))\n  done\n  echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=(\"$@\")\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    for ((i=0; i<len; i++)); do\n        if [[ ${arr[$i]} -lt $min ]]; then\n            min=${arr[$i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp_jrgby8i.sh: line 9: local: 3 2 1: syntax error in expression (error token is \"2 1\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local list=($1)\n    local len=${#list[@]}\n    local min=${list[0]}\n    local min_idx=0\n    for ((i=1; i<len; i++)); do\n        if [[ ${list[$i]} -lt $min ]]; then\n            min=${list[$i]}\n            min_idx=$i\n        fi\n    done\n    echo $min_idx\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local list=\"$1\"\n    local i=0\n    local j=0\n    local k=0\n    local min=0\n    local min_index=0\n    local count=0\n    local list_len=0\n    local list_arr=()\n    local list_arr_len=0\n\n    list_len=${#list}\n    list_arr=($list)\n    list_arr_len=${#list_arr[@]}\n\n    for ((i=0; i<list_arr_len; i++)); do\n        min=${list_arr[$i]}\n        min_index=$i\n        for ((j=i+1; j<list_arr_len; j++)); do\n            if [[ ${list_arr[$j]} -lt $min ]]; then\n                min=${list_arr[$j]}\n                min_index=$j\n            fi\n        done\n        if [[ $min_index -ne $i ]]; then\n            count=$((count+1))\n        fi\n    done\n\n    echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr\n    local -i i\n    local -i min\n    local -i min_index\n    local -i n\n    local -i rotation\n\n    arr=($1)\n    n=${#arr[@]}\n    min=${arr[0]}\n    min_index=0\n    for ((i=1; i<n; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    rotation=$((n - min_index))\n    echo $rotation\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n  local -a arr\n  local -i i j\n  local -i n\n  local -i min\n  local -i min_index\n  local -i count\n  local -i tmp\n\n  arr=($1)\n  n=${#arr[@]}\n  min=${arr[0]}\n  min_index=0\n  count=0\n\n  for ((i=0; i<n; i++)); do\n    if (( ${arr[i]} < min )); then\n      min=${arr[i]}\n      min_index=i\n    fi\n  done\n\n  if (( min_index == 0 )); then\n    count=0\n  else\n    count=min_index\n  fi\n\n  echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n  local -a arr=($1)\n  local -i i=0\n  local -i j=0\n  local -i n=${#arr[@]}\n  local -i min=${arr[0]}\n  local -i min_index=0\n  for ((i=0; i<n; i++)); do\n    if [[ ${arr[i]} -lt $min ]]; then\n      min=${arr[i]}\n      min_index=$i\n    fi\n  done\n  echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n  local -a arr\n  local -i i j\n  local -i n=0\n  local -i min\n  local -i min_index\n  local -i rotation_count\n\n  arr=( $1 )\n  min=${arr[0]}\n  min_index=0\n  rotation_count=0\n\n  for (( i=1; i<${#arr[@]}; i++ )); do\n    if (( arr[i] < min )); then\n      min=${arr[i]}\n      min_index=$i\n    fi\n  done\n\n  if (( min_index > 0 )); then\n    rotation_count=$min_index\n  fi\n\n  echo $rotation_count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n  local -a arr=($1)\n  local -i len=${#arr[@]}\n  local -i i=0\n  local -i min=${arr[0]}\n  local -i min_index=0\n  for ((i=1; i<len; i++)); do\n    if [[ ${arr[i]} -lt min ]]; then\n      min=${arr[i]}\n      min_index=$i\n    fi\n  done\n  echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr\n    local i=0\n    local min=0\n    local min_idx=0\n    local len=0\n    local -i count=0\n    arr=($1)\n    len=${#arr[@]}\n    min=${arr[0]}\n    min_idx=0\n    for ((i=0; i<len; i++)); do\n        if [[ ${arr[$i]} -lt $min ]]; then\n            min=${arr[$i]}\n            min_idx=$i\n        fi\n    done\n    count=$((len-min_idx))\n    echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a array=($1)\n    local -i len=${#array[@]}\n    local -i i=0\n    local -i min=${array[0]}\n    local -i min_index=0\n    for ((i=1; i<len; i++)); do\n        if [[ ${array[i]} -lt $min ]]; then\n            min=${array[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i=0\n    local -i min_index=0\n    local -i min_val=${arr[0]}\n    while (( i < n )); do\n        if (( arr[i] < min_val )); then\n            min_val=${arr[i]}\n            min_index=$i\n        fi\n        (( i++ ))\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    for ((i=0; i<len; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr\n    local -i i j k\n    local -i n\n    local -i min\n    local -i min_index\n    local -i count\n    local -i tmp\n\n    arr=($1)\n    n=${#arr[@]}\n\n    min=arr[0]\n    min_index=0\n    for ((i=0; i<n; i++)); do\n        if [[ arr[i] -lt min ]]; then\n            min=arr[i]\n            min_index=i\n        fi\n    done\n\n    count=0\n    for ((i=0; i<n; i++)); do\n        if [[ arr[i] -gt arr[(i+1)%n] ]]; then\n            count=$((i+1))\n            break\n        fi\n    done\n\n    echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpmi29fe59.sh: line 28: syntax error in conditional expression: unexpected token `('\\n/tmp/tmpmi29fe59.sh: line 28: syntax error near `arr[(i'\\n/tmp/tmpmi29fe59.sh: line 28: `        if [[ arr[i] -gt arr[(i+1)%n] ]]; then'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -a sorted=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n | tr '\\n' ' '))\n    local -a sorted_rotated=($(echo \"${sorted[@]}\" | tr ' ' '\\n' | tr '\\n' ' '))\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i rotations=0\n    local -i found=0\n    local -i found_at=0\n    local -i found_at_prev=0\n    local -i found_at_prev_prev=0\n    local -i found_at_prev_prev_prev=0\n    local -i found_at_prev_prev_prev_prev=0\n    local -i found_at_prev_prev_prev_prev_prev=0\n    local -i found_at_prev_prev_prev_prev_prev_prev=0\n    local -i found_at_prev_prev_prev_prev_prev_prev_prev=0\n    local -i found_at_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i found_at_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i found_at_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i found_at_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i found_at_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i found_at_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i found_at_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i found_at_prev_prev\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n  local -a arr=($1)\n  local -i len=${#arr[@]}\n  local -i i=0\n  local -i min=${arr[0]}\n  local -i min_index=0\n\n  for ((i=0; i<len; i++)); do\n    if [[ ${arr[i]} -lt $min ]]; then\n      min=${arr[i]}\n      min_index=$i\n    fi\n  done\n\n  echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a a=($1)\n    local -i i=0\n    local -i j=0\n    local -i n=${#a[@]}\n    local -i min=0\n    local -i min_index=0\n    local -i count=0\n    for ((i=0; i<n; i++)); do\n        min=${a[i]}\n        min_index=$i\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${a[j]} -lt $min ]]; then\n                min=${a[j]}\n                min_index=$j\n            fi\n        done\n        if [[ $min_index -ne $i ]]; then\n            count=$((count+1))\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    for ((i=0; i<len; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a a=($1)\n    local -i n=${#a[@]}\n    local -i i=0\n    local -i j=0\n    local -i min=0\n    local -i min_index=0\n    local -i count=0\n\n    for ((i=0; i<n-1; i++)); do\n        min=${a[i]}\n        min_index=$i\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${a[j]} -lt $min ]]; then\n                min=${a[j]}\n                min_index=$j\n            fi\n        done\n        if [[ $min_index -ne $i ]]; then\n            count=$((count+1))\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=( $1 )\n    local -i n=${#arr[@]}\n    local -i i=0\n    local -i min_index=0\n    local -i min=${arr[0]}\n    local -i count=0\n    for (( i=0; i<n; i++ ))\n    do\n        if [[ ${arr[i]} -lt $min ]]\n        then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local list=($1)\n    local len=${#list[@]}\n    local min=${list[0]}\n    local min_index=0\n    for ((i=1; i<len; i++)); do\n        if [[ ${list[i]} -lt $min ]]; then\n            min=${list[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a array=($1)\n    local -i l=${#array[@]}\n    local -i i=0\n    local -i min=${array[0]}\n    local -i min_index=0\n    while (( i < l )); do\n        if (( array[i] < min )); then\n            min=${array[i]}\n            min_index=$i\n        fi\n        (( i++ ))\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a array=($1)\n    local -i len=${#array[@]}\n    local -i low=0\n    local -i high=$((len - 1))\n    local -i mid=0\n    local -i result=0\n    while [[ $low -le $high ]]; do\n        if [[ ${array[$low]} -le ${array[$high]} ]]; then\n            result=$low\n            break\n        fi\n        mid=$((low + (high - low) / 2))\n        next=$((mid + 1))\n        prev=$((mid - 1))\n        if [[ ${array[$mid]} <= ${array[$next]} ]] && [[ ${array[$mid]} <= ${array[$prev]} ]]; then\n            result=$mid\n            break\n        elif [[ ${array[$mid]} <= ${array[$high]} ]]; then\n            high=$mid - 1\n        elif [[ ${array[$mid]} >= ${array[$low]} ]]; then\n            low=$mid + 1\n        fi\n    done\n    echo $result\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp_m614ec2.sh: line 20: syntax error in conditional expression\\n/tmp/tmp_m614ec2.sh: line 20: syntax error near `${array[$next]}'\\n/tmp/tmp_m614ec2.sh: line 20: `        if [[ ${array[$mid]} <= ${array[$next]} ]] && [[ ${array[$mid]} <= ${array[$prev]} ]]; then'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i low=0\n    local -i high=$((n-1))\n    local -i mid\n    local -i result=-1\n\n    while [ $low -le $high ]; do\n        mid=$((low + (high-low)/2))\n        if [ $mid -eq $((n-1)) ]; then\n            result=$mid\n            break\n        elif [ ${arr[$mid]} -le ${arr[$((mid+1))]} ]; then\n            result=$mid\n            break\n        elif [ ${arr[$mid]} -ge ${arr[$low]} ]; then\n            low=$((mid+1))\n        else\n            high=$((mid-1))\n        fi\n    done\n\n    echo $((result+1))\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n  local list=\"$1\"\n  local len=$(echo \"$list\" | wc -w)\n  local i=0\n  local j=0\n  local min=0\n  local min_index=0\n  local min_index_prev=0\n  local rotation=0\n  local rotation_prev=0\n  local rotation_next=0\n  local rotation_prev_next=0\n  local rotation_prev_prev=0\n  local rotation_prev_prev_next=0\n  local rotation_prev_prev_prev=0\n  local rotation_prev_prev_prev_next=0\n  local rotation_prev_prev_prev_prev=0\n  local rotation_prev_prev_prev_prev_next=0\n  local rotation_prev_prev_prev_prev_prev=0\n  local rotation_prev_prev_prev_prev_prev_next=0\n  local rotation_prev_prev_prev_prev_prev_prev=0\n  local rotation_prev_prev_prev_prev_prev_prev_next=0\n  local rotation_prev_prev_prev_prev_prev_prev_prev=0\n  local rotation_prev_prev_prev_prev_prev_prev_prev_next=0\n  local rotation_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local rotation_prev_prev_prev_prev_prev_prev_prev_prev_next=0\n  local rotation_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local rotation_prev_prev_prev_prev_prev_prev_prev_prev_prev_next=0\n  local rotation_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local rotation_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_next=0\n  local rotation_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local rotation_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_next=0\n  local rotation_prev_prev_prev_prev_prev_prev_prev_prev\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a array=($1)\n    local -i len=${#array[@]}\n    local -i low=0\n    local -i high=$((len - 1))\n    local -i mid\n    local -i min_index\n\n    while ((low <= high))\n    do\n        if ((array[low] <= array[high]))\n        then\n            min_index=$low\n            break\n        fi\n\n        mid=$(((low + high) / 2))\n        next=$(((mid + 1) % len))\n        prev=$(((mid + len - 1) % len))\n\n        if ((array[mid] <= array[next]) && (array[mid] <= array[prev]))\n        then\n            min_index=$mid\n            break\n        elif ((array[mid] <= array[high]))\n        then\n            high=$((mid - 1))\n        elif ((array[mid] >= array[low]))\n        then\n            low=$((mid + 1))\n        fi\n    done\n\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191428,
      "stdout": "<_io.BufferedReader name=15>",
      "stderr": "<_io.BufferedReader name=17>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i i=0\n    local -i j=0\n    local -i min=0\n    local -i n=${#arr[@]}\n    local -i min_index=0\n    local -i count=0\n\n    for ((i=0; i<n; i++)); do\n        min=${arr[i]}\n        min_index=$i\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[j]} -lt $min ]]; then\n                min=${arr[j]}\n                min_index=$j\n            fi\n        done\n        if [[ $min_index -ne $i ]]; then\n            count=$((count+1))\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a array=($1)\n    local -i len=${#array[@]}\n    local -i i=0\n    local -i min=0\n    local -i min_index=0\n\n    for ((i=0; i<len; i++))\n    do\n        if [[ ${array[i]} -lt ${array[min_index]} ]]\n        then\n            min_index=$i\n        fi\n    done\n\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr\n    local -i i\n    local -i j\n    local -i n\n    local -i min\n    local -i min_index\n    local -i count\n    local -i flag\n    arr=($1)\n    n=${#arr[@]}\n    min=${arr[0]}\n    min_index=0\n    count=0\n    flag=0\n    for ((i=0; i<n; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n            count=$i\n            flag=1\n        fi\n    done\n    if [[ $flag -eq 0 ]]; then\n        echo 0\n    else\n        echo $count\n    fi\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr\n    local -i i=0\n    local -i min=0\n    local -i min_index=0\n    local -i n=0\n    local -i rotation=0\n    local -i tmp=0\n\n    # Convert the input string to an array\n    arr=($1)\n    n=${#arr[@]}\n\n    # Find the minimum element\n    min=${arr[0]}\n    for ((i=1; i<n; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n\n    # If the minimum element is not the first element, then we need to rotate the array\n    if [[ $min_index -ne 0 ]]; then\n        # Rotate the array\n        for ((i=0; i<min_index; i++)); do\n            tmp=${arr[0]}\n            for ((j=0; j<n-1; j++)); do\n                arr[j]=${arr[j+1]}\n            done\n            arr[n-1]=$tmp\n            rotation=$((rotation+1))\n        done\n    fi\n\n    echo $rotation\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    while [ $i -lt $n ]; do\n        if [ ${arr[$i]} -lt $min ]; then\n            min=${arr[$i]}\n            min_index=$i\n        fi\n        ((i++))\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=0\n    local -i min_index=0\n    local -i rotation=0\n\n    for ((i=0; i<len; i++)); do\n        if [ ${arr[$i]} -lt ${arr[$min_index]} ]; then\n            min_index=$i\n        fi\n    done\n\n    if [ $min_index -eq 0 ]; then\n        rotation=$len\n    else\n        rotation=$min_index\n    fi\n\n    echo $rotation\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr\n    local -i i\n    local -i j\n    local -i min\n    local -i min_idx\n    local -i n\n    local -i rotations\n\n    arr=($1)\n    n=${#arr[@]}\n    min=${arr[0]}\n    min_idx=0\n    rotations=0\n\n    for ((i=0; i<n; i++)); do\n        if [[ ${arr[i]} -lt min ]]; then\n            min=${arr[i]}\n            min_idx=i\n        fi\n    done\n\n    for ((i=min_idx; i<n; i++)); do\n        if [[ ${arr[i]} -gt ${arr[i+1]} ]]; then\n            rotations=$((i+1))\n            break\n        fi\n    done\n\n    echo $rotations\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i low=0\n    local -i high=$((len - 1))\n    local -i mid\n    local -i min_index\n    local -i min_value\n    while [[ $low -le $high ]]; do\n        mid=$(((low + high) / 2))\n        if [[ $mid -eq 0 ]]; then\n            min_index=$mid\n            min_value=${arr[$mid]}\n            break\n        elif [[ $mid -eq $((len - 1)) ]]; then\n            min_index=$mid\n            min_value=${arr[$mid]}\n            break\n        elif [[ ${arr[$mid]} -lt ${arr[$((mid - 1))]} ]]; then\n            min_index=$mid\n            min_value=${arr[$mid]}\n            break\n        elif [[ ${arr[$mid]} -ge ${arr[$low]} ]]; then\n            low=$((mid + 1))\n        elif [[ ${arr[$mid]} -le ${arr[$high]} ]]; then\n            high=$((mid - 1))\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    local -i count=0\n    for ((i=0; i<len; i++)); do\n        if [[ ${arr[i]} -lt min ]]; then\n            min=${arr[i]}\n            min_index=i\n        fi\n    done\n    count=$((len - min_index))\n    echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    while [[ $i -lt $n ]]; do\n        if [[ ${arr[$i]} -lt $min ]]; then\n            min=${arr[$i]}\n            min_index=$i\n        fi\n        ((i++))\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n  local -a arr=($1)\n  local -i len=${#arr[@]}\n  local -i i=0\n  local -i min=${arr[0]}\n  local -i min_index=0\n  while (( i < len )); do\n    if (( arr[i] < min )); then\n      min=${arr[i]}\n      min_index=i\n    fi\n    (( i++ ))\n  done\n  echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n  local -a arr=($1)\n  local -i len=${#arr[@]}\n  local -i i=0\n  local -i j=0\n  local -i min=0\n  local -i min_index=0\n  local -i count=0\n\n  for ((i=0; i<len; i++)); do\n    min=${arr[i]}\n    min_index=$i\n    for ((j=i; j<len; j++)); do\n      if [[ ${arr[j]} -lt $min ]]; then\n        min=${arr[j]}\n        min_index=$j\n      fi\n    done\n    if [[ $min_index -ne $i ]]; then\n      count=$((count+1))\n    fi\n  done\n  echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a array\n    local -i i=0\n    local -i j=0\n    local -i min=0\n    local -i n=0\n    local -i rotation=0\n    local -i tmp=0\n    array=($1)\n    n=${#array[@]}\n    min=${array[0]}\n    for ((i=0; i<n; i++))\n    do\n        if [[ ${array[$i]} -lt $min ]]\n        then\n            min=${array[$i]}\n            rotation=$i\n        fi\n    done\n    echo $rotation\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    local -i min=0\n    local -i count=0\n    for (( i=0; i<n-1; i++ )); do\n        if [[ ${arr[i]} -gt ${arr[i+1]} ]]; then\n            min=i+1\n            break\n        fi\n    done\n    echo $min\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i i=0\n    local -i j=0\n    local -i min=0\n    local -i n=${#arr[@]}\n    local -i min_index=0\n    local -i count=0\n\n    for ((i=0; i<n; i++)); do\n        min=${arr[i]}\n        min_index=i\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[j]} -lt $min ]]; then\n                min=${arr[j]}\n                min_index=$j\n            fi\n        done\n        if [[ $min_index -ne $i ]]; then\n            count=$((count+1))\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    for ((i=0; i<len; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    local -i min=0\n    local -i count=0\n\n    for ((i=0; i<n-1; i++)); do\n        if [[ ${arr[i]} -gt ${arr[i+1]} ]]; then\n            min=${arr[i+1]}\n            count=i+1\n            break\n        fi\n    done\n\n    echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -a sorted=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a rotated=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n | tr '\\n' ' '))\n    local -i count=0\n    while [[ \"${rotated[@]}\" != \"${sorted[@]}\" ]]; do\n        rotated=(${rotated[@]:1} ${rotated[0]})\n        count+=1\n    done\n    echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr\n    local -i i j k\n    local -i n\n    local -i min_i\n    local -i min_v\n    local -i min_j\n    local -i min_k\n\n    arr=($1)\n    n=${#arr[@]}\n    min_i=0\n    min_v=${arr[0]}\n    for ((i=0; i<n; i++)); do\n        if [[ ${arr[i]} -lt $min_v ]]; then\n            min_i=$i\n            min_v=${arr[i]}\n        fi\n    done\n    min_j=$((min_i+1))\n    min_k=$((min_i+2))\n    for ((i=0; i<n; i++)); do\n        j=$(((min_j+i)%n))\n        k=$(((min_k+i)%n))\n        if [[ ${arr[j]} -lt ${arr[k]} ]]; then\n            echo $j\n            return\n        fi\n    done\n    echo $min_i\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a array=(\"$@\")\n    local -i i=0\n    local -i j=0\n    local -i n=${#array[@]}\n    local -i min=0\n    local -i min_index=0\n    local -i count=0\n    for ((i=0; i<n; i++)); do\n        min=${array[i]}\n        min_index=i\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${array[j]} -lt $min ]]; then\n                min=${array[j]}\n                min_index=$j\n            fi\n        done\n        if [[ $min_index -ne $i ]]; then\n            count=$((count+1))\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpz8lz08gm.sh: line 14: 3 2 1: syntax error in expression (error token is \"2 1\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    while ((i < n)); do\n        if ((arr[i] < min)); then\n            min=${arr[i]}\n            min_index=$i\n        fi\n        ((i++))\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a array=($1)\n    local -i i=0\n    local -i j=0\n    local -i n=${#array[@]}\n    local -i min=0\n    local -i min_index=0\n    local -i count=0\n\n    for ((i=0; i<n-1; i++)); do\n        min=${array[i]}\n        min_index=i\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${array[j]} -lt $min ]]; then\n                min=${array[j]}\n                min_index=$j\n            fi\n        done\n        if [[ $min_index -ne $i ]]; then\n            count=$((count+1))\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i\n    local -i min=${arr[0]}\n    local -i min_index=0\n    for ((i=1; i<n; i++)); do\n        if [[ ${arr[i]} -lt min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr\n    local -i i\n    local -i j\n    local -i min\n    local -i min_index\n    local -i n\n    local -i rotation_count\n    local -i temp\n    arr=($1)\n    n=${#arr[@]}\n    min=${arr[0]}\n    min_index=0\n    for ((i=0; i<n; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    local -i min=${arr[0]}\n    local -i min_index=0\n    local -i count=0\n\n    for ((i=0; i<n; i++))\n    do\n        if [ ${arr[i]} -lt $min ]\n        then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n\n    if [ $min_index -eq 0 ]\n    then\n        count=0\n    else\n        count=$min_index\n    fi\n\n    echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a list=($1)\n    local -i len=${#list[@]}\n    local -i i=0\n    local -i min=0\n    local -i min_index=0\n    while [ $i -lt $len ]; do\n        if [ ${list[$i]} -lt ${list[$min_index]} ]; then\n            min_index=$i\n        fi\n        ((i++))\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    local -i min=0\n    local -i count=0\n    local -i min_index=0\n    for ((i=0; i<n; i++)); do\n        min=${arr[i]}\n        min_index=$i\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[j]} -lt $min ]]; then\n                min=${arr[j]}\n                min_index=$j\n            fi\n        done\n        if [[ $min_index -ne $i ]]; then\n            arr[min_index]=${arr[i]}\n            arr[i]=$min\n            count=$((count+1))\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=(\"$@\")\n    local -i n=${#arr[@]}\n    local -i low=0\n    local -i high=$((n-1))\n    local -i mid\n    while [[ $low -le $high ]]; do\n        mid=$(((low+high)/2))\n        if [[ $mid -eq 0 ]]; then\n            if [[ ${arr[$mid]} -le ${arr[$((mid+1))]} ]]; then\n                echo $mid\n                return\n            else\n                echo $((mid+1))\n                return\n            fi\n        elif [[ ${arr[$mid]} -le ${arr[$((mid-1))]} ]]; then\n            echo $mid\n            return\n        elif [[ ${arr[$mid]} -le ${arr[$high]} ]]; then\n            high=$((mid-1))\n        else\n            low=$((mid+1))\n        fi\n    done\n    echo 0\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpqik5nyfm.sh: line 14: [[: 3 2 1: syntax error in expression (error token is \"2 1\")\\n/tmp/tmpqik5nyfm.sh: line 14: [[: 4 5 1 2 3: syntax error in expression (error token is \"5 1 2 3\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a array=(\"$@\")\n    local -i n=${#array[@]}\n    local -i low=0\n    local -i high=$((n-1))\n    local -i mid=0\n    local -i result=0\n    while [ $low -le $high ]\n    do\n        if [ ${array[$low]} -le ${array[$high]} ]\n        then\n            result=$low\n            break\n        fi\n        mid=$((low + ((high - low) / 2)))\n        next=$(((mid + 1) % n))\n        prev=$(((mid - 1 + n) % n))\n        if [ ${array[$mid]} -le ${array[$next]} ] && [ ${array[$mid]} -le ${array[$prev]} ]\n        then\n            result=$mid\n            break\n        elif [ ${array[$mid]} -le ${array[$high]} ]\n        then\n            high=$((mid - 1))\n        elif [ ${array[$mid]} -ge ${array[$low]} ]\n        then\n            low=$((mid + 1))\n        fi\n    done\n    echo $result\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191428,
      "stdout": "<_io.BufferedReader name=8>",
      "stderr": "<_io.BufferedReader name=14>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local list=($1)\n    local i=0\n    local j=0\n    local min=0\n    local min_index=0\n    local count=0\n    local len=${#list[@]}\n    for ((i=0; i<len; i++))\n    do\n        min=${list[$i]}\n        min_index=$i\n        for ((j=i+1; j<len; j++))\n        do\n            if [[ ${list[$j]} -lt $min ]]\n            then\n                min=${list[$j]}\n                min_index=$j\n            fi\n        done\n        if [[ $min_index -ne $i ]]\n        then\n            count=$((count+1))\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_idx=0\n    for ((i=1; i<len; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_idx=$i\n        fi\n    done\n    echo $min_idx\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    for ((i=0; i<n; i++)); do\n        if ((arr[i] < min)); then\n            min=${arr[i]}\n            min_index=i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr\n    local -i i\n    local -i j\n    local -i min\n    local -i min_index\n    local -i rotation\n    local -i len\n    local -i arr_len\n    local -i arr_index\n    local -i arr_index_next\n    local -i arr_index_prev\n    local -i arr_index_min\n    local -i arr_index_min_next\n    local -i arr_index_min_prev\n    local -i arr_index_min_prev_prev\n    local -i arr_index_min_prev_prev_prev\n    local -i arr_index_min_prev_prev_prev_prev\n    local -i arr_index_min_prev_prev_prev_prev_prev\n    local -i arr_index_min_prev_prev_prev_prev_prev_prev\n    local -i arr_index_min_prev_prev_prev_prev_prev_prev_prev\n    local -i arr_index_min_prev_prev_prev_prev_prev_prev_prev_prev\n    local -i arr_index_min_prev_prev_prev_prev_prev_prev_prev_prev_prev\n    local -i arr_index_min_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n    local -i arr_index_min_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n    local -i arr_index_min_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n    local -i arr_index_min_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n    local -i arr_index_min_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n    local -i arr_index_min_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n    local -i arr_index_min_prev_prev_prev_prev_prev\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local len=${#arr[@]}\n    local min=${arr[0]}\n    local min_index=0\n    for ((i=1; i<len; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    for ((i=1; i<len; i++)); do\n        if [[ ${arr[i]} -lt min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a array\n    local -i i\n    local -i j\n    local -i k\n    local -i min\n    local -i min_index\n    local -i n\n    local -i rotation_count\n    local -i temp\n    local -i temp_index\n\n    array=($1)\n    n=${#array[@]}\n    min=${array[0]}\n    min_index=0\n    rotation_count=0\n    for ((i=0; i<n; i++))\n    do\n        if [[ ${array[i]} -lt $min ]]\n        then\n            min=${array[i]}\n            min_index=$i\n        fi\n    done\n    temp=${array[0]}\n    temp_index=0\n    for ((j=min_index; j<n; j++))\n    do\n        if [[ ${array[j]} -gt $temp ]]\n        then\n            temp=${array[j]}\n            temp_index=$j\n        fi\n    done\n    for ((k=temp_index; k<n; k++))\n    do\n        if [[ ${array[k]} -lt $temp ]]\n        then\n            rotation_count=$k\n            break\n        fi\n    done\n    echo $rotation_count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=0\n    local -i min_index=0\n    for ((i=0; i<len; i++)); do\n        if [ ${arr[$i]} -lt ${arr[$min_index]} ]; then\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr\n    local -i i=0\n    local -i j=0\n    local -i min=0\n    local -i n=0\n    local -i min_index=0\n    local -i count=0\n    arr=($1)\n    n=${#arr[@]}\n    min=${arr[0]}\n    min_index=0\n    for ((i=0; i<n; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n  local list=$1\n  local len=${#list}\n  local i=0\n  local min=${list%% *}\n  local min_index=0\n  local min_index_found=0\n  while [ $i -lt $len ]; do\n    local item=${list%% *}\n    if [ $item -lt $min ]; then\n      min=$item\n      min_index=$i\n      min_index_found=1\n    fi\n    list=${list#* }\n    i=$((i+1))\n  done\n  if [ $min_index_found -eq 0 ]; then\n    echo 0\n  else\n    echo $min_index\n  fi\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n  local -a arr=($1)\n  local -i len=${#arr[@]}\n  local -i i=0\n  local -i min=${arr[0]}\n  local -i min_index=0\n  for ((i=0; i<len; i++)); do\n    if [[ ${arr[i]} -lt $min ]]; then\n      min=${arr[i]}\n      min_index=$i\n    fi\n  done\n  echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    while [ $i -lt $n ]; do\n        if [ ${arr[$i]} -lt $min ]; then\n            min=${arr[$i]}\n            min_index=$i\n        fi\n        ((i++))\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    while (( i < n )); do\n        if (( arr[i] < min )); then\n            min=${arr[i]}\n            min_index=$i\n        fi\n        (( i++ ))\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_i=0\n    for ((i=1; i<len; i++)); do\n        if ((arr[i] < min)); then\n            min=${arr[i]}\n            min_i=$i\n        fi\n    done\n    echo $min_i\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i low=0\n    local -i high=$((n-1))\n    local -i mid=0\n    local -i result=0\n\n    while [ $low -le $high ]; do\n        if [ ${arr[$low]} -le ${arr[$high]} ]; then\n            result=$low\n            break\n        fi\n\n        mid=$((low + (high - low) / 2))\n        next=$((mid + 1))\n        prev=$((mid - 1))\n\n        if [ ${arr[$mid]} -le ${arr[$next]} ] && [ ${arr[$mid]} -le ${arr[$prev]} ]; then\n            result=$mid\n            break\n        elif [ ${arr[$mid]} -le ${arr[$high]} ]; then\n            high=$mid-1\n        elif [ ${arr[$mid]} -ge ${arr[$low]} ]; then\n            low=$mid+1\n        fi\n    done\n\n    echo $result\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191428,
      "stdout": "<_io.BufferedReader name=12>",
      "stderr": "<_io.BufferedReader name=18>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a array=($1)\n    local -i i=0\n    local -i j=0\n    local -i n=${#array[@]}\n    local -i min=${array[0]}\n    local -i min_index=0\n    local -i count=0\n\n    for ((i=0; i<n; i++)); do\n        if [[ ${array[i]} -lt $min ]]; then\n            min=${array[i]}\n            min_index=$i\n        fi\n    done\n\n    if [[ $min_index -eq 0 ]]; then\n        echo $count\n        return\n    fi\n\n    for ((i=0; i<min_index; i++)); do\n        if [[ ${array[i]} -gt ${array[i+1]} ]]; then\n            count=$((count+1))\n        fi\n    done\n\n    echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191428,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr\n    local -i i j\n    local -i n\n    local -i min\n    local -i min_index\n    local -i count\n    arr=($1)\n    n=${#arr[@]}\n    min=${arr[0]}\n    min_index=0\n    for ((i=0; i<n; i++)); do\n        if ((arr[i] < min)); then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191428,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local list=($1)\n    local len=${#list[@]}\n    local min=${list[0]}\n    local min_index=0\n    local i=0\n    while [ $i -lt $len ]\n    do\n        if [ ${list[$i]} -lt $min ]\n        then\n            min=${list[$i]}\n            min_index=$i\n        fi\n        i=$((i+1))\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191428,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr\n    local -i i\n    local -i n\n    local -i min\n    local -i min_index\n    local -i count\n\n    arr=($1)\n    n=${#arr[@]}\n    min=${arr[0]}\n    min_index=0\n    count=0\n\n    for ((i=0; i<n; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n\n    if [[ $min_index -ne 0 ]]; then\n        count=$min_index\n    fi\n\n    echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191428,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr\n    local -i i\n    local -i j\n    local -i min\n    local -i min_index\n    local -i n\n    local -i rotation_count\n    local -i temp\n    arr=($1)\n    n=${#arr[@]}\n    min=${arr[0]}\n    min_index=0\n    for ((i=0; i<n; i++)); do\n        if ((min > arr[i])); then\n            min=${arr[i]}\n            min_index=i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191428,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    while (( i < len )); do\n        if (( arr[i] < min )); then\n            min=${arr[i]}\n            min_index=$i\n        fi\n        (( i++ ))\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local list=$1\n    local count=0\n    local min=999999\n    local min_index=0\n    local i=0\n    for item in $list; do\n        if [ $item -lt $min ]; then\n            min=$item\n            min_index=$i\n        fi\n        i=$((i+1))\n    done\n    if [ $min_index -eq 0 ]; then\n        count=$((i-1))\n    else\n        count=$min_index\n    fi\n    echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191428,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i low=0\n    local -i high=$((len-1))\n    local -i mid\n    while [[ $low -le $high ]]; do\n        mid=$(((low+high)/2))\n        if [[ $mid -eq 0 ]]; then\n            if [[ ${arr[$mid]} -le ${arr[$((mid+1))]} ]]; then\n                echo $mid\n                return\n            else\n                echo $((mid+1))\n                return\n            fi\n        elif [[ $mid -eq $((len-1)) ]]; then\n            if [[ ${arr[$mid]} -ge ${arr[$((mid-1))]} ]]; then\n                echo $mid\n                return\n            else\n                echo $((mid-1))\n                return\n            fi\n        elif [[ ${arr[$mid]} -ge ${arr[$((mid-1))]} ]] && [[ ${arr[$mid]} -le ${arr[$((mid+1))]} ]]; then\n            echo $mid\n            return\n        elif [[ ${arr[$mid]} -ge ${arr[$low]} ]]; then\n            low=$((mid+1))\n        else\n            high=$((mid-1))\n        fi\n    done\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191428,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n  local -a arr=($1)\n  local -i len=${#arr[@]}\n  local -i i=0\n  local -i min=${arr[0]}\n  local -i min_index=0\n  for ((i=1; i<len; i++)); do\n    if [[ ${arr[i]} -lt $min ]]; then\n      min=${arr[i]}\n      min_index=$i\n    fi\n  done\n  echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191428,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n\tlocal -a arr=($1)\n\tlocal -i i=0\n\tlocal -i j=0\n\tlocal -i min=0\n\tlocal -i n=${#arr[@]}\n\n\tfor ((i=0; i<n-1; i++))\n\tdo\n\t\tif [[ ${arr[$i]} -gt ${arr[$i+1]} ]]\n\t\tthen\n\t\t\tmin=$i\n\t\t\tbreak\n\t\tfi\n\tdone\n\n\techo $min\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191428,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i i=0\n    local -i j=0\n    local -i min=0\n    local -i n=${#arr[@]}\n    for ((i=0; i<n-1; i++)); do\n        min=$i\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[j]} -lt ${arr[min]} ]]; then\n                min=$j\n            fi\n        done\n        if [[ $min -ne $i ]]; then\n            break\n        fi\n    done\n    echo $min\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191428,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a array=($1)\n    local -i len=${#array[@]}\n    local -i low=0\n    local -i high=$((len-1))\n    local -i mid\n    local -i min_index=0\n    local -i min_value=${array[0]}\n\n    while [ $low -le $high ]\n    do\n        mid=$(((low+high)/2))\n        if [ $mid -eq 0 ]\n        then\n            if [ ${array[$mid]} -lt ${array[$((mid+1))]} ]\n            then\n                min_index=$mid\n                min_value=${array[$mid]}\n            else\n                min_index=$((mid+1))\n                min_value=${array[$((mid+1))]}\n            fi\n            break\n        fi\n        if [ ${array[$mid]} -lt ${array[$((mid-1))]} ]\n        then\n            min_index=$mid\n            min_value=${array[$mid]}\n            break\n        elif [ ${array[$mid]} -gt ${array[$high]} ]\n        then\n            low=$((mid+1))\n        else\n            high=$((mid-1))\n        fi\n    done\n\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191428,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local min=${arr[0]}\n    local min_index=0\n    for ((i=1; i<len; i++)); do\n        if [[ ${arr[$i]} -lt $min ]]; then\n            min=${arr[$i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191428,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_i=0\n    while (( i < len )); do\n        if (( arr[i] < min )); then\n            min=${arr[i]}\n            min_i=$i\n        fi\n        (( i++ ))\n    done\n    echo $min_i\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191428,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a array=($1)\n    local -i i=0\n    local -i j=0\n    local -i count=0\n    local -i min=${array[0]}\n    local -i min_index=0\n    local -i len=${#array[@]}\n    for ((i=0; i<len; i++)); do\n        if [[ ${array[i]} -lt min ]]; then\n            min=${array[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191428,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr\n    local -i i\n    local -i j\n    local -i min\n    local -i min_index\n    local -i rotation\n\n    arr=($1)\n    min=${arr[0]}\n    min_index=0\n    rotation=0\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if [[ ${arr[$i]} -lt $min ]]; then\n            min=${arr[$i]}\n            min_index=$i\n        fi\n    done\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        j=$(( ($i + $min_index) % ${#arr[@]} ))\n        if [[ ${arr[$j]} -gt ${arr[$(( $j + 1 ))]} ]]; then\n            rotation=$(( $i + 1 ))\n            break\n        fi\n    done\n\n    echo $rotation\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191428,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i j=0\n    local -i min=0\n    local -i min_index=0\n    local -i count=0\n\n    for ((i=0; i<len; i++)); do\n        min=${arr[i]}\n        min_index=$i\n        for ((j=i+1; j<len; j++)); do\n            if [ ${arr[j]} -lt $min ]; then\n                min=${arr[j]}\n                min_index=$j\n            fi\n        done\n        if [ $min_index -ne $i ]; then\n            count=$((count+1))\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191428,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i low=0\n    local -i high=$((len-1))\n    local -i mid=0\n    local -i min_index=0\n    local -i min_value=0\n    local -i i=0\n\n    while [[ $low -le $high ]]; do\n        mid=$(((low+high)/2))\n        if [[ $mid -eq 0 ]]; then\n            min_index=$mid\n            min_value=${arr[$mid]}\n            break\n        fi\n        if [[ ${arr[$mid]} -lt ${arr[$((mid-1))]} ]]; then\n            min_index=$mid\n            min_value=${arr[$mid]}\n            break\n        fi\n        if [[ ${arr[$mid]} -ge ${arr[$low]} ]]; then\n            low=$((mid+1))\n        else\n            high=$((mid-1))\n        fi\n    done\n\n    echo \"min_index=$min_index, min_value=$min_value\"\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191428,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local list=($1)\n    local i=0\n    local j=0\n    local min=${list[0]}\n    local min_index=0\n    local count=0\n\n    for ((i=0; i<${#list[@]}; i++)); do\n        if [[ ${list[$i]} -lt $min ]]; then\n            min=${list[$i]}\n            min_index=$i\n        fi\n    done\n\n    if [[ $min_index -eq 0 ]]; then\n        echo 0\n    else\n        echo $min_index\n    fi\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191428,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i low=0\n    local -i high=$((len-1))\n    local -i mid\n    local -i min_index\n    local -i min_value\n\n    while [ $low -le $high ]; do\n        mid=$(((low+high)/2))\n        if [ $mid -eq 0 ]; then\n            min_index=$mid\n            min_value=${arr[$mid]}\n            break\n        fi\n        if [ ${arr[$mid]} -lt ${arr[$((mid-1))]} ]; then\n            min_index=$mid\n            min_value=${arr[$mid]}\n            break\n        elif [ ${arr[$mid]} -gt ${arr[$low]} ]; then\n            low=$((mid+1))\n        else\n            high=$((mid-1))\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191428,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    for ((i=0; i<len; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n  local -a arr\n  local -i i=0\n  local -i min=0\n  local -i n=0\n  local -i rotations=0\n  local -i tmp=0\n\n  arr=($1)\n  n=${#arr[@]}\n\n  for ((i=0; i<n; i++)); do\n    if [[ ${arr[$i]} -lt ${arr[$min]} ]]; then\n      min=$i\n    fi\n  done\n\n  if [[ $min -ne 0 ]]; then\n    tmp=${arr[0]}\n    arr[0]=${arr[$min]}\n    arr[$min]=$tmp\n  fi\n\n  rotations=$min\n\n  echo $rotations\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191428,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=(\"$@\")\n    local -i i=0\n    local -i min=0\n    local -i n=${#arr[@]}\n    local -i min_index=0\n\n    while (( i < n )); do\n        if (( arr[i] < arr[min_index] )); then\n            min_index=$i\n        fi\n        (( i++ ))\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191428,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpdhf_k46c.sh: line 13: ((: 3 2 1: syntax error in expression (error token is \"2 1\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    while (( i < n )); do\n        if (( arr[i] < min )); then\n            min=${arr[i]}\n            min_index=$i\n        fi\n        (( i++ ))\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr\n    local -i i=0\n    local -i min=0\n    local -i n=0\n    local -i rot=0\n    local -i tmp=0\n\n    arr=($1)\n    n=${#arr[@]}\n    min=${arr[0]}\n    for ((i=0; i<n; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            rot=$i\n        fi\n    done\n    echo $rot\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191428,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    for ((i=0; i<len; i++)); do\n        if [[ ${arr[i]} -lt min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a array=($1)\n    local -i len=${#array[@]}\n    local -i low=0\n    local -i high=$((len-1))\n    local -i mid=0\n    local -i result=0\n\n    while [[ $low -le $high ]]; do\n        if [[ ${array[$low]} -le ${array[$high]} ]]; then\n            result=$low\n            break\n        fi\n\n        mid=$((low + (high - low) / 2))\n        next=$(((mid + 1) % len))\n        prev=$(((mid + len - 1) % len))\n\n        if [[ ${array[$mid]} -le ${array[$next]} ]] && [[ ${array[$mid]} -le ${array[$prev]} ]]; then\n            result=$mid\n            break\n        elif [[ ${array[$mid]} -le ${array[$high]} ]]; then\n            high=$mid-1\n        elif [[ ${array[$mid]} -ge ${array[$low]} ]]; then\n            low=$mid+1\n        fi\n    done\n\n    echo $result\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191433,
      "stdout": "<_io.BufferedReader name=9>",
      "stderr": "<_io.BufferedReader name=19>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    for ((i=0; i<n; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=( $1 )\n    local len=${#arr[@]}\n    local i=0\n    local min=${arr[0]}\n    local min_index=0\n    while [ $i -lt $len ]; do\n        if [ ${arr[$i]} -lt $min ]; then\n            min=${arr[$i]}\n            min_index=$i\n        fi\n        i=$((i+1))\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191428,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    while (( i < len )); do\n        if (( arr[i] < min )); then\n            min=${arr[i]}\n            min_index=$i\n        fi\n        (( i++ ))\n    done\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191423,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n  local -a arr\n  local -i i j\n  local -i n\n  local -i min\n  local -i min_index\n  local -i rotation\n\n  arr=($1)\n  n=${#arr[@]}\n  min=${arr[0]}\n  min_index=0\n  rotation=0\n\n  for ((i=0; i<n; i++)); do\n    if [[ ${arr[i]} -lt min ]]; then\n      min=${arr[i]}\n      min_index=i\n    fi\n  done\n\n  if [[ min_index -eq 0 ]]; then\n    rotation=0\n  elif [[ min_index -eq n-1 ]]; then\n    rotation=n-1\n  else\n    rotation=min_index\n  fi\n\n  echo $rotation\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191428,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a array=(\"$@\")\n    local -i length=${#array[@]}\n    local -i low=0\n    local -i high=$((length - 1))\n    local -i mid\n    local -i min_index\n    local -i min_value\n\n    while [[ $low -le $high ]]; do\n        mid=$((low + (high - low) / 2))\n\n        if [[ $mid -eq 0 ]]; then\n            min_index=$mid\n            min_value=${array[$mid]}\n            break\n        fi\n\n        if [[ $mid -eq $((length - 1)) ]]; then\n            min_index=$mid\n            min_value=${array[$mid]}\n            break\n        fi\n\n        if [[ ${array[$mid]} -lt ${array[$((mid - 1))]} ]]; then\n            min_index=$mid\n            min_value=${array[$mid]}\n            break\n        fi\n\n        if [[ ${array[$mid]} -gt ${array[$((mid + 1))]} ]]; then\n            min_index=$((mid + 1))\n            min_value=${array[$((mid + 1))]}\n            break\n        fi\n\n        if [[ ${array[$mid]} -gt ${array[$low]} ]]; then\n            low=$((mid + 1))\n        else\n            high=$((mid - 1))\n        fi\n    done\n\n    echo $min_index\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191428,
      "stdout": "b''",
      "stderr": "b'/tmp/tmplipg8lgm.sh: line 19: 3 2 1: syntax error in expression (error token is \"2 1\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n    local -a arr=($1)\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    local -i min=0\n    local -i count=0\n    local -i min_idx=0\n    for ((i=0; i<n; i++)); do\n        min=${arr[i]}\n        min_idx=$i\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[j]} -lt $min ]]; then\n                min=${arr[j]}\n                min_idx=$j\n            fi\n        done\n        if [[ $min_idx -ne $i ]]; then\n            count=$((count+1))\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
      "timestamp": 1667191428,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}