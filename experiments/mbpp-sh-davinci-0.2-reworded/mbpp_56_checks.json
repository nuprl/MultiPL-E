{
  "name": "mbpp_56_checks",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a shthon function to check if a given number is one less than twice its reverse.\n#\n# $1 is an integer\nchecks() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    checks \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"70\") = \"false\" ]]\n    [[ $(candidate \"23\") = \"false\" ]]\n    [[ $(candidate \"73\") = \"true\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  if [[ $1 =~ ^[0-9]+$ ]]\n  then\n    local number=$1\n    local reverse=$(echo $number | rev)\n    local twice=$((2 * $reverse))\n    local one_less=$((twice - 1))\n    if [[ $number -eq $one_less ]]\n    then\n      echo \"True\"\n    else\n      echo \"False\"\n    fi\n  else\n    echo \"Not a number\"\n  fi",
    "  if [[ $1 -lt 10 ]]; then\n    echo \"true\"\n  else\n    local num=$1\n    local rev=0\n    while [[ $num -gt 0 ]]; do\n      local digit=$(( num % 10 ))\n      rev=$(( rev * 10 + digit ))\n      num=$(( num / 10 ))\n    done\n    if [[ $(( rev * 2 + 1 )) -eq $1 ]]; then\n      echo \"true\"\n    else\n      echo \"false\"\n    fi\n  fi",
    "    local n=$1\n    local r=$(rev $n)\n    local d=$((n-r))\n    if [[ $d -eq 1 ]]; then\n        echo \"$n is one less than twice its reverse\"\n    else\n        echo \"$n is not one less than twice its reverse\"\n    fi",
    "  if [ $1 -lt 10 ]; then\n    echo \"true\"\n  else\n    reverse=$(echo $1 | rev)\n    if [ $1 -eq $((2*$reverse-1)) ]; then\n      echo \"true\"\n    else\n      echo \"false\"\n    fi\n  fi",
    "  local num=$1\n  local rev=$(rev $num)\n  local twice=$(($rev * 2))\n  local one_less=$(($twice - 1))\n  if [[ $num -eq $one_less ]]; then\n    echo \"True\"\n  else\n    echo \"False\"\n  fi",
    "  if [[ $1 -eq $(($1/10)) ]]; then\n    echo \"true\"\n  else\n    if [[ $1 -eq $(($1/10)) ]]; then\n      echo \"true\"\n    else\n      echo \"false\"\n    fi\n  fi",
    "  local num=$1\n  local rev=$(rev $num)\n  local twice=$((2 * $rev))\n  local one_less=$((twice - 1))\n  if [[ $num -eq $one_less ]]; then\n    echo \"$num is one less than twice its reverse\"\n  else\n    echo \"$num is not one less than twice its reverse\"\n  fi",
    "  local num=$1\n  local rev=$(echo $num | rev)\n  if [[ $((num - rev)) -eq 1 ]]; then\n    echo \"$num is one less than twice its reverse\"\n  else\n    echo \"$num is not one less than twice its reverse\"\n  fi",
    "  if [ $1 -lt 10 ]; then\n    echo \"true\"\n  else\n    reverse=$(echo $1 | rev)\n    if [ $(( $1 + 1 )) -eq $(( $reverse * 2 )) ]; then\n      echo \"true\"\n    else\n      echo \"false\"\n    fi\n  fi",
    "  if [[ $1 -lt 10 ]]; then\n    echo \"true\"\n  else\n    reverse=$(echo $1 | rev)\n    if [[ $(( $1 - 1 )) -eq $(( $reverse * 2 )) ]]; then\n      echo \"true\"\n    else\n      echo \"false\"\n    fi\n  fi",
    "  local num=$1\n  local rev=$(rev $num)\n  local twice=$((num * 2))\n  local one_less=$((twice - 1))\n  if [[ $one_less -eq $rev ]]; then\n    echo \"$num is one less than twice its reverse\"\n  else\n    echo \"$num is not one less than twice its reverse\"\n  fi",
    "  if [[ $1 -eq 0 ]]; then\n    echo \"true\"\n  elif [[ $1 -lt 0 ]]; then\n    echo \"false\"\n  else\n    reverse=$(echo $1 | rev)\n    if [[ $(( $1 + 1 )) -eq $(( $reverse * 2 )) ]]; then\n      echo \"true\"\n    else\n      echo \"false\"\n    fi\n  fi",
    "  local number=$1\n  local reverse=$(echo $number | rev)\n  local double=$((reverse * 2))\n  local one_less=$((double - 1))\n  if [ $number -eq $one_less ]; then\n    echo \"True\"\n  else\n    echo \"False\"\n  fi",
    "  if [ $1 -lt 0 ]; then\n    echo \"false\"\n    return\n  fi\n  if [ $1 -lt 10 ]; then\n    echo \"true\"\n    return\n  fi\n  local rev=$(rev $1)\n  if [ $(( $1 - $rev )) -eq 1 ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi",
    "  if [ $# -ne 1 ]; then\n    echo \"Usage: checks <integer>\"\n    return 1\n  fi\n\n  if [ $1 -lt 0 ]; then\n    echo \"Error: $1 is not a positive integer.\"\n    return 1\n  fi\n\n  if [ $1 -eq 0 ]; then\n    echo \"Error: $1 is not a positive integer.\"\n    return 1\n  fi\n\n  if [ $1 -eq 1 ]; then\n    echo \"Error: $1 is not a positive integer.\"\n    return 1\n  fi\n\n  if [ $1 -eq 2 ]; then\n    echo \"Error: $1 is not a positive integer.\"\n    return 1\n  fi\n\n  if [ $1 -eq 3 ]; then\n    echo \"Error: $1 is not a positive integer.\"\n    return 1\n  fi\n\n  if [ $1 -eq 4 ]; then\n    echo \"Error: $1 is not a positive integer.\"\n    return 1\n  fi\n\n  if [ $1 -eq 5 ]; then\n    echo \"Error: $1 is not a positive integer.\"\n    return 1\n  fi\n\n  if [ $1 -eq 6 ]; then\n    echo \"Error: $1 is not a positive integer.\"\n    return 1\n  fi\n\n  if [ $1 -eq 7 ]; then\n    echo \"Error: $1 is not a positive integer.\"\n    return 1\n  fi\n\n  if [ $1 -eq 8 ]; then\n    echo \"Error: $1 is not a positive integer.\"\n    return 1\n  fi\n\n  if [ $1 -eq 9 ]; then\n    echo \"Error: $1 is not a positive integer.\"\n    return 1\n  fi\n\n  if [ $1 -eq 10 ]; then\n    echo \"Error: $1 is not a positive integer.\"\n    return 1\n  fi\n\n  if [ $1 -eq 11 ]; then\n    echo \"Error: $1 is not a positive integer.\"\n    return 1\n  fi\n\n  if [ $1 -eq 12 ]; then\n    echo \"Error: $1 is not a positive integer.\"\n    return 1\n  fi\n\n  if [ $1 -eq 13 ]; then\n    echo \"Error: $1 is not a positive integer.\"\n    return 1\n  fi\n\n  if [",
    "  local num=$1\n  local rev=$(echo $num | rev)\n  if [ $((num + 1)) -eq $((2 * rev)) ]; then\n    echo \"True\"\n  else\n    echo \"False\"\n  fi",
    "  if [[ $1 -eq 0 ]]; then\n    echo \"true\"\n    return\n  fi\n  if [[ $1 -lt 0 ]]; then\n    echo \"false\"\n    return\n  fi\n  if [[ $1 -gt 0 ]]; then\n    reverse=$(echo $1 | rev)\n    if [[ $1 -eq $(($reverse*2-1)) ]]; then\n      echo \"true\"\n    else\n      echo \"false\"\n    fi\n  fi",
    "  if [[ $1 -eq 0 ]]; then\n    echo \"true\"\n  else\n    reverse=$(echo $1 | rev)\n    if [[ $1 -eq $((2*$reverse-1)) ]]; then\n      echo \"true\"\n    else\n      echo \"false\"\n    fi\n  fi",
    "  local num=$1\n  local rev=$(rev $num)\n  local twice=$((2 * $rev))\n  local one_less=$((twice - 1))\n  if [[ $num -eq $one_less ]]; then\n    echo \"True\"\n  else\n    echo \"False\"\n  fi",
    "    local num=$1\n    local rev=$(rev $num)\n    local twice=$((2 * $rev))\n    if [ $((twice - 1)) -eq $num ]; then\n        echo \"True\"\n    else\n        echo \"False\"\n    fi"
  ]
}