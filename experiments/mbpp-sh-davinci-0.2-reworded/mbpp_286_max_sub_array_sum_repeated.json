{
  "name": "mbpp_286_max_sub_array_sum_repeated",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\nmax_sub_array_sum_repeated() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    max_sub_array_sum_repeated \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 20 -30 -1\" \"4\" \"3\") = \"30\" ]]\n    [[ $(candidate \"-1 10 20\" \"3\" \"2\") = \"59\" ]]\n    [[ $(candidate \"-1 -2 -3\" \"3\" \"3\") = \"-1\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  local -n arr=$1\n  local k=$2\n  local n=$3\n  local max_sum=0\n  local curr_sum=0\n  local i=0\n  local j=0\n  local l=0\n  local m=0\n\n  for ((i=0; i<n; i++)) do\n    curr_sum=0\n    for ((j=i; j<n; j++)) do\n      curr_sum=$((curr_sum + arr[j]))\n      if ((curr_sum > max_sum))\n      then\n        max_sum=$curr_sum\n      fi\n    done\n  done\n\n  for ((l=1; l<k; l++)) do\n    for ((m=0; m<n; m++)) do\n      curr_sum=0\n      for ((i=m; i<n; i++)) do\n        curr_sum=$((curr_sum + arr[i]))\n        if ((curr_sum > max_sum))\n        then\n          max_sum=$curr_sum\n        fi\n      done\n    done\n  done\n\n  echo $max_sum",
    "    local -n arr=$1\n    local k=$2\n    local n=$3\n    local max_sum=0\n    local curr_sum=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local aa=0\n    local bb=0\n    local cc=0\n    local dd=0\n    local ee=0\n    local ff=0\n    local gg=0\n    local hh=0\n    local ii=0\n    local jj=0\n    local kk=0\n    local ll=0\n    local mm=0\n    local nn=0\n    local oo=0\n    local pp=0\n    local qq=0\n    local rr=0\n    local ss=0\n    local tt=0\n    local uu=0\n    local vv=0\n    local ww=0\n    local xx=0\n    local yy=0\n    local zz=0\n    local aaa=0\n    local bbb=0\n    local ccc=0\n    local ddd=0\n    local eee=0\n    local fff=0\n    local ggg=0\n    local hhh=0\n    local iii=0\n    local jjj=0\n    local kkk=0\n    local lll=0\n    local mmm=0\n    local nnn=0\n    local ooo=0\n    local ppp=0\n    local qqq=0\n    local rrr=0\n    local sss=0\n    local ttt=0\n    local uuu=0\n    local vvv=0\n    local www=0\n    local xxx=0\n    local yyy=0\n    local zzz=0\n    local aaaa=0\n    local bbbb=",
    "    local -a arr=()\n    local -i k=$2\n    local -i n=$3\n    local -i i=0\n    local -i j=0\n    local -i max_sum=0\n    local -i curr_sum=0\n    local -i max_sum_so_far=0\n    local -i curr_sum_so_far=0\n\n    IFS=' ' read -r -a arr <<< \"$1\"\n\n    for ((i=0; i<k; i++)); do\n        curr_sum=0\n        curr_sum_so_far=0\n        for ((j=0; j<n; j++)); do\n            curr_sum_so_far+=arr[$j]\n            if ((curr_sum_so_far<0)); then\n                curr_sum_so_far=0\n            fi\n            if ((curr_sum_so_far>max_sum_so_far)); then\n                max_sum_so_far=curr_sum_so_far\n            fi\n            curr_sum+=arr[$j]\n        done\n        if ((curr_sum>max_sum)); then\n            max_sum=curr_sum\n        fi\n    }\n\n    if ((max_sum_so_far>0)); then\n        echo $max_sum_so_far\n    else\n        echo $max_sum\n    fi",
    "  local -a arr=()\n  local -i k=$2\n  local -i max_sum=$3\n  local -i i=0\n  local -i j=0\n  local -i sum=0\n  local -i max_sum_so_far=0\n  local -i max_sum_ending_here=0\n  local -i max_start=0\n  local -i max_end=0\n  local -i start=0\n  local -i end=0\n  local -i len=0\n  local -i len_arr=0\n  local -i len_sub_arr=0\n  local -i len_sub_arr_max=0\n  local -i len_sub_arr_max_so_far=0\n  local -i len_sub_arr_max_ending_here=0\n  local -i len_sub_arr_max_start=0\n  local -i len_sub_arr_max_end=0\n  local -i len_sub_arr_max_start_so_far=0\n  local -i len_sub_arr_max_end_so_far=0\n  local -i len_sub_arr_max_start_ending_here=0\n  local -i len_sub_arr_max_end_ending_here=0\n  local -i len_sub_arr_max_start_ending_here_temp=0\n  local -i len_sub_arr_max_end_ending_here_temp=0\n  local -i len_sub_arr_max_start_so_far_temp=0\n  local -i len_sub_arr_max_end_so_far_temp=0\n  local -i len_sub_arr_max_start_temp=0\n  local -i len_sub_arr_max_end_temp=0\n  local -i len_sub_arr_max_ending_here_temp=0\n  local -i len_sub_arr_max_so_far_temp=0\n  local -i len_sub_arr_max_temp=0\n  local -i len_sub_arr_temp=0\n  local -i len_temp=0\n ",
    "    local -n arr=\"$1\"\n    local k=\"$2\"\n    local n=\"$3\"\n    local max_sum=0\n    local curr_sum=0\n    local i\n    local j\n    local k\n    for ((i=0; i<n; i++))\n    do\n        curr_sum=0\n        for ((j=i; j<n; j++))\n        do\n            curr_sum=$((curr_sum + arr[j]))\n            if ((curr_sum > max_sum))\n            then\n                max_sum=$curr_sum\n            fi\n        done\n    done\n    echo $((max_sum * k))",
    "    local -n _array=$1\n    local k=$2\n    local n=$3\n    local max_sum=0\n    local curr_sum=0\n    local i=0\n    local j=0\n    local k_i=0\n    local k_j=0\n    local k_sum=0\n    local k_curr_sum=0\n    local k_max_sum=0\n    local k_max_sum_i=0\n    local k_max_sum_j=0\n    local k_max_sum_k=0\n    local k_max_sum_n=0\n    local k_max_sum_m=0\n    local k_max_sum_l=0\n    local k_max_sum_o=0\n    local k_max_sum_p=0\n    local k_max_sum_q=0\n    local k_max_sum_r=0\n    local k_max_sum_s=0\n    local k_max_sum_t=0\n    local k_max_sum_u=0\n    local k_max_sum_v=0\n    local k_max_sum_w=0\n    local k_max_sum_x=0\n    local k_max_sum_y=0\n    local k_max_sum_z=0\n    local k_max_sum_aa=0\n    local k_max_sum_ab=0\n    local k_max_sum_ac=0\n    local k_max_sum_ad=0\n    local k_max_sum_ae=0\n    local k_max_sum_af=0\n    local k_max_sum_ag=0\n    local k_max_sum_ah=0\n    local k_max_sum_ai=0\n    local k_max_sum_aj=0\n    local k_max_sum_ak=0\n    local k_max_sum_al=0\n    local k_max_sum_am=0\n    local k_max_sum_an=0\n    local k_max_sum_ao=0\n    local k_max_sum_ap=0\n    local k_max_sum_",
    "    local -n arr=$1\n    local k=$2\n    local max_sum=$3\n\n    local sum=0\n    local max_sum_so_far=0\n    local start=0\n    local end=0\n    local s=0\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        sum=$((sum + arr[i]))\n        if ((sum > max_sum_so_far)); then\n            max_sum_so_far=$sum\n            start=$s\n            end=$i\n        fi\n\n        if ((sum < 0)); then\n            sum=0\n            s=$((i + 1))\n        fi\n    done\n\n    if ((max_sum_so_far < 0)); then\n        echo 0\n        return\n    fi\n\n    local min_sum=$((max_sum_so_far * k))\n    local curr_sum=0\n    local prefix_sum=0\n    local suffix_sum=0\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        curr_sum=$((curr_sum + arr[i]))\n        prefix_sum=$((prefix_sum + arr[i]))\n        if ((prefix_sum < 0)); then\n            prefix_sum=0\n        fi\n\n        j=$(((${#arr[@]} - 1) - i))\n        suffix_sum=$((suffix_sum + arr[j]))\n        if ((suffix_sum < 0)); then\n            suffix_sum=0\n        fi\n\n        min_sum=$((min_sum - arr[i]))\n        if ((min_sum < 0)); then\n            min_sum=0\n        fi\n    done\n\n    local circular_sum=$((curr_sum + (k - 2) * max_sum_so_far))\n    local circular_max_sum=$((circular_sum + prefix_sum + suffix_sum))\n\n    if ((circular_max_sum > max_sum)); then\n        echo $circular_max_sum\n    else\n        echo $max_sum\n    fi",
    "    local -n arr=$1\n    local k=$2\n    local n=$3\n    local max_sum=0\n    local curr_sum=0\n    local i=0\n    local j=0\n    local sum=0\n    local max_val=0\n    local min_val=0\n    local total_sum=0\n    local max_wrap=0\n\n    for ((i=0; i<n; i++)); do\n        sum+=${arr[i]}\n        max_val=$((max_val>${arr[i]}?max_val:${arr[i]}))\n        min_val=$((min_val<${arr[i]}?min_val:${arr[i]}))\n    done\n\n    total_sum=$((sum*k))\n    max_wrap=$((total_sum-min_val))\n\n    if [[ $max_val -lt 0 ]]; then\n        max_sum=$max_val\n    elif [[ $max_wrap -lt $max_val ]]; then\n        max_sum=$max_wrap\n    else\n        max_sum=$max_val\n    fi\n\n    for ((i=0; i<n; i++)); do\n        curr_sum=0\n        for ((j=i; j<n; j++)); do\n            curr_sum=$((curr_sum+${arr[j]}))\n            max_sum=$((max_sum>curr_sum?max_sum:curr_sum))\n        done\n    done\n\n    echo $max_sum",
    "    local -n arr=$1\n    local k=$2\n    local n=$3\n    local max_sum=0\n    local curr_sum=0\n    local i=0\n    local j=0\n    local l=0\n    local r=0\n    local max_l=0\n    local max_r=0\n    local max_arr=()\n    local curr_arr=()\n    local arr_len=${#arr[@]}\n    local arr_sum=0\n    local arr_sum_mod=0\n    local arr_sum_mod_k=0\n    local arr_sum_mod_k_2=0\n    local arr_sum_mod_k_2_minus_1=0\n    local arr_sum_mod_k_2_minus_1_minus_arr_sum_mod=0\n    local arr_sum_mod_k_2_minus_1_minus_arr_sum_mod_k=0\n    local arr_sum_mod_k_2_minus_1_minus_arr_sum_mod_k_2=0\n    local arr_sum_mod_k_2_minus_1_minus_arr_sum_mod_k_2_minus_1=0\n    local arr_sum_mod_k_2_minus_1_minus_arr_sum_mod_k_2_minus_1_minus_arr_sum_mod=0\n    local arr_sum_mod_k_2_minus_1_minus_arr_sum_mod_k_2_minus_1_minus_arr_sum_mod_k=0\n    local arr_sum_mod_k_2_minus_1_minus_arr_sum_mod_k_2_minus_1_minus_arr_sum_mod_k_2=0\n    local arr_sum_mod_k_2_minus_1_minus_arr_sum_mod_k_2_minus_1_minus_arr_sum_mod_k_2_minus_1=0\n    local arr_sum_mod_k_2_minus_1_minus_arr_sum_mod_k_2_minus_1_minus_arr_sum_mod_k_",
    "    local -n arr=$1\n    local k=$2\n    local n=$3\n    local max_sum=0\n    local curr_sum=0\n    local i=0\n    local j=0\n    local k_i=0\n    local k_j=0\n    local k_sum=0\n    local k_curr_sum=0\n    local k_max_sum=0\n    local k_max_i=0\n    local k_max_j=0\n    local k_max_k=0\n    local k_max_curr_sum=0\n    local k_max_sum=0\n    local k_max_k_i=0\n    local k_max_k_j=0\n    local k_max_k_sum=0\n    local k_max_k_curr_sum=0\n    local k_max_k_max_sum=0\n    local k_max_k_max_i=0\n    local k_max_k_max_j=0\n    local k_max_k_max_k=0\n    local k_max_k_max_curr_sum=0\n    local k_max_k_max_sum=0\n    local k_max_k_max_k_i=0\n    local k_max_k_max_k_j=0\n    local k_max_k_max_k_sum=0\n    local k_max_k_max_k_curr_sum=0\n    local k_max_k_max_k_max_sum=0\n    local k_max_k_max_k_max_i=0\n    local k_max_k_max_k_max_j=0\n    local k_max_k_max_k_max_k=0\n    local k_max_k_max_k_max_curr_sum=0\n    local k_max_k_max_k_max_sum=0\n    local k_max_k_max_k_max_k_i=0\n    local k_max_k_max_k_max_k_j=0\n    local k_max_k_",
    "  local -a arr=(\"$@\")\n  local -i k=$2\n  local -i n=$3\n  local -i i j sum max_sum\n  max_sum=${arr[0]}\n  for ((i=0; i<n; i++)); do\n    sum=0\n    for ((j=i; j<n; j++)); do\n      sum=$((sum + arr[j]))\n      if ((sum > max_sum)); then\n        max_sum=$sum\n      fi\n    done\n  done\n  echo $((max_sum * k))",
    "    local -n arr=$1\n    local k=$2\n    local n=$3\n    local max_sum=0\n    local curr_sum=0\n    local i=0\n    local j=0\n    local l=0\n    local r=0\n    local temp_sum=0\n\n    for ((i=0; i<n; i++))\n    do\n        curr_sum=0\n        for ((j=i; j<n; j++))\n        do\n            curr_sum=$((curr_sum + arr[j]))\n            if ((curr_sum > max_sum))\n            then\n                max_sum=$curr_sum\n                l=$i\n                r=$j\n            fi\n        done\n    done\n\n    for ((i=0; i<k-1; i++))\n    do\n        temp_sum=0\n        for ((j=l; j<=r; j++))\n        do\n            temp_sum=$((temp_sum + arr[j]))\n        done\n        if ((temp_sum > max_sum))\n        then\n            max_sum=$temp_sum\n        fi\n    done\n\n    echo $max_sum",
    "  local -n arr=$1\n  local k=$2\n  local n=$3\n  local max_sum=0\n  local sum=0\n  local i=0\n  local j=0\n  local sum_arr=()\n  local max_sum_arr=()\n  local max_sum_arr_len=0\n\n  for ((i=0; i<n; i++)); do\n    sum=0\n    for ((j=i; j<n; j++)); do\n      sum=$((sum + arr[j]))\n      sum_arr+=(\"$sum\")\n    done\n    max_sum_arr+=(\"${sum_arr[@]}\")\n    unset sum_arr\n    sum_arr=()\n  done\n\n  for ((i=0; i<n; i++)); do\n    for ((j=i; j<n; j++)); do\n      sum=0\n      for ((k=i; k<=j; k++)); do\n        sum=$((sum + max_sum_arr[k][j]))\n      done\n      if [[ $sum -gt $max_sum ]]; then\n        max_sum=$sum\n      fi\n    done\n  done\n\n  echo $max_sum",
    "  local -a a=($1)\n  local k=$2\n  local n=${#a[@]}\n  local max_sum=0\n  local curr_sum=0\n  local i=0\n  local j=0\n  local max_i=0\n  local max_j=0\n  local max_i_temp=0\n  local max_j_temp=0\n  local max_sum_temp=0\n  local curr_sum_temp=0\n  local max_sum_temp_temp=0\n  local max_i_temp_temp=0\n  local max_j_temp_temp=0\n  local curr_sum_temp_temp=0\n  local max_sum_temp_temp_temp=0\n  local max_i_temp_temp_temp=0\n  local max_j_temp_temp_temp=0\n  local curr_sum_temp_temp_temp=0\n  local max_sum_temp_temp_temp_temp=0\n  local max_i_temp_temp_temp_temp=0\n  local max_j_temp_temp_temp_temp=0\n  local curr_sum_temp_temp_temp_temp=0\n  local max_sum_temp_temp_temp_temp_temp=0\n  local max_i_temp_temp_temp_temp_temp=0\n  local max_j_temp_temp_temp_temp_temp=0\n  local curr_sum_temp_temp_temp_temp_temp=0\n  local max_sum_temp_temp_temp_temp_temp_temp=0\n  local max_i_temp_temp_temp_temp_temp_temp=0\n  local max_j_temp_temp_temp_temp_temp_temp=0\n  local curr_sum_temp_temp_temp_temp_temp_temp=0\n  local max_sum_temp_temp_temp_temp_temp_temp_temp=0\n  local max_i_temp_temp_temp_temp_temp_temp_temp=0\n  local max_j_temp_temp_temp_temp_temp_temp_temp=0\n  local curr_sum_",
    "  local -n arr=$1\n  local k=$2\n  local n=$3\n\n  local max_so_far=0\n  local max_ending_here=0\n  local max_sub_array_sum=0\n  local max_sub_array_sum_index=0\n  local max_sub_array_sum_start_index=0\n  local max_sub_array_sum_end_index=0\n\n  for ((i=0; i<n; i++)); do\n    max_ending_here=$((max_ending_here + arr[i]))\n    if ((max_ending_here < 0)); then\n      max_ending_here=0\n    fi\n    if ((max_so_far < max_ending_here)); then\n      max_so_far=$max_ending_here\n      max_sub_array_sum_index=$i\n    fi\n  done\n\n  max_sub_array_sum=$max_so_far\n\n  for ((i=0; i<n; i++)); do\n    max_sub_array_sum=$((max_sub_array_sum + arr[i]))\n  done\n\n  max_sub_array_sum=$((max_sub_array_sum * (k - 2)))\n\n  max_so_far=0\n  max_ending_here=0\n  for ((i=0; i<n; i++)); do\n    max_ending_here=$((max_ending_here + arr[i]))\n    if ((max_ending_here < 0)); then\n      max_ending_here=0\n    fi\n    if ((max_so_far < max_ending_here)); then\n      max_so_far=$max_ending_here\n      max_sub_array_sum_start_index=$i\n    fi\n  done\n\n  max_sub_array_sum=$((max_sub_array_sum + max_so_far))\n\n  max_so_far=0\n  max_ending_here=0\n  for ((i=n-1; i>=0; i--)); do\n    max_ending_here=$((max_ending_here + arr[i]))\n    if ((max_ending_here <",
    "  local -n arr=$1\n  local k=$2\n  local n=$3\n  local max_sum=0\n  local curr_sum=0\n  local i=0\n  local j=0\n  local sum=0\n\n  while [ $i -lt $n ]; do\n    sum=$((sum + arr[$i]))\n    ((i++))\n  done\n\n  if [ $k -eq 1 ]; then\n    max_sum=$sum\n  else\n    max_sum=$((sum * k))\n  fi\n\n  while [ $j -lt $n ]; do\n    curr_sum=$((curr_sum + arr[$j]))\n    ((j++))\n  done\n\n  while [ $j -lt $((n * 2)) ]; do\n    curr_sum=$((curr_sum + arr[$j] - arr[$((j - n))]))\n    max_sum=$((max_sum > curr_sum ? max_sum : curr_sum))\n    ((j++))\n  done\n\n  echo $max_sum",
    "    local -n arr=$1\n    local k=$2\n    local n=$3\n    local max_sum=0\n    local sum=0\n    local i=0\n    local j=0\n    local sum_arr=()\n    local max_sum_arr=()\n    local max_sum_arr_len=0\n    local sum_arr_len=0\n    local max_sum_arr_index=0\n    local sum_arr_index=0\n    local max_sum_arr_index_len=0\n    local sum_arr_index_len=0\n    local max_sum_arr_index_len_index=0\n    local sum_arr_index_len_index=0\n    local max_sum_arr_index_len_index_len=0\n    local sum_arr_index_len_index_len=0\n    local max_sum_arr_index_len_index_len_index=0\n    local sum_arr_index_len_index_len_index=0\n    local max_sum_arr_index_len_index_len_index_len=0\n    local sum_arr_index_len_index_len_index_len=0\n    local max_sum_arr_index_len_index_len_index_len_index=0\n    local sum_arr_index_len_index_len_index_len_index=0\n    local max_sum_arr_index_len_index_len_index_len_index_len=0\n    local sum_arr_index_len_index_len_index_len_index_len=0\n    local max_sum_arr_index_len_index_len_index_len_index_len_index=0\n    local sum_arr_index_len_index_len_index_len_index_len_index=0\n    local max_sum_arr_index_len_index_len_index_len_index_len_index_len=0\n    local sum_arr_index_len_index_len_index_len_index_len_index_len=0\n    local max_sum_arr_index_len_index_len_index_len_index_len_index",
    "  local -a arr=(\"$@\")\n  local -i k=$2\n  local -i n=$3\n  local -i max_sum=0\n  local -i curr_sum=0\n  local -i i=0\n  local -i j=0\n  local -i l=0\n  local -i r=0\n  local -i max_l=0\n  local -i max_r=0\n  local -i sum_arr=0\n  local -i sum_arr_k=0\n  local -i sum_arr_k_1=0\n  local -i sum_arr_k_2=0\n  local -i sum_arr_k_3=0\n  local -i sum_arr_k_4=0\n\n  # sum of the array\n  for ((i=0; i<n; i++)); do\n    sum_arr=$((sum_arr + arr[i]))\n  done\n\n  # sum of the array repeated k times\n  sum_arr_k=$((sum_arr * k))\n\n  # sum of the array repeated k-1 times\n  sum_arr_k_1=$((sum_arr_k - sum_arr))\n\n  # sum of the array repeated k-2 times\n  sum_arr_k_2=$((sum_arr_k_1 - sum_arr))\n\n  # sum of the array repeated k-3 times\n  sum_arr_k_3=$((sum_arr_k_2 - sum_arr))\n\n  # sum of the array repeated k-4 times\n  sum_arr_k_4=$((sum_arr_k_3 - sum_arr))\n\n  # find the maximum subarray sum\n  for ((i=0; i<n; i++)); do\n    for ((j=i; j<n; j++)); do\n      curr_sum=0\n      for ((l=i; l<=j; l++)); do\n        curr_sum=$((curr_sum + arr[l]))\n      done\n      if ((curr_sum > max_sum)); then\n        max_sum=$curr_sum\n        max_l=$i\n        max_r=$j\n      fi\n",
    "    local -a array=($1)\n    local k=$2\n    local n=$3\n    local max_sum=0\n    local max_sum_so_far=0\n    local max_sum_ending_here=0\n    local i=0\n    local j=0\n    local sum=0\n\n    for ((i=0; i<n; i++)); do\n        sum+=${array[$i]}\n    done\n\n    max_sum_so_far=$sum\n    for ((i=0; i<n; i++)); do\n        max_sum_ending_here+=${array[$i]}\n        if [[ $max_sum_ending_here -lt 0 ]]; then\n            max_sum_ending_here=0\n        fi\n        if [[ $max_sum_so_far -lt $max_sum_ending_here ]]; then\n            max_sum_so_far=$max_sum_ending_here\n        fi\n    done\n\n    max_sum=$max_sum_so_far\n    for ((i=1; i<k; i++)); do\n        for ((j=0; j<n; j++)); do\n            max_sum_ending_here+=${array[$j]}\n            if [[ $max_sum_ending_here -lt 0 ]]; then\n                max_sum_ending_here=0\n            fi\n            if [[ $max_sum_so_far -lt $max_sum_ending_here ]]; then\n                max_sum_so_far=$max_sum_ending_here\n            fi\n        done\n        max_sum=$((max_sum + max_sum_so_far))\n    done\n\n    echo $max_sum",
    "    local -a arr=(\"$@\")\n    local k=$2\n    local n=$3\n    local max_so_far=0\n    local max_ending_here=0\n    local i=0\n    local j=0\n    local sum=0\n    for ((i=0; i<n; i++))\n    do\n        sum=$((sum + arr[i]))\n    done\n    max_so_far=$((sum))\n    for ((i=n; i<n*k; i++))\n    do\n        sum=$((sum + arr[i%n] - arr[(i-n)%n]))\n        max_so_far=$((max_so_far + arr[i%n]))\n        if [[ $sum -gt $max_so_far ]]\n        then\n            max_so_far=$sum\n        fi\n    done\n    echo $max_so_far"
  ]
}