{
  "name": "mbpp_577_last_Digit_Factorial",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a shthon function to find the last digit in factorial of a given number.\n#\n# $1 is an integer\nlast_Digit_Factorial() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_577_last_Digit_Factorial.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    last_Digit_Factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"4\" ]]\n    [[ $(candidate \"21\") = \"0\" ]]\n    [[ $(candidate \"30\") = \"0\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  local n=$1\n  local factorial=1\n  for ((i=1; i<=n; i++)); do\n    factorial=$((factorial*i))\n  done\n  echo $((factorial%10))",
    "  local number=$1\n  local factorial=1\n  local last_digit=0\n  for (( i=1; i<=$number; i++ ))\n  do\n    factorial=$(( $factorial * $i ))\n  done\n  last_digit=$(( $factorial % 10 ))\n  echo $last_digit",
    "    local num=$1\n    local factorial=1\n    local last_digit=0\n    while [ $num -gt 0 ]; do\n        factorial=$((factorial * num))\n        num=$((num - 1))\n    done\n    last_digit=$((factorial % 10))\n    echo $last_digit",
    "  local num=$1\n  local last_digit=1\n  for (( i=2; i<=$num; i++ )); do\n    last_digit=$(( $last_digit * $i % 10 ))\n  done\n  echo $last_digit",
    "  if [ $1 -eq 0 ]\n  then\n    echo 1\n  else\n    echo $(( $1 * $(last_Digit_Factorial $(( $1 - 1 ))) % 10 ))\n  fi",
    "    if [[ $1 -eq 0 ]]; then\n        echo 1\n    else\n        echo $(( $1 * $(last_Digit_Factorial $(( $1 - 1 ))) % 10 ))\n    fi",
    "    local number=$1\n    local factorial=1\n    for (( i=1; i<=$number; i++ )); do\n        factorial=$(( $factorial * $i ))\n    done\n    echo $factorial",
    "    if [ $1 -eq 0 ]\n    then\n        echo 1\n    else\n        echo $(( $1 * $(last_Digit_Factorial $(( $1 - 1 ))) % 10 ))\n    fi",
    "  local factorial=1\n  local last_digit=0\n  local i=1\n  while [ $i -le $1 ]; do\n    factorial=$((factorial * i))\n    i=$((i + 1))\n  done\n  last_digit=$((factorial % 10))\n  echo $last_digit",
    "  local number=$1\n  local factorial=1\n  local last_digit=0\n  while [ $number -gt 0 ]; do\n    factorial=$((factorial*number))\n    number=$((number-1))\n  done\n  last_digit=$(echo $factorial | tail -c 2)\n  echo $last_digit",
    "    if [ $1 -eq 0 ]; then\n        echo 1\n    else\n        echo $(( $1 * $(last_Digit_Factorial $(( $1 - 1 ))) % 10 ))\n    fi",
    "  local number=$1\n  local factorial=1\n  for (( i=1; i<=$number; i++ )); do\n    factorial=$(( $factorial * $i ))\n  done\n  echo $factorial",
    "    local number=$1\n    local factorial=1\n    local last_digit=0\n    for (( i=1; i<=number; i++ ))\n    do\n        factorial=$(( $factorial * $i ))\n    done\n    last_digit=$(( $factorial % 10 ))\n    echo $last_digit",
    "    if [ $1 -eq 0 ]; then\n        echo 1\n    else\n        echo $(( $1 * $(last_Digit_Factorial $(( $1 - 1 ))) ))\n    fi",
    "    local number=$1\n    local factorial=1\n    local last_digit=0\n    for ((i=1; i<=number; i++))\n    do\n        factorial=$((factorial*i))\n    done\n    last_digit=$((factorial%10))\n    echo $last_digit",
    "    local n=$1\n    local factorial=1\n    local last_digit=0\n    for (( i=1; i<=$n; i++ )); do\n        factorial=$(( $factorial * $i ))\n    done\n    last_digit=$(( $factorial % 10 ))\n    echo $last_digit",
    "    local number=$1\n    local factorial=1\n    local last_digit=0\n    for (( i=1; i<=$number; i++ ))\n    do\n        factorial=$(( $factorial * $i ))\n        last_digit=$(( $factorial % 10 ))\n    done\n    echo $last_digit",
    "  local num=$1\n  local factorial=1\n  for ((i=1; i<=$num; i++)); do\n    factorial=$((factorial*i))\n  done\n  echo $factorial | grep -o '.$'",
    "  local number=$1\n  local factorial=1\n  local last_digit\n  while [ $number -gt 0 ]; do\n    factorial=$((factorial * number))\n    number=$((number - 1))\n  done\n  last_digit=$((factorial % 10))\n  echo $last_digit",
    "  if [ $1 -eq 0 ]; then\n    echo 1\n  else\n    echo $(($1 * $(last_Digit_Factorial $(($1-1)))))\n  fi"
  ]
}