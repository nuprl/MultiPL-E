{
  "name": "mbpp_463_max_subarray_product",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_463_max_subarray_product.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=(\"$@\")\n  local max_prod=0\n  local prod=1\n  local i=0\n  local j=0\n  local n=${#arr[@]}\n\n  while [ $i -lt $n ]; do\n    prod=1\n    j=$i\n    while [ $j -lt $n ]; do\n      prod=$((prod * arr[j]))\n      if [ $prod -gt $max_prod ]; then\n        max_prod=$prod\n      fi\n      j=$((j + 1))\n    done\n    i=$((i + 1))\n  done\n\n  echo $max_prod\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpb8wqwmqu.sh: line 17: 1 -2 -3 0 7 -8 -2: syntax error in expression (error token is \"0 7 -8 -2\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local curr=${arr[i]}\n    local max_product_candidate=$((max_product * curr))\n    local min_product_candidate=$((min_product * curr))\n    max_product=$((max_product_candidate > min_product_candidate ? max_product_candidate : min_product_candidate))\n    max_product=$((max_product > curr ? max_product : curr))\n    min_product=$((max_product_candidate < min_product_candidate ? max_product_candidate : min_product_candidate))\n    min_product=$((min_product < curr ? min_product : curr))\n    max_so_far=$((max_so_far > max_product ? max_so_far : max_product))\n  done\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n  local i\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local curr=${arr[i]}\n    local max_product_candidate=$((max_product * curr))\n    local min_product_candidate=$((min_product * curr))\n    max_product=$((max_product_candidate > min_product_candidate ? max_product_candidate : min_product_candidate))\n    max_product=$((max_product > curr ? max_product : curr))\n    min_product=$((max_product_candidate < min_product_candidate ? max_product_candidate : min_product_candidate))\n    min_product=$((min_product < curr ? min_product : curr))\n    max_so_far=$((max_so_far > max_product ? max_so_far : max_product))\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=($1)\n    local -i max_product=${arr[0]}\n    local -i min_product=${arr[0]}\n    local -i max_so_far=$max_product\n    local -i i\n    for ((i=1; i<${#arr[@]}; i++)); do\n        local -i curr=${arr[i]}\n        local -i max_product_candidate=$((curr * max_product))\n        local -i min_product_candidate=$((curr * min_product))\n        max_product=$((max_product_candidate > min_product_candidate ? max_product_candidate : min_product_candidate))\n        max_product=$((max_product > curr ? max_product : curr))\n        min_product=$((max_product_candidate < min_product_candidate ? max_product_candidate : min_product_candidate))\n        min_product=$((min_product < curr ? min_product : curr))\n        max_so_far=$((max_so_far > max_product ? max_so_far : max_product))\n    done\n    echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a array=()\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i prod=0\n  local -i len=0\n  local -i max_len=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_prod=0\n  local -i max_neg_prod=0\n  local -i max_neg_i=0\n  local -i max_neg_j=0\n  local -i max_neg_len=0\n\n  for i in $@; do\n    array+=($i)\n  done\n\n  len=${#array[@]}\n  for ((i=0; i<len; i++)); do\n    for ((j=i; j<len; j++)); do\n      prod=1\n      for ((k=i; k<=j; k++)); do\n        prod=$((prod * array[k]))\n      done\n      if ((prod > max_prod)); then\n        max_prod=$prod\n        max_i=$i\n        max_j=$j\n        max_len=$((j-i+1))\n      fi\n      if ((prod < 0)); then\n        if ((prod > max_neg_prod)); then\n          max_neg_prod=$prod\n          max_neg_i=$i\n          max_neg_j=$j\n          max_neg_len=$((j-i+1))\n        fi\n      fi\n    done\n  done\n\n  if ((max_neg_len > max_len)); then\n    echo \"max_subarray_product: ${array[@]:max_neg_i:max_neg_len} = $max_neg_prod\"\n  else\n    echo \"max_subarray_product: ${array[@]:max_i:max_len} = $max_prod\"\n  fi\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=(\"$@\")\n    local -a max_arr\n    local -a min_arr\n    local max=0\n    local min=0\n    local result=0\n    local i=0\n\n    max_arr[0]=${arr[0]}\n    min_arr[0]=${arr[0]}\n\n    for ((i=1; i<${#arr[@]}; i++)); do\n        max_arr[i]=$(max ${max_arr[i-1]} ${arr[i]} ${arr[i]}*${max_arr[i-1]})\n        min_arr[i]=$(min ${min_arr[i-1]} ${arr[i]} ${arr[i]}*${min_arr[i-1]})\n        result=$(max $result ${max_arr[i]})\n    done\n\n    echo $result\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n  local i\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local curr=${arr[i]}\n    local max_product_candidate=$((max_product * curr))\n    local min_product_candidate=$((min_product * curr))\n    max_product=$((max_product_candidate > min_product_candidate ? max_product_candidate : min_product_candidate))\n    max_product=$((max_product > curr ? max_product : curr))\n    min_product=$((max_product_candidate < min_product_candidate ? max_product_candidate : min_product_candidate))\n    min_product=$((min_product < curr ? min_product : curr))\n    max_so_far=$((max_so_far > max_product ? max_so_far : max_product))\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a array=($1)\n  local -a max_product=(${array[0]})\n  local -a min_product=(${array[0]})\n  local -a max_subarray_product=(${array[0]})\n  local -i i=1\n\n  while [ $i -lt ${#array[@]} ]; do\n    local -i a=${array[$i]}\n    local -i max_product_i=$((${max_product[$((i-1))]} * $a))\n    local -i min_product_i=$((${min_product[$((i-1))]} * $a))\n    local -i max_product_i_1=$((${max_product[$((i-1))]} * $a))\n    local -i min_product_i_1=$((${min_product[$((i-1))]} * $a))\n    local -i max_product_i_2=$((${min_product[$((i-1))]} * $a))\n    local -i min_product_i_2=$((${max_product[$((i-1))]} * $a))\n\n    max_product[$i]=$(echo $max_product_i $max_product_i_1 $max_product_i_2 | tr ' ' '\\n' | sort -nr | head -n 1)\n    min_product[$i]=$(echo $min_product_i $min_product_i_1 $min_product_i_2 | tr ' ' '\\n' | sort -nr | tail -n 1)\n    max_subarray_product[$i]=$(echo ${max_subarray_product[$((i-1))]} ${max_product[$i]} ${min_product[$i]} | tr ' ' '\\n' | sort -nr | head -n 1)\n\n    i=$((i+1))\n  done\n\n  echo ${max_subarray_product[@]} | tr ' ' '\\n' | sort -nr | head -n 1\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=($1)\n    local max=${arr[0]}\n    local min=${arr[0]}\n    local max_so_far=$max\n    for ((i=1; i<${#arr[@]}; i++)); do\n        local curr=${arr[$i]}\n        local temp=$max\n        max=$(max $max $(max $(($curr * $max)) $(($curr * $min))))\n        min=$(min $min $(min $(($curr * $temp)) $(($curr * $min))))\n        max_so_far=$(max $max_so_far $max)\n    done\n    echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpcs1_5c2n.sh: line 13: max: command not found\\n/tmp/tmpcs1_5c2n.sh: line 13: max: command not found\\n/tmp/tmpcs1_5c2n.sh: line 14: min: command not found\\n/tmp/tmpcs1_5c2n.sh: line 14: min: command not found\\n/tmp/tmpcs1_5c2n.sh: line 15: max: command not found\\n/tmp/tmpcs1_5c2n.sh: line 13: -3 * : syntax error: operand expected (error token is \"* \")\\n/tmp/tmpcs1_5c2n.sh: line 13: max: command not found\\n/tmp/tmpcs1_5c2n.sh: line 14: -3 * : syntax error: operand expected (error token is \"* \")\\n/tmp/tmpcs1_5c2n.sh: line 14: min: command not found\\n/tmp/tmpcs1_5c2n.sh: line 15: max: command not found\\n/tmp/tmpcs1_5c2n.sh: line 13: 0 * : syntax error: operand expected (error token is \"* \")\\n/tmp/tmpcs1_5c2n.sh: line 13: max: command not found\\n/tmp/tmpcs1_5c2n.sh: line 14: 0 * : syntax error: operand expected (error token is \"* \")\\n/tmp/tmpcs1_5c2n.sh: line 14: min: command not found\\n/tmp/tmpcs1_5c2n.sh: line 15: max: command not found\\n/tmp/tmpcs1_5c2n.sh: line 13: 7 * : syntax error: operand expected (error token is \"* \")\\n/tmp/tmpcs1_5c2n.sh: line 13: max: command not found\\n/tmp/tmpcs1_5c2n.sh: line 14: 7 * : syntax error: operand expected (error token is \"* \")\\n/tmp/tmpcs1_5c2n.sh: line 14: min: command not found\\n/tmp/tmpcs1_5c2n.sh: line 15: max: command not found\\n/tmp/tmpcs1_5c2n.sh: line 13: -8 * : syntax error: operand expected (error token is \"* \")\\n/tmp/tmpcs1_5c2n.sh: line 13: max: command not found\\n/tmp/tmpcs1_5c2n.sh: line 14: -8 * : syntax error: operand expected (error token is \"* \")\\n/tmp/tmpcs1_5c2n.sh: line 14: min: command not found\\n/tmp/tmpcs1_5c2n.sh: line 15: max: command not found\\n/tmp/tmpcs1_5c2n.sh: line 13: -2 * : syntax error: operand expected (error token is \"* \")\\n/tmp/tmpcs1_5c2n.sh: line 13: max: command not found\\n/tmp/tmpcs1_5c2n.sh: line 14: -2 * : syntax error: operand expected (error token is \"* \")\\n/tmp/tmpcs1_5c2n.sh: line 14: min: command not found\\n/tmp/tmpcs1_5c2n.sh: line 15: max: command not found\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max=${arr[0]}\n  local min=${arr[0]}\n  local result=${arr[0]}\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local tmp_max=$max\n    local tmp_min=$min\n    max=$(echo -e \"${arr[$i]} ${tmp_max} ${tmp_min}\" | tr ' ' '\\n' | sort -n | tail -n 1)\n    min=$(echo -e \"${arr[$i]} ${tmp_max} ${tmp_min}\" | tr ' ' '\\n' | sort -n | head -n 1)\n    result=$(echo -e \"$result $max\" | tr ' ' '\\n' | sort -n | tail -n 1)\n  done\n  echo $result\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr\n  IFS=' ' read -r -a arr <<< \"$1\"\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=${arr[0]}\n  local i\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local curr=${arr[i]}\n    local temp_max_product=$max_product\n    max_product=$(max $curr $((curr * max_product)) $((curr * min_product)))\n    min_product=$(min $curr $((curr * temp_max_product)) $((curr * min_product)))\n    max_so_far=$(max $max_so_far $max_product)\n  done\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpe7pw9acu.sh: line 15: max: command not found\\n/tmp/tmpe7pw9acu.sh: line 16: min: command not found\\n/tmp/tmpe7pw9acu.sh: line 17: max: command not found\\n/tmp/tmpe7pw9acu.sh: line 15: max: command not found\\n/tmp/tmpe7pw9acu.sh: line 16: min: command not found\\n/tmp/tmpe7pw9acu.sh: line 17: max: command not found\\n/tmp/tmpe7pw9acu.sh: line 15: max: command not found\\n/tmp/tmpe7pw9acu.sh: line 16: min: command not found\\n/tmp/tmpe7pw9acu.sh: line 17: max: command not found\\n/tmp/tmpe7pw9acu.sh: line 15: max: command not found\\n/tmp/tmpe7pw9acu.sh: line 16: min: command not found\\n/tmp/tmpe7pw9acu.sh: line 17: max: command not found\\n/tmp/tmpe7pw9acu.sh: line 15: max: command not found\\n/tmp/tmpe7pw9acu.sh: line 16: min: command not found\\n/tmp/tmpe7pw9acu.sh: line 17: max: command not found\\n/tmp/tmpe7pw9acu.sh: line 15: max: command not found\\n/tmp/tmpe7pw9acu.sh: line 16: min: command not found\\n/tmp/tmpe7pw9acu.sh: line 17: max: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=(\"$@\")\n  local max_product=0\n  local max_product_ending_here=1\n  local min_product_ending_here=1\n  local i\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if (( arr[i] > 0 )); then\n      max_product_ending_here=$(( max_product_ending_here * arr[i] ))\n      min_product_ending_here=$(( min_product_ending_here * arr[i] ))\n    elif (( arr[i] == 0 )); then\n      max_product_ending_here=1\n      min_product_ending_here=1\n    else\n      local temp=$max_product_ending_here\n      max_product_ending_here=$(( min_product_ending_here * arr[i] ))\n      min_product_ending_here=$(( temp * arr[i] ))\n    fi\n    if (( max_product_ending_here > max_product )); then\n      max_product=$max_product_ending_here\n    fi\n  done\n  echo $max_product\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpqw18s5e6.sh: line 12: ((: 1 -2 -3 0 7 -8 -2: syntax error in expression (error token is \"0 7 -8 -2\")\\n/tmp/tmpqw18s5e6.sh: line 15: ((: 1 -2 -3 0 7 -8 -2: syntax error in expression (error token is \"0 7 -8 -2\")\\n/tmp/tmpqw18s5e6.sh: line 20: 1 -2 -3 0 7 -8 -2: syntax error in expression (error token is \"0 7 -8 -2\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=($1)\n    local max_ending_here=1\n    local min_ending_here=1\n    local max_so_far=1\n\n    for i in \"${arr[@]}\"; do\n        if [[ $i -gt 0 ]]; then\n            max_ending_here=$((max_ending_here * i))\n            min_ending_here=$((min(min_ending_here * i, 1)))\n        elif [[ $i -eq 0 ]]; then\n            max_ending_here=1\n            min_ending_here=1\n        else\n            local temp=$max_ending_here\n            max_ending_here=$((max(min_ending_here * i, 1)))\n            min_ending_here=$((temp * i))\n        fi\n\n        if [[ $max_so_far -lt $max_ending_here ]]; then\n            max_so_far=$max_ending_here\n        fi\n    done\n\n    echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp8vcknt1c.sh: line 14: min(min_ending_here * i, 1): syntax error in expression (error token is \"(min_ending_here * i, 1)\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=(\"$@\")\n    local max_product=0\n    local curr_product=0\n    local i=0\n    local j=0\n    local k=0\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        curr_product=${arr[$i]}\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            curr_product=$((curr_product * arr[j]))\n            if [[ $curr_product -gt $max_product ]]; then\n                max_product=$curr_product\n            fi\n        done\n    done\n\n    echo $max_product\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local result=${arr[0]}\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local max_product_copy=$max_product\n    max_product=$(max $max_product $min_product ${arr[i]})\n    min_product=$(min $max_product_copy $min_product ${arr[i]})\n    result=$(max $result $max_product)\n  done\n  echo $result\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp9wka9zd9.sh: line 12: max: command not found\\n/tmp/tmp9wka9zd9.sh: line 13: min: command not found\\n/tmp/tmp9wka9zd9.sh: line 14: max: command not found\\n/tmp/tmp9wka9zd9.sh: line 12: max: command not found\\n/tmp/tmp9wka9zd9.sh: line 13: min: command not found\\n/tmp/tmp9wka9zd9.sh: line 14: max: command not found\\n/tmp/tmp9wka9zd9.sh: line 12: max: command not found\\n/tmp/tmp9wka9zd9.sh: line 13: min: command not found\\n/tmp/tmp9wka9zd9.sh: line 14: max: command not found\\n/tmp/tmp9wka9zd9.sh: line 12: max: command not found\\n/tmp/tmp9wka9zd9.sh: line 13: min: command not found\\n/tmp/tmp9wka9zd9.sh: line 14: max: command not found\\n/tmp/tmp9wka9zd9.sh: line 12: max: command not found\\n/tmp/tmp9wka9zd9.sh: line 13: min: command not found\\n/tmp/tmp9wka9zd9.sh: line 14: max: command not found\\n/tmp/tmp9wka9zd9.sh: line 12: max: command not found\\n/tmp/tmp9wka9zd9.sh: line 13: min: command not found\\n/tmp/tmp9wka9zd9.sh: line 14: max: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a array=($1)\n    local max_product=${array[0]}\n    local min_product=${array[0]}\n    local max_so_far=$max_product\n    local i\n    for ((i=1; i<${#array[@]}; i++)); do\n        local product_with_max=${array[i]}*$max_product\n        local product_with_min=${array[i]}*$min_product\n        max_product=$(max $product_with_max $product_with_min ${array[i]})\n        min_product=$(min $product_with_max $product_with_min ${array[i]})\n        max_so_far=$(max $max_so_far $max_product)\n    done\n    echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpi53kcboh.sh: line 14: max: command not found\\n/tmp/tmpi53kcboh.sh: line 15: min: command not found\\n/tmp/tmpi53kcboh.sh: line 16: max: command not found\\n/tmp/tmpi53kcboh.sh: line 14: max: command not found\\n/tmp/tmpi53kcboh.sh: line 15: min: command not found\\n/tmp/tmpi53kcboh.sh: line 16: max: command not found\\n/tmp/tmpi53kcboh.sh: line 14: max: command not found\\n/tmp/tmpi53kcboh.sh: line 15: min: command not found\\n/tmp/tmpi53kcboh.sh: line 16: max: command not found\\n/tmp/tmpi53kcboh.sh: line 14: max: command not found\\n/tmp/tmpi53kcboh.sh: line 15: min: command not found\\n/tmp/tmpi53kcboh.sh: line 16: max: command not found\\n/tmp/tmpi53kcboh.sh: line 14: max: command not found\\n/tmp/tmpi53kcboh.sh: line 15: min: command not found\\n/tmp/tmpi53kcboh.sh: line 16: max: command not found\\n/tmp/tmpi53kcboh.sh: line 14: max: command not found\\n/tmp/tmpi53kcboh.sh: line 15: min: command not found\\n/tmp/tmpi53kcboh.sh: line 16: max: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr\n    local max_product=0\n    local product=1\n    local i\n    local j\n    local k\n\n    arr=($1)\n    for ((i=0; i<${#arr[@]}; i++)); do\n        product=1\n        for ((j=i; j<${#arr[@]}; j++)); do\n            product=$((product * arr[j]))\n            if ((product > max_product)); then\n                max_product=$product\n            fi\n        done\n    done\n\n    echo $max_product\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=()\n  local -i i=0\n  local -i max=0\n  local -i min=0\n  local -i max_so_far=0\n  local -i min_so_far=0\n  local -i prod=0\n  local -i prod_so_far=0\n  local -i n=0\n  local -i num=0\n  local -i temp=0\n\n  for num in $1; do\n    arr[i++]=$num\n  done\n\n  n=${#arr[@]}\n  max=${arr[0]}\n  min=${arr[0]}\n  max_so_far=${arr[0]}\n  min_so_far=${arr[0]}\n  prod_so_far=${arr[0]}\n\n  for (( i=1; i<n; i++ )); do\n    prod=${arr[i]}\n    max=${arr[i]}\n    min=${arr[i]}\n    if (( prod > max_so_far )); then\n      max_so_far=$prod\n    fi\n    if (( prod < min_so_far )); then\n      min_so_far=$prod\n    fi\n    if (( prod > max )); then\n      max=$prod\n    fi\n    if (( prod < min )); then\n      min=$prod\n    fi\n    if (( prod > 0 )); then\n      if (( max_so_far > 0 )); then\n        max_so_far=$(( max_so_far * prod ))\n      fi\n      if (( min_so_far < 0 )); then\n        min_so_far=$(( min_so_far * prod ))\n      fi\n    elif (( prod < 0 )); then\n      temp=$max_so_far\n      if (( min_so_far < 0 )); then\n        max_so_far=$(( min_so_far * prod ))\n      fi\n      if (( temp > 0 )); then\n        min_so_far=$(( temp * prod ))\n      fi\n    fi\n    if (( max_so_far > max )); then\n      max=$max_so_far\n    fi\n    if (( min_so_far < min )); then\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpa1pfwhii.sh: line 65: syntax error near unexpected token `}'\\n/tmp/tmpa1pfwhii.sh: line 65: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=($1)\n    local max_product=${arr[0]}\n    local min_product=${arr[0]}\n    local max_so_far=$max_product\n    local i\n\n    for ((i=1; i<${#arr[@]}; i++)); do\n        local num=${arr[$i]}\n        local max_product_tmp=$max_product\n        local min_product_tmp=$min_product\n        max_product=$((num > 0 ? max_product_tmp * num : min_product_tmp * num))\n        min_product=$((num > 0 ? min_product_tmp * num : max_product_tmp * num))\n        max_product=$((max_product > num ? max_product : num))\n        min_product=$((min_product < num ? min_product : num))\n        max_so_far=$((max_so_far > max_product ? max_so_far : max_product))\n    done\n\n    echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a array=($1)\n    local max_product=0\n    local product=0\n    local i=0\n    local j=0\n    local k=0\n    local n=${#array[@]}\n\n    for ((i=0; i<n; i++)); do\n        product=1\n        for ((j=i; j<n; j++)); do\n            product=$((product * array[j]))\n            if ((product > max_product)); then\n                max_product=$product\n            fi\n        done\n    done\n\n    echo $max_product\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local array=($1)\n  local max=${array[0]}\n  local min=${array[0]}\n  local result=${array[0]}\n\n  for (( i=1; i<${#array[@]}; i++ )); do\n    local temp=${array[i]}\n    if [[ $temp -gt 0 ]]; then\n      max=$(( max * temp ))\n      min=$(( min * temp ))\n    else\n      max=$(( min * temp ))\n      min=$(( max * temp ))\n    fi\n    if [[ $max -gt $result ]]; then\n      result=$max\n    fi\n    if [[ $min -gt $result ]]; then\n      result=$min\n    fi\n  done\n\n  echo $result\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=($1)\n    local max=${arr[0]}\n    local min=${arr[0]}\n    local max_so_far=$max\n    local i\n    for ((i=1; i<${#arr[@]}; i++)); do\n        local curr=${arr[i]}\n        local tmp=$max\n        max=$(max $max $min $curr)\n        min=$(min $tmp $min $curr)\n        max_so_far=$(max $max_so_far $max)\n    done\n    echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp7w5ikwz8.sh: line 14: max: command not found\\n/tmp/tmp7w5ikwz8.sh: line 15: min: command not found\\n/tmp/tmp7w5ikwz8.sh: line 16: max: command not found\\n/tmp/tmp7w5ikwz8.sh: line 14: max: command not found\\n/tmp/tmp7w5ikwz8.sh: line 15: min: command not found\\n/tmp/tmp7w5ikwz8.sh: line 16: max: command not found\\n/tmp/tmp7w5ikwz8.sh: line 14: max: command not found\\n/tmp/tmp7w5ikwz8.sh: line 15: min: command not found\\n/tmp/tmp7w5ikwz8.sh: line 16: max: command not found\\n/tmp/tmp7w5ikwz8.sh: line 14: max: command not found\\n/tmp/tmp7w5ikwz8.sh: line 15: min: command not found\\n/tmp/tmp7w5ikwz8.sh: line 16: max: command not found\\n/tmp/tmp7w5ikwz8.sh: line 14: max: command not found\\n/tmp/tmp7w5ikwz8.sh: line 15: min: command not found\\n/tmp/tmp7w5ikwz8.sh: line 16: max: command not found\\n/tmp/tmp7w5ikwz8.sh: line 14: max: command not found\\n/tmp/tmp7w5ikwz8.sh: line 15: min: command not found\\n/tmp/tmp7w5ikwz8.sh: line 16: max: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a a=($1)\n    local max=${a[0]}\n    local min=${a[0]}\n    local max_product=${a[0]}\n    local i=1\n    local tmp\n    while (( i < ${#a[@]} )); do\n        if (( a[i] < 0 )); then\n            tmp=max\n            max=min\n            min=tmp\n        fi\n        max=$(( max * a[i] ))\n        min=$(( min * a[i] ))\n        if (( max > max_product )); then\n            max_product=$max\n        fi\n        if (( max < 0 )); then\n            max=0\n        fi\n        if (( min > max_product )); then\n            max_product=$min\n        fi\n        if (( min < 0 )); then\n            min=0\n        fi\n        (( i++ ))\n    done\n    echo $max_product\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp4nspez9v.sh: line 18: max: expression recursion level exceeded (error token is \"max\")\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=(\"$@\")\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n  local i=1\n  while [ $i -lt ${#arr[@]} ]; do\n    local product1=$((max_product * arr[i]))\n    local product2=$((min_product * arr[i]))\n    max_product=$((product1 > product2 ? product1 : product2))\n    max_product=$((max_product > arr[i] ? max_product : arr[i]))\n    min_product=$((product1 < product2 ? product1 : product2))\n    min_product=$((min_product < arr[i] ? min_product : arr[i]))\n    max_so_far=$((max_so_far > max_product ? max_so_far : max_product))\n    i=$((i + 1))\n  done\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr\n  IFS=' ' read -r -a arr <<< \"$1\"\n  local max_product=${arr[0]}\n  local curr_product=${arr[0]}\n  local curr_min=${arr[0]}\n  local curr_max=${arr[0]}\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local new_min=$((curr_min * arr[i]))\n    local new_max=$((curr_max * arr[i]))\n    curr_min=$((new_min < new_max ? new_min : new_max))\n    curr_min=$((curr_min < arr[i] ? curr_min : arr[i]))\n    curr_max=$((new_min > new_max ? new_min : new_max))\n    curr_max=$((curr_max > arr[i] ? curr_max : arr[i]))\n    curr_product=$((curr_max > curr_product ? curr_max : curr_product))\n  done\n  echo $curr_product\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local max_product=1\n  local min_product=1\n  local max_so_far=1\n  local i\n  for i in $1; do\n    if [ $i -gt 0 ]; then\n      max_product=$((max_product * i))\n      min_product=$((min(min_product * i, 1)))\n    elif [ $i -lt 0 ]; then\n      local temp=$max_product\n      max_product=$((max(min_product * i, 1)))\n      min_product=$((temp * i))\n    else\n      max_product=1\n      min_product=1\n    fi\n    max_so_far=$((max(max_so_far, max_product)))\n  done\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpir2iclyy.sh: line 13: min(min_product * i, 1): syntax error in expression (error token is \"(min_product * i, 1)\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=($1)\n    local max_ending_here=1\n    local min_ending_here=1\n    local max_so_far=1\n\n    for i in \"${arr[@]}\"; do\n        if [[ $i -gt 0 ]]; then\n            max_ending_here=$((max_ending_here * i))\n            min_ending_here=$((min(min_ending_here * i, 1)))\n        elif [[ $i -eq 0 ]]; then\n            max_ending_here=1\n            min_ending_here=1\n        else\n            local temp=$max_ending_here\n            max_ending_here=$((max(min_ending_here * i, 1)))\n            min_ending_here=$((temp * i))\n        fi\n\n        if [[ $max_so_far -lt $max_ending_here ]]; then\n            max_so_far=$max_ending_here\n        fi\n    done\n\n    echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp8vcknt1c.sh: line 14: min(min_ending_here * i, 1): syntax error in expression (error token is \"(min_ending_here * i, 1)\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a array=($1)\n  local max_product=${array[0]}\n  local min_product=${array[0]}\n  local max_so_far=$max_product\n  local i\n  for ((i=1; i<${#array[@]}; i++)); do\n    local product_with_max=${array[i]}*$max_product\n    local product_with_min=${array[i]}*$min_product\n    max_product=$(max $product_with_max $product_with_min ${array[i]})\n    min_product=$(min $product_with_max $product_with_min ${array[i]})\n    max_so_far=$(max $max_so_far $max_product)\n  done\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp_n3uo_c0.sh: line 14: max: command not found\\n/tmp/tmp_n3uo_c0.sh: line 15: min: command not found\\n/tmp/tmp_n3uo_c0.sh: line 16: max: command not found\\n/tmp/tmp_n3uo_c0.sh: line 14: max: command not found\\n/tmp/tmp_n3uo_c0.sh: line 15: min: command not found\\n/tmp/tmp_n3uo_c0.sh: line 16: max: command not found\\n/tmp/tmp_n3uo_c0.sh: line 14: max: command not found\\n/tmp/tmp_n3uo_c0.sh: line 15: min: command not found\\n/tmp/tmp_n3uo_c0.sh: line 16: max: command not found\\n/tmp/tmp_n3uo_c0.sh: line 14: max: command not found\\n/tmp/tmp_n3uo_c0.sh: line 15: min: command not found\\n/tmp/tmp_n3uo_c0.sh: line 16: max: command not found\\n/tmp/tmp_n3uo_c0.sh: line 14: max: command not found\\n/tmp/tmp_n3uo_c0.sh: line 15: min: command not found\\n/tmp/tmp_n3uo_c0.sh: line 16: max: command not found\\n/tmp/tmp_n3uo_c0.sh: line 14: max: command not found\\n/tmp/tmp_n3uo_c0.sh: line 15: min: command not found\\n/tmp/tmp_n3uo_c0.sh: line 16: max: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr\n  local i j k\n  local max_product\n  local product\n  IFS=\" \" read -r -a arr <<< \"$1\"\n  max_product=${arr[0]}\n  for ((i=0; i<${#arr[@]}; i++)); do\n    product=${arr[i]}\n    for ((j=i+1; j<${#arr[@]}; j++)); do\n      product=$((product * arr[j]))\n      if [[ $product -gt $max_product ]]; then\n        max_product=$product\n      fi\n    done\n  done\n  echo $max_product\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max=${arr[0]}\n  local min=${arr[0]}\n  local result=${arr[0]}\n  local temp=0\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    temp=${arr[i]}\n    if [[ $temp -gt 0 ]]; then\n      max=$((max * temp))\n      min=$((min * temp))\n    else\n      max=$((min * temp))\n      min=$((temp))\n    fi\n\n    if [[ $max -gt $result ]]; then\n      result=$max\n    fi\n\n    if [[ $min -gt $result ]]; then\n      result=$min\n    fi\n  done\n\n  echo $result\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_product=0\n  local curr_product=1\n  local i=0\n  local j=0\n  local len=${#arr[@]}\n  while [ $i -lt $len ]; do\n    while [ $j -lt $len ]; do\n      curr_product=$((curr_product * arr[j]))\n      if [ $curr_product -gt $max_product ]; then\n        max_product=$curr_product\n      fi\n      j=$((j + 1))\n    done\n    i=$((i + 1))\n    j=$i\n    curr_product=1\n  done\n  echo $max_product\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a array=(\"$@\")\n  local max_product=0\n  local product=1\n  local i=0\n  local j=0\n\n  while (( i < ${#array[@]} )); do\n    product=1\n    j=$i\n    while (( j < ${#array[@]} )); do\n      product=$(( product * array[j] ))\n      if (( product > max_product )); then\n        max_product=$product\n      fi\n      (( j++ ))\n    done\n    (( i++ ))\n  done\n\n  echo $max_product\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpmzzw3720.sh: line 16: 1 -2 -3 0 7 -8 -2: syntax error in expression (error token is \"0 7 -8 -2\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local max_product=1\n  local min_product=1\n  local max_so_far=1\n  local i\n  for i in $1; do\n    if (( i > 0 )); then\n      max_product=$(( max_product * i ))\n      min_product=$(( min_product * i ))\n    elif (( i == 0 )); then\n      max_product=1\n      min_product=1\n    else\n      local temp=$max_product\n      max_product=$(( min_product * i ))\n      min_product=$(( temp * i ))\n    fi\n    if (( max_product > max_so_far )); then\n      max_so_far=$max_product\n    fi\n    if (( max_product < 1 )); then\n      max_product=1\n    fi\n    if (( min_product < 1 )); then\n      min_product=1\n    fi\n  done\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr\n  local max_product=0\n  local product=1\n  local i=0\n  local j=0\n  local k=0\n  local n=0\n  local m=0\n  local len=0\n  local max_len=0\n  local max_i=0\n  local max_j=0\n  local max_k=0\n  local max_m=0\n  local max_n=0\n\n  arr=($1)\n  len=${#arr[@]}\n  for ((i=0; i<len; i++)); do\n    for ((j=i; j<len; j++)); do\n      for ((k=j; k<len; k++)); do\n        for ((m=k; m<len; m++)); do\n          for ((n=m; n<len; n++)); do\n            product=$((arr[i] * arr[j] * arr[k] * arr[m] * arr[n]))\n            if ((product > max_product)); then\n              max_product=$product\n              max_len=$((n-i+1))\n              max_i=$i\n              max_j=$j\n              max_k=$k\n              max_m=$m\n              max_n=$n\n            elif ((product == max_product)); then\n              if ((n-i+1 > max_len)); then\n                max_product=$product\n                max_len=$((n-i+1))\n                max_i=$i\n                max_j=$j\n                max_k=$k\n                max_m=$m\n                max_n=$n\n              fi\n            fi\n          done\n        done\n      done\n    done\n  done\n\n  echo -n \"$max_product: \"\n  for ((i=max_i; i<=max_n; i++)); do\n    echo -n \"${arr[i]} \"\n  done\n  echo\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=()\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i product=0\n  local -i len=0\n\n  for i in $1; do\n    arr[${#arr[@]}]=$i\n  done\n\n  len=${#arr[@]}\n  for ((i=0; i<len; i++)); do\n    product=1\n    for ((j=i; j<len; j++)); do\n      product=$((product*arr[j]))\n      if ((product>max)); then\n        max=$product\n      fi\n    done\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a a=($1)\n  local -a p=(${a[0]})\n  local -a n=(${a[0]})\n  local max=${a[0]}\n  local i\n  for ((i=1; i<${#a[@]}; i++)); do\n    p[i]=$(( ${a[i]} * ${p[i-1]} ))\n    n[i]=$(( ${a[i]} * ${n[i-1]} ))\n    if (( ${p[i]} > ${n[i]} )); then\n      n[i]=${p[i]}\n    else\n      p[i]=${n[i]}\n    fi\n    if (( ${n[i]} > $max )); then\n      max=${n[i]}\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n  local i\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local curr=${arr[i]}\n    local max_product_candidate=$((max_product * curr))\n    local min_product_candidate=$((min_product * curr))\n    max_product=$((max_product_candidate > min_product_candidate ? max_product_candidate : min_product_candidate))\n    max_product=$((max_product > curr ? max_product : curr))\n    min_product=$((max_product_candidate < min_product_candidate ? max_product_candidate : min_product_candidate))\n    min_product=$((min_product < curr ? min_product : curr))\n    max_so_far=$((max_so_far > max_product ? max_so_far : max_product))\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=($1)\n    local max_product=${arr[0]}\n    local min_product=${arr[0]}\n    local max_so_far=$max_product\n\n    for ((i=1; i<${#arr[@]}; i++)); do\n        local curr=${arr[i]}\n        local max_product_candidate=$((max_product * curr))\n        local min_product_candidate=$((min_product * curr))\n        max_product=$((max_product_candidate > min_product_candidate ? max_product_candidate : min_product_candidate))\n        max_product=$((max_product > curr ? max_product : curr))\n        min_product=$((max_product_candidate < min_product_candidate ? max_product_candidate : min_product_candidate))\n        min_product=$((min_product < curr ? min_product : curr))\n        max_so_far=$((max_so_far > max_product ? max_so_far : max_product))\n    done\n\n    echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local input=($1)\n  local max_product=${input[0]}\n  local max_product_ending_here=${input[0]}\n  local min_product_ending_here=${input[0]}\n  local max_product_so_far=$max_product\n\n  for (( i=1; i<${#input[@]}; i++ )); do\n    local current=${input[$i]}\n    local max_product_ending_here_temp=$max_product_ending_here\n    max_product_ending_here=$(( max_product_ending_here * current ))\n    min_product_ending_here=$(( min_product_ending_here * current ))\n    max_product_ending_here=$(( max(max_product_ending_here, min_product_ending_here, current) ))\n    min_product_ending_here=$(( min(max_product_ending_here_temp, min_product_ending_here, current) ))\n    max_product_so_far=$(( max(max_product_so_far, max_product_ending_here) ))\n  done\n\n  echo $max_product_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp2f0qba_5.sh: line 17: max(max_product_ending_here, min_product_ending_here, current) : syntax error in expression (error token is \"(max_product_ending_here, min_product_ending_here, current) \")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local arr=($1)\n  local max=${arr[0]}\n  local min=${arr[0]}\n  local result=${arr[0]}\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local curr=${arr[$i]}\n    local temp=$max\n    max=$(($max * $curr))\n    min=$(($min * $curr))\n    max=$(($max > $min ? $max : $min))\n    min=$(($temp * $curr))\n    max=$(($max > $min ? $max : $min))\n    min=$(($temp * $curr))\n    max=$(($max > $curr ? $max : $curr))\n    min=$(($min < $curr ? $min : $curr))\n    result=$(($result > $max ? $result : $max))\n  done\n  echo $result\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max=${arr[0]}\n  local min=${arr[0]}\n  local result=${arr[0]}\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local tmp_max=$max\n    local tmp_min=$min\n    max=$(echo -e \"${arr[$i]} ${tmp_max} ${tmp_min}\" | tr ' ' '\\n' | sort -n | tail -n 1)\n    min=$(echo -e \"${arr[$i]} ${tmp_max} ${tmp_min}\" | tr ' ' '\\n' | sort -n | head -n 1)\n    result=$(echo -e \"$result $max\" | tr ' ' '\\n' | sort -n | tail -n 1)\n  done\n  echo $result\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local max=0\n    local min=0\n    local result=0\n    for i in $1; do\n        if [[ $i -eq 0 ]]; then\n            max=0\n            min=0\n        elif [[ $i -gt 0 ]]; then\n            max=$((max * i))\n            min=$((min * i))\n        else\n            local tmp=$max\n            max=$((min * i))\n            min=$((tmp * i))\n        fi\n        if [[ $max -lt 0 ]]; then\n            max=0\n        fi\n        if [[ $min -gt 0 ]]; then\n            min=0\n        fi\n        if [[ $max -gt $result ]]; then\n            result=$max\n        fi\n    done\n    echo $result\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=($1)\n    local -i max_product=${arr[0]}\n    local -i curr_product=${arr[0]}\n    local -i curr_min_product=${arr[0]}\n    local -i curr_max_product=${arr[0]}\n    local -i i=1\n\n    while [ $i -lt ${#arr[@]} ]; do\n        local -i curr_product=$((curr_product * arr[i]))\n        curr_min_product=$((curr_product < curr_min_product ? curr_product : curr_min_product))\n        curr_max_product=$((curr_product > curr_max_product ? curr_product : curr_max_product))\n        max_product=$((max_product > curr_max_product ? max_product : curr_max_product))\n        if [ $curr_product -eq 0 ]; then\n            curr_product=1\n            curr_min_product=1\n            curr_max_product=1\n        fi\n        i=$((i + 1))\n    done\n\n    echo $max_product\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=${arr[0]}\n\n  for (( i=1; i<${#arr[@]}; i++ )); do\n    local curr=${arr[$i]}\n    local temp=$max_product\n    max_product=$(max $max_product $min_product $curr)\n    min_product=$(min $temp $min_product $curr)\n    max_so_far=$(max $max_so_far $max_product)\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp_cdlxdcy.sh: line 14: max: command not found\\n/tmp/tmp_cdlxdcy.sh: line 15: min: command not found\\n/tmp/tmp_cdlxdcy.sh: line 16: max: command not found\\n/tmp/tmp_cdlxdcy.sh: line 14: max: command not found\\n/tmp/tmp_cdlxdcy.sh: line 15: min: command not found\\n/tmp/tmp_cdlxdcy.sh: line 16: max: command not found\\n/tmp/tmp_cdlxdcy.sh: line 14: max: command not found\\n/tmp/tmp_cdlxdcy.sh: line 15: min: command not found\\n/tmp/tmp_cdlxdcy.sh: line 16: max: command not found\\n/tmp/tmp_cdlxdcy.sh: line 14: max: command not found\\n/tmp/tmp_cdlxdcy.sh: line 15: min: command not found\\n/tmp/tmp_cdlxdcy.sh: line 16: max: command not found\\n/tmp/tmp_cdlxdcy.sh: line 14: max: command not found\\n/tmp/tmp_cdlxdcy.sh: line 15: min: command not found\\n/tmp/tmp_cdlxdcy.sh: line 16: max: command not found\\n/tmp/tmp_cdlxdcy.sh: line 14: max: command not found\\n/tmp/tmp_cdlxdcy.sh: line 15: min: command not found\\n/tmp/tmp_cdlxdcy.sh: line 16: max: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local curr=${arr[i]}\n    local temp_max=$max_product\n    local temp_min=$min_product\n    max_product=$(max $curr $((curr * temp_max)) $((curr * temp_min)))\n    min_product=$(min $curr $((curr * temp_max)) $((curr * temp_min)))\n    max_so_far=$(max $max_so_far $max_product)\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpugzce_1q.sh: line 15: max: command not found\\n/tmp/tmpugzce_1q.sh: line 16: min: command not found\\n/tmp/tmpugzce_1q.sh: line 17: max: command not found\\n/tmp/tmpugzce_1q.sh: line 15: max: command not found\\n/tmp/tmpugzce_1q.sh: line 16: min: command not found\\n/tmp/tmpugzce_1q.sh: line 17: max: command not found\\n/tmp/tmpugzce_1q.sh: line 15: max: command not found\\n/tmp/tmpugzce_1q.sh: line 16: min: command not found\\n/tmp/tmpugzce_1q.sh: line 17: max: command not found\\n/tmp/tmpugzce_1q.sh: line 15: max: command not found\\n/tmp/tmpugzce_1q.sh: line 16: min: command not found\\n/tmp/tmpugzce_1q.sh: line 17: max: command not found\\n/tmp/tmpugzce_1q.sh: line 15: max: command not found\\n/tmp/tmpugzce_1q.sh: line 16: min: command not found\\n/tmp/tmpugzce_1q.sh: line 17: max: command not found\\n/tmp/tmpugzce_1q.sh: line 15: max: command not found\\n/tmp/tmpugzce_1q.sh: line 16: min: command not found\\n/tmp/tmpugzce_1q.sh: line 17: max: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=(\"$@\")\n    local max=0\n    local min=0\n    local max_so_far=0\n    local max_ending_here=0\n    local min_ending_here=0\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n\n    for ((i=0; i<len; i++)); do\n        max_ending_here=${arr[i]}\n        min_ending_here=${arr[i]}\n        if [[ $max_ending_here -eq 0 ]]; then\n            max_ending_here=1\n        fi\n        if [[ $min_ending_here -eq 0 ]]; then\n            min_ending_here=1\n        fi\n        for ((j=i+1; j<len; j++)); do\n            max_ending_here=$((max_ending_here * arr[j]))\n            min_ending_here=$((min_ending_here * arr[j]))\n            if [[ $max_ending_here -eq 0 ]]; then\n                max_ending_here=1\n            fi\n            if [[ $min_ending_here -eq 0 ]]; then\n                min_ending_here=1\n            fi\n            if [[ $max_ending_here -gt $max_so_far ]]; then\n                max_so_far=$max_ending_here\n            fi\n            if [[ $min_ending_here -lt $min ]]; then\n                min=$min_ending_here\n            fi\n        done\n    done\n    echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpni2sy7ep.sh: line 19: [[: 1 -2 -3 0 7 -8 -2: syntax error in expression (error token is \"0 7 -8 -2\")\\n/tmp/tmpni2sy7ep.sh: line 22: [[: 1 -2 -3 0 7 -8 -2: syntax error in expression (error token is \"0 7 -8 -2\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local -i max=${arr[0]}\n  local -i min=${arr[0]}\n  local -i result=${arr[0]}\n  local -i tmp\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    tmp=max\n    max=$((max > min ? max : min))\n    max=$((max > arr[i] ? max : arr[i]))\n    min=$((tmp < min ? tmp : min))\n    min=$((min < arr[i] ? min : arr[i]))\n    min=$((min < 1 ? 1 : min))\n    result=$((result > max ? result : max))\n  done\n\n  echo $result\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n\n  for (( i=1; i<${#arr[@]}; i++ )); do\n    local curr=${arr[$i]}\n    local temp_max=$max_product\n    local temp_min=$min_product\n    max_product=$(max $curr $((curr*temp_max)) $((curr*temp_min)))\n    min_product=$(min $curr $((curr*temp_max)) $((curr*temp_min)))\n    max_so_far=$(max $max_so_far $max_product)\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmphygxv71d.sh: line 15: max: command not found\\n/tmp/tmphygxv71d.sh: line 16: min: command not found\\n/tmp/tmphygxv71d.sh: line 17: max: command not found\\n/tmp/tmphygxv71d.sh: line 15: max: command not found\\n/tmp/tmphygxv71d.sh: line 16: min: command not found\\n/tmp/tmphygxv71d.sh: line 17: max: command not found\\n/tmp/tmphygxv71d.sh: line 15: max: command not found\\n/tmp/tmphygxv71d.sh: line 16: min: command not found\\n/tmp/tmphygxv71d.sh: line 17: max: command not found\\n/tmp/tmphygxv71d.sh: line 15: max: command not found\\n/tmp/tmphygxv71d.sh: line 16: min: command not found\\n/tmp/tmphygxv71d.sh: line 17: max: command not found\\n/tmp/tmphygxv71d.sh: line 15: max: command not found\\n/tmp/tmphygxv71d.sh: line 16: min: command not found\\n/tmp/tmphygxv71d.sh: line 17: max: command not found\\n/tmp/tmphygxv71d.sh: line 15: max: command not found\\n/tmp/tmphygxv71d.sh: line 16: min: command not found\\n/tmp/tmphygxv71d.sh: line 17: max: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=($1)\n    local max=${arr[0]}\n    local min=${arr[0]}\n    local result=${arr[0]}\n    for ((i=1; i<${#arr[@]}; i++)); do\n        local tmp=$max\n        max=$(max $max $(max $min $((${arr[$i]} * $max))))\n        min=$(min $min $(min $tmp $((${arr[$i]} * $min))))\n        result=$(max $result $max)\n    done\n    echo $result\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpah3sqhdo.sh: line 12: max: command not found\\n/tmp/tmpah3sqhdo.sh: line 12: max: command not found\\n/tmp/tmpah3sqhdo.sh: line 13: min: command not found\\n/tmp/tmpah3sqhdo.sh: line 13: min: command not found\\n/tmp/tmpah3sqhdo.sh: line 14: max: command not found\\n/tmp/tmpah3sqhdo.sh: line 12: -3 * : syntax error: operand expected (error token is \"* \")\\n/tmp/tmpah3sqhdo.sh: line 12: max: command not found\\n/tmp/tmpah3sqhdo.sh: line 13: -3 * : syntax error: operand expected (error token is \"* \")\\n/tmp/tmpah3sqhdo.sh: line 13: min: command not found\\n/tmp/tmpah3sqhdo.sh: line 14: max: command not found\\n/tmp/tmpah3sqhdo.sh: line 12: 0 * : syntax error: operand expected (error token is \"* \")\\n/tmp/tmpah3sqhdo.sh: line 12: max: command not found\\n/tmp/tmpah3sqhdo.sh: line 13: 0 * : syntax error: operand expected (error token is \"* \")\\n/tmp/tmpah3sqhdo.sh: line 13: min: command not found\\n/tmp/tmpah3sqhdo.sh: line 14: max: command not found\\n/tmp/tmpah3sqhdo.sh: line 12: 7 * : syntax error: operand expected (error token is \"* \")\\n/tmp/tmpah3sqhdo.sh: line 12: max: command not found\\n/tmp/tmpah3sqhdo.sh: line 13: 7 * : syntax error: operand expected (error token is \"* \")\\n/tmp/tmpah3sqhdo.sh: line 13: min: command not found\\n/tmp/tmpah3sqhdo.sh: line 14: max: command not found\\n/tmp/tmpah3sqhdo.sh: line 12: -8 * : syntax error: operand expected (error token is \"* \")\\n/tmp/tmpah3sqhdo.sh: line 12: max: command not found\\n/tmp/tmpah3sqhdo.sh: line 13: -8 * : syntax error: operand expected (error token is \"* \")\\n/tmp/tmpah3sqhdo.sh: line 13: min: command not found\\n/tmp/tmpah3sqhdo.sh: line 14: max: command not found\\n/tmp/tmpah3sqhdo.sh: line 12: -2 * : syntax error: operand expected (error token is \"* \")\\n/tmp/tmpah3sqhdo.sh: line 12: max: command not found\\n/tmp/tmpah3sqhdo.sh: line 13: -2 * : syntax error: operand expected (error token is \"* \")\\n/tmp/tmpah3sqhdo.sh: line 13: min: command not found\\n/tmp/tmpah3sqhdo.sh: line 14: max: command not found\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max=${arr[0]}\n  local min=${arr[0]}\n  local result=$max\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local curr=${arr[i]}\n    local temp_max=$max\n    local temp_min=$min\n    max=$(max $((curr * temp_max)) $((curr * temp_min)) $curr)\n    min=$(min $((curr * temp_max)) $((curr * temp_min)) $curr)\n    result=$(max $result $max)\n  done\n  echo $result\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpf7s6t093.sh: line 14: max: command not found\\n/tmp/tmpf7s6t093.sh: line 15: min: command not found\\n/tmp/tmpf7s6t093.sh: line 16: max: command not found\\n/tmp/tmpf7s6t093.sh: line 14: max: command not found\\n/tmp/tmpf7s6t093.sh: line 15: min: command not found\\n/tmp/tmpf7s6t093.sh: line 16: max: command not found\\n/tmp/tmpf7s6t093.sh: line 14: max: command not found\\n/tmp/tmpf7s6t093.sh: line 15: min: command not found\\n/tmp/tmpf7s6t093.sh: line 16: max: command not found\\n/tmp/tmpf7s6t093.sh: line 14: max: command not found\\n/tmp/tmpf7s6t093.sh: line 15: min: command not found\\n/tmp/tmpf7s6t093.sh: line 16: max: command not found\\n/tmp/tmpf7s6t093.sh: line 14: max: command not found\\n/tmp/tmpf7s6t093.sh: line 15: min: command not found\\n/tmp/tmpf7s6t093.sh: line 16: max: command not found\\n/tmp/tmpf7s6t093.sh: line 14: max: command not found\\n/tmp/tmpf7s6t093.sh: line 15: min: command not found\\n/tmp/tmpf7s6t093.sh: line 16: max: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr\n  IFS=' ' read -r -a arr <<< \"$1\"\n  local max_product=0\n  local max_product_ending_here=1\n  local min_product_ending_here=1\n  for i in \"${arr[@]}\"; do\n    if (( i > 0 )); then\n      max_product_ending_here=$(( max_product_ending_here * i ))\n      min_product_ending_here=$(( min_product_ending_here * i ))\n    else\n      local temp=$max_product_ending_here\n      max_product_ending_here=$(( min_product_ending_here * i ))\n      min_product_ending_here=$(( temp * i ))\n    fi\n    if (( max_product_ending_here > max_product )); then\n      max_product=$max_product_ending_here\n    fi\n    if (( max_product_ending_here < 1 )); then\n      max_product_ending_here=1\n    fi\n    if (( min_product_ending_here > 1 )); then\n      min_product_ending_here=1\n    fi\n  done\n  echo $max_product\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local array=($1)\n    local max_product=${array[0]}\n    local min_product=${array[0]}\n    local max_so_far=${array[0]}\n\n    for ((i = 1; i < ${#array[@]}; i++)); do\n        local current=${array[i]}\n        local max_product_candidate=$((max_product * current))\n        local min_product_candidate=$((min_product * current))\n        max_product=$((max_product_candidate > min_product_candidate ? max_product_candidate : min_product_candidate))\n        max_product=$((max_product > current ? max_product : current))\n        min_product=$((max_product_candidate < min_product_candidate ? max_product_candidate : min_product_candidate))\n        min_product=$((min_product < current ? min_product : current))\n        max_so_far=$((max_so_far > max_product ? max_so_far : max_product))\n    done\n\n    echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max=${arr[0]}\n  local min=${arr[0]}\n  local max_so_far=${arr[0]}\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local tmp=$max\n    max=$((max > min ? max : min))\n    max=$((max > arr[i] ? max : arr[i]))\n    min=$((tmp < min ? tmp : min))\n    min=$((min < arr[i] ? min : arr[i]))\n    max_so_far=$((max_so_far > max ? max_so_far : max))\n    max=$((max * arr[i]))\n    min=$((min * arr[i]))\n  done\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a array=($1)\n    local -a max_product\n    local -a min_product\n    local -a max_so_far\n    local -a min_so_far\n\n    max_product[0]=${array[0]}\n    min_product[0]=${array[0]}\n    max_so_far[0]=${array[0]}\n    min_so_far[0]=${array[0]}\n\n    for ((i=1; i<${#array[@]}; i++)); do\n        max_product[i]=$(max ${array[i]} $((${array[i]} * ${max_product[$((i-1))]})) $((${array[i]} * ${min_product[$((i-1))]})))\n        min_product[i]=$(min ${array[i]} $((${array[i]} * ${max_product[$((i-1))]})) $((${array[i]} * ${min_product[$((i-1))]})))\n        max_so_far[i]=$(max ${max_so_far[$((i-1))]} ${max_product[i]})\n        min_so_far[i]=$(min ${min_so_far[$((i-1))]} ${min_product[i]})\n    done\n\n    echo ${max_so_far[@]}\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpmxbgz921.sh: line 18: max: command not found\\n/tmp/tmpmxbgz921.sh: line 19: min: command not found\\n/tmp/tmpmxbgz921.sh: line 20: max: command not found\\n/tmp/tmpmxbgz921.sh: line 21: min: command not found\\n/tmp/tmpmxbgz921.sh: line 18: -3 * : syntax error: operand expected (error token is \"* \")\\n/tmp/tmpmxbgz921.sh: line 19: -3 * : syntax error: operand expected (error token is \"* \")\\n/tmp/tmpmxbgz921.sh: line 20: max: command not found\\n/tmp/tmpmxbgz921.sh: line 21: min: command not found\\n/tmp/tmpmxbgz921.sh: line 18: 0 * : syntax error: operand expected (error token is \"* \")\\n/tmp/tmpmxbgz921.sh: line 19: 0 * : syntax error: operand expected (error token is \"* \")\\n/tmp/tmpmxbgz921.sh: line 20: max: command not found\\n/tmp/tmpmxbgz921.sh: line 21: min: command not found\\n/tmp/tmpmxbgz921.sh: line 18: 7 * : syntax error: operand expected (error token is \"* \")\\n/tmp/tmpmxbgz921.sh: line 19: 7 * : syntax error: operand expected (error token is \"* \")\\n/tmp/tmpmxbgz921.sh: line 20: max: command not found\\n/tmp/tmpmxbgz921.sh: line 21: min: command not found\\n/tmp/tmpmxbgz921.sh: line 18: -8 * : syntax error: operand expected (error token is \"* \")\\n/tmp/tmpmxbgz921.sh: line 19: -8 * : syntax error: operand expected (error token is \"* \")\\n/tmp/tmpmxbgz921.sh: line 20: max: command not found\\n/tmp/tmpmxbgz921.sh: line 21: min: command not found\\n/tmp/tmpmxbgz921.sh: line 18: -2 * : syntax error: operand expected (error token is \"* \")\\n/tmp/tmpmxbgz921.sh: line 19: -2 * : syntax error: operand expected (error token is \"* \")\\n/tmp/tmpmxbgz921.sh: line 20: max: command not found\\n/tmp/tmpmxbgz921.sh: line 21: min: command not found\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n\n  for (( i=1; i<${#arr[@]}; i++ )); do\n    local curr=${arr[$i]}\n    local max_product_candidates=($max_product $min_product $curr)\n    local min_product_candidates=($max_product $min_product $curr)\n\n    max_product=$(echo \"${max_product_candidates[@]}\" | tr ' ' '\\n' | sort -nr | head -n1)\n    min_product=$(echo \"${min_product_candidates[@]}\" | tr ' ' '\\n' | sort -n | head -n1)\n\n    max_so_far=$(echo \"$max_so_far $max_product\" | tr ' ' '\\n' | sort -nr | head -n1)\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=()\n  local -i i=0\n  local -i max_product=0\n  local -i product=0\n  local -i negative_count=0\n  local -i negative_index=0\n  local -i positive_index=0\n  local -i positive_count=0\n  local -i zero_index=0\n  local -i zero_count=0\n  local -i arr_len=0\n  local -i max_index=0\n  local -i min_index=0\n  local -i max_value=0\n  local -i min_value=0\n  local -i max_value_index=0\n  local -i min_value_index=0\n  local -i max_value_count=0\n  local -i min_value_count=0\n  local -i max_value_product=0\n  local -i min_value_product=0\n  local -i max_value_product_index=0\n  local -i min_value_product_index=0\n  local -i max_value_product_count=0\n  local -i min_value_product_count=0\n  local -i max_value_product_value=0\n  local -i min_value_product_value=0\n  local -i max_value_product_value_index=0\n  local -i min_value_product_value_index=0\n  local -i max_value_product_value_count=0\n  local -i min_value_product_value_count=0\n  local -i max_value_product_value_product=0\n  local -i min_value_product_value_product=0\n  local -i max_value_product_value_product_index=0\n  local -i min_value_product_value_product_index=0\n  local -i max_value_product_value_product_count=0\n  local -i min_value_product_value_product_count=0\n  local -i max_value_product_value_product_value=0\n  local -i min_value_product_value_product_value=0\n  local -i max_value\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=($1)\n    local max=${arr[0]}\n    local min=${arr[0]}\n    local result=${arr[0]}\n\n    for ((i=1; i<${#arr[@]}; i++)); do\n        local tmp=$max\n        max=$(($min * ${arr[$i]}))\n        min=$(($tmp * ${arr[$i]}))\n        if [[ $max -lt $min ]]; then\n            max=$min\n            min=$tmp\n        fi\n        if [[ $max -lt ${arr[$i]} ]]; then\n            max=${arr[$i]}\n        fi\n        if [[ $min -gt ${arr[$i]} ]]; then\n            min=${arr[$i]}\n        fi\n        if [[ $result -lt $max ]]; then\n            result=$max\n        fi\n    done\n    echo $result\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max=${arr[0]}\n  local min=${arr[0]}\n  local result=${arr[0]}\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local tmp_max=$max\n    local tmp_min=$min\n    max=$(echo \"$tmp_max * ${arr[i]} ${tmp_min} * ${arr[i]} ${arr[i]}\" | tr ' ' '\\n' | sort -n | tail -n1)\n    min=$(echo \"$tmp_max * ${arr[i]} ${tmp_min} * ${arr[i]} ${arr[i]}\" | tr ' ' '\\n' | sort -n | head -n1)\n    result=$(echo \"$result $max\" | tr ' ' '\\n' | sort -n | tail -n1)\n  done\n  echo $result\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=($1)\n    local -a max_arr\n    local -a min_arr\n    local max_product=${arr[0]}\n    local max_product_tmp=${arr[0]}\n    local min_product_tmp=${arr[0]}\n    local i=0\n    local j=0\n    local k=0\n    local len=${#arr[@]}\n\n    for ((i=0; i<len; i++)); do\n        if [[ ${arr[i]} -gt 0 ]]; then\n            max_product_tmp=$((max_product_tmp * arr[i]))\n            min_product_tmp=$((min_product_tmp * arr[i]))\n        elif [[ ${arr[i]} -lt 0 ]]; then\n            if [[ ${min_product_tmp} -lt 0 ]]; then\n                max_product_tmp=$((min_product_tmp * arr[i]))\n            else\n                max_product_tmp=${arr[i]}\n            fi\n            min_product_tmp=$((max_product_tmp * arr[i]))\n        else\n            max_product_tmp=0\n            min_product_tmp=0\n        fi\n        if [[ ${max_product_tmp} -gt ${max_product} ]]; then\n            max_product=${max_product_tmp}\n            max_arr[k]=${max_product_tmp}\n            k=$((k+1))\n        fi\n    done\n\n    echo ${max_arr[@]}\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local array=($1)\n  local max_product=${array[0]}\n  local min_product=${array[0]}\n  local max_so_far=$max_product\n\n  for ((i=1; i<${#array[@]}; i++)); do\n    local current=${array[$i]}\n    local temp_max=$max_product\n    local temp_min=$min_product\n\n    max_product=$(max $current $(($temp_max * $current)))\n    max_product=$(max $max_product $(($temp_min * $current)))\n\n    min_product=$(min $current $(($temp_max * $current)))\n    min_product=$(min $min_product $(($temp_min * $current)))\n\n    max_so_far=$(max $max_so_far $max_product)\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpf4vn_s03.sh: line 16: max: command not found\\n/tmp/tmpf4vn_s03.sh: line 17: max: command not found\\n/tmp/tmpf4vn_s03.sh: line 19: min: command not found\\n/tmp/tmpf4vn_s03.sh: line 20: min: command not found\\n/tmp/tmpf4vn_s03.sh: line 22: max: command not found\\n/tmp/tmpf4vn_s03.sh: line 16: * -3: syntax error: operand expected (error token is \"* -3\")\\n/tmp/tmpf4vn_s03.sh: line 17: * -3: syntax error: operand expected (error token is \"* -3\")\\n/tmp/tmpf4vn_s03.sh: line 19: * -3: syntax error: operand expected (error token is \"* -3\")\\n/tmp/tmpf4vn_s03.sh: line 20: * -3: syntax error: operand expected (error token is \"* -3\")\\n/tmp/tmpf4vn_s03.sh: line 22: max: command not found\\n/tmp/tmpf4vn_s03.sh: line 16: * 0: syntax error: operand expected (error token is \"* 0\")\\n/tmp/tmpf4vn_s03.sh: line 17: * 0: syntax error: operand expected (error token is \"* 0\")\\n/tmp/tmpf4vn_s03.sh: line 19: * 0: syntax error: operand expected (error token is \"* 0\")\\n/tmp/tmpf4vn_s03.sh: line 20: * 0: syntax error: operand expected (error token is \"* 0\")\\n/tmp/tmpf4vn_s03.sh: line 22: max: command not found\\n/tmp/tmpf4vn_s03.sh: line 16: * 7: syntax error: operand expected (error token is \"* 7\")\\n/tmp/tmpf4vn_s03.sh: line 17: * 7: syntax error: operand expected (error token is \"* 7\")\\n/tmp/tmpf4vn_s03.sh: line 19: * 7: syntax error: operand expected (error token is \"* 7\")\\n/tmp/tmpf4vn_s03.sh: line 20: * 7: syntax error: operand expected (error token is \"* 7\")\\n/tmp/tmpf4vn_s03.sh: line 22: max: command not found\\n/tmp/tmpf4vn_s03.sh: line 16: * -8: syntax error: operand expected (error token is \"* -8\")\\n/tmp/tmpf4vn_s03.sh: line 17: * -8: syntax error: operand expected (error token is \"* -8\")\\n/tmp/tmpf4vn_s03.sh: line 19: * -8: syntax error: operand expected (error token is \"* -8\")\\n/tmp/tmpf4vn_s03.sh: line 20: * -8: syntax error: operand expected (error token is \"* -8\")\\n/tmp/tmpf4vn_s03.sh: line 22: max: command not found\\n/tmp/tmpf4vn_s03.sh: line 16: * -2: syntax error: operand expected (error token is \"* -2\")\\n/tmp/tmpf4vn",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=($1)\n    local max_product=${arr[0]}\n    local min_product=${arr[0]}\n    local max_so_far=$max_product\n\n    for (( i=1; i<${#arr[@]}; i++ )); do\n        local current=${arr[i]}\n        local max_product_candidate=$(( max_product * current ))\n        local min_product_candidate=$(( min_product * current ))\n        max_product=$(( max_product_candidate > min_product_candidate ? max_product_candidate : min_product_candidate ))\n        max_product=$(( max_product > current ? max_product : current ))\n        min_product=$(( max_product_candidate < min_product_candidate ? max_product_candidate : min_product_candidate ))\n        min_product=$(( min_product < current ? min_product : current ))\n        max_so_far=$(( max_so_far > max_product ? max_so_far : max_product ))\n    done\n\n    echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max=${arr[0]}\n  local min=${arr[0]}\n  local result=${arr[0]}\n\n  for (( i=1; i<${#arr[@]}; i++ )); do\n    local curr=${arr[i]}\n    local temp=$max\n    max=$(echo -e \"$max\\n$min\\n$curr\" | sort -n | tail -n 1)\n    min=$(echo -e \"$temp\\n$min\\n$curr\" | sort -n | head -n 1)\n    result=$(echo -e \"$result\\n$max\" | sort -n | tail -n 1)\n  done\n\n  echo $result\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max=${arr[0]}\n  local min=${arr[0]}\n  local result=${arr[0]}\n\n  for (( i=1; i<${#arr[@]}; i++ )); do\n    local tmp_max=$max\n    local tmp_min=$min\n    max=$((${arr[i]} * $tmp_max > ${arr[i]} * $tmp_min ? ${arr[i]} * $tmp_max : ${arr[i]} * $tmp_min))\n    max=$(($max > ${arr[i]} ? $max : ${arr[i]}))\n    min=$((${arr[i]} * $tmp_max < ${arr[i]} * $tmp_min ? ${arr[i]} * $tmp_max : ${arr[i]} * $tmp_min))\n    min=$(($min < ${arr[i]} ? $min : ${arr[i]}))\n    result=$(($result > $max ? $result : $max))\n  done\n\n  echo $result\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local max=1\n    local min=1\n    local result=1\n    for i in $1; do\n        if (( i < 0 )); then\n            local tmp=$max\n            max=$min\n            min=$tmp\n        fi\n        max=$(( max * i ))\n        min=$(( min * i ))\n        result=$(( result > max ? result : max ))\n    done\n    echo $result\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max=${arr[0]}\n  local min=${arr[0]}\n  local max_so_far=$max\n  local i\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local cur=${arr[$i]}\n    local tmp=$max\n    max=$(max $max $(max $cur $(($min * $cur))))\n    min=$(min $min $(min $cur $(($tmp * $cur))))\n    max_so_far=$(max $max_so_far $max)\n  done\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpudael3ii.sh: line 14: max: command not found\\n/tmp/tmpudael3ii.sh: line 14: max: command not found\\n/tmp/tmpudael3ii.sh: line 15: min: command not found\\n/tmp/tmpudael3ii.sh: line 15: min: command not found\\n/tmp/tmpudael3ii.sh: line 16: max: command not found\\n/tmp/tmpudael3ii.sh: line 14: * -3: syntax error: operand expected (error token is \"* -3\")\\n/tmp/tmpudael3ii.sh: line 14: max: command not found\\n/tmp/tmpudael3ii.sh: line 15: * -3: syntax error: operand expected (error token is \"* -3\")\\n/tmp/tmpudael3ii.sh: line 15: min: command not found\\n/tmp/tmpudael3ii.sh: line 16: max: command not found\\n/tmp/tmpudael3ii.sh: line 14: * 0: syntax error: operand expected (error token is \"* 0\")\\n/tmp/tmpudael3ii.sh: line 14: max: command not found\\n/tmp/tmpudael3ii.sh: line 15: * 0: syntax error: operand expected (error token is \"* 0\")\\n/tmp/tmpudael3ii.sh: line 15: min: command not found\\n/tmp/tmpudael3ii.sh: line 16: max: command not found\\n/tmp/tmpudael3ii.sh: line 14: * 7: syntax error: operand expected (error token is \"* 7\")\\n/tmp/tmpudael3ii.sh: line 14: max: command not found\\n/tmp/tmpudael3ii.sh: line 15: * 7: syntax error: operand expected (error token is \"* 7\")\\n/tmp/tmpudael3ii.sh: line 15: min: command not found\\n/tmp/tmpudael3ii.sh: line 16: max: command not found\\n/tmp/tmpudael3ii.sh: line 14: * -8: syntax error: operand expected (error token is \"* -8\")\\n/tmp/tmpudael3ii.sh: line 14: max: command not found\\n/tmp/tmpudael3ii.sh: line 15: * -8: syntax error: operand expected (error token is \"* -8\")\\n/tmp/tmpudael3ii.sh: line 15: min: command not found\\n/tmp/tmpudael3ii.sh: line 16: max: command not found\\n/tmp/tmpudael3ii.sh: line 14: * -2: syntax error: operand expected (error token is \"* -2\")\\n/tmp/tmpudael3ii.sh: line 14: max: command not found\\n/tmp/tmpudael3ii.sh: line 15: * -2: syntax error: operand expected (error token is \"* -2\")\\n/tmp/tmpudael3ii.sh: line 15: min: command not found\\n/tmp/tmpudael3ii.sh: line 16: max: command not found\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=($1)\n    local max=${arr[0]}\n    local min=${arr[0]}\n    local max_so_far=${arr[0]}\n    local i\n    for ((i=1; i<${#arr[@]}; i++)); do\n        local temp=max\n        max=$(max $max $(max $min ${arr[i]}))\n        min=$(min $min $(min $temp ${arr[i]}))\n        max_so_far=$(max $max_so_far $max)\n    done\n    echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpbgxn58wk.sh: line 13: max: command not found\\n/tmp/tmpbgxn58wk.sh: line 13: max: command not found\\n/tmp/tmpbgxn58wk.sh: line 14: min: command not found\\n/tmp/tmpbgxn58wk.sh: line 14: min: command not found\\n/tmp/tmpbgxn58wk.sh: line 15: max: command not found\\n/tmp/tmpbgxn58wk.sh: line 13: max: command not found\\n/tmp/tmpbgxn58wk.sh: line 13: max: command not found\\n/tmp/tmpbgxn58wk.sh: line 14: min: command not found\\n/tmp/tmpbgxn58wk.sh: line 14: min: command not found\\n/tmp/tmpbgxn58wk.sh: line 15: max: command not found\\n/tmp/tmpbgxn58wk.sh: line 13: max: command not found\\n/tmp/tmpbgxn58wk.sh: line 13: max: command not found\\n/tmp/tmpbgxn58wk.sh: line 14: min: command not found\\n/tmp/tmpbgxn58wk.sh: line 14: min: command not found\\n/tmp/tmpbgxn58wk.sh: line 15: max: command not found\\n/tmp/tmpbgxn58wk.sh: line 13: max: command not found\\n/tmp/tmpbgxn58wk.sh: line 13: max: command not found\\n/tmp/tmpbgxn58wk.sh: line 14: min: command not found\\n/tmp/tmpbgxn58wk.sh: line 14: min: command not found\\n/tmp/tmpbgxn58wk.sh: line 15: max: command not found\\n/tmp/tmpbgxn58wk.sh: line 13: max: command not found\\n/tmp/tmpbgxn58wk.sh: line 13: max: command not found\\n/tmp/tmpbgxn58wk.sh: line 14: min: command not found\\n/tmp/tmpbgxn58wk.sh: line 14: min: command not found\\n/tmp/tmpbgxn58wk.sh: line 15: max: command not found\\n/tmp/tmpbgxn58wk.sh: line 13: max: command not found\\n/tmp/tmpbgxn58wk.sh: line 13: max: command not found\\n/tmp/tmpbgxn58wk.sh: line 14: min: command not found\\n/tmp/tmpbgxn58wk.sh: line 14: min: command not found\\n/tmp/tmpbgxn58wk.sh: line 15: max: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a array=(\"$@\")\n  local max_product=0\n  local current_product=1\n  for (( i=0; i<${#array[@]}; i++ )); do\n    current_product=$(( current_product * array[i] ))\n    if [[ $current_product -gt $max_product ]]; then\n      max_product=$current_product\n    fi\n    if [[ $current_product -eq 0 ]]; then\n      current_product=1\n    fi\n  done\n  echo $max_product\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp8ck0zup2.sh: line 10: 1 -2 -3 0 7 -8 -2: syntax error in expression (error token is \"0 7 -8 -2\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr\n  local -i i j k\n  local -i max_product max_product_here\n  local -i max_product_here_neg max_product_here_pos\n  local -i max_product_here_neg_temp max_product_here_pos_temp\n  local -i max_product_here_neg_temp_2 max_product_here_pos_temp_2\n  local -i max_product_here_neg_temp_3 max_product_here_pos_temp_3\n  local -i max_product_here_neg_temp_4 max_product_here_pos_temp_4\n  local -i max_product_here_neg_temp_5 max_product_here_pos_temp_5\n  local -i max_product_here_neg_temp_6 max_product_here_pos_temp_6\n  local -i max_product_here_neg_temp_7 max_product_here_pos_temp_7\n  local -i max_product_here_neg_temp_8 max_product_here_pos_temp_8\n  local -i max_product_here_neg_temp_9 max_product_here_pos_temp_9\n  local -i max_product_here_neg_temp_10 max_product_here_pos_temp_10\n  local -i max_product_here_neg_temp_11 max_product_here_pos_temp_11\n  local -i max_product_here_neg_temp_12 max_product_here_pos_temp_12\n  local -i max_product_here_neg_temp_13 max_product_here_pos_temp_13\n  local -i max_product_here_neg_temp_14 max_product_here_pos_temp_14\n  local -i max_product_here_neg_temp_15 max_product_here_pos_temp_15\n  local -i max_product_here_neg_temp_16 max_product_here_pos_temp_16\n  local -i max_product_here_neg_temp_17 max_product_here_pos_temp_17\n  local -i max_product_here_\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max=${arr[0]}\n  local min=${arr[0]}\n  local max_so_far=$max\n  local i\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local curr=${arr[i]}\n    local tmp=$max\n    max=$((max > 0 ? max : 1))\n    max=$((max * curr))\n    min=$((min < 0 ? min : 1))\n    min=$((min * curr))\n    max=$((max > min ? max : min))\n    min=$((tmp < min ? tmp : min))\n    max_so_far=$((max_so_far > max ? max_so_far : max))\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local curr=${arr[$i]}\n    local temp_max_product=$max_product\n    local temp_min_product=$min_product\n    max_product=$(max $curr $((curr*temp_max_product)) $((curr*temp_min_product)))\n    min_product=$(min $curr $((curr*temp_max_product)) $((curr*temp_min_product)))\n    max_so_far=$(max $max_so_far $max_product)\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp2lyncu38.sh: line 15: max: command not found\\n/tmp/tmp2lyncu38.sh: line 16: min: command not found\\n/tmp/tmp2lyncu38.sh: line 17: max: command not found\\n/tmp/tmp2lyncu38.sh: line 15: max: command not found\\n/tmp/tmp2lyncu38.sh: line 16: min: command not found\\n/tmp/tmp2lyncu38.sh: line 17: max: command not found\\n/tmp/tmp2lyncu38.sh: line 15: max: command not found\\n/tmp/tmp2lyncu38.sh: line 16: min: command not found\\n/tmp/tmp2lyncu38.sh: line 17: max: command not found\\n/tmp/tmp2lyncu38.sh: line 15: max: command not found\\n/tmp/tmp2lyncu38.sh: line 16: min: command not found\\n/tmp/tmp2lyncu38.sh: line 17: max: command not found\\n/tmp/tmp2lyncu38.sh: line 15: max: command not found\\n/tmp/tmp2lyncu38.sh: line 16: min: command not found\\n/tmp/tmp2lyncu38.sh: line 17: max: command not found\\n/tmp/tmp2lyncu38.sh: line 15: max: command not found\\n/tmp/tmp2lyncu38.sh: line 16: min: command not found\\n/tmp/tmp2lyncu38.sh: line 17: max: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=($1)\n    local max_product=${arr[0]}\n    local min_product=${arr[0]}\n    local max_so_far=$max_product\n    local i=1\n    local tmp\n    while [ $i -lt ${#arr[@]} ]; do\n        if [ ${arr[$i]} -lt 0 ]; then\n            tmp=$max_product\n            max_product=$min_product\n            min_product=$tmp\n        fi\n        max_product=$((max_product * arr[i]))\n        min_product=$((min_product * arr[i]))\n        max_product=$((max_product < arr[i] ? arr[i] : max_product))\n        min_product=$((min_product > arr[i] ? arr[i] : min_product))\n        max_so_far=$((max_so_far > max_product ? max_so_far : max_product))\n        i=$((i + 1))\n    done\n    echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a a=($1)\n  local max=${a[0]}\n  local min=${a[0]}\n  local max_product=${a[0]}\n  local i\n  for ((i=1; i<${#a[@]}; i++)); do\n    local tmp=$max\n    max=$(($max * ${a[i]}))\n    min=$(($min * ${a[i]}))\n    max=$(($max > $min ? $max : $min))\n    min=$(($tmp * ${a[i]}))\n    min=$(($min < $tmp ? $min : $tmp))\n    max_product=$(($max > $max_product ? $max : $max_product))\n  done\n  echo $max_product\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max=${arr[0]}\n  local min=${arr[0]}\n  local result=${arr[0]}\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local tmp=$max\n    max=$((${arr[i]} * $max > ${arr[i]} * $min ? ${arr[i]} * $max : ${arr[i]} * $min))\n    min=$((${arr[i]} * $tmp < ${arr[i]} * $min ? ${arr[i]} * $tmp : ${arr[i]} * $min))\n    result=$(($result > $max ? $result : $max))\n  done\n  echo $result\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local -a max_arr=()\n  local -a min_arr=()\n  local max=${arr[0]}\n  local min=${arr[0]}\n  local max_product=${arr[0]}\n  local i=0\n  local j=0\n  local k=0\n  local len=${#arr[@]}\n  local product=0\n\n  for ((i=0; i<len; i++)); do\n    if [[ ${arr[i]} -gt 0 ]]; then\n      max_arr[i]=$((max * arr[i]))\n      min_arr[i]=$((min * arr[i]))\n    else\n      max_arr[i]=$((min * arr[i]))\n      min_arr[i]=$((max * arr[i]))\n    fi\n\n    if [[ ${max_arr[i]} -gt ${min_arr[i]} ]]; then\n      max=${max_arr[i]}\n    else\n      max=${min_arr[i]}\n    fi\n\n    if [[ ${min_arr[i]} -lt ${max_arr[i]} ]]; then\n      min=${min_arr[i]}\n    else\n      min=${max_arr[i]}\n    fi\n\n    if [[ $max -gt $max_product ]]; then\n      max_product=$max\n    fi\n  done\n\n  echo $max_product\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr\n  IFS=' ' read -r -a arr <<< \"$1\"\n  local max_product=1\n  local min_product=1\n  local max_so_far=1\n  for i in \"${arr[@]}\"; do\n    if (( i > 0 )); then\n      max_product=$(( max_product * i ))\n      min_product=$(( min_product * i ))\n    else\n      local temp=$max_product\n      max_product=$(( min_product * i ))\n      min_product=$(( temp * i ))\n    fi\n    if (( max_product > max_so_far )); then\n      max_so_far=$max_product\n    fi\n    if (( max_product < 1 )); then\n      max_product=1\n    fi\n    if (( min_product < 1 )); then\n      min_product=1\n    fi\n  done\n  echo \"$max_so_far\"\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=()\n    local max=0\n    local min=0\n    local result=0\n    local i=0\n\n    IFS=' ' read -r -a arr <<< \"$1\"\n    max=${arr[0]}\n    min=${arr[0]}\n    result=${arr[0]}\n\n    for ((i=1; i<${#arr[@]}; i++)); do\n        if [[ ${arr[i]} -lt 0 ]]; then\n            local temp=$max\n            max=$min\n            min=$temp\n        fi\n\n        max=$((${arr[i]} * $max))\n        min=$((${arr[i]} * $min))\n\n        result=$(($result > $max ? $result : $max))\n    done\n\n    echo $result\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max=${arr[0]}\n  local min=${arr[0]}\n  local result=${arr[0]}\n\n  for ((i = 1; i < ${#arr[@]}; i++)); do\n    local tmp=${arr[i]}\n    if [[ $tmp -lt 0 ]]; then\n      local tmp_max=$max\n      max=$min\n      min=$tmp_max\n    fi\n    max=$((max * tmp))\n    min=$((min * tmp))\n    result=$((result > max ? result : max))\n  done\n\n  echo $result\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local input=($1)\n    local max_product=${input[0]}\n    local min_product=${input[0]}\n    local max_so_far=$max_product\n    local i\n    for ((i=1; i<${#input[@]}; i++)); do\n        local curr=${input[i]}\n        local max_product_candidate=$((max_product * curr))\n        local min_product_candidate=$((min_product * curr))\n        max_product=$((max_product_candidate > min_product_candidate ? max_product_candidate : min_product_candidate))\n        max_product=$((max_product > curr ? max_product : curr))\n        min_product=$((max_product_candidate < min_product_candidate ? max_product_candidate : min_product_candidate))\n        min_product=$((min_product < curr ? min_product : curr))\n        max_so_far=$((max_so_far > max_product ? max_so_far : max_product))\n    done\n    echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local max=1\n    local min=1\n    local max_so_far=1\n    local arr=($1)\n    for i in \"${arr[@]}\"; do\n        if [ \"$i\" -eq 0 ]; then\n            max=1\n            min=1\n        elif [ \"$i\" -lt 0 ]; then\n            local temp=$max\n            max=$min\n            min=$temp\n        fi\n        max=$((max*i))\n        min=$((min*i))\n        if [ \"$max\" -gt \"$max_so_far\" ]; then\n            max_so_far=$max\n        fi\n        if [ \"$max\" -lt \"$min\" ]; then\n            max=1\n        fi\n    done\n    echo \"$max_so_far\"\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=(\"$@\")\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n  local i\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    if [[ ${arr[i]} -lt 0 ]]; then\n      local tmp=$max_product\n      max_product=$min_product\n      min_product=$tmp\n    fi\n\n    max_product=$((max_product * arr[i]))\n    min_product=$((min_product * arr[i]))\n\n    if [[ $max_product -gt $max_so_far ]]; then\n      max_so_far=$max_product\n    fi\n\n    if [[ $max_product -lt $min_product ]]; then\n      max_product=$min_product\n    fi\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local curr=${arr[i]}\n    local max_product_candidate=$((max_product * curr))\n    local min_product_candidate=$((min_product * curr))\n    max_product=$((max_product_candidate > min_product_candidate ? max_product_candidate : min_product_candidate))\n    max_product=$((max_product > curr ? max_product : curr))\n    min_product=$((max_product_candidate < min_product_candidate ? max_product_candidate : min_product_candidate))\n    min_product=$((min_product < curr ? min_product : curr))\n    max_so_far=$((max_so_far > max_product ? max_so_far : max_product))\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a a=($1)\n  local max=${a[0]}\n  local min=${a[0]}\n  local max_so_far=$max\n  local i\n  for ((i=1; i<${#a[@]}; i++)); do\n    local tmp=$max\n    max=$((max > 0 ? max : min))\n    max=$((max * a[i]))\n    min=$((tmp < 0 ? tmp : min))\n    min=$((min * a[i]))\n    max_so_far=$((max_so_far > max ? max_so_far : max))\n  done\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local max_product=1\n  local min_product=1\n  local max_so_far=1\n  local i\n  for i in $1; do\n    if (( i > 0 )); then\n      max_product=$(( max_product * i ))\n      min_product=$(( min(min_product * i, 1) ))\n    elif (( i == 0 )); then\n      max_product=1\n      min_product=1\n    else\n      max_product=$(( min_product * i ))\n      min_product=$(( max_product * i ))\n    fi\n    max_so_far=$(( max(max_so_far, max_product) ))\n  done\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpdkd4p_qp.sh: line 13: min(min_product * i, 1) : syntax error in expression (error token is \"(min_product * i, 1) \")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=()\n    local -i i=0\n    local -i j=0\n    local -i max=0\n    local -i product=0\n    local -i n=0\n    local -i len=0\n\n    arr=($1)\n    len=${#arr[@]}\n    max=${arr[0]}\n\n    for ((i=0; i<len; i++)); do\n        product=${arr[i]}\n        if [[ $product -gt $max ]]; then\n            max=$product\n        fi\n        for ((j=i+1; j<len; j++)); do\n            product=$((product * arr[j]))\n            if [[ $product -gt $max ]]; then\n                max=$product\n            fi\n        done\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n\n  for (( i=1; i<${#arr[@]}; i++ )); do\n    local curr=${arr[$i]}\n    local max_product_candidate=$(( max_product * curr ))\n    local min_product_candidate=$(( min_product * curr ))\n    max_product=$(( max_product_candidate > min_product_candidate ? max_product_candidate : min_product_candidate ))\n    max_product=$(( max_product > curr ? max_product : curr ))\n    min_product=$(( max_product_candidate < min_product_candidate ? max_product_candidate : min_product_candidate ))\n    min_product=$(( min_product < curr ? min_product : curr ))\n    max_so_far=$(( max_so_far > max_product ? max_so_far : max_product ))\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max=${arr[0]}\n  local min=${arr[0]}\n  local result=${arr[0]}\n\n  for (( i=1; i<${#arr[@]}; i++ )); do\n    local tmp_max=$max\n    local tmp_min=$min\n    max=$(echo -e \"${arr[$i]} ${tmp_max} ${tmp_min}\" | tr ' ' '\\n' | sort -n | tail -n 1)\n    min=$(echo -e \"${arr[$i]} ${tmp_max} ${tmp_min}\" | tr ' ' '\\n' | sort -n | head -n 1)\n    result=$(echo -e \"$result $max\" | tr ' ' '\\n' | sort -n | tail -n 1)\n  done\n\n  echo $result\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a array=($1)\n  local max_product=${array[0]}\n  local min_product=${array[0]}\n  local max_so_far=$max_product\n\n  for ((i=1; i<${#array[@]}; i++)); do\n    local current=${array[i]}\n    local temp_max=$max_product\n    local temp_min=$min_product\n\n    max_product=$((current * temp_max > current * temp_min ? current * temp_max : current * temp_min))\n    max_product=$((max_product > current ? max_product : current))\n\n    min_product=$((current * temp_max < current * temp_min ? current * temp_max : current * temp_min))\n    min_product=$((min_product < current ? min_product : current))\n\n    max_so_far=$((max_so_far > max_product ? max_so_far : max_product))\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=()\n  for n in $1; do\n    arr+=(\"$n\")\n  done\n  local max=0\n  local i=0\n  local j=0\n  local len=${#arr[@]}\n  while (( i < len )); do\n    local product=1\n    j=$i\n    while (( j < len )); do\n      product=$(( product * arr[j] ))\n      if (( product > max )); then\n        max=$product\n      fi\n      (( j++ ))\n    done\n    (( i++ ))\n  done\n  echo $max\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=(\"$@\")\n  local max_product=0\n  local max_product_ending_here=1\n  local min_product_ending_here=1\n\n  for i in \"${arr[@]}\"; do\n    if (( i > 0 )); then\n      max_product_ending_here=$(( max_product_ending_here * i ))\n      min_product_ending_here=$(( min_product_ending_here * i ))\n    else\n      local tmp=$max_product_ending_here\n      max_product_ending_here=$(( min_product_ending_here * i ))\n      min_product_ending_here=$(( tmp * i ))\n    fi\n\n    if (( max_product_ending_here > max_product )); then\n      max_product=$max_product_ending_here\n    fi\n\n    if (( max_product_ending_here < 1 )); then\n      max_product_ending_here=1\n    fi\n\n    if (( min_product_ending_here > 1 )); then\n      min_product_ending_here=1\n    fi\n  done\n\n  echo \"$max_product\"\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp_k4k30qo.sh: line 12: ((: 1 -2 -3 0 7 -8 -2: syntax error in expression (error token is \"0 7 -8 -2\")\\n/tmp/tmp_k4k30qo.sh: line 17: 1 -2 -3 0 7 -8 -2: syntax error in expression (error token is \"0 7 -8 -2\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n  local i\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local curr=${arr[i]}\n    local tmp_max_product=$max_product\n    local tmp_min_product=$min_product\n\n    max_product=$((\n      $(max $tmp_max_product $curr)\n      $(max $tmp_min_product $curr)\n    ))\n    min_product=$((\n      $(min $tmp_max_product $curr)\n      $(min $tmp_min_product $curr)\n    ))\n\n    max_so_far=$(max $max_so_far $max_product)\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpdh0c4s2_.sh: line 20: max: command not found\\n/tmp/tmpdh0c4s2_.sh: line 20: max: command not found\\n/tmp/tmpdh0c4s2_.sh: line 24: min: command not found\\n/tmp/tmpdh0c4s2_.sh: line 24: min: command not found\\n/tmp/tmpdh0c4s2_.sh: line 26: max: command not found\\n/tmp/tmpdh0c4s2_.sh: line 20: max: command not found\\n/tmp/tmpdh0c4s2_.sh: line 20: max: command not found\\n/tmp/tmpdh0c4s2_.sh: line 24: min: command not found\\n/tmp/tmpdh0c4s2_.sh: line 24: min: command not found\\n/tmp/tmpdh0c4s2_.sh: line 26: max: command not found\\n/tmp/tmpdh0c4s2_.sh: line 20: max: command not found\\n/tmp/tmpdh0c4s2_.sh: line 20: max: command not found\\n/tmp/tmpdh0c4s2_.sh: line 24: min: command not found\\n/tmp/tmpdh0c4s2_.sh: line 24: min: command not found\\n/tmp/tmpdh0c4s2_.sh: line 26: max: command not found\\n/tmp/tmpdh0c4s2_.sh: line 20: max: command not found\\n/tmp/tmpdh0c4s2_.sh: line 20: max: command not found\\n/tmp/tmpdh0c4s2_.sh: line 24: min: command not found\\n/tmp/tmpdh0c4s2_.sh: line 24: min: command not found\\n/tmp/tmpdh0c4s2_.sh: line 26: max: command not found\\n/tmp/tmpdh0c4s2_.sh: line 20: max: command not found\\n/tmp/tmpdh0c4s2_.sh: line 20: max: command not found\\n/tmp/tmpdh0c4s2_.sh: line 24: min: command not found\\n/tmp/tmpdh0c4s2_.sh: line 24: min: command not found\\n/tmp/tmpdh0c4s2_.sh: line 26: max: command not found\\n/tmp/tmpdh0c4s2_.sh: line 20: max: command not found\\n/tmp/tmpdh0c4s2_.sh: line 20: max: command not found\\n/tmp/tmpdh0c4s2_.sh: line 24: min: command not found\\n/tmp/tmpdh0c4s2_.sh: line 24: min: command not found\\n/tmp/tmpdh0c4s2_.sh: line 26: max: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a a=($1)\n  local -a p=(${a[0]})\n  local -a n=(${a[0]})\n  local max=${a[0]}\n  for ((i=1; i<${#a[@]}; i++)); do\n    p[i]=$(( ${a[i]} * ${p[i-1]} ))\n    n[i]=$(( ${a[i]} * ${n[i-1]} ))\n    if (( ${p[i]} > ${n[i]} )); then\n      n[i]=${p[i]}\n    else\n      p[i]=${n[i]}\n    fi\n    if (( ${n[i]} > $max )); then\n      max=${n[i]}\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr\n    local -i i j k\n    local -i max_product=0\n    local -i product\n    IFS=' ' read -r -a arr <<< \"$1\"\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i; j<${#arr[@]}; j++)); do\n            product=1\n            for ((k=i; k<=j; k++)); do\n                product=$((product * arr[k]))\n            done\n            if ((product > max_product)); then\n                max_product=$product\n            fi\n        done\n    done\n    echo $max_product\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=()\n    local -i i=0\n    local -i j=0\n    local -i max=0\n    local -i curr=0\n    local -i tmp=0\n    local -i len=0\n\n    # Convert the space-separated list to an array\n    for i in $1; do\n        arr[j]=$i\n        ((j++))\n    done\n\n    # Iterate through the array\n    for ((i=0; i<${#arr[@]}; i++)); do\n        # If the current element is 0, reset the current product\n        if [[ ${arr[$i]} -eq 0 ]]; then\n            curr=0\n            continue\n        fi\n\n        # If the current product is 0, set it to the current element\n        if [[ $curr -eq 0 ]]; then\n            curr=${arr[$i]}\n            continue\n        fi\n\n        # Multiply the current product by the current element\n        ((curr*=${arr[$i]}))\n\n        # If the current product is greater than the maximum, set the maximum\n        # to the current product\n        if [[ $curr -gt $max ]]; then\n            max=$curr\n        fi\n    done\n\n    # Iterate through the array\n    for ((i=0; i<${#arr[@]}; i++)); do\n        # If the current element is 0, reset the current product\n        if [[ ${arr[$i]} -eq 0 ]]; then\n            curr=0\n            continue\n        fi\n\n        # If the current product is 0, set it to the current element\n        if [[ $curr -eq 0 ]]; then\n            curr=${arr[$i]}\n            continue\n        fi\n\n        # Multiply the current product by the current element\n        ((curr*=${arr[$i]}))\n\n        # If the current product is less than the maximum, set the maximum\n        # to the current product\n        if [[ $curr -lt $max ]]; then\n            max=$curr\n        fi\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_ending_here=1\n  local min_ending_here=1\n  local max_so_far=1\n\n  for i in \"${arr[@]}\"; do\n    if [[ $i -gt 0 ]]; then\n      max_ending_here=$((max_ending_here * i))\n      min_ending_here=$((min(min_ending_here * i, 1)))\n    elif [[ $i -eq 0 ]]; then\n      max_ending_here=1\n      min_ending_here=1\n    else\n      local temp=$max_ending_here\n      max_ending_here=$((max(min_ending_here * i, 1)))\n      min_ending_here=$((temp * i))\n    fi\n\n    if [[ $max_so_far -lt $max_ending_here ]]; then\n      max_so_far=$max_ending_here\n    fi\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpumiog5g3.sh: line 14: min(min_ending_here * i, 1): syntax error in expression (error token is \"(min_ending_here * i, 1)\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_so_far=${arr[0]}\n  local min_so_far=${arr[0]}\n  local max_ending_here=${arr[0]}\n  local min_ending_here=${arr[0]}\n  local max_product=${arr[0]}\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local num=${arr[i]}\n    if [[ $num -gt 0 ]]; then\n      max_ending_here=$((max_ending_here * num))\n      min_ending_here=$((min_ending_here * num))\n    else\n      local temp=$max_ending_here\n      max_ending_here=$((min_ending_here * num))\n      min_ending_here=$((temp * num))\n    fi\n\n    if [[ $max_ending_here -gt $max_so_far ]]; then\n      max_so_far=$max_ending_here\n    fi\n\n    if [[ $min_ending_here -lt $min_so_far ]]; then\n      min_so_far=$min_ending_here\n    fi\n  done\n\n  if [[ $max_so_far -gt $min_so_far ]]; then\n    max_product=$max_so_far\n  else\n    max_product=$min_so_far\n  fi\n\n  echo $max_product\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr\n  local i j k\n  local max_product\n  local product\n  local -i len\n\n  arr=($1)\n  len=${#arr[@]}\n  max_product=${arr[0]}\n\n  for ((i=0; i<len; i++)); do\n    product=${arr[i]}\n    if ((product > max_product)); then\n      max_product=$product\n    fi\n    for ((j=i+1; j<len; j++)); do\n      product=$((product * arr[j]))\n      if ((product > max_product)); then\n        max_product=$product\n      fi\n    done\n  done\n\n  echo $max_product\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local curr=${arr[i]}\n    local temp_max=$max_product\n    local temp_min=$min_product\n    max_product=$((max(curr, curr*temp_max, curr*temp_min)))\n    min_product=$((min(curr, curr*temp_max, curr*temp_min)))\n    max_so_far=$((max(max_so_far, max_product)))\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpr77emu8g.sh: line 15: max(curr, curr*temp_max, curr*temp_min): syntax error in expression (error token is \"(curr, curr*temp_max, curr*temp_min)\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=${arr[0]}\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local curr=${arr[i]}\n    local temp_max=$max_product\n    local temp_min=$min_product\n\n    max_product=$(max $curr $((curr * temp_max)) $((curr * temp_min)))\n    min_product=$(min $curr $((curr * temp_max)) $((curr * temp_min)))\n\n    max_so_far=$(max $max_so_far $max_product)\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpbnfaj4jd.sh: line 16: max: command not found\\n/tmp/tmpbnfaj4jd.sh: line 17: min: command not found\\n/tmp/tmpbnfaj4jd.sh: line 19: max: command not found\\n/tmp/tmpbnfaj4jd.sh: line 16: max: command not found\\n/tmp/tmpbnfaj4jd.sh: line 17: min: command not found\\n/tmp/tmpbnfaj4jd.sh: line 19: max: command not found\\n/tmp/tmpbnfaj4jd.sh: line 16: max: command not found\\n/tmp/tmpbnfaj4jd.sh: line 17: min: command not found\\n/tmp/tmpbnfaj4jd.sh: line 19: max: command not found\\n/tmp/tmpbnfaj4jd.sh: line 16: max: command not found\\n/tmp/tmpbnfaj4jd.sh: line 17: min: command not found\\n/tmp/tmpbnfaj4jd.sh: line 19: max: command not found\\n/tmp/tmpbnfaj4jd.sh: line 16: max: command not found\\n/tmp/tmpbnfaj4jd.sh: line 17: min: command not found\\n/tmp/tmpbnfaj4jd.sh: line 19: max: command not found\\n/tmp/tmpbnfaj4jd.sh: line 16: max: command not found\\n/tmp/tmpbnfaj4jd.sh: line 17: min: command not found\\n/tmp/tmpbnfaj4jd.sh: line 19: max: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a array=($1)\n  local -a max_product=(${array[0]})\n  local -a min_product=(${array[0]})\n  local -a max_product_so_far=(${array[0]})\n  local -a min_product_so_far=(${array[0]})\n  local -a max_product_ending_here=(${array[0]})\n  local -a min_product_ending_here=(${array[0]})\n  local -a max_product_ending_here_prev=(${array[0]})\n  local -a min_product_ending_here_prev=(${array[0]})\n  local -a max_product_ending_here_prev_prev=(${array[0]})\n  local -a min_product_ending_here_prev_prev=(${array[0]})\n  local -a max_product_ending_here_prev_prev_prev=(${array[0]})\n  local -a min_product_ending_here_prev_prev_prev=(${array[0]})\n  local -a max_product_ending_here_prev_prev_prev_prev=(${array[0]})\n  local -a min_product_ending_here_prev_prev_prev_prev=(${array[0]})\n  local -a max_product_ending_here_prev_prev_prev_prev_prev=(${array[0]})\n  local -a min_product_ending_here_prev_prev_prev_prev_prev=(${array[0]})\n  local -a max_product_ending_here_prev_prev_prev_prev_prev_prev=(${array[0]})\n  local -a min_product_ending_here_prev_prev_prev_prev_prev_prev=(${array[0]})\n  local -a max_product_ending_here_prev_prev_prev_prev_prev_prev_prev=(${array[0]})\n  local -a min_product_ending_here_prev_prev_prev_prev_prev_prev_prev=(${array[0]})\n  local -a max_product_ending_here_prev_prev_prev\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=($1)\n    local max_product=${arr[0]}\n    local min_product=${arr[0]}\n    local max_so_far=$max_product\n    local i\n    for ((i=1; i<${#arr[@]}; i++)); do\n        local curr=${arr[i]}\n        local max_product_candidate=$((max_product * curr))\n        local min_product_candidate=$((min_product * curr))\n        max_product=$((max_product_candidate > min_product_candidate ? max_product_candidate : min_product_candidate))\n        max_product=$((max_product > curr ? max_product : curr))\n        min_product=$((max_product_candidate < min_product_candidate ? max_product_candidate : min_product_candidate))\n        min_product=$((min_product < curr ? min_product : curr))\n        max_so_far=$((max_so_far > max_product ? max_so_far : max_product))\n    done\n    echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=()\n  local max=1\n  local min=1\n  local max_so_far=1\n  local i=0\n  local n=0\n  local curr=0\n\n  for n in $1; do\n    arr[$i]=$n\n    ((i++))\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    curr=${arr[$i]}\n    if [[ $curr -gt 0 ]]; then\n      ((max*=curr))\n      ((min*=curr))\n    elif [[ $curr -lt 0 ]]; then\n      local tmp=$max\n      ((max=max(min*curr, 1)))\n      ((min=min(tmp*curr, 1)))\n    else\n      max=1\n      min=1\n    fi\n\n    if [[ $max -gt $max_so_far ]]; then\n      ((max_so_far=max))\n    fi\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpu63oxsdz.sh: line 26: ((: max=max(min*curr, 1): syntax error in expression (error token is \"(min*curr, 1)\")\\n/tmp/tmpu63oxsdz.sh: line 27: ((: min=min(tmp*curr, 1): syntax error in expression (error token is \"(tmp*curr, 1)\")\\n/tmp/tmpu63oxsdz.sh: line 26: ((: max=max(min*curr, 1): syntax error in expression (error token is \"(min*curr, 1)\")\\n/tmp/tmpu63oxsdz.sh: line 27: ((: min=min(tmp*curr, 1): syntax error in expression (error token is \"(tmp*curr, 1)\")\\n/tmp/tmpu63oxsdz.sh: line 26: ((: max=max(min*curr, 1): syntax error in expression (error token is \"(min*curr, 1)\")\\n/tmp/tmpu63oxsdz.sh: line 27: ((: min=min(tmp*curr, 1): syntax error in expression (error token is \"(tmp*curr, 1)\")\\n/tmp/tmpu63oxsdz.sh: line 26: ((: max=max(min*curr, 1): syntax error in expression (error token is \"(min*curr, 1)\")\\n/tmp/tmpu63oxsdz.sh: line 27: ((: min=min(tmp*curr, 1): syntax error in expression (error token is \"(tmp*curr, 1)\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n\n  for (( i=1; i<${#arr[@]}; i++ )); do\n    local num=${arr[$i]}\n    local tmp_max_product=$max_product\n    local tmp_min_product=$min_product\n    max_product=$(( max(num, num*tmp_max_product, num*tmp_min_product) ))\n    min_product=$(( min(num, num*tmp_max_product, num*tmp_min_product) ))\n    max_so_far=$(( max(max_so_far, max_product) ))\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpzd8ixl73.sh: line 15: max(num, num*tmp_max_product, num*tmp_min_product) : syntax error in expression (error token is \"(num, num*tmp_max_product, num*tmp_min_product) \")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=(\"$@\")\n    local max_ending_here=1\n    local min_ending_here=1\n    local max_so_far=1\n\n    for i in \"${arr[@]}\"; do\n        if (( i > 0 )); then\n            max_ending_here=$(( max_ending_here * i ))\n            min_ending_here=$(( min_ending_here * i ))\n        elif (( i == 0 )); then\n            max_ending_here=1\n            min_ending_here=1\n        else\n            local temp=$max_ending_here\n            max_ending_here=$(( min_ending_here * i ))\n            min_ending_here=$(( temp * i ))\n        fi\n\n        if (( max_ending_here > max_so_far )); then\n            max_so_far=$max_ending_here\n        fi\n    done\n\n    echo \"$max_so_far\"\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp9xwq7_8b.sh: line 12: ((: 1 -2 -3 0 7 -8 -2: syntax error in expression (error token is \"0 7 -8 -2\")\\n/tmp/tmp9xwq7_8b.sh: line 15: ((: 1 -2 -3 0 7 -8 -2: syntax error in expression (error token is \"0 7 -8 -2\")\\n/tmp/tmp9xwq7_8b.sh: line 20: 1 -2 -3 0 7 -8 -2: syntax error in expression (error token is \"0 7 -8 -2\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_ending_here=1\n  local min_ending_here=1\n  local max_so_far=1\n  for i in \"${arr[@]}\"; do\n    if (( i > 0 )); then\n      max_ending_here=$(( max_ending_here * i ))\n      min_ending_here=$(( min_ending_here * i ))\n    else\n      local temp=$max_ending_here\n      max_ending_here=$(( min_ending_here * i ))\n      min_ending_here=$(( temp * i ))\n    fi\n    if (( max_ending_here > max_so_far )); then\n      max_so_far=$max_ending_here\n    fi\n    if (( max_ending_here < 1 )); then\n      max_ending_here=1\n    fi\n    if (( min_ending_here < 1 )); then\n      min_ending_here=1\n    fi\n  done\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=($1)\n    local max_so_far=${arr[0]}\n    local min_so_far=${arr[0]}\n    local max_ending_here=${arr[0]}\n    local min_ending_here=${arr[0]}\n    local max_product=${arr[0]}\n    local i\n\n    for ((i=1; i<${#arr[@]}; i++)); do\n        if [[ ${arr[i]} -gt 0 ]]; then\n            max_ending_here=$((max_ending_here * arr[i]))\n            min_ending_here=$((min_so_far * arr[i]))\n        elif [[ ${arr[i]} -lt 0 ]]; then\n            max_ending_here=$((min_so_far * arr[i]))\n            min_ending_here=$((max_so_far * arr[i]))\n        else\n            max_ending_here=0\n            min_ending_here=0\n        fi\n\n        if [[ $max_ending_here -gt $max_so_far ]]; then\n            max_so_far=$max_ending_here\n        fi\n\n        if [[ $min_ending_here -lt $min_so_far ]]; then\n            min_so_far=$min_ending_here\n        fi\n    done\n\n    echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local curr=${arr[i]}\n    local max_product_candidate=$((max_product * curr))\n    local min_product_candidate=$((min_product * curr))\n    max_product=$((max_product_candidate > min_product_candidate ? max_product_candidate : min_product_candidate))\n    max_product=$((max_product > curr ? max_product : curr))\n    min_product=$((max_product_candidate < min_product_candidate ? max_product_candidate : min_product_candidate))\n    min_product=$((min_product < curr ? min_product : curr))\n    max_so_far=$((max_so_far > max_product ? max_so_far : max_product))\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local max_product=1\n  local min_product=1\n  local max_so_far=1\n  local num\n  for num in $1; do\n    if (( num > 0 )); then\n      max_product=$(( max_product * num ))\n      min_product=$(( min_product * num ))\n    elif (( num == 0 )); then\n      max_product=1\n      min_product=1\n    else\n      local temp=$max_product\n      max_product=$(( min_product * num ))\n      min_product=$(( temp * num ))\n    fi\n    if (( max_product > max_so_far )); then\n      max_so_far=$max_product\n    fi\n    if (( max_product < 1 )); then\n      max_product=1\n    fi\n    if (( min_product > 1 )); then\n      min_product=1\n    fi\n  done\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=(\"$@\")\n  local -a max_product_arr\n  local -a min_product_arr\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_product_so_far=${arr[0]}\n  local i=0\n  local j=0\n  local len=${#arr[@]}\n\n  for ((i=1; i<len; i++)); do\n    if [[ ${arr[$i]} -gt 0 ]]; then\n      max_product_arr[$i]=$((max_product * arr[$i]))\n      min_product_arr[$i]=$((min_product * arr[$i]))\n    else\n      max_product_arr[$i]=$((min_product * arr[$i]))\n      min_product_arr[$i]=$((max_product * arr[$i]))\n    fi\n\n    max_product=${max_product_arr[$i]}\n    min_product=${min_product_arr[$i]}\n\n    if [[ $max_product -gt $max_product_so_far ]]; then\n      max_product_so_far=$max_product\n    fi\n  done\n\n  echo $max_product_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max=${arr[0]}\n  local min=${arr[0]}\n  local max_so_far=$max\n  for (( i=1; i<${#arr[@]}; i++ )); do\n    local curr=${arr[$i]}\n    local temp=$max\n    max=$(( max > 0 ? max : 1 ))\n    max=$(( max * curr ))\n    min=$(( min < 0 ? min : 1 ))\n    min=$(( min * curr ))\n    max=$(( max > min ? max : min ))\n    min=$(( max > min ? min : max ))\n    max_so_far=$(( max > max_so_far ? max : max_so_far ))\n  done\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=()\n  local -i i=0\n  local -i max_product=0\n  local -i curr_product=0\n  local -i curr_neg_product=0\n  local -i curr_pos_product=0\n  local -i curr_neg_count=0\n  local -i curr_pos_count=0\n  local -i curr_zero_count=0\n  local -i max_neg_product=0\n  local -i max_pos_product=0\n  local -i max_neg_count=0\n  local -i max_pos_count=0\n  local -i max_zero_count=0\n\n  # Convert input to array\n  while read -r n; do\n    arr[i++]=$n\n  done <<< \"$1\"\n\n  # Iterate through the array\n  for ((i=0; i<${#arr[@]}; i++)); do\n    # Reset current product\n    curr_product=1\n    curr_neg_product=1\n    curr_pos_product=1\n    curr_neg_count=0\n    curr_pos_count=0\n    curr_zero_count=0\n\n    # Iterate through the subarray\n    for ((j=i; j<${#arr[@]}; j++)); do\n      # Update current product\n      curr_product=$((curr_product * arr[j]))\n\n      # Update current negative product\n      if ((arr[j] < 0)); then\n        curr_neg_product=$((curr_neg_product * arr[j]))\n        ((curr_neg_count++))\n      fi\n\n      # Update current positive product\n      if ((arr[j] > 0)); then\n        curr_pos_product=$((curr_pos_product * arr[j]))\n        ((curr_pos_count++))\n      fi\n\n      # Update current zero count\n      if ((arr[j] == 0)); then\n        ((curr_zero_count++))\n      fi\n\n      # Update max product\n      if ((curr_product > max_product)); then\n        max_product=$cur\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp9seoz43t.sh: line 61: syntax error near unexpected token `}'\\n/tmp/tmp9seoz43t.sh: line 61: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_ending_here=1\n  local min_ending_here=1\n  local max_so_far=1\n\n  for i in \"${arr[@]}\"; do\n    if (( i > 0 )); then\n      max_ending_here=$(( max_ending_here * i ))\n      min_ending_here=$(( min_ending_here * i ))\n    else\n      tmp=$max_ending_here\n      max_ending_here=$(( min_ending_here * i ))\n      min_ending_here=$(( tmp * i ))\n    fi\n\n    if (( max_ending_here > max_so_far )); then\n      max_so_far=$max_ending_here\n    fi\n\n    if (( max_ending_here < 1 )); then\n      max_ending_here=1\n    fi\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max=${arr[0]}\n  local min=${arr[0]}\n  local result=${arr[0]}\n  local i\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local tmp_max=$max\n    local tmp_min=$min\n    max=$((tmp_max > tmp_min ? tmp_max : tmp_min))\n    max=$((max > arr[i] ? max : arr[i]))\n    min=$((tmp_max > tmp_min ? tmp_min : tmp_max))\n    min=$((min > arr[i] ? arr[i] : min))\n    max=$((max < tmp_max * arr[i] ? tmp_max * arr[i] : max))\n    max=$((max < tmp_min * arr[i] ? tmp_min * arr[i] : max))\n    min=$((min < tmp_max * arr[i] ? tmp_max * arr[i] : min))\n    min=$((min < tmp_min * arr[i] ? tmp_min * arr[i] : min))\n    result=$((result > max ? result : max))\n  done\n  echo $result\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n  local i\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local curr=${arr[i]}\n    local max_product_candidate=$(( $curr * $max_product ))\n    local min_product_candidate=$(( $curr * $min_product ))\n    max_product=$(( $max_product_candidate > $min_product_candidate ? $max_product_candidate : $min_product_candidate ))\n    max_product=$(( $max_product > $curr ? $max_product : $curr ))\n    min_product=$(( $max_product_candidate < $min_product_candidate ? $max_product_candidate : $min_product_candidate ))\n    min_product=$(( $min_product < $curr ? $min_product : $curr ))\n    max_so_far=$(( $max_so_far > $max_product ? $max_so_far : $max_product ))\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_so_far=${arr[0]}\n  local min_so_far=${arr[0]}\n  local max_ending_here=${arr[0]}\n  local min_ending_here=${arr[0]}\n  local max_product=${arr[0]}\n\n  for (( i=1; i<${#arr[@]}; i++ )); do\n    if [[ ${arr[$i]} -gt 0 ]]; then\n      max_ending_here=$(( max_ending_here * arr[i] ))\n      min_ending_here=$(( min_ending_here * arr[i] ))\n    elif [[ ${arr[$i]} -lt 0 ]]; then\n      local temp=$max_ending_here\n      max_ending_here=$(( min_ending_here * arr[i] ))\n      min_ending_here=$(( temp * arr[i] ))\n    else\n      max_ending_here=0\n      min_ending_here=0\n    fi\n\n    if [[ $max_ending_here -gt $max_so_far ]]; then\n      max_so_far=$max_ending_here\n    fi\n\n    if [[ $min_ending_here -lt $min_so_far ]]; then\n      min_so_far=$min_ending_here\n    fi\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n  local i\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local curr=${arr[i]}\n    local temp_max_product=$max_product\n    max_product=$(max $((max_product * curr)) $((min_product * curr)) $curr)\n    min_product=$(min $((temp_max_product * curr)) $((min_product * curr)) $curr)\n    max_so_far=$(max $max_so_far $max_product)\n  done\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpaecjcl23.sh: line 14: max: command not found\\n/tmp/tmpaecjcl23.sh: line 15: min: command not found\\n/tmp/tmpaecjcl23.sh: line 16: max: command not found\\n/tmp/tmpaecjcl23.sh: line 14: max: command not found\\n/tmp/tmpaecjcl23.sh: line 15: min: command not found\\n/tmp/tmpaecjcl23.sh: line 16: max: command not found\\n/tmp/tmpaecjcl23.sh: line 14: max: command not found\\n/tmp/tmpaecjcl23.sh: line 15: min: command not found\\n/tmp/tmpaecjcl23.sh: line 16: max: command not found\\n/tmp/tmpaecjcl23.sh: line 14: max: command not found\\n/tmp/tmpaecjcl23.sh: line 15: min: command not found\\n/tmp/tmpaecjcl23.sh: line 16: max: command not found\\n/tmp/tmpaecjcl23.sh: line 14: max: command not found\\n/tmp/tmpaecjcl23.sh: line 15: min: command not found\\n/tmp/tmpaecjcl23.sh: line 16: max: command not found\\n/tmp/tmpaecjcl23.sh: line 14: max: command not found\\n/tmp/tmpaecjcl23.sh: line 15: min: command not found\\n/tmp/tmpaecjcl23.sh: line 16: max: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a a=($1)\n  local -a p=(${a[0]})\n  local -a n=(${a[0]})\n  local max=${a[0]}\n  for ((i=1; i<${#a[@]}; i++)); do\n    p[i]=$(( ${a[i]} * ${p[i-1]} ))\n    n[i]=$(( ${a[i]} * ${n[i-1]} ))\n    if (( ${p[i]} > ${n[i]} )); then\n      n[i]=${p[i]}\n    else\n      p[i]=${n[i]}\n    fi\n    if (( ${n[i]} > $max )); then\n      max=${n[i]}\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a array=($1)\n  local -a max_product_array=()\n  local -a min_product_array=()\n  local max_product=0\n  local min_product=0\n  local max_product_so_far=0\n  local min_product_so_far=0\n  local max_product_index=0\n  local min_product_index=0\n  local max_product_index_so_far=0\n  local min_product_index_so_far=0\n  local max_product_length=0\n  local min_product_length=0\n  local max_product_length_so_far=0\n  local min_product_length_so_far=0\n  local max_product_end_index=0\n  local min_product_end_index=0\n  local max_product_end_index_so_far=0\n  local min_product_end_index_so_far=0\n  local max_product_start_index=0\n  local min_product_start_index=0\n  local max_product_start_index_so_far=0\n  local min_product_start_index_so_far=0\n  local max_product_start_index_so_far_so_far=0\n  local min_product_start_index_so_far_so_far=0\n  local max_product_end_index_so_far_so_far=0\n  local min_product_end_index_so_far_so_far=0\n  local max_product_so_far_so_far=0\n  local min_product_so_far_so_far=0\n  local max_product_length_so_far_so_far=0\n  local min_product_length_so_far_so_far=0\n  local max_product_index_so_far_so_far=0\n  local min_product_index_so_far_so_far=0\n\n  for ((i=0; i<${#array[@]}; i++)); do\n    if [[ ${array[$i]} -eq 0 ]]; then\n      max_product_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp3spwlni2.sh: line 43: syntax error near unexpected token `}'\\n/tmp/tmp3spwlni2.sh: line 43: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_so_far=${arr[0]}\n  local min_so_far=${arr[0]}\n  local max_ending_here=${arr[0]}\n  local min_ending_here=${arr[0]}\n  local max_product=${arr[0]}\n\n  for (( i=1; i<${#arr[@]}; i++ )); do\n    if [[ ${arr[$i]} -gt 0 ]]; then\n      max_ending_here=$(( max_ending_here * arr[i] ))\n      min_ending_here=$(( min_ending_here * arr[i] ))\n    elif [[ ${arr[$i]} -lt 0 ]]; then\n      local temp=$max_ending_here\n      max_ending_here=$(( min_ending_here * arr[i] ))\n      min_ending_here=$(( temp * arr[i] ))\n    else\n      max_ending_here=0\n      min_ending_here=0\n    fi\n\n    if [[ $max_ending_here -gt $max_so_far ]]; then\n      max_so_far=$max_ending_here\n    fi\n\n    if [[ $min_ending_here -lt $min_so_far ]]; then\n      min_so_far=$min_ending_here\n    fi\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a array=($1)\n  local max_product=${array[0]}\n  local min_product=${array[0]}\n  local max_so_far=$max_product\n  local i\n\n  for ((i=1; i<${#array[@]}; i++)); do\n    local num=${array[i]}\n    local max_product_candidate=$((max_product * num))\n    local min_product_candidate=$((min_product * num))\n    max_product=$((max_product_candidate > min_product_candidate ? max_product_candidate : min_product_candidate))\n    max_product=$((max_product > num ? max_product : num))\n    min_product=$((max_product_candidate < min_product_candidate ? max_product_candidate : min_product_candidate))\n    min_product=$((min_product < num ? min_product : num))\n    max_so_far=$((max_so_far > max_product ? max_so_far : max_product))\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max=${arr[0]}\n  local min=${arr[0]}\n  local result=${arr[0]}\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local tmp=$max\n    max=$(($(max $max $min) * ${arr[i]}))\n    min=$(($(min $tmp $min) * ${arr[i]}))\n    result=$(max $result $max)\n  done\n  echo $result\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpfoua5qs2.sh: line 12: max: command not found\\n/tmp/tmpfoua5qs2.sh: line 12: * -2: syntax error: operand expected (error token is \"* -2\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a array=()\n  local i=0\n  local max=0\n  local min=0\n  local max_so_far=0\n  local min_so_far=0\n  local max_ending_here=0\n  local min_ending_here=0\n  local product=0\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n\n  array=($1)\n  n=${#array[@]}\n\n  for ((i=0; i<n; i++)); do\n    if [[ ${array[$i]} -eq 0 ]]; then\n      max_ending_here=1\n      min_ending_here=1\n    elif [[ ${array[$i]} -gt 0 ]]; then\n      max_ending_here=$((max_ending_here * ${array[$i]}))\n      min_ending_here=$((min_ending_here * ${array[$i]}))\n    else\n      max_ending_here=$((min_ending_here * ${array[$i]}))\n      min_ending_here=$((max_ending_here * ${array[$i]}))\n    fi\n\n    if [[ $max_ending_here -gt $max_so_far ]]; then\n      max_so_far=$max_ending_here\n    fi\n\n    if [[ $min_ending_here -lt $min_so_far ]]; then\n      min_so_far=$min_ending_here\n    fi\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=($1)\n    local max_product=${arr[0]}\n    local min_product=${arr[0]}\n    local max_so_far=$max_product\n\n    for ((i=1; i<${#arr[@]}; i++)); do\n        local current=${arr[i]}\n        local max_product_candidate=$((current * max_product))\n        local min_product_candidate=$((current * min_product))\n\n        max_product=$((max_product_candidate > min_product_candidate ? max_product_candidate : min_product_candidate))\n        max_product=$((max_product > current ? max_product : current))\n\n        min_product=$((max_product_candidate < min_product_candidate ? max_product_candidate : min_product_candidate))\n        min_product=$((min_product < current ? min_product : current))\n\n        max_so_far=$((max_so_far > max_product ? max_so_far : max_product))\n    done\n\n    echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a array=($1)\n  local max_product=${array[0]}\n  local min_product=${array[0]}\n  local max_so_far=${array[0]}\n  local i=1\n  local temp=0\n  while [ $i -lt ${#array[@]} ]; do\n    temp=$max_product\n    max_product=$((${array[$i]} * $max_product))\n    max_product=$((${array[$i]} * $min_product))\n    max_product=$((${array[$i]} * $temp))\n    min_product=$((${array[$i]} * $min_product))\n    min_product=$((${array[$i]} * $temp))\n    min_product=$((${array[$i]} * $min_product))\n    max_so_far=$(($max_so_far > $max_product ? $max_so_far : $max_product))\n    max_so_far=$(($max_so_far > $min_product ? $max_so_far : $min_product))\n    max_so_far=$(($max_so_far > ${array[$i]} ? $max_so_far : ${array[$i]}))\n    i=$(($i + 1))\n  done\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=($1)\n    local max=${arr[0]}\n    local min=${arr[0]}\n    local result=${arr[0]}\n    for ((i = 1; i < ${#arr[@]}; i++)); do\n        local tmp_max=$max\n        local tmp_min=$min\n        max=$(echo -e \"${arr[$i]} ${tmp_max} ${tmp_min} * *\" | bc)\n        min=$(echo -e \"${arr[$i]} ${tmp_max} ${tmp_min} * *\" | bc)\n        max=$(echo -e \"${max} ${tmp_max} ${tmp_min} * *\" | bc)\n        min=$(echo -e \"${min} ${tmp_max} ${tmp_min} * *\" | bc)\n        result=$(echo -e \"${result} ${max} *\" | bc)\n    done\n    echo $result\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpnw9loym7.sh: line 13: bc: command not found\\n/tmp/tmpnw9loym7.sh: line 14: bc: command not found\\n/tmp/tmpnw9loym7.sh: line 15: bc: command not found\\n/tmp/tmpnw9loym7.sh: line 16: bc: command not found\\n/tmp/tmpnw9loym7.sh: line 17: bc: command not found\\n/tmp/tmpnw9loym7.sh: line 13: bc: command not found\\n/tmp/tmpnw9loym7.sh: line 14: bc: command not found\\n/tmp/tmpnw9loym7.sh: line 15: bc: command not found\\n/tmp/tmpnw9loym7.sh: line 16: bc: command not found\\n/tmp/tmpnw9loym7.sh: line 17: bc: command not found\\n/tmp/tmpnw9loym7.sh: line 13: bc: command not found\\n/tmp/tmpnw9loym7.sh: line 14: bc: command not found\\n/tmp/tmpnw9loym7.sh: line 15: bc: command not found\\n/tmp/tmpnw9loym7.sh: line 16: bc: command not found\\n/tmp/tmpnw9loym7.sh: line 17: bc: command not found\\n/tmp/tmpnw9loym7.sh: line 13: bc: command not found\\n/tmp/tmpnw9loym7.sh: line 14: bc: command not found\\n/tmp/tmpnw9loym7.sh: line 15: bc: command not found\\n/tmp/tmpnw9loym7.sh: line 16: bc: command not found\\n/tmp/tmpnw9loym7.sh: line 17: bc: command not found\\n/tmp/tmpnw9loym7.sh: line 13: bc: command not found\\n/tmp/tmpnw9loym7.sh: line 14: bc: command not found\\n/tmp/tmpnw9loym7.sh: line 15: bc: command not found\\n/tmp/tmpnw9loym7.sh: line 16: bc: command not found\\n/tmp/tmpnw9loym7.sh: line 17: bc: command not found\\n/tmp/tmpnw9loym7.sh: line 13: bc: command not found\\n/tmp/tmpnw9loym7.sh: line 14: bc: command not found\\n/tmp/tmpnw9loym7.sh: line 15: bc: command not found\\n/tmp/tmpnw9loym7.sh: line 16: bc: command not found\\n/tmp/tmpnw9loym7.sh: line 17: bc: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local arr=($1)\n  local max=${arr[0]}\n  local min=${arr[0]}\n  local result=${arr[0]}\n  for (( i=1; i<${#arr[@]}; i++ )); do\n    local tmp_max=$max\n    local tmp_min=$min\n    max=$((${arr[$i]} * $tmp_max > ${arr[$i]} * $tmp_min ? ${arr[$i]} * $tmp_max : ${arr[$i]} * $tmp_min))\n    max=$(($max > ${arr[$i]} ? $max : ${arr[$i]}))\n    min=$((${arr[$i]} * $tmp_max < ${arr[$i]} * $tmp_min ? ${arr[$i]} * $tmp_max : ${arr[$i]} * $tmp_min))\n    min=$(($min < ${arr[$i]} ? $min : ${arr[$i]}))\n    result=$(($result > $max ? $result : $max))\n  done\n  echo $result\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a a=($1)\n  local max=${a[0]}\n  local min=${a[0]}\n  local max_so_far=$max\n  local i\n  for ((i=1; i<${#a[@]}; i++)); do\n    local ai=${a[i]}\n    local max_here=$((max*ai))\n    local min_here=$((min*ai))\n    max=$((max_here>min_here?max_here:min_here))\n    max=$((max>ai?max:ai))\n    min=$((max_here<min_here?max_here:min_here))\n    min=$((min<ai?min:ai))\n    max_so_far=$((max_so_far>max?max_so_far:max))\n  done\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max=${arr[0]}\n  local min=${arr[0]}\n  local max_so_far=$max\n  local i\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local curr=${arr[i]}\n    local temp=$max\n    max=$((max > 0 ? max : 1))\n    max=$((max * curr))\n    min=$((min < 0 ? min : 1))\n    min=$((min * curr))\n    max=$((max > min ? max : min))\n    min=$((max < min ? max : min))\n    max_so_far=$((max_so_far > max ? max_so_far : max))\n  done\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a array=($1)\n    local max_product=${array[0]}\n    local min_product=${array[0]}\n    local max_so_far=${array[0]}\n    local i=1\n    while [ $i -lt ${#array[@]} ]; do\n        local tmp=$max_product\n        max_product=$(max $max_product $min_product ${array[$i]})\n        min_product=$(min $tmp $min_product ${array[$i]})\n        max_so_far=$(max $max_so_far $max_product)\n        i=$((i+1))\n    done\n    echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpo617eu3e.sh: line 13: max: command not found\\n/tmp/tmpo617eu3e.sh: line 14: min: command not found\\n/tmp/tmpo617eu3e.sh: line 15: max: command not found\\n/tmp/tmpo617eu3e.sh: line 13: max: command not found\\n/tmp/tmpo617eu3e.sh: line 14: min: command not found\\n/tmp/tmpo617eu3e.sh: line 15: max: command not found\\n/tmp/tmpo617eu3e.sh: line 13: max: command not found\\n/tmp/tmpo617eu3e.sh: line 14: min: command not found\\n/tmp/tmpo617eu3e.sh: line 15: max: command not found\\n/tmp/tmpo617eu3e.sh: line 13: max: command not found\\n/tmp/tmpo617eu3e.sh: line 14: min: command not found\\n/tmp/tmpo617eu3e.sh: line 15: max: command not found\\n/tmp/tmpo617eu3e.sh: line 13: max: command not found\\n/tmp/tmpo617eu3e.sh: line 14: min: command not found\\n/tmp/tmpo617eu3e.sh: line 15: max: command not found\\n/tmp/tmpo617eu3e.sh: line 13: max: command not found\\n/tmp/tmpo617eu3e.sh: line 14: min: command not found\\n/tmp/tmpo617eu3e.sh: line 15: max: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_ending_here=1\n  local min_ending_here=1\n  local max_so_far=1\n\n  for i in \"${arr[@]}\"; do\n    if [[ $i -gt 0 ]]; then\n      max_ending_here=$((max_ending_here * i))\n      min_ending_here=$((min(min_ending_here * i, 1)))\n    elif [[ $i -eq 0 ]]; then\n      max_ending_here=1\n      min_ending_here=1\n    else\n      local temp=$max_ending_here\n      max_ending_here=$((max(min_ending_here * i, 1)))\n      min_ending_here=$((temp * i))\n    fi\n\n    if [[ $max_so_far -lt $max_ending_here ]]; then\n      max_so_far=$max_ending_here\n    fi\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpumiog5g3.sh: line 14: min(min_ending_here * i, 1): syntax error in expression (error token is \"(min_ending_here * i, 1)\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a array=(\"$@\")\n  local max_product=0\n  local product=1\n  local i=0\n  local j=0\n\n  while (( i < ${#array[@]} )); do\n    product=1\n    j=$i\n    while (( j < ${#array[@]} )); do\n      product=$(( product * array[j] ))\n      if (( product > max_product )); then\n        max_product=$product\n      fi\n      (( j++ ))\n    done\n    (( i++ ))\n  done\n\n  echo $max_product\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpmzzw3720.sh: line 16: 1 -2 -3 0 7 -8 -2: syntax error in expression (error token is \"0 7 -8 -2\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_prod=${arr[0]}\n  local min_prod=${arr[0]}\n  local max_so_far=$max_prod\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local prod1=$((max_prod * arr[i]))\n    local prod2=$((min_prod * arr[i]))\n    max_prod=$((prod1 > prod2 ? prod1 : prod2))\n    max_prod=$((max_prod > arr[i] ? max_prod : arr[i]))\n    min_prod=$((prod1 < prod2 ? prod1 : prod2))\n    min_prod=$((min_prod < arr[i] ? min_prod : arr[i]))\n    max_so_far=$((max_so_far > max_prod ? max_so_far : max_prod))\n  done\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=($1)\n    local max_so_far=${arr[0]}\n    local min_so_far=${arr[0]}\n    local max_ending_here=${arr[0]}\n    local min_ending_here=${arr[0]}\n    local max_product=${arr[0]}\n    for ((i=1; i<${#arr[@]}; i++)); do\n        max_ending_here=$((max_so_far * arr[i]))\n        min_ending_here=$((min_so_far * arr[i]))\n        max_so_far=$((max_ending_here > min_ending_here ? max_ending_here : min_ending_here))\n        min_so_far=$((max_ending_here < min_ending_here ? max_ending_here : min_ending_here))\n        max_product=$((max_product > max_so_far ? max_product : max_so_far))\n    done\n    echo $max_product\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a array\n    local -i i\n    local -i j\n    local -i max_product\n    local -i product\n    local -i max_negative_product\n    local -i max_negative_product_index\n    local -i max_negative_product_index_end\n    local -i max_negative_product_index_start\n    local -i max_negative_product_index_start_tmp\n    local -i max_negative_product_index_end_tmp\n    local -i max_negative_product_tmp\n    local -i max_negative_product_index_tmp\n    local -i max_negative_product_index_start_tmp\n    local -i max_negative_product_index_end_tmp\n    local -i max_negative_product_index_start_tmp\n    local -i max_negative_product_index_end_tmp\n    local -i max_negative_product_index_start_tmp\n    local -i max_negative_product_index_end_tmp\n    local -i max_negative_product_index_start_tmp\n    local -i max_negative_product_index_end_tmp\n    local -i max_negative_product_index_start_tmp\n    local -i max_negative_product_index_end_tmp\n    local -i max_negative_product_index_start_tmp\n    local -i max_negative_product_index_end_tmp\n    local -i max_negative_product_index_start_tmp\n    local -i max_negative_product_index_end_tmp\n    local -i max_negative_product_index_start_tmp\n    local -i max_negative_product_index_end_tmp\n    local -i max_negative_product_index_start_tmp\n    local -i max_negative_product_index_end_tmp\n    local -i max_negative_product_index_start_tmp\n    local -i max_negative_product_index_end_tmp\n    local -i max_negative_product_index_start_tmp\n    local -i max_negative_product_index_end_tmp\n    local -i max_negative_product_index_start_tmp\n    local -\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=()\n  local i=0\n  local max_product=0\n  local current_product=0\n  local current_product_negative=0\n  local current_product_positive=0\n  local current_product_negative_index=0\n  local current_product_positive_index=0\n  local current_product_negative_index_start=0\n  local current_product_positive_index_start=0\n  local current_product_negative_index_end=0\n  local current_product_positive_index_end=0\n  local current_product_negative_index_start_tmp=0\n  local current_product_positive_index_start_tmp=0\n  local current_product_negative_index_end_tmp=0\n  local current_product_positive_index_end_tmp=0\n  local current_product_negative_index_start_tmp_2=0\n  local current_product_positive_index_start_tmp_2=0\n  local current_product_negative_index_end_tmp_2=0\n  local current_product_positive_index_end_tmp_2=0\n  local current_product_negative_index_start_tmp_3=0\n  local current_product_positive_index_start_tmp_3=0\n  local current_product_negative_index_end_tmp_3=0\n  local current_product_positive_index_end_tmp_3=0\n  local current_product_negative_index_start_tmp_4=0\n  local current_product_positive_index_start_tmp_4=0\n  local current_product_negative_index_end_tmp_4=0\n  local current_product_positive_index_end_tmp_4=0\n  local current_product_negative_index_start_tmp_5=0\n  local current_product_positive_index_start_tmp_5=0\n  local current_product_negative_index_end_tmp_5=0\n  local current_product_positive_index_end_tmp_5=0\n  local current_product_negative_index_start_tmp_6=0\n  local current_product_positive_index_start\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr\n  IFS=' ' read -r -a arr <<< \"$1\"\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local curr=${arr[i]}\n    local temp_max=$max_product\n    max_product=$(($max_product * $curr))\n    min_product=$(($min_product * $curr))\n    max_product=$(($max_product > $min_product ? $max_product : $min_product))\n    min_product=$(($temp_max * $curr < $min_product ? $temp_max * $curr : $min_product))\n    max_product=$(($max_product > $curr ? $max_product : $curr))\n    min_product=$(($min_product < $curr ? $min_product : $curr))\n    max_so_far=$(($max_so_far > $max_product ? $max_so_far : $max_product))\n  done\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a array=($1)\n  local -i max_product=0\n  local -i product=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n=${#array[@]}\n\n  for ((i=0; i<n; i++)); do\n    product=1\n    for ((j=i; j<n; j++)); do\n      product=$((product * array[j]))\n      if ((product > max_product)); then\n        max_product=$product\n      fi\n    done\n  done\n\n  echo $max_product\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local curr=${arr[i]}\n    local max_product_candidate=$((max_product * curr))\n    local min_product_candidate=$((min_product * curr))\n    max_product=$((max_product_candidate > min_product_candidate ? max_product_candidate : min_product_candidate))\n    max_product=$((max_product > curr ? max_product : curr))\n    min_product=$((max_product_candidate < min_product_candidate ? max_product_candidate : min_product_candidate))\n    min_product=$((min_product < curr ? min_product : curr))\n    max_so_far=$((max_so_far > max_product ? max_so_far : max_product))\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=($1)\n    local max_product=${arr[0]}\n    local min_product=${arr[0]}\n    local max_so_far=$max_product\n    local i\n\n    for ((i=1; i<${#arr[@]}; i++)); do\n        local curr=${arr[i]}\n        local max_product_candidate=$((curr * max_product))\n        local min_product_candidate=$((curr * min_product))\n        max_product=$((max_product_candidate > min_product_candidate ? max_product_candidate : min_product_candidate))\n        max_product=$((max_product > curr ? max_product : curr))\n        min_product=$((max_product_candidate < min_product_candidate ? max_product_candidate : min_product_candidate))\n        min_product=$((min_product < curr ? min_product : curr))\n        max_so_far=$((max_so_far > max_product ? max_so_far : max_product))\n    done\n\n    echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a array=($1)\n    local max_product=${array[0]}\n    local min_product=${array[0]}\n    local max_so_far=$max_product\n    local i\n    for ((i=1; i<${#array[@]}; i++)); do\n        local product_with_max=${array[i]}*$max_product\n        local product_with_min=${array[i]}*$min_product\n        max_product=$(max $product_with_max $product_with_min ${array[i]})\n        min_product=$(min $product_with_max $product_with_min ${array[i]})\n        max_so_far=$(max $max_so_far $max_product)\n    done\n    echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpi53kcboh.sh: line 14: max: command not found\\n/tmp/tmpi53kcboh.sh: line 15: min: command not found\\n/tmp/tmpi53kcboh.sh: line 16: max: command not found\\n/tmp/tmpi53kcboh.sh: line 14: max: command not found\\n/tmp/tmpi53kcboh.sh: line 15: min: command not found\\n/tmp/tmpi53kcboh.sh: line 16: max: command not found\\n/tmp/tmpi53kcboh.sh: line 14: max: command not found\\n/tmp/tmpi53kcboh.sh: line 15: min: command not found\\n/tmp/tmpi53kcboh.sh: line 16: max: command not found\\n/tmp/tmpi53kcboh.sh: line 14: max: command not found\\n/tmp/tmpi53kcboh.sh: line 15: min: command not found\\n/tmp/tmpi53kcboh.sh: line 16: max: command not found\\n/tmp/tmpi53kcboh.sh: line 14: max: command not found\\n/tmp/tmpi53kcboh.sh: line 15: min: command not found\\n/tmp/tmpi53kcboh.sh: line 16: max: command not found\\n/tmp/tmpi53kcboh.sh: line 14: max: command not found\\n/tmp/tmpi53kcboh.sh: line 15: min: command not found\\n/tmp/tmpi53kcboh.sh: line 16: max: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr\n  local max_product=1\n  local min_product=1\n  local max_so_far=1\n  local i\n  local n\n\n  arr=($1)\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if [[ ${arr[$i]} -gt 0 ]]; then\n      max_product=$((max_product * arr[$i]))\n      min_product=$((min(min_product * arr[$i], 1)))\n    elif [[ ${arr[$i]} -lt 0 ]]; then\n      n=$max_product\n      max_product=$((max(min_product * arr[$i], 1)))\n      min_product=$((n * arr[$i]))\n    else\n      max_product=1\n      min_product=1\n    fi\n    max_so_far=$((max(max_so_far, max_product)))\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp678xppir.sh: line 17: min(min_product * arr[0], 1): syntax error in expression (error token is \"(min_product * arr[0], 1)\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local num=${arr[i]}\n    local temp_max=$max_product\n    local temp_min=$min_product\n\n    max_product=$((num > 0 ? num : num * temp_min))\n    max_product=$((max_product > temp_max ? max_product : temp_max))\n\n    min_product=$((num < 0 ? num : num * temp_max))\n    min_product=$((min_product < temp_min ? min_product : temp_min))\n\n    max_so_far=$((max_so_far > max_product ? max_so_far : max_product))\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=($1)\n    local max_product=0\n    local cur_product=0\n    local i=0\n    local j=0\n    local k=0\n    local n=${#arr[@]}\n\n    for ((i=0; i<n; i++)); do\n        cur_product=${arr[i]}\n        for ((j=i+1; j<n; j++)); do\n            cur_product=$((cur_product * arr[j]))\n            if ((cur_product > max_product)); then\n                max_product=$cur_product\n            fi\n        done\n    done\n\n    echo $max_product\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr\n  local i j k\n  local max_product\n  local product\n\n  arr=($1)\n  max_product=${arr[0]}\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    product=${arr[i]}\n    for ((j=i+1; j<${#arr[@]}; j++)); do\n      product=$((product * arr[j]))\n      if [[ $product -gt $max_product ]]; then\n        max_product=$product\n      fi\n    done\n  done\n\n  echo $max_product\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n  local i\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local curr=${arr[i]}\n    local prev_max_product=$max_product\n    local prev_min_product=$min_product\n\n    max_product=$((\n      max(curr, curr * prev_max_product, curr * prev_min_product)\n    ))\n    min_product=$((\n      min(curr, curr * prev_max_product, curr * prev_min_product)\n    ))\n    max_so_far=$((max(max_so_far, max_product)))\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp0394yhx6.sh: line 19: \\n      max(curr, curr * prev_max_product, curr * prev_min_product)\\n    : syntax error in expression (error token is \"(curr, curr * prev_max_product, curr * prev_min_product)\\n    \")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a a=($1)\n  local -i max=0\n  local -i min=0\n  local -i max_so_far=1\n  local -i i\n\n  for ((i=0; i<${#a[@]}; i++)); do\n    if ((a[i] < 0)); then\n      ((max, min = min, max))\n    fi\n    ((max = max * a[i] > a[i] ? max * a[i] : a[i]))\n    ((min = min * a[i] < a[i] ? min * a[i] : a[i]))\n    ((max_so_far = max_so_far > max ? max_so_far : max))\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n\n  for (( i=1; i<${#arr[@]}; i++ )); do\n    local curr=${arr[$i]}\n    local max_product_candidates=($curr $(( curr * max_product )) $(( curr * min_product )))\n    local min_product_candidates=($curr $(( curr * max_product )) $(( curr * min_product )))\n\n    max_product=${max_product_candidates[0]}\n    min_product=${min_product_candidates[0]}\n    for (( j=1; j<${#max_product_candidates[@]}; j++ )); do\n      if [[ ${max_product_candidates[$j]} -gt $max_product ]]; then\n        max_product=${max_product_candidates[$j]}\n      fi\n      if [[ ${min_product_candidates[$j]} -lt $min_product ]]; then\n        min_product=${min_product_candidates[$j]}\n      fi\n    done\n    if [[ $max_product -gt $max_so_far ]]; then\n      max_so_far=$max_product\n    fi\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr\n    IFS=' ' read -r -a arr <<< \"$1\"\n    local max_product=${arr[0]}\n    local min_product=${arr[0]}\n    local max_so_far=$max_product\n    local i\n    for ((i = 1; i < ${#arr[@]}; i++)); do\n        local current=${arr[i]}\n        local max_product_candidate=$((max_product * current))\n        local min_product_candidate=$((min_product * current))\n        max_product=$((max_product_candidate > min_product_candidate ? max_product_candidate : min_product_candidate))\n        max_product=$((max_product > current ? max_product : current))\n        min_product=$((max_product_candidate < min_product_candidate ? max_product_candidate : min_product_candidate))\n        min_product=$((min_product < current ? min_product : current))\n        max_so_far=$((max_so_far > max_product ? max_so_far : max_product))\n    done\n    echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n\n  for (( i=1; i<${#arr[@]}; i++ )); do\n    local num=${arr[$i]}\n    local temp=$max_product\n    max_product=$(( max_product * num ))\n    min_product=$(( min_product * num ))\n    max_product=$(( max_product > min_product ? max_product : min_product ))\n    min_product=$(( min_product < temp ? min_product : temp ))\n    max_product=$(( max_product > num ? max_product : num ))\n    min_product=$(( min_product < num ? min_product : num ))\n    max_so_far=$(( max_so_far > max_product ? max_so_far : max_product ))\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a a=($1)\n    local max=${a[0]}\n    local min=${a[0]}\n    local max_product=${a[0]}\n    local i\n    for ((i=1; i<${#a[@]}; i++)); do\n        local ai=${a[i]}\n        if ((ai < 0)); then\n            local tmp=max\n            max=min\n            min=tmp\n        fi\n        max=$((max * ai))\n        min=$((min * ai))\n        if ((max < min)); then\n            max=min\n        fi\n        if ((max > max_product)); then\n            max_product=$max\n        fi\n    done\n    echo $max_product\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpm9645nfo.sh: line 18: max: expression recursion level exceeded (error token is \"max\")\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local -i max_product=${arr[0]}\n  local -i curr_product=${arr[0]}\n  local -i curr_min_product=${arr[0]}\n  local -i curr_max_product=${arr[0]}\n  local -i i\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    curr_product=${arr[i]}\n    if ((curr_product < 0)); then\n      ((curr_product = curr_min_product * curr_product))\n      ((curr_min_product = curr_product))\n    else\n      ((curr_product = curr_max_product * curr_product))\n      ((curr_max_product = curr_product))\n    fi\n    if ((curr_product > max_product)); then\n      ((max_product = curr_product))\n    fi\n  done\n\n  echo $max_product\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local curr=${arr[i]}\n    local max_product_candidate=$((max_product * curr))\n    local min_product_candidate=$((min_product * curr))\n    max_product=$((max_product_candidate > min_product_candidate ? max_product_candidate : min_product_candidate))\n    max_product=$((max_product > curr ? max_product : curr))\n    min_product=$((max_product_candidate < min_product_candidate ? max_product_candidate : min_product_candidate))\n    min_product=$((min_product < curr ? min_product : curr))\n    max_so_far=$((max_so_far > max_product ? max_so_far : max_product))\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_product=0\n  local product=1\n  local i=0\n  local j=0\n  local len=${#arr[@]}\n  while [ $i -lt $len ]; do\n    product=$((product * arr[i]))\n    if [ $product -gt $max_product ]; then\n      max_product=$product\n    fi\n    if [ $product -eq 0 ]; then\n      product=1\n      j=$((i + 1))\n    fi\n    i=$((i + 1))\n  done\n  echo $max_product\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=($1)\n    local -i max_product=${arr[0]}\n    local -i curr_product=${arr[0]}\n    local -i curr_min_product=${arr[0]}\n    local -i curr_max_product=${arr[0]}\n    local -i i=1\n    local -i n=${#arr[@]}\n\n    while (( i < n )); do\n        if (( arr[i] < 0 )); then\n            (( curr_min_product *= arr[i] ))\n            (( curr_max_product *= arr[i] ))\n            (( curr_product = curr_min_product ))\n        else\n            (( curr_max_product *= arr[i] ))\n            (( curr_min_product *= arr[i] ))\n            (( curr_product = curr_max_product ))\n        fi\n\n        (( curr_product > max_product )) && (( max_product = curr_product ))\n\n        (( curr_product < 0 )) && (( curr_product = arr[i] ))\n        (( curr_min_product < arr[i] )) && (( curr_min_product = arr[i] ))\n        (( curr_max_product < arr[i] )) && (( curr_max_product = arr[i] ))\n\n        (( i++ ))\n    done\n\n    echo $max_product\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max=${arr[0]}\n  local min=${arr[0]}\n  local result=${arr[0]}\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local temp=${arr[i]}\n    if [[ $temp -lt 0 ]]; then\n      local temp2=$max\n      max=$min\n      min=$temp2\n    fi\n    max=$(($temp * $max > $temp ? $temp * $max : $temp))\n    min=$(($temp * $min < $temp ? $temp * $min : $temp))\n    result=$(($result > $max ? $result : $max))\n  done\n  echo $result\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local array=($1)\n  local max_product=${array[0]}\n  local min_product=${array[0]}\n  local max_so_far=$max_product\n  local i\n  for ((i=1; i<${#array[@]}; i++)); do\n    local current=${array[i]}\n    local max_product_candidate=$((max_product * current))\n    local min_product_candidate=$((min_product * current))\n    max_product=$((max_product_candidate > min_product_candidate ? max_product_candidate : min_product_candidate))\n    max_product=$((max_product > current ? max_product : current))\n    min_product=$((max_product_candidate < min_product_candidate ? max_product_candidate : min_product_candidate))\n    min_product=$((min_product < current ? min_product : current))\n    max_so_far=$((max_so_far > max_product ? max_so_far : max_product))\n  done\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=()\n    local -i i=0\n    local -i max_product=0\n    local -i product=0\n    local -i max_neg_product=0\n    local -i neg_product=0\n    local -i max_neg_product_index=0\n    local -i max_product_index=0\n    local -i max_neg_product_index_end=0\n    local -i max_product_index_end=0\n    local -i max_product_index_start=0\n    local -i max_neg_product_index_start=0\n    local -i max_product_index_start_end=0\n    local -i max_neg_product_index_start_end=0\n    local -i max_product_index_start_end_index=0\n    local -i max_neg_product_index_start_end_index=0\n    local -i max_product_index_start_end_index_end=0\n    local -i max_neg_product_index_start_end_index_end=0\n    local -i max_product_index_start_end_index_end_index=0\n    local -i max_neg_product_index_start_end_index_end_index=0\n    local -i max_product_index_start_end_index_end_index_end=0\n    local -i max_neg_product_index_start_end_index_end_index_end=0\n    local -i max_product_index_start_end_index_end_index_end_index=0\n    local -i max_neg_product_index_start_end_index_end_index_end_index=0\n    local -i max_product_index_start_end_index_end_index_end_index_end=0\n    local -i max_neg_product_index_start_end_index_end_index_end_index_end=0\n    local -i max_product_index_start_end_index_end_index_end_index_end_index=0\n    local -i max_neg_product_index_start_end_index\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr\n    local -i i\n    local -i j\n    local -i k\n    local -i max\n    local -i prod\n    local -i len\n\n    arr=($1)\n    len=${#arr[@]}\n    max=${arr[0]}\n\n    for ((i=0; i<len; i++)); do\n        prod=1\n        for ((j=i; j<len; j++)); do\n            prod=$((prod * arr[j]))\n            if ((prod > max)); then\n                max=$prod\n            fi\n        done\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max=${arr[0]}\n  local min=${arr[0]}\n  local max_so_far=$max\n  local i\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local curr=${arr[i]}\n    local tmp=$((max * curr))\n    max=$((max > tmp ? max : tmp))\n    tmp=$((min * curr))\n    min=$((min < tmp ? min : tmp))\n    max_so_far=$((max_so_far > max ? max_so_far : max))\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max=${arr[0]}\n  local min=${arr[0]}\n  local result=${arr[0]}\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local tmp=$max\n    max=$(echo -e \"$max\\n$min\\n${arr[i]}\" | sort -nr | head -n 1)\n    min=$(echo -e \"$tmp\\n$min\\n${arr[i]}\" | sort -nr | tail -n 1)\n    result=$(echo -e \"$result\\n$max\" | sort -nr | head -n 1)\n  done\n  echo $result\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n  for (( i=1; i<${#arr[@]}; i++ )); do\n    local curr=${arr[$i]}\n    local temp_max=$max_product\n    max_product=$(( max_product * curr ))\n    min_product=$(( min_product * curr ))\n    max_product=$(( max_product > min_product ? max_product : min_product ))\n    min_product=$(( temp_max * curr < min_product ? temp_max * curr : min_product ))\n    max_product=$(( max_product > curr ? max_product : curr ))\n    min_product=$(( min_product < curr ? min_product : curr ))\n    max_so_far=$(( max_so_far > max_product ? max_so_far : max_product ))\n  done\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local array=($1)\n    local max=${array[0]}\n    local min=${array[0]}\n    local result=${array[0]}\n    for ((i=1; i<${#array[@]}; i++)); do\n        local num=${array[i]}\n        local temp_max=$max\n        local temp_min=$min\n        max=$(($num * $temp_max > $num * $temp_min ? $num * $temp_max : $num * $temp_min))\n        max=$(($max > $num ? $max : $num))\n        min=$(($num * $temp_max < $num * $temp_min ? $num * $temp_max : $num * $temp_min))\n        min=$(($min < $num ? $min : $num))\n        result=$(($result > $max ? $result : $max))\n    done\n    echo $result\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr\n    local -i i j k\n    local -i max_product=1\n    local -i curr_product=1\n    local -i curr_neg_product=1\n    local -i curr_pos_product=1\n    local -i curr_neg_count=0\n    local -i curr_pos_count=0\n    local -i max_neg_count=0\n    local -i max_pos_count=0\n\n    # Convert input to array\n    IFS=' ' read -r -a arr <<< \"$1\"\n\n    # Find the max product subarray\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if (( arr[i] == 0 )); then\n            if (( curr_neg_count > max_neg_count )); then\n                max_neg_count=$curr_neg_count\n            fi\n            if (( curr_pos_count > max_pos_count )); then\n                max_pos_count=$curr_pos_count\n            fi\n            curr_neg_count=0\n            curr_pos_count=0\n            curr_product=1\n            curr_neg_product=1\n            curr_pos_product=1\n        elif (( arr[i] < 0 )); then\n            (( curr_neg_count++ ))\n            (( curr_pos_count = 0 ))\n            (( curr_neg_product *= arr[i] ))\n            (( curr_product *= arr[i] ))\n            if (( curr_neg_product > curr_pos_product )); then\n                curr_pos_product=$curr_neg_product\n            fi\n        else\n            (( curr_pos_count++ ))\n            (( curr_neg_count = 0 ))\n            (( curr_pos_product *= arr[i] ))\n            (( curr_product *= arr[i] ))\n            if (( curr_pos_product > curr_neg_product )); then\n                curr_neg_product=$curr_pos_product\n            fi\n        fi\n        if (( curr_product > max_product )); then\n            max_\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpkj1g_rl4.sh: line 53: syntax error near unexpected token `}'\\n/tmp/tmpkj1g_rl4.sh: line 53: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max=${arr[0]}\n  local min=${arr[0]}\n  local result=${arr[0]}\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local tmp=$max\n    max=$((max > min ? max : min))\n    max=$((max > arr[i] ? max : arr[i]))\n    min=$((tmp < min ? tmp : min))\n    min=$((min < arr[i] ? min : arr[i]))\n    min=$((min < 0 ? min : 0))\n    result=$((result > max ? result : max))\n  done\n  echo $result\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=($1)\n    local max_product=${arr[0]}\n    local min_product=${arr[0]}\n    local max_so_far=$max_product\n    local i\n\n    for ((i=1; i<${#arr[@]}; i++)); do\n        local curr=${arr[i]}\n        local max_product_candidate=$((max_product * curr))\n        local min_product_candidate=$((min_product * curr))\n\n        max_product=$((max_product_candidate > min_product_candidate ? max_product_candidate : min_product_candidate))\n        max_product=$((max_product > curr ? max_product : curr))\n\n        min_product=$((max_product_candidate < min_product_candidate ? max_product_candidate : min_product_candidate))\n        min_product=$((min_product < curr ? min_product : curr))\n\n        max_so_far=$((max_so_far > max_product ? max_so_far : max_product))\n    done\n\n    echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=($1)\n    local max_product=${arr[0]}\n    local min_product=${arr[0]}\n    local max_so_far=$max_product\n\n    for (( i=1; i<${#arr[@]}; i++ )); do\n        local curr=${arr[$i]}\n        local max_product_candidate=$(( max_product * curr ))\n        local min_product_candidate=$(( min_product * curr ))\n\n        max_product=$(( max_product_candidate > min_product_candidate ? max_product_candidate : min_product_candidate ))\n        max_product=$(( max_product > curr ? max_product : curr ))\n        min_product=$(( max_product_candidate < min_product_candidate ? max_product_candidate : min_product_candidate ))\n        min_product=$(( min_product < curr ? min_product : curr ))\n\n        max_so_far=$(( max_so_far > max_product ? max_so_far : max_product ))\n    done\n\n    echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local -i max_so_far=0\n  local -i max_ending_here=1\n  local -i min_ending_here=1\n  local -i i=0\n  local -i n=${#arr[@]}\n  local -i tmp=0\n\n  for ((i=0; i<n; i++)); do\n    if [[ ${arr[$i]} -gt 0 ]]; then\n      max_ending_here=$((max_ending_here * arr[i]))\n      min_ending_here=$((min_ending_here * arr[i]))\n    elif [[ ${arr[$i]} -lt 0 ]]; then\n      tmp=$max_ending_here\n      max_ending_here=$((min_ending_here * arr[i]))\n      min_ending_here=$((tmp * arr[i]))\n    else\n      max_ending_here=1\n      min_ending_here=1\n    fi\n\n    if [[ $max_so_far -lt $max_ending_here ]]; then\n      max_so_far=$max_ending_here\n    fi\n\n    if [[ $max_ending_here -lt 1 ]]; then\n      max_ending_here=1\n    fi\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=($1)\n    local max_product=${arr[0]}\n    local min_product=${arr[0]}\n    local max_so_far=$max_product\n    local i\n\n    for ((i=1; i<${#arr[@]}; i++)); do\n        local curr=${arr[i]}\n        local temp=$max_product\n        max_product=$((max(max_product*curr, min_product*curr, curr)))\n        min_product=$((min(temp*curr, min_product*curr, curr)))\n        max_so_far=$((max(max_so_far, max_product)))\n    done\n    echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpyi5hwjyl.sh: line 15: max(max_product*curr, min_product*curr, curr): syntax error in expression (error token is \"(max_product*curr, min_product*curr, curr)\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=(\"$@\")\n  local max=${arr[0]}\n  local min=${arr[0]}\n  local max_so_far=$max\n  local i\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local curr=${arr[i]}\n    local temp=$((max * curr))\n    max=$((curr > temp ? curr : temp))\n    temp=$((min * curr))\n    min=$((curr < temp ? curr : temp))\n    max_so_far=$((max > max_so_far ? max : max_so_far))\n  done\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a a\n  local i j k\n  local max_product\n  local product\n  local max_i max_j\n  a=($1)\n  max_product=${a[0]}\n  max_i=0\n  max_j=0\n  for ((i=0; i<${#a[@]}; i++)); do\n    product=${a[i]}\n    if [[ $product -gt $max_product ]]; then\n      max_product=$product\n      max_i=$i\n      max_j=$i\n    fi\n    for ((j=i+1; j<${#a[@]}; j++)); do\n      product=$((product * a[j]))\n      if [[ $product -gt $max_product ]]; then\n        max_product=$product\n        max_i=$i\n        max_j=$j\n      fi\n    done\n  done\n  echo \"max_product=$max_product\"\n  echo \"max_i=$max_i\"\n  echo \"max_j=$max_j\"\n  echo \"max_subarray=${a[@]:$max_i:$((max_j-max_i+1))}\"\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max=${arr[0]}\n  local min=${arr[0]}\n  local result=${arr[0]}\n  local i\n  local tmp\n\n  for ((i=1;i<${#arr[@]};i++)); do\n    if [[ ${arr[i]} -lt 0 ]]; then\n      tmp=$max\n      max=$min\n      min=$tmp\n    fi\n\n    max=$((max * arr[i]))\n    min=$((min * arr[i]))\n\n    if [[ $max -gt $result ]]; then\n      result=$max\n    fi\n\n    if [[ $min -gt $result ]]; then\n      result=$min\n    fi\n\n    if [[ $max -lt 0 ]]; then\n      max=0\n    fi\n\n    if [[ $min -gt 0 ]]; then\n      min=0\n    fi\n  done\n\n  echo $result\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a a=($1)\n  local max_product=${a[0]}\n  local max_ending_here=${a[0]}\n  local min_ending_here=${a[0]}\n\n  for (( i=1; i<${#a[@]}; i++ )); do\n    if (( a[i] < 0 )); then\n      local tmp=max_ending_here\n      max_ending_here=min_ending_here\n      min_ending_here=tmp\n    fi\n\n    max_ending_here=$(( max_ending_here * a[i] ))\n    min_ending_here=$(( min_ending_here * a[i] ))\n\n    if (( max_ending_here > max_product )); then\n      max_product=$max_ending_here\n    fi\n\n    if (( max_ending_here < min_ending_here )); then\n      max_ending_here=$min_ending_here\n    fi\n\n    if (( min_ending_here > max_product )); then\n      max_product=$min_ending_here\n    fi\n\n    if (( max_ending_here < 1 )); then\n      max_ending_here=1\n    fi\n\n    if (( min_ending_here > -1 )); then\n      min_ending_here=-1\n    fi\n  done\n\n  echo $max_product\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp3vq4fe0k.sh: line 18: max_ending_here: expression recursion level exceeded (error token is \"max_ending_here\")\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_product_so_far=$max_product\n\n  for (( i=1; i<${#arr[@]}; i++ )); do\n    local current=${arr[$i]}\n    local max_product_candidate=$(( max_product * current ))\n    local min_product_candidate=$(( min_product * current ))\n\n    max_product=$(( max_product_candidate > min_product_candidate ? max_product_candidate : min_product_candidate ))\n    max_product=$(( max_product > current ? max_product : current ))\n\n    min_product=$(( max_product_candidate < min_product_candidate ? max_product_candidate : min_product_candidate ))\n    min_product=$(( min_product < current ? min_product : current ))\n\n    max_product_so_far=$(( max_product_so_far > max_product ? max_product_so_far : max_product ))\n  done\n\n  echo $max_product_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local current=${arr[i]}\n    local temp_max_product=$max_product\n    local temp_min_product=$min_product\n\n    max_product=$((\n      max(current,\n        max(current * temp_max_product,\n          current * temp_min_product))))\n    min_product=$((\n      min(current,\n        min(current * temp_max_product,\n          current * temp_min_product))))\n\n    max_so_far=$((max(max_so_far, max_product)))\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpotslmx17.sh: line 19: \\n      max(current,\\n        max(current * temp_max_product,\\n          current * temp_min_product)): syntax error in expression (error token is \"(current,\\n        max(current * temp_max_product,\\n          current * temp_min_product))\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_ending_here=1\n  local min_ending_here=1\n  local max_so_far=1\n  for i in \"${arr[@]}\"; do\n    if [[ $i -gt 0 ]]; then\n      max_ending_here=$((max_ending_here * i))\n      min_ending_here=$((min_ending_here * i))\n    elif [[ $i -lt 0 ]]; then\n      local temp=$max_ending_here\n      max_ending_here=$((min_ending_here * i))\n      min_ending_here=$((temp * i))\n    else\n      max_ending_here=1\n      min_ending_here=1\n    fi\n    if [[ $max_so_far -lt $max_ending_here ]]; then\n      max_so_far=$max_ending_here\n    fi\n  done\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a array=($1)\n    local max_product=${array[0]}\n    local min_product=${array[0]}\n    local max_so_far=$max_product\n\n    for ((i=1; i<${#array[@]}; i++)); do\n        local product_with_max=${array[i]}*$max_product\n        local product_with_min=${array[i]}*$min_product\n        max_product=$(echo $product_with_max $product_with_min ${array[i]} | tr ' ' '\\n' | sort -nr | head -n1)\n        min_product=$(echo $product_with_max $product_with_min ${array[i]} | tr ' ' '\\n' | sort -n | head -n1)\n        max_so_far=$(echo $max_so_far $max_product | tr ' ' '\\n' | sort -nr | head -n1)\n    done\n    echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local max=1\n    local min=1\n    local result=1\n    for i in $1; do\n        if [ $i -lt 0 ]; then\n            local temp=$max\n            max=$min\n            min=$temp\n        fi\n        max=$(($max * $i))\n        min=$(($min * $i))\n        if [ $max -gt $result ]; then\n            result=$max\n        fi\n        if [ $min -gt $result ]; then\n            result=$min\n        fi\n    done\n    echo $result\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n  for (( i=1; i<${#arr[@]}; i++ )); do\n    local curr=${arr[$i]}\n    local max_product_candidate=$(( max_product * curr ))\n    local min_product_candidate=$(( min_product * curr ))\n    max_product=$(( max_product_candidate > min_product_candidate ? max_product_candidate : min_product_candidate ))\n    max_product=$(( max_product > curr ? max_product : curr ))\n    min_product=$(( max_product_candidate < min_product_candidate ? max_product_candidate : min_product_candidate ))\n    min_product=$(( min_product < curr ? min_product : curr ))\n    max_so_far=$(( max_so_far > max_product ? max_so_far : max_product ))\n  done\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max=${arr[0]}\n  local min=${arr[0]}\n  local max_so_far=$max\n  local i\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local curr=${arr[i]}\n    local temp_max=$max\n    max=$(max $max $(max $curr $(($min * $curr))))\n    min=$(min $min $(min $curr $(($temp_max * $curr))))\n    max_so_far=$(max $max_so_far $max)\n  done\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpp2ltkxse.sh: line 14: max: command not found\\n/tmp/tmpp2ltkxse.sh: line 14: max: command not found\\n/tmp/tmpp2ltkxse.sh: line 15: min: command not found\\n/tmp/tmpp2ltkxse.sh: line 15: min: command not found\\n/tmp/tmpp2ltkxse.sh: line 16: max: command not found\\n/tmp/tmpp2ltkxse.sh: line 14: * -3: syntax error: operand expected (error token is \"* -3\")\\n/tmp/tmpp2ltkxse.sh: line 14: max: command not found\\n/tmp/tmpp2ltkxse.sh: line 15: * -3: syntax error: operand expected (error token is \"* -3\")\\n/tmp/tmpp2ltkxse.sh: line 15: min: command not found\\n/tmp/tmpp2ltkxse.sh: line 16: max: command not found\\n/tmp/tmpp2ltkxse.sh: line 14: * 0: syntax error: operand expected (error token is \"* 0\")\\n/tmp/tmpp2ltkxse.sh: line 14: max: command not found\\n/tmp/tmpp2ltkxse.sh: line 15: * 0: syntax error: operand expected (error token is \"* 0\")\\n/tmp/tmpp2ltkxse.sh: line 15: min: command not found\\n/tmp/tmpp2ltkxse.sh: line 16: max: command not found\\n/tmp/tmpp2ltkxse.sh: line 14: * 7: syntax error: operand expected (error token is \"* 7\")\\n/tmp/tmpp2ltkxse.sh: line 14: max: command not found\\n/tmp/tmpp2ltkxse.sh: line 15: * 7: syntax error: operand expected (error token is \"* 7\")\\n/tmp/tmpp2ltkxse.sh: line 15: min: command not found\\n/tmp/tmpp2ltkxse.sh: line 16: max: command not found\\n/tmp/tmpp2ltkxse.sh: line 14: * -8: syntax error: operand expected (error token is \"* -8\")\\n/tmp/tmpp2ltkxse.sh: line 14: max: command not found\\n/tmp/tmpp2ltkxse.sh: line 15: * -8: syntax error: operand expected (error token is \"* -8\")\\n/tmp/tmpp2ltkxse.sh: line 15: min: command not found\\n/tmp/tmpp2ltkxse.sh: line 16: max: command not found\\n/tmp/tmpp2ltkxse.sh: line 14: * -2: syntax error: operand expected (error token is \"* -2\")\\n/tmp/tmpp2ltkxse.sh: line 14: max: command not found\\n/tmp/tmpp2ltkxse.sh: line 15: * -2: syntax error: operand expected (error token is \"* -2\")\\n/tmp/tmpp2ltkxse.sh: line 15: min: command not found\\n/tmp/tmpp2ltkxse.sh: line 16: max: command not found\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=($1)\n    local max=${arr[0]}\n    local min=${arr[0]}\n    local result=${arr[0]}\n    local temp\n\n    for ((i=1; i<${#arr[@]}; i++)); do\n        temp=$max\n        max=$((${arr[i]} * $max > ${arr[i]} * $min ? ${arr[i]} * $max : ${arr[i]} * $min))\n        min=$((${arr[i]} * $temp > ${arr[i]} * $min ? ${arr[i]} * $min : ${arr[i]} * $temp))\n        result=$(($result > $max ? $result : $max))\n    done\n\n    echo $result\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local max_product=1\n  local min_product=1\n  local max_so_far=1\n  local max_ending_here=1\n  local min_ending_here=1\n  local i=1\n  local num\n  for num in $1; do\n    if [ $num -gt 0 ]; then\n      max_ending_here=$((max_ending_here * num))\n      min_ending_here=$((min_ending_here * num))\n    elif [ $num -eq 0 ]; then\n      max_ending_here=1\n      min_ending_here=1\n    else\n      local temp=$max_ending_here\n      max_ending_here=$((min_ending_here * num))\n      min_ending_here=$((temp * num))\n    fi\n    if [ $max_so_far -lt $max_ending_here ]; then\n      max_so_far=$max_ending_here\n    fi\n    if [ $max_ending_here -lt $min_ending_here ]; then\n      max_ending_here=$min_ending_here\n    fi\n    if [ $min_ending_here -gt $max_ending_here ]; then\n      min_ending_here=$max_ending_here\n    fi\n    i=$((i + 1))\n  done\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n  local i\n\n  for (( i=1; i<${#arr[@]}; i++ )); do\n    local tmp=$max_product\n    max_product=$(( max(max_product*arr[i], min_product*arr[i], arr[i]) ))\n    min_product=$(( min(tmp*arr[i], min_product*arr[i], arr[i]) ))\n    max_so_far=$(( max(max_so_far, max_product) ))\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmplrzplw3v.sh: line 14: max(max_product*arr[i], min_product*arr[i], arr[i]) : syntax error in expression (error token is \"(max_product*arr[i], min_product*arr[i], arr[i]) \")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=($1)\n    local max_product=${arr[0]}\n    local min_product=${arr[0]}\n    local max_so_far=$max_product\n\n    for (( i=1; i<${#arr[@]}; i++ )); do\n        local curr=${arr[$i]}\n        local max_product_candidate=$(( max_product * curr ))\n        local min_product_candidate=$(( min_product * curr ))\n        max_product=$(( max_product_candidate > min_product_candidate ? max_product_candidate : min_product_candidate ))\n        max_product=$(( max_product > curr ? max_product : curr ))\n        min_product=$(( max_product_candidate < min_product_candidate ? max_product_candidate : min_product_candidate ))\n        min_product=$(( min_product < curr ? min_product : curr ))\n        max_so_far=$(( max_so_far > max_product ? max_so_far : max_product ))\n    done\n\n    echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=($1)\n    local max_product=${arr[0]}\n    local min_product=${arr[0]}\n    local max_so_far=$max_product\n    local i\n\n    for ((i=1; i<${#arr[@]}; i++)); do\n        local num=${arr[i]}\n        if ((num < 0)); then\n            local tmp=$max_product\n            max_product=$min_product\n            min_product=$tmp\n        fi\n        max_product=$((max_product * num))\n        min_product=$((min_product * num))\n        max_product=$((max_product > num ? max_product : num))\n        min_product=$((min_product < num ? min_product : num))\n        max_so_far=$((max_so_far > max_product ? max_so_far : max_product))\n    done\n\n    echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a a=($1)\n    local -i max=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=${#a[@]}\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n\n    for (( i=0; i<n; i++ )); do\n        for (( j=i; j<n; j++ )); do\n            p=1\n            for (( k=i; k<=j; k++ )); do\n                p*=${a[k]}\n            done\n            if (( p > max )); then\n                max=$p\n            fi\n        done\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190968,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpxdzg90m4.sh: line 28: p*=1: command not found\\n/tmp/tmpxdzg90m4.sh: line 28: p*=1: command not found\\n/tmp/tmpxdzg90m4.sh: line 28: p*=-2: command not found\\n/tmp/tmpxdzg90m4.sh: line 28: p*=1: command not found\\n/tmp/tmpxdzg90m4.sh: line 28: p*=-2: command not found\\n/tmp/tmpxdzg90m4.sh: line 28: p*=-3: command not found\\n/tmp/tmpxdzg90m4.sh: line 28: p*=1: command not found\\n/tmp/tmpxdzg90m4.sh: line 28: p*=-2: command not found\\n/tmp/tmpxdzg90m4.sh: line 28: p*=-3: command not found\\n/tmp/tmpxdzg90m4.sh: line 28: p*=0: command not found\\n/tmp/tmpxdzg90m4.sh: line 28: p*=1: command not found\\n/tmp/tmpxdzg90m4.sh: line 28: p*=-2: command not found\\n/tmp/tmpxdzg90m4.sh: line 28: p*=-3: command not found\\n/tmp/tmpxdzg90m4.sh: line 28: p*=0: command not found\\n/tmp/tmpxdzg90m4.sh: line 28: p*=7: command not found\\n/tmp/tmpxdzg90m4.sh: line 28: p*=1: command not found\\n/tmp/tmpxdzg90m4.sh: line 28: p*=-2: command not found\\n/tmp/tmpxdzg90m4.sh: line 28: p*=-3: command not found\\n/tmp/tmpxdzg90m4.sh: line 28: p*=0: command not found\\n/tmp/tmpxdzg90m4.sh: line 28: p*=7: command not found\\n/tmp/tmpxdzg90m4.sh: line 28: p*=-8: command not found\\n/tmp/tmpxdzg90m4.sh: line 28: p*=1: command not found\\n/tmp/tmpxdzg90m4.sh: line 28: p*=-2: command not found\\n/tmp/tmpxdzg90m4.sh: line 28: p*=-3: command not found\\n/tmp/tmpxdzg90m4.sh: line 28: p*=0: command not found\\n/tmp/tmpxdzg90m4.sh: line 28: p*=7: command not found\\n/tmp/tmpxdzg90m4.sh: line 28: p*=-8: command not found\\n/tmp/tmpxdzg90m4.sh: line 28: p*=-2: command not found\\n/tmp/tmpxdzg90m4.sh: line 28: p*=-2: command not found\\n/tmp/tmpxdzg90m4.sh: line 28: p*=-2: command not found\\n/tmp/tmpxdzg90m4.sh: line 28: p*=-3: command not found\\n/tmp/tmpxdzg90m4.sh: line 28: p*=-2: command not found\\n/tmp/tmpxdzg90m4.sh: line 28: p*=-3: command not found\\n/tmp/tmpxdzg90m4.sh: line 28: p*=0: command not found\\n/tmp/tmpxdzg90m4.sh: line 28: p*=-2: command not found\\n/tmp/tmpxdzg90m4.sh: line 28: p*=-3: command not found\\n/tmp/tmpxdzg90m4.sh: line 28: p*=0: command n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n\n  for (( i=1; i<${#arr[@]}; i++ )); do\n    local curr=${arr[$i]}\n    local temp_max_product=$max_product\n    local temp_min_product=$min_product\n    max_product=$(( curr > curr*temp_max_product ? curr : curr*temp_max_product ))\n    min_product=$(( curr < curr*temp_min_product ? curr : curr*temp_min_product ))\n    max_so_far=$(( max_so_far > max_product ? max_so_far : max_product ))\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local curr=${arr[i]}\n    local max_product_candidate=$((max_product * curr))\n    local min_product_candidate=$((min_product * curr))\n    max_product=$((max_product_candidate > min_product_candidate ? max_product_candidate : min_product_candidate))\n    max_product=$((max_product > curr ? max_product : curr))\n    min_product=$((max_product_candidate < min_product_candidate ? max_product_candidate : min_product_candidate))\n    min_product=$((min_product < curr ? min_product : curr))\n    max_so_far=$((max_so_far > max_product ? max_so_far : max_product))\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a a\n  local i j k\n  local max_product\n  local product\n  IFS=' ' read -r -a a <<< \"$1\"\n  max_product=${a[0]}\n  for ((i=0; i<${#a[@]}; i++)); do\n    product=${a[i]}\n    for ((j=i+1; j<${#a[@]}; j++)); do\n      product=$((product * a[j]))\n      if ((product > max_product)); then\n        max_product=$product\n      fi\n    done\n  done\n  echo \"$max_product\"\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr\n    IFS=' ' read -r -a arr <<< \"$1\"\n    local max_product=${arr[0]}\n    local min_product=${arr[0]}\n    local max_so_far=$max_product\n    for ((i=1; i<${#arr[@]}; i++)); do\n        local curr=${arr[i]}\n        local temp_max=$max_product\n        max_product=$((max_product*curr))\n        min_product=$((min_product*curr))\n        max_product=$((max_product>min_product?max_product:min_product))\n        min_product=$((temp_max*curr<min_product*curr?temp_max*curr:min_product*curr))\n        max_product=$((max_product>curr?max_product:curr))\n        min_product=$((min_product<curr?min_product:curr))\n        max_so_far=$((max_so_far>max_product?max_so_far:max_product))\n    done\n    echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=${arr[0]}\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local curr=${arr[i]}\n    local temp=$max_product\n    max_product=$(max $max_product $min_product $curr)\n    min_product=$(min $temp $min_product $curr)\n    max_so_far=$(max $max_so_far $max_product)\n  done\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpum14zj48.sh: line 13: max: command not found\\n/tmp/tmpum14zj48.sh: line 14: min: command not found\\n/tmp/tmpum14zj48.sh: line 15: max: command not found\\n/tmp/tmpum14zj48.sh: line 13: max: command not found\\n/tmp/tmpum14zj48.sh: line 14: min: command not found\\n/tmp/tmpum14zj48.sh: line 15: max: command not found\\n/tmp/tmpum14zj48.sh: line 13: max: command not found\\n/tmp/tmpum14zj48.sh: line 14: min: command not found\\n/tmp/tmpum14zj48.sh: line 15: max: command not found\\n/tmp/tmpum14zj48.sh: line 13: max: command not found\\n/tmp/tmpum14zj48.sh: line 14: min: command not found\\n/tmp/tmpum14zj48.sh: line 15: max: command not found\\n/tmp/tmpum14zj48.sh: line 13: max: command not found\\n/tmp/tmpum14zj48.sh: line 14: min: command not found\\n/tmp/tmpum14zj48.sh: line 15: max: command not found\\n/tmp/tmpum14zj48.sh: line 13: max: command not found\\n/tmp/tmpum14zj48.sh: line 14: min: command not found\\n/tmp/tmpum14zj48.sh: line 15: max: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=($1)\n    local max_product=${arr[0]}\n    local max_product_ending_here=${arr[0]}\n    local min_product_ending_here=${arr[0]}\n    local max_product_so_far=${arr[0]}\n    local min_product_so_far=${arr[0]}\n    local i\n    for ((i=1; i<${#arr[@]}; i++)); do\n        local curr=${arr[i]}\n        if [[ $curr -gt 0 ]]; then\n            max_product_ending_here=$((max_product_ending_here * curr))\n            min_product_ending_here=$((min_product_ending_here * curr))\n        elif [[ $curr -lt 0 ]]; then\n            local temp=$max_product_ending_here\n            max_product_ending_here=$((min_product_ending_here * curr))\n            min_product_ending_here=$((temp * curr))\n        else\n            max_product_ending_here=0\n            min_product_ending_here=0\n        fi\n        if [[ $max_product_ending_here -gt $max_product_so_far ]]; then\n            max_product_so_far=$max_product_ending_here\n        fi\n        if [[ $min_product_ending_here -lt $min_product_so_far ]]; then\n            min_product_so_far=$min_product_ending_here\n        fi\n    done\n    echo $max_product_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=(\"$@\")\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n  local i\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local val=${arr[i]}\n    local max_product_candidate=$((max_product * val))\n    local min_product_candidate=$((min_product * val))\n    max_product=$((max_product_candidate > min_product_candidate ? max_product_candidate : min_product_candidate))\n    max_product=$((max_product > val ? max_product : val))\n    min_product=$((max_product_candidate < min_product_candidate ? max_product_candidate : min_product_candidate))\n    min_product=$((min_product < val ? min_product : val))\n    max_so_far=$((max_so_far > max_product ? max_so_far : max_product))\n  done\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local product_with_max=${arr[i]}*$max_product\n    local product_with_min=${arr[i]}*$min_product\n    max_product=$(max $product_with_max $product_with_min ${arr[i]})\n    min_product=$(min $product_with_max $product_with_min ${arr[i]})\n    max_so_far=$(max $max_so_far $max_product)\n  done\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp5s0gpi0q.sh: line 13: max: command not found\\n/tmp/tmp5s0gpi0q.sh: line 14: min: command not found\\n/tmp/tmp5s0gpi0q.sh: line 15: max: command not found\\n/tmp/tmp5s0gpi0q.sh: line 13: max: command not found\\n/tmp/tmp5s0gpi0q.sh: line 14: min: command not found\\n/tmp/tmp5s0gpi0q.sh: line 15: max: command not found\\n/tmp/tmp5s0gpi0q.sh: line 13: max: command not found\\n/tmp/tmp5s0gpi0q.sh: line 14: min: command not found\\n/tmp/tmp5s0gpi0q.sh: line 15: max: command not found\\n/tmp/tmp5s0gpi0q.sh: line 13: max: command not found\\n/tmp/tmp5s0gpi0q.sh: line 14: min: command not found\\n/tmp/tmp5s0gpi0q.sh: line 15: max: command not found\\n/tmp/tmp5s0gpi0q.sh: line 13: max: command not found\\n/tmp/tmp5s0gpi0q.sh: line 14: min: command not found\\n/tmp/tmp5s0gpi0q.sh: line 15: max: command not found\\n/tmp/tmp5s0gpi0q.sh: line 13: max: command not found\\n/tmp/tmp5s0gpi0q.sh: line 14: min: command not found\\n/tmp/tmp5s0gpi0q.sh: line 15: max: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=(\"$@\")\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local curr=${arr[$i]}\n    local temp_max=$max_product\n    local temp_min=$min_product\n    max_product=$((max(curr, temp_max * curr, temp_min * curr)))\n    min_product=$((min(curr, temp_max * curr, temp_min * curr)))\n    max_so_far=$((max(max_so_far, max_product)))\n  done\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=($1)\n    local max=${arr[0]}\n    local min=${arr[0]}\n    local result=${arr[0]}\n\n    for ((i=1; i<${#arr[@]}; i++)); do\n        local tmp_max=$max\n        local tmp_min=$min\n        max=$(echo -e \"$tmp_max\\n$tmp_min\\n${arr[i]}\" | sort -nr | head -n 1)\n        min=$(echo -e \"$tmp_max\\n$tmp_min\\n${arr[i]}\" | sort -n | head -n 1)\n        result=$(echo -e \"$result\\n$max\" | sort -nr | head -n 1)\n    done\n\n    echo $result\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190968,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max=${arr[0]}\n  local min=${arr[0]}\n  local max_so_far=$max\n  local i\n\n  for (( i=1; i<${#arr[@]}; i++ )); do\n    local curr=${arr[i]}\n    local tmp=$max\n    max=$(( max > 0 ? max : 1 ))\n    max=$(( max * curr ))\n    min=$(( min < 0 ? min : 1 ))\n    min=$(( min * curr ))\n    max=$(( max > min ? max : min ))\n    min=$(( max > min ? min : max ))\n    max_so_far=$(( max_so_far > max ? max_so_far : max ))\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=($1)\n    local max_product=${arr[0]}\n    local min_product=${arr[0]}\n    local max_so_far=$max_product\n    local i\n    for ((i=1; i<${#arr[@]}; i++)); do\n        local curr=${arr[i]}\n        local temp_max=$max_product\n        max_product=$((max(curr, curr*max_product, curr*min_product)))\n        min_product=$((min(curr, curr*temp_max, curr*min_product)))\n        max_so_far=$((max(max_so_far, max_product)))\n    done\n    echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpo0la1t25.sh: line 14: max(curr, curr*max_product, curr*min_product): syntax error in expression (error token is \"(curr, curr*max_product, curr*min_product)\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n  local i=1\n  local len=${#arr[@]}\n  while [ $i -lt $len ]; do\n    local cur=${arr[$i]}\n    local tmp_max_product=$max_product\n    max_product=$(max $max_product $cur $((min_product * cur)))\n    min_product=$(min $min_product $cur $((tmp_max_product * cur)))\n    max_so_far=$(max $max_so_far $max_product)\n    i=$((i + 1))\n  done\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpi8moww9v.sh: line 15: max: command not found\\n/tmp/tmpi8moww9v.sh: line 16: min: command not found\\n/tmp/tmpi8moww9v.sh: line 17: max: command not found\\n/tmp/tmpi8moww9v.sh: line 15: max: command not found\\n/tmp/tmpi8moww9v.sh: line 16: min: command not found\\n/tmp/tmpi8moww9v.sh: line 17: max: command not found\\n/tmp/tmpi8moww9v.sh: line 15: max: command not found\\n/tmp/tmpi8moww9v.sh: line 16: min: command not found\\n/tmp/tmpi8moww9v.sh: line 17: max: command not found\\n/tmp/tmpi8moww9v.sh: line 15: max: command not found\\n/tmp/tmpi8moww9v.sh: line 16: min: command not found\\n/tmp/tmpi8moww9v.sh: line 17: max: command not found\\n/tmp/tmpi8moww9v.sh: line 15: max: command not found\\n/tmp/tmpi8moww9v.sh: line 16: min: command not found\\n/tmp/tmpi8moww9v.sh: line 17: max: command not found\\n/tmp/tmpi8moww9v.sh: line 15: max: command not found\\n/tmp/tmpi8moww9v.sh: line 16: min: command not found\\n/tmp/tmpi8moww9v.sh: line 17: max: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n    local -a arr=($1)\n    local max=${arr[0]}\n    local min=${arr[0]}\n    local max_so_far=$max\n    local i\n\n    for ((i=1; i<${#arr[@]}; i++)); do\n        local num=${arr[i]}\n        local tmp=$max\n        max=$((max > 0 ? max : 1))\n        max=$((max * num))\n        min=$((min < 0 ? min : 1))\n        min=$((min * num))\n        max=$((max > min ? max : min))\n        min=$((max < min ? max : min))\n        max_so_far=$((max_so_far > max ? max_so_far : max))\n    done\n\n    echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr=($1)\n  local max_so_far=${arr[0]}\n  local min_so_far=${arr[0]}\n  local max_ending_here=${arr[0]}\n  local min_ending_here=${arr[0]}\n  local max_product=${arr[0]}\n\n  for (( i=1; i<${#arr[@]}; i++ )); do\n    if [[ ${arr[i]} -gt 0 ]]; then\n      max_ending_here=$(( max_ending_here * arr[i] ))\n      min_ending_here=$(( min_ending_here * arr[i] ))\n    elif [[ ${arr[i]} -lt 0 ]]; then\n      local temp=$max_ending_here\n      max_ending_here=$(( min_ending_here * arr[i] ))\n      min_ending_here=$(( temp * arr[i] ))\n    else\n      max_ending_here=0\n      min_ending_here=0\n    fi\n\n    if [[ $max_ending_here -gt $max_so_far ]]; then\n      max_so_far=$max_ending_here\n    fi\n\n    if [[ $min_ending_here -lt $min_so_far ]]; then\n      min_so_far=$min_ending_here\n    fi\n  done\n\n  echo $max_so_far\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  local -a arr\n  IFS=' ' read -r -a arr <<< \"$1\"\n  local max_product=0\n  local current_product=1\n  local i\n  for ((i=0; i<${#arr[@]}; i++)); do\n    current_product=$((current_product * arr[i]))\n    if ((current_product > max_product)); then\n      max_product=$current_product\n    fi\n    if ((arr[i] == 0)); then\n      current_product=1\n    fi\n  done\n  echo $max_product\n}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
      "timestamp": 1667190967,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}