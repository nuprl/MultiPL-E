{
  "name": "mbpp_745_divisible_by_digits",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/shthon-exercises/lambda/shthon-lambda-exercise-24.php\n#\n# $1 is an integer\n# $2 is an integer\ndivisible_by_digits() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    divisible_by_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\" \"22\") = \"1 2 3 4 5 6 7 8 9 11 12 15 22\" ]]\n    [[ $(candidate \"1\" \"15\") = \"1 2 3 4 5 6 7 8 9 11 12 15\" ]]\n    [[ $(candidate \"20\" \"25\") = \"22 24\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local num=$1\n    local divisor=$2\n    local digit\n    while [ $num -gt 0 ]; do\n        digit=$(( num % 10 ))\n        if [ $digit -eq 0 ]; then\n            return 1\n        fi\n        if [ $(( divisor % digit )) -ne 0 ]; then\n            return 1\n        fi\n        num=$(( num / 10 ))\n    done\n    return 0",
    "    local num=$1\n    local divisor=$2\n    local remainder=$((num % divisor))\n    if [[ $remainder -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi",
    "    local num=$1\n    local divisor=$2\n    local result=0\n    while [ $num -gt 0 ]; do\n        local digit=$(( num % 10 ))\n        if [ $digit -eq 0 ]; then\n            return 1\n        fi\n        result=$(( result + divisor % digit ))\n        num=$(( num / 10 ))\n    done\n    [ $result -eq 0 ]",
    "  local number=$1\n  local divisor=$2\n  local remainder=$(($number % $divisor))\n  if [ $remainder -eq 0 ]; then\n    return 0\n  else\n    return 1\n  fi",
    "    local num=$1\n    local divisor=$2\n    local remainder=$((num % divisor))\n    if [[ $remainder -eq 0 ]]; then\n        return 0\n    else\n        return 1\n    fi",
    "  local num=$1\n  local divisor=$2\n  local remainder=$(($num % $divisor))\n  if [ $remainder -eq 0 ]; then\n    return 0\n  else\n    return 1\n  fi",
    "    local num=$1\n    local divisor=$2\n    local digit\n    while [ $num -gt 0 ]; do\n        digit=$(( num % 10 ))\n        if [ $digit -eq 0 ] || [ $(( divisor % digit )) -ne 0 ]; then\n            return 1\n        fi\n        num=$(( num / 10 ))\n    done\n    return 0",
    "    local num=$1\n    local divisor=$2\n    local digit\n    while [ $num -gt 0 ]; do\n        digit=$(( num % 10 ))\n        if [ $digit -eq 0 ] || [ $divisor -eq 0 ]; then\n            return 1\n        fi\n        if [ $(( divisor % digit )) -ne 0 ]; then\n            return 1\n        fi\n        num=$(( num / 10 ))\n    done\n    return 0",
    "  if [ $1 -le $2 ]; then\n    for (( i=$1; i<=$2; i++ )); do\n      if [ $i -eq 0 ]; then\n        continue\n      fi\n      num=$i\n      while [ $num -ne 0 ]; do\n        digit=$(( $num % 10 ))\n        if [ $digit -eq 0 ]; then\n          break\n        fi\n        if [ $(( $i % $digit )) -ne 0 ]; then\n          break\n        fi\n        num=$(( $num / 10 ))\n      done\n      if [ $num -eq 0 ]; then\n        echo $i\n      fi\n    done\n  fi",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 startnum endnum\"\n        return 1\n    fi\n    local startnum=$1\n    local endnum=$2\n    local num=$startnum\n    while [ $num -le $endnum ]; do\n        local num_copy=$num\n        while [ $num_copy -gt 0 ]; do\n            local digit=$((num_copy % 10))\n            if [ $digit -eq 0 ]; then\n                break\n            fi\n            if [ $((num % digit)) -ne 0 ]; then\n                break\n            fi\n            num_copy=$((num_copy / 10))\n        done\n        if [ $num_copy -eq 0 ]; then\n            echo $num\n        fi\n        num=$((num + 1))\n    done",
    "  local num=$1\n  local divisor=$2\n  local remainder=$((num % divisor))\n  if [[ $remainder -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi",
    "    local num=$1\n    local divisor=$2\n    if [ $num -eq 0 ]; then\n        return 0\n    fi\n    if [ $num -eq 1 ]; then\n        return 1\n    fi\n    if [ $num -eq $divisor ]; then\n        return 0\n    fi\n    if [ $num -lt $divisor ]; then\n        return 1\n    fi\n    if [ $((num % divisor)) -eq 0 ]; then\n        divisible_by_digits $((num / 10)) $divisor\n    else\n        return 1\n    fi",
    "    local num=$1\n    local divisor=$2\n    local digit\n    while [ $num -gt 0 ]; do\n        digit=$(( num % 10 ))\n        [ $digit -eq 0 ] && return 1\n        [ $(( divisor % digit )) -ne 0 ] && return 1\n        num=$(( num / 10 ))\n    done\n    return 0",
    "  local num=$1\n  local divisor=$2\n  local remainder=$((num % divisor))\n  if [ $remainder -eq 0 ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi",
    "  local num=$1\n  local divisor=$2\n  local digit\n  while [ $num -gt 0 ]; do\n    digit=$(( num % 10 ))\n    [ $digit -eq 0 ] && return 1\n    [ $(( divisor % digit )) -ne 0 ] && return 1\n    num=$(( num / 10 ))\n  done\n  return 0",
    "  local num=$1\n  local divisor=$2\n  local remainder=$((num % divisor))\n  if [ $remainder -eq 0 ]\n  then\n    return 0\n  else\n    return 1\n  fi",
    "    local num=$1\n    local divisor=$2\n    local remainder=$((num % divisor))\n    if [[ $remainder -eq 0 ]]; then\n        return 0\n    else\n        return 1\n    fi",
    "    local number=$1\n    local divisor=$2\n    local remainder=$(($number % $divisor))\n    if [ $remainder -eq 0 ]; then\n        return 0\n    else\n        return 1\n    fi",
    "  local number=\"$1\"\n  local divisor=\"$2\"\n  local remainder=$(( number % divisor ))\n  if [ $remainder -eq 0 ]; then\n    echo 1\n  else\n    echo 0\n  fi",
    "    local num=$1\n    local divisor=$2\n    local result=0\n    local digit=0\n    while [ $num -gt 0 ]; do\n        digit=$(( $num % 10 ))\n        if [ $digit -ne 0 ]; then\n            result=$(( $divisor % $digit ))\n            if [ $result -ne 0 ]; then\n                return 1\n            fi\n        fi\n        num=$(( $num / 10 ))\n    done\n    return 0"
  ]
}