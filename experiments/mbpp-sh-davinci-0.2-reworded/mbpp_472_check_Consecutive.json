{
  "name": "mbpp_472_check_Consecutive",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a shthon function to check whether the given list contains consecutive numbers or not.\n#\n# $1 is a space-separated list\ncheck_Consecutive() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    check_Consecutive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 5 6\") = \"false\" ]]\n    [[ $(candidate \"1 2 1\") = \"false\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local list=$1\n    local isConsecutive=1\n    local prev=0\n    for i in $list; do\n        if [ $i -eq $prev ]; then\n            isConsecutive=0\n            break\n        fi\n        prev=$i\n    done\n    echo $isConsecutive",
    "  local list=\"$1\"\n  local prev=0\n  for num in $list; do\n    if [ $num -eq $prev ]; then\n      echo \"Duplicate number: $num\"\n      return 1\n    fi\n    if [ $num -ne $((prev+1)) ]; then\n      echo \"Not consecutive: $num\"\n      return 1\n    fi\n    prev=$num\n  done\n  echo \"Consecutive numbers\"\n  return 0",
    "    local list=$1\n    local i=0\n    local prev=0\n    local curr=0\n    local count=0\n    for i in $list; do\n        curr=$i\n        if [ $prev -eq 0 ]; then\n            prev=$curr\n        else\n            if [ $curr -eq $((prev+1)) ]; then\n                count=$((count+1))\n            fi\n        fi\n        prev=$curr\n    done\n    if [ $count -eq $((i-1)) ]; then\n        echo \"Consecutive\"\n    else\n        echo \"Not Consecutive\"\n    fi",
    "    local list=$1\n    local prev=0\n    local curr=0\n    local count=0\n    for i in $list; do\n        curr=$i\n        if [ $count -eq 0 ]; then\n            prev=$curr\n        else\n            if [ $((curr-prev)) -ne 1 ]; then\n                echo \"Not consecutive\"\n                return\n            fi\n            prev=$curr\n        fi\n        count=$((count+1))\n    done\n    echo \"Consecutive\"",
    "    local list=\"$1\"\n    local prev=0\n    local curr=0\n    local isConsecutive=1\n    for i in $list; do\n        curr=$i\n        if [ $prev -ne 0 ]; then\n            if [ $curr -ne $((prev+1)) ]; then\n                isConsecutive=0\n                break\n            fi\n        fi\n        prev=$curr\n    done\n    echo $isConsecutive",
    "    local list=$1\n    local list_len=$(echo $list | wc -w)\n    local i=1\n    local prev=0\n    local curr=0\n    for i in $(seq 1 $list_len); do\n        curr=$(echo $list | cut -d' ' -f$i)\n        if [ $i -eq 1 ]; then\n            prev=$curr\n            continue\n        fi\n        if [ $curr -ne $((prev+1)) ]; then\n            echo \"Not consecutive\"\n            return\n        fi\n        prev=$curr\n    done\n    echo \"Consecutive\"",
    "    local -a arr=($1)\n    local i=0\n    local j=0\n    local k=0\n    local flag=0\n    local len=${#arr[@]}\n    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n                k=${arr[i]}\n                arr[i]=${arr[j]}\n                arr[j]=$k\n            fi\n        done\n    done\n    for ((i=0; i<len-1; i++))\n    do\n        if [[ $((arr[i]+1)) -eq ${arr[i+1]} ]]\n        then\n            flag=1\n        else\n            flag=0\n            break\n        fi\n    done\n    if [[ $flag -eq 1 ]]\n    then\n        echo \"Consecutive\"\n    else\n        echo \"Not Consecutive\"\n    fi",
    "    local list=$1\n    local list_len=$(echo $list | wc -w)\n    local list_sorted=$(echo $list | tr ' ' '\\n' | sort -n)\n    local list_sorted_len=$(echo $list_sorted | wc -w)\n    local list_min=$(echo $list_sorted | cut -d ' ' -f 1)\n    local list_max=$(echo $list_sorted | cut -d ' ' -f $list_sorted_len)\n    local list_diff=$(($list_max - $list_min + 1))\n    if [ $list_len -eq $list_sorted_len -a $list_len -eq $list_diff ]; then\n        echo \"Consecutive\"\n    else\n        echo \"Not Consecutive\"\n    fi",
    "    local list=\"$1\"\n    local isConsecutive=true\n    local prev=0\n    for i in $list; do\n        if [ $prev -ne 0 ]; then\n            if [ $((i-prev)) -ne 1 ]; then\n                isConsecutive=false\n                break\n            fi\n        fi\n        prev=$i\n    done\n    echo $isConsecutive",
    "    local list=$1\n    local last=0\n    local current=0\n    local consecutive=1\n    for i in $list; do\n        current=$i\n        if [ $last -ne 0 ] && [ $((current-last)) -ne 1 ]; then\n            consecutive=0\n            break\n        fi\n        last=$current\n    done\n    echo $consecutive",
    "    local list=$1\n    local isConsecutive=1\n    local prev=0\n    for i in $list; do\n        if [[ $prev -ne 0 ]]; then\n            if [[ $prev -ne $((i-1)) ]]; then\n                isConsecutive=0\n                break\n            fi\n        fi\n        prev=$i\n    done\n    echo $isConsecutive",
    "    local list=$1\n    local prev=0\n    local curr=0\n    local is_consecutive=1\n    for num in $list; do\n        curr=$num\n        if [ $curr -ne $((prev+1)) ]; then\n            is_consecutive=0\n            break\n        fi\n        prev=$curr\n    done\n    echo $is_consecutive",
    "    # convert the input string to an array\n    arr=($1)\n    # sort the array\n    arr=($(for i in \"${arr[@]}\"; do echo $i; done | sort))\n    # get the length of the array\n    len=${#arr[@]}\n    # check if the array is consecutive\n    for (( i=0; i<$len-1; i++ )); do\n        if [ ${arr[$i]} -ne $(( ${arr[$i+1]}-1 )) ]; then\n            echo \"False\"\n            return\n        fi\n    done\n    echo \"True\"",
    "    local arr=($1)\n    local i=0\n    local j=0\n    local count=0\n    local flag=0\n    for ((i=0; i<${#arr[@]}; i++))\n    do\n        for ((j=i+1; j<${#arr[@]}; j++))\n        do\n            if [ ${arr[$i]} -eq ${arr[$j]} ]\n            then\n                flag=1\n                break\n            fi\n        done\n        if [ $flag -eq 1 ]\n        then\n            break\n        fi\n    done\n    if [ $flag -eq 1 ]\n    then\n        echo \"No\"\n    else\n        for ((i=0; i<${#arr[@]}; i++))\n        do\n            for ((j=i+1; j<${#arr[@]}; j++))\n            do\n                if [ ${arr[$i]} -eq $(( ${arr[$j]} + 1 )) ]\n                then\n                    count=$(( $count + 1 ))\n                fi\n            done\n        done\n        if [ $count -eq $(( ${#arr[@]} - 1 )) ]\n        then\n            echo \"Yes\"\n        else\n            echo \"No\"\n        fi\n    fi",
    "    local list=$1\n    local list_array=($list)\n    local list_length=${#list_array[@]}\n    local i=0\n    local j=0\n    local k=0\n    local is_consecutive=0\n    local consecutive_count=0\n    local consecutive_array=()\n    local consecutive_array_length=0\n    local consecutive_array_index=0\n    local consecutive_array_index_max=0\n    local consecutive_array_index_min=0\n    local consecutive_array_index_diff=0\n    local consecutive_array_index_diff_max=0\n    local consecutive_array_index_diff_min=0\n    local consecutive_array_index_diff_max_index=0\n    local consecutive_array_index_diff_min_index=0\n    local consecutive_array_index_diff_max_index_diff=0\n    local consecutive_array_index_diff_min_index_diff=0\n    local consecutive_array_index_diff_max_index_diff_max=0\n    local consecutive_array_index_diff_min_index_diff_min=0\n    local consecutive_array_index_diff_max_index_diff_max_index=0\n    local consecutive_array_index_diff_min_index_diff_min_index=0\n    local consecutive_array_index_diff_max_index_diff_max_index_diff=0\n    local consecutive_array_index_diff_min_index_diff_min_index_diff=0\n    local consecutive_array_index_diff_max_index_diff_max_index_diff_max=0\n    local consecutive_array_index_diff_min_index_diff_min_index_diff_min=0\n    local consecutive_array_index_diff_max_index_diff_max_index_diff_max_index=0\n    local consecutive_array_index_diff_min_index_diff_min_index_diff_min_index=0\n    local consecutive_array_index_diff_max_index_diff_max_index_diff_max_index_diff=0\n    local consecutive_array_index_diff_min_index_",
    "    local list=\"$1\"\n    local prev=0\n    for num in $list; do\n        if [ $prev -gt 0 ]; then\n            if [ $prev -ne $((num - 1)) ]; then\n                echo \"Not consecutive\"\n                return 1\n            fi\n        fi\n        prev=$num\n    done\n    echo \"Consecutive\"\n    return 0",
    "    # Convert the list to an array\n    arr=($1)\n    # Sort the array\n    arr=($(for i in \"${arr[@]}\"; do echo $i; done | sort -n))\n    # Check if the array is consecutive\n    for ((i=0; i<${#arr[@]}-1; i++)); do\n        if [ ${arr[$i]} -ne $(( ${arr[$i+1]}-1 )) ]; then\n            echo \"The list is not consecutive\"\n            return\n        fi\n    done\n    echo \"The list is consecutive\"",
    "    local list=$1\n    local list_len=$(echo $list | wc -w)\n    local list_sorted=$(echo $list | tr ' ' '\\n' | sort -n | tr '\\n' ' ')\n    local list_sorted_len=$(echo $list_sorted | wc -w)\n    local list_sorted_first=$(echo $list_sorted | cut -d ' ' -f1)\n    local list_sorted_last=$(echo $list_sorted | cut -d ' ' -f$list_sorted_len)\n    local list_sorted_diff=$(($list_sorted_last - $list_sorted_first))\n    if [ $list_len -eq $list_sorted_len ] && [ $list_sorted_diff -eq $(($list_sorted_len - 1)) ]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi",
    "  local list=$1\n  local list_len=$(echo $list | wc -w)\n  local min=$(echo $list | tr ' ' '\\n' | sort -n | head -n 1)\n  local max=$(echo $list | tr ' ' '\\n' | sort -n | tail -n 1)\n  local expected_sum=$(( (min + max) * list_len / 2 ))\n  local actual_sum=$(echo $list | tr ' ' '+' | bc)\n  if [[ $expected_sum -eq $actual_sum ]]; then\n    echo \"Consecutive\"\n  else\n    echo \"Not Consecutive\"\n  fi",
    "    local list=\"$1\"\n    local list_array=($list)\n    local length=${#list_array[@]}\n    local i=0\n    local is_consecutive=1\n    for ((i=0; i<length-1; i++)); do\n        if [[ ${list_array[i]} -ne $(( ${list_array[i+1]} - 1 )) ]]; then\n            is_consecutive=0\n            break\n        fi\n    done\n    echo $is_consecutive"
  ]
}