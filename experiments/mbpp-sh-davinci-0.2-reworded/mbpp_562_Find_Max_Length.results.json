{
  "name": "mbpp_562_Find_Max_Length",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_562_Find_Max_Length.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local -i max=0\n    local -i len=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i ab=0\n    local -i ac=0\n    local -i ad=0\n    local -i ae=0\n    local -i af=0\n    local -i ag=0\n    local -i ah=0\n    local -i ai=0\n    local -i aj=0\n    local -i ak=0\n    local -i al=0\n    local -i am=0\n    local -i an=0\n    local -i ao=0\n    local -i ap=0\n    local -i aq=0\n    local -i ar=0\n    local -i as=0\n    local -i at=0\n    local -i au=0\n    local -i av=0\n    local -i aw=0\n    local -i ax=0\n    local -i ay=0\n    local -i az=0\n    local -i ba=0\n    local -i bb=0\n    local -i bc=0\n    local -i bd=0\n    local -i be=0\n    local -i bf=0\n    local -i bg=0\n    local -i bh=0\n    local -i bi=0\n    local -i bj=0\n    local -i bk=0\n    local -i bl=0\n    local -i bm=0\n    local -i bn=0\n    local -i bo=0\n    local -i bp=0\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local list=$1\n    local item\n    for item in $list; do\n        len=${#item}\n        if [ $len -gt $max ]; then\n            max=$len\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local word\n    for word in $1; do\n        len=${#word}\n        if [ $len -gt $max ]; then\n            max=$len\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local word\n    for word in $1; do\n        len=$(echo -n \"$word\" | wc -c)\n        if [ $len -gt $max ]; then\n            max=$len\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_char=\n    local previous_char=\n    local -a list=($1)\n    for current_char in \"${list[@]}\"; do\n        if [[ \"$current_char\" == \"$previous_char\" ]]; then\n            ((current_length++))\n        else\n            if ((current_length > max_length)); then\n                max_length=$current_length\n            fi\n            current_length=1\n        fi\n        previous_char=$current_char\n    done\n    if ((current_length > max_length)); then\n        max_length=$current_length\n    fi\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local -i max_length=0\n    local -i length=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n    local -i nnn=0\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local length=0\n    local list=$1\n    local word\n    for word in $list; do\n        length=$(echo -n $word | wc -c)\n        if [ $length -gt $max_length ]; then\n            max_length=$length\n        fi\n    done\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    # Split the list into sublists\n    local -a Sublists=($(echo \"$1\" | tr '\\n' ' '))\n\n    # Find the length of the longest sublist\n    local Max_Length=0\n    for Sublist in \"${Sublists[@]}\"; do\n        local Length=${#Sublist}\n        if [[ $Length -gt $Max_Length ]]; then\n            Max_Length=$Length\n        fi\n    done\n\n    # Return the length\n    echo $Max_Length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local line\n    local word\n    while read line; do\n        len=0\n        for word in $line; do\n            len=$((len+1))\n        done\n        if [ $len -gt $max ]; then\n            max=$len\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n  local max=0\n  while read -r line; do\n    local length=$(echo \"$line\" | wc -w)\n    if [[ $length -gt $max ]]; then\n      max=$length\n    fi\n  done <<< \"$1\"\n  echo \"$max\"\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_len=0\n    local len=0\n    local line\n    local word\n    while read line; do\n        len=0\n        for word in $line; do\n            len=$((len+1))\n        done\n        if [ $len -gt $max_len ]; then\n            max_len=$len\n        fi\n    done\n    echo $max_len\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local -a list\n    local -i max_length=0\n    local -i length=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n    local\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local list=\"$1\"\n    local word\n    for word in $list; do\n        len=$(echo -n \"$word\" | wc -c)\n        if [ $len -gt $max ]; then\n            max=$len\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local word\n    for word in $1; do\n        len=$(echo -n \"$word\" | wc -c)\n        if [ $len -gt $max ]; then\n            max=$len\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local length=0\n    local list=$1\n    local item\n    for item in $list; do\n        if [[ $item == *\" \"* ]]; then\n            length=0\n        else\n            (( length++ ))\n            if [[ $length -gt $max_length ]]; then\n                max_length=$length\n            fi\n        fi\n    done\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local length=0\n    local word\n    for word in $1; do\n        if [[ $word == *\"\\n\"* ]]; then\n            if [[ $length -gt $max_length ]]; then\n                max_length=$length\n            fi\n            length=0\n        else\n            length=$((length + 1))\n        fi\n    done\n    if [[ $length -gt $max_length ]]; then\n        max_length=$length\n    fi\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local word\n    for word in $1; do\n        len=$(echo -n $word | wc -c)\n        if [ $len -gt $max ]; then\n            max=$len\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local list=$1\n    local item\n    for item in $list; do\n        len=${#item}\n        if [ $len -gt $max ]; then\n            max=$len\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_word=''\n    local previous_word=''\n    local word=''\n    local list=\"$1\"\n    for word in $list; do\n        if [[ \"$word\" == \"$previous_word\" ]]; then\n            ((current_length++))\n        else\n            if [[ $current_length -gt $max_length ]]; then\n                max_length=$current_length\n            fi\n            current_length=1\n            previous_word=$word\n        fi\n    done\n    if [[ $current_length -gt $max_length ]]; then\n        max_length=$current_length\n    fi\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local list=\"$1\"\n    local max_length=0\n    local length=0\n    local word=''\n    local -a words=()\n\n    while read -r line; do\n        words=( $line )\n        length=${#words[@]}\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n        fi\n    done <<< \"$list\"\n\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n  local max=0\n  local len=0\n  for word in $1; do\n    len=$(echo -n \"$word\" | wc -c)\n    if [ $len -gt $max ]; then\n      max=$len\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local -i max_length=0\n    local -i current_length=0\n    local -i current_number=0\n    local -i previous_number=0\n    local -i number_of_numbers=0\n    local -i number_of_sublists=0\n    local -i number_of_sublists_with_max_length=0\n    local -i number_of_sublists_with_max_length_and_max_number=0\n    local -i max_number=0\n    local -i current_number_of_sublists_with_max_length_and_max_number=0\n    local -i current_number_of_sublists_with_max_length=0\n    local -i current_number_of_sublists=0\n    local -i current_max_number=0\n    local -i current_max_length=0\n    local -i current_number_of_numbers=0\n    local -i current_number_of_numbers_with_max_length=0\n    local -i current_number_of_numbers_with_max_length_and_max_number=0\n    local -i current_number_of_numbers_with_max_length_and_max_number_and_max_length=0\n    local -i current_number_of_numbers_with_max_length_and_max_number_and_max_length_and_max_number=0\n    local -i current_number_of_numbers_with_max_length_and_max_number_and_max_length_and_max_number_and_max_length=0\n    local -i current_number_of_numbers_with_max_length_and_max_number_and_max_length_and_max_number_and_max_length_and_max_number=0\n    local -i current_number_of_numbers_with_max_length_and_max_number_and_max_length_and_max_number_and_max_length_and_max_number_and_max_length=0\n    local -i current_number_of_numbers_with_max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_char=''\n    local previous_char=''\n    local list=\"$1\"\n    for ((i=0; i<${#list}; i++)); do\n        current_char=\"${list:$i:1}\"\n        if [[ \"$current_char\" == ' ' ]]; then\n            if [[ \"$previous_char\" != ' ' ]]; then\n                if [[ $current_length -gt $max_length ]]; then\n                    max_length=$current_length\n                fi\n                current_length=0\n            fi\n        else\n            current_length=$((current_length + 1))\n        fi\n        previous_char=\"$current_char\"\n    done\n    if [[ $current_length -gt $max_length ]]; then\n        max_length=$current_length\n    fi\n    echo \"$max_length\"\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local length=0\n    local list=$1\n    local item\n    for item in $list; do\n        if [[ $item == *\"\\n\"* ]]; then\n            if [[ $length -gt $max_length ]]; then\n                max_length=$length\n            fi\n            length=0\n        else\n            length=$((length+1))\n        fi\n    done\n    if [[ $length -gt $max_length ]]; then\n        max_length=$length\n    fi\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local word\n    for word in $1; do\n        len=${#word}\n        if [ $len -gt $max ]; then\n            max=$len\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local length=0\n    local list=$1\n    local item\n    for item in $list; do\n        if [[ $item == '' ]]; then\n            if [[ $length -gt $max_length ]]; then\n                max_length=$length\n            fi\n            length=0\n        else\n            length=$((length+1))\n        fi\n    done\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local length=0\n    local word\n    for word in $1; do\n        if [[ $word =~ ^-?[0-9]+$ ]]; then\n            length=$((length + 1))\n        else\n            if [[ $length -gt $max_length ]]; then\n                max_length=$length\n            fi\n            length=0\n        fi\n    done\n    if [[ $length -gt $max_length ]]; then\n        max_length=$length\n    fi\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local previous_length=0\n    local current_word=''\n    local previous_word=''\n    local current_line=''\n    local previous_line=''\n    local line_number=0\n    local word_number=0\n    local line_length=0\n    local word_length=0\n    local word_count=0\n    local line_count=0\n    local line_start=0\n    local line_end=0\n    local word_start=0\n    local word_end=0\n    local word_start_index=0\n    local word_end_index=0\n    local line_start_index=0\n    local line_end_index=0\n    local word_index=0\n    local line_index=0\n    local word_index_list=''\n    local line_index_list=''\n    local word_index_list_length=0\n    local line_index_list_length=0\n    local word_index_list_index=0\n    local line_index_list_index=0\n    local word_index_list_start=0\n    local line_index_list_start=0\n    local word_index_list_end=0\n    local line_index_list_end=0\n    local word_index_list_start_index=0\n    local line_index_list_start_index=0\n    local word_index_list_end_index=0\n    local line_index_list_end_index=0\n    local word_index_list_index_index=0\n    local line_index_list_index_index=0\n    local word_index_list_index_index_index=0\n    local line_index_list_index_index_index=0\n    local word_index_list_index_index_index_index=0\n    local line_index_list_index_index_index_index=0\n    local word_index_list_index_index_index_index_index=0\n    local line_index_list_index_index_index_index_index=0\n    local word_index_list_index_index\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n  local max=0\n  local len=0\n  local list=$1\n  for word in $list\n  do\n    len=${#word}\n    if [ $len -gt $max ]\n    then\n      max=$len\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local list=$1\n    local item\n    for item in $list; do\n        len=$(echo $item | wc -w)\n        if [ $len -gt $max ]; then\n            max=$len\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n  local max_length=0\n  local length=0\n  local list=$1\n  local item\n  for item in $list; do\n    if [[ $item == *\" \"* ]]; then\n      length=$(($length + 1))\n    else\n      if [[ $length -gt $max_length ]]; then\n        max_length=$length\n      fi\n      length=0\n    fi\n  done\n  echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local list=$1\n    local item\n    for item in $list; do\n        if [[ $item =~ ^[0-9]+$ ]]; then\n            (( len++ ))\n        else\n            if (( len > max )); then\n                max=$len\n            fi\n            len=0\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local word\n    for word in $1; do\n        if [[ $word =~ ^[a-zA-Z]+$ ]]; then\n            ((current_length++))\n        else\n            if [[ $current_length -gt $max_length ]]; then\n                max_length=$current_length\n            fi\n            current_length=0\n        fi\n    done\n    if [[ $current_length -gt $max_length ]]; then\n        max_length=$current_length\n    fi\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_word\n    local current_char\n    local current_char_ascii\n    local current_char_is_space\n    local current_char_is_newline\n    local current_char_is_space_or_newline\n    local current_char_is_not_space_or_newline\n    local current_char_is_not_newline\n    local current_char_is_not_space\n    local current_char_is_not_space_or_newline_or_newline\n    local current_char_is_not_space_or_newline_or_newline_or_newline\n    local current_char_is_not_space_or_newline_or_newline_or_newline_or_newline\n    local current_char_is_not_space_or_newline_or_newline_or_newline_or_newline_or_newline\n    local current_char_is_not_space_or_newline_or_newline_or_newline_or_newline_or_newline_or_newline\n    local current_char_is_not_space_or_newline_or_newline_or_newline_or_newline_or_newline_or_newline_or_newline\n    local current_char_is_not_space_or_newline_or_newline_or_newline_or_newline_or_newline_or_newline_or_newline_or_newline\n    local current_char_is_not_space_or_newline_or_newline_or_newline_or_newline_or_newline_or_newline_or_newline_or_newline_or_newline\n    local current_char_is_not_space_or_newline_or_newline_or_newline_or_newline_or_newline_or_newline_or_newline_or_newline_or_newline_or_newline\n    local current_char_is_not_space_or_newline_\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local word\n    for word in $1; do\n        len=$(echo -n $word | wc -c)\n        if [ $len -gt $max ]; then\n            max=$len\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_word\n    local current_sublist\n    local current_sublist_length\n    local sublist_lengths\n    local sublist_lengths_sorted\n    local sublist_lengths_sorted_length\n    local sublist_lengths_sorted_length_index\n    local sublist_lengths_sorted_length_index_sublist\n    local sublist_lengths_sorted_length_index_sublist_length\n    local sublist_lengths_sorted_length_index_sublist_length_index\n    local sublist_lengths_sorted_length_index_sublist_length_index_sublist\n    local sublist_lengths_sorted_length_index_sublist_length_index_sublist_length\n    local sublist_lengths_sorted_length_index_sublist_length_index_sublist_length_index\n    local sublist_lengths_sorted_length_index_sublist_length_index_sublist_length_index_sublist\n    local sublist_lengths_sorted_length_index_sublist_length_index_sublist_length_index_sublist_length\n    local sublist_lengths_sorted_length_index_sublist_length_index_sublist_length_index_sublist_length_index\n    local sublist_lengths_sorted_length_index_sublist_length_index_sublist_length_index_sublist_length_index_sublist\n    local sublist_lengths_sorted_length_index_sublist_length_index_sublist_length_index_sublist_length_index_sublist_length\n    local sublist_lengths_sorted_length_index_sublist_length_index_sublist_length_index_sublist_length_index_sublist_length_index\n    local sublist_lengths_sorted_length_index_sublist_length_index_sublist_length_index_sublist_length_index_sublist_length_index_sublist\n    local sublist_lengths_sorted_length_index\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local line\n    local word\n    while read line; do\n        len=0\n        for word in $line; do\n            len=$((len + 1))\n        done\n        if [ $len -gt $max ]; then\n            max=$len\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n  local max_length=0\n  local current_length=0\n  local current_word=\"\"\n  local previous_word=\"\"\n  local current_line=\"\"\n  local previous_line=\"\"\n  local -a words\n  local -a lines\n  local -a lengths\n  local -a max_lengths\n  local -a max_length_indices\n\n  # Split the list into lines\n  IFS=$'\\n' read -d '' -ra lines <<< \"$1\"\n\n  # Split each line into words\n  for (( i=0; i<${#lines[@]}; i++ )); do\n    IFS=$' ' read -d '' -ra words <<< \"${lines[$i]}\"\n    lengths[$i]=${#words[@]}\n    if [[ ${lengths[$i]} -gt $max_length ]]; then\n      max_length=${lengths[$i]}\n    fi\n  done\n\n  # Find all the lines with the max length\n  for (( i=0; i<${#lines[@]}; i++ )); do\n    if [[ ${lengths[$i]} -eq $max_length ]]; then\n      max_lengths[${#max_lengths[@]}]=${lines[$i]}\n      max_length_indices[${#max_length_indices[@]}]=$i\n    fi\n  done\n\n  # Print the lines with the max length\n  for (( i=0; i<${#max_lengths[@]}; i++ )); do\n    echo \"${max_lengths[$i]}\"\n  done\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local line\n    while read line; do\n        len=0\n        for word in $line; do\n            len=$((len + 1))\n        done\n        if [ $len -gt $max ]; then\n            max=$len\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    # Split the input into a list of sublists\n    local sublists=($(echo \"$1\" | tr '\\n' ' '))\n    # Find the length of each sublist\n    local lengths=($(echo \"${sublists[@]}\" | tr ' ' '\\n' | wc -w))\n    # Find the maximum length\n    local max_length=$(echo \"${lengths[@]}\" | tr ' ' '\\n' | sort -n | tail -n 1)\n    # Return the maximum length\n    echo \"$max_length\"\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n  local max_length=0\n  local length=0\n  local list=$1\n  local item\n  for item in $list; do\n    if [[ $item == *\"\\n\"* ]]; then\n      if [[ $length -gt $max_length ]]; then\n        max_length=$length\n      fi\n      length=0\n    else\n      length=$((length+1))\n    fi\n  done\n  if [[ $length -gt $max_length ]]; then\n    max_length=$length\n  fi\n  echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_char=''\n    local previous_char=''\n    local list=$1\n    for current_char in $list; do\n        if [ \"$current_char\" = \"$previous_char\" ]; then\n            current_length=$((current_length + 1))\n        else\n            if [ $current_length -gt $max_length ]; then\n                max_length=$current_length\n            fi\n            current_length=1\n        fi\n        previous_char=$current_char\n    done\n    if [ $current_length -gt $max_length ]; then\n        max_length=$current_length\n    fi\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local list=$1\n    local item\n    for item in $list; do\n        if [ \"$item\" == \" \" ]; then\n            if [ $len -gt $max ]; then\n                max=$len\n            fi\n            len=0\n        else\n            len=$((len+1))\n        fi\n    done\n    if [ $len -gt $max ]; then\n        max=$len\n    fi\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_char\n    local current_char_is_space=false\n    while IFS= read -r -n1 current_char; do\n        if [[ \"$current_char\" == \" \" ]]; then\n            current_char_is_space=true\n        else\n            if [[ \"$current_char_is_space\" == true ]]; then\n                if [[ \"$current_length\" -gt \"$max_length\" ]]; then\n                    max_length=\"$current_length\"\n                fi\n                current_length=0\n            fi\n            current_char_is_space=false\n            current_length=$((current_length + 1))\n        fi\n    done <<< \"$1\"\n    echo \"$max_length\"\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n\tlocal max=0\n\tlocal len=0\n\tlocal list=\"$1\"\n\tfor word in $list; do\n\t\tlen=${#word}\n\t\tif [ $len -gt $max ]; then\n\t\t\tmax=$len\n\t\tfi\n\tdone\n\techo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n  local max_length=0\n  local current_length=0\n  local current_item=''\n  local previous_item=''\n  for current_item in $1; do\n    if [[ $current_item == $previous_item ]]; then\n      ((current_length++))\n    else\n      if [[ $current_length -gt $max_length ]]; then\n        max_length=$current_length\n      fi\n      current_length=1\n    fi\n    previous_item=$current_item\n  done\n  if [[ $current_length -gt $max_length ]]; then\n    max_length=$current_length\n  fi\n  echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local length\n    for word in $1; do\n        length=${#word}\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n        fi\n    done\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n  local max=0\n  local len=0\n  local line\n  while read line; do\n    len=0\n    for word in $line; do\n      len=$((len+1))\n    done\n    if [[ $len -gt $max ]]; then\n      max=$len\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local list=\"$1\"\n    local item\n    for item in $list; do\n        len=$(echo -n \"$item\" | wc -c)\n        if [ $len -gt $max ]; then\n            max=$len\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_char=''\n    local previous_char=''\n    local list=\"$1\"\n    local list_length=\"${#list}\"\n    local i=0\n    while [ $i -lt $list_length ]; do\n        current_char=\"${list:$i:1}\"\n        if [ \"$current_char\" == \"$previous_char\" ]; then\n            current_length=$((current_length + 1))\n        else\n            if [ $current_length -gt $max_length ]; then\n                max_length=$current_length\n            fi\n            current_length=1\n        fi\n        previous_char=\"$current_char\"\n        i=$((i + 1))\n    done\n    if [ $current_length -gt $max_length ]; then\n        max_length=$current_length\n    fi\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local word\n    for word in $1; do\n        len=$(echo -n \"$word\" | wc -c)\n        if [ $len -gt $max ]; then\n            max=$len\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n  local max=0\n  local list=$1\n  local len=0\n  for sublist in $list; do\n    len=`echo $sublist | wc -w`\n    if [ $len -gt $max ]; then\n      max=$len\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_len=0\n    local len=0\n    local word\n    for word in $1; do\n        len=$(echo -n \"$word\" | wc -c)\n        if [ $len -gt $max_len ]; then\n            max_len=$len\n        fi\n    done\n    echo $max_len\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local word\n    for word in $1; do\n        len=$(echo -n \"$word\" | wc -c)\n        if [ $len -gt $max ]; then\n            max=$len\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_word=\"\"\n    while read -r line; do\n        current_length=0\n        for current_word in $line; do\n            current_length=$((current_length + 1))\n        done\n        if [[ $current_length -gt $max_length ]]; then\n            max_length=$current_length\n        fi\n    done\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local list=\"$1\"\n    local max_length=0\n    local length=0\n    local item=''\n    local sublist=''\n    local sublist_length=0\n    for item in $list; do\n        if [[ \"$item\" == '\\n' ]]; then\n            if [[ $length -gt $max_length ]]; then\n                max_length=$length\n                sublist=$sublist\n                sublist_length=$sublist_length\n            fi\n            length=0\n            sublist=''\n            sublist_length=0\n        else\n            length=$((length + 1))\n            sublist=\"$sublist $item\"\n            sublist_length=$((sublist_length + 1))\n        fi\n    done\n    if [[ $length -gt $max_length ]]; then\n        max_length=$length\n        sublist=$sublist\n        sublist_length=$sublist_length\n    fi\n    echo \"Max length: $max_length\"\n    echo \"Sublist: $sublist\"\n    echo \"Sublist length: $sublist_length\"\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local length=0\n    local word\n    for word in $1; do\n        if [[ $word =~ ^-?[0-9]+$ ]]; then\n            ((length++))\n        else\n            if ((length > max_length)); then\n                max_length=$length\n            fi\n            length=0\n        fi\n    done\n    if ((length > max_length)); then\n        max_length=$length\n    fi\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local length=0\n    local word\n    for word in $1; do\n        if [[ $word =~ ^[a-zA-Z]+$ ]]; then\n            ((length++))\n        else\n            if [[ $length -gt $max_length ]]; then\n                max_length=$length\n            fi\n            length=0\n        fi\n    done\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local length=0\n    local word=''\n    while read -r line; do\n        length=0\n        for word in $line; do\n            length=$((length + 1))\n        done\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n        fi\n    done <<< \"$1\"\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local cur=0\n    local in_list=0\n    local c\n    for ((i=0; i<${#1}; i++)); do\n        c=${1:$i:1}\n        if [[ $c == ' ' ]]; then\n            if [[ $in_list -eq 1 ]]; then\n                cur=$((cur + 1))\n            fi\n        elif [[ $c == $'\\n' ]]; then\n            if [[ $in_list -eq 1 ]]; then\n                if [[ $cur -gt $max ]]; then\n                    max=$cur\n                fi\n                cur=0\n            fi\n            in_list=0\n        else\n            if [[ $in_list -eq 0 ]]; then\n                in_list=1\n            fi\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local length=0\n    local list=$1\n    local item\n    for item in $list; do\n        if [ \"$item\" = \"\" ]; then\n            if [ \"$length\" -gt \"$max_length\" ]; then\n                max_length=$length\n            fi\n            length=0\n        else\n            length=$((length + 1))\n        fi\n    done\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local list=\"$1\"\n    local item\n    for item in $list; do\n        len=${#item}\n        if [ $len -gt $max ]; then\n            max=$len\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n  local max_length=0\n  local length=0\n  local word\n  for word in $1; do\n    if [[ \"$word\" == *\"\\n\"* ]]; then\n      if [[ $length -gt $max_length ]]; then\n        max_length=$length\n      fi\n      length=0\n    else\n      length=$((length + 1))\n    fi\n  done\n  if [[ $length -gt $max_length ]]; then\n    max_length=$length\n  fi\n  echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local list=\"$1\"\n    local max_length=0\n    local length=0\n    local item\n    for item in $list; do\n        if [[ \"$item\" == \"\" ]]; then\n            if [[ \"$length\" -gt \"$max_length\" ]]; then\n                max_length=\"$length\"\n            fi\n            length=0\n        else\n            length=$((length + 1))\n        fi\n    done\n    if [[ \"$length\" -gt \"$max_length\" ]]; then\n        max_length=\"$length\"\n    fi\n    echo \"$max_length\"\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n  local longest=0\n  local current=0\n  local IFS=$'\\n'\n  for line in $1; do\n    current=0\n    for word in $line; do\n      current=$((current+1))\n    done\n    if [ $current -gt $longest ]; then\n      longest=$current\n    fi\n  done\n  echo $longest\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_word\n    for current_word in $1; do\n        if [[ $current_word =~ ^[a-zA-Z]+$ ]]; then\n            current_length=$((current_length + 1))\n        else\n            if [[ $current_length -gt $max_length ]]; then\n                max_length=$current_length\n            fi\n            current_length=0\n        fi\n    done\n    if [[ $current_length -gt $max_length ]]; then\n        max_length=$current_length\n    fi\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local list=\"$1\"\n    local max_length=0\n    local length=0\n    local word\n    for word in $list; do\n        length=$(echo -n \"$word\" | wc -c)\n        if [ $length -gt $max_length ]; then\n            max_length=$length\n        fi\n    done\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_character=\"\"\n    local previous_character=\"\"\n    local list=\"$1\"\n    for current_character in $list; do\n        if [ \"$current_character\" = \"$previous_character\" ]; then\n            ((current_length++))\n        else\n            if [ $current_length -gt $max_length ]; then\n                max_length=$current_length\n            fi\n            current_length=1\n        fi\n        previous_character=$current_character\n    done\n    if [ $current_length -gt $max_length ]; then\n        max_length=$current_length\n    fi\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_word=''\n    local previous_word=''\n    local current_line=''\n    local previous_line=''\n    local current_line_length=0\n    local previous_line_length=0\n    local current_line_word_count=0\n    local previous_line_word_count=0\n    local current_line_word_count_max=0\n    local previous_line_word_count_max=0\n    local current_line_word_count_max_length=0\n    local previous_line_word_count_max_length=0\n    local current_line_word_count_max_length_max=0\n    local previous_line_word_count_max_length_max=0\n    local current_line_word_count_max_length_max_length=0\n    local previous_line_word_count_max_length_max_length=0\n    local current_line_word_count_max_length_max_length_max=0\n    local previous_line_word_count_max_length_max_length_max=0\n    local current_line_word_count_max_length_max_length_max_length=0\n    local previous_line_word_count_max_length_max_length_max_length=0\n    local current_line_word_count_max_length_max_length_max_length_max=0\n    local previous_line_word_count_max_length_max_length_max_length_max=0\n    local current_line_word_count_max_length_max_length_max_length_max_length=0\n    local previous_line_word_count_max_length_max_length_max_length_max_length=0\n    local current_line_word_count_max_length_max_length_max_length_max_length_max=0\n    local previous_line_word_count_max_length_max_length_max_length_max_length_max=0\n    local current_line_word_count_max_length_max_length_max_length_max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_char=''\n    local previous_char=''\n\n    while read -r line; do\n        current_length=0\n        previous_char=''\n        for current_char in $line; do\n            if [ \"$previous_char\" != \"$current_char\" ]; then\n                ((current_length++))\n            else\n                if [ $current_length -gt $max_length ]; then\n                    max_length=$current_length\n                fi\n                current_length=1\n            fi\n            previous_char=$current_char\n        done\n        if [ $current_length -gt $max_length ]; then\n            max_length=$current_length\n        fi\n    done <<< \"$1\"\n\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local list=\"$1\"\n    local item\n    for item in $list; do\n        if [[ $item == $'\\n' ]]; then\n            if [[ $current_length -gt $max_length ]]; then\n                max_length=$current_length\n            fi\n            current_length=0\n        else\n            current_length=$((current_length + 1))\n        fi\n    done\n    if [[ $current_length -gt $max_length ]]; then\n        max_length=$current_length\n    fi\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_word=''\n    local previous_word=''\n    local word=''\n    for word in $1; do\n        current_word=$word\n        if [[ \"$previous_word\" == '' ]]; then\n            current_length=1\n        elif [[ \"$current_word\" == \"$previous_word\" ]]; then\n            (( current_length++ ))\n        else\n            if [[ \"$current_length\" -gt \"$max_length\" ]]; then\n                max_length=$current_length\n            fi\n            current_length=1\n        fi\n        previous_word=$current_word\n    done\n    if [[ \"$current_length\" -gt \"$max_length\" ]]; then\n        max_length=$current_length\n    fi\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local curr=0\n    local list=$1\n    local item\n    for item in $list; do\n        if [ \"$item\" == \"\" ]; then\n            if [ $curr -gt $max ]; then\n                max=$curr\n            fi\n            curr=0\n        else\n            curr=$((curr+1))\n        fi\n    done\n    if [ $curr -gt $max ]; then\n        max=$curr\n    fi\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n  echo \"$1\" | awk 'BEGIN { max_len = 0 }\n    {\n      if (length($0) > max_len) {\n        max_len = length($0)\n      }\n    }\n    END { print max_len }'\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_word\n    local current_line\n    local current_line_length\n    local current_line_words\n    local current_line_word_count\n    local current_line_word_index\n    local current_line_word_length\n    local current_line_word_max_length\n    local current_line_word_max_length_index\n    local current_line_word_max_length_word\n    local current_line_word_max_length_line\n    local current_line_word_max_length_line_length\n    local current_line_word_max_length_line_words\n    local current_line_word_max_length_line_word_count\n    local current_line_word_max_length_line_word_index\n    local current_line_word_max_length_line_word_length\n    local current_line_word_max_length_line_word_max_length\n    local current_line_word_max_length_line_word_max_length_index\n    local current_line_word_max_length_line_word_max_length_word\n    local current_line_word_max_length_line_word_max_length_line\n    local current_line_word_max_length_line_word_max_length_line_length\n    local current_line_word_max_length_line_word_max_length_line_words\n    local current_line_word_max_length_line_word_max_length_line_word_count\n    local current_line_word_max_length_line_word_max_length_line_word_index\n    local current_line_word_max_length_line_word_max_length_line_word_length\n    local current_line_word_max_length_line_word_max_length_line_word_max_length\n    local current_line_word_max_length_line_word_max_length_line_word_max_length_index\n    local current_line_word_max_length_line_word_max_length_line_word_max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_char=''\n    local previous_char=''\n    local list=$1\n    for (( i=0; i<${#list}; i++ )); do\n        current_char=${list:$i:1}\n        if [[ $current_char == $'\\n' ]]; then\n            if [[ $current_length -gt $max_length ]]; then\n                max_length=$current_length\n            fi\n            current_length=0\n            previous_char=$current_char\n        elif [[ $current_char == ' ' ]]; then\n            if [[ $previous_char != ' ' ]]; then\n                current_length=0\n            fi\n            previous_char=$current_char\n        else\n            current_length=$((current_length+1))\n            previous_char=$current_char\n        fi\n    done\n    if [[ $current_length -gt $max_length ]]; then\n        max_length=$current_length\n    fi\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local length=0\n    local word\n    for word in $1; do\n        length=$(echo -n \"$word\" | wc -c)\n        if [ $length -gt $max_length ]; then\n            max_length=$length\n        fi\n    done\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local current=0\n    local list=$1\n    local IFS=$'\\n'\n    for line in $list; do\n        current=0\n        for word in $line; do\n            current=$((current+1))\n        done\n        if [ $current -gt $max ]; then\n            max=$current\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local list=\"$1\"\n    local item\n    for item in $list; do\n        len=${#item}\n        if [[ $len -gt $max ]]; then\n            max=$len\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local list=\"$1\"\n    local item\n    for item in $list; do\n        len=$(echo -n \"$item\" | wc -m)\n        if [ $len -gt $max ]; then\n            max=$len\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_word=''\n    local previous_word=''\n    while read -r current_word; do\n        if [[ \"$current_word\" == \"$previous_word\" ]]; then\n            ((current_length++))\n        else\n            if [[ $current_length -gt $max_length ]]; then\n                max_length=$current_length\n            fi\n            current_length=1\n        fi\n        previous_word=$current_word\n    done\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local list=$1\n    local item\n    for item in $list; do\n        len=$(echo -n \"$item\" | wc -c)\n        if [ $len -gt $max ]; then\n            max=$len\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    # Split the list into sublists\n    local sublists=($(echo \"$1\" | tr '\\n' ' '))\n    # Find the length of each sublist\n    local lengths=($(for sublist in \"${sublists[@]}\"; do\n        echo \"${#sublist}\"\n    done))\n    # Find the maximum length\n    echo \"${lengths[@]}\" | tr ' ' '\\n' | sort -n | tail -n 1\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    # Split the list into an array of sublists\n    IFS=$'\\n' read -d '' -r -a sublists <<< \"$1\"\n    # Find the length of the longest sublist\n    max_length=0\n    for sublist in \"${sublists[@]}\"; do\n        length=$(echo \"$sublist\" | wc -w)\n        if [[ \"$length\" -gt \"$max_length\" ]]; then\n            max_length=\"$length\"\n        fi\n    done\n    # Print the length of the longest sublist\n    echo \"$max_length\"\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local length=0\n    local word\n    for word in $1; do\n        if [ \"$word\" = \"\" ]; then\n            if [ $length -gt $max_length ]; then\n                max_length=$length\n            fi\n            length=0\n        else\n            length=$((length+1))\n        fi\n    done\n    if [ $length -gt $max_length ]; then\n        max_length=$length\n    fi\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local length=0\n    local word\n    for word in $1; do\n        if [[ $word == *\"\\n\"* ]]; then\n            if [[ $length -gt $max_length ]]; then\n                max_length=$length\n            fi\n            length=0\n        else\n            let length++\n        fi\n    done\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local length=0\n    local word\n    for word in $1; do\n        length=$(echo -n \"$word\" | wc -c)\n        if [ $length -gt $max_length ]; then\n            max_length=$length\n        fi\n    done\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local list=$1\n    local item\n    for item in $list; do\n        if [[ $item =~ ^[0-9]+$ ]]; then\n            len=$(($len + 1))\n        else\n            if [[ $len -gt $max ]]; then\n                max=$len\n            fi\n            len=0\n        fi\n    done\n    if [[ $len -gt $max ]]; then\n        max=$len\n    fi\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_word=''\n    local previous_word=''\n    local word=''\n    local list=\"$1\"\n\n    for word in $list; do\n        current_word=\"$word\"\n        if [[ \"$current_word\" == \"$previous_word\" ]]; then\n            current_length=$((current_length + 1))\n        else\n            if [[ $current_length -gt $max_length ]]; then\n                max_length=$current_length\n            fi\n            current_length=1\n        fi\n        previous_word=\"$current_word\"\n    done\n\n    if [[ $current_length -gt $max_length ]]; then\n        max_length=$current_length\n    fi\n\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local list=$1\n    local item\n    for item in $list; do\n        len=${#item}\n        if [ $len -gt $max ]; then\n            max=$len\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local list=\"$1\"\n    local item\n    for item in $list; do\n        len=$(echo -n \"$item\" | wc -c)\n        if [ $len -gt $max ]; then\n            max=$len\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local current=0\n    for word in $1; do\n        if [[ $word == *\"\\n\"* ]]; then\n            if [[ $current -gt $max ]]; then\n                max=$current\n            fi\n            current=0\n        else\n            current=$((current+1))\n        fi\n    done\n    if [[ $current -gt $max ]]; then\n        max=$current\n    fi\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_word=''\n    local previous_word=''\n    local word=''\n    for word in $1; do\n        if [[ \"$word\" == \"$previous_word\" ]]; then\n            current_length=$((current_length + 1))\n        else\n            current_length=1\n        fi\n        if [[ \"$current_length\" -gt \"$max_length\" ]]; then\n            max_length=\"$current_length\"\n        fi\n        previous_word=\"$word\"\n    done\n    echo \"$max_length\"\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local -i max=0\n    local -i len=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n    local -i nnn=0\n   \n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n  local max=0\n  local line\n  local len\n  while read line; do\n    len=$(echo \"$line\" | wc -w)\n    if [ \"$len\" -gt \"$max\" ]; then\n      max=\"$len\"\n    fi\n  done\n  echo \"$max\"\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_char=''\n    local last_char=''\n    local list=$1\n    for current_char in $list; do\n        if [[ $current_char == $last_char ]]; then\n            current_length=$((current_length + 1))\n        else\n            current_length=1\n        fi\n        if [[ $current_length -gt $max_length ]]; then\n            max_length=$current_length\n        fi\n        last_char=$current_char\n    done\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n  local max_len=0\n  local len=0\n  local word\n  for word in $1; do\n    len=$(echo -n \"$word\" | wc -c)\n    if [ $len -gt $max_len ]; then\n      max_len=$len\n    fi\n  done\n  echo $max_len\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_char=''\n    local last_char=''\n    local list=\"$1\"\n    for current_char in $list\n    do\n        if [ \"$current_char\" != \"$last_char\" ]\n        then\n            if [ $current_length -gt $max_length ]\n            then\n                max_length=$current_length\n            fi\n            current_length=1\n        else\n            current_length=$((current_length + 1))\n        fi\n        last_char=\"$current_char\"\n    done\n    if [ $current_length -gt $max_length ]\n    then\n        max_length=$current_length\n    fi\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local word\n    for word in $1; do\n        len=$(echo -n \"$word\" | wc -c)\n        if [ $len -gt $max ]; then\n            max=$len\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    for i in $1; do\n        if [[ ${#i} -gt $max ]]; then\n            max=${#i}\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_word=\"\"\n    local previous_word=\"\"\n    local current_line=\"\"\n    local previous_line=\"\"\n    local current_line_length=0\n    local previous_line_length=0\n    local current_line_word_count=0\n    local previous_line_word_count=0\n    local current_line_word_count_minus_one=0\n    local previous_line_word_count_minus_one=0\n    local current_line_word_count_minus_two=0\n    local previous_line_word_count_minus_two=0\n    local current_line_word_count_minus_three=0\n    local previous_line_word_count_minus_three=0\n    local current_line_word_count_minus_four=0\n    local previous_line_word_count_minus_four=0\n    local current_line_word_count_minus_five=0\n    local previous_line_word_count_minus_five=0\n    local current_line_word_count_minus_six=0\n    local previous_line_word_count_minus_six=0\n    local current_line_word_count_minus_seven=0\n    local previous_line_word_count_minus_seven=0\n    local current_line_word_count_minus_eight=0\n    local previous_line_word_count_minus_eight=0\n    local current_line_word_count_minus_nine=0\n    local previous_line_word_count_minus_nine=0\n    local current_line_word_count_minus_ten=0\n    local previous_line_word_count_minus_ten=0\n    local current_line_word_count_minus_eleven=0\n    local previous_line_word_count_minus_eleven=0\n    local current_line_word_count_minus_twelve=0\n    local previous_line_word_count_minus_twelve=0\n    local current_line_word_count_minus_thirteen=0\n    local previous_line_word_count_minus_thirteen=0\n   \n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n  local max=0\n  local len=0\n  for word in $1; do\n    len=$(echo -n \"$word\" | wc -c)\n    if [[ $len -gt $max ]]; then\n      max=$len\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local list=\"$1\"\n    local max_length=0\n    local length=0\n    local word\n    for word in $list; do\n        length=$(echo -n \"$word\" | wc -c)\n        if [ $length -gt $max_length ]; then\n            max_length=$length\n        fi\n    done\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local word\n    for word in $1; do\n        len=$(echo -n \"$word\" | wc -c)\n        if [ $len -gt $max ]; then\n            max=$len\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_char=''\n    local previous_char=''\n    local input=$1\n    local input_length=${#input}\n    for (( i=0; i<input_length; i++ )); do\n        current_char=${input:$i:1}\n        if [[ $current_char == $'\\n' ]]; then\n            if [[ $current_length -gt $max_length ]]; then\n                max_length=$current_length\n            fi\n            current_length=0\n        elif [[ $current_char == ' ' ]]; then\n            if [[ $previous_char != ' ' ]]; then\n                current_length=$((current_length+1))\n            fi\n        else\n            current_length=$((current_length+1))\n        fi\n        previous_char=$current_char\n    done\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_word\n    while read -r current_word; do\n        if [[ \"$current_word\" == \"\" ]]; then\n            if [[ $current_length -gt $max_length ]]; then\n                max_length=$current_length\n            fi\n            current_length=0\n        else\n            current_length=$((current_length + 1))\n        fi\n    done <<< \"$1\"\n    if [[ $current_length -gt $max_length ]]; then\n        max_length=$current_length\n    fi\n    echo \"$max_length\"\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_char=\"\"\n    local previous_char=\"\"\n    local list=\"$1\"\n    for current_char in $list; do\n        if [[ \"$current_char\" != \"$previous_char\" ]]; then\n            if [[ $current_length -gt $max_length ]]; then\n                max_length=$current_length\n            fi\n            current_length=0\n        fi\n        current_length=$((current_length+1))\n        previous_char=$current_char\n    done\n    if [[ $current_length -gt $max_length ]]; then\n        max_length=$current_length\n    fi\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local length=0\n    local list=$1\n    local item\n    for item in $list; do\n        if [[ $item == *\"\\n\"* ]]; then\n            if [[ $length -gt $max_length ]]; then\n                max_length=$length\n            fi\n            length=0\n        else\n            length=$((length+1))\n        fi\n    done\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local word\n    for word in $1; do\n        len=$(echo -n \"$word\" | wc -c)\n        if [ $len -gt $max ]; then\n            max=$len\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    while read -r line; do\n        len=0\n        for word in $line; do\n            len=$((len + 1))\n        done\n        if [ $len -gt $max ]; then\n            max=$len\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local list=$1\n    local item\n    for item in $list; do\n        len=${#item}\n        if [ $len -gt $max ]; then\n            max=$len\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_word=\"\"\n    while read -r line; do\n        current_length=0\n        for current_word in $line; do\n            current_length=$((current_length + 1))\n        done\n        if [[ $current_length -gt $max_length ]]; then\n            max_length=$current_length\n        fi\n    done < <(echo \"$1\")\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_char=''\n    local previous_char=''\n    local list=\"$1\"\n    for current_char in $list; do\n        if [[ \"$current_char\" == \"$previous_char\" ]]; then\n            (( current_length += 1 ))\n        else\n            if [[ \"$current_length\" -gt \"$max_length\" ]]; then\n                max_length=\"$current_length\"\n            fi\n            current_length=1\n        fi\n        previous_char=\"$current_char\"\n    done\n    if [[ \"$current_length\" -gt \"$max_length\" ]]; then\n        max_length=\"$current_length\"\n    fi\n    echo \"$max_length\"\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_char=''\n    local previous_char=''\n    local list=\"$1\"\n    local char=''\n    for char in $list; do\n        current_char=\"$char\"\n        if [[ \"$current_char\" == \"$previous_char\" ]]; then\n            current_length=$((current_length + 1))\n        else\n            current_length=1\n        fi\n        if [[ \"$current_length\" -gt \"$max_length\" ]]; then\n            max_length=\"$current_length\"\n        fi\n        previous_char=\"$current_char\"\n    done\n    echo \"$max_length\"\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local length=0\n    local list=\"$1\"\n    local item\n    for item in $list; do\n        length=$(echo -n \"$item\" | wc -c)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n        fi\n    done\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    echo \"$1\" | awk '{\n        max = 0\n        for (i = 1; i <= NF; i++) {\n            if (length($i) > max) {\n                max = length($i)\n            }\n        }\n        print max\n    }'\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local -i max_length=0\n    local -i length=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i ab=0\n    local -i ac=0\n    local -i ad=0\n    local -i ae=0\n    local -i af=0\n    local -i ag=0\n    local -i ah=0\n    local -i ai=0\n    local -i aj=0\n    local -i ak=0\n    local -i al=0\n    local -i am=0\n    local -i an=0\n    local -i ao=0\n    local -i ap=0\n    local -i aq=0\n    local -i ar=0\n    local -i as=0\n    local -i at=0\n    local -i au=0\n    local -i av=0\n    local -i aw=0\n    local -i ax=0\n    local -i ay=0\n    local -i az=0\n    local -i ba=0\n    local -i bb=0\n    local -i bc=0\n    local -i bd=0\n    local -i be=0\n    local -i bf=0\n    local -i bg=0\n    local -i bh=0\n    local -i bi=0\n    local -i bj=0\n    local -i bk=0\n    local -i bl=0\n    local -i bm=0\n    local -i bn=0\n    local -i bo=0\n    local -i bp\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local line\n    local word\n    while read line; do\n        len=0\n        for word in $line; do\n            len=$((len+1))\n        done\n        if [ $len -gt $max ]; then\n            max=$len\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n\tlocal max=0\n\tlocal length=0\n\tlocal list=$1\n\tfor word in $list\n\tdo\n\t\tlength=${#word}\n\t\tif [ $length -gt $max ]\n\t\tthen\n\t\t\tmax=$length\n\t\tfi\n\tdone\n\techo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_word=\n    local previous_word=\n    local list=\"$1\"\n\n    while read -r current_word; do\n        if [[ -z \"$previous_word\" ]]; then\n            previous_word=\"$current_word\"\n            current_length=1\n            continue\n        fi\n\n        if [[ \"$current_word\" == \"$previous_word\" ]]; then\n            (( current_length++ ))\n        else\n            if [[ $current_length -gt $max_length ]]; then\n                max_length=$current_length\n            fi\n            current_length=1\n        fi\n        previous_word=\"$current_word\"\n    done <<< \"$list\"\n\n    if [[ $current_length -gt $max_length ]]; then\n        max_length=$current_length\n    fi\n\n    echo \"$max_length\"\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local length=0\n    local word\n    for word in $1; do\n        if [[ $word == *\"\\n\"* ]]; then\n            if [[ $length -gt $max_length ]]; then\n                max_length=$length\n            fi\n            length=0\n        else\n            length=$((length+1))\n        fi\n    done\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local -i max_length=0\n    local -i length=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n    local -i nnn=0\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n  local max=0\n  local len=0\n  local -a list=($1)\n  for i in ${list[@]}; do\n    len=${#i}\n    if [[ $len -gt $max ]]; then\n      max=$len\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local word\n    for word in $1; do\n        len=$(echo -n \"$word\" | wc -c)\n        if [ $len -gt $max ]; then\n            max=$len\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local length=0\n    local word\n    while read -r line; do\n        length=0\n        for word in $line; do\n            length=$((length + 1))\n        done\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n        fi\n    done\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_char\n    local previous_char=''\n    local -a list\n    list=($1)\n    for current_char in \"${list[@]}\"; do\n        if [[ \"$current_char\" == \"$previous_char\" ]]; then\n            ((current_length++))\n        else\n            if [[ \"$current_length\" -gt \"$max_length\" ]]; then\n                max_length=\"$current_length\"\n            fi\n            current_length=1\n        fi\n        previous_char=\"$current_char\"\n    done\n    if [[ \"$current_length\" -gt \"$max_length\" ]]; then\n        max_length=\"$current_length\"\n    fi\n    echo \"$max_length\"\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_word=''\n    local previous_word=''\n    local current_line=''\n    local previous_line=''\n    local line_length=0\n    local word_length=0\n    local line_count=0\n    local word_count=0\n    local line_count_max=0\n    local word_count_max=0\n    local line_length_max=0\n    local word_length_max=0\n    local line_length_max_line=''\n    local word_length_max_line=''\n    local word_length_max_word=''\n    local line_length_max_word=''\n    local line_count_max_line=''\n    local word_count_max_line=''\n    local line_count_max_word=''\n    local word_count_max_word=''\n    local line_count_max_word_length=0\n    local word_count_max_word_length=0\n    local line_count_max_line_length=0\n    local word_count_max_line_length=0\n    local line_count_max_word_count=0\n    local word_count_max_word_count=0\n    local line_count_max_line_count=0\n    local word_count_max_line_count=0\n    local line_count_max_word_count_length=0\n    local word_count_max_word_count_length=0\n    local line_count_max_line_count_length=0\n    local word_count_max_line_count_length=0\n    local line_count_max_word_count_line=''\n    local word_count_max_word_count_line=''\n    local line_count_max_line_count_line=''\n    local word_count_max_line_count_line=''\n    local line_count_max_word_count_word=''\n    local word_count_max_word_count_word=''\n    local line_count_max_line_count_word=''\n    local word_count_max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    # $1 is a newline-separated, space-separated list\n    # $2 is the maximum length of the sublist\n    # $3 is the current length of the sublist\n    # $4 is the current sublist\n    # $5 is the current list\n    # $6 is the current element\n    # $7 is the current list\n    # $8 is the current element\n    # $9 is the current list\n    # $10 is the current element\n    # $11 is the current list\n    # $12 is the current element\n    # $13 is the current list\n    # $14 is the current element\n    # $15 is the current list\n    # $16 is the current element\n    # $17 is the current list\n    # $18 is the current element\n    # $19 is the current list\n    # $20 is the current element\n    # $21 is the current list\n    # $22 is the current element\n    # $23 is the current list\n    # $24 is the current element\n    # $25 is the current list\n    # $26 is the current element\n    # $27 is the current list\n    # $28 is the current element\n    # $29 is the current list\n    # $30 is the current element\n    # $31 is the current list\n    # $32 is the current element\n    # $33 is the current list\n    # $34 is the current element\n    # $35 is the current list\n    # $36 is the current element\n    # $37 is the current list\n    # $38 is the current element\n    # $39 is the current list\n    # $40 is the current element\n    # $41 is the current list\n    # $42 is the current element\n    # $43 is the current list\n    # $44 is the current element\n    # $45 is the current list\n    # $46 is the current element\n    # $47 is the current list\n    # $48 is the current element\n    # $49 is the current list\n    # $50 is the current element\n    # $51 is the current list\n    # $52 is the current element\n    # $53 is the current list\n    # $54 is the current element\n    # $55 is the current\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpqkffd9sn.sh: line 61: syntax error near unexpected token `}'\\n/tmp/tmpqkffd9sn.sh: line 61: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n  local max_length=0\n  local current_length=0\n  local in_sublist=0\n  local current_char\n  for ((i=0; i<${#1}; i++)); do\n    current_char=\"${1:$i:1}\"\n    if [[ \"$current_char\" == \" \" ]]; then\n      if [[ \"$in_sublist\" == 1 ]]; then\n        if [[ \"$current_length\" -gt \"$max_length\" ]]; then\n          max_length=\"$current_length\"\n        fi\n        current_length=0\n        in_sublist=0\n      fi\n    elif [[ \"$current_char\" == $'\\n' ]]; then\n      if [[ \"$in_sublist\" == 1 ]]; then\n        if [[ \"$current_length\" -gt \"$max_length\" ]]; then\n          max_length=\"$current_length\"\n        fi\n        current_length=0\n        in_sublist=0\n      fi\n    else\n      in_sublist=1\n      current_length=$((current_length + 1))\n    fi\n  done\n  if [[ \"$in_sublist\" == 1 ]]; then\n    if [[ \"$current_length\" -gt \"$max_length\" ]]; then\n      max_length=\"$current_length\"\n    fi\n  fi\n  echo \"$max_length\"\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local list=$1\n    local sublist\n    for sublist in $list; do\n        len=${#sublist}\n        if [[ $len -gt $max ]]; then\n            max=$len\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_word\n    while read -r line; do\n        current_length=0\n        for current_word in $line; do\n            current_length=$((current_length + 1))\n        done\n        if [[ $current_length -gt $max_length ]]; then\n            max_length=$current_length\n        fi\n    done\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_char=''\n    local previous_char=''\n    local list=$1\n    for current_char in $list; do\n        if [ \"$current_char\" != \"$previous_char\" ]; then\n            if [ $current_length -gt $max_length ]; then\n                max_length=$current_length\n            fi\n            current_length=0\n        fi\n        current_length=$((current_length + 1))\n        previous_char=$current_char\n    done\n    if [ $current_length -gt $max_length ]; then\n        max_length=$current_length\n    fi\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_item=''\n\n    for item in $1; do\n        if [ \"$item\" = \"$current_item\" ]; then\n            current_length=$((current_length + 1))\n        else\n            current_item=\"$item\"\n            current_length=1\n        fi\n        if [ \"$current_length\" -gt \"$max_length\" ]; then\n            max_length=\"$current_length\"\n        fi\n    done\n\n    echo \"$max_length\"\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local list=\"$1\"\n    local max_length=0\n    local length=0\n    local item\n    for item in $list; do\n        if [ \"$item\" = \" \" ]; then\n            if [ $length -gt $max_length ]; then\n                max_length=$length\n            fi\n            length=0\n        else\n            length=$((length+1))\n        fi\n    done\n    if [ $length -gt $max_length ]; then\n        max_length=$length\n    fi\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local length=0\n    local word\n    for word in $1; do\n        if [[ $word == *\"\\n\"* ]]; then\n            if [[ $length -gt $max_length ]]; then\n                max_length=$length\n            fi\n            length=0\n        else\n            length=$((length+1))\n        fi\n    done\n    if [[ $length -gt $max_length ]]; then\n        max_length=$length\n    fi\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local length=0\n    local word\n    local list=\"$1\"\n    for word in $list; do\n        if [[ $word == *\"\\n\"* ]]; then\n            if [[ $length -gt $max_length ]]; then\n                max_length=$length\n            fi\n            length=0\n        else\n            ((length++))\n        fi\n    done\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local length=0\n    local word\n    for word in $1; do\n        if [[ $word == *\"\\n\"* ]]; then\n            if [[ $length -gt $max_length ]]; then\n                max_length=$length\n            fi\n            length=0\n        else\n            length=$((length+1))\n        fi\n    done\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local length=0\n    local word\n    for word in $1; do\n        if [[ $word == *\"\\n\"* ]]; then\n            if [[ $length -gt $max_length ]]; then\n                max_length=$length\n            fi\n            length=0\n        else\n            length=$((length+1))\n        fi\n    done\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n  local max=0\n  local len=0\n  local list=$1\n  for i in $list; do\n    len=$(echo $i | wc -w)\n    if [ $len -gt $max ]; then\n      max=$len\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n  local max_length=0\n  local current_length=0\n  local current_word\n  while read -r current_word; do\n    if [[ \"$current_word\" == \"\" ]]; then\n      if [[ $current_length -gt $max_length ]]; then\n        max_length=$current_length\n      fi\n      current_length=0\n    else\n      current_length=$((current_length+1))\n    fi\n  done <<< \"$1\"\n  if [[ $current_length -gt $max_length ]]; then\n    max_length=$current_length\n  fi\n  echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_item\n    for current_item in $1; do\n        if [[ $current_item =~ ^[0-9]+$ ]]; then\n            (( current_length++ ))\n        else\n            if [[ $current_length -gt $max_length ]]; then\n                max_length=$current_length\n            fi\n            current_length=0\n        fi\n    done\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_word=\"\"\n    local current_line=\"\"\n    local line_number=0\n    while read current_line; do\n        line_number=$((line_number + 1))\n        current_length=0\n        for current_word in $current_line; do\n            current_length=$((current_length + 1))\n        done\n        if [ $current_length -gt $max_length ]; then\n            max_length=$current_length\n        fi\n    done < <(echo \"$1\")\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_char=''\n    local previous_char=''\n    local list=\"$1\"\n    for current_char in $list; do\n        if [[ $current_char == $previous_char ]]; then\n            ((current_length++))\n        else\n            if [[ $current_length -gt $max_length ]]; then\n                max_length=$current_length\n            fi\n            current_length=1\n        fi\n        previous_char=$current_char\n    done\n    if [[ $current_length -gt $max_length ]]; then\n        max_length=$current_length\n    fi\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local -i max_length=0\n    local -i length=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i ab=0\n    local -i ac=0\n    local -i ad=0\n    local -i ae=0\n    local -i af=0\n    local -i ag=0\n    local -i ah=0\n    local -i ai=0\n    local -i aj=0\n    local -i ak=0\n    local -i al=0\n    local -i am=0\n    local -i an=0\n    local -i ao=0\n    local -i ap=0\n    local -i aq=0\n    local -i ar=0\n    local -i as=0\n    local -i at=0\n    local -i au=0\n    local -i av=0\n    local -i aw=0\n    local -i ax=0\n    local -i ay=0\n    local -i az=0\n    local -i ba=0\n    local -i bb=0\n    local -i bc=0\n    local -i bd=0\n    local -i be=0\n    local -i bf=0\n    local -i bg=0\n    local -i bh=0\n    local -i bi=0\n    local -i bj=0\n    local -i bk=0\n    local -i bl=0\n    local -i bm=0\n    local -i bn=0\n    local -i bo=0\n    local -i bp\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local list=\"$1\"\n    local max_length=0\n    local length=0\n    local word=''\n    while read -r line; do\n        length=0\n        for word in $line; do\n            length=$((length + 1))\n        done\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n        fi\n    done <<< \"$list\"\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    Max_Length=0\n    for i in $1; do\n        if [ ${#i} -gt $Max_Length ]; then\n            Max_Length=${#i}\n        fi\n    done\n    echo $Max_Length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local list=\"$1\"\n    local max_length=0\n    local length=0\n    local word=''\n    for word in $list; do\n        length=${#word}\n        if [ $length -gt $max_length ]; then\n            max_length=$length\n        fi\n    done\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local length=0\n    local word\n    while read -r line; do\n        length=0\n        for word in $line; do\n            let length++\n        done\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n        fi\n    done <<< \"$1\"\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    # Split the input into a list of lists\n    IFS=$'\\n' read -d '' -r -a List_of_Lists <<< \"$1\"\n\n    # Find the length of each sublist\n    for i in \"${List_of_Lists[@]}\"; do\n        IFS=' ' read -r -a Sublist <<< \"$i\"\n        Lengths+=(${#Sublist[@]})\n    done\n\n    # Find the maximum length\n    Max_Length=0\n    for i in \"${Lengths[@]}\"; do\n        if [ $i -gt $Max_Length ]; then\n            Max_Length=$i\n        fi\n    done\n\n    # Print the maximum length\n    echo $Max_Length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n  local max_length=0\n  local current_length=0\n  local current_char=''\n  local previous_char=''\n  local list_string=\"$1\"\n  local list_length=${#list_string}\n  local i=0\n  while [ $i -lt $list_length ]; do\n    current_char=${list_string:$i:1}\n    if [ \"$current_char\" = ' ' ]; then\n      if [ $current_length -gt $max_length ]; then\n        max_length=$current_length\n      fi\n      current_length=0\n    else\n      current_length=$((current_length+1))\n    fi\n    i=$((i+1))\n  done\n  if [ $current_length -gt $max_length ]; then\n    max_length=$current_length\n  fi\n  echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n  local max_length=0\n  local current_length=0\n  local current_word\n  for current_word in $1; do\n    current_length=$(echo -n \"$current_word\" | wc -c)\n    if [[ $current_length -gt $max_length ]]; then\n      max_length=$current_length\n    fi\n  done\n  echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local length=0\n    local word\n    for word in $1; do\n        length=$(echo -n $word | wc -c)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n        fi\n    done\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local word\n    for word in $1; do\n        len=${#word}\n        if [ $len -gt $max ]; then\n            max=$len\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_char=''\n    local last_char=''\n    local -a list=($1)\n\n    for current_char in \"${list[@]}\"; do\n        if [[ \"$current_char\" == \"$last_char\" ]]; then\n            ((current_length++))\n        else\n            if [[ \"$current_length\" -gt \"$max_length\" ]]; then\n                max_length=\"$current_length\"\n            fi\n            current_length=1\n        fi\n        last_char=\"$current_char\"\n    done\n\n    if [[ \"$current_length\" -gt \"$max_length\" ]]; then\n        max_length=\"$current_length\"\n    fi\n\n    echo \"$max_length\"\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local length=0\n    local list=$1\n    local item\n    for item in $list; do\n        if [[ $item == $'\\n' ]]; then\n            if [[ $length -gt $max_length ]]; then\n                max_length=$length\n            fi\n            length=0\n        else\n            length=$((length + 1))\n        fi\n    done\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    # Split the input into a list of sublists\n    local -a sublists=($(echo \"$1\" | tr '\\n' ' '))\n    # Find the length of the longest sublist\n    local max_length=0\n    for sublist in \"${sublists[@]}\"; do\n        local sublist_length=$(echo \"$sublist\" | wc -w)\n        if [ \"$sublist_length\" -gt \"$max_length\" ]; then\n            max_length=\"$sublist_length\"\n        fi\n    done\n    echo \"$max_length\"\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_char=''\n    local prev_char=''\n    local input_list=$1\n    for current_char in $input_list; do\n        if [ \"$current_char\" == \"$prev_char\" ]; then\n            current_length=$((current_length + 1))\n        else\n            if [ $current_length -gt $max_length ]; then\n                max_length=$current_length\n            fi\n            current_length=1\n        fi\n        prev_char=$current_char\n    done\n    if [ $current_length -gt $max_length ]; then\n        max_length=$current_length\n    fi\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_char=''\n    local prev_char=''\n    local list=\"$1\"\n    while read -r line; do\n        current_length=0\n        prev_char=''\n        for current_char in $line; do\n            if [ \"$current_char\" != \"$prev_char\" ]; then\n                current_length=$((current_length + 1))\n            fi\n            prev_char=\"$current_char\"\n        done\n        if [ \"$current_length\" -gt \"$max_length\" ]; then\n            max_length=\"$current_length\"\n        fi\n    done <<< \"$list\"\n    echo \"$max_length\"\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    for i in $1; do\n        if [ ${#i} -gt $max ]; then\n            max=${#i}\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local current=0\n    local word\n    for word in $1; do\n        if [[ $word =~ ^$ ]]; then\n            if [[ $current -gt $max ]]; then\n                max=$current\n            fi\n            current=0\n        else\n            current=$((current+1))\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_char\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i n\n    local -i o\n    local -i p\n    local -i q\n    local -i r\n    local -i s\n    local -i t\n    local -i u\n    local -i v\n    local -i w\n    local -i x\n    local -i y\n    local -i z\n    local -i a\n    local -i b\n    local -i c\n    local -i d\n    local -i e\n    local -i f\n    local -i g\n    local -i h\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i n\n    local -i o\n    local -i p\n    local -i q\n    local -i r\n    local -i s\n    local -i t\n    local -i u\n    local -i v\n    local -i w\n    local -i x\n    local -i y\n    local -i z\n    local -i a\n    local -i b\n    local -i c\n    local -i d\n    local -i e\n    local -i f\n    local -i g\n    local -i h\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i n\n    local -i o\n    local -i p\n    local -i q\n    local -i r\n    local -i s\n    local -i t\n    local -i u\n    local -i v\n    local -i w\n    local -i x\n    local -i y\n    local -i z\n    local -i a\n    local -i b\n    local -i c\n    local -i d\n    local -i e\n    local -i f\n    local -i g\n    local -i h\n    local -i i\n    local -i j\n    local -i k\n    local -\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local list=\"$1\"\n    while read -r line; do\n        len=0\n        for word in $line; do\n            len=$((len+1))\n        done\n        if [ $len -gt $max ]; then\n            max=$len\n        fi\n    done <<< \"$list\"\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local IFS=$'\\n'\n    for line in $1; do\n        len=`echo $line | wc -w`\n        if [ $len -gt $max ]; then\n            max=$len\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local list=$1\n    local IFS=$'\\n'\n    for line in $list; do\n        current_length=0\n        for word in $line; do\n            current_length=$((current_length + 1))\n        done\n        if [ $current_length -gt $max_length ]; then\n            max_length=$current_length\n        fi\n    done\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_word=\"\"\n    while read -r line; do\n        current_length=0\n        for current_word in $line; do\n            current_length=$((current_length + 1))\n        done\n        if [ $current_length -gt $max_length ]; then\n            max_length=$current_length\n        fi\n    done <<< \"$1\"\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    while read -r line; do\n        local len=$(echo $line | wc -w)\n        if [ $len -gt $max ]; then\n            max=$len\n        fi\n    done < <(echo \"$1\")\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n  local max=0\n  local cur=0\n  local IFS=$'\\n'\n  for line in $1; do\n    cur=0\n    for word in $line; do\n      cur=$((cur+1))\n    done\n    if [[ $cur -gt $max ]]; then\n      max=$cur\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local length=0\n    local list=\"$1\"\n    local sublist\n    for sublist in $list; do\n        length=${#sublist}\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n        fi\n    done\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local length=0\n    local list=\"$1\"\n    local item\n    for item in $list; do\n        if [[ \"$item\" == *\" \"* ]]; then\n            length=0\n        else\n            ((length++))\n            ((length > max_length)) && max_length=$length\n        fi\n    done\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    while read line; do\n        local len=$(echo \"$line\" | wc -w)\n        if [[ $len -gt $max ]]; then\n            max=$len\n        fi\n    done <<< \"$1\"\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n\t# $1 is a newline-separated, space-separated list\n\t# $2 is the length of the longest sublist\n\t# $3 is the length of the current sublist\n\t# $4 is the current sublist\n\t# $5 is the previous sublist\n\t# $6 is the current item\n\t# $7 is the previous item\n\t# $8 is the current line\n\t# $9 is the previous line\n\t# $10 is the current line number\n\t# $11 is the previous line number\n\t# $12 is the current item number\n\t# $13 is the previous item number\n\t# $14 is the current sublist number\n\t# $15 is the previous sublist number\n\t# $16 is the current sublist number\n\t# $17 is the previous sublist number\n\t# $18 is the current sublist number\n\t# $19 is the previous sublist number\n\t# $20 is the current sublist number\n\t# $21 is the previous sublist number\n\t# $22 is the current sublist number\n\t# $23 is the previous sublist number\n\t# $24 is the current sublist number\n\t# $25 is the previous sublist number\n\t# $26 is the current sublist number\n\t# $27 is the previous sublist number\n\t# $28 is the current sublist number\n\t# $29 is the previous sublist number\n\t# $30 is the current sublist number\n\t# $31 is the previous sublist number\n\t# $32 is the current sublist number\n\t# $33 is the previous sublist number\n\t# $34 is the current sublist number\n\t# $35 is the previous sublist number\n\t# $36 is the current sublist number\n\t# $37 is the previous sublist number\n\t# $38 is the current sublist number\n\t# $39 is the previous sublist number\n\t# $40 is the current sublist number\n\t# $41 is the previous sublist number\n\t# $42 is the current sublist number\n\t# $43 is the previous sublist number\n\t# $44 is the current sublist number\n\t# $45 is the previous sublist number\n\t# $46 is the current sublist number\n\t# $47 is the previous sub\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpojahqbp0.sh: line 53: syntax error near unexpected token `}'\\n/tmp/tmpojahqbp0.sh: line 53: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local list=\"$1\"\n    local item\n    for item in $list; do\n        if [[ \"$item\" =~ ^\\ *$ ]]; then\n            if [[ $len -gt $max ]]; then\n                max=$len\n            fi\n            len=0\n        else\n            len=$((len+1))\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local cur=0\n    local IFS=$'\\n'\n    for line in $1; do\n        cur=0\n        for word in $line; do\n            cur=$((cur + 1))\n        done\n        if [[ $cur -gt $max ]]; then\n            max=$cur\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n  local max=0\n  local len=0\n  local line\n  while read line; do\n    len=0\n    for word in $line; do\n      len=$((len + 1))\n    done\n    if [[ $len -gt $max ]]; then\n      max=$len\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local list=\"$1\"\n    local item\n    for item in $list; do\n        len=${#item}\n        if [ $len -gt $max ]; then\n            max=$len\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_char=''\n    local last_char=''\n    local -a list=($1)\n    for current_char in \"${list[@]}\"; do\n        if [ \"$current_char\" != \"$last_char\" ]; then\n            if [ \"$current_length\" -gt \"$max_length\" ]; then\n                max_length=$current_length\n            fi\n            current_length=0\n        fi\n        current_length=$((current_length + 1))\n        last_char=$current_char\n    done\n    if [ \"$current_length\" -gt \"$max_length\" ]; then\n        max_length=$current_length\n    fi\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local list=\"$1\"\n    local max_length=0\n    local current_length=0\n    local in_sublist=0\n    local char\n    for ((i=0; i<${#list}; i++)); do\n        char=\"${list:$i:1}\"\n        if [[ \"$char\" == \" \" ]]; then\n            if [[ $in_sublist -eq 1 ]]; then\n                if [[ $current_length -gt $max_length ]]; then\n                    max_length=$current_length\n                fi\n                current_length=0\n                in_sublist=0\n            fi\n        elif [[ \"$char\" == $'\\n' ]]; then\n            if [[ $in_sublist -eq 1 ]]; then\n                if [[ $current_length -gt $max_length ]]; then\n                    max_length=$current_length\n                fi\n                current_length=0\n                in_sublist=0\n            fi\n        else\n            in_sublist=1\n            current_length=$((current_length+1))\n        fi\n    done\n    if [[ $in_sublist -eq 1 ]]; then\n        if [[ $current_length -gt $max_length ]]; then\n            max_length=$current_length\n        fi\n    fi\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local current=0\n    local list=$1\n    local word\n    for word in $list; do\n        if [[ $word =~ ^$ ]]; then\n            if [[ $current -gt $max ]]; then\n                max=$current\n            fi\n            current=0\n        else\n            current=$((current+1))\n        fi\n    done\n    if [[ $current -gt $max ]]; then\n        max=$current\n    fi\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_word=''\n    local previous_word=''\n    for word in $1; do\n        current_word=$word\n        if [[ $current_word == $previous_word ]]; then\n            ((current_length++))\n        else\n            if [[ $current_length -gt $max_length ]]; then\n                max_length=$current_length\n            fi\n            current_length=1\n        fi\n        previous_word=$current_word\n    done\n    if [[ $current_length -gt $max_length ]]; then\n        max_length=$current_length\n    fi\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local cur=0\n    local in_list=0\n    for word in $1; do\n        if [[ $word == '[' ]]; then\n            in_list=1\n        elif [[ $word == ']' ]]; then\n            in_list=0\n            if [[ $cur -gt $max ]]; then\n                max=$cur\n            fi\n            cur=0\n        elif [[ $in_list -eq 1 ]]; then\n            cur=$((cur+1))\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local length=0\n    local word\n    while read -r line; do\n        length=0\n        for word in $line; do\n            length=$((length + 1))\n        done\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n        fi\n    done\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_char=''\n    local previous_char=''\n    local list=\"$1\"\n    while read -r line; do\n        current_length=0\n        for current_char in $line; do\n            if [[ $current_char == $previous_char ]]; then\n                ((current_length++))\n            else\n                if [[ $current_length -gt $max_length ]]; then\n                    max_length=$current_length\n                fi\n                current_length=1\n            fi\n            previous_char=$current_char\n        done\n        if [[ $current_length -gt $max_length ]]; then\n            max_length=$current_length\n        fi\n    done <<< \"$list\"\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_word=''\n    local previous_word=''\n    local word=''\n    local list=\"$1\"\n    for word in $list; do\n        if [[ \"$word\" == \"$previous_word\" ]]; then\n            ((current_length++))\n        else\n            if [[ $current_length -gt $max_length ]]; then\n                max_length=$current_length\n            fi\n            current_length=1\n        fi\n        previous_word=\"$word\"\n    done\n    if [[ $current_length -gt $max_length ]]; then\n        max_length=$current_length\n    fi\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n  local list=\"$1\"\n  local longest_length=0\n  local current_length=0\n  local current_word=''\n  local longest_word=''\n  local word=''\n  local words=''\n  local words_length=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local aa=0\n  local bb=0\n  local cc=0\n  local dd=0\n  local ee=0\n  local ff=0\n  local gg=0\n  local hh=0\n  local ii=0\n  local jj=0\n  local kk=0\n  local ll=0\n  local mm=0\n  local nn=0\n  local oo=0\n  local pp=0\n  local qq=0\n  local rr=0\n  local ss=0\n  local tt=0\n  local uu=0\n  local vv=0\n  local ww=0\n  local xx=0\n  local yy=0\n  local zz=0\n  local aaa=0\n  local bbb=0\n  local ccc=0\n  local ddd=0\n  local eee=0\n  local fff=0\n  local ggg=0\n  local hhh=0\n  local iii=0\n  local jjj=0\n  local kkk=0\n  local lll=0\n  local mmm=0\n  local nnn=0\n  local ooo=0\n  local ppp=0\n  local qqq=0\n  local rrr=0\n  local sss=0\n  local ttt=0\n  local uuu=0\n  local vvv=0\n  local www=0\n  local xxx=0\n  local yyy\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    # We'll use a list of lists to store the sublists.\n    # Each sublist will be a list of strings.\n    # The first element of each sublist will be the length of the sublist.\n    # The second element of each sublist will be the sublist itself.\n    declare -a sublists\n    # We'll use a list of strings to store the current sublist.\n    declare -a sublist\n    # We'll use a list of strings to store the current list.\n    declare -a list\n    # We'll use a string to store the current word.\n    declare word\n    # We'll use an integer to store the current length.\n    declare length\n    # We'll use an integer to store the current index.\n    declare index\n    # We'll use an integer to store the current sublist index.\n    declare sublist_index\n    # We'll use an integer to store the current sublist length.\n    declare sublist_length\n    # We'll use an integer to store the current sublist length.\n    declare max_length\n    # We'll use an integer to store the current sublist length.\n    declare max_sublist_index\n    # We'll use an integer to store the current sublist length.\n    declare max_sublist_length\n    # We'll use an integer to store the current sublist length.\n    declare max_sublist_length_index\n    # We'll use an integer to store the current sublist length.\n    declare max_sublist_length_sublist_index\n    # We'll use an integer to store the current sublist length.\n    declare max_sublist_length_sublist_length\n    # We'll use an integer to store the current sublist length.\n    declare max_sublist_length_sublist_length_index\n    # We'll use an integer to store the current sublist length.\n    declare max_sublist_length_sublist_length_sublist_index\n    # We'll use an integer to store the current sublist length.\n    declare max_sublist_length_sublist_length_sublist_length\n    # We'll use an integer to store the current sublist length.\n    declare max_sublist_length_sublist_length_sublist\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local length=0\n    local list=$1\n    local word\n    for word in $list; do\n        length=$(echo -n $word | wc -c)\n        if [ $length -gt $max_length ]; then\n            max_length=$length\n        fi\n    done\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n\tlocal max=0\n\tlocal len=0\n\tlocal list=\"$1\"\n\tlocal item\n\tfor item in $list; do\n\t\tlen=$(echo -n \"$item\" | wc -c)\n\t\tif [ $len -gt $max ]; then\n\t\t\tmax=$len\n\t\tfi\n\tdone\n\techo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n  local max_length=0\n  local length=0\n  local list=\"$1\"\n  local item\n  for item in $list; do\n    if [[ $item == *\"\\n\"* ]]; then\n      if [[ $length -gt $max_length ]]; then\n        max_length=$length\n      fi\n      length=0\n    else\n      length=$((length+1))\n    fi\n  done\n  echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local -i max_length=0\n    local -i length=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n    local -i nnn=0\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local length=0\n    local list=\"$1\"\n    local item\n    for item in $list; do\n        if [ \"$item\" = \" \" ]; then\n            if [ $length -gt $max_length ]; then\n                max_length=$length\n            fi\n            length=0\n        else\n            length=$((length+1))\n        fi\n    done\n    if [ $length -gt $max_length ]; then\n        max_length=$length\n    fi\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local list=$1\n    local item\n    for item in $list; do\n        len=${#item}\n        if [ $len -gt $max ]; then\n            max=$len\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local length=0\n    local word\n    for word in $1; do\n        if [[ $word == *\"\\n\"* ]]; then\n            if [[ $length -gt $max_length ]]; then\n                max_length=$length\n            fi\n            length=0\n        else\n            length=$((length+1))\n        fi\n    done\n    if [[ $length -gt $max_length ]]; then\n        max_length=$length\n    fi\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n  local list=\"$1\"\n  local max_length=0\n  local length=0\n  local word=''\n  while read -r line; do\n    length=0\n    for word in $line; do\n      length=$((length + 1))\n    done\n    if [[ $length -gt $max_length ]]; then\n      max_length=$length\n    fi\n  done <<< \"$list\"\n  echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n  local max=0\n  local len=0\n  local list=\"$1\"\n  local item\n  for item in $list; do\n    len=$(echo \"$item\" | wc -w)\n    if [ $len -gt $max ]; then\n      max=$len\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_length=0\n    local current_length=0\n    local current_char=''\n    local previous_char=''\n    local list=\"$1\"\n    for (( i=0; i<${#list}; i++ )); do\n        current_char=\"${list:i:1}\"\n        if [[ \"$current_char\" == \"$previous_char\" ]]; then\n            (( current_length++ ))\n        else\n            if [[ \"$current_length\" -gt \"$max_length\" ]]; then\n                max_length=\"$current_length\"\n            fi\n            current_length=1\n        fi\n        previous_char=\"$current_char\"\n    done\n    if [[ \"$current_length\" -gt \"$max_length\" ]]; then\n        max_length=\"$current_length\"\n    fi\n    echo \"$max_length\"\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max_len=0\n    local len=0\n    local word\n    while read -r line; do\n        len=0\n        for word in $line; do\n            len=$((len + 1))\n        done\n        if [[ $len -gt $max_len ]]; then\n            max_len=$len\n        fi\n    done\n    echo $max_len\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    # $1 is a newline-separated, space-separated list\n    #\n    # $2 is the current max length\n    #\n    # $3 is the current length\n    #\n    # $4 is the current list\n    #\n    # $5 is the current sublist\n    #\n    # $6 is the current element\n    #\n    # $7 is the current index\n    #\n    # $8 is the current sublist index\n    #\n    # $9 is the current element index\n    #\n    # $10 is the current sublist length\n    #\n    # $11 is the current element length\n    #\n    # $12 is the current sublist max length\n    #\n    # $13 is the current element max length\n    #\n    # $14 is the current sublist max length index\n    #\n    # $15 is the current element max length index\n    #\n    # $16 is the current sublist max length element\n    #\n    # $17 is the current element max length element\n    #\n    # $18 is the current sublist max length sublist\n    #\n    # $19 is the current element max length sublist\n    #\n    # $20 is the current sublist max length list\n    #\n    # $21 is the current element max length list\n    #\n    # $22 is the current sublist max length list index\n    #\n    # $23 is the current element max length list index\n    #\n    # $24 is the current sublist max length list element\n    #\n    # $25 is the current element max length list element\n    #\n    # $26 is the current sublist max length list sublist\n    #\n    # $27 is the current element max length list sublist\n    #\n    # $28 is the current sublist max length list sublist index\n    #\n    # $29 is the current element max length list sublist index\n    #\n    # $30 is the current sublist max length list sublist element\n    #\n    # $31 is the current element max length list sublist element\n    #\n    # $32 is the current sublist max length list sublist element index\n    #\n    # $33 is the current element max length list sub\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmppz6_rm7e.sh: line 71: syntax error near unexpected token `}'\\n/tmp/tmppz6_rm7e.sh: line 71: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local list=\"$1\"\n    local item\n    for item in $list; do\n        len=${#item}\n        if [ $len -gt $max ]; then\n            max=$len\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    local max=0\n    local len=0\n    local word\n    for word in $1; do\n        len=$(echo -n \"$word\" | wc -c)\n        if [ $len -gt $max ]; then\n            max=$len\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a shthon function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n    # Split the string into an array of sublists\n    IFS=$'\\n' read -d '' -r -a sublists <<< \"$1\"\n    # Find the length of the longest sublist\n    max_length=0\n    for sublist in \"${sublists[@]}\"; do\n        length=${#sublist}\n        if [ $length -gt $max_length ]; then\n            max_length=$length\n        fi\n    done\n    echo $max_length\n}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test",
      "timestamp": 1667191008,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}