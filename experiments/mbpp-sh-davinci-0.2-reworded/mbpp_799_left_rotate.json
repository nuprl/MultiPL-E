{
  "name": "mbpp_799_left_rotate",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n#\n# $1 is an integer\n# $2 is an integer\nleft_rotate() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    left_rotate \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"64\" ]]\n    [[ $(candidate \"10\" \"2\") = \"40\" ]]\n    [[ $(candidate \"99\" \"3\") = \"792\" ]]\n    [[ $(candidate \"99\" \"3\") = \"792\" ]]\n    [[ $(candidate \"1\" \"3\") = \"8\" ]]\n    [[ $(candidate \"5\" \"3\") = \"40\" ]]\n    [[ $(candidate \"29\" \"3\") = \"232\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  local num=$1\n  local d=$2\n  local bits=32\n  local mask=$((2**$bits-1))\n  local result=$(((num<<d)&mask)|(num>>(bits-d)))\n  echo $result",
    "  local number=$1\n  local d=$2\n  local result=0\n  local i=0\n  local j=0\n  local temp=0\n  local temp_number=$number\n  local temp_result=0\n  local temp_result_number=0\n  local temp_result_number_2=0\n  local temp_result_number_3=0\n  local temp_result_number_4=0\n  local temp_result_number_5=0\n  local temp_result_number_6=0\n  local temp_result_number_7=0\n  local temp_result_number_8=0\n  local temp_result_number_9=0\n  local temp_result_number_10=0\n  local temp_result_number_11=0\n  local temp_result_number_12=0\n  local temp_result_number_13=0\n  local temp_result_number_14=0\n  local temp_result_number_15=0\n  local temp_result_number_16=0\n  local temp_result_number_17=0\n  local temp_result_number_18=0\n  local temp_result_number_19=0\n  local temp_result_number_20=0\n  local temp_result_number_21=0\n  local temp_result_number_22=0\n  local temp_result_number_23=0\n  local temp_result_number_24=0\n  local temp_result_number_25=0\n  local temp_result_number_26=0\n  local temp_result_number_27=0\n  local temp_result_number_28=0\n  local temp_result_number_29=0\n  local temp_result_number_30=0\n  local temp_result_number_31=0\n  local temp_result_number_32=0\n  local temp_result_number_33=0\n  local temp_result_number_34=0\n  local temp_result_number_35=0\n  local temp_result_number_36=0\n  local temp_result_number_37=0\n  local temp_result_number_38=0\n  local temp_result",
    "\tlocal num=$1\n\tlocal d=$2\n\tlocal res=$((num << d))\n\tlocal mask=$((2**32-1))\n\techo $((res & mask))",
    "  local num=$1\n  local d=$2\n  local bits=32\n  local mask=$(( 2**$d - 1 ))\n  local left=$(( $num << $d ))\n  local right=$(( $num >> $(( $bits - $d )) ))\n  echo $(( $left | $right ))",
    "  local num=$1\n  local d=$2\n  local num_bits=32\n  local num_bits_minus_d=$((num_bits - d))\n  local left_shift=$((num << d))\n  local right_shift=$((num >> num_bits_minus_d))\n  local result=$((left_shift | right_shift))\n  echo $result",
    "  local num=$1\n  local d=$2\n  local num_bits=32\n  local mask=$((2**d-1))\n  local left_mask=$((2**(num_bits-d)-1))\n  local left_bits=$((num & left_mask))\n  local right_bits=$((num & mask))\n  echo $(((left_bits << d) | (right_bits >> (num_bits-d))))",
    "  echo \"obase=2;ibase=2;$1 << $2\" | bc",
    "  local num=$1\n  local d=$2\n  echo $((num << d | num >> (32 - d)))",
    "  local num=$1\n  local d=$2\n  local result=0\n  local i=0\n  while [ $i -lt $d ]\n  do\n    local temp=$((num & 1))\n    num=$((num >> 1))\n    result=$((result | (temp << 31)))\n    i=$((i + 1))\n  done\n  echo $((num | result))",
    "  local number=$1\n  local d=$2\n  local result=0\n  local i=0\n  while [ $i -lt $d ]\n  do\n    local temp=$((number & 1))\n    number=$((number >> 1))\n    result=$((result | (temp << 31)))\n    i=$((i + 1))\n  done\n  result=$((result | number))\n  echo $result",
    "  local number=$1\n  local d=$2\n  local bits=32\n  local result=0\n  local i=0\n  while [ $i -lt $bits ]\n  do\n    local temp=$((number >> $i))\n    local temp=$((temp & 1))\n    local temp=$((temp << $((bits - 1 - i))))\n    local result=$((result | temp))\n    local i=$((i + 1))\n  done\n  local result=$((result >> $d))\n  echo $result",
    "  local num=$1\n  local d=$2\n  local bits=32\n  local mask=$((2**$bits - 1))\n  local result=$((($num << $d) & $mask))\n  echo $result",
    "  local num=$1\n  local d=$2\n  local bin=$(echo \"obase=2;$num\" | bc)\n  local bin_len=${#bin}\n  local bin_rotated=$(echo $bin | cut -c $d-$bin_len)$(echo $bin | cut -c 1-$((d-1)))\n  echo \"obase=10;ibase=2;$bin_rotated\" | bc",
    "  local number=$1\n  local d=$2\n  local result=0\n  local i=0\n  while [ $i -lt $d ]\n  do\n    local temp=$((number & 1))\n    number=$((number >> 1))\n    result=$((result | (temp << 31)))\n    i=$((i + 1))\n  done\n  echo $((result | number))",
    "  local num=$1\n  local d=$2\n  local result=0\n  local i=0\n  local temp=0\n  local temp2=0\n  while [ $i -lt $d ]\n  do\n    temp=$(( $num & 1 ))\n    num=$(( $num >> 1 ))\n    temp2=$(( $temp << 31 ))\n    result=$(( $result | $temp2 ))\n    i=$(( $i + 1 ))\n  done\n  result=$(( $result | $num ))\n  echo $result",
    "  local -i num=$1\n  local -i d=$2\n  local -i mask=$((2**32-1))\n  local -i res=$(((num << d) & mask))\n  echo $res",
    "  local -i num=$1\n  local -i d=$2\n  local -i result=0\n  local -i i=0\n  local -i temp=0\n  local -i mask=1\n  local -i mask2=1\n  local -i mask3=1\n  local -i mask4=1\n  local -i mask5=1\n  local -i mask6=1\n  local -i mask7=1\n  local -i mask8=1\n  local -i mask9=1\n  local -i mask10=1\n  local -i mask11=1\n  local -i mask12=1\n  local -i mask13=1\n  local -i mask14=1\n  local -i mask15=1\n  local -i mask16=1\n  local -i mask17=1\n  local -i mask18=1\n  local -i mask19=1\n  local -i mask20=1\n  local -i mask21=1\n  local -i mask22=1\n  local -i mask23=1\n  local -i mask24=1\n  local -i mask25=1\n  local -i mask26=1\n  local -i mask27=1\n  local -i mask28=1\n  local -i mask29=1\n  local -i mask30=1\n  local -i mask31=1\n  local -i mask32=1\n  local -i mask33=1\n  local -i mask34=1\n  local -i mask35=1\n  local -i mask36=1\n  local -i mask37=1\n  local -i mask38=1\n  local -i mask39=1\n  local -i mask40=1\n  local -i mask41=1\n  local -i mask42=1\n  local -i mask43=1\n  local -i mask44=1\n  local -i mask45=1\n  local -i mask46=1\n  local -i mask47=1\n  local -i mask48=1\n  local -i mask49=1\n  local -i mask50=1\n  local -i mask51=1\n  local -i mask52=1\n  local -i",
    "  local num=$1\n  local d=$2\n  local binary_num=$(echo \"obase=2; $num\" | bc)\n  local binary_num_len=${#binary_num}\n  local d_mod=$((d % binary_num_len))\n  local left_part=${binary_num:0:d_mod}\n  local right_part=${binary_num:d_mod}\n  local rotated_binary_num=\"$right_part$left_part\"\n  echo \"ibase=2; $rotated_binary_num\" | bc",
    "    local number=$1\n    local d=$2\n    local result=0\n    local i=0\n    local j=0\n    local k=0\n    local temp=0\n    local temp1=0\n    local temp2=0\n    local temp3=0\n    local temp4=0\n    local temp5=0\n    local temp6=0\n    local temp7=0\n    local temp8=0\n    local temp9=0\n    local temp10=0\n    local temp11=0\n    local temp12=0\n    local temp13=0\n    local temp14=0\n    local temp15=0\n    local temp16=0\n    local temp17=0\n    local temp18=0\n    local temp19=0\n    local temp20=0\n    local temp21=0\n    local temp22=0\n    local temp23=0\n    local temp24=0\n    local temp25=0\n    local temp26=0\n    local temp27=0\n    local temp28=0\n    local temp29=0\n    local temp30=0\n    local temp31=0\n    local temp32=0\n    local temp33=0\n    local temp34=0\n    local temp35=0\n    local temp36=0\n    local temp37=0\n    local temp38=0\n    local temp39=0\n    local temp40=0\n    local temp41=0\n    local temp42=0\n    local temp43=0\n    local temp44=0\n    local temp45=0\n    local temp46=0\n    local temp47=0\n    local temp48=0\n    local temp49=0\n    local temp50=0\n    local temp51=0\n    local temp52=0\n    local temp53=0\n    local temp54=0\n    local temp55=0\n    local temp56=0\n    local temp57=0\n    local temp58=0\n    local temp59=0\n    local temp60=0\n    local temp61=0\n    local temp62=0\n    local temp63=0\n    local temp64=0\n    local temp65=0\n    local temp66=0\n    local temp67=0\n",
    "  local number=$1\n  local d=$2\n  local result=0\n  local i=0\n  local temp=0\n  for ((i=0; i<d; i++))\n  do\n    temp=$((number & 1))\n    number=$((number >> 1))\n    result=$((result | (temp << 31)))\n  done\n  echo $((number | result))"
  ]
}